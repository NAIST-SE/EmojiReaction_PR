cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/1937,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/goebish,2,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-193927834,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","For release it may be better to set V202 bitrate to 1Mbps so it's compatible with stock transmitters (250kbps is for DeviationTX only, protocol hacked for better range).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-193932670,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","OK, done.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-194530015,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","In long term, in would be better to implement USE_RX_PWM and USE_RX_PPM  (or combination of both) instead of SKIP_RX_PWM",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-194723288,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","""In long term, in would be better to implement USE_RX_PWM and USE_RX_PPM (or combination of both) instead of SKIP_RX_PWM""
Sorry I missed this one. I agree entirely on this. I don't like using double negatives. But using the USE_RX_PWM form would mean changes to all the target.h files. I think this can be done after this code is merged in.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-194795608,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","Sorry, no time to review unitests ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-195080382,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","Code has now been updated according to @ledvinap 's comments. Three issues still unaddressed:

Generic multi read function called by read register/payload function. Same for generic multi write function
Use of scaleRange() function for scaling RC channel values
rfChannels may be unaligned in setSymaXHoppingChannels function.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,8,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-195084394,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","@ledvinap , thanks again for your help.
When you next get some time, could you look at rx/rx.c and rx/nrf24.c which is the incorporation of the NRF24L01 receiver code into the Cleanflight receiver framework.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,9,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-195220861,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","@ledvinap , initialisation timings have now been fixed. Can you double check?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-215367376,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","@jamde , Naze support for NRF24 is not yet fully implemented. It's something I intend to get working though, probably in the next few weeks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-247295452,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","This needs a rebase.
Since the NAZE and target is already jam-packed and the CC3D is also only 128K I suggest we only support the NRF24 ONLY on a) developer targets like the EUSTM32F103/STM32F3DISCOVERY b) boards which have dedicated IO pins reserved for the purpose of connecting a NRF24 breakout board (CJMCU) and c) boards with an on-board NRF24 radio (CRAZEPONY).
Can you update this PR when you have time, I have suitable hardware here for testing the CJMCU build.
It might be worth considering adding a variant of the CJMCU which drops support for all other radios and telemetry systems - e.g. CJMCU_NRF24.  Otherwise I feel the 64K limit will be too much.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,12,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-247397874,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","@hydra , the code needs more than a rebase. It's evolved a fair amount since this PR, but I can back port it from iNav.
I'm happy for it to be used just for CJMCU, Crazepony and development boards. If there is demand we can add to further boards in future. And a NRF24 specific CJMCU build is a good idea - I have one for personal use",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-247847761,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","@hydra , just to give you an update on this one.
In iNav/betaflight I have generalised this code to support any receiver attached by SPI. As part of doing that I have also cleaned up the RX code. Once 1.14 is out I'll make a PR for this work.
Note also there are a couple of people interested in iNav/betaflight in supporting other SPI receivers, in particular and openLRSng receiver (as on the CC3D Revo board) and also the CC2500 receiver (as used by FrSky). I think those both could be interesting developments.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/lotelx,14,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-260185566,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","Any news about this issue?
It is possible with this commit to use NRF24L01 with MSP protocol?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/bousket,15,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-274051070,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","Hi. It s been a while I m waiting for this pull request. I would really appreciate to see NRF24l01 supported on NAZE32. Thx for the work
+1 for NAZE.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1937,2016-03-08T19:09:24Z,2017-02-25T16:55:37Z,2018-02-07T17:03:24Z,CLOSED,False,3992,85,38,https://github.com/martinbudden,Support for Crazepony MINI flight controller and NRF24L01 transceiver,11,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/1937,https://github.com/AsadMasood,16,https://github.com/cleanflight/cleanflight/pull/1937#issuecomment-363837768,"This PR addresses issue #1936 and issue #1935 .
This submission is a joint effort by @goebish and @martinbudden
@goebish provided

Crazepony MINI port of Cleanflight
NRF24L01 device driver
V202 transmitter protocol for NRF24L01
SPI implementation for CJMCU flight controller

@martinbudden provided:

Merge of code into latest version of Cleanflight
Some additional NRF24L01 device driver utility functions
SymaX, SymaX5C and Cheerson CX10 transmitter protocols for NFR24L01
Framework to allow setting of NRF24L01 transmitter protocol
Testcode

NRF24L01 receiver code and transmitter protocols are all under build #defines that can be set in the target.h file, so there is no ROM cost to other flight controllers.
The V202 transmitter protocol allows Cleanflight to be used withwith WLtoys V2x2 transmitters. These are cheaply available for under £20.
The SymaX and SymaX5C transmitter protocols allow Cleanflight to be used with Syma transmitters. These are cheaply available for under £20.
The CX10 transmitter protocol allows Cleanflight to be used with Cheerson CX10 transmitters.
With any of these protocols a Walker Devo transmitter with Deviationtx software and NRF24L01 modification could be used.
Note SPRACINGF3EVO target has been removed (temporarily) from Makefile since the SPRACINGF3EVO build is currently broken (see issue #1919).","Hi,
I'm trying to make a swarm of crazepony quadcopters. But I'm unable to establish communication NRF from my PC with the NRF of Crazepony quadcopter. Can someone help me out????
Perhaps there's a problem in handshaking of both the NRF.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/1948,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-196999561,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","ahh very interesting!  I have been thinking about cleanflight VTX support for a while now.
Can you also look into adding stick commands for 'enable vtx' and 'cycle channel' and 'cycle band' too?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-197044818,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","@hydra As a matter of fact, the code for stick commands already exists, derived from SINGULARITY support code written by MrBreakmore (@sblakemore) available at:
https://github.com/sblakemore/cleanflight/tree/singularity-cf
Let me do some code cleaning.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/jflyper,4,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-197045315,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.",@hydra  Do you prefer independent PR for the stick commands?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/jflyper,5,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-197047365,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","Oh, and 'enable vtx' is bit hard to implement, if it means commencing transmission. I have looked into this, and came up with (1) have a dedicated power supply, for example a pololu, and use an additional GPIO line to enable/disable it or (2) discover the usages of PA (Power Amplifier) control of RTC6705 chip. The (1) requires dedicated PS, and (2) requires some help from RTC6705 specialist.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/sblakemore,6,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-197207865,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","As mentioned there has already been work done in this area by Giles Burgess from multiflite.co.uk in creating a driver for the RTC6705 using a hardware SPI peripheral rather than bit banging. I then used his work, with permission, and added support for stick commands, as well as mapping channels to AUX ranges for use with switches. Code from my fork is actually already being used in a shipping product in the Singularity FC: http://singularity.impulserc.com/ There is full documentation on how my current implementation works here: http://singularity.impulserc.com/assets/files/manual.pdf
There has been a good amount of testing done over an extended period and I've come up with some methods for keeping things safe. Most notably that changing VTX frequencies only works before the quad is first armed. Once it's armed nothing can change again until the board is power cycled. This is important to stop things like a failsafe or accidentally knocking a switch while flying causing an accident by killing yours and/or your friends/competitors video.
I haven't submitted a PR before now since I didn't believe new targets were being accepted at the moment and wasn't aware the VTX code would be useful to anyone else.
I'm certainly very keen to see VTX support merged but it seems to me there is more than one use case. My code is targeted towards using a VTX module integrated with the FC on a hardware SPI peripheral, this PR is for re-purposing existing pins on an FC to drive an off the shelf VTX by bit banging, possibly with mods to enable the SPI interface of the specific module.
I think each have merit but it's worth considering both together before merging anything so they can live together nicely.
Perhaps an ideal approach would be for my to organise my repo a little better so that the Singularity target and the VTX support are in separate branches and then you can submit your bit bang driver as a pull request to me. That way we can work on integration of your run time based approach for configuring the pins with my compile time approach specific to a target using a dedicated SPI peripheral.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/sblakemore,7,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-197217089,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","I've gone ahead and separated out the VTX code into it's own branch, it needed doing anyway!
https://github.com/sblakemore/cleanflight/commits/vtx
There is some more code in there I've been working on that wasn't previously pushed anywhere public, including support for changing power output using a GPIO pin as well as some initial work to decouple things so that drivers for modules based on chips other than RTC6705 can be supported, however this would also accommodate your bit bang driver.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-223027704,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.",@sblakemore Yes the VTX code is much-wanted.  This is not forgotten.  There are a few things we need to do in cleanflight first though.  Please keep your code changes as isolated and mergable as possible so that we can get it merged in the near future.  Is there any chance you could send me a board and corresponding VTX so I have development hardware for testing with?  If so grab my email from a commit and drop me a message.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-223032455,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","@jflyper yes a new PR for the stick commands, cli commands and documentation (e.g. the stuff from the impulserc manual) would be perfect.  It seems quite isolated code so I don't expect any problems merging.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/sblakemore,10,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-230251784,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","@hydra Happy to send hardware for you to test. I did send you an email some time ago but had no response, did you receive it or should I try again?!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-253667604,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","@sblakemore yes, please try again!  I'm not sure if I saw it or responded, much has happened since july.
I have code locally with VTX support and a proper VTX API which I will publish soon.  Once it's done we can revisit this to update the code to support the VTX API.  The current high-level API is VTX agnostic and just requires the low level driver to implement a few basic functions.
Having hardware here that needs bit-banged support would be most helpful indeed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-257063183,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","blocked, pending merge of the new VTX code I have here.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/sblakemore,13,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-257189173,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","@hydra Sorry for the delay replying, I've been away at the Worlds for the last couple of weeks. More than happy to send you some hardware for testing. I just shot through another email.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1948,2016-03-13T00:48:03Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,640,2,16,https://github.com/jflyper,Bit-banged SPI based RTC6705 VTX support,2,"['Enhancement', 'Blocked']",https://github.com/cleanflight/cleanflight/pull/1948,https://github.com/jflyper,14,https://github.com/cleanflight/cleanflight/pull/1948#issuecomment-257220011,"Add support for VTX control.
For micro builds where every gram is a premier, or builds with concealed VTX, controlling the VTX from FC may be a good idea. This PR provides support for RTC6705 based VTX with SPI signal accessibility.  FX758-2 is an example of such VTX, and TX5823 could be used with a minor mod.
The SPI interface is driven with bit-banging SPI using any three unused GPIO ports.  Native/hardware SPI may be supported in the future.
The entire bit-banged VTX control is enabled by specifying a feature VTXBB.
In addition to the VTXBB feature, three GPIO ports for SPI signals must be specified with three CLI variables vtxbb_ss_pcode, vtxbb_sck_pcode and vtxbb_mosi_pcode, in 'port code' or 'pcode'.  A port code is a 3 digit number, with 100's place digit specifying GPIO group (GPIOA = 100, GPIOB = 200, ... GPIOF = 600), and lower two digits specifying pin number in decimal.  Port code examples are: PA2 = 102, PB11 = 211, PC13 = 313 and PF5 = 605.
CLI variables vtx_mode, vtx_band, vtx_chan and vtx_freq control a frequency which the VTX module will transmit on.  When vtx_mode = 0, the frequency is determined by vtx_band and vtx_chan according to the pre-defined table. When vtx_mode = 1, the frequency is determined directly by vtx_freq. (This scheme is partially compatible with multiFlite and SINGULARITY FC.)
The frequency is set only once upon initialization by init() in this PR.
Currently tested with NAZE and SPRACINGF3.","@hydra I read somewhere that you are coming up with a consolidated API for VTX. Can I review it somewhere? I'm working on the smartaudio support for BF (betaflight/betaflight#1283), and may put some provisioning for the API.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1951,2016-03-13T11:40:32Z,2016-03-15T20:02:03Z,2016-03-15T20:02:03Z,CLOSED,False,15,0,1,https://github.com/papaiatis,Added special wiring table for SP Racing F3 and PWM,1,[],https://github.com/cleanflight/cleanflight/pull/1951,https://github.com/papaiatis,1,https://github.com/cleanflight/cleanflight/pull/1951,Added a new section for wiring Parallel PWM and SP Racing F3 as it is not that trivial by first.,Added a new section for wiring Parallel PWM and SP Racing F3 as it is not that trivial by first.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1951,2016-03-13T11:40:32Z,2016-03-15T20:02:03Z,2016-03-15T20:02:03Z,CLOSED,False,15,0,1,https://github.com/papaiatis,Added special wiring table for SP Racing F3 and PWM,1,[],https://github.com/cleanflight/cleanflight/pull/1951,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1951#issuecomment-196998405,Added a new section for wiring Parallel PWM and SP Racing F3 as it is not that trivial by first.,"that doesn't belong there, the right place is in the Board - SPRacingF3.md file but the IO_1/IO_2 ports are already documented.  Furthermore the channel order is not required to be like that and users can adjust the channel mapping (order) in cleanflight.
Thanks for trying to help though 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1952,2016-03-14T22:18:20Z,2016-03-15T19:58:26Z,2016-03-15T19:58:26Z,CLOSED,False,2,0,1,https://github.com/fabio-cecamore,Add a video tutorial for CC3D flashing,1,[],https://github.com/cleanflight/cleanflight/pull/1952,https://github.com/fabio-cecamore,1,https://github.com/cleanflight/cleanflight/pull/1952,"Adding youtube link for tutorial of how do the flashing.
https://youtu.be/eClp-YBeSms","Adding youtube link for tutorial of how do the flashing.
https://youtu.be/eClp-YBeSms",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1952,2016-03-14T22:18:20Z,2016-03-15T19:58:26Z,2016-03-15T19:58:26Z,CLOSED,False,2,0,1,https://github.com/fabio-cecamore,Add a video tutorial for CC3D flashing,1,[],https://github.com/cleanflight/cleanflight/pull/1952,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1952#issuecomment-196997037,"Adding youtube link for tutorial of how do the flashing.
https://youtu.be/eClp-YBeSms","Videos always go out of date.  it's likely better to simply say 'videos demonstrating the process can be found on various social media outlets such as YouTube'.
If something is unclear then likely the cleanflight documentation needs updating or clarifying rather than duplicating the documentation effort.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1956,2016-03-15T22:41:15Z,2016-03-24T17:26:22Z,2016-03-24T22:51:19Z,MERGED,True,9,2,3,https://github.com/martinbudden,Improved formatting of tasks statistics in CLI.,2,[],https://github.com/cleanflight/cleanflight/pull/1956,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/1956,"Also added task frequency.
This fixes issue #1955.","Also added task frequency.
This fixes issue #1955.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1956,2016-03-15T22:41:15Z,2016-03-24T17:26:22Z,2016-03-24T22:51:19Z,MERGED,True,9,2,3,https://github.com/martinbudden,Improved formatting of tasks statistics in CLI.,2,[],https://github.com/cleanflight/cleanflight/pull/1956,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/1956#issuecomment-197076508,"Also added task frequency.
This fixes issue #1955.","Thanks, pulled this to iNav.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1956,2016-03-15T22:41:15Z,2016-03-24T17:26:22Z,2016-03-24T22:51:19Z,MERGED,True,9,2,3,https://github.com/martinbudden,Improved formatting of tasks statistics in CLI.,2,[],https://github.com/cleanflight/cleanflight/pull/1956,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/1956#issuecomment-197199938,"Also added task frequency.
This fixes issue #1955.",Great!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1956,2016-03-15T22:41:15Z,2016-03-24T17:26:22Z,2016-03-24T22:51:19Z,MERGED,True,9,2,3,https://github.com/martinbudden,Improved formatting of tasks statistics in CLI.,2,[],https://github.com/cleanflight/cleanflight/pull/1956,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/1956#issuecomment-199429457,"Also added task frequency.
This fixes issue #1955.","@digitalentity , I've updated this to include average and maximum loads for each task. You may wish to pull that change.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1957,2016-03-16T08:40:36Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,36,8,1,https://github.com/3djc,Doc althold,3,['Documentation'],https://github.com/cleanflight/cleanflight/pull/1957,https://github.com/3djc,1,https://github.com/cleanflight/cleanflight/pull/1957,"Document alt-hold
This would solve #203 and #1383 (and likely a few others)
Need help for making that more accurate and in proper english !","Document alt-hold
This would solve #203 and #1383 (and likely a few others)
Need help for making that more accurate and in proper english !",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1957,2016-03-16T08:40:36Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,36,8,1,https://github.com/3djc,Doc althold,3,['Documentation'],https://github.com/cleanflight/cleanflight/pull/1957,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1957#issuecomment-200819093,"Document alt-hold
This would solve #203 and #1383 (and likely a few others)
Need help for making that more accurate and in proper english !",please correct typos and I will merge.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1963,2016-03-17T19:03:44Z,2016-09-14T16:54:22Z,2016-09-14T16:54:22Z,MERGED,True,14,1,2,https://github.com/3djc,Cell volt on a4,2,[],https://github.com/cleanflight/cleanflight/pull/1963,https://github.com/3djc,1,https://github.com/cleanflight/cleanflight/pull/1963,"Either an alternative or a complement to #1927
Please read the discussion on #1927 thread :)","Either an alternative or a complement to #1927
Please read the discussion on #1927 thread :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1963,2016-03-17T19:03:44Z,2016-09-14T16:54:22Z,2016-09-14T16:54:22Z,MERGED,True,14,1,2,https://github.com/3djc,Cell volt on a4,2,[],https://github.com/cleanflight/cleanflight/pull/1963,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1963#issuecomment-247079714,"Either an alternative or a complement to #1927
Please read the discussion on #1927 thread :)","merged #1927 - I see no harm in merging this too, other than code size...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1966,2016-03-20T10:11:35Z,2016-05-09T08:05:44Z,2016-05-09T08:05:44Z,CLOSED,False,5,2,1,https://github.com/DzikuVx,OLED display - Battery page shown when data available,2,[],https://github.com/cleanflight/cleanflight/pull/1966,https://github.com/DzikuVx,1,https://github.com/cleanflight/cleanflight/pull/1966,OLED display Battery page displayed only when voltage or current monitoring is enabled,OLED display Battery page displayed only when voltage or current monitoring is enabled,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1966,2016-03-20T10:11:35Z,2016-05-09T08:05:44Z,2016-05-09T08:05:44Z,CLOSED,False,5,2,1,https://github.com/DzikuVx,OLED display - Battery page shown when data available,2,[],https://github.com/cleanflight/cleanflight/pull/1966,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/1966#issuecomment-217745500,OLED display Battery page displayed only when voltage or current monitoring is enabled,"@DzikuVx , I've incorporated this into PR #2108 which has been merged, so you can close this PR. Thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1969,2016-03-20T16:27:30Z,2016-06-11T13:08:06Z,2016-06-11T13:08:06Z,CLOSED,False,6,6,2,https://github.com/Pierre-A,update current_meter_type values in battery.md and CLI.md docs,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/1969,https://github.com/Pierre-A,1,https://github.com/cleanflight/cleanflight/pull/1969,As noticed by @XDA-Bam in issue #1968,As noticed by @XDA-Bam in issue #1968,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1969,2016-03-20T16:27:30Z,2016-06-11T13:08:06Z,2016-06-11T13:08:06Z,CLOSED,False,6,6,2,https://github.com/Pierre-A,update current_meter_type values in battery.md and CLI.md docs,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/1969,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/1969#issuecomment-225341087,As noticed by @XDA-Bam in issue #1968,"@Pierre-A , this PR has merge conflicts. Can you rebase and resolve and I'll merge it in. Thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1969,2016-03-20T16:27:30Z,2016-06-11T13:08:06Z,2016-06-11T13:08:06Z,CLOSED,False,6,6,2,https://github.com/Pierre-A,update current_meter_type values in battery.md and CLI.md docs,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/1969,https://github.com/XDA-Bam,3,https://github.com/cleanflight/cleanflight/pull/1969#issuecomment-225352789,As noticed by @XDA-Bam in issue #1968,"This has already been partially fixed by #2184. The latter is missing the changes to CLI.md, which must have been implemented otherwise, because the file is now corrected in the master branch.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1969,2016-03-20T16:27:30Z,2016-06-11T13:08:06Z,2016-06-11T13:08:06Z,CLOSED,False,6,6,2,https://github.com/Pierre-A,update current_meter_type values in battery.md and CLI.md docs,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/1969,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/1969#issuecomment-225360513,As noticed by @XDA-Bam in issue #1968,"@XDA-Bam , yes, it looks like this is all included. So I'll close the PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1970,2016-03-20T22:01:39Z,2016-04-17T10:24:00Z,2016-04-17T14:23:01Z,MERGED,True,125,74,10,https://github.com/martinbudden,Moved sonar pin assigmnents out of sonar.c into relevant target.h files.,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1970,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/1970,"Sonar pin assignments are now in the relevant target.h files. This means it is possible to add SONAR to a target without having to edit the sensors/sonar.c file.
This fixes issue #1860
I have done a diff of the preprocessor output file obj/main/<target>/sensors/sonar.i for all targets. The pin assignments haven't changed, so this is a safe change (there was some whitespace and other minor changes in the sonar.i files, though).","Sonar pin assignments are now in the relevant target.h files. This means it is possible to add SONAR to a target without having to edit the sensors/sonar.c file.
This fixes issue #1860
I have done a diff of the preprocessor output file obj/main/<target>/sensors/sonar.i for all targets. The pin assignments haven't changed, so this is a safe change (there was some whitespace and other minor changes in the sonar.i files, though).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1970,2016-03-20T22:01:39Z,2016-04-17T10:24:00Z,2016-04-17T14:23:01Z,MERGED,True,125,74,10,https://github.com/martinbudden,Moved sonar pin assigmnents out of sonar.c into relevant target.h files.,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1970,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/1970#issuecomment-210860885,"Sonar pin assignments are now in the relevant target.h files. This means it is possible to add SONAR to a target without having to edit the sensors/sonar.c file.
This fixes issue #1860
I have done a diff of the preprocessor output file obj/main/<target>/sensors/sonar.i for all targets. The pin assignments haven't changed, so this is a safe change (there was some whitespace and other minor changes in the sonar.i files, though).","@hydra , any chance of getting this in v1.13 as part of the general cleanup?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1970,2016-03-20T22:01:39Z,2016-04-17T10:24:00Z,2016-04-17T14:23:01Z,MERGED,True,125,74,10,https://github.com/martinbudden,Moved sonar pin assigmnents out of sonar.c into relevant target.h files.,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1970,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/1970#issuecomment-210993063,"Sonar pin assignments are now in the relevant target.h files. This means it is possible to add SONAR to a target without having to edit the sensors/sonar.c file.
This fixes issue #1860
I have done a diff of the preprocessor output file obj/main/<target>/sensors/sonar.i for all targets. The pin assignments haven't changed, so this is a safe change (there was some whitespace and other minor changes in the sonar.i files, though).",yes.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1971,2016-03-20T23:10:12Z,2016-03-24T17:27:41Z,2016-03-24T17:50:14Z,CLOSED,False,278,6,116,https://github.com/Windfisch,include dependencies in header files,4,[],https://github.com/cleanflight/cleanflight/pull/1971,https://github.com/Windfisch,1,https://github.com/cleanflight/cleanflight/pull/1971,"Changes all header files to include their necessary dependencies, instead of relying on the unit that uses them to do this. Please see issue #1967 for a detailed explanation.
Also adds some #pragma once to header files where this is missing.
This PR strictly doesn't touch any code, except for adding ""#include"" directives. It should not carry any functional changes.
This fixes issue #1967","Changes all header files to include their necessary dependencies, instead of relying on the unit that uses them to do this. Please see issue #1967 for a detailed explanation.
Also adds some #pragma once to header files where this is missing.
This PR strictly doesn't touch any code, except for adding ""#include"" directives. It should not carry any functional changes.
This fixes issue #1967",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1971,2016-03-20T23:10:12Z,2016-03-24T17:27:41Z,2016-03-24T17:50:14Z,CLOSED,False,278,6,116,https://github.com/Windfisch,include dependencies in header files,4,[],https://github.com/cleanflight/cleanflight/pull/1971,https://github.com/dkisselev,2,https://github.com/cleanflight/cleanflight/pull/1971#issuecomment-199073653,"Changes all header files to include their necessary dependencies, instead of relying on the unit that uses them to do this. Please see issue #1967 for a detailed explanation.
Also adds some #pragma once to header files where this is missing.
This PR strictly doesn't touch any code, except for adding ""#include"" directives. It should not carry any functional changes.
This fixes issue #1967","It looks like in some cases your changes cause duplicates in cases where the includes already exist (blackbox_io, among others have the problem). They're scattered throughout the changes. This is also introducing a lot of extra whitespace..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1971,2016-03-20T23:10:12Z,2016-03-24T17:27:41Z,2016-03-24T17:50:14Z,CLOSED,False,278,6,116,https://github.com/Windfisch,include dependencies in header files,4,[],https://github.com/cleanflight/cleanflight/pull/1971,https://github.com/Windfisch,3,https://github.com/cleanflight/cleanflight/pull/1971#issuecomment-199080408,"Changes all header files to include their necessary dependencies, instead of relying on the unit that uses them to do this. Please see issue #1967 for a detailed explanation.
Also adds some #pragma once to header files where this is missing.
This PR strictly doesn't touch any code, except for adding ""#include"" directives. It should not carry any functional changes.
This fixes issue #1967","oops, thanks! I've removed all the duplicated includes, and I also have removed any empty lines introduced by me.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1971,2016-03-20T23:10:12Z,2016-03-24T17:27:41Z,2016-03-24T17:50:14Z,CLOSED,False,278,6,116,https://github.com/Windfisch,include dependencies in header files,4,[],https://github.com/cleanflight/cleanflight/pull/1971,https://github.com/AndersHoglund,4,https://github.com/cleanflight/cleanflight/pull/1971#issuecomment-199943566,"Changes all header files to include their necessary dependencies, instead of relying on the unit that uses them to do this. Please see issue #1967 for a detailed explanation.
Also adds some #pragma once to header files where this is missing.
This PR strictly doesn't touch any code, except for adding ""#include"" directives. It should not carry any functional changes.
This fixes issue #1967","Very Good. I like this kind of structure, every file (.h .c or whatever) should take its own responsibility for its own dependencies, not relying on someone else doing it for you.  I have made objections earlier on some indirect deps beeing added to fix compile problems, ""un-clean"" quickfixes.
We should strive for living up to the bold name ""cleanflight"" by using clean methods and source code structure.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1971,2016-03-20T23:10:12Z,2016-03-24T17:27:41Z,2016-03-24T17:50:14Z,CLOSED,False,278,6,116,https://github.com/Windfisch,include dependencies in header files,4,[],https://github.com/cleanflight/cleanflight/pull/1971,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/1971#issuecomment-200937719,"Changes all header files to include their necessary dependencies, instead of relying on the unit that uses them to do this. Please see issue #1967 for a detailed explanation.
Also adds some #pragma once to header files where this is missing.
This PR strictly doesn't touch any code, except for adding ""#include"" directives. It should not carry any functional changes.
This fixes issue #1967","no.
at the moment we don't want this.
I specifically include all dependencies in order to highlight dependency and coupling issues.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1971,2016-03-20T23:10:12Z,2016-03-24T17:27:41Z,2016-03-24T17:50:14Z,CLOSED,False,278,6,116,https://github.com/Windfisch,include dependencies in header files,4,[],https://github.com/cleanflight/cleanflight/pull/1971,https://github.com/dkisselev,6,https://github.com/cleanflight/cleanflight/pull/1971#issuecomment-200947500,"Changes all header files to include their necessary dependencies, instead of relying on the unit that uses them to do this. Please see issue #1967 for a detailed explanation.
Also adds some #pragma once to header files where this is missing.
This PR strictly doesn't touch any code, except for adding ""#include"" directives. It should not carry any functional changes.
This fixes issue #1967","@hydra, what do you mean by

I specifically include all dependencies

The current code does not explicitly do that, this MR explicitly adds the dependency lists to each module.
If a module is too dependent/tightly coupled, shouldn't that be apparent when you see a painfully long include list at the top of the file, not when you go to make a change and the build fails because the code depends on some include that used to exist 3 layers up?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1974,2016-03-21T19:03:33Z,2016-03-24T17:31:51Z,2016-03-24T23:23:15Z,MERGED,True,122,93,13,https://github.com/martinbudden,Corrected use of axis indices,1,[],https://github.com/cleanflight/cleanflight/pull/1974,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/1974,"This fixes issue #1973
Additionally test code is added to assert equality between the corresponding axis indices.
This is a safe change, the compiled output is identical after this PR (this was tested by replacing __REVISION__ and __TIME__ in version.c with constant values).","This fixes issue #1973
Additionally test code is added to assert equality between the corresponding axis indices.
This is a safe change, the compiled output is identical after this PR (this was tested by replacing __REVISION__ and __TIME__ in version.c with constant values).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1974,2016-03-21T19:03:33Z,2016-03-24T17:31:51Z,2016-03-24T23:23:15Z,MERGED,True,122,93,13,https://github.com/martinbudden,Corrected use of axis indices,1,[],https://github.com/cleanflight/cleanflight/pull/1974,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1974#issuecomment-200940404,"This fixes issue #1973
Additionally test code is added to assert equality between the corresponding axis indices.
This is a safe change, the compiled output is identical after this PR (this was tested by replacing __REVISION__ and __TIME__ in version.c with constant values).","love your continued efforts of cleaning up the codebase @martinbudden
other developers take note!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1974,2016-03-21T19:03:33Z,2016-03-24T17:31:51Z,2016-03-24T23:23:15Z,MERGED,True,122,93,13,https://github.com/martinbudden,Corrected use of axis indices,1,[],https://github.com/cleanflight/cleanflight/pull/1974,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/1974#issuecomment-201070520,"This fixes issue #1973
Additionally test code is added to assert equality between the corresponding axis indices.
This is a safe change, the compiled output is identical after this PR (this was tested by replacing __REVISION__ and __TIME__ in version.c with constant values).","@ hydra , Glad this work is appreciated!
I have some other outstanding PRs that can be classified as pure cleanup, can you have a look at these for inclusion into https://github.com/cleanflight/cleanflight/milestones/1.13.0 . They are:

PR #1970 Moved sonar pin assigmnents out of sonar.c into relevant target.h files
PR #1802 Moved identifier definitions into serial_msp.c
PR #1798 Fixed const correctness of gpioInit functions.
PR #1682 Added two commands to reserve MSP values for future expansion.

A couple of these you have commented on in the past, and I have amended vis-à-vis your comments.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/1976,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201070864,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Wow, that's one hell of a change! 👍",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201214390,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",It will be nice when master_t is gone!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/Pierre-A,4,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201214976,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","re-woow, deep change and bravo or it, lot of work behind that and.. ahead..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201221394,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@Pierre-A after this is done I'll be looking at the menu system PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/Pierre-A,6,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201221791,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","fine, thanks for it",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201237786,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@ledvinap any chance you could work on updating the streamer and adding commits to this branch while I work on some of the other aspects?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201243752,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Hmm ... the code is promising.
You should try converting some profile-based config, maybe some problems will surface.
Packing structs is very dangerous - the code is ok as long as you use the struct (gcc knows that fields are packed), but taking address will cause problems. Only single-register instructions handle unaligned access correctly, ldrd/strd will cause hardfault. It may be quite a nightmare to debug, it may be compiler  dependent and the error may appear only after unrelated config change ...
(I worked on architecture where lower bit of unaligned access was silently discarded ... that was real FUN)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201293524,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra: What do you think about using (one of existing) crc16 to protect eeprom data? xor is quite fragile (chk(0xffffffff) == chk(0), so failed word write may be undetected)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201386227,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap yes, checksum algo can be changed, no problem.
If you can help with any of the above points that would be great.
I want to try and get the code to a working state and reduce master_t as much as possible.  some things I will do on the way.  I'm less concerned with the details right now and more concerned with the general architecture.  The implementation details we can cleanup before the next release candidate.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201462784,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",I just updated the PR description with some questions and possible answers to them.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,12,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201523988,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Comments to some of your questions
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
I think there are already plenty of bits in the parameter group record, so I don't think there is any need to add a flags property. As well as the top 4 bits of the id (by which I presume you mean the pgn), there are also the top (1or2) bits of the format property. I can't see that the format of a parameter group is going to change in an incompatible way more than a handful of times.
Indeed, I'm not even sure that there is a need for the format property. It is always possible to add more items to a parameter group by making it longer and adding them on the end. And if you really need to make an incompatible change, just create a new parameter group with a new id. Or have I missed something here?
To use the two currently migrated items as ""for instances"":
PG_BOARD_ALIGNMENT - I can't see this changing, let alone in an incompatible way
PG_FAILSAFE_CONFIG - yes, this is subject to change, but I don't think it would be difficult to keep the changes compatible. New failsafe properties may be added. And if we need to radically change the behaviour of existing properties, we can do this by adding new properties on the end and having them override the existing properties.
Remember we are not starting from scratch. Cleanflight is fairly mature, so there should are not going to be radical changes in many of the parameters. Agreed, as cleanup of legacy code continues there might arise cases where things need to be changed more radically, but I think this can be achieved by, as I said above, the addition of new parameter groups.
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group
from config)
I'm inclined to think we don't care.
b) how to upgrade from an old format to a new one?
Do we actually need to do this? See my comment to d), e) above.
a) how to reset a group to default values?
I don't really like the idea of a callback function. Sure, it will work, but in a way it is a 'lazy' answer - you can do anything with a callback. (The hinting language in TrueType comes to mind here as an example of how not to do it.)
I prefer the idea of a pointer to a data structure that contains the default values. There is some work here in designing a data structure that is efficient, since (I think) most of the parameter groups will default to having mostly zero values. Some thoughts on this data structure though:
i) As an initial cut, it could just be the values. We could arrange things so that the non-zero defaults are the first items of the data structure, so the entire structure does not need to be stored (of course this efficiency might be lost if the defaults change).
ii) as a second cut, the data structure could be a list of {offset,value} pairs, so that only no zero values are stored.
Having said that, I accept that the data structure idea might fail, but I'd rather see the use of a callback as a result of failure to be able to do something else, rather than as the initial proposal.
As you can probably infer from my comments above, I favour a parsimonious approach - do as little as you can to make this work (my favourite Einstein quote: ""make it as simple as possible, but no simpler' - even if it is apocryphal).
But I love this stuff, I think it is brilliant!
As an aside, it's great to see all the heuristic code inherited from multiwii and baseflight being replaced by proper math/computer science/engineering based solutions. Quaternions, proper filters, improved PIDs and now this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201533022,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Another thought, I would actually change:
typedef struct pgRegistry_s {
    // Base of the group in RAM.
    void *base;
...

to
typedef struct pgRegistry_s {
    // Base of the group in RAM.
    uint8_t *base;
...

since semantically base is pointing to a byte in RAM. I repeat, it's semantically pointing to a byte in RAM, not a structure of unknown type. Consider an alternate system (i.e. not Cleanflight) that used this mechanism to store large values, in this case base could point to a compressed representation of the pg - this illustrates that base is pointing to a byte stream, not a structure. (This also will avoid some byte alignment problems.)
Also, why do you do this:
uint8_t pgMatcherForMSPSet(const pgRegistry_t *candidate, const void *criteria)
{
    uint8_t index;
    uint8_t mspIdForSet = *(uint8_t *)criteria;

rather than this:
uint8_t pgMatcherForMSPSet(const pgRegistry_t *candidate, uint8_t mspIdForSet)
{
    uint8_t index;",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201561000,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden  to answer your last question first - because a function prototype is used for pgMatcher.  there is no specific criteria object or type.
yes regarding base i will look at that.
regarding default values, i don't like that approach as it assumes the default value is never programmatically defined at runtime.
we don't want to reorganize the data structures if we want to be able to use them as MSP responses.
with regards to extra fields, etc, i'm not going to attempt to save space right now, efficiency solutions can come after the system is actually working.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201564748,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","the biggest question currently, is how to switch profiles and how to store and maintain 3 seperate copies of items that are profile specific.
after dwelling on this for some time this evening I think I've come to the conclusion that flash reserved for the config should be split into 4 sections.
namely SYSTEM, PROFILE1, PROFILE2, PROFILE3.  Thus giving each one a seperate base address, that seems to be the key.
when structures are extracted from the profile_t structure the code doesn't know how big a profile is.
the profile switching code currently writes the config.
you run into problems when structures change size between firmware releases, as the items in the profile would be at different offsets when saving them, thus overwriting the profile you're trying to switch to if they were not stored in specific flash regions.
there's also a ram saving if we did this, since only one copy of the profile would need to be in ram at any given time, as opposed to 3 copies currently and changing the value in currentProfile.
there is much to consider here...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,16,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201582503,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , I agree on the approach of getting the code working, and then optimising it once it is working.
Although my initial argument against the format field was a space-saving one, the more I think about it the more I am convince that it is not needed, indeed that it is incorrect to have it.
Although I don't really like the callback for default values, I concede to your arguments.
I like the idea of splitting the config area of ROM into 4 sections - it's a neat solution and it avoids the need for a currentProfile pointer.
A question: presumably you are just proposing copies of the profile_t structure, not the whole of what is currently in master_t?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,17,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201724034,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , this all seemed very familiar to me, and now I've remembered why. This handling of configuration data is very much akin to resource file handling (except, of course, resource files are read only). I did a fair amount of work on resource files for the Psion MC and then later the Psion Series 3 (oh, fond days!). Psion resource files were very much simpler than Windows resource files. On a device there was a system resource file that contained locale (language) independent settings and multiple locale specific resource files which contained settings for that locale (mainly text strings). Changing language was merely a matter of using a different resource file. It is very much akin to your idea of having a SYSTEM config section of flash, and separate PROFILE sections. Changing a profile under Cleanflight is analogous to changing language under Psion OS. I say this to illustrate there is precedent for your idea, which gives confidence that it is the right approach (we have a case of convergent evolution).
Further thoughts on the format field.
I've been reading the original PRs form @nzmichaelh and it seems like his original proposal did not include the format field, and this was added at the behest of @digitalentity . See:
Incompatible changes
====================
An incompatible change is where a field is inserted, deleted from the
middle, reordered, resized, or has the meaning changed.  Such changes
should be handled by allocating a new PGN (preferred) or bumping the
PG level format field.

I'm convinced that incompatible changes are best handled by allocating a new PGN. Adding a format field adds complication and messiness to the implementation.
And a further (minor) comment
typedef struct pgRegistry_s {
    void *base;
    uint16_t size;
    pgn_t pgn;
    uint8_t format;
} pgRegistry_t;

I propose reordering that to (and renaming base to value):
typedef struct pgRegistry_s {
    pgn_t pgn;
    uint16_t size;
    void *value;
    uint8_t format;
} pgRegistry_t;

This makes it into a TLV (type, length value (or more precisely type, length, pointer to value)) structure. I simply propose this to avoid being different, and it can ease discussion, since we can talk about TLV and everybody knows what that means. Also having the pgn first makes it slightly easier if you ever have to look at ROM dumps or dumps of streams of serial data.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,18,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201725923,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Minor comment on pgMatcher
const pgRegistry_t* pgMatcher(pgMatcherFuncPtr func, const void *criteria)
{
    PG_FOREACH(reg) {
        if (func(reg, criteria)) {
            return reg;
        }
    }
    return NULL;
}

reads better as
const pgRegistry_t* pgMatcher(pgMatcherFuncPtr match, const void *criteria)
{
    PG_FOREACH(reg) {
        if (match(reg, criteria)) {
            return reg;
        }
    }
    return NULL;
}

This will be especially true if we change the style of function pointer as proposed by @ledvinap .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,19,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-201754461,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","I've just added a test to serial_msp_unittest.cc that tests boardAlignment. See PR #1986
I haven't actually tried it on the configuration-storage branch, but with a oneline change  it should be usable with the new parameter group code.
[As an aside, there's too much spoofing going on to make the test code work - when all the pg stuff is done, some minor refactoring to serial_msp.c will make writing tests much easier - I can do that if you like, but as I said, I'll wait for all the pg stuff to be complete first.]",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202046969,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@martinbudden thanks for all the feedback.  I'm gonna continue working on this today and we'll see what i come up with.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202064983,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","ok so the approach to using 4 memory areas for each part, master/profile1/profile2/profile3 isn't going to work because the flash page size is greater than the profile.  we'd have to use too many pages.
6 pages on a 128k target - 1kb each page - too much.
5 pages on 256k targert - 2kb each page - way too much wasted space.
currently:
masterConfig is 2056 bytes.
each profile is 420 bytes.
it seems keeping the config and all three profiles in ram all the time is the only solution and write them all out at the same time.  this presents a problem as the implementation only has one load address.
i'm not seeing any solutions at this point to the profile switching problem.  I will ponder more...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202067751,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",i think i have a solution... stay tuned.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202083448,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","ok, i have a working solution, i think.  a little more testing required...  here's the gist of it in test form.


    typedef struct someProfileSpecificData_s {
        uint8_t uint8;
        uint16_t uint16;
        uint32_t uint32;
    } PG_PACKED someProfileSpecificData_t;

    someProfileSpecificData_t someProfileSpecificDataStorage[MAX_PROFILE_COUNT];
    someProfileSpecificData_t *someProfileSpecificData;

...

const pgRegistry_t __pg_registry[] =
{
    {
        .base = &x...,
        .ptr = 0,
        .size = sizeof(x...),
        .pgn = 0,
        .format = 0,
        .flags = PGC_SYSTEM
    },
    {
        .base = &someProfileSpecificDataStorage,
        .ptr = (void**)&someProfileSpecificData,
        .size = sizeof(someProfileSpecificDataStorage[0]),
        .pgn = 1,
        .format = 0,
        .flags = PGC_PROFILE
    },
    {
        .base = nullptr,
        .ptr = 0,
        .size = 0,
        .pgn = 0,
        .format = 0,
        .flags = 0
    },
};

...

TEST(configTest, modifyProfile)
{
    resetEEPROM();

    // default profile is 0

    someProfileSpecificData->uint32 = 1;
    someProfileSpecificData->uint16 = 2;
    someProfileSpecificData->uint8  = 3;
    changeProfile(1); // changing saves the EEPROM

    someProfileSpecificData->uint32 = 4;
    someProfileSpecificData->uint16 = 5;
    someProfileSpecificData->uint8  = 6;
    changeProfile(2); // changing saves the EEPROM

    someProfileSpecificData->uint32 = 7;
    someProfileSpecificData->uint16 = 8;
    someProfileSpecificData->uint8  = 9;
    changeProfile(0);  // changing saves the EEPROM

    EXPECT_EQ(1, someProfileSpecificData->uint32);
    EXPECT_EQ(2, someProfileSpecificData->uint16);
    EXPECT_EQ(3, someProfileSpecificData->uint8);

    changeProfile(1); // changing saves the EEPROM
    EXPECT_EQ(4, someProfileSpecificData->uint32);
    EXPECT_EQ(5, someProfileSpecificData->uint16);
    EXPECT_EQ(6, someProfileSpecificData->uint8);

    changeProfile(2); // changing saves the EEPROM
    EXPECT_EQ(7, someProfileSpecificData->uint32);
    EXPECT_EQ(8, someProfileSpecificData->uint16);
    EXPECT_EQ(9, someProfileSpecificData->uint8);
}

that is currently passing, now I can refactor.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,24,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202101293,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","appears to be working outside of unit tests too,  migrated gimbalConfig.
# get gimbal
gimbal_mode = NORMAL

# set gimbal_mode=MIXTILT
gimbal_mode set to MIXTILT
# get gimbal
gimbal_mode = MIXTILT

# profile 1
profile 1

# get gimbal
gimbal_mode = NORMAL

# profile 0
profile 0

# get gimbal
gimbal_mode = MIXTILT

I'll add some commits.  Though I'll be the first to admit it needs more work 😄   but at least we now have something actually works that we can cleanup and progress with.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,25,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202112711,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","The basic idea is that we still hold data for all three profile in ram all the time.  The flash page size prevents us from doing otherwise (efficiently).
Each PG registation is annotated with flags to define wether it is a system or a profile registration.
Each PG configuration record is written with the profile number in the lower two bits of a flags field.
For profile registrations there are three main points:

the 'base' field points to an area of memory big enough to hold 3 copies of the configuration.
a 'ptr' field is set to an address of a pointer that will be updated to point to one of the copies.
When loading the config the appropriate memory is loaded with the data from the configuration record based on the flags.
when a profile is activated the pointer is updated to point to the appropriate configuration.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,26,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202125364,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra: With page-size buffer it is possible to move data in flash and do read-modify-write.
It will be possible to move profile structures on boot after profile size change and use read-modify-write to overwrite profiles. It will work even if configuration data are compressed (something like blackbox encoding)
It will need 1k of ram on small targets, but it can be shared with other functions (shared scratchpad)
The use of someProfileSpecificData_t *someProfileSpecificData; is inconsistent - addressing is different for mater config items and profile items. It will be probably best to use function returning pointer to config structure - gcc will inline/optimize it away for master config structures, it may calculate profile address on the fly or return cached pointer. Macro may be use to hide the function call, but that is probably unnecessary ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,27,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202127315,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , I'm busy over the next few days and probably won't get a chance to look at this properly. I have some comments based on a cursory look at things. I haven't got my head fully around this yet, so forgive me if my comments are mistaken.
Without wishing to sound too negative, I have some concerns about the RAM overhead. If I have understood things correctly there will be an in-RAM pgRegistry_t item for each configuration item. So, for example, there will be a pgRegistry_t structure in RAM for the gimbalConfig_t item. Now, even with optimisation these structures will be big, they include three pointers for a start (base, ptr and the yet to be added callback to set the default value). Now I haven't really paid much attention to the RAM available in flight controllers, but a quick web search seems to give the answer that a CC3D (for example) has 20K of RAM, presumably a NAZE has a similar amount. It seems to me that there is a real possibility that this will be exceeded. I would say, before you go too far down the current path, you should at least to a rough calculation of how much RAM is required - it would be terrible to do a huge amount of work only to find the result exceeds the RAM available for many of the FC targets.
I think that using a page buffer to do FLASH read-modify-write as suggested by @ledvinap might be a better approach.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,28,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202148379,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap I decided to avoid the 'page size buffer' approach.  it didn't feel right.
@martinbudden no, there's not an in-ram pgRegistry_t for each item, it's in flash.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,29,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202150088,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",profiles are now no longer stored in master_t with commit f56487c,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,30,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202159141,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap FYI with the latest code, FLOAT values in profile structures work fine with cliSetVar and cliPrintVar - though it may still be a coincidence and does need to be checked.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,31,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202704225,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra This is a great change.
I can see it applying to @ledvinap's IO changes also. This could also help do away with PWM and other IO mapping in the future, as (I know this goes against @ledvinap's original idea) but you could add in the corresponding IO (and timer device where required).
i.e. the idea of saying motor[1] uses PA1, and TIM2_CH2 (and storing it in the config for that motor). When configuring the motor it claims ownership of those resources, and anything else subsequently attempting to utilise it fails (configurator can provide warnings on overlaps / prevent it from happening).
Then it is not a case of perform PWM_MAPPING, but rather a more logical - initMotors(), and initServos(), initPPM() etc
We can then simplify the number of targets for the compiled hex (many will be identical then), and then have an option for base (the reset config) configuration files (selected via drop down) for the specific board?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,32,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202768714,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@blckmn yup, that's the kind of thing.  Glad you're in approval of all this too.  thanks for the feedback.
I'll be working more on this again today.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,33,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202826113,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra: Can you review #1981, mainly first two commits? It's a bit too intrusive to merge without review ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,34,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-202858186,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","OK, alignment problem in unittests is fixed now",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,35,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203012457,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",i cherry-picked 41599e2 into this branch.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/borisbstyle,36,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203021873,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","think also about lowering amount of profile parameters. There are many
things what could be moved to master config IMO
Op 29 mrt. 2016 19:29 schreef ""Dominic Clifton"" notifications@github.com:

i cherry-picked 41599e2
41599e2
into this branch.
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub
#1976 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,37,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203091505,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , I agree with @borisbstyle about removing things from the profiles. It's not really clear what the criterion for something being in a profile rather than the global config is.
Also


we could get rid of some parameters that aren't really used. emf_avoidance and the PID deltaMethod come to mind.


we could group together some parameters that currently are not grouped. So the ""IMU configuration"" and ""Arming configuration"" items could be made into groups.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,38,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203126029,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","We could also clean up some of the naming (and make it more consistent). Sometimes we refer to ""motors"" e.g. motor_pwm_rate and others ""esc"" e.g. escAndServoConfig. Given brushed versus brushless, It would seem logical then to simply call it a motor.
I am sure there are plenty more examples :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,39,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203339498,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@borisbstyle @martinbudden yes, now would be a good time to dump things from profiles that we do not need in them.  I however don't see the problem with leaving things in profiles other than flash space, especially now since the 'currentProfile' is going and the code is cleaner.
@martinbudden yes, i'm in the process of moving everything into structs.
@blckmn propose renaming things after everything is moved and still works.
focus focus focus.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,40,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203389683,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",I'll hold you to that @hydra ;) lol,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,41,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203391095,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@blckmn yeah, there's a difference between renaming something to enable moving it and just renaming it though 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,42,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203400549,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",This is true. Let me know if there is anything here I can do to help out. 😃,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,43,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203407351,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@blckmn checkout the branch and test it?  maybe i missed something.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,44,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203419199,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","the tests fail to build on OSX (El Capitan)
../main/sensors/boardalignment.c:35:50: error: argument to 'section' attribute is not valid for this target: mach-o section specifier requires a segment and
      section separated by a comma
static const pgRegistry_t boardAlignmentRegistry PG_REGISTRY_SECTION =
                                                 ^
../main/config/parameter_group.h:50:52: note: expanded from macro 'PG_REGISTRY_SECTION'
#define PG_REGISTRY_SECTION __attribute__((section("".pg_registry""), used))
                                                   ^",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,45,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203431424,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , there's a fix for the build problem in my PR #1986
Merge that in and all the tests will build and run. There are still some compiler warnings though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,46,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203443295,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@martinbudden ok great. i will do that for now and hopefully there will be a fix in #1981 soon,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/borisbstyle,47,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203670091,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",I see you came a long way here!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,48,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203794949,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , I think the names of a couple of the pgRegistry fields should be changed. format should be version (especially in light of the comment in the pgRegistry declaration ""bump when making incompatible changes...""), and I think base should be address.
Compare:
typedef struct pgRegistry_s {
    // Address of the group in RAM.
    uint8_t *address;
...
    // The in-memory version number.  Bump when making incompatible
    // changes to the PG.
    uint8_t version;
...
} pgRegistry_t;

to
typedef struct pgRegistry_s {
    // Base of the group in RAM.
    uint8_t *base;
...
    // The in-memory format number.  Bump when making incompatible
    // changes to the PG.
    uint8_t format;
...
} pgRegistry_t;",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,49,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203798853,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden , @hydra : Please postpone this after PG_ macros are merged. It will be localized change then.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,50,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203840166,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@ledvinap agreed.  I will merge #1981 before changing the structure or names of the fields as @martinbudden suggests.  he has good idea.  version is better than format and address is better than base.  especially for non-english speakers.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,51,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203865613,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@martinbudden can you make a PR to target the configuration-storage branch that address the renames you mentioned in #1976 (comment) please?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,52,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203884222,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , will do.
Note also that features_e enums should move out of config.h into feature.h",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,53,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203902568,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden no, i did that and moved them back 😄
I realised they had no place being there; actual features are not specific to the implementation of storing, checking and clearing features.  an upcoming change will move some general code into a lib folder, or similar.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,54,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203949600,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra:
The issue of global_config.item vs profile_config->item and array_config[index].item shall be addressed soon. Another round of refactoring will be probably necessary, may be easier to do in one step",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,55,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203953544,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","What about config arrays? Shall we handle them as special case? There will be same overhead, but it may handle config changes gracefully (pad old config when field is added to structure (for example adding field to motorMixer_t will make customMotorMixer invalid now; changing MAX_SUPPORTED_MOTORS will zero pad/strip now)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,56,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203954370,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","What about rateProfile? It may mimic profile - only only version available through API ..
Or API may provide access to other profiles?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,57,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-203978912,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","BTW: mixerLoadMix will probably hardfault if unaligned address is used. This won't get triggered in current code, but embedding motorMixer_t in packed structure may cause problems",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,58,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204007100,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","yeah, wait till I complete the extraction from master_t and profile_t before changing the addressing.
rateProfile is a bit different to profile since it's change in-flight, there certainly are some similarities though.
perhaps using more than a single bit to indicate system or profile and using a couple more bits as a reference.  e.g.
group id = master, groups = {0}
group id = profile, groups = {0,1,2},
group id = rateprofile, groups = {0,1,2},
dunno, just thinking out loud...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,59,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204035471,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","yeah, wait till I complete the extraction from master_t and profile_t before changing the addressing.
Ok, but that means double refactoring ...

As for rateProfile - interface is important. Implementation details should be hidden, they can be changed later ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,60,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204054805,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , started to look into PR for renames as per my comment. Before I started I tried to build the test code, and it no longer builds. Is the test code still working on your build, or is it local to me?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,61,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204066691,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden : Can you be more specific?
OSX unittests do not work now",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,62,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204077938,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","So I am building under OSX. I get 2 problems:
../main/sensors/boardalignment.c:33:1: error: argument to 'section' attribute is
      not valid for this target: mach-o section specifier requires a segment and
      section separated by a comma
PG_REGISTER(boardAlignment_t, boardAlignment, PG_BOARD_ALIGNMENT, 1);

which is to do with this (in parameter_group.h):
#define PG_REGISTER_ATTRIBUTES __attribute__ ((section("".pg_registry""), used, aligned(4)))

And then if I get rid of that problem I get a problem with the line:
    $(CXX) $(CXX_FLAGS) -Wl,-T,$(TEST_DIR)/parameter_group.ld $^ -o $(OBJECT_DIR)/$@

in the unit test makefile (it doesn't recognise the -T parameter).
I'm on gcc version 4.2.1 and running OSX 10.9.5 (Mavericks). OK, I know this is way out of date, but it hasn't caused any problems so far. I suspect an upgrade to gcc will fix the -T parameter problem, but I thing the .section problem is something else.
Anyway, I I know tests are not working for OSX I can work around that for the moment.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,63,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204083557,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , PR #1994 now ready. Renames as discussed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,64,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204087095,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Confusing code in parameter_group.c. I just noticed this:
void pgActivateProfile(uint8_t profileIndexToActivate)
{
    PG_FOREACH(reg) {
        if ((reg->flags & PGRF_CLASSIFICATON_BIT) != PGC_PROFILE) {
            continue;
        }
        uint8_t *ptr = reg->address + (profileIndexToActivate * reg->size);
        *(reg->ptr) = ptr;
    }
}

which just seems confusing. It seems much clearer to write:
void pgActivateProfile(uint8_t profileIndexToActivate)
{
    PG_FOREACH(reg) {
        if ((reg->flags & PGRF_CLASSIFICATON_BIT) == PGC_PROFILE) {
            uint8_t *ptr = reg->address + (profileIndexToActivate * reg->size);
            *(reg->ptr) = ptr;
        }
    }
}",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,65,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204087589,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","http://stackoverflow.com/questions/17669593/how-to-get-a-pointer-to-a-binary-section-in-mac-os-x
I'll look into it, but it will take some time until I get something with OSX ..
At least all unittest environments get checked quickly ;-)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,66,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204088309,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden : I implemented PG_FOREACH_PROFILE (https://github.com/cleanflight/cleanflight/blob/configuration-storage/src/main/config/parameter_group.h#L60) to hide implementation details. It's probably best to use it now, we can refactor code later",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,67,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204089727,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap , it's all right, I can look into OSX problem, now that I know that it wasn't working at all, rather than some problem with my setup.
On your other point, I agree, we can refactor later.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,68,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204095301,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden
If you can try it:
#if defined(__APPLE__)
extern const pgRegistry_t __pg_registry_start[] __asm(""section$start$__TEXT$__pg_registry"");
extern const pgRegistry_t __pg_registry_end[] __asm(""section$end$__TEXT$__pg_registry"");

#define PG_REGISTER_ATTRIBUTES __attribute__ ((section(""__TEXT,__pg_registry""), used, aligned(4)))
#else
// current version
#endif

And do not use -T parameter_group.ld in unittest Makefile",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,69,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204108301,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden awesome.  we divide and conquer!  I'll crack-on with the other changes.
right now the build works on:
a) travis
b) cygwin 64bit
c) cygwin 32bit",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,70,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204133463,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap , thanks for that. Question: shouldn't it be __DATA rather than __TEXT ?
Anyway, it solves the compile problem. But I'm still having problems at the link stage. In particular when I run the tests I get the following error:
../../obj/test/config_unittest
make: ../../obj/test/config_unittest: Permission denied

Looking at the file config_unittest it turns out it does not have execute permissions. Any ideas?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,71,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204146532,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden : __TEXT should be ok for constant,  shareable data. But you can try __DATA, it may work better.
Can you post
link step output
map file (-Wl,-Map,../../obj/test/config_unittest.map or maybe -Wl,-M)
verbose linker output (-Wl,--verbose)
output file info (otool -v -l config_unittest, totally guessing here)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,72,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204150715,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","ok guys, i'm done for tonight.  more tomorrow.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,73,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204175307,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap , thanks, those suggestions were enough for me to get it working myself. It still needs a bit of tidying, but I've got a working version now.
@hydra PR #1995 gets the tests building and running under OSX.
Aargh - but the travis tests don't work. I'll look at that
OK, travis tests now fixed, it's OK to take this PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,74,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204342803,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","configurator updated to support changes to MSP.
cleanflight/cleanflight-configurator@81a49d4",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,75,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204365118,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Joy! 😂  Rejoice!
Behold: config_master.h is no more - 4e714d4
Well done everyone involved!
profile_t still exists 😢 I will continue to work on extracting that.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/digitalentity,76,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204366224,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@hydra great! Impressive amount of work you and others do here! Thanks!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,77,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204367631,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra Brilliant!
Note that in mixer.c
motor3DConfig_t motor3DConfig;
PG_REGISTER(motor3DConfig_t, motor3DConfig, PG_MOTOR_3D_CONFIG, 0);

is erroneously under the #ifdef USE_SERVOS build flag.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,78,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204368104,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Stats for CJMCU
configuration-storage:
   text    data     bss     dec     hex filename
  62812     488    6928   70228   11254 ./obj/main/cleanflight_CJMCU.elf

master:
   text    data     bss     dec     hex filename
  62200     488    6996   69684   11034 ./obj/main/cleanflight_CJMCU.elf

Stats for SPRacingF3Mini:
configuration-storage:
   text    data     bss     dec     hex filename
 129232    1236   19176  149644   2488c ./obj/main/cleanflight_SPRACINGF3MINI.elf

master:
   text    data     bss     dec     hex filename
 128536    1232   19292  149060   24644 ./obj/main/cleanflight_SPRACINGF3MINI.elf

There is a significant ram saving with this PR.  The flash size has increased however, I expect it will continue to increase when things are extracted from the profile_t.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,79,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204368145,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden already fixed, i fixed it when I re-enabled the CJMCU target.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,80,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204368436,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",Any ideas on how to reduce the code size are welcomed at this stage.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,81,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204375536,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra :
Ad flash size:
Config registration has some overhead. There are currently ~35 configs.

ptrmay be dropped from registered structure (4B).
size and pgn may be uint8_t (4B due to alignment)

Stat will save ~280B, almost 40% of current flash increase..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,82,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204378097,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , I've several idea on how to reduce ROM size - that is one of my areas of speciality!
Primary one is to make the pgRegistry_t structure variable length in ROM. We could use bit flag or two two (say the top bits of the pgn) to indicate the length of the structure. This slightly complicates the PG_FOREACH iterator, but not by much at all. It also makes it neater in some ways, we add an inline  __pg_next function and the iterator becomes:
#define PG_FOREACH(_name) \
    for (const pgRegistry_t *(_name) = __pg_registry_start; (_name) < __pg_registry_end; _name=__pgNext(_name))

and then the increment of the pointer according to the flags occurs in the __pg_next function.
For many PGs, only address, size and pgn are required - that can all fit in 8 bytes. If ptr or version is needed, set a bit in the pgn.
And there is, of course, the previously discussed idea of using some bits in pgn as flags. A bit could certainly indicate PGC_SYSTEM or PGC_PROFILE
I can put some demo code together if you like.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,83,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204379357,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden yes please
Note that we still want to define and use the 'reset' callback handler in the structure too.  See PR description TODO list.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,84,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204380903,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Yes, I'd forgotten about the 'reset' callback. But that is easily incorporated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,85,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204388793,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",Added minor improvement/warning fix: #1997,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,86,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204392386,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Also current default-setting code is terribly ineffective. This is resetProfile funciton:
    .cfi_sections   .debug_frame
    .section    .text.resetPidProfile,""ax"",%progbits
    .align  1
    .global resetPidProfile
    .thumb
    .thumb_func
    .type   resetPidProfile, %function
resetPidProfile:
.LFB116:
    .file 1 ""./src/main/config/config.c""
    .loc 1 107 0
    .cfi_startproc
    @ args = 0, pretend = 0, frame = 0
    @ frame_needed = 0, uses_anonymous_args = 0
.LVL0:
    .loc 1 112 0
    movs    r3, #23 @ tmp117,
    strb    r3, [r0, #21]   @ tmp117, pidProfile_2(D)->D8
    .loc 1 115 0
    strb    r3, [r0, #22]   @ tmp117, pidProfile_2(D)->D8
    .loc 1 116 0
    movs    r3, #85 @ tmp125,
    strb    r3, [r0, #3]    @ tmp125, pidProfile_2(D)->P8
    .loc 1 118 0
    movs    r3, #0  @ tmp129,
    strb    r3, [r0, #23]   @ tmp129, pidProfile_2(D)->D8
    .loc 1 120 0
    strb    r3, [r0, #14]   @ tmp129, pidProfile_2(D)->I8
    .loc 1 121 0
    strb    r3, [r0, #24]   @ tmp129, pidProfile_2(D)->D8
    .loc 1 123 0
    strb    r3, [r0, #15]   @ tmp129, pidProfile_2(D)->I8
    .loc 1 124 0
    strb    r3, [r0, #25]   @ tmp129, pidProfile_2(D)->D8
    .loc 1 125 0
    movs    r3, #34 @ tmp143,
    strb    r3, [r0, #6]    @ tmp143, pidProfile_2(D)->P8
    .loc 1 126 0
    movs    r3, #14 @ tmp145,
    strb    r3, [r0, #16]   @ tmp145, pidProfile_2(D)->I8
    .loc 1 127 0
    movs    r3, #53 @ tmp147,
    strb    r3, [r0, #26]   @ tmp147, pidProfile_2(D)->D8
    .loc 1 128 0
    movs    r3, #25 @ tmp149,
    strb    r3, [r0, #7]    @ tmp149, pidProfile_2(D)->P8
    .loc 1 129 0
    movs    r3, #33 @ tmp151,
    strb    r3, [r0, #17]   @ tmp151, pidProfile_2(D)->I8
    .loc 1 130 0
    movs    r3, #83 @ tmp153,
    strb    r3, [r0, #27]   @ tmp153, pidProfile_2(D)->D8
    .loc 1 131 0
    movs    r3, #20 @ tmp155,
    strb    r3, [r0, #8]    @ tmp155, pidProfile_2(D)->P8
    .loc 1 132 0
    movs    r3, #10 @ tmp157,
    strb    r3, [r0, #18]   @ tmp157, pidProfile_2(D)->I8
    .loc 1 133 0
    movs    r3, #100    @ tmp159,
    strb    r3, [r0, #28]   @ tmp159, pidProfile_2(D)->D8
    .loc 1 135 0
    movs    r3, #120    @ tmp163,
    strb    r3, [r0, #10]   @ tmp163, pidProfile_2(D)->P8
    .loc 1 139 0
    mov r3, #500    @ tmp170,
    .loc 1 110 0
    movs    r1, #40 @ tmp113,
    .loc 1 107 0
    push    {r4, r5, lr}    @
    .cfi_def_cfa_offset 12
    .cfi_offset 4, -12
    .cfi_offset 5, -8
    .cfi_offset 14, -4
    .loc 1 139 0
    strh    r3, [r0, #78]   @ movhi @ tmp170, pidProfile_2(D)->yaw_p_limit
    .loc 1 111 0
    movs    r4, #30 @ tmp115,
    .loc 1 119 0
    movs    r5, #50 @ tmp131,
    .loc 1 140 0
    movs    r3, #0  @ tmp171,
    .loc 1 108 0
    movs    r2, #1  @ tmp111,
    .loc 1 110 0
    strb    r1, [r0, #1]    @ tmp113, pidProfile_2(D)->P8
    .loc 1 111 0
    strb    r4, [r0, #11]   @ tmp115, pidProfile_2(D)->I8
    .loc 1 113 0
    strb    r1, [r0, #2]    @ tmp113, pidProfile_2(D)->P8
    .loc 1 114 0
    strb    r4, [r0, #12]   @ tmp115, pidProfile_2(D)->I8
    .loc 1 119 0
    strb    r5, [r0, #4]    @ tmp131, pidProfile_2(D)->P8
    .loc 1 117 0
    movs    r4, #45 @ tmp127,
    .loc 1 134 0
    strb    r1, [r0, #9]    @ tmp113, pidProfile_2(D)->P8
    .loc 1 140 0
    str r3, [r0, #80]   @ float @ tmp171, pidProfile_2(D)->dterm_cut_hz
    .loc 1 143 0
    ldr r1, .L2 @ tmp174,
    .loc 1 144 0
    ldr r3, .L2+4   @ tmp175,
    .loc 1 108 0
    strb    r2, [r0]    @ tmp111, pidProfile_2(D)->pidController
    .loc 1 122 0
    movs    r5, #15 @ tmp137,
    .loc 1 137 0
    strb    r2, [r0, #30]   @ tmp111, pidProfile_2(D)->D8
    .loc 1 141 0
    strb    r2, [r0, #84]   @ tmp111, pidProfile_2(D)->deltaMethod
    .loc 1 117 0
    strb    r4, [r0, #13]   @ tmp127, pidProfile_2(D)->I8
    .loc 1 122 0
    strb    r5, [r0, #5]    @ tmp137, pidProfile_2(D)->P8
    .loc 1 136 0
    strb    r4, [r0, #20]   @ tmp127, pidProfile_2(D)->I8
    .loc 1 143 0
    str r1, [r0, #32]   @ float @ tmp174, pidProfile_2(D)->P_f
    .loc 1 144 0
    str r3, [r0, #44]   @ float @ tmp175, pidProfile_2(D)->I_f
    .loc 1 147 0
    str r3, [r0, #48]   @ float @ tmp175, pidProfile_2(D)->I_f
    .loc 1 150 0
    str r3, [r0, #52]   @ float @ tmp175, pidProfile_2(D)->I_f
    .loc 1 151 0
    ldr r3, .L2+8   @ tmp182,
    str r3, [r0, #64]   @ float @ tmp182, pidProfile_2(D)->D_f
    .loc 1 152 0
    ldr r3, .L2+12  @ tmp183,
    .loc 1 145 0
    ldr r2, .L2+16  @ tmp176,
    .loc 1 152 0
    str r3, [r0, #68]   @ float @ tmp183, pidProfile_2(D)->A_level
    .loc 1 153 0
    ldr r3, .L2+20  @ tmp184,
    .loc 1 145 0
    str r2, [r0, #56]   @ float @ tmp176, pidProfile_2(D)->D_f
    .loc 1 148 0
    str r2, [r0, #60]   @ float @ tmp176, pidProfile_2(D)->D_f
    .loc 1 153 0
    str r3, [r0, #72]   @ float @ tmp184, pidProfile_2(D)->H_level
    .loc 1 149 0
    ldr r2, .L2+24  @ tmp180,
    .loc 1 146 0
    str r1, [r0, #36]   @ float @ tmp174, pidProfile_2(D)->P_f
    .loc 1 154 0
    movs    r3, #75 @ tmp185,
    .loc 1 149 0
    str r2, [r0, #40]   @ float @ tmp180, pidProfile_2(D)->P_f
    .loc 1 154 0
    strb    r3, [r0, #76]   @ tmp185, pidProfile_2(D)->H_sensitivity
    pop {r4, r5, pc}    @
.L3:
    .align  2
.L2:
    .word   1068708659
    .word   1053609165
    .word   1008981770
    .word   1084227584
    .word   1022739087
    .word   1077936128
    .word   1080033280
    .cfi_endproc

thats ~188 bytes just to fill structure that is 88 bytes long ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,87,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204395042,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap haha, cool!  yeah, likely cheaper to declare another structure and copy it in one go right?  or do you have another idea?  PR?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,88,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204406615,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra: Yes, but performance will be poor for structures with lots of zero members.
Some compressed format would best.
I can imagine using BOOST_PP to generate compressed data, but the implementation gets complicated quickly.
Some external program may be used to compress initialization data - generate raw structure image into special section and use external program to replace it with compressed variant. With some care both versions will work - running optimizer could be optional.
Another possibility is to use some config-description language (protocol buffers are one possibility) and use external tool to get structure definition, default values, min/max, description for configurator etc from one place. In long-term this is probably best variant (and hiding config internals will help a lot).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,89,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204412332,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap I'm ok with short term solutions that are more efficient code-size wise than the current implementation and that don't require compressed data or external tools.
why?  there are lots of outstanding PR's to merge.
perhaps there are better things to tackle right now and leave this initialisation for a later date.  maybe open a seperate issue for the inefficiencies of the current implementation.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,90,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204431608,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","See #1998
248bytes for just converting resetPidProfile. I hope the numbers are real ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,91,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204451150,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","I'd have to question the need to have the reset/initialisation data on the device at all.
The only benefit I can see is if you don't want to use configurator to reset the settings (serial terminal only, switch on RX).
Otherwise CFC can be the source, on flashing new firmware it can backup existing, flash code update, restore settings.
Am I missing something?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,92,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204454932,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@BLCM: It will be quite fragile/complicated without metainformation describing stored config ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/flounderscore,93,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204455601,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","If you rely on the configurator to store the defaults, it has to be updated everytime a new version of CF is released. Not to mention all the other firmwares sharing the same configurator (e.g. Betaflight).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,94,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204457400,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@flounderscore : Firmware may store only hash of default config, configurator may fetch complete version.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,95,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204459278,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@ledvinap @flounderscore can the defaults not be part of the hex used for flashing? Or even a separate download (like the hexes) - as targets could be minimised then? Then it's only restoring the backup to keep old settings that needs to be considered. That's then no different to getting settings for display / update by user - so not sure of the fragility ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,96,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204459931,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",... and definitely no update to configurator required each time. Only if a new setting were to be introduced. In which case you'd be updating it anyway in order for the user to modify the setting.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,97,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204461938,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Another advantage is you could change the defaults without a user needing to Re flash the device. Better defaults discovered, user hits reset settings, new defaults loaded.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,98,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204461969,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@blckmn @ledvinap @flounderscore let's postpone the discussion regarding where to get defaults from for now.  certainly there's a few ideas floating around here...
suggest raising a new issue to discuss and point it at the comments here.
I think right now we've got enough on our plate.  the 1.13.0 milestone is big enough already!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,99,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204462660,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","my current focus is to get this merged back into master as quickly as possible.  we could keep adding things till the cows come home...  this is part done when you can't take anything away from it. 😄
obviously we can refactor and add things once it's merged back into master as we see fit.  but we need to merge asap so other devs can update their PR's against this new code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,100,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204465105,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra then I'd recommend not committing to any major flash reduction (other than persisted size of the configured settings) until the defaults are sorted. I'll raise a separate issue.
Focus focus focus ;)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,101,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204466342,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@blckmn agreed. no major - correct.  small incremental improvements - yes.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,102,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204466501,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",😌 that last one was a big one - 68b571d,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,103,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204473811,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",FYI: I'm gonna try and get rid of config_profile.h today.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,104,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204504129,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , I've done some work on reducing the parameter group ROM footprint, see PR #2001
This uses spare bits in the parameter group to store the version and flags fields. Static inline accessor functions have been created (e.g. static inline uint8_t pgVersion(const pgRegistry_t* reg)) so now changes in how these fields are stored can be made by just editing parameter_group.h - if we decide to allocate the bits differently.
I had the intention of making the parameter group variable size, for SYSTEM and PROFILE parameter groups, but once the version and flags fields were spare bits in the parameter group it did not seem worthwhile - not a lot of saving for a fairly complicated linking operation.
Let me know what you think.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,105,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204504163,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","😂 😄
YES!
💥 profile_t is no more! - f636310
Woohoo!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,106,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204505266,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","""Woohoo!"" - I concur.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,107,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204520238,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden
With lto there is no need for 'static inline'.  Implement it in .c file and let compiler decide if it is worth inlining...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,108,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204522235,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap , well, inline is only advisory to the compiler - so it will decide if it is worth inlining. I don't have a strong preference for whether these helper functions are in the .h or the .c file.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,109,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204535363,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","with latest code-size reductions:
master

   text    data     bss     dec     hex filename
 128536    1232   19292  149060   24644 ./obj/main/cleanflight_SPRACINGF3MINI.elf

configuration-storage

   text    data     bss     dec     hex filename
 128812    1236   19188  149236   246f4 ./obj/main/cleanflight_SPRACINGF3MINI.elf

276 bytes flash added.
104 bytes ram saved.
and a whole load of code deleted and cleaned.
nice!
I'm very happy with this so far.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,110,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204537552,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Yes, it worked out very well.
When you started I had some worries that it might be costly in terms of ROM and RAM, but the results of a cost of only 276 bytes of ROM is pretty good indeed.
Is this ready to go into the master branch now, or do you have more stuff you want to do before that?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,111,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204540890,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden yes, it's worked out great.
the 'reset' code needs doing first.  i will do that tomorrow, after that's done i will merge to master.  should be trivial.
after that we can improve the addressing scheme as @ledvinap mentioned above in due course.  it's not a blocker right now but would be good to do before 1.13.0 final.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,112,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204541177,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","if people could further review the changes and give them an eye-ball that would be really helpful, i will look for comments and PR's tomorrow.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,113,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204556426,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@hydra changing addressing in master twice will be rebasing nightmare..,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,114,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204616097,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","either way there's loads of PR's right now so it's going to hurt regardless.
vote people:  either a) change addressing now, b) later.
and say why.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/digitalentity,115,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204617831,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@hydra if we are going to change addressing we better do it now - it's part of configuration storage refactoring anyway. Other PRs will have to be rebased and refactored only once if we do it now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,116,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204623120,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra looks like everything is working ok on NAZE (rev5). Bench tested a reset and reconfiguration of my settings, everything seems to work, no faults or failed settings.
out of interest here is my build output:
Config:
text    data   bss    dec     hex    filename
119788  996    14184  134968  20f38  ./obj/main/cleanflight_NAZE.elf

Master:
text    data   bss    dec     hex    filename
119668  996    14276  134940  20f1c  ./obj/main/cleanflight_NAZE.elf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,117,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204652241,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra my vote is for changing addressing later. My reasons:

I don't think the overall amount of pain will be more. Sure we'll have to rebase twice, but those two bits of rebasing will be reasonably independent, so the overall work is not more, it's just split into two chunks
From a purely personal point of view, I'd rather split the work over two rebases
If the current work is put into master, more people will start testing it
There has been a bit of a hiatus in other work - it would be good to do some catch-up here before the work on addressing starts
There are PRs that aren't effected by this at all
If people don't want to rebase twice, they can just wait until the addressing is put into master",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,118,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204657061,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra, a couple of issues that are slightly tangental to the configuration storage
(a) I've noticed that Boris has changed PidLuxFloat in betaflight 2.6.0 to use the same PIDs as the integer-based pid controllers i.e. PidLuxFloat now uses P8[], I8[] and D8[] (appropriately scaled) rather than P_f[], I_f[] and D_f[]. I think this is a very good thing:

It means people can change pid controllers without having to change their PID values
It neatly solves the problem of setting the floating point values in the configurator
It saves a bit of RAM and ROM

If you like, I can port this back into Cleanflight
(b) Default values. There has been some discussion (issue #1873) about default parameter values in Cleanflight. In particular (to paraphrase) should the default values be ""flies on most setups without adjustment"" or ""tuned for maximum performance"". So, for example, setting gyro_sync_denom to default to 2 means more setups can fly without adjustment, but it does not give maximal performance.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,119,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204658115,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",I am with @martinbudden on delaying the addressing change. The key for me is the testing of the current changes.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,120,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204671330,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","What I am proposing is to wrap configuration structure access in macro/inline function. This should isolate internal implementation (static struct for master, 'current' pointer for profile, *currentControlRateProfile) from code using it. We can work on internals later without touching rest of code.
All access to config is changed now:
-        serialize8(masterConfig.batteryConfig.vbatscale);
+        serialize8(batteryConfig.vbatscale);

-        serialize16(currentProfile->accelerometerTrims.values.pitch);
 +        serialize16(accelerometerConfig->accelerometerTrims.values.pitch);

-            ledConfig_t *ledConfig = &masterConfig.ledConfigs[i];
 +            ledConfig_t *ledConfig = &ledConfigs[i];

All that is necessary now is to find generic way to wrap this.
One possibility is inline function returning pointer to config structure, with index argument for array configs.
PG_DECLARE<xxx> macros can define this function as static inline (only macro needs to be modified)
Proposed change:
-        serialize8(masterConfig.batteryConfig.vbatscale);
+        serialize8(batteryConfig()->vbatscale);

-        serialize16(currentProfile->accelerometerTrims.values.pitch);
 +        serialize16(accelerometerConfig()->accelerometerTrims.values.pitch);

-            ledConfig_t *ledConfig = &masterConfig.ledConfigs[i];
 +            ledConfig_t *ledConfig = ledConfigs(i);

Generated code will be identical.
Without this, it will be probably necessary to change all places that use config again - about 700 places ..
Another advantage is that config can be migrated between profile and master without touching code using it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,121,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204674782,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap , if it that simple and you think you can get a PR in today, then yes, I agree - let's go for it.
@hydra - if we can get @ledvinap 's change in today, then let's go for it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,122,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204675722,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap ok, go for it.  we can transition to it today.
Any chance of a PR please?  I'll be back after 17:00 CET and would like to merge this to master today if possible.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,123,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204714882,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Working on it, but number of changes is hude. It will take some time",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,124,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204781595,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",ok. can you do a PR that has the macros you mentioned so we can see?  that's the important bit.  the changes to addressing we might be able to work on in parallel to speed things up.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,125,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204782971,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","#2004
Cleanup is pushed, can you cherry-pick it?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,126,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204783203,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",i will look now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,127,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204783647,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","i'll just merge #2004 as-is (once the build passes), needs no cherry pick.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,128,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204784093,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Added change commit and hude commit to convert everything ..
It does compile, but maybe it wasn't best idea.
Nice thing is that configuration access is explicit and quite consistent ..
But ... maybe there if more elegant way to get similar results",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,129,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204784315,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","It is a bit larger:
upstream:
 128748    1236   19188  149172   246b4 ./obj/main/cleanflight_SPRACINGF3MINI.elf
converted:
 128868    1236   19188  149292   2472c ./obj/main/cleanflight_SPRACINGF3MINI.elf

I converted some initialization into RESET, maybe some data got duplicated ... I'll investigate ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,130,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204792745,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","ok @ledvinap the changes seem fine.  it's not much larger and I'd wager we can make some other improvements further down the line.  e.g.  by deleting CLI 😄   The MINI tarrget is still WAY under the 256K flash size too.  plenty of room still for the GPS navigation stuff from @digitalentity  and the menus from @Pierre-A.   likely merging in the io stuff will get down on a bunch of code too.
@martinbudden @digitalentity @blckmn what do you guys thing to pr #2004 ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,131,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204798775,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra. I like it and think it's a good piece of work. I also like the flexibility it gives to change things in future without having a big impact on the code. I never shared @ledvinap 's optimism that it would come for free in terms of ROM size (in my experience compilers aren't as good as they should be for this sort of thing), but 120 bytes of ROM is fairly cheap. I've got a few bits of ROM saving up my sleeve for when things settle down. It would be good to build a 128K F1 machine that incorporates @digitalentity 's iNav stuff - I think that is in the realms of possibility.
I'm looking forward to seeing all this in the master branch.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,132,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204803231,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@hydra I concur with @martinbudden above. Though I do worry about becoming overzealous in the quest for packing it all into 128k :). I think code readability is more important. I'm looking forward to it all mergin.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,133,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204807014,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@blckmn , code readability and ROM saving are not mutually exclusive. For example, getting rid of old features that nobody uses and very few understand what they do both improves code readability and saves ROM.
Also refactoring old convoluted code that is difficult to understand also often saves ROM.
Often ""in the small"" optimisations for ROM saving make code less readable. But mostly ""in the large"" optimisations for ROM saving also make the code more readable.
To take a concrete example mixer.c is full of #ifdefs that are there to save ROM, but make the code very hard to read. I have plans to split the file into two (by splitting off the servo code into a different file), and get rid of most of the #ifdefs. I would not be at all surprised that when I do so I'll find some duplication that could be eliminated and so will save some ROM.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,134,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204807931,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@martinbudden I totally agree. It's the chasing of the small that I was referring to - where readability can be compromised for a marginal saving in bytes. :)  I'm just stating I prefer to err on the side of readability - given the choice. I fully understand they are not mutually exclusive.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,135,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204923632,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , a couple of minor points

You can #define SONAR and GTUNE in the CC3D target.h, there is plenty of room for them.
Reviewing what settings are in the profiles, it seems to me that gimbalConfig, accelerometerConfig, barometerConfig, and compassConfig should not be part of the profiles.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,136,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204928969,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Ok, i will merge #2004 now then.  A bit later on today I will merge this branch to master. 😄
I fully agree with you guys regarding readability vs code size and of course sometimes it's hard to find a balance.  software engineering is hard!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,137,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204938686,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Bench tested ok on Naze Rev5 and 6. Reconfiguration stores and reloads no problem.
text    data   bss    dec     hex    filename
119884  996    14184  135064  20f98  ./obj/main/cleanflight_NAZE.elf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,138,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204938893,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , I've spotted something I believe is wrong . I don't think it should hold up the merge, and it is fairly easily corrected, nevertheless I think it should be corrected in due course.
It's to do with the PIDs. Previously we had (using pidMultiWiiRewrite as an example, but it applies to all PIDs):
static void pidMultiWiiRewrite(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig,
        uint16_t max_angle_inclination, rollAndPitchTrims_t *angleTrim, rxConfig_t *rxConfig);

with the pidProfile 'dereferenced' in mw.c and passed into pid.c.
now we have
static void pidMultiWiiRewrite(controlRateConfig_t *controlRateConfig,
        uint16_t max_angle_inclination, rollAndPitchTrims_t *angleTrim, rxConfig_t *rxConfig);

with the pidProfile 'dereferenced' at each use of a pid item within pid.c
Much as device drivers should not know about the PG_REGISTER, neither should the PIDs. It's just wrong! As well as being wrong, it also makes writing test code more difficult (and that's hard enough as it is!)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,139,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204941472,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","#2005 :
upstream before conversion:
 128748    1236   19188  149172   246b4 ./obj/main/cleanflight_SPRACINGF3MINI.elf 
#2005:
 128748    1236   19188  149172   246b4 ./obj/main/cleanflight_SPRACINGF3MINI.elf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,140,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204945619,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden : Yes, you are probably right ...
IMO there are some configs that may be 'implicit' - rxConfig in pid case, or dependence on it should be removed completely.
'rcData' and 'rcCommand' is implicit and it's handling is source of many issues.
GPS_angle is implicit (and is ugly hack), angleTrim is a bit confusing (shouldn't it  fix attitude?)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,141,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204946638,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","PG_PACKED for config structures got lost ... only boardAlignment_t and failsafeConfig_t is packed. Should all configs be packed, or keep status quo for now?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,142,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204947549,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",I think there are a number of minor things that need fixing up. I don't think they should delay the merge into master. So let's fix up the PG_PACKED configs after the merge.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,143,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204948432,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap with regards to PG_PACKED.  I specifically decided NOT to pack things at this time.
We can do PR's to pack the structures as needed, once we confirm the code using the structures is OK - as you noted the existing code was not written with alignment in mind.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,144,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204979307,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","I have come to the conclusion that we should probably not be supporting PG_REGISTER_ARR - it further complicates the reset code and is currently broken since the memset() in pgReset only resets the first item in the array because the _size property is set to the size of an item and there is no length parameter.
i'm going to continue with the implementation, since it's mostly working now and has tests, and then remove the code and replace the two usages of PG_REGISTER_ARR and move the arrays into structures.  I did this already for array items in profiles for similar reasons.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,145,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204982016,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","scratch that - nope, just going to remove PG_REGISTER_ARR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,146,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204982120,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra: _ARR functions may be fixed .. Size with current implementation should be probably total size, not size of structure (it is my mistake, sizeof(_name) was replaced with sizeof(_type), should be sizeof(_type) * _size;
If something is array, it may be better to handle it as one (even implementing PG_*_PROFILE_ARR). It there is generic hierarchical storage support in future, it may be easier to  support arrays. Also _ARR functions may handle changes of size better ..
controlRateConfig, ledConfig, hsvColor, motorMixer, servoMixer is currently implemented as array.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,147,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204982539,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap ok, i will take another look.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,148,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204982769,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@hydra: Can you merge #2005 - should be safe,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,149,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204984100,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",BTW: colors should be renamed ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,150,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204984138,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap will do regarding #2005.
regarding arrays, there's still a big issue in pgLoad() - if the array size changes between old and new formats data for array items  > 1 will be turned into garbage when they are copied over the new in-memory structure.
unless i'm mistaken.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,151,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204984183,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","I'm of the mind we should not even attempt to load an old version, we should just reset it.   this kind of migration is likely better done in the configurator.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,152,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204984463,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Yes, arrays are not handled correctly in this respect.
Maybe we can use arrays where variable item count makes sense. Use item size for arrays, add item count into header when saving array into Flash and restore array correctly. It will even save same config memory (but it may cause memory overflow if user maxes all arrays)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,153,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204984555,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@ledvinap that's an interesting idea. but i don't like the idea of the overflow.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,154,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204984804,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","I also just realised. that with these changes we will be able to see exactly which parameters have been changed from their defaults - since every parameter group will have a reset function it will be possible to to compare an in-memory structure to another instance that has been reset - RAM permitting of course.
@stronnag will be happy",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,155,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204985139,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Overflow may be handled (streamer already knows how much space is available).
Currently nothing checks for overflow, but space required is constant for each target, so it should be cached early.
We may emit dummy config for each PG_REGISTER into special section that will be discarded after linking. linker will generate error when data won't fit (both for constant and variable-size versions)
Then just decide what to do in variable-size version when maximum possible space requirement is larger than available config storage ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,156,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204985666,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra: It's not that useful - what if user wants specific value is default? The value should behave as 'set', not as 'default' ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,157,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204997841,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@ledvinap true yes.  good point.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,158,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-204998213,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","ok, i have some working code here now.  gonna push it shortly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,159,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205002951,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","the next task is now to move all the reset*() methods from config.c into the appropriate source file and update the PG_REGISTER* calls to use the PG_REGISTER*_WITH_RESET().
it will be interesting to see what we have to do with regards to the target specific defaults...
@ledvinap it would be good if we could remove some of the logic to check to see if a registration has a reset callback and the macro duplication by always defining a reset function (e.g. pgReset_NoOp()) and updating the macros accordingly.  I'm not much of a macro expert so if you have ideas on this please share!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,160,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205003195,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@ledvinap regarding you point about 'set' vs 'default' you'd have to set some flag somewhere at the time you 'set' it.  and perhaps store it in the configRecord.  or another idea: only store configRecords that are not default...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,161,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205007608,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",ad defaults: I'am just saying that handling defaults is quite  complicated ... marking record as modified/dirty and saving only modified records is quite easy to implement and may work fine,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,162,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205008304,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , I've got a fix for the use of parameter groups in the PIDs. Give me 5 minutes and I'll post the PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,163,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205008601,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@hydra @ledvinap defaults just waste space on the device. It's not like you can 'reset' and fly. You just need to know if configured or not.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,164,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205008771,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",On that note do you even need to implement reset call backs? If removing from config.c - move to a solution to get them off the device.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,165,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205008783,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , can you merge PR #2007 ?
This fixes the pid controllers.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,166,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205009580,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@blckmn moving them off-device not easy.  there are at least 3 GUI programs i know of.  Maybe later but not as part of this PR.  it's a wider discussion IMHO.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,167,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205010384,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra understand, but then just leave them as is in config.c and make the change after the discussion and direction is set.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,168,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205010653,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",more similar cleanup commits coming.  @martinbudden you can rebase #2007 now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,169,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205010864,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@blckmn i disgree on your last point.  there is much merit in moving them now as part of this as it really helps with code isolation and dependencies.  see recent commits.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,170,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205011859,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@blckmn also - the system of loading and resetting things is broken until all parameter groups can be reset correctly via the pgLoad method.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,171,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205015167,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra if it's broken, and it's a fix makes sense.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,172,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205017725,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra : rxConfig_t contains failsafe_channel_configurations and channelRanges Maybe these can be separated, making reset simpler?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,173,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205018789,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@ledvinap I'll take a look at that one.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,174,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205020934,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",you guys are paying attention to the line-count of config.c and the ability to re-use and modularise the code that comes with this PR right?  I am.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,175,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205023572,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","As for reset - we may allocate default pointer in pgRegistry_t. Pointed data can be easily word-aligned (lowest 2 bits zero). These bit can be used to specify 4 categories of initializer:

raw data to be copied
function to init structure
(in future) extended initialization header / structure

One advantage to this approach is that PG_REGISTER macro does not need to know that type of initialization is used, everything is void* or intptr_t
Most of it will be hidden anyway, so we can change it later ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,176,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205024360,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , minor point, but .resetCallbackFunc is not really a callback, it's just a function. So I think it would be better to call it .resetFunc.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,177,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205024895,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden sure, PR to change it please.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,178,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205028960,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra , PR #2008, ""Changed 'resetCallbackFunc' to 'resetFunc'""",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,179,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205036341,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@ledvinap see 0b69266 - yes, much better.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,180,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205045234,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@hydra whilst I'm still adamant defaults shouldn't be on the device ;) - these reset changes look good,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,181,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205047832,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","ok, i think this is ready to merge to master now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,182,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205048047,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",BTW: There is SPI eeprom on CC3D. It should be quite easy to use it for configuration storage now ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/ledvinap,183,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205048357,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","reset functions my be implemented as weak alias (attribute ((weak, alias (""__f"")));). Then there will be no need for _WITH_RESET macro variant ..
I'll look into it ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,184,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205050762,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra config.c is looking good!
Yes, let's get this into master.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,185,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205053961,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",@ledvinap ok. will push that change into master,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,186,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205054107,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","MERGED!
@ledvinap @martinbudden THANKS!!!!  It's been really nice collaborating on this PR.
Like, seriously, thanks.  I learnt loads this week 😄 🎓  You guys are awesome.
I'd be suprised if something wasn't broken considering the amount of changes, but it's time for other devs to test now this is merged into master.  We can cleanup as we go.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/martinbudden,187,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205062836,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@hydra, @ledvinap , yes I've also enjoyed collaborating on this - especially since @hydra did all the heavy lifting. And I've learnt a lot too. In fact I've learnt loads since I started working on Cleanflight.
Likewise, I'd be surprised if nothing is broken.
BTW, are either of you UK (London or nearby) based? If so we could meet for a drink sometime...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,188,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205148627,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@martinbudden i was in london before I came out to the alps for the winter.  😄   I'm off to spain after the winter, hopefully for good - more flying space ✈️",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/blckmn,189,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205160786,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",This is a great change... well done. Which one is next ? :),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/Pierre-A,190,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205202187,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","back home after a one week trip and wooow very impressed !
Congratulations guys for that migration and your hard work in such a short time !
Time to play with...😏",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/MJ666,191,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-205206491,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...",Really great progress in this short time.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/hydra,192,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-206038743,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","@MJ666 yeah, it's great when I get some free time to code.  I found turning off all notifications on about 20 messenger apps helped...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1976,2016-03-24T21:52:36Z,2016-04-03T20:55:41Z,2016-04-06T12:29:07Z,MERGED,True,5978,3711,158,https://github.com/hydra,Refactor configuration storage,160,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1976,https://github.com/borisbstyle,193,https://github.com/cleanflight/cleanflight/pull/1976#issuecomment-206348685,"This continues where PR #1049 left off.
I consider this a critical PR for the 1.13.0 release.
At the moment only the boardAlignment and failsafeConfig were switched over to the new mechanism.  In time I will add commits that continue to remove structures from master_t and migrate the corresponding code to use the new storage mechanism.
There is great benefit in this PR:

Decoupled code.
Better tested code.
Users can migrate between different firmware revisions without a complete reconfiguration.
Less MSP code.
Easy backup/restore this is still migratable (as opposed to a full eeprom config backup)

Point 4 is a little contentious to me, i'm not 100% convinced that the configuration storage and MSP commands should be coupled.
IMHO there should be a new MSP command to retrieve parameter groups by an ID which also returns the parameter group format reference.   We shall see how this pans out in due course.
Unanswered questions:
a) how to reset a group to default values?
b) how to upgrade from an old format to a new one?
c) how to we know we've got or loaded all the required configuration (e.g. missing parameter group from config)
d) how do we know if a parameter group is system wide or profile based?
e) how do we handle profiles?
f) how do we switch profiles?
potential answers:
a.1) declare the parameter group with an initialiser callback if anything in the group needs a non-zero value?
b.1) declare the parameter group with an upgrade callback function.  when one is specified it could return true if successful, otherwise reset it to defaults?
b.2) don't reset it?
c.1) do we care?  maybe as long as all parameter groups are reset to defaults before loading the first one it's ok?
c.2) make a list, report to the user somehow?
d.1) add a unit8_t flags property to the parameter group definition and use 1 bit to indicate profile group or system group.
d.2) use the top 4 bits of the id field as flags and use 1 bit to indicate profile group or system group (same as d.1 but space efficient, 4096 id's is fine but 256 isn't).
e.1) add a uint8_t flags property to the parameter group record.  use 2 bits to indicate master/profile1/profile2/profile3?
TODO:

Create functions for each group of settings that are reset - extract them from resetConf()
Move reset code out of config.c and into the files that register the parameter groups.
rename escAndServoConfig to motorAndServoConfig
use consistent addressing -> or .  - likely getX()->...","Great job!
So far no things broken?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/1981,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-201274764,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","@hydra, what do you think?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-201548878,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Working on eeprom config storage (second commit). Some cleanup is needed.
Is it going in right direction?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202154755,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","yeah, this is great.  I was thinking that the way to fix my attempt was to use a linker script for the tests too but hadn't tried it.  I wish i'd seen your PR before i tried it but hadn't noticed it.
Yes, it's going in the right direction.
Can you please rebase this onto the current configuration-storage branch and update it for the use of profiles since the PG_REGISTER macro will need to be updated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202338033,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",Not finished yet,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202409440,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","@ledvinap would like to merge this today if you have time to progress it a little?
I will continue with #1976 by moving things out of master_t in the mean time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202823932,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Rebased and changed a bit
There are minor problems:

PG_REGISTER_ARR is ugly. Is it really necessary to have arrays in config? The array may be hidden inside structure ...
GNU ld is aligning different object files. alignment is 16 bytes on 64bit linux (unittest), this break registry. I currently added padding, but there should be more elegant way to solve this
PG_REGISTER_PROFILE(profile_t, currentProfile, PG_PROFILE, 0); naming is ugly, but it will be removed if all profile-dependent structures are moved into own sections",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202824866,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Also there is still difference between master (failsafeConfig.something) and profile (gimbalConfig->something).
What about failsafeConfig()->something / gimbalConfig()->something ? This is zero-ovehead and easily extensible. It may also provide better encapsulation (opaque pointers).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202875360,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","great thanks for the rebase.
with regards to the array.  possibly yes we could move them into structures.  At the moment i'm working on an approach where I change as little as possible, then later we can move arrays into structures if we decide to.
yes.  failsafeConfig()->something  rather than failsafeConfig.something or failsafeConfig->something would likely be better for encapsulation and for testing too.
again we can transition to this once master_t and profile_t are gone.  that is my current focus.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,10,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202883037,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","config declaration should be wrapped in macro:
#define PG_DECLARE(_type, _name)                \
    extern _type _name;                         \
    /**/

#define PG_DECLARE_PROFILE(_type, _name)        \
    extern _type *_name;                        \
    /**/

PG_DECLARE_PROFILE(gimbalConfig_t, gimbalConfig);
PG_DECLARE(sensorTrims_t, sensorTrims);

This will allow quick changes of underlying implementations and also mark all places where config variable is declared (making is distinct from other externs).
But where to include #include ""config/parameter_group.h"" ? In all c files using sensors.h ? Or is it ok in header file? Current #include policy is too restrictive",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202893658,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","i agree regarding the include policy, and yes it's a bit painful right now.  we will look to cleanup the include files, again later.  I'm very very wary of doing to many changes at once especially while there are unmerged changes in the forks that we want to pull back into cleanflight.  I want this the PR for the configuration storage to be very focussed.
We can then do another PR to do the cleanup - as someone else did very recently in #1971 - Likely we could resurrect that PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202894210,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","@ledvinap is this ready to be merged now?
I'm gonna try it locally and see how I get on.  Looks goood though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202902763,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","First two commits can be merged safely. config_writer still needs some polishing, but that can be done in later commit
The code in untested on real hardware, but I'am quite confident it did not break anything",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202912548,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Added PG_DECLARE
It will mark use of config structures, hiding another implementation aspect",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,15,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202972612,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",BTW: Can you please resolve #1829? It's extremely annoying ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-202998321,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",@ledvinap any idea regarding the linker problem?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,17,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203023227,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","working on it, but it looks quite bad. It seems that I can't execute .exe file under windows if it has section with arbitrary name .. I get  Exec format error with section, file executes when I remove it.
Whole linker script may be replaced on cygwin (seems that it did not change much lately) .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,18,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203030855,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","https://en.wikipedia.org/wiki/Portable_Executable

An executable image consists of several different regions, each of which require different memory protection; so the start of each section must be aligned to a page boundary.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,19,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203060919,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",@hydra: can you merge at least PG_DECLARE and PG_REGISTER ASAP? Converting all your changes is quite boring .. and it can save you a lot of typing,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203113821,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","@ledvinap  will do. and yes, agreed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203370286,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",i merged in 05ee71f,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203378102,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",i cannot merge in PG_REGISTER as it breaks the unit tests (on cygwin - my main development platform).  Please can you find a solution to the unresolved symbol/linker problem asap?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203379293,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","i just noticed that the merge of 05ee71f was broken so i removed it from the PR.
I will just wait till you've fixed the PG_REGISTER linker stuff and merge afterwards otherwise it's just wasting time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,24,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203385385,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Cygwin stuff is fixed since #1981 (comment), at least it tests ok on my machine (slightly newer gcc) ... Can you test it again?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,25,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203390453,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",i tried it this morning to no avail. let me double check.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,26,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203392336,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",Can you post build output? It works on gcc (GCC) 5.3.0 here,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,27,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203404556,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","here's the build output:
$ make test TESTS=serial_msp_unittest
cd src/test && make test || true
make[1]: Entering directory '/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test'
g++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 -Wl,-T,unit/parameter_group.ld -Wl,-verbose -Wl,-Map,../../obj/test/../../obj/test/serial_msp_unittest.map ../../obj/test/common/maths.o ../../obj/test/version.o ../../obj/test/io/serial.o ../../obj/test/io/serial_msp.o ../../obj/test/drivers/buf_writer.o ../../obj/test/config/parameter_group.o ../../obj/test/serial_msp_unittest.o ../../obj/test/gtest_main.a -o ../../obj/test/../../obj/test/serial_msp_unittest
GNU ld (GNU Binutils) 2.25
  Supported emulations:
   i386pe
using internal linker script:
==================================================
/* Default linker script, for normal executables */
/* Copyright (C) 2014 Free Software Foundation, Inc.
   Copying and distribution of this script, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  */
OUTPUT_FORMAT(pei-i386)
SEARCH_DIR(""/usr/i686-pc-cygwin/lib""); SEARCH_DIR(""/usr/lib""); SEARCH_DIR(""/usr/lib/w32api"");
SECTIONS
{
  /* Make the virtual address and file offset synced if the alignment is
     lower than the target page size. */
  . = SIZEOF_HEADERS;
  . = ALIGN(__section_alignment__);
  .text  __image_base__ + ( __section_alignment__ < 0x1000 ? . : __section_alignment__ ) :
  {
     *(.init)
    *(.text)
    *(SORT(.text$*))
     *(.text.*)
     *(.gnu.linkonce.t.*)
    *(.glue_7t)
    *(.glue_7)
     ___CTOR_LIST__ = .; __CTOR_LIST__ = . ;
                        LONG (-1);*(.ctors); *(.ctor); *(SORT(.ctors.*));  LONG (0);
     ___DTOR_LIST__ = .; __DTOR_LIST__ = . ;
                        LONG (-1); *(.dtors); *(.dtor); *(SORT(.dtors.*));  LONG (0);
     *(.fini)
    /* ??? Why is .gcc_exc here?  */
     *(.gcc_exc)
    PROVIDE (etext = .);
    PROVIDE (_etext = .);
     *(.gcc_except_table)
  }
  /* The Cygwin32 library uses a section to avoid copying certain data
     on fork.  This used to be named "".data"".  The linker used
     to include this between __data_start__ and __data_end__, but that
     breaks building the cygwin32 dll.  Instead, we name the section
     "".data_cygwin_nocopy"" and explicitly include it after __data_end__. */
  .data BLOCK(__section_alignment__) :
  {
    __data_start__ = . ;
    *(.data)
    *(.data2)
    *(SORT(.data$*))
    *(.jcr)
    __data_end__ = . ;
    *(.data_cygwin_nocopy)
  }
  .rdata BLOCK(__section_alignment__) :
  {
    *(.rdata)
             *(SORT(.rdata$*))
    __rt_psrelocs_start = .;
    *(.rdata_runtime_pseudo_reloc)
    __rt_psrelocs_end = .;
  }
  __rt_psrelocs_size = __rt_psrelocs_end - __rt_psrelocs_start;
  ___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  __RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  ___RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
  __RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
  .eh_frame BLOCK(__section_alignment__) :
  {
    *(.eh_frame*)
  }
  .pdata BLOCK(__section_alignment__) :
  {
    *(.pdata)
  }
  .bss BLOCK(__section_alignment__) :
  {
    __bss_start__ = . ;
    *(.bss)
    *(COMMON)
    __bss_end__ = . ;
  }
  .edata BLOCK(__section_alignment__) :
  {
    *(.edata)
  }
  /DISCARD/ :
  {
    *(.debug$S)
    *(.debug$T)
    *(.debug$F)
    *(.drectve)
     *(.note.GNU-stack)
     *(.gnu.lto_*)
  }
  .idata BLOCK(__section_alignment__) :
  {
    /* This cannot currently be handled with grouped sections.
        See pe.em:sort_sections.  */
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    __IAT_start__ = .;
    SORT(*)(.idata$5)
    __IAT_end__ = .;
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)
  }
  .CRT BLOCK(__section_alignment__) :
  {
    ___crt_xc_start__ = . ;
    *(SORT(.CRT$XC*))  /* C initialization */
    ___crt_xc_end__ = . ;
    ___crt_xi_start__ = . ;
    *(SORT(.CRT$XI*))  /* C++ initialization */
    ___crt_xi_end__ = . ;
    ___crt_xl_start__ = . ;
    *(SORT(.CRT$XL*))  /* TLS callbacks */
    /* ___crt_xl_end__ is defined in the TLS Directory support code */
    ___crt_xp_start__ = . ;
    *(SORT(.CRT$XP*))  /* Pre-termination */
    ___crt_xp_end__ = . ;
    ___crt_xt_start__ = . ;
    *(SORT(.CRT$XT*))  /* Termination */
    ___crt_xt_end__ = . ;
  }
  /* Windows TLS expects .tls$AAA to be at the start and .tls$ZZZ to be
     at the end of section.  This is important because _tls_start MUST
     be at the beginning of the section to enable SECREL32 relocations with TLS
     data.  */
  .tls BLOCK(__section_alignment__) :
  {
    ___tls_start__ = . ;
    *(.tls$AAA)
    *(.tls)
    *(.tls$)
    *(SORT(.tls$*))
    *(.tls$ZZZ)
    ___tls_end__ = . ;
  }
  .endjunk BLOCK(__section_alignment__) :
  {
    /* end is deprecated, don't use it */
    PROVIDE (end = .);
    PROVIDE ( _end = .);
     __end__ = .;
  }
  .rsrc BLOCK(__section_alignment__) : SUBALIGN(4)
  {
    *(.rsrc)
    *(.rsrc$*)
  }
  .reloc BLOCK(__section_alignment__) :
  {
    *(.reloc)
  }
  .stab BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.stab)
  }
  .stabstr BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.stabstr)
  }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section.  Unlike other targets that fake this by putting the
     section VMA at 0, the PE format will not allow it.  */
  /* DWARF 1.1 and DWARF 2.  */
  .debug_aranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_aranges)
  }
  .zdebug_aranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_aranges)
  }
  .debug_pubnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_pubnames)
  }
  .zdebug_pubnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_pubnames)
  }
  .debug_pubtypes BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_pubtypes)
  }
  .zdebug_pubtypes BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_pubtypes)
  }
  /* DWARF 2.  */
  .debug_info BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_info .gnu.linkonce.wi.*)
  }
  .zdebug_info BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_info .zdebug.gnu.linkonce.wi.*)
  }
  .debug_abbrev BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_abbrev)
  }
  .zdebug_abbrev BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_abbrev)
  }
  .debug_line BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_line)
  }
  .zdebug_line BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_line)
  }
  .debug_frame BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_frame*)
  }
  .zdebug_frame BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_frame*)
  }
  .debug_str BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_str)
  }
  .zdebug_str BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_str)
  }
  .debug_loc BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_loc)
  }
  .zdebug_loc BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_loc)
  }
  .debug_macinfo BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_macinfo)
  }
  .zdebug_macinfo BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_macinfo)
  }
  /* SGI/MIPS DWARF 2 extensions.  */
  .debug_weaknames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_weaknames)
  }
  .zdebug_weaknames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_weaknames)
  }
  .debug_funcnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_funcnames)
  }
  .zdebug_funcnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_funcnames)
  }
  .debug_typenames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_typenames)
  }
  .zdebug_typenames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_typenames)
  }
  .debug_varnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_varnames)
  }
  .zdebug_varnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_varnames)
  }
  .debug_macro BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_macro)
  }
  .zdebug_macro BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_macro)
  }
  /* DWARF 3.  */
  .debug_ranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_ranges)
  }
  .zdebug_ranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_ranges)
  }
  /* DWARF 4.  */
  .debug_types BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_types .gnu.linkonce.wt.*)
  }
  .zdebug_types BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_types .gnu.linkonce.wt.*)
  }
}


==================================================
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../crt0.o succeeded
/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../crt0.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/crtbegin.o succeeded
/usr/lib/gcc/i686-pc-cygwin/4.9.2/crtbegin.o
attempt to open ../../obj/test/common/maths.o succeeded
../../obj/test/common/maths.o
attempt to open ../../obj/test/version.o succeeded
../../obj/test/version.o
attempt to open ../../obj/test/io/serial.o succeeded
../../obj/test/io/serial.o
attempt to open ../../obj/test/io/serial_msp.o succeeded
../../obj/test/io/serial_msp.o
attempt to open ../../obj/test/drivers/buf_writer.o succeeded
../../obj/test/drivers/buf_writer.o
attempt to open ../../obj/test/config/parameter_group.o succeeded
../../obj/test/config/parameter_group.o
attempt to open ../../obj/test/serial_msp_unittest.o succeeded
../../obj/test/serial_msp_unittest.o
attempt to open ../../obj/test/gtest_main.a succeeded
(../../obj/test/gtest_main.a)gtest-all.o
(../../obj/test/gtest_main.a)gtest_main.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004063.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004043.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004041.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004040.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004039.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004038.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004037.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004033.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004031.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004025.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004022.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004017.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004015.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004013.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004011.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003816.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003811.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003278.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003277.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003275.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003273.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003270.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003267.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003193.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003190.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003186.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003183.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003172.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003165.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003160.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003159.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d003154.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d002931.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d002929.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d002632.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d002628.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001845.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001842.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001398.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001396.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001395.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001391.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001390.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001389.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001387.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001370.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001365.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001363.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001362.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001361.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001360.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001356.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001332.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001330.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001319.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001316.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001315.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001314.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001303.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001300.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001293.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001282.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001279.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001272.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001269.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001264.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001263.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001262.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001260.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001257.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001255.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001254.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001233.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001028.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d001025.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000690.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000656.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000536.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000533.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000525.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000524.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000521.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000519.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000511.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000509.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000508.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000507.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000505.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000504.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000501.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000495.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d000000.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libstdc++.dll.a)d004091.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc_s.dll.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc_s.dll.a)d000040.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc_s.dll.a)d000015.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc_s.dll.a)d000000.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc_s.dll.a)d000122.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/gcc.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc.a)_chkstk_ms.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libcygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/cygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libcygwin.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/cygwin.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/cygcygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libcygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/cygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libcygwin.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libcygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/cygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libcygwin.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/cygwin.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/cygcygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libcygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/cygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libcygwin.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../cygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000026.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000040.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000070.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000078.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000106.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000108.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000110.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000112.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000225.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000683.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000785.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000804.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000897.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000898.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000936.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000939.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000957.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000960.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000967.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000990.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001005.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001026.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001028.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001031.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001033.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001035.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001041.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001043.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001052.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001061.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001083.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001104.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001109.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001166.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001233.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001246.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001261.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001298.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001319.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001347.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001348.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001350.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001353.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001354.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001363.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001421.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001461.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001566.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001569.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001588.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001601.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001603.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001604.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001607.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001764.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001778.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001785.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001791.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001794.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001796.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001800.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001801.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001807.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001811.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001817.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001821.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001828.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001833.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001884.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001886.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001930.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001947.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001956.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001964.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001975.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d002002.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000026.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000040.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000070.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000078.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000106.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000108.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000110.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000112.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000225.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000683.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000785.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000804.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000897.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000898.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000936.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000939.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000957.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000960.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000967.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000990.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001005.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001026.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001028.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001031.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001033.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001035.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001041.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001043.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001052.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001061.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001083.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001104.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001109.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001166.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001233.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001246.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001261.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001298.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001319.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001347.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001348.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001350.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001353.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001354.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001363.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001421.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001461.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001566.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001569.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001588.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001601.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001603.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001604.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001607.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001764.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001778.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001785.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001791.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001794.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001796.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001800.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001801.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001807.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001811.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001817.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001821.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001828.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001833.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001884.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001886.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001930.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001947.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001956.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001964.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001975.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d002002.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)_cygwin_crt0_common.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)cygwin_crt0.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)dll_entry.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)dll_main.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)premain0.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)premain1.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)premain2.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)premain3.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)pseudo-reloc-dummy.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000000.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000201.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000267.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000272.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000294.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000386.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000583.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000757.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000862.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000864.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001330.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001428.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d001594.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d002058.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000757.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000862.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000864.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001330.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001428.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d001594.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)cygwin_attach_dll.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)d000885.o
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libcygwin.a)t-d000885.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libadvapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/advapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libadvapi32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/advapi32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/cygadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/advapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libadvapi32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libadvapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/advapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libadvapi32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/advapi32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/cygadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/advapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libadvapi32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libadvapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../advapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libadvapi32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../advapi32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../cygadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../advapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libadvapi32.a failed
attempt to open /usr/i686-pc-cygwin/lib/libadvapi32.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/advapi32.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/libadvapi32.a failed
attempt to open /usr/i686-pc-cygwin/lib/advapi32.lib failed
attempt to open /usr/i686-pc-cygwin/lib/cygadvapi32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libadvapi32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/advapi32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libadvapi32.a failed
attempt to open /usr/lib/libadvapi32.dll.a failed
attempt to open /usr/lib/advapi32.dll.a failed
attempt to open /usr/lib/libadvapi32.a failed
attempt to open /usr/lib/advapi32.lib failed
attempt to open /usr/lib/cygadvapi32.dll failed
attempt to open /usr/lib/libadvapi32.dll failed
attempt to open /usr/lib/advapi32.dll failed
attempt to open /usr/lib/libadvapi32.a failed
attempt to open /usr/lib/w32api/libadvapi32.dll.a failed
attempt to open /usr/lib/w32api/advapi32.dll.a failed
attempt to open /usr/lib/w32api/libadvapi32.a succeeded
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libshell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/shell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libshell32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/shell32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/cygshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/shell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libshell32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libshell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/shell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libshell32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/shell32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/cygshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/shell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libshell32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libshell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../shell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libshell32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../shell32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../cygshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../shell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libshell32.a failed
attempt to open /usr/i686-pc-cygwin/lib/libshell32.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/shell32.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/libshell32.a failed
attempt to open /usr/i686-pc-cygwin/lib/shell32.lib failed
attempt to open /usr/i686-pc-cygwin/lib/cygshell32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libshell32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/shell32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libshell32.a failed
attempt to open /usr/lib/libshell32.dll.a failed
attempt to open /usr/lib/shell32.dll.a failed
attempt to open /usr/lib/libshell32.a failed
attempt to open /usr/lib/shell32.lib failed
attempt to open /usr/lib/cygshell32.dll failed
attempt to open /usr/lib/libshell32.dll failed
attempt to open /usr/lib/shell32.dll failed
attempt to open /usr/lib/libshell32.a failed
attempt to open /usr/lib/w32api/libshell32.dll.a failed
attempt to open /usr/lib/w32api/shell32.dll.a failed
attempt to open /usr/lib/w32api/libshell32.a succeeded
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libuser32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/user32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libuser32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/user32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/cyguser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libuser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/user32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libuser32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libuser32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/user32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libuser32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/user32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/cyguser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libuser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/user32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libuser32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libuser32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../user32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libuser32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../user32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../cyguser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libuser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../user32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libuser32.a failed
attempt to open /usr/i686-pc-cygwin/lib/libuser32.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/user32.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/libuser32.a failed
attempt to open /usr/i686-pc-cygwin/lib/user32.lib failed
attempt to open /usr/i686-pc-cygwin/lib/cyguser32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libuser32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/user32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libuser32.a failed
attempt to open /usr/lib/libuser32.dll.a failed
attempt to open /usr/lib/user32.dll.a failed
attempt to open /usr/lib/libuser32.a failed
attempt to open /usr/lib/user32.lib failed
attempt to open /usr/lib/cyguser32.dll failed
attempt to open /usr/lib/libuser32.dll failed
attempt to open /usr/lib/user32.dll failed
attempt to open /usr/lib/libuser32.a failed
attempt to open /usr/lib/w32api/libuser32.dll.a failed
attempt to open /usr/lib/w32api/user32.dll.a failed
attempt to open /usr/lib/w32api/libuser32.a succeeded
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libkernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/kernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libkernel32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/kernel32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/cygkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/kernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libkernel32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libkernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/kernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libkernel32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/kernel32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/cygkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/kernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../../i686-pc-cygwin/lib/libkernel32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libkernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../kernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libkernel32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../kernel32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../cygkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../kernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../libkernel32.a failed
attempt to open /usr/i686-pc-cygwin/lib/libkernel32.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/kernel32.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/libkernel32.a failed
attempt to open /usr/i686-pc-cygwin/lib/kernel32.lib failed
attempt to open /usr/i686-pc-cygwin/lib/cygkernel32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libkernel32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/kernel32.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libkernel32.a failed
attempt to open /usr/lib/libkernel32.dll.a failed
attempt to open /usr/lib/kernel32.dll.a failed
attempt to open /usr/lib/libkernel32.a failed
attempt to open /usr/lib/kernel32.lib failed
attempt to open /usr/lib/cygkernel32.dll failed
attempt to open /usr/lib/libkernel32.dll failed
attempt to open /usr/lib/kernel32.dll failed
attempt to open /usr/lib/libkernel32.a failed
attempt to open /usr/lib/w32api/libkernel32.dll.a failed
attempt to open /usr/lib/w32api/kernel32.dll.a failed
attempt to open /usr/lib/w32api/libkernel32.a succeeded
(/usr/lib/w32api/libkernel32.a)dkpfs00581.o
(/usr/lib/w32api/libkernel32.a)dkpfs00533.o
(/usr/lib/w32api/libkernel32.a)dkpfh.o
(/usr/lib/w32api/libkernel32.a)dkpft.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc_s.dll.a succeeded
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/gcc.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/4.9.2/libgcc.a)_ctors.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../default-manifest.o succeeded
/usr/lib/gcc/i686-pc-cygwin/4.9.2/../../../default-manifest.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/4.9.2/crtend.o succeeded
/usr/lib/gcc/i686-pc-cygwin/4.9.2/crtend.o
../../obj/test/config/parameter_group.o: In function `pgFind':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:27: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:27: undefined reference to `__pg_registry_end'
../../obj/test/config/parameter_group.o: In function `pgMatcher':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:37: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:37: undefined reference to `__pg_registry_end'
../../obj/test/config/parameter_group.o: In function `pgResetAll':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:55: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:55: undefined reference to `__pg_registry_end'
collect2: error: ld returned 1 exit status
Makefile:670: recipe for target '../../obj/test/serial_msp_unittest' failed
make[1]: *** [../../obj/test/serial_msp_unittest] Error 1
make[1]: Leaving directory '/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test'",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,28,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203404788,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","$ ld -v
GNU ld (GNU Binutils) 2.25

$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/i686-pc-cygwin/4.9.2/lto-wrapper.exe
Target: i686-pc-cygwin
Configured with: /cygdrive/i/szsz/tmpp/gcc/gcc-4.9.2-3.i686/src/gcc-4.9.2/configure --srcdir=/cygdrive/i/szsz/tmpp/gcc/gcc-4.9.2-3.i686/src/gcc-4.9.2 --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --libexecdir=/usr/libexec --datadir=/usr/share --localstatedir=/var --sysconfdir=/etc --libdir=/usr/lib --datarootdir=/usr/share --docdir=/usr/share/doc/gcc --htmldir=/usr/share/doc/gcc/html -C --build=i686-pc-cygwin --host=i686-pc-cygwin --target=i686-pc-cygwin --without-libiconv-prefix --without-libintl-prefix --libexecdir=/usr/lib --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-arch=i686 --with-tune=generic --disable-sjlj-exceptions --enable-languages=ada,c,c++,fortran,java,lto,objc,obj-c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libgomp --disable-libitm --enable-libquadmath --enable-libquadmath-support --enable-libssp --enable-libada --enable-libjava --enable-libgcj-sublibs --disable-java-awt --disable-symvers --with-ecj-jar=/usr/share/java/ecj.jar --with-gnu-ld --with-gnu-as --with-cloog-include=/usr/include/cloog-isl --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id
Thread model: posix
gcc version 4.9.2 (GCC)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,29,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203408693,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","just tried with new gcc and binutils - details and log below.
(32bit cygwin, not 64 bit).
Hydra@HYDRA01 /cygdrive/d/My Documents/dev/embedded/cleanflight
$ ld -v
GNU ld (GNU Binutils) 2.25.2

Hydra@HYDRA01 /cygdrive/d/My Documents/dev/embedded/cleanflight
$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/i686-pc-cygwin/5.3.0/lto-wrapper.exe
Target: i686-pc-cygwin
Configured with: /cygdrive/i/szsz/tmpp/gcc/gcc-5.3.0-3.i686/src/gcc-5.3.0/configure --srcdir=/cygdrive/i/szsz/tmpp/gcc/gcc-5.3.0-3.i686/src/gcc-5.3.0 --prefix=/usr --exec-prefix=/usr --localstatedir=/var --sysconfdir=/etc --docdir=/usr/share/doc/gcc --htmldir=/usr/share/doc/gcc/html -C --build=i686-pc-cygwin --host=i686-pc-cygwin --target=i686-pc-cygwin --without-libiconv-prefix --without-libintl-prefix --libexecdir=/usr/lib --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-arch=i686 --with-tune=generic --disable-sjlj-exceptions --enable-languages=ada,c,c++,fortran,java,lto,objc,obj-c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libcilkrts --enable-libgomp --enable-libitm --enable-libquadmath --enable-libquadmath-support --enable-libssp --enable-libada --enable-libjava --enable-libgcj-sublibs --disable-java-awt --disable-symvers --with-ecj-jar=/usr/share/java/ecj.jar --with-gnu-ld --with-gnu-as --with-cloog-include=/usr/include/cloog-isl --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible
Thread model: posix
gcc version 5.3.0 (GCC)

Hydra@HYDRA01 /cygdrive/d/My Documents/dev/embedded/cleanflight
$ make clean TESTS=serial_msp_unittest
rm -f ./obj/cleanflight_NAZE.bin ./obj/cleanflight_NAZE.hex ./obj/main/cleanflight_NAZE.elf ./obj/main/NAZE/startup_stm32f10x_md_gcc.o ./obj/main/NAZE/drivers/accgyro_adxl345.o ./obj/main/NAZE/drivers/accgyro_bma280.o ./obj/main/NAZE/drivers/accgyro_l3g4200d.o ./obj/main/NAZE/drivers/accgyro_mma845x.o ./obj/main/NAZE/drivers/accgyro_mpu.o ./obj/main/NAZE/drivers/accgyro_mpu3050.o ./obj/main/NAZE/drivers/accgyro_mpu6050.o ./obj/main/NAZE/drivers/accgyro_mpu6500.o ./obj/main/NAZE/drivers/accgyro_spi_mpu6500.o ./obj/main/NAZE/drivers/adc.o ./obj/main/NAZE/drivers/adc_stm32f10x.o ./obj/main/NAZE/drivers/barometer_bmp085.o ./obj/main/NAZE/drivers/barometer_ms5611.o ./obj/main/NAZE/drivers/barometer_bmp280.o ./obj/main/NAZE/drivers/bus_spi.o ./obj/main/NAZE/drivers/bus_i2c_stm32f10x.o ./obj/main/NAZE/drivers/compass_hmc5883l.o ./obj/main/NAZE/drivers/display_ug2864hsweg01.o ./obj/main/NAZE/drivers/flash_m25p16.o ./obj/main/NAZE/drivers/gpio_stm32f10x.o ./obj/main/NAZE/drivers/inverter.o ./obj/main/NAZE/drivers/light_led_stm32f10x.o ./obj/main/NAZE/drivers/light_ws2811strip.o ./obj/main/NAZE/drivers/light_ws2811strip_stm32f10x.o ./obj/main/NAZE/drivers/sonar_hcsr04.o ./obj/main/NAZE/drivers/pwm_mapping.o ./obj/main/NAZE/drivers/pwm_output.o ./obj/main/NAZE/drivers/pwm_rx.o ./obj/main/NAZE/drivers/serial_softserial.o ./obj/main/NAZE/drivers/serial_uart.o ./obj/main/NAZE/drivers/serial_uart_stm32f10x.o ./obj/main/NAZE/drivers/sound_beeper_stm32f10x.o ./obj/main/NAZE/drivers/system_stm32f10x.o ./obj/main/NAZE/drivers/timer.o ./obj/main/NAZE/drivers/timer_stm32f10x.o ./obj/main/NAZE/io/flashfs.o ./obj/main/NAZE/hardware_revision.o ./obj/main/NAZE/flight/gtune.o ./obj/main/NAZE/flight/navigation.o ./obj/main/NAZE/flight/gps_conversion.o ./obj/main/NAZE/common/colorconversion.o ./obj/main/NAZE/io/gps.o ./obj/main/NAZE/io/ledstrip.o ./obj/main/NAZE/io/display.o ./obj/main/NAZE/telemetry/telemetry.o ./obj/main/NAZE/telemetry/frsky.o ./obj/main/NAZE/telemetry/hott.o ./obj/main/NAZE/telemetry/smartport.o ./obj/main/NAZE/telemetry/ltm.o ./obj/main/NAZE/sensors/sonar.o ./obj/main/NAZE/sensors/barometer.o ./obj/main/NAZE/blackbox/blackbox.o ./obj/main/NAZE/blackbox/blackbox_io.o ./obj/main/NAZE/build_config.o ./obj/main/NAZE/debug.o ./obj/main/NAZE/version.o ./obj/main/NAZE/hardware_revision.o ./obj/main/NAZE/config/config.o ./obj/main/NAZE/config/runtime_config.o ./obj/main/NAZE/config/config_streamer.o ./obj/main/NAZE/config/config_eeprom.o ./obj/main/NAZE/config/parameter_group.o ./obj/main/NAZE/common/maths.o ./obj/main/NAZE/common/printf.o ./obj/main/NAZE/common/typeconversion.o ./obj/main/NAZE/common/encoding.o ./obj/main/NAZE/common/filter.o ./obj/main/NAZE/scheduler.o ./obj/main/NAZE/scheduler_tasks.o ./obj/main/NAZE/main.o ./obj/main/NAZE/mw.o ./obj/main/NAZE/flight/altitudehold.o ./obj/main/NAZE/flight/failsafe.o ./obj/main/NAZE/flight/pid.o ./obj/main/NAZE/flight/imu.o ./obj/main/NAZE/flight/mixer.o ./obj/main/NAZE/drivers/bus_i2c_soft.o ./obj/main/NAZE/drivers/serial.o ./obj/main/NAZE/drivers/sound_beeper.o ./obj/main/NAZE/drivers/system.o ./obj/main/NAZE/drivers/dma.o ./obj/main/NAZE/drivers/buf_writer.o ./obj/main/NAZE/drivers/gyro_sync.o ./obj/main/NAZE/io/beeper.o ./obj/main/NAZE/io/gimbal.o ./obj/main/NAZE/io/escservo.o ./obj/main/NAZE/io/rc_controls.o ./obj/main/NAZE/io/rc_curves.o ./obj/main/NAZE/io/serial.o ./obj/main/NAZE/io/serial_1wire.o ./obj/main/NAZE/io/serial_cli.o ./obj/main/NAZE/io/serial_msp.o ./obj/main/NAZE/io/statusindicator.o ./obj/main/NAZE/rx/rx.o ./obj/main/NAZE/rx/pwm.o ./obj/main/NAZE/rx/msp.o ./obj/main/NAZE/rx/sbus.o ./obj/main/NAZE/rx/sumd.o ./obj/main/NAZE/rx/sumh.o ./obj/main/NAZE/rx/spektrum.o ./obj/main/NAZE/rx/xbus.o ./obj/main/NAZE/rx/ibus.o ./obj/main/NAZE/sensors/sensors.o ./obj/main/NAZE/sensors/acceleration.o ./obj/main/NAZE/sensors/battery.o ./obj/main/NAZE/sensors/boardalignment.o ./obj/main/NAZE/sensors/compass.o ./obj/main/NAZE/sensors/gyro.o ./obj/main/NAZE/sensors/initialisation.o ./obj/main/NAZE/core_cm3.o ./obj/main/NAZE/system_stm32f10x.o ./obj/main/NAZE/stm32f10x_gpio.o ./obj/main/NAZE/stm32f10x_fsmc.o ./obj/main/NAZE/stm32f10x_exti.o ./obj/main/NAZE/stm32f10x_bkp.o ./obj/main/NAZE/stm32f10x_spi.o ./obj/main/NAZE/stm32f10x_adc.o ./obj/main/NAZE/stm32f10x_iwdg.o ./obj/main/NAZE/misc.o ./obj/main/NAZE/stm32f10x_wwdg.o ./obj/main/NAZE/stm32f10x_tim.o ./obj/main/NAZE/stm32f10x_usart.o ./obj/main/NAZE/stm32f10x_flash.o ./obj/main/NAZE/stm32f10x_rcc.o ./obj/main/NAZE/stm32f10x_sdio.o ./obj/main/NAZE/stm32f10x_i2c.o ./obj/main/NAZE/stm32f10x_pwr.o ./obj/main/NAZE/stm32f10x_rtc.o ./obj/main/NAZE/stm32f10x_dac.o ./obj/main/NAZE/stm32f10x_dbgmcu.o ./obj/main/NAZE/stm32f10x_dma.o ./obj/main/cleanflight_NAZE.map
rm -rf ./obj/main/NAZE
cd src/test && make clean || true
make[1]: Entering directory '/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test'
rm -rf ../../obj/test
make[1]: Leaving directory '/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test'

Hydra@HYDRA01 /cygdrive/d/My Documents/dev/embedded/cleanflight
$ make test TESTS=serial_msp_unittest
cd src/test && make test || true
make[1]: Entering directory '/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test'
cc -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu99 -Iunit -I../main -c ../main/common/maths.c -o ../../obj/test/common/maths.o
cc -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu99 -Iunit -I../main -D'__TARGET__=""TEST""' -D'__REVISION__=""revision""' -c ../main/version.c -o ../../obj/test/version.o
cc -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu99 -Iunit -I../main -c ../main/io/serial.c -o ../../obj/test/io/serial.o
cc -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu99 -Iunit -I../main -c ../main/io/serial_msp.c -o ../../obj/test/io/serial_msp.o
cc -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu99 -Iunit -I../main -D'__TARGET__=""TEST""' -D'__REVISION__=""revision""' -c ../main/drivers/buf_writer.c -o ../../obj/test/drivers/buf_writer.o
cc -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu99 -Iunit -I../main -D'FLASH_SIZE = 128' -DSTM32F10X_MD -c ../main/config/parameter_group.c -o ../../obj/test/config/parameter_group.o
g++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 -Iunit -I../main -c unit/serial_msp_unittest.cc -o ../../obj/test/serial_msp_unittest.o
g++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 -I../../lib/test/gtest -Wno-missing-field-initializers -Wno-unused-const-variable -c \
            ../../lib/test/gtest/src/gtest-all.cc -o ../../obj/test/gtest-all.o
g++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 -I../../lib/test/gtest -c \
            ../../lib/test/gtest/src/gtest_main.cc -o ../../obj/test/gtest_main.o
ar rv ../../obj/test/gtest_main.a ../../obj/test/gtest-all.o ../../obj/test/gtest_main.o
ar: creating ../../obj/test/gtest_main.a
a - ../../obj/test/gtest-all.o
a - ../../obj/test/gtest_main.o
g++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 -Wl,-T,unit/parameter_group.ld -Wl,-verbose -Wl,-Map,../../obj/test/../../obj/test/serial_msp_unittest.map ../../obj/test/common/maths.o ../../obj/test/version.o ../../obj/test/io/serial.o ../../obj/test/io/serial_msp.o ../../obj/test/drivers/buf_writer.o ../../obj/test/config/parameter_group.o ../../obj/test/serial_msp_unittest.o ../../obj/test/gtest_main.a -o ../../obj/test/../../obj/test/serial_msp_unittest
GNU ld (GNU Binutils) 2.25.2
  Supported emulations:
   i386pe
using internal linker script:
==================================================
/* Default linker script, for normal executables */
/* Copyright (C) 2014 Free Software Foundation, Inc.
   Copying and distribution of this script, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  */
OUTPUT_FORMAT(pei-i386)
SEARCH_DIR(""/usr/i686-pc-cygwin/lib""); SEARCH_DIR(""/usr/lib""); SEARCH_DIR(""/usr/lib/w32api"");
SECTIONS
{
  /* Make the virtual address and file offset synced if the alignment is
     lower than the target page size. */
  . = SIZEOF_HEADERS;
  . = ALIGN(__section_alignment__);
  .text  __image_base__ + ( __section_alignment__ < 0x1000 ? . : __section_alignment__ ) :
  {
     *(.init)
    *(.text)
    *(SORT(.text$*))
     *(.text.*)
     *(.gnu.linkonce.t.*)
    *(.glue_7t)
    *(.glue_7)
     ___CTOR_LIST__ = .; __CTOR_LIST__ = . ;
                        LONG (-1);*(.ctors); *(.ctor); *(SORT(.ctors.*));  LONG (0);
     ___DTOR_LIST__ = .; __DTOR_LIST__ = . ;
                        LONG (-1); *(.dtors); *(.dtor); *(SORT(.dtors.*));  LONG (0);
     *(.fini)
    /* ??? Why is .gcc_exc here?  */
     *(.gcc_exc)
    PROVIDE (etext = .);
    PROVIDE (_etext = .);
     *(.gcc_except_table)
  }
  /* The Cygwin32 library uses a section to avoid copying certain data
     on fork.  This used to be named "".data"".  The linker used
     to include this between __data_start__ and __data_end__, but that
     breaks building the cygwin32 dll.  Instead, we name the section
     "".data_cygwin_nocopy"" and explicitly include it after __data_end__. */
  .data BLOCK(__section_alignment__) :
  {
    __data_start__ = . ;
    *(.data)
    *(.data2)
    *(SORT(.data$*))
    *(.jcr)
    __data_end__ = . ;
    *(.data_cygwin_nocopy)
  }
  .rdata BLOCK(__section_alignment__) :
  {
    *(.rdata)
             *(SORT(.rdata$*))
    __rt_psrelocs_start = .;
    *(.rdata_runtime_pseudo_reloc)
    __rt_psrelocs_end = .;
  }
  __rt_psrelocs_size = __rt_psrelocs_end - __rt_psrelocs_start;
  ___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  __RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  ___RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
  __RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
  .eh_frame BLOCK(__section_alignment__) :
  {
    *(.eh_frame*)
  }
  .pdata BLOCK(__section_alignment__) :
  {
    *(.pdata)
  }
  .bss BLOCK(__section_alignment__) :
  {
    __bss_start__ = . ;
    *(.bss)
    *(COMMON)
    __bss_end__ = . ;
  }
  .edata BLOCK(__section_alignment__) :
  {
    *(.edata)
  }
  /DISCARD/ :
  {
    *(.debug$S)
    *(.debug$T)
    *(.debug$F)
    *(.drectve)
     *(.note.GNU-stack)
     *(.gnu.lto_*)
  }
  .idata BLOCK(__section_alignment__) :
  {
    /* This cannot currently be handled with grouped sections.
        See pe.em:sort_sections.  */
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    __IAT_start__ = .;
    SORT(*)(.idata$5)
    __IAT_end__ = .;
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)
  }
  .CRT BLOCK(__section_alignment__) :
  {
    ___crt_xc_start__ = . ;
    *(SORT(.CRT$XC*))  /* C initialization */
    ___crt_xc_end__ = . ;
    ___crt_xi_start__ = . ;
    *(SORT(.CRT$XI*))  /* C++ initialization */
    ___crt_xi_end__ = . ;
    ___crt_xl_start__ = . ;
    *(SORT(.CRT$XL*))  /* TLS callbacks */
    /* ___crt_xl_end__ is defined in the TLS Directory support code */
    ___crt_xp_start__ = . ;
    *(SORT(.CRT$XP*))  /* Pre-termination */
    ___crt_xp_end__ = . ;
    ___crt_xt_start__ = . ;
    *(SORT(.CRT$XT*))  /* Termination */
    ___crt_xt_end__ = . ;
  }
  /* Windows TLS expects .tls$AAA to be at the start and .tls$ZZZ to be
     at the end of section.  This is important because _tls_start MUST
     be at the beginning of the section to enable SECREL32 relocations with TLS
     data.  */
  .tls BLOCK(__section_alignment__) :
  {
    ___tls_start__ = . ;
    *(.tls$AAA)
    *(.tls)
    *(.tls$)
    *(SORT(.tls$*))
    *(.tls$ZZZ)
    ___tls_end__ = . ;
  }
  .endjunk BLOCK(__section_alignment__) :
  {
    /* end is deprecated, don't use it */
    PROVIDE (end = .);
    PROVIDE ( _end = .);
     __end__ = .;
  }
  .rsrc BLOCK(__section_alignment__) : SUBALIGN(4)
  {
    *(.rsrc)
    *(.rsrc$*)
  }
  .reloc BLOCK(__section_alignment__) :
  {
    *(.reloc)
  }
  .stab BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.stab)
  }
  .stabstr BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.stabstr)
  }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section.  Unlike other targets that fake this by putting the
     section VMA at 0, the PE format will not allow it.  */
  /* DWARF 1.1 and DWARF 2.  */
  .debug_aranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_aranges)
  }
  .zdebug_aranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_aranges)
  }
  .debug_pubnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_pubnames)
  }
  .zdebug_pubnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_pubnames)
  }
  .debug_pubtypes BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_pubtypes)
  }
  .zdebug_pubtypes BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_pubtypes)
  }
  /* DWARF 2.  */
  .debug_info BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_info .gnu.linkonce.wi.*)
  }
  .zdebug_info BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_info .zdebug.gnu.linkonce.wi.*)
  }
  .debug_abbrev BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_abbrev)
  }
  .zdebug_abbrev BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_abbrev)
  }
  .debug_line BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_line)
  }
  .zdebug_line BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_line)
  }
  .debug_frame BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_frame*)
  }
  .zdebug_frame BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_frame*)
  }
  .debug_str BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_str)
  }
  .zdebug_str BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_str)
  }
  .debug_loc BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_loc)
  }
  .zdebug_loc BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_loc)
  }
  .debug_macinfo BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_macinfo)
  }
  .zdebug_macinfo BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_macinfo)
  }
  /* SGI/MIPS DWARF 2 extensions.  */
  .debug_weaknames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_weaknames)
  }
  .zdebug_weaknames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_weaknames)
  }
  .debug_funcnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_funcnames)
  }
  .zdebug_funcnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_funcnames)
  }
  .debug_typenames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_typenames)
  }
  .zdebug_typenames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_typenames)
  }
  .debug_varnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_varnames)
  }
  .zdebug_varnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_varnames)
  }
  .debug_macro BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_macro)
  }
  .zdebug_macro BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_macro)
  }
  /* DWARF 3.  */
  .debug_ranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_ranges)
  }
  .zdebug_ranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_ranges)
  }
  /* DWARF 4.  */
  .debug_types BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_types .gnu.linkonce.wt.*)
  }
  .zdebug_types BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_types .gnu.linkonce.wt.*)
  }
}


==================================================
attempt to open /usr/lib/crt0.o succeeded
/usr/lib/crt0.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/crtbegin.o succeeded
/usr/lib/gcc/i686-pc-cygwin/5.3.0/crtbegin.o
attempt to open ../../obj/test/common/maths.o succeeded
../../obj/test/common/maths.o
attempt to open ../../obj/test/version.o succeeded
../../obj/test/version.o
attempt to open ../../obj/test/io/serial.o succeeded
../../obj/test/io/serial.o
attempt to open ../../obj/test/io/serial_msp.o succeeded
../../obj/test/io/serial_msp.o
attempt to open ../../obj/test/drivers/buf_writer.o succeeded
../../obj/test/drivers/buf_writer.o
attempt to open ../../obj/test/config/parameter_group.o succeeded
../../obj/test/config/parameter_group.o
attempt to open ../../obj/test/serial_msp_unittest.o succeeded
../../obj/test/serial_msp_unittest.o
attempt to open ../../obj/test/gtest_main.a succeeded
(../../obj/test/gtest_main.a)gtest-all.o
(../../obj/test/gtest_main.a)gtest_main.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005774.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005754.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005752.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005751.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005750.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005749.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005748.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005744.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005742.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005736.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005733.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005728.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005726.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005723.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005720.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005458.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005453.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004785.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004783.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004781.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004779.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004776.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004773.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004665.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004662.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004658.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004654.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004642.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004635.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004630.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004629.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004622.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004379.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d004377.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d003379.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d003374.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d002485.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d002479.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001875.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001873.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001872.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001868.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001867.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001866.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001864.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001847.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001842.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001840.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001839.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001838.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001837.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001833.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001809.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001807.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001796.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001793.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001792.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001791.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001780.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001777.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001770.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001759.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001756.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001749.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001746.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001741.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001740.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001739.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001737.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001734.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001732.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001731.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001705.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001491.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d001488.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000720.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000686.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000566.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000563.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000555.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000554.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000551.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000549.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000541.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000539.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000538.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000537.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000535.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000534.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000531.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000525.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d000000.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libstdc++.dll.a)d005801.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc_s.dll.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc_s.dll.a)d000040.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc_s.dll.a)d000015.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc_s.dll.a)d000000.o
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc_s.dll.a)d000122.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/gcc.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc.a)_chkstk_ms.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libcygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/cygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libcygwin.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/cygwin.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/cygcygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libcygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/cygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libcygwin.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libcygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/cygwin.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libcygwin.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/cygwin.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/cygcygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libcygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/cygwin.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libcygwin.a failed
attempt to open /usr/lib/w32api/libcygwin.dll.a failed
attempt to open /usr/lib/w32api/cygwin.dll.a failed
attempt to open /usr/lib/w32api/libcygwin.a failed
attempt to open /usr/lib/w32api/cygwin.lib failed
attempt to open /usr/lib/w32api/cygcygwin.dll failed
attempt to open /usr/lib/w32api/libcygwin.dll failed
attempt to open /usr/lib/w32api/cygwin.dll failed
attempt to open /usr/lib/w32api/libcygwin.a failed
attempt to open /usr/i686-pc-cygwin/lib/libcygwin.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/cygwin.dll.a failed
attempt to open /usr/i686-pc-cygwin/lib/libcygwin.a failed
attempt to open /usr/i686-pc-cygwin/lib/cygwin.lib failed
attempt to open /usr/i686-pc-cygwin/lib/cygcygwin.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libcygwin.dll failed
attempt to open /usr/i686-pc-cygwin/lib/cygwin.dll failed
attempt to open /usr/i686-pc-cygwin/lib/libcygwin.a failed
attempt to open /usr/lib/libcygwin.dll.a failed
attempt to open /usr/lib/cygwin.dll.a failed
attempt to open /usr/lib/libcygwin.a succeeded
(/usr/lib/libcygwin.a)d000026.o
(/usr/lib/libcygwin.a)d000040.o
(/usr/lib/libcygwin.a)d000070.o
(/usr/lib/libcygwin.a)d000078.o
(/usr/lib/libcygwin.a)d000106.o
(/usr/lib/libcygwin.a)d000108.o
(/usr/lib/libcygwin.a)d000110.o
(/usr/lib/libcygwin.a)d000112.o
(/usr/lib/libcygwin.a)d000225.o
(/usr/lib/libcygwin.a)d000683.o
(/usr/lib/libcygwin.a)d000787.o
(/usr/lib/libcygwin.a)d000806.o
(/usr/lib/libcygwin.a)d000899.o
(/usr/lib/libcygwin.a)d000900.o
(/usr/lib/libcygwin.a)d000938.o
(/usr/lib/libcygwin.a)d000941.o
(/usr/lib/libcygwin.a)d000959.o
(/usr/lib/libcygwin.a)d000962.o
(/usr/lib/libcygwin.a)d000969.o
(/usr/lib/libcygwin.a)d000992.o
(/usr/lib/libcygwin.a)d001007.o
(/usr/lib/libcygwin.a)d001028.o
(/usr/lib/libcygwin.a)d001030.o
(/usr/lib/libcygwin.a)d001033.o
(/usr/lib/libcygwin.a)d001035.o
(/usr/lib/libcygwin.a)d001037.o
(/usr/lib/libcygwin.a)d001043.o
(/usr/lib/libcygwin.a)d001045.o
(/usr/lib/libcygwin.a)d001054.o
(/usr/lib/libcygwin.a)d001063.o
(/usr/lib/libcygwin.a)d001085.o
(/usr/lib/libcygwin.a)d001107.o
(/usr/lib/libcygwin.a)d001112.o
(/usr/lib/libcygwin.a)d001169.o
(/usr/lib/libcygwin.a)d001236.o
(/usr/lib/libcygwin.a)d001249.o
(/usr/lib/libcygwin.a)d001264.o
(/usr/lib/libcygwin.a)d001301.o
(/usr/lib/libcygwin.a)d001322.o
(/usr/lib/libcygwin.a)d001351.o
(/usr/lib/libcygwin.a)d001352.o
(/usr/lib/libcygwin.a)d001354.o
(/usr/lib/libcygwin.a)d001357.o
(/usr/lib/libcygwin.a)d001358.o
(/usr/lib/libcygwin.a)d001367.o
(/usr/lib/libcygwin.a)d001425.o
(/usr/lib/libcygwin.a)d001465.o
(/usr/lib/libcygwin.a)d001570.o
(/usr/lib/libcygwin.a)d001573.o
(/usr/lib/libcygwin.a)d001593.o
(/usr/lib/libcygwin.a)d001606.o
(/usr/lib/libcygwin.a)d001608.o
(/usr/lib/libcygwin.a)d001609.o
(/usr/lib/libcygwin.a)d001612.o
(/usr/lib/libcygwin.a)d001775.o
(/usr/lib/libcygwin.a)d001789.o
(/usr/lib/libcygwin.a)d001796.o
(/usr/lib/libcygwin.a)d001802.o
(/usr/lib/libcygwin.a)d001805.o
(/usr/lib/libcygwin.a)d001807.o
(/usr/lib/libcygwin.a)d001811.o
(/usr/lib/libcygwin.a)d001812.o
(/usr/lib/libcygwin.a)d001818.o
(/usr/lib/libcygwin.a)d001822.o
(/usr/lib/libcygwin.a)d001828.o
(/usr/lib/libcygwin.a)d001832.o
(/usr/lib/libcygwin.a)d001839.o
(/usr/lib/libcygwin.a)d001844.o
(/usr/lib/libcygwin.a)d001896.o
(/usr/lib/libcygwin.a)d001898.o
(/usr/lib/libcygwin.a)d001942.o
(/usr/lib/libcygwin.a)d001959.o
(/usr/lib/libcygwin.a)d001968.o
(/usr/lib/libcygwin.a)d001976.o
(/usr/lib/libcygwin.a)d001987.o
(/usr/lib/libcygwin.a)d002014.o
(/usr/lib/libcygwin.a)t-d000026.o
(/usr/lib/libcygwin.a)t-d000040.o
(/usr/lib/libcygwin.a)t-d000070.o
(/usr/lib/libcygwin.a)t-d000078.o
(/usr/lib/libcygwin.a)t-d000106.o
(/usr/lib/libcygwin.a)t-d000108.o
(/usr/lib/libcygwin.a)t-d000110.o
(/usr/lib/libcygwin.a)t-d000112.o
(/usr/lib/libcygwin.a)t-d000225.o
(/usr/lib/libcygwin.a)t-d000683.o
(/usr/lib/libcygwin.a)t-d000787.o
(/usr/lib/libcygwin.a)t-d000806.o
(/usr/lib/libcygwin.a)t-d000899.o
(/usr/lib/libcygwin.a)t-d000900.o
(/usr/lib/libcygwin.a)t-d000938.o
(/usr/lib/libcygwin.a)t-d000941.o
(/usr/lib/libcygwin.a)t-d000959.o
(/usr/lib/libcygwin.a)t-d000962.o
(/usr/lib/libcygwin.a)t-d000969.o
(/usr/lib/libcygwin.a)t-d000992.o
(/usr/lib/libcygwin.a)t-d001007.o
(/usr/lib/libcygwin.a)t-d001028.o
(/usr/lib/libcygwin.a)t-d001030.o
(/usr/lib/libcygwin.a)t-d001033.o
(/usr/lib/libcygwin.a)t-d001035.o
(/usr/lib/libcygwin.a)t-d001037.o
(/usr/lib/libcygwin.a)t-d001043.o
(/usr/lib/libcygwin.a)t-d001045.o
(/usr/lib/libcygwin.a)t-d001054.o
(/usr/lib/libcygwin.a)t-d001063.o
(/usr/lib/libcygwin.a)t-d001085.o
(/usr/lib/libcygwin.a)t-d001107.o
(/usr/lib/libcygwin.a)t-d001112.o
(/usr/lib/libcygwin.a)t-d001169.o
(/usr/lib/libcygwin.a)t-d001236.o
(/usr/lib/libcygwin.a)t-d001249.o
(/usr/lib/libcygwin.a)t-d001264.o
(/usr/lib/libcygwin.a)t-d001301.o
(/usr/lib/libcygwin.a)t-d001322.o
(/usr/lib/libcygwin.a)t-d001351.o
(/usr/lib/libcygwin.a)t-d001352.o
(/usr/lib/libcygwin.a)t-d001354.o
(/usr/lib/libcygwin.a)t-d001357.o
(/usr/lib/libcygwin.a)t-d001358.o
(/usr/lib/libcygwin.a)t-d001367.o
(/usr/lib/libcygwin.a)t-d001425.o
(/usr/lib/libcygwin.a)t-d001465.o
(/usr/lib/libcygwin.a)t-d001570.o
(/usr/lib/libcygwin.a)t-d001573.o
(/usr/lib/libcygwin.a)t-d001593.o
(/usr/lib/libcygwin.a)t-d001606.o
(/usr/lib/libcygwin.a)t-d001608.o
(/usr/lib/libcygwin.a)t-d001609.o
(/usr/lib/libcygwin.a)t-d001612.o
(/usr/lib/libcygwin.a)t-d001775.o
(/usr/lib/libcygwin.a)t-d001789.o
(/usr/lib/libcygwin.a)t-d001796.o
(/usr/lib/libcygwin.a)t-d001802.o
(/usr/lib/libcygwin.a)t-d001805.o
(/usr/lib/libcygwin.a)t-d001807.o
(/usr/lib/libcygwin.a)t-d001811.o
(/usr/lib/libcygwin.a)t-d001812.o
(/usr/lib/libcygwin.a)t-d001818.o
(/usr/lib/libcygwin.a)t-d001822.o
(/usr/lib/libcygwin.a)t-d001828.o
(/usr/lib/libcygwin.a)t-d001832.o
(/usr/lib/libcygwin.a)t-d001839.o
(/usr/lib/libcygwin.a)t-d001844.o
(/usr/lib/libcygwin.a)t-d001896.o
(/usr/lib/libcygwin.a)t-d001898.o
(/usr/lib/libcygwin.a)t-d001942.o
(/usr/lib/libcygwin.a)t-d001959.o
(/usr/lib/libcygwin.a)t-d001968.o
(/usr/lib/libcygwin.a)t-d001976.o
(/usr/lib/libcygwin.a)t-d001987.o
(/usr/lib/libcygwin.a)t-d002014.o
(/usr/lib/libcygwin.a)_cygwin_crt0_common.o
(/usr/lib/libcygwin.a)cygwin_crt0.o
(/usr/lib/libcygwin.a)dll_entry.o
(/usr/lib/libcygwin.a)dll_main.o
(/usr/lib/libcygwin.a)premain0.o
(/usr/lib/libcygwin.a)premain1.o
(/usr/lib/libcygwin.a)premain2.o
(/usr/lib/libcygwin.a)premain3.o
(/usr/lib/libcygwin.a)pseudo-reloc-dummy.o
(/usr/lib/libcygwin.a)d000000.o
(/usr/lib/libcygwin.a)d000201.o
(/usr/lib/libcygwin.a)d000267.o
(/usr/lib/libcygwin.a)d000272.o
(/usr/lib/libcygwin.a)d000294.o
(/usr/lib/libcygwin.a)d000386.o
(/usr/lib/libcygwin.a)d000583.o
(/usr/lib/libcygwin.a)d000759.o
(/usr/lib/libcygwin.a)d000864.o
(/usr/lib/libcygwin.a)d000866.o
(/usr/lib/libcygwin.a)d001334.o
(/usr/lib/libcygwin.a)d001432.o
(/usr/lib/libcygwin.a)d001599.o
(/usr/lib/libcygwin.a)d002070.o
(/usr/lib/libcygwin.a)t-d000759.o
(/usr/lib/libcygwin.a)t-d000864.o
(/usr/lib/libcygwin.a)t-d000866.o
(/usr/lib/libcygwin.a)t-d001334.o
(/usr/lib/libcygwin.a)t-d001432.o
(/usr/lib/libcygwin.a)t-d001599.o
(/usr/lib/libcygwin.a)cygwin_attach_dll.o
(/usr/lib/libcygwin.a)d000887.o
(/usr/lib/libcygwin.a)t-d000887.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libadvapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/advapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libadvapi32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/advapi32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/cygadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/advapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libadvapi32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libadvapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/advapi32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libadvapi32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/advapi32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/cygadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libadvapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/advapi32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libadvapi32.a failed
attempt to open /usr/lib/w32api/libadvapi32.dll.a failed
attempt to open /usr/lib/w32api/advapi32.dll.a failed
attempt to open /usr/lib/w32api/libadvapi32.a succeeded
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libshell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/shell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libshell32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/shell32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/cygshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/shell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libshell32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libshell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/shell32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libshell32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/shell32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/cygshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libshell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/shell32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libshell32.a failed
attempt to open /usr/lib/w32api/libshell32.dll.a failed
attempt to open /usr/lib/w32api/shell32.dll.a failed
attempt to open /usr/lib/w32api/libshell32.a succeeded
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libuser32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/user32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libuser32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/user32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/cyguser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libuser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/user32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libuser32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libuser32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/user32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libuser32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/user32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/cyguser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libuser32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/user32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libuser32.a failed
attempt to open /usr/lib/w32api/libuser32.dll.a failed
attempt to open /usr/lib/w32api/user32.dll.a failed
attempt to open /usr/lib/w32api/libuser32.a succeeded
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libkernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/kernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libkernel32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/kernel32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/cygkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/kernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libkernel32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libkernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/kernel32.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libkernel32.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/kernel32.lib failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/cygkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libkernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/kernel32.dll failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/libkernel32.a failed
attempt to open /usr/lib/w32api/libkernel32.dll.a failed
attempt to open /usr/lib/w32api/kernel32.dll.a failed
attempt to open /usr/lib/w32api/libkernel32.a succeeded
(/usr/lib/w32api/libkernel32.a)dkpfs00809.o
(/usr/lib/w32api/libkernel32.a)dkpfs00581.o
(/usr/lib/w32api/libkernel32.a)dkpfs00533.o
(/usr/lib/w32api/libkernel32.a)dkpfs00356.o
(/usr/lib/w32api/libkernel32.a)dkpfh.o
(/usr/lib/w32api/libkernel32.a)dkpft.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc_s.dll.a succeeded
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/gcc.dll.a failed
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc.a succeeded
(/usr/lib/gcc/i686-pc-cygwin/5.3.0/libgcc.a)_ctors.o
attempt to open /usr/lib/default-manifest.o succeeded
/usr/lib/default-manifest.o
attempt to open /usr/lib/gcc/i686-pc-cygwin/5.3.0/crtend.o succeeded
/usr/lib/gcc/i686-pc-cygwin/5.3.0/crtend.o
../../obj/test/config/parameter_group.o: In function `pgFind':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:27: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:27: undefined reference to `__pg_registry_end'
../../obj/test/config/parameter_group.o: In function `pgMatcher':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:37: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:37: undefined reference to `__pg_registry_end'
../../obj/test/config/parameter_group.o: In function `pgResetAll':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:55: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:55: undefined reference to `__pg_registry_end'
collect2: error: ld returned 1 exit status
Makefile:670: recipe for target '../../obj/test/serial_msp_unittest' failed
make[1]: *** [../../obj/test/serial_msp_unittest] Error 1
make[1]: Leaving directory '/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test'",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,30,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203409843,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","here's the corresponding map file from that last attempt.
serial_msp_unittest.map.txt",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,31,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203414439,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",sigh and after upgrading to gcc 5.3.0 none of the tests in the master branch run anymore.  they just exit immediately with exit code 127.  any hints there might be useful too,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/digitalentity,32,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203416079,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","I ran into issues with gcc 5.x with iNav. That compiler was providing the
code with some nasty bugs - I.e you change a constant in config.c, flash
without erase and the board hangs. Change again, unbrick, it works.

I decided to stick with 4.9 for the time being.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,33,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203417162,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",I'am using 64 bit cygwin ... that is only difference I can think of ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,34,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203424656,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","this PR also fails under OSX El Captian.
any solution needs to work on a) travis build environent, b) latest osx, c) cygwin
../main/config/config.c:99:1: error: argument to 'section' attribute is not valid for this target: mach-o section specifier requires a segment and section
      separated by a comma
PG_REGISTER_PROFILE(profile_t, currentProfile, PG_PROFILE, 0);
^

at the moment i don't have the time to investigate this myself,  yes i know it's a pain to make some typing changes to merge this in.  yes, the linker approach is a good solution too, but only if it works on all three build environents.
the other code changes are more important than the linker script and unit test improvements at this time to me and the project itself.
i'm going to crack on with the code changes in #1976.  suggest you and others help out by investigating these issues.  I will monitor this PR for updates.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,35,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203424661,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",my verbose ld output contains line 'opened script file unit/parameter_group.ld'. Looks like the script file is not passed to linker for some reason ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,36,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203426482,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",can you try building with 'gcc -v' and post the output of linker step?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,37,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203429351,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","yup. 1 sec, well. once this cygwin installation is finished.  my setup on two machines is borked right now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,38,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203434322,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",Ok i fixed my problem running anything compiled with gcc 5.3.0 - the runtime library was out of date...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,39,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203435494,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","__attribute__ section (( ""xxx"" )) and custom linker script is reasonable way to handle config (and #1976 is using this approach. So only unittest code needs to be adapted.
Linker script 'INSERT AFTER' is very close to target implementation, so it should be IMO preferred (minimal difference in test code).
There are other possibilities too:

define array explicitly. It is quite cumbersome but may be possible, using special version os PG_ macros for unittest. Unittest stubs will be a bit more complicated.
use global variable constructor to collect parameter group registration. It should be quite easy (not exactly sure about mixing extern ""c"" code with c++) and will only need special version of PG_ macros, functionality would be roughly the same.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,40,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203436090,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Is it possible to get OSX shell ? the section approach should be doable, but needs some testing...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,41,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203436697,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",build-log-gcc-5.3.0.txt,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,42,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203438267,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Agreed that linker solution is better (closer to target).
I can't provide OSX shell.  Maybe someone else can?
perhaps have a stab at one of the other solutions for now?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,43,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203443308,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Can you try passing -T $(TEST_DIR)/parameter_group.ld directly to g++ (without -Wl, ) ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,44,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203444668,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","@ledvinap yes, 1 sec",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,45,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203446480,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","you mean like this:
Makefile:671
    $(CXX) $(CXX_FLAGS) -T $(TEST_DIR)/parameter_group.ld -Wl,-verbose -Wl,-Map,$(OBJECT_DIR)/$@.map $^ -o $(OBJECT_DIR)/$@


gives:
gcc version 5.3.0 (GCC)
COMPILER_PATH=/usr/lib/gcc/i686-pc-cygwin/5.3.0/:/usr/lib/gcc/i686-pc-cygwin/5.3.0/:/usr/lib/gcc/i686-pc-cygwin/:/usr/lib/gcc/i686-pc-cygwin/5.3.0/:/usr/lib/gcc/i686-pc-cygwin/:/usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/bin/
LIBRARY_PATH=/usr/lib/gcc/i686-pc-cygwin/5.3.0/:/usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib/:/usr/lib/:/lib/:/usr/lib/w32api/
COLLECT_GCC_OPTIONS='-v' '-g' '-Wall' '-pthread' '-Wextra' '-ggdb3' '-O0' '-D' 'UNIT_TEST' '-isystem' '../../lib/test/gtest/inc' '-MMD' '-MP' '-std=gnu++11' '-T' 'unit/parameter_group.ld' '-o' '../../obj/test/../../obj/test/serial_msp_unittest.exe' '-shared-libgcc' '-mtune=generic' '-march=i686'
 /usr/lib/gcc/i686-pc-cygwin/5.3.0/collect2.exe -plugin /usr/lib/gcc/i686-pc-cygwin/5.3.0/cyglto_plugin.dll -plugin-opt=/usr/lib/gcc/i686-pc-cygwin/5.3.0/lto-wrapper.exe -plugin-opt=-fresolution=/tmp/ccQybtEw.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lcygwin -plugin-opt=-pass-through=-ladvapi32 -plugin-opt=-pass-through=-lshell32 -plugin-opt=-pass-through=-luser32 -plugin-opt=-pass-through=-lkernel32 -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --build-id --wrap _Znwj --wrap _Znaj --wrap _ZdlPv --wrap _ZdaPv --wrap _ZnwjRKSt9nothrow_t --wrap _ZnajRKSt9nothrow_t --wrap _ZdlPvRKSt9nothrow_t --wrap _ZdaPvRKSt9nothrow_t -Bdynamic --dll-search-prefix=cyg --large-address-aware --tsaware -o ../../obj/test/../../obj/test/serial_msp_unittest.exe /usr/lib/crt0.o /usr/lib/gcc/i686-pc-cygwin/5.3.0/crtbegin.o -L/usr/lib/gcc/i686-pc-cygwin/5.3.0 -L/usr/lib/gcc/i686-pc-cygwin/5.3.0/../../../../i686-pc-cygwin/lib -L/usr/lib/w32api -verbose -Map ../../obj/test/../../obj/test/serial_msp_unittest.map ../../obj/test/common/maths.o ../../obj/test/version.o ../../obj/test/io/serial.o ../../obj/test/io/serial_msp.o ../../obj/test/drivers/buf_writer.o ../../obj/test/config/parameter_group.o ../../obj/test/serial_msp_unittest.o ../../obj/test/gtest_main.a -lstdc++ -lgcc_s -lgcc -lcygwin -ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc /usr/lib/default-manifest.o /usr/lib/gcc/i686-pc-cygwin/5.3.0/crtend.o -T unit/parameter_group.ld
opened script file unit/parameter_group.ld
../../obj/test/config/parameter_group.o: In function `pgFind':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:27: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:27: undefined reference to `__pg_registry_end'
../../obj/test/config/parameter_group.o: In function `pgMatcher':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:37: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:37: undefined reference to `__pg_registry_end'
../../obj/test/config/parameter_group.o: In function `pgResetAll':
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:55: undefined reference to `__pg_registry_start'
/cygdrive/d/My Documents/dev/embedded/cleanflight/src/test/../main/config/parameter_group.c:55: undefined reference to `__pg_registry_end'
collect2: error: ld returned 1 exit status
make: *** [../../obj/test/serial_msp_unittest] Error 1",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,46,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203446744,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",can you show me your build log?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,47,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203447033,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","it shows
opened script file unit/parameter_group.ld

in the full output.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,48,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203447852,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","serial_msp_unittest.map.txt
that's the resulting map file.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,49,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203450009,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","-*- mode: compilation; default-directory: ""/cygdrive/c/tmp/cf-git/cleanflight/src/test/"" -*-
Compilation started at Wed Mar 30 15:49:59

make -k test-serial_msp_unittest
g++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -Wl,-verbose -v -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 -T unit/parameter_group.ld -Wl,-Map,../../obj/test/../../obj/test/serial_msp_unittest.map ../../obj/test/common/maths.o ../../obj/test/version.o ../../obj/test/io/serial.o ../../obj/test/io/serial_msp.o ../../obj/test/drivers/buf_writer.o ../../obj/test/config/parameter_group.o ../../obj/test/serial_msp_unittest.o ../../obj/test/gtest_main.a -o ../../obj/test/../../obj/test/serial_msp_unittest
Using built-in specs.
COLLECT_GCC=g++
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/lto-wrapper.exe
Target: x86_64-pc-cygwin
Configured with: /cygdrive/i/szsz/tmpp/gcc/gcc-5.3.0-3.x86_64/src/gcc-5.3.0/configure --srcdir=/cygdrive/i/szsz/tmpp/gcc/gcc-5.3.0-3.x86_64/src/gcc-5.3.0 --prefix=/usr --exec-prefix=/usr --localstatedir=/var --sysconfdir=/etc --docdir=/usr/share/doc/gcc --htmldir=/usr/share/doc/gcc/html -C --build=x86_64-pc-cygwin --host=x86_64-pc-cygwin --target=x86_64-pc-cygwin --without-libiconv-prefix --without-libintl-prefix --libexecdir=/usr/lib --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-tune=generic --enable-languages=ada,c,c++,fortran,lto,objc,obj-c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libcilkrts --enable-libgomp --enable-libitm --enable-libquadmath --enable-libquadmath-support --enable-libssp --enable-libada --enable-libgcj-sublibs --disable-java-awt --disable-symvers --with-ecj-jar=/usr/share/java/ecj.jar --with-gnu-ld --with-gnu-as --with-cloog-include=/usr/include/cloog-isl --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible
Thread model: posix
gcc version 5.3.0 (GCC) 
COMPILER_PATH=/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/:/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/:/usr/lib/gcc/x86_64-pc-cygwin/:/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/:/usr/lib/gcc/x86_64-pc-cygwin/:/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/bin/
LIBRARY_PATH=/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/:/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/:/usr/lib/../lib/:/lib/../lib/:/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/:/usr/lib/:/lib/:/usr/lib/w32api/
COLLECT_GCC_OPTIONS='-g' '-Wall' '-pthread' '-Wextra' '-ggdb3' '-O0' '-D' 'UNIT_TEST' '-v' '-isystem' '../../lib/test/gtest/inc' '-MMD' '-MP' '-std=gnu++11' '-T' 'unit/parameter_group.ld' '-o' '../../obj/test/../../obj/test/serial_msp_unittest.exe' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/collect2.exe -plugin /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cyglto_plugin.dll -plugin-opt=/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/lto-wrapper.exe -plugin-opt=-fresolution=/tmp/ccNGvN2L.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lcygwin -plugin-opt=-pass-through=-ladvapi32 -plugin-opt=-pass-through=-lshell32 -plugin-opt=-pass-through=-luser32 -plugin-opt=-pass-through=-lkernel32 -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --build-id -m i386pep --wrap _Znwm --wrap _Znam --wrap _ZdlPv --wrap _ZdaPv --wrap _ZnwmRKSt9nothrow_t --wrap _ZnamRKSt9nothrow_t --wrap _ZdlPvRKSt9nothrow_t --wrap _ZdaPvRKSt9nothrow_t -Bdynamic --dll-search-prefix=cyg --tsaware -o ../../obj/test/../../obj/test/serial_msp_unittest.exe /usr/lib/../lib/crt0.o /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/crtbegin.o -L/usr/lib/gcc/x86_64-pc-cygwin/5.3.0 -L/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib -L/usr/lib/../lib -L/lib/../lib -L/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib -L/usr/lib/w32api -verbose -Map ../../obj/test/../../obj/test/serial_msp_unittest.map ../../obj/test/common/maths.o ../../obj/test/version.o ../../obj/test/io/serial.o ../../obj/test/io/serial_msp.o ../../obj/test/drivers/buf_writer.o ../../obj/test/config/parameter_group.o ../../obj/test/serial_msp_unittest.o ../../obj/test/gtest_main.a -lstdc++ -lgcc_s -lgcc -lcygwin -ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc /usr/lib/../lib/default-manifest.o /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/crtend.o -T unit/parameter_group.ld
GNU ld (GNU Binutils) 2.25.2
  Supported emulations:
   i386pep
   i386pe
opened script file unit/parameter_group.ld
using internal linker script:
==================================================
/* Default linker script, for normal executables */
/* Copyright (C) 2014 Free Software Foundation, Inc.
   Copying and distribution of this script, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  */
OUTPUT_FORMAT(pei-x86-64)
SEARCH_DIR(""/usr/x86_64-pc-cygwin/lib""); SEARCH_DIR(""/usr/lib""); SEARCH_DIR(""/usr/lib/w32api"");
SECTIONS
{
  /* Make the virtual address and file offset synced if the alignment is
     lower than the target page size. */
  . = SIZEOF_HEADERS;
  . = ALIGN(__section_alignment__);
  .text  __image_base__ + ( __section_alignment__ < 0x1000 ? . : __section_alignment__ ) :
  {
     *(.init)
    *(.text)
    *(SORT(.text$*))
     *(.text.*)
     *(.gnu.linkonce.t.*)
    *(.glue_7t)
    *(.glue_7)
    . = ALIGN(8);
     ___CTOR_LIST__ = .; __CTOR_LIST__ = . ;
            LONG (-1); LONG (-1);*(.ctors); *(.ctor); *(SORT(.ctors.*));  LONG (0); LONG (0);
     ___DTOR_LIST__ = .; __DTOR_LIST__ = . ;
            LONG (-1); LONG (-1); *(.dtors); *(.dtor); *(SORT(.dtors.*));  LONG (0); LONG (0);
     *(.fini)
    /* ??? Why is .gcc_exc here?  */
     *(.gcc_exc)
    PROVIDE (etext = .);
     *(.gcc_except_table)
  }
  /* The Cygwin32 library uses a section to avoid copying certain data
     on fork.  This used to be named "".data"".  The linker used
     to include this between __data_start__ and __data_end__, but that
     breaks building the cygwin32 dll.  Instead, we name the section
     "".data_cygwin_nocopy"" and explicitly include it after __data_end__. */
  .data BLOCK(__section_alignment__) :
  {
    __data_start__ = . ;
    *(.data)
    *(.data2)
    *(SORT(.data$*))
    *(.jcr)
    __data_end__ = . ;
    *(.data_cygwin_nocopy)
  }
  .rdata BLOCK(__section_alignment__) :
  {
    *(.rdata)
             *(SORT(.rdata$*))
    __rt_psrelocs_start = .;
    *(.rdata_runtime_pseudo_reloc)
    __rt_psrelocs_end = .;
  }
  __rt_psrelocs_size = __rt_psrelocs_end - __rt_psrelocs_start;
  ___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  __RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  ___RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
  __RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
  .eh_frame BLOCK(__section_alignment__) :
  {
    *(.eh_frame*)
  }
  .pdata BLOCK(__section_alignment__) :
  {
    *(.pdata*)
  }
  .xdata BLOCK(__section_alignment__) :
  {
    *(.xdata*)
  }
  .bss BLOCK(__section_alignment__) :
  {
    __bss_start__ = . ;
    *(.bss)
    *(COMMON)
    __bss_end__ = . ;
  }
  .edata BLOCK(__section_alignment__) :
  {
    *(.edata)
  }
  /DISCARD/ :
  {
    *(.debug$S)
    *(.debug$T)
    *(.debug$F)
    *(.drectve)
     *(.note.GNU-stack)
     *(.gnu.lto_*)
  }
  .idata BLOCK(__section_alignment__) :
  {
    /* This cannot currently be handled with grouped sections.
    See pep.em:sort_sections.  */
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    __IAT_start__ = .;
    SORT(*)(.idata$5)
    __IAT_end__ = .;
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)
  }
  .CRT BLOCK(__section_alignment__) :
  {
    ___crt_xc_start__ = . ;
    *(SORT(.CRT$XC*))  /* C initialization */
    ___crt_xc_end__ = . ;
    ___crt_xi_start__ = . ;
    *(SORT(.CRT$XI*))  /* C++ initialization */
    ___crt_xi_end__ = . ;
    ___crt_xl_start__ = . ;
    *(SORT(.CRT$XL*))  /* TLS callbacks */
    /* ___crt_xl_end__ is defined in the TLS Directory support code */
    ___crt_xp_start__ = . ;
    *(SORT(.CRT$XP*))  /* Pre-termination */
    ___crt_xp_end__ = . ;
    ___crt_xt_start__ = . ;
    *(SORT(.CRT$XT*))  /* Termination */
    ___crt_xt_end__ = . ;
  }
  /* Windows TLS expects .tls$AAA to be at the start and .tls$ZZZ to be
     at the end of the .tls section.  This is important because _tls_start MUST
     be at the beginning of the section to enable SECREL32 relocations with TLS
     data.  */
  .tls BLOCK(__section_alignment__) :
  {
    ___tls_start__ = . ;
    *(.tls$AAA)
    *(.tls)
    *(.tls$)
    *(SORT(.tls$*))
    *(.tls$ZZZ)
    ___tls_end__ = . ;
  }
  .endjunk BLOCK(__section_alignment__) :
  {
    /* end is deprecated, don't use it */
    PROVIDE (end = .);
    PROVIDE ( _end = .);
     __end__ = .;
  }
  .rsrc BLOCK(__section_alignment__) : SUBALIGN(4)
  {
    *(.rsrc)
    *(.rsrc$*)
  }
  .reloc BLOCK(__section_alignment__) :
  {
    *(.reloc)
  }
  .stab BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.stab)
  }
  .stabstr BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.stabstr)
  }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section.  Unlike other targets that fake this by putting the
     section VMA at 0, the PE format will not allow it.  */
  /* DWARF 1.1 and DWARF 2.  */
  .debug_aranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_aranges)
  }
  .zdebug_aranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_aranges)
  }
  .debug_pubnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_pubnames)
  }
  .zdebug_pubnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_pubnames)
  }
  .debug_pubtypes BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_pubtypes)
  }
  .zdebug_pubtypes BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_pubtypes)
  }
  /* DWARF 2.  */
  .debug_info BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_info .gnu.linkonce.wi.*)
  }
  .zdebug_info BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_info .zdebug.gnu.linkonce.wi.*)
  }
  .debug_abbrev BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_abbrev)
  }
  .zdebug_abbrev BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_abbrev)
  }
  .debug_line BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_line)
  }
  .zdebug_line BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_line)
  }
  .debug_frame BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_frame)
  }
  .zdebug_frame BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_frame)
  }
  .debug_str BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_str)
  }
  .zdebug_str BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_str)
  }
  .debug_loc BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_loc)
  }
  .zdebug_loc BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_loc)
  }
  .debug_macinfo BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_macinfo)
  }
  .zdebug_macinfo BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_macinfo)
  }
  /* SGI/MIPS DWARF 2 extensions.  */
  .debug_weaknames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_weaknames)
  }
  .zdebug_weaknames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_weaknames)
  }
  .debug_funcnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_funcnames)
  }
  .zdebug_funcnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_funcnames)
  }
  .debug_typenames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_typenames)
  }
  .zdebug_typenames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_typenames)
  }
  .debug_varnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_varnames)
  }
  .zdebug_varnames BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_varnames)
  }
  .debug_macro BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_macro)
  }
  .zdebug_macro BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_macro)
  }
  /* DWARF 3.  */
  .debug_ranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_ranges)
  }
  .zdebug_ranges BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_ranges)
  }
  /* DWARF 4.  */
  .debug_types BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.debug_types .gnu.linkonce.wt.*)
  }
  .zdebug_types BLOCK(__section_alignment__) (NOLOAD) :
  {
    *(.zdebug_types .zdebug.gnu.linkonce.wt.*)
  }
}


==================================================
attempt to open /usr/lib/../lib/crt0.o succeeded
/usr/lib/../lib/crt0.o
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/crtbegin.o succeeded
/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/crtbegin.o
attempt to open ../../obj/test/common/maths.o succeeded
../../obj/test/common/maths.o
attempt to open ../../obj/test/version.o succeeded
../../obj/test/version.o
attempt to open ../../obj/test/io/serial.o succeeded
../../obj/test/io/serial.o
attempt to open ../../obj/test/io/serial_msp.o succeeded
../../obj/test/io/serial_msp.o
attempt to open ../../obj/test/drivers/buf_writer.o succeeded
../../obj/test/drivers/buf_writer.o
attempt to open ../../obj/test/config/parameter_group.o succeeded
../../obj/test/config/parameter_group.o
attempt to open ../../obj/test/serial_msp_unittest.o succeeded
../../obj/test/serial_msp_unittest.o
attempt to open ../../obj/test/gtest_main.a succeeded
(../../obj/test/gtest_main.a)gtest-all.o
(../../obj/test/gtest_main.a)gtest_main.o
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a succeeded
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005832.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005812.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005810.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005809.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005808.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005807.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005806.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005802.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005800.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005794.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005791.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005786.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005784.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005781.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005778.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005516.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005511.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004831.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004829.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004827.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004825.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004822.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004819.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004711.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004708.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004704.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004700.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004688.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004681.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004676.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004675.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004668.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004425.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d004423.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d003425.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d003420.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d002485.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d002479.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001875.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001873.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001872.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001868.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001867.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001866.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001864.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001847.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001842.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001840.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001839.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001838.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001837.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001833.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001809.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001807.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001796.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001793.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001792.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001791.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001780.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001777.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001770.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001759.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001756.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001749.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001746.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001743.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001741.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001740.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001739.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001737.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001734.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001732.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001731.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001705.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001491.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d001488.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000720.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000686.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000566.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000563.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000555.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000554.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000551.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000549.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000541.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000539.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000538.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000537.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000535.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000534.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000531.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000525.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d000000.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libstdc++.dll.a)d005858.o
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc_s.dll.a succeeded
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc_s.dll.a)d000015.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc_s.dll.a)d000000.o
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc_s.dll.a)d000122.o
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/gcc.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc.a succeeded
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc.a)_chkstk_ms.o
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libcygwin.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cygwin.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libcygwin.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cygwin.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cygcygwin.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libcygwin.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cygwin.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libcygwin.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libcygwin.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/cygwin.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libcygwin.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/cygwin.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/cygcygwin.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libcygwin.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/cygwin.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libcygwin.a failed
attempt to open /usr/lib/../lib/libcygwin.dll.a failed
attempt to open /usr/lib/../lib/cygwin.dll.a failed
attempt to open /usr/lib/../lib/libcygwin.a succeeded
(/usr/lib/../lib/libcygwin.a)d000014.o
(/usr/lib/../lib/libcygwin.a)d000021.o
(/usr/lib/../lib/libcygwin.a)d000033.o
(/usr/lib/../lib/libcygwin.a)d000041.o
(/usr/lib/../lib/libcygwin.a)d000069.o
(/usr/lib/../lib/libcygwin.a)d000071.o
(/usr/lib/../lib/libcygwin.a)d000073.o
(/usr/lib/../lib/libcygwin.a)d000075.o
(/usr/lib/../lib/libcygwin.a)d000085.o
(/usr/lib/../lib/libcygwin.a)d000101.o
(/usr/lib/../lib/libcygwin.a)d000204.o
(/usr/lib/../lib/libcygwin.a)d000223.o
(/usr/lib/../lib/libcygwin.a)d000293.o
(/usr/lib/../lib/libcygwin.a)d000294.o
(/usr/lib/../lib/libcygwin.a)d000309.o
(/usr/lib/../lib/libcygwin.a)d000333.o
(/usr/lib/../lib/libcygwin.a)d000336.o
(/usr/lib/../lib/libcygwin.a)d000354.o
(/usr/lib/../lib/libcygwin.a)d000356.o
(/usr/lib/../lib/libcygwin.a)d000363.o
(/usr/lib/../lib/libcygwin.a)d000386.o
(/usr/lib/../lib/libcygwin.a)d000401.o
(/usr/lib/../lib/libcygwin.a)d000422.o
(/usr/lib/../lib/libcygwin.a)d000424.o
(/usr/lib/../lib/libcygwin.a)d000427.o
(/usr/lib/../lib/libcygwin.a)d000429.o
(/usr/lib/../lib/libcygwin.a)d000431.o
(/usr/lib/../lib/libcygwin.a)d000437.o
(/usr/lib/../lib/libcygwin.a)d000439.o
(/usr/lib/../lib/libcygwin.a)d000447.o
(/usr/lib/../lib/libcygwin.a)d000456.o
(/usr/lib/../lib/libcygwin.a)d000478.o
(/usr/lib/../lib/libcygwin.a)d000499.o
(/usr/lib/../lib/libcygwin.a)d000504.o
(/usr/lib/../lib/libcygwin.a)d000560.o
(/usr/lib/../lib/libcygwin.a)d000627.o
(/usr/lib/../lib/libcygwin.a)d000640.o
(/usr/lib/../lib/libcygwin.a)d000655.o
(/usr/lib/../lib/libcygwin.a)d000690.o
(/usr/lib/../lib/libcygwin.a)d000711.o
(/usr/lib/../lib/libcygwin.a)d000739.o
(/usr/lib/../lib/libcygwin.a)d000740.o
(/usr/lib/../lib/libcygwin.a)d000742.o
(/usr/lib/../lib/libcygwin.a)d000745.o
(/usr/lib/../lib/libcygwin.a)d000746.o
(/usr/lib/../lib/libcygwin.a)d000755.o
(/usr/lib/../lib/libcygwin.a)d000813.o
(/usr/lib/../lib/libcygwin.a)d000849.o
(/usr/lib/../lib/libcygwin.a)d000954.o
(/usr/lib/../lib/libcygwin.a)d000957.o
(/usr/lib/../lib/libcygwin.a)d000977.o
(/usr/lib/../lib/libcygwin.a)d000990.o
(/usr/lib/../lib/libcygwin.a)d000992.o
(/usr/lib/../lib/libcygwin.a)d000993.o
(/usr/lib/../lib/libcygwin.a)d000996.o
(/usr/lib/../lib/libcygwin.a)d001146.o
(/usr/lib/../lib/libcygwin.a)d001160.o
(/usr/lib/../lib/libcygwin.a)d001166.o
(/usr/lib/../lib/libcygwin.a)d001172.o
(/usr/lib/../lib/libcygwin.a)d001175.o
(/usr/lib/../lib/libcygwin.a)d001177.o
(/usr/lib/../lib/libcygwin.a)d001181.o
(/usr/lib/../lib/libcygwin.a)d001182.o
(/usr/lib/../lib/libcygwin.a)d001188.o
(/usr/lib/../lib/libcygwin.a)d001192.o
(/usr/lib/../lib/libcygwin.a)d001198.o
(/usr/lib/../lib/libcygwin.a)d001202.o
(/usr/lib/../lib/libcygwin.a)d001208.o
(/usr/lib/../lib/libcygwin.a)d001213.o
(/usr/lib/../lib/libcygwin.a)d001265.o
(/usr/lib/../lib/libcygwin.a)d001267.o
(/usr/lib/../lib/libcygwin.a)d001309.o
(/usr/lib/../lib/libcygwin.a)d001324.o
(/usr/lib/../lib/libcygwin.a)d001333.o
(/usr/lib/../lib/libcygwin.a)d001341.o
(/usr/lib/../lib/libcygwin.a)d001352.o
(/usr/lib/../lib/libcygwin.a)d001379.o
(/usr/lib/../lib/libcygwin.a)t-d000014.o
(/usr/lib/../lib/libcygwin.a)t-d000021.o
(/usr/lib/../lib/libcygwin.a)t-d000033.o
(/usr/lib/../lib/libcygwin.a)t-d000041.o
(/usr/lib/../lib/libcygwin.a)t-d000069.o
(/usr/lib/../lib/libcygwin.a)t-d000071.o
(/usr/lib/../lib/libcygwin.a)t-d000073.o
(/usr/lib/../lib/libcygwin.a)t-d000075.o
(/usr/lib/../lib/libcygwin.a)t-d000085.o
(/usr/lib/../lib/libcygwin.a)t-d000101.o
(/usr/lib/../lib/libcygwin.a)t-d000204.o
(/usr/lib/../lib/libcygwin.a)t-d000223.o
(/usr/lib/../lib/libcygwin.a)t-d000293.o
(/usr/lib/../lib/libcygwin.a)t-d000294.o
(/usr/lib/../lib/libcygwin.a)t-d000333.o
(/usr/lib/../lib/libcygwin.a)t-d000336.o
(/usr/lib/../lib/libcygwin.a)t-d000354.o
(/usr/lib/../lib/libcygwin.a)t-d000356.o
(/usr/lib/../lib/libcygwin.a)t-d000363.o
(/usr/lib/../lib/libcygwin.a)t-d000386.o
(/usr/lib/../lib/libcygwin.a)t-d000401.o
(/usr/lib/../lib/libcygwin.a)t-d000422.o
(/usr/lib/../lib/libcygwin.a)t-d000424.o
(/usr/lib/../lib/libcygwin.a)t-d000427.o
(/usr/lib/../lib/libcygwin.a)t-d000429.o
(/usr/lib/../lib/libcygwin.a)t-d000431.o
(/usr/lib/../lib/libcygwin.a)t-d000437.o
(/usr/lib/../lib/libcygwin.a)t-d000439.o
(/usr/lib/../lib/libcygwin.a)t-d000447.o
(/usr/lib/../lib/libcygwin.a)t-d000456.o
(/usr/lib/../lib/libcygwin.a)t-d000478.o
(/usr/lib/../lib/libcygwin.a)t-d000499.o
(/usr/lib/../lib/libcygwin.a)t-d000504.o
(/usr/lib/../lib/libcygwin.a)t-d000560.o
(/usr/lib/../lib/libcygwin.a)t-d000627.o
(/usr/lib/../lib/libcygwin.a)t-d000640.o
(/usr/lib/../lib/libcygwin.a)t-d000655.o
(/usr/lib/../lib/libcygwin.a)t-d000690.o
(/usr/lib/../lib/libcygwin.a)t-d000711.o
(/usr/lib/../lib/libcygwin.a)t-d000739.o
(/usr/lib/../lib/libcygwin.a)t-d000740.o
(/usr/lib/../lib/libcygwin.a)t-d000742.o
(/usr/lib/../lib/libcygwin.a)t-d000745.o
(/usr/lib/../lib/libcygwin.a)t-d000746.o
(/usr/lib/../lib/libcygwin.a)t-d000755.o
(/usr/lib/../lib/libcygwin.a)t-d000813.o
(/usr/lib/../lib/libcygwin.a)t-d000849.o
(/usr/lib/../lib/libcygwin.a)t-d000954.o
(/usr/lib/../lib/libcygwin.a)t-d000957.o
(/usr/lib/../lib/libcygwin.a)t-d000977.o
(/usr/lib/../lib/libcygwin.a)t-d000990.o
(/usr/lib/../lib/libcygwin.a)t-d000992.o
(/usr/lib/../lib/libcygwin.a)t-d000993.o
(/usr/lib/../lib/libcygwin.a)t-d000996.o
(/usr/lib/../lib/libcygwin.a)t-d001146.o
(/usr/lib/../lib/libcygwin.a)t-d001160.o
(/usr/lib/../lib/libcygwin.a)t-d001166.o
(/usr/lib/../lib/libcygwin.a)t-d001172.o
(/usr/lib/../lib/libcygwin.a)t-d001175.o
(/usr/lib/../lib/libcygwin.a)t-d001177.o
(/usr/lib/../lib/libcygwin.a)t-d001181.o
(/usr/lib/../lib/libcygwin.a)t-d001182.o
(/usr/lib/../lib/libcygwin.a)t-d001188.o
(/usr/lib/../lib/libcygwin.a)t-d001192.o
(/usr/lib/../lib/libcygwin.a)t-d001198.o
(/usr/lib/../lib/libcygwin.a)t-d001202.o
(/usr/lib/../lib/libcygwin.a)t-d001208.o
(/usr/lib/../lib/libcygwin.a)t-d001213.o
(/usr/lib/../lib/libcygwin.a)t-d001265.o
(/usr/lib/../lib/libcygwin.a)t-d001267.o
(/usr/lib/../lib/libcygwin.a)t-d001309.o
(/usr/lib/../lib/libcygwin.a)t-d001324.o
(/usr/lib/../lib/libcygwin.a)t-d001333.o
(/usr/lib/../lib/libcygwin.a)t-d001341.o
(/usr/lib/../lib/libcygwin.a)t-d001352.o
(/usr/lib/../lib/libcygwin.a)t-d001379.o
(/usr/lib/../lib/libcygwin.a)cygwin_crt0.o
(/usr/lib/../lib/libcygwin.a)premain0.o
(/usr/lib/../lib/libcygwin.a)premain1.o
(/usr/lib/../lib/libcygwin.a)premain2.o
(/usr/lib/../lib/libcygwin.a)premain3.o
(/usr/lib/../lib/libcygwin.a)d000000.o
(/usr/lib/../lib/libcygwin.a)d000084.o
(/usr/lib/../lib/libcygwin.a)d001435.o
(/usr/lib/../lib/libcygwin.a)_cygwin_crt0_common.o
(/usr/lib/../lib/libcygwin.a)dll_entry.o
(/usr/lib/../lib/libcygwin.a)dll_main.o
(/usr/lib/../lib/libcygwin.a)pseudo-reloc-dummy.o
(/usr/lib/../lib/libcygwin.a)d000089.o
(/usr/lib/../lib/libcygwin.a)d000176.o
(/usr/lib/../lib/libcygwin.a)d000263.o
(/usr/lib/../lib/libcygwin.a)d000265.o
(/usr/lib/../lib/libcygwin.a)d000722.o
(/usr/lib/../lib/libcygwin.a)d000820.o
(/usr/lib/../lib/libcygwin.a)d000983.o
(/usr/lib/../lib/libcygwin.a)t-d000176.o
(/usr/lib/../lib/libcygwin.a)t-d000263.o
(/usr/lib/../lib/libcygwin.a)t-d000265.o
(/usr/lib/../lib/libcygwin.a)t-d000722.o
(/usr/lib/../lib/libcygwin.a)t-d000820.o
(/usr/lib/../lib/libcygwin.a)t-d000983.o
(/usr/lib/../lib/libcygwin.a)cygwin_attach_dll.o
(/usr/lib/../lib/libcygwin.a)d000282.o
(/usr/lib/../lib/libcygwin.a)t-d000282.o
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libadvapi32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/advapi32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libadvapi32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/advapi32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cygadvapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libadvapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/advapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libadvapi32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libadvapi32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/advapi32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libadvapi32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/advapi32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/cygadvapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libadvapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/advapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libadvapi32.a failed
attempt to open /usr/lib/../lib/libadvapi32.dll.a failed
attempt to open /usr/lib/../lib/advapi32.dll.a failed
attempt to open /usr/lib/../lib/libadvapi32.a failed
attempt to open /usr/lib/../lib/advapi32.lib failed
attempt to open /usr/lib/../lib/cygadvapi32.dll failed
attempt to open /usr/lib/../lib/libadvapi32.dll failed
attempt to open /usr/lib/../lib/advapi32.dll failed
attempt to open /usr/lib/../lib/libadvapi32.a failed
attempt to open /lib/../lib/libadvapi32.dll.a failed
attempt to open /lib/../lib/advapi32.dll.a failed
attempt to open /lib/../lib/libadvapi32.a failed
attempt to open /lib/../lib/advapi32.lib failed
attempt to open /lib/../lib/cygadvapi32.dll failed
attempt to open /lib/../lib/libadvapi32.dll failed
attempt to open /lib/../lib/advapi32.dll failed
attempt to open /lib/../lib/libadvapi32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libadvapi32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/advapi32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libadvapi32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/advapi32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/cygadvapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libadvapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/advapi32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libadvapi32.a failed
attempt to open /usr/lib/w32api/libadvapi32.dll.a failed
attempt to open /usr/lib/w32api/advapi32.dll.a failed
attempt to open /usr/lib/w32api/libadvapi32.a succeeded
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libshell32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/shell32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libshell32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/shell32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cygshell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libshell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/shell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libshell32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libshell32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/shell32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libshell32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/shell32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/cygshell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libshell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/shell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libshell32.a failed
attempt to open /usr/lib/../lib/libshell32.dll.a failed
attempt to open /usr/lib/../lib/shell32.dll.a failed
attempt to open /usr/lib/../lib/libshell32.a failed
attempt to open /usr/lib/../lib/shell32.lib failed
attempt to open /usr/lib/../lib/cygshell32.dll failed
attempt to open /usr/lib/../lib/libshell32.dll failed
attempt to open /usr/lib/../lib/shell32.dll failed
attempt to open /usr/lib/../lib/libshell32.a failed
attempt to open /lib/../lib/libshell32.dll.a failed
attempt to open /lib/../lib/shell32.dll.a failed
attempt to open /lib/../lib/libshell32.a failed
attempt to open /lib/../lib/shell32.lib failed
attempt to open /lib/../lib/cygshell32.dll failed
attempt to open /lib/../lib/libshell32.dll failed
attempt to open /lib/../lib/shell32.dll failed
attempt to open /lib/../lib/libshell32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libshell32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/shell32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libshell32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/shell32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/cygshell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libshell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/shell32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libshell32.a failed
attempt to open /usr/lib/w32api/libshell32.dll.a failed
attempt to open /usr/lib/w32api/shell32.dll.a failed
attempt to open /usr/lib/w32api/libshell32.a succeeded
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libuser32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/user32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libuser32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/user32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cyguser32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libuser32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/user32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libuser32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libuser32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/user32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libuser32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/user32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/cyguser32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libuser32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/user32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libuser32.a failed
attempt to open /usr/lib/../lib/libuser32.dll.a failed
attempt to open /usr/lib/../lib/user32.dll.a failed
attempt to open /usr/lib/../lib/libuser32.a failed
attempt to open /usr/lib/../lib/user32.lib failed
attempt to open /usr/lib/../lib/cyguser32.dll failed
attempt to open /usr/lib/../lib/libuser32.dll failed
attempt to open /usr/lib/../lib/user32.dll failed
attempt to open /usr/lib/../lib/libuser32.a failed
attempt to open /lib/../lib/libuser32.dll.a failed
attempt to open /lib/../lib/user32.dll.a failed
attempt to open /lib/../lib/libuser32.a failed
attempt to open /lib/../lib/user32.lib failed
attempt to open /lib/../lib/cyguser32.dll failed
attempt to open /lib/../lib/libuser32.dll failed
attempt to open /lib/../lib/user32.dll failed
attempt to open /lib/../lib/libuser32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libuser32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/user32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libuser32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/user32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/cyguser32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libuser32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/user32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libuser32.a failed
attempt to open /usr/lib/w32api/libuser32.dll.a failed
attempt to open /usr/lib/w32api/user32.dll.a failed
attempt to open /usr/lib/w32api/libuser32.a succeeded
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libkernel32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/kernel32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libkernel32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/kernel32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/cygkernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libkernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/kernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libkernel32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libkernel32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/kernel32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libkernel32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/kernel32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/cygkernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libkernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/kernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/../lib/libkernel32.a failed
attempt to open /usr/lib/../lib/libkernel32.dll.a failed
attempt to open /usr/lib/../lib/kernel32.dll.a failed
attempt to open /usr/lib/../lib/libkernel32.a failed
attempt to open /usr/lib/../lib/kernel32.lib failed
attempt to open /usr/lib/../lib/cygkernel32.dll failed
attempt to open /usr/lib/../lib/libkernel32.dll failed
attempt to open /usr/lib/../lib/kernel32.dll failed
attempt to open /usr/lib/../lib/libkernel32.a failed
attempt to open /lib/../lib/libkernel32.dll.a failed
attempt to open /lib/../lib/kernel32.dll.a failed
attempt to open /lib/../lib/libkernel32.a failed
attempt to open /lib/../lib/kernel32.lib failed
attempt to open /lib/../lib/cygkernel32.dll failed
attempt to open /lib/../lib/libkernel32.dll failed
attempt to open /lib/../lib/kernel32.dll failed
attempt to open /lib/../lib/libkernel32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libkernel32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/kernel32.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libkernel32.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/kernel32.lib failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/cygkernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libkernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/kernel32.dll failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/../../../../x86_64-pc-cygwin/lib/libkernel32.a failed
attempt to open /usr/lib/w32api/libkernel32.dll.a failed
attempt to open /usr/lib/w32api/kernel32.dll.a failed
attempt to open /usr/lib/w32api/libkernel32.a succeeded
(/usr/lib/w32api/libkernel32.a)dmqds00598.o
(/usr/lib/w32api/libkernel32.a)dmqds00548.o
(/usr/lib/w32api/libkernel32.a)dmqdh.o
(/usr/lib/w32api/libkernel32.a)dmqdt.o
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc_s.dll.a succeeded
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/gcc.dll.a failed
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc.a succeeded
(/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/libgcc.a)_ctors.o
attempt to open /usr/lib/../lib/default-manifest.o succeeded
/usr/lib/../lib/default-manifest.o
attempt to open /usr/lib/gcc/x86_64-pc-cygwin/5.3.0/crtend.o succeeded
/usr/lib/gcc/x86_64-pc-cygwin/5.3.0/crtend.o
../../obj/test/serial_msp_unittest
Running main() from gtest_main.cc
[==========] Running 5 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 5 tests from SerialMspUnitTest
[ RUN      ] SerialMspUnitTest.TestMspProcessReceivedCommand
[       OK ] SerialMspUnitTest.TestMspProcessReceivedCommand (0 ms)
[ RUN      ] SerialMspUnitTest.Test_PID_CONTROLLER
[       OK ] SerialMspUnitTest.Test_PID_CONTROLLER (0 ms)
[ RUN      ] SerialMspUnitTest.Test_PIDValuesInt
[       OK ] SerialMspUnitTest.Test_PIDValuesInt (0 ms)
[ RUN      ] SerialMspUnitTest.Test_PIDValuesFloat
[       OK ] SerialMspUnitTest.Test_PIDValuesFloat (0 ms)
[ RUN      ] SerialMspUnitTest.TestMspOutMessageLengthsCommand
[       OK ] SerialMspUnitTest.TestMspOutMessageLengthsCommand (0 ms)
[----------] 5 tests from SerialMspUnitTest (1 ms total)

[----------] Global test environment tear-down
[==========] 5 tests from 1 test case ran. (1 ms total)
[  PASSED  ] 5 tests.

Compilation finished at Wed Mar 30 15:50:01",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,50,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203454140,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","installing 32bit cygwin, it will take some time ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,51,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203456245,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","ok, keep us posted.  thanks again for looking into this.  it'll be good when a solution is found.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,52,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203468921,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","OK, I can reproduce it on cygwin32",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,53,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203482527,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","Hmm ... calling convention name mangling ...
should work now, can you test please?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/ledvinap,54,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203485830,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",BTW: this may work on Darwin: http://stackoverflow.com/questions/17669593/how-to-get-a-pointer-to-a-binary-section-in-mac-os-x,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,55,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203841733,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests",just tried this and it seems to work! woohoo! good work peter!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,56,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203848757,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","ok, since the cygwin 32/64 build issues are solved I will merge this now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1981,2016-03-25T13:23:19Z,2016-03-31T09:32:42Z,2016-03-31T09:34:33Z,MERGED,True,260,364,65,https://github.com/ledvinap,Config structure registration improved,2,[],https://github.com/cleanflight/cleanflight/pull/1981,https://github.com/hydra,57,https://github.com/cleanflight/cleanflight/pull/1981#issuecomment-203850644,"use __pg_registry_start and  __pg_registry_end to find registered
config structures
hide config registration into macro
use inserted gnu ld section on unittests","@ledvinap awesome work - thanks for the countless hours of digging around in linker documentation and trawling the net for hints.  really really appreciated.
we'll work on the OSX stuff soon.  but that will not delay merging this.  if you can look into that while I carry on with the migration that would be great.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1982,2016-03-25T13:24:31Z,2016-03-25T19:30:12Z,2016-03-25T19:30:12Z,CLOSED,False,119,10,9,https://github.com/Ahrovan,V1.12.1,8,[],https://github.com/cleanflight/cleanflight/pull/1982,https://github.com/Ahrovan,1,https://github.com/cleanflight/cleanflight/pull/1982,"Hi
if we enable rx-msp input, sonar no receive any data and we can not use alt-hold.
Board : naze32
sonar : srf04 -> Motor 5 and 6
Msp : usart1 or 2
baro : MS5611 -> I2C
thx, Ahrovan","Hi
if we enable rx-msp input, sonar no receive any data and we can not use alt-hold.
Board : naze32
sonar : srf04 -> Motor 5 and 6
Msp : usart1 or 2
baro : MS5611 -> I2C
thx, Ahrovan",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1982,2016-03-25T13:24:31Z,2016-03-25T19:30:12Z,2016-03-25T19:30:12Z,CLOSED,False,119,10,9,https://github.com/Ahrovan,V1.12.1,8,[],https://github.com/cleanflight/cleanflight/pull/1982,https://github.com/SteveAmor,2,https://github.com/cleanflight/cleanflight/pull/1982#issuecomment-201431516,"Hi
if we enable rx-msp input, sonar no receive any data and we can not use alt-hold.
Board : naze32
sonar : srf04 -> Motor 5 and 6
Msp : usart1 or 2
baro : MS5611 -> I2C
thx, Ahrovan","@Ahrovan please close this pull request. You ask a question, not provide a code fix. Thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/1984,"rebased #1421, to avoid force-push for now.","rebased #1421, to avoid force-push for now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/MJ666,2,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-201994764,"rebased #1421, to avoid force-push for now.",I like this is now going into this direction. This will allow the cleaner implementation of the AlienFlight F3 V2 LED driver (already present in RaceFlight). Also all pin initialisation code is much more simple if all is finaly updated.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/blckmn,3,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-202819816,"rebased #1421, to avoid force-push for now.","If this gets merged in we can start updating the drivers throughout - it can also be used in the configuration updates @hydra is working on.
Key is to keep the implementation hidden and not bleed it throughout. That way it's nice and easy to adjust for different MCUs in future.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-203025418,"rebased #1421, to avoid force-push for now.",will attend to this after #1976,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-210852867,"rebased #1421, to avoid force-push for now.","some other PR's need to be merged first.  so annoying having to delay this yet again.
#2016 and #2012 take priority.  rebases and updates to this PR welcomed!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/blckmn,6,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-221146994,"rebased #1421, to avoid force-push for now.",It'd be great to have this one ready for 1.14 :) very keen to get it in - waiting on it for some driver updates to put forward. @ledvinap @hydra what do you reckon?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/blckmn,7,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-223921164,"rebased #1421, to avoid force-push for now.",@ledvinap if you could rebase - I am happy to add more IO changes to your branch.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-224948447,"rebased #1421, to avoid force-push for now.","Rebased, some testing on real HW is probably necessary",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-233295915,"rebased #1421, to avoid force-push for now.","Merged upstream. Maybe it would be worth rebasing before merge, but it's quite time consuming",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/ledvinap,10,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-233296449,"rebased #1421, to avoid force-push for now.","@hydra: Can you find time and decide what to do ith this PR? It's 10 months old, its quite boring to keep it in sync ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/blckmn,11,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-233303688,"rebased #1421, to avoid force-push for now.",Its working well. Was in RF and now in BF.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/borisbstyle,12,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-233304290,"rebased #1421, to avoid force-push for now.",Yeah this PR is a killer!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-233311718,"rebased #1421, to avoid force-push for now.","Yes, I agree, this PR should be tested and merged in as soon as possible.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-238895743,"rebased #1421, to avoid force-push for now.",Is this ready for merge?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-238908509,"rebased #1421, to avoid force-push for now.",it still merges cleanly with master and compiles...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/martinbudden,16,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-238909278,"rebased #1421, to avoid force-push for now.","It looks good to me. I've just finished converting the whole of iNav to the new IO, so I am somewhat familiar with this code now.
Probably good to get confirmation from @ledvinap , though.
Good to see you are about to start this work.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-238971669,"rebased #1421, to avoid force-push for now.","@martinbudden ok great, let's merge this now then and we'll pick up the pieces as they fall.  This is long overdue and I fear that if it's not in master soon it'll never get done.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-238980054,"rebased #1421, to avoid force-push for now.","@ledvinap see 91debad. EDIT, i mean: 8a1a890
Tested on EVO and F3OSD hardware OK.  Merged.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1984,2016-03-25T16:26:47Z,2016-08-10T19:38:33Z,2016-08-11T07:50:15Z,MERGED,True,2259,556,55,https://github.com/ledvinap,Feature exti 2,11,"['Enhancement', 'Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1984,https://github.com/ledvinap,19,https://github.com/cleanflight/cleanflight/pull/1984#issuecomment-239094541,"rebased #1421, to avoid force-push for now.","I'll get to this next week. Only exti handling got changed, it should work correctly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/SpektrumRC,1,https://github.com/cleanflight/cleanflight/pull/1985,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.","These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1985#issuecomment-204394633,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.","@SpektrumFPV it's great to have someone official helping out.  I'm rather busy with some other changes at the moment and will let the discussion run for a bit.
I definately agree that if an implementation is wrong then it should be fixed.  Definately don't want to alienate users in the process of fixing it though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/SpektrumRC,3,https://github.com/cleanflight/cleanflight/pull/1985#issuecomment-204762129,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.","@hydra I will go ahead and close this pull request and make some of the changes MJ666 suggested. I'll submit separate pull requests for the new features and the data scaling, and we can probably hold off on the data scaling change until there is an adequate update to pair it with that might reduce impact on current users.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/proggod,4,https://github.com/cleanflight/cleanflight/pull/1985#issuecomment-217646814,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.",Would yo be willing to submit this against the raceflight fork to the release branch?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/MiguelFAlvarez,5,https://github.com/cleanflight/cleanflight/pull/1985#issuecomment-217747686,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.",@proggod Sure thing. I'll review my latest changes tomorrow and try to get the pull request in then.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/proggod,6,https://github.com/cleanflight/cleanflight/pull/1985#issuecomment-217757365,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.",Great,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/SpektrumRC,7,https://github.com/cleanflight/cleanflight/pull/1985#issuecomment-217873887,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.",@proggod  Do you want the scaling changes included in the pull request as well? or do we want to hold off on that for now?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/proggod,8,https://github.com/cleanflight/cleanflight/pull/1985#issuecomment-217905162,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.",Can you make it based on a #define so i can just make a setting for it in the config when we release new config format?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1985,2016-03-25T19:16:05Z,2016-04-02T17:24:01Z,2016-05-09T21:35:25Z,CLOSED,False,55,8,3,https://github.com/SpektrumRC,Fixes to Spektrum serial remote receiver implementation,1,[],https://github.com/cleanflight/cleanflight/pull/1985,https://github.com/SpektrumRC,9,https://github.com/cleanflight/cleanflight/pull/1985#issuecomment-217997238,"These are some fixes and additions we've made to the current implementation of Spektrum serial receivers.
Data scaling modified to match intended PWM channel value. This will provide consistency in channel output values between spektrum receivers using serial, PPM, or PWM to send channel data to the flight controller. This should also an increase resolution and will  cause an increase in travel (People currently using 150% travel on cleanflight with a spektrum transmitter should reduce to 125%).
Antenna fade data is now read from remote receivers and is stored in variable ""frameLoss"". Currently there is nothing being done with this data, but it can be made available for things such as telemetry.
Bind type is now read from remote receivers if bound as an ""internal"" receiver (bound through either autobind or bound from flight controller). If so, the bind type is read and the resolution setting will automatically be set to 1024 or 2048.","@proggod Just submitted it, great suggestion! Will also make new pull request for cleanflight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1986,2016-03-26T10:33:51Z,2016-03-30T13:56:26Z,2016-03-30T18:05:36Z,CLOSED,False,3445,1440,95,https://github.com/martinbudden,Added test for MSP_BOARD_ALIGNMENT and MSP_SET_BOARD_ALIGNMENT.,63,[],https://github.com/cleanflight/cleanflight/pull/1986,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/1986,"Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.","Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1986,2016-03-26T10:33:51Z,2016-03-30T13:56:26Z,2016-03-30T18:05:36Z,CLOSED,False,3445,1440,95,https://github.com/martinbudden,Added test for MSP_BOARD_ALIGNMENT and MSP_SET_BOARD_ALIGNMENT.,63,[],https://github.com/cleanflight/cleanflight/pull/1986,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1986#issuecomment-203024779,"Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.",can you rebase this against configuration-storage branch and I will merge into that.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1986,2016-03-26T10:33:51Z,2016-03-30T13:56:26Z,2016-03-30T18:05:36Z,CLOSED,False,3445,1440,95,https://github.com/martinbudden,Added test for MSP_BOARD_ALIGNMENT and MSP_SET_BOARD_ALIGNMENT.,63,[],https://github.com/cleanflight/cleanflight/pull/1986,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/1986#issuecomment-203080793,"Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.","Oh, oh, I think I've messed up the rebase. I'll try again",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1986,2016-03-26T10:33:51Z,2016-03-30T13:56:26Z,2016-03-30T18:05:36Z,CLOSED,False,3445,1440,95,https://github.com/martinbudden,Added test for MSP_BOARD_ALIGNMENT and MSP_SET_BOARD_ALIGNMENT.,63,[],https://github.com/cleanflight/cleanflight/pull/1986,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/1986#issuecomment-203084538,"Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.","Actually, perhaps my rebase was OK.
@hydra, not sure if my rebase worked or not. Is the PR okay for you to merge? If not, let me know and I'll redo it again from scratch.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1986,2016-03-26T10:33:51Z,2016-03-30T13:56:26Z,2016-03-30T18:05:36Z,CLOSED,False,3445,1440,95,https://github.com/martinbudden,Added test for MSP_BOARD_ALIGNMENT and MSP_SET_BOARD_ALIGNMENT.,63,[],https://github.com/cleanflight/cleanflight/pull/1986,https://github.com/blckmn,5,https://github.com/cleanflight/cleanflight/pull/1986#issuecomment-203338225,"Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.",@martinbudden it's because your pull request is to cleanflight master branch... If you close it and re raise the PR to the configuration-storage branch :),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1986,2016-03-26T10:33:51Z,2016-03-30T13:56:26Z,2016-03-30T18:05:36Z,CLOSED,False,3445,1440,95,https://github.com/martinbudden,Added test for MSP_BOARD_ALIGNMENT and MSP_SET_BOARD_ALIGNMENT.,63,[],https://github.com/cleanflight/cleanflight/pull/1986,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/1986#issuecomment-203417473,"Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.","no need, i can cherry-pick the commit.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1986,2016-03-26T10:33:51Z,2016-03-30T13:56:26Z,2016-03-30T18:05:36Z,CLOSED,False,3445,1440,95,https://github.com/martinbudden,Added test for MSP_BOARD_ALIGNMENT and MSP_SET_BOARD_ALIGNMENT.,63,[],https://github.com/cleanflight/cleanflight/pull/1986,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/1986#issuecomment-203432035,"Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.","@blckmn , thanks, I had just about worked out that for myself. But I thought @hydra would probably still be able to merge it in, hence the question.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1986,2016-03-26T10:33:51Z,2016-03-30T13:56:26Z,2016-03-30T18:05:36Z,CLOSED,False,3445,1440,95,https://github.com/martinbudden,Added test for MSP_BOARD_ALIGNMENT and MSP_SET_BOARD_ALIGNMENT.,63,[],https://github.com/cleanflight/cleanflight/pull/1986,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/1986#issuecomment-203444556,"Added test to check MSP handling of boardAlignment.
Not tested on the configuration-storage branch, but I think with a one line change  this can be used as a test with the new parameter group code.",merged.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1987,2016-03-27T20:01:53Z,2016-03-31T09:45:14Z,2016-03-31T09:45:38Z,CLOSED,False,16,14,4,https://github.com/hydra,Remove PG_REGISTRY_TAIL_SECTION from configuration storage,1,[],https://github.com/cleanflight/cleanflight/pull/1987,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/1987,"@ledvinap This is a solution to your comment regarding the registry tail section.
#1976 (comment)
Please review and comment.
I don't like it from a unit test perspective.  is there a better way to do it?","@ledvinap This is a solution to your comment regarding the registry tail section.
#1976 (comment)
Please review and comment.
I don't like it from a unit test perspective.  is there a better way to do it?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1987,2016-03-27T20:01:53Z,2016-03-31T09:45:14Z,2016-03-31T09:45:38Z,CLOSED,False,16,14,4,https://github.com/hydra,Remove PG_REGISTRY_TAIL_SECTION from configuration storage,1,[],https://github.com/cleanflight/cleanflight/pull/1987,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/1987#issuecomment-202137364,"@ledvinap This is a solution to your comment regarding the registry tail section.
#1976 (comment)
Please review and comment.
I don't like it from a unit test perspective.  is there a better way to do it?","#1981 (first commit) does implement registry start/end, including unittest (inserting section into default ld script, works both on gcc and clang)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1987,2016-03-27T20:01:53Z,2016-03-31T09:45:14Z,2016-03-31T09:45:38Z,CLOSED,False,16,14,4,https://github.com/hydra,Remove PG_REGISTRY_TAIL_SECTION from configuration storage,1,[],https://github.com/cleanflight/cleanflight/pull/1987,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/1987#issuecomment-203855788,"@ledvinap This is a solution to your comment regarding the registry tail section.
#1976 (comment)
Please review and comment.
I don't like it from a unit test perspective.  is there a better way to do it?",superseded by #1981,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/DzikuVx,1,https://github.com/cleanflight/cleanflight/pull/1990,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-203048753,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","@hydra , @borisbstyle I think the RX scheduler setting of 50Hz is probably to small. From looking at the DeviationTx software, DSM2 protocol seems to send a packet every 10ms, and some other protocols send a packet every 5ms. So setting the RX period to at least 100Hz and probably 200Hz seems a good idea.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-203053248,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available",@martinbudden : I thought that RX frequency is event-driven (it was when RC interpolation was implemented). This did change with new scheduler?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-203085559,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","@ledvinap , no, there has not been a change in the event-driven stuff.
To be honest, I'm not sure when the event-driven stuff is used, and when polling is used - I need to get my head around this. What, then is the purpose of the 50Hz RX period?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-203087206,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","cleanflight/src/main/mw.c
    
    
         Line 779
      in
      2d1b548
    
  
  
    

        
          
           bool taskUpdateRxCheck(uint32_t currentDeltaTime) 
        
    
  


New RX data are checked at much higher frequency (each scheduling?). 50Hz is fallback when when taskUpdateRxCheck() does not return true.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-203109299,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available",I sort of get that. What I don't really understand is when the fallback condition would actually occur.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/borisbstyle,7,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-205327306,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","@martinbudden
Fallback is for PWM / PPM at the moment and when in failsafe. I know someone was working to make PPM event driven too? Not sure if it got merged",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-217522219,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","ok, merging.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/martinbudden,9,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-217585047,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","@DzikuVx , @hydra , I've just had a further look at this, and ALL of the annexCode is RX data dependent - so it should all be moved into taskUpdateRxMain. Indeed this is what @borisbstyle has done in betaflight.
In fact we can go further - we can move the filterRc code there as well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/ledvinap,10,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-217627749,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","@martinbudden: filterRC does interpolate received command to PID frequency. It does help to reduce steps in RC signal - dynamics are fast enough to react to single steps. With D-term based on gyro only, this effect is greatly reduced, but IMO the cost is slower reaction to stick command (D-TERM will augment stick reaction).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/borisbstyle,11,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-217628048,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","@ledvinap
I think I helped that fact with making P accelerating / increased with more stick input.
You can get more out of your tune as we feel the increasing stick always more than decreasing stick deflections.
What I did for now is just a easy math what makes Kp dynamic. It adds up to 50% of P linearly with more stick input up to certain stick threshold.
This brings the back the sharpness took away eith delta from measurement without penalty.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-217629815,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","@borisbstyle:  With D-term from stick command, the braking starts when stick starts moving toward neutral position. With P-term augmentation, P-term effect will be increased only if you go to opposite side. But maybe second variant feels better ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/borisbstyle,13,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-217631496,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","yes but the delta from measurement handles braking also really well.
Also reduced P with stick falling back introduces some slight smoothing to
the neutral.
There is always a downside, but I think this is a good compromise for all
scenarios.
Op 7 mei 2016 13:21 schreef ""Petr Ledvina"" notifications@github.com:

@borisbstyle https://github.com/borisbstyle: With D-term from stick
command, the braking starts when stick starts moving toward neutral
position. With P-term augmentation, P-term effect will be increased only if
you go to opposite side. But maybe second variant feels better ..
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#1990 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-217631813,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","Delta from measurement is in opposite direction - D-term has negative sign, opposing change...
But I am talking about theory only - in practice, it may feel well",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/borisbstyle,15,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-217632059,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available","O yeah you mean opposite from the sticks.
I think that for the feel it doesnt make difference as your brain wants to
slow the rotation down and there is no sharpness needed.
Another good experiment would be to use rcSmoothing for derivative
calculation only and use actual unsmoothed rccommand for the rest of the
calculations.
Op 7 mei 2016 14:08 schreef ""Petr Ledvina"" notifications@github.com:

Delta from measurement is in opposite direction - D-term has negative
sign, opposing change...
But I am talking about theory only - in practice, it may feel well
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#1990 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1990,2016-03-29T14:43:31Z,2016-05-06T18:27:51Z,2016-05-27T22:34:15Z,MERGED,True,13,4,1,https://github.com/DzikuVx,"TPS, pid scaling and throttle expo updated outside main PID loop",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1990,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/1990#issuecomment-222267776,"Currently, TPA and throttle expo are updated every iteration of PID main loop. With new RX data available only at 50Hz this means that the same operations are repeated for the same data.
With looptime 2000 the same output is computed 10 times before it changes.
This pull requests updates those coefficients only when new RX data is available",it should be noted there was a critical bug with this PR see #2165 and the fix in #2171,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1991,2016-03-30T10:20:50Z,2016-06-01T15:17:57Z,2016-06-01T15:17:57Z,CLOSED,False,2,0,1,https://github.com/cahe,Winbond 25Q16CV support in Cleanflight,2,['Low priority'],https://github.com/cleanflight/cleanflight/pull/1991,https://github.com/cahe,1,https://github.com/cleanflight/cleanflight/pull/1991,Banggood sells a naze32 rev6 board that uses this chip. It's currently unsupported in cleanflight. I've made this modification and tested it - it works on those boards.,Banggood sells a naze32 rev6 board that uses this chip. It's currently unsupported in cleanflight. I've made this modification and tested it - it works on those boards.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1991,2016-03-30T10:20:50Z,2016-06-01T15:17:57Z,2016-06-01T15:17:57Z,CLOSED,False,2,0,1,https://github.com/cahe,Winbond 25Q16CV support in Cleanflight,2,['Low priority'],https://github.com/cleanflight/cleanflight/pull/1991,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1991#issuecomment-203855544,Banggood sells a naze32 rev6 board that uses this chip. It's currently unsupported in cleanflight. I've made this modification and tested it - it works on those boards.,"are the naze32 rev6 boards from banggood official or clones?
do you have links to the products on their site?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1991,2016-03-30T10:20:50Z,2016-06-01T15:17:57Z,2016-06-01T15:17:57Z,CLOSED,False,2,0,1,https://github.com/cahe,Winbond 25Q16CV support in Cleanflight,2,['Low priority'],https://github.com/cleanflight/cleanflight/pull/1991,https://github.com/cahe,3,https://github.com/cleanflight/cleanflight/pull/1991#issuecomment-203866620,Banggood sells a naze32 rev6 board that uses this chip. It's currently unsupported in cleanflight. I've made this modification and tested it - it works on those boards.,"I can't really tell if it's official or a clone. It's this board:
http://www.banggood.com/CK-REV6-NAZE32-10DF-Flight-Controller-For-RC-Multirotors-Baseflight-Configurator-p-1030040.html
Related issue #1989",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1991,2016-03-30T10:20:50Z,2016-06-01T15:17:57Z,2016-06-01T15:17:57Z,CLOSED,False,2,0,1,https://github.com/cahe,Winbond 25Q16CV support in Cleanflight,2,['Low priority'],https://github.com/cleanflight/cleanflight/pull/1991,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/1991#issuecomment-205003746,Banggood sells a naze32 rev6 board that uses this chip. It's currently unsupported in cleanflight. I've made this modification and tested it - it works on those boards.,"it's a clone.
users should support official manufacturers and not feed hands into the clone makers.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1991,2016-03-30T10:20:50Z,2016-06-01T15:17:57Z,2016-06-01T15:17:57Z,CLOSED,False,2,0,1,https://github.com/cahe,Winbond 25Q16CV support in Cleanflight,2,['Low priority'],https://github.com/cleanflight/cleanflight/pull/1991,https://github.com/cahe,5,https://github.com/cleanflight/cleanflight/pull/1991#issuecomment-205021561,Banggood sells a naze32 rev6 board that uses this chip. It's currently unsupported in cleanflight. I've made this modification and tested it - it works on those boards.,"That's probably true, but I bet many people new to this whole Quadcopter thing, just like me, don't really know the difference. Especially in the beginning of their UAV journey. I've seen some comments on reddit and other sites from people not understanding why this does not work properly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1991,2016-03-30T10:20:50Z,2016-06-01T15:17:57Z,2016-06-01T15:17:57Z,CLOSED,False,2,0,1,https://github.com/cahe,Winbond 25Q16CV support in Cleanflight,2,['Low priority'],https://github.com/cleanflight/cleanflight/pull/1991,https://github.com/bbbenji,6,https://github.com/cleanflight/cleanflight/pull/1991#issuecomment-212388909,Banggood sells a naze32 rev6 board that uses this chip. It's currently unsupported in cleanflight. I've made this modification and tested it - it works on those boards.,"@hydra
I have soldered this exact same chip (thinking it was supported) to my authentic Naze32 which came with an unpopulated memory. I would love to see this PR merged so I don't have to manually add the support each time and compile myself.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1991,2016-03-30T10:20:50Z,2016-06-01T15:17:57Z,2016-06-01T15:17:57Z,CLOSED,False,2,0,1,https://github.com/cahe,Winbond 25Q16CV support in Cleanflight,2,['Low priority'],https://github.com/cleanflight/cleanflight/pull/1991,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/1991#issuecomment-223026366,Banggood sells a naze32 rev6 board that uses this chip. It's currently unsupported in cleanflight. I've made this modification and tested it - it works on those boards.,#2148 will take care of this.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1992,2016-03-30T15:57:13Z,2016-03-31T09:42:18Z,2016-03-31T10:26:10Z,CLOSED,False,21469,11066,306,https://github.com/65drones,Add LS-F3+OSD flight controller as one of the build,788,['Invalid'],https://github.com/cleanflight/cleanflight/pull/1992,https://github.com/65drones,1,https://github.com/cleanflight/cleanflight/pull/1992,"LS-F3+OSD is one of the F3-based flight controller with integrated OSD and yet it is slim. This board is getting popular. This being one of the build will help a lot of people whom has this board as they are currently have two firmware available. These two firmware are custom build by the developer.
Info on the board can be found at:
https://www.65drones.com/blogs/news/115817219-heres-how-to-make-ls-f3-osd-f3-osd-integrated-flight-controller-work-for-you#","LS-F3+OSD is one of the F3-based flight controller with integrated OSD and yet it is slim. This board is getting popular. This being one of the build will help a lot of people whom has this board as they are currently have two firmware available. These two firmware are custom build by the developer.
Info on the board can be found at:
https://www.65drones.com/blogs/news/115817219-heres-how-to-make-ls-f3-osd-f3-osd-integrated-flight-controller-work-for-you#",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1992,2016-03-30T15:57:13Z,2016-03-31T09:42:18Z,2016-03-31T10:26:10Z,CLOSED,False,21469,11066,306,https://github.com/65drones,Add LS-F3+OSD flight controller as one of the build,788,['Invalid'],https://github.com/cleanflight/cleanflight/pull/1992,https://github.com/SteveAmor,2,https://github.com/cleanflight/cleanflight/pull/1992#issuecomment-203586361,"LS-F3+OSD is one of the F3-based flight controller with integrated OSD and yet it is slim. This board is getting popular. This being one of the build will help a lot of people whom has this board as they are currently have two firmware available. These two firmware are custom build by the developer.
Info on the board can be found at:
https://www.65drones.com/blogs/news/115817219-heres-how-to-make-ls-f3-osd-f3-osd-integrated-flight-controller-work-for-you#","@65drones please close this PR and resubmit after reading the Cleanflight developers documentation. Alternatively, you may want to raise an issue for enhancing the Cleanflight code to support this board.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1992,2016-03-30T15:57:13Z,2016-03-31T09:42:18Z,2016-03-31T10:26:10Z,CLOSED,False,21469,11066,306,https://github.com/65drones,Add LS-F3+OSD flight controller as one of the build,788,['Invalid'],https://github.com/cleanflight/cleanflight/pull/1992,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/1992#issuecomment-203854864,"LS-F3+OSD is one of the F3-based flight controller with integrated OSD and yet it is slim. This board is getting popular. This being one of the build will help a lot of people whom has this board as they are currently have two firmware available. These two firmware are custom build by the developer.
Info on the board can be found at:
https://www.65drones.com/blogs/news/115817219-heres-how-to-make-ls-f3-osd-f3-osd-integrated-flight-controller-work-for-you#","@65drones hi!
Please create a pull request that has JUST the changes needed, and not all of the betaflight changes too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1992,2016-03-30T15:57:13Z,2016-03-31T09:42:18Z,2016-03-31T10:26:10Z,CLOSED,False,21469,11066,306,https://github.com/65drones,Add LS-F3+OSD flight controller as one of the build,788,['Invalid'],https://github.com/cleanflight/cleanflight/pull/1992,https://github.com/65drones,4,https://github.com/cleanflight/cleanflight/pull/1992#issuecomment-203870186,"LS-F3+OSD is one of the F3-based flight controller with integrated OSD and yet it is slim. This board is getting popular. This being one of the build will help a lot of people whom has this board as they are currently have two firmware available. These two firmware are custom build by the developer.
Info on the board can be found at:
https://www.65drones.com/blogs/news/115817219-heres-how-to-make-ls-f3-osd-f3-osd-integrated-flight-controller-work-for-you#","Hi Dominic
noted. I am not quite sure how to do this. I am not a developer and not
familiar with github. I would hope Dominic and Boris to consider making
Betaflight or Cleanflight to support the a F3 flight controller
(LS-F3+OSD). I am not sure how to ask for help via github. Please advise on
how should I go about doing this.
Very sorry. I created a mess.
On Thu, Mar 31, 2016 at 5:42 PM, Dominic Clifton notifications@github.com
wrote:

Closed #1992 #1992.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#1992 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1994,2016-03-31T19:06:11Z,2016-04-01T13:01:12Z,2016-04-01T19:30:29Z,MERGED,True,39,46,7,https://github.com/martinbudden,Renamed 'base' to 'address' and 'format' to 'version'.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1994,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/1994,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1994,2016-03-31T19:06:11Z,2016-04-01T13:01:12Z,2016-04-01T19:30:29Z,MERGED,True,39,46,7,https://github.com/martinbudden,Renamed 'base' to 'address' and 'format' to 'version'.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1994,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1994#issuecomment-204390028,,"merged, thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1995,2016-03-31T23:32:31Z,2016-04-01T12:57:51Z,2016-06-14T17:27:42Z,MERGED,True,20,5,2,https://github.com/martinbudden,Fix parameter groups tests under running on OSX.,3,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1995,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/1995,"Needs a bit of tidying, but it works.","Needs a bit of tidying, but it works.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1995,2016-03-31T23:32:31Z,2016-04-01T12:57:51Z,2016-06-14T17:27:42Z,MERGED,True,20,5,2,https://github.com/martinbudden,Fix parameter groups tests under running on OSX.,3,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1995,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1995#issuecomment-204303423,"Needs a bit of tidying, but it works.",could you update the makefile so that the parameter group settings are defined once (in whatever os specific way needed) and then used when needed?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1995,2016-03-31T23:32:31Z,2016-04-01T12:57:51Z,2016-06-14T17:27:42Z,MERGED,True,20,5,2,https://github.com/martinbudden,Fix parameter groups tests under running on OSX.,3,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1995,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/1995#issuecomment-204306086,"Needs a bit of tidying, but it works.","@hydra ,
I'm aware this needs tidying up, as you suggest. I don't like the ifeq ($(UNAME), Darwin) any more than you do. And I suspect that -no_pie can be removed from another one of the tests.
But it was late and I had a working version...
I'd appreciate it if you merge it into the configuration-storage branch as-is, and I'll do another PR over the weekend that tidies it up.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1995,2016-03-31T23:32:31Z,2016-04-01T12:57:51Z,2016-06-14T17:27:42Z,MERGED,True,20,5,2,https://github.com/martinbudden,Fix parameter groups tests under running on OSX.,3,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1995,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/1995#issuecomment-204334776,"Needs a bit of tidying, but it works.","@hydra , @ledvinap updated now as per comments.
I called the flags PG_FLAGS, I was in half a mind to call them LDFLAGS but decided that idea needed a bit more discussion. I quite like @ledvinap 's idea of generalising this, that is use LDFLAGS and using a general linker_script.ld",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1995,2016-03-31T23:32:31Z,2016-04-01T12:57:51Z,2016-06-14T17:27:42Z,MERGED,True,20,5,2,https://github.com/martinbudden,Fix parameter groups tests under running on OSX.,3,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1995,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/1995#issuecomment-204339019,"Needs a bit of tidying, but it works.","@martinbudden : LDFLAGS (https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html) contains argument that should be passed on linker step.
CF Makefile is quite non-standard in this sense.
This PR is great. I'll find some time to fix Makefile later (there are lots of possible improvements) ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1995,2016-03-31T23:32:31Z,2016-04-01T12:57:51Z,2016-06-14T17:27:42Z,MERGED,True,20,5,2,https://github.com/martinbudden,Fix parameter groups tests under running on OSX.,3,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1995,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/1995#issuecomment-204380217,"Needs a bit of tidying, but it works.",@martinbudden @ledvinap ready for merge?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1995,2016-03-31T23:32:31Z,2016-04-01T12:57:51Z,2016-06-14T17:27:42Z,MERGED,True,20,5,2,https://github.com/martinbudden,Fix parameter groups tests under running on OSX.,3,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1995,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/1995#issuecomment-204381507,"Needs a bit of tidying, but it works.","@hydra , yes, ready for merge. Can you also merge in the name changes ('address' and 'version') as well, I'd like those in before I write my demo code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1995,2016-03-31T23:32:31Z,2016-04-01T12:57:51Z,2016-06-14T17:27:42Z,MERGED,True,20,5,2,https://github.com/martinbudden,Fix parameter groups tests under running on OSX.,3,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/1995,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/1995#issuecomment-204390223,"Needs a bit of tidying, but it works.","done, thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1996,2016-04-01T01:02:14Z,2016-04-06T22:40:53Z,2016-04-06T22:40:53Z,CLOSED,False,501,49,25,https://github.com/4712,1-wire-pass-through-vcp,1,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/1996,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/1996,"also changed uart 1wire-pass-through to avoid need of FC reboot after
exit.","also changed uart 1wire-pass-through to avoid need of FC reboot after
exit.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1996,2016-04-01T01:02:14Z,2016-04-06T22:40:53Z,2016-04-06T22:40:53Z,CLOSED,False,501,49,25,https://github.com/4712,1-wire-pass-through-vcp,1,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/1996,https://github.com/4712,2,https://github.com/cleanflight/cleanflight/pull/1996#issuecomment-204195977,"also changed uart 1wire-pass-through to avoid need of FC reboot after
exit.","For testing use BLHeliSuiteBeta 14.4.0.4 or above
https://github.com/4712/cleanflight/releases/download/v1.12.0-1wire-pass-through-vcp/BLHeliSuiteBeta14404.zip",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1996,2016-04-01T01:02:14Z,2016-04-06T22:40:53Z,2016-04-06T22:40:53Z,CLOSED,False,501,49,25,https://github.com/4712,1-wire-pass-through-vcp,1,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/1996,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/1996#issuecomment-204392856,"also changed uart 1wire-pass-through to avoid need of FC reboot after
exit.","great!!  this will make a lot of people happy.
can other people please try this out?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1996,2016-04-01T01:02:14Z,2016-04-06T22:40:53Z,2016-04-06T22:40:53Z,CLOSED,False,501,49,25,https://github.com/4712,1-wire-pass-through-vcp,1,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/1996,https://github.com/Arakon,4,https://github.com/cleanflight/cleanflight/pull/1996#issuecomment-204671105,"also changed uart 1wire-pass-through to avoid need of FC reboot after
exit.","Tested on a CC3DF3 (CC3D with F3 chip instead of F1) and it works flawless. I compiled it into a Betaflight 2.4.1 build I use, though, but I see no reason why it wouldn't work in CF too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1996,2016-04-01T01:02:14Z,2016-04-06T22:40:53Z,2016-04-06T22:40:53Z,CLOSED,False,501,49,25,https://github.com/4712,1-wire-pass-through-vcp,1,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/1996,https://github.com/4712,5,https://github.com/cleanflight/cleanflight/pull/1996#issuecomment-206599570,"also changed uart 1wire-pass-through to avoid need of FC reboot after
exit.",Superseded by #2019,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1997,2016-04-01T12:54:35Z,2016-04-01T13:10:50Z,2016-04-01T19:30:16Z,MERGED,True,24,30,2,https://github.com/ledvinap,Fix possibly uninitialized variable warnings,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1997,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/1997,Also refactor cli variables slightly to reduce code duplication,Also refactor cli variables slightly to reduce code duplication,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1997,2016-04-01T12:54:35Z,2016-04-01T13:10:50Z,2016-04-01T19:30:16Z,MERGED,True,24,30,2,https://github.com/ledvinap,Fix possibly uninitialized variable warnings,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1997,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/1997#issuecomment-204390536,Also refactor cli variables slightly to reduce code duplication,merging now...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1997,2016-04-01T12:54:35Z,2016-04-01T13:10:50Z,2016-04-01T19:30:16Z,MERGED,True,24,30,2,https://github.com/ledvinap,Fix possibly uninitialized variable warnings,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1997,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/1997#issuecomment-204392331,Also refactor cli variables slightly to reduce code duplication,"done, fixed code style and removed the *invalid var*  since it'll never come up in production code.  a unit test would be better there.  e.g. to test all the values of the cli table are valid.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1998,2016-04-01T15:04:30Z,2016-04-01T19:26:16Z,2016-04-01T19:29:51Z,MERGED,True,159,113,1,https://github.com/ledvinap,Use constant initializers in config reset,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1998,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/1998,"Not that bad, 248bytes saved:
 129160    1236   19176  149572   24844 ./obj/main/cleanflight_SPRACINGF3MINI.elf
 128912    1236   19176  149324   2474c ./obj/main/cleanflight_SPRACINGF3MINI.elf","Not that bad, 248bytes saved:
 129160    1236   19176  149572   24844 ./obj/main/cleanflight_SPRACINGF3MINI.elf
 128912    1236   19176  149324   2474c ./obj/main/cleanflight_SPRACINGF3MINI.elf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1998,2016-04-01T15:04:30Z,2016-04-01T19:26:16Z,2016-04-01T19:29:51Z,MERGED,True,159,113,1,https://github.com/ledvinap,Use constant initializers in config reset,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1998,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/1998#issuecomment-204439422,"Not that bad, 248bytes saved:
 129160    1236   19176  149572   24844 ./obj/main/cleanflight_SPRACINGF3MINI.elf
 128912    1236   19176  149324   2474c ./obj/main/cleanflight_SPRACINGF3MINI.elf","@ledvinap , the numbers are believable to me. Unfortunately it looks like the travis checks have failed.
When you fix it, can you also change
    .pidController = 1,

to
    .pidController = PID_CONTROLLER_MWREWRITE,

for clarity.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1998,2016-04-01T15:04:30Z,2016-04-01T19:26:16Z,2016-04-01T19:29:51Z,MERGED,True,159,113,1,https://github.com/ledvinap,Use constant initializers in config reset,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1998,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/1998#issuecomment-204453291,"Not that bad, 248bytes saved:
 129160    1236   19176  149572   24844 ./obj/main/cleanflight_SPRACINGF3MINI.elf
 128912    1236   19176  149324   2474c ./obj/main/cleanflight_SPRACINGF3MINI.elf","Hmm ... seems that resetPidConfig gets inlined twice (it is used in cli)
memory saving for other structures is not that dramatic, sometimes it's worse ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1998,2016-04-01T15:04:30Z,2016-04-01T19:26:16Z,2016-04-01T19:29:51Z,MERGED,True,159,113,1,https://github.com/ledvinap,Use constant initializers in config reset,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1998,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/1998#issuecomment-204458434,"Not that bad, 248bytes saved:
 129160    1236   19176  149572   24844 ./obj/main/cleanflight_SPRACINGF3MINI.elf
 128912    1236   19176  149324   2474c ./obj/main/cleanflight_SPRACINGF3MINI.elf","Converted other initializers. Macro is used, to its easy to switch to old code (gcc generates per-member write code when direct assignment is used).
Only change is that unspecified fields are zeroed (which is desirable)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1998,2016-04-01T15:04:30Z,2016-04-01T19:26:16Z,2016-04-01T19:29:51Z,MERGED,True,159,113,1,https://github.com/ledvinap,Use constant initializers in config reset,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1998,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/1998#issuecomment-204460623,"Not that bad, 248bytes saved:
 129160    1236   19176  149572   24844 ./obj/main/cleanflight_SPRACINGF3MINI.elf
 128912    1236   19176  149324   2474c ./obj/main/cleanflight_SPRACINGF3MINI.elf","nice, can you rebase this once the build passes and I'll merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,1998,2016-04-01T15:04:30Z,2016-04-01T19:26:16Z,2016-04-01T19:29:51Z,MERGED,True,159,113,1,https://github.com/ledvinap,Use constant initializers in config reset,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/1998,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/1998#issuecomment-204528909,"Not that bad, 248bytes saved:
 129160    1236   19176  149572   24844 ./obj/main/cleanflight_SPRACINGF3MINI.elf
 128912    1236   19176  149324   2474c ./obj/main/cleanflight_SPRACINGF3MINI.elf",i'll merge this now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2001,2016-04-01T18:22:54Z,2016-04-01T18:47:05Z,2016-04-01T19:42:21Z,MERGED,True,56,68,5,https://github.com/martinbudden,Changes to reduce ROM footprint of parameter groups.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2001,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2001,Spare bits in the pgRegistry_t pgn and size fields have been used to store the old flags and version fields.,Spare bits in the pgRegistry_t pgn and size fields have been used to store the old flags and version fields.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2001,2016-04-01T18:22:54Z,2016-04-01T18:47:05Z,2016-04-01T19:42:21Z,MERGED,True,56,68,5,https://github.com/martinbudden,Changes to reduce ROM footprint of parameter groups.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2001,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2001#issuecomment-204509519,Spare bits in the pgRegistry_t pgn and size fields have been used to store the old flags and version fields.,"looks ok, gonna try it here.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2001,2016-04-01T18:22:54Z,2016-04-01T18:47:05Z,2016-04-01T19:42:21Z,MERGED,True,56,68,5,https://github.com/martinbudden,Changes to reduce ROM footprint of parameter groups.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2001,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2001#issuecomment-204514456,Spare bits in the pgRegistry_t pgn and size fields have been used to store the old flags and version fields.,"SPRacingF3Mini stats:

configuration-storage-martin

   text    data     bss     dec     hex filename
 128996    1236   19188  149420   247ac ./obj/main/cleanflight_SPRACINGF3MINI.elf

configuration-storage

   text    data     bss     dec     hex filename
 129176    1236   19188  149600   24860 ./obj/main/cleanflight_SPRACINGF3MINI.elf

master

   text    data     bss     dec     hex filename
 128536    1232   19292  149060   24644 ./obj/main/cleanflight_SPRACINGF3MINI.elf

looks good.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2001,2016-04-01T18:22:54Z,2016-04-01T18:47:05Z,2016-04-01T19:42:21Z,MERGED,True,56,68,5,https://github.com/martinbudden,Changes to reduce ROM footprint of parameter groups.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2001,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2001#issuecomment-204537608,Spare bits in the pgRegistry_t pgn and size fields have been used to store the old flags and version fields.,Nice work!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2001,2016-04-01T18:22:54Z,2016-04-01T18:47:05Z,2016-04-01T19:42:21Z,MERGED,True,56,68,5,https://github.com/martinbudden,Changes to reduce ROM footprint of parameter groups.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2001,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2001#issuecomment-204539409,Spare bits in the pgRegistry_t pgn and size fields have been used to store the old flags and version fields.,Thanks.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2002,2016-04-01T20:40:51Z,2016-04-02T19:11:27Z,2016-04-02T21:21:27Z,CLOSED,False,2,0,1,https://github.com/TempleClause,Documentation of CC3D PPM input is out of date,1,"['Invalid', 'Documentation']",https://github.com/cleanflight/cleanflight/pull/2002,https://github.com/TempleClause,1,https://github.com/cleanflight/cleanflight/pull/2002,"If my assumption is correct, I will update the docs
I found out about this via: https://www.reddit.com/r/Multicopter/comments/3gny25/cc3d_cleanflight_ppm_no_receiver_input/
and can confirm that it's channel 8 for me and not 3","If my assumption is correct, I will update the docs
I found out about this via: https://www.reddit.com/r/Multicopter/comments/3gny25/cc3d_cleanflight_ppm_no_receiver_input/
and can confirm that it's channel 8 for me and not 3",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2002,2016-04-01T20:40:51Z,2016-04-02T19:11:27Z,2016-04-02T21:21:27Z,CLOSED,False,2,0,1,https://github.com/TempleClause,Documentation of CC3D PPM input is out of date,1,"['Invalid', 'Documentation']",https://github.com/cleanflight/cleanflight/pull/2002,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2002#issuecomment-204784034,"If my assumption is correct, I will update the docs
I found out about this via: https://www.reddit.com/r/Multicopter/comments/3gny25/cc3d_cleanflight_ppm_no_receiver_input/
and can confirm that it's channel 8 for me and not 3","this PR is wrong in may ways:

title it doesn't say what it is about.
description doesn't say what it is about.
the changes to the documentation are not written in a documentation format - more of a comment format but without anyone's name.    you're left thinking who is 'me', who is this person and what are they on about.

i will close this as invalid.  however thanks for the feedback - I will correct the documentation.  it should have been changed by the PR that changed the code but the author forgot.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2002,2016-04-01T20:40:51Z,2016-04-02T19:11:27Z,2016-04-02T21:21:27Z,CLOSED,False,2,0,1,https://github.com/TempleClause,Documentation of CC3D PPM input is out of date,1,"['Invalid', 'Documentation']",https://github.com/cleanflight/cleanflight/pull/2002,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2002#issuecomment-204784230,"If my assumption is correct, I will update the docs
I found out about this via: https://www.reddit.com/r/Multicopter/comments/3gny25/cc3d_cleanflight_ppm_no_receiver_input/
and can confirm that it's channel 8 for me and not 3","actually, this is not even correct.  you must be using some other firmware.
#1790 is not merged yet.  documentation is correct.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2002,2016-04-01T20:40:51Z,2016-04-02T19:11:27Z,2016-04-02T21:21:27Z,CLOSED,False,2,0,1,https://github.com/TempleClause,Documentation of CC3D PPM input is out of date,1,"['Invalid', 'Documentation']",https://github.com/cleanflight/cleanflight/pull/2002,https://github.com/TempleClause,4,https://github.com/cleanflight/cleanflight/pull/2002#issuecomment-204806530,"If my assumption is correct, I will update the docs
I found out about this via: https://www.reddit.com/r/Multicopter/comments/3gny25/cc3d_cleanflight_ppm_no_receiver_input/
and can confirm that it's channel 8 for me and not 3","I'm very sorry that I did this so wrong. I will know better for next time!
Yes indeed I was using betaflight, but I highly assumed that this is hardware dependant and not firmware dependant. I guess I assumed wrong! Sorry for the inconvenience caused!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2003,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204782203,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",can you give us a run-down on the wiring?  does this only do one ESC at a time?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/4712,3,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204809143,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","@hydra: Is it that, what you mean with  run-down on the wiring?
https://github.com/4712/BLHeliSuite/blob/master/Manuals/BLHeliSuite%204w-if%20protocol.pdf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/digitalentity,4,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204827548,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",@4712 will this also work over vcp?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/4712,5,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204914021,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",Yes.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/arnoz26,6,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204934320,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",Work perfect with a naze32 rev5 and ESC ZTW Mantis 12A...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/digitalentity,7,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204949128,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","@4712 tested on a customised Cleanflight branch and F3-based custom FC - works perfectly! Thanks!
EDIT: Tested with both BLHeli and SimonK bootloaders.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204961519,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","@4712 no, that wasn't what i meant.  not had time to read the PR.  did you add documentation in the PR?
as i understand it the arduino 4way interface allows connecting to a variety of different ESCs, but only one ESC at a time?  does this PR mirror that or does it allow users to a) configure multiple ESCs via the 1-wire protocols (BL & SK) using standard motor outputs as well as b) allowing users to configure one ESC at a time using motor outputs connected to multiple pads on one ESC?
forgive me if i've missed something here but some clarification would be good.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/digitalentity,9,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204963061,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","@hydra it's effectively 1-wire passthrough with ability to configure several ESCs at once without disconnecting/disassembling anything on your quad.
BL bootloader / SK bootloader - you don't care now. Some docs will also be helpful though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/4712,10,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-204970524,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","Am 03.04.2016 um 14:37 schrieb Dominic Clifton:

@4712 https://github.com/4712 no, that wasn't what i meant. not had
time to read the PR. did you add documentation in the PR?
as i understand it the arduino 4way interface allows connecting to a
variety of different ESCs, but only one ESC at a time?
@hydra the 4way-if with Arduino interfaces can be setup as singleESC or
multipleESC interfaces.
(Small stand alone boxes (like Turnigy dlux Programming Box) with 8k
flash can not provide multipleESC capabilities.)
I guess most Arduino board users use the Multiple firmware since long time.

The term ""4-way"" does not mean 4-wire. It means 4 protocols:
Connect to multiple ESC (up to 8) using:

SiLabs C2 interface
SiLabs BLHeli bootloader
Atmel BLHeli bootloader
Atmel SimonK bootloader

Because the SiLabs C2 does need 3 wires (and doesn't not use the servo
wire), it is skipped for the CF/ BF implementation.
So, it is more a 3way-interface here, but the 4-way-if protocol allows,
that not always all 4 protocols are for every interface available.
For instance: Cleanflight can be compiled with ""#define
USE_SERIAL_4WAY_BLHELI_BOOTLOADER"" commented out. It then supports only
the SimonK bootloader.

does this PR mirror that or does it allow users to a) configure
multiple ESCs via the 1-wire protocols (BL & SK) using standard motor
outputs as well as b) allowing users to configure one ESC at a time
using motor outputs connected to multiple pads on one ESC?
a.)
forgive me if i've missed something here but some clarification would
be good.
forgive me the lack of documentation.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#2003 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/Arakon,11,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-205021077,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",Successfully tested on a CC3D and custom CC3DF3 through VCP on BLHeli Atmel and BLHeli Silabs ESCs.. flashed and configured with zero issues.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-205055597,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","@4712 yeah, i was aware 4w meant 4 protocols.  I just didn't know 4w firmware existed to do 4 ESCs at the same time. 😄
thanks for the info, it's much clearer - now i don't have to go rooting around in the source trying to find which pins to connect for a C2 interface 😄   haha.
Can you add another commit to this PR to add some very basic documentation - point users at the BlHeli site docs as required.
Can you also update the code as per @ledvinap 's comments if you agree with them.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-205815972,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",@4712 thanks for the updates.  still need that basic documentation though.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/4712,14,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-205830850,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",German language or English language? ;-),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/StefanFeederle,15,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-205956275,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",why not both? If you do it in english i'll translate it to german.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/4712,16,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-205959066,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","War jetzt mehr scherzhaft gemeint...ich brauch halt auch deshalb länger, weil in Englisch ;)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-205998417,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","@StefanFeederle we don't have any non-english manuals or any way to keep them up-to-date when code changes are made so having manuals in different languages is probably a bad idea right now.
i would like to fix this situation in the future so ideas welcome, but not as part of this PR.  Open a separate issue to discuss if you have ideas.
@4712 english please. 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-206041133,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","ok, i'm gonna merge this.  @4712 please keep an eye on the issue tracker for bug reports/etc and help where you can.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,19,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-206047921,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","issues:

lots of code duplication going on in this PR
include files including other files (a no-no in cleanflight right now).
inconsitent casing - preferCamelCase for new code not_underscores.
inconsitent spacing x = y not x=y, etc",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-206048793,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).",e.g. i count a total of THREE definitions of 'escHardware_t'.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-206048862,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","my WTF count is rising rapidly.
http://commadot.com/wtf-per-minute/
http://i2.wp.com/commadot.com/wp-content/uploads/2009/02/wtf.png?w=550",True,{'HOORAY': ['https://github.com/dkisselev']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2003,2016-04-02T15:24:55Z,2016-04-06T01:31:02Z,2016-04-06T01:31:02Z,CLOSED,False,2264,48,32,https://github.com/4712,4way interface,2,"['Enhancement', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2003,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2003#issuecomment-206065981,"Should be tested using compiled hex files from here . It only works with BLHelisSuiteBeta14.4.0.5 or later.
Automatically detects SimonK and BLHeli bootloader.
Superseds the 1-wire-pass-through solutions (consumes around 3.5kb more flash).","Continued in PR #2012 - a new branch has been created - please target cleanup and PR fixes to this new branch.
https://github.com/cleanflight/cleanflight/commits/blheli4wayif",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2004,2016-04-02T19:03:39Z,2016-04-03T09:52:57Z,2016-04-03T16:01:23Z,MERGED,True,1307,1295,58,https://github.com/ledvinap,Convert extern to PG_DECLARE,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2004,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2004,"Some declarations were not converte to new format.
Also fixed few minor problems","Some declarations were not converte to new format.
Also fixed few minor problems",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2005,2016-04-03T11:02:08Z,2016-04-03T15:49:58Z,2016-04-03T16:01:09Z,MERGED,True,7,4,2,https://github.com/ledvinap,Configuration storage,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2005,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2005,Improved memory - rxConfig_t contains failsafe_channel_configurations and channelRanges thet were allocated in RESET_CONFIG,Improved memory - rxConfig_t contains failsafe_channel_configurations and channelRanges thet were allocated in RESET_CONFIG,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2007,2016-04-03T16:45:56Z,2016-04-03T20:24:44Z,2016-04-03T20:52:41Z,MERGED,True,182,169,3,https://github.com/martinbudden,Changed so the PID controllers are not dependent on parameter groups.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2007,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2007,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2007,2016-04-03T16:45:56Z,2016-04-03T20:24:44Z,2016-04-03T20:52:41Z,MERGED,True,182,169,3,https://github.com/martinbudden,Changed so the PID controllers are not dependent on parameter groups.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2007,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2007#issuecomment-205009619,,this would need rebasing on my current codebase.  can't merge yet.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2008,2016-04-03T18:42:31Z,2016-04-03T19:07:51Z,2016-04-03T19:38:12Z,MERGED,True,13,13,2,https://github.com/martinbudden,Changed 'resetCallbackFunc' to 'resetFunc'.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2008,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2008,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2008,2016-04-03T18:42:31Z,2016-04-03T19:07:51Z,2016-04-03T19:38:12Z,MERGED,True,13,13,2,https://github.com/martinbudden,Changed 'resetCallbackFunc' to 'resetFunc'.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2008,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2008#issuecomment-205036000,,thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2009,2016-04-04T07:25:35Z,2016-04-04T12:26:44Z,2016-04-04T13:33:00Z,MERGED,True,684,477,8,https://github.com/martinbudden,Moved each PID controller into its own source file,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2009,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2009,"Moved each PID controller into its own source file, for better clarity and as a precursor to further unit tests.","Moved each PID controller into its own source file, for better clarity and as a precursor to further unit tests.",True,{'THUMBS_UP': ['https://github.com/JakeSc']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2009,2016-04-04T07:25:35Z,2016-04-04T12:26:44Z,2016-04-04T13:33:00Z,MERGED,True,684,477,8,https://github.com/martinbudden,Moved each PID controller into its own source file,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2009,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2009#issuecomment-205273953,"Moved each PID controller into its own source file, for better clarity and as a precursor to further unit tests.","i wasn't planning on doing this, but i don't think there's many outstanding PR's to the PID's and if there are they they all need rebasing/updating anyway so why not...  Others I know have wanted to do this for a while too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2011,2016-04-04T14:25:10Z,2016-04-11T20:16:12Z,2016-04-11T20:16:12Z,MERGED,True,416,380,38,https://github.com/ledvinap,Configuration storage,6,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2011,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2011,"Reset by template implemented ; fixed some minor problems
Space saving is considerable:
129080     1240   19188  149508   24804 ./obj/main/cleanflight_SPRACINGF3MINI.elf
128580     1240   19188  149008   24610 ./obj/main/cleanflight_SPRACINGF3MINI.elf","Reset by template implemented ; fixed some minor problems
Space saving is considerable:
129080     1240   19188  149508   24804 ./obj/main/cleanflight_SPRACINGF3MINI.elf
128580     1240   19188  149008   24610 ./obj/main/cleanflight_SPRACINGF3MINI.elf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2011,2016-04-04T14:25:10Z,2016-04-11T20:16:12Z,2016-04-11T20:16:12Z,MERGED,True,416,380,38,https://github.com/ledvinap,Configuration storage,6,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2011,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2011#issuecomment-205323177,"Reset by template implemented ; fixed some minor problems
Space saving is considerable:
129080     1240   19188  149508   24804 ./obj/main/cleanflight_SPRACINGF3MINI.elf
128580     1240   19188  149008   24610 ./obj/main/cleanflight_SPRACINGF3MINI.elf","This is beast I can get without doing too much preprocesor magic. Some -pedantic rules are a bit a annoying (you can't cast function pointer to data pointer).
Special section is used to test if pointer is function or initialization template. This should be quite portable (PG_REGISTER is dependent on sections anyway) and new init class can be easily implemented with small overhead.
_ARR initialization is not implemented yet (it is unused in current code). What should it do?

Init all array members with same template. Item size will be necessary for this, but it may be added to template.
Copy template over config
Implement both variants
don't implement it, use function for reset",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2011,2016-04-04T14:25:10Z,2016-04-11T20:16:12Z,2016-04-11T20:16:12Z,MERGED,True,416,380,38,https://github.com/ledvinap,Configuration storage,6,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2011,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2011#issuecomment-207094417,"Reset by template implemented ; fixed some minor problems
Space saving is considerable:
129080     1240   19188  149508   24804 ./obj/main/cleanflight_SPRACINGF3MINI.elf
128580     1240   19188  149008   24610 ./obj/main/cleanflight_SPRACINGF3MINI.elf","looks really good.  Zero WTF's 😄
With regards to your question.  One approach is YAGNI.  if we dont need it don't implement it.   When we do we can implement it.  I think we've got bigger fish to fry right now than worrying about something we don't use, right?
Is this ready for merge as is?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2011,2016-04-04T14:25:10Z,2016-04-11T20:16:12Z,2016-04-11T20:16:12Z,MERGED,True,416,380,38,https://github.com/ledvinap,Configuration storage,6,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2011,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2011#issuecomment-207122658,"Reset by template implemented ; fixed some minor problems
Space saving is considerable:
129080     1240   19188  149508   24804 ./obj/main/cleanflight_SPRACINGF3MINI.elf
128580     1240   19188  149008   24610 ./obj/main/cleanflight_SPRACINGF3MINI.elf","@hydra: unittests are fine, but I did not test it on hardware. The changes are pretty safe.
cygwin and OSX unittest should be checked, but all mechanisms are identical to storage.
Lets merge it into configuration-storage now and merge with master after quick testing.
as for _ARR - I'll add note to ask for implementation when needed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2011,2016-04-04T14:25:10Z,2016-04-11T20:16:12Z,2016-04-11T20:16:12Z,MERGED,True,416,380,38,https://github.com/ledvinap,Configuration storage,6,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2011,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2011#issuecomment-207123212,"Reset by template implemented ; fixed some minor problems
Space saving is considerable:
129080     1240   19188  149508   24804 ./obj/main/cleanflight_SPRACINGF3MINI.elf
128580     1240   19188  149008   24610 ./obj/main/cleanflight_SPRACINGF3MINI.elf",I'll fast-forward configuration-storage and rebase this PR before merging.  Tomorrow ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2011,2016-04-04T14:25:10Z,2016-04-11T20:16:12Z,2016-04-11T20:16:12Z,MERGED,True,416,380,38,https://github.com/ledvinap,Configuration storage,6,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2011,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2011#issuecomment-208387863,"Reset by template implemented ; fixed some minor problems
Space saving is considerable:
129080     1240   19188  149508   24804 ./obj/main/cleanflight_SPRACINGF3MINI.elf
128580     1240   19188  149008   24610 ./obj/main/cleanflight_SPRACINGF3MINI.elf","I fast-forwarded configuration-storage to master and cleaned-up the PR a bit.
It is ready for merge into configuration-storage branch and after quick testing (Cygwin  and OSX unittests, few targets) into master.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2012,2016-04-06T01:27:42Z,2016-04-20T19:09:41Z,2016-10-12T20:22:30Z,MERGED,True,1810,373,30,https://github.com/hydra,4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.,11,['Critical'],https://github.com/cleanflight/cleanflight/pull/2012,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2012,"This PR supersedes #2003.
This PR exists so that other cleanflight developers can contribute to cleaning this code up so it can be merged into master.
I tested very breifly using an SPRacingF3Mini using BLHeliSuite 14.4.0.5 from here:
https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite
I was able to read esc setup, change parameters, flash and verify firmware and control motor outputs via VCP USB.
TODO:

cleanup large amounts of code and logic duplication.
include files including other files (a no-no in cleanflight right now).
fix code style preferCamelCase for new code not_underscores, x = y not x=y, etc
delete unneeded code.
move some of the code from serial_msp, if possible.

QUESTIONS:
a) do we need the old 1WIRE code if we now have the 4way interface code?
POSSIBLE ANSWERS:
a.1) no, delete it.  then there will be less to cleanup.","This PR supersedes #2003.
This PR exists so that other cleanflight developers can contribute to cleaning this code up so it can be merged into master.
I tested very breifly using an SPRacingF3Mini using BLHeliSuite 14.4.0.5 from here:
https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite
I was able to read esc setup, change parameters, flash and verify firmware and control motor outputs via VCP USB.
TODO:

cleanup large amounts of code and logic duplication.
include files including other files (a no-no in cleanflight right now).
fix code style preferCamelCase for new code not_underscores, x = y not x=y, etc
delete unneeded code.
move some of the code from serial_msp, if possible.

QUESTIONS:
a) do we need the old 1WIRE code if we now have the 4way interface code?
POSSIBLE ANSWERS:
a.1) no, delete it.  then there will be less to cleanup.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2012,2016-04-06T01:27:42Z,2016-04-20T19:09:41Z,2016-10-12T20:22:30Z,MERGED,True,1810,373,30,https://github.com/hydra,4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.,11,['Critical'],https://github.com/cleanflight/cleanflight/pull/2012,https://github.com/4712,2,https://github.com/cleanflight/cleanflight/pull/2012#issuecomment-206287649,"This PR supersedes #2003.
This PR exists so that other cleanflight developers can contribute to cleaning this code up so it can be merged into master.
I tested very breifly using an SPRacingF3Mini using BLHeliSuite 14.4.0.5 from here:
https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite
I was able to read esc setup, change parameters, flash and verify firmware and control motor outputs via VCP USB.
TODO:

cleanup large amounts of code and logic duplication.
include files including other files (a no-no in cleanflight right now).
fix code style preferCamelCase for new code not_underscores, x = y not x=y, etc
delete unneeded code.
move some of the code from serial_msp, if possible.

QUESTIONS:
a) do we need the old 1WIRE code if we now have the 4way interface code?
POSSIBLE ANSWERS:
a.1) no, delete it.  then there will be less to cleanup.","OK, I will remove the 1wire-uart and 1wire-vcp.
atm there are 2 options for the 4way-if
#define USE_SERIAL_4WAY_BLHELI_BOOTLOADER
#define USE_SERIAL_4WAY_SK_BOOTLOADER
Remove this? Always compile for BLHeli *and * SimonK bootloader?
This would simplify all further...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2012,2016-04-06T01:27:42Z,2016-04-20T19:09:41Z,2016-10-12T20:22:30Z,MERGED,True,1810,373,30,https://github.com/hydra,4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.,11,['Critical'],https://github.com/cleanflight/cleanflight/pull/2012,https://github.com/4712,3,https://github.com/cleanflight/cleanflight/pull/2012#issuecomment-206347013,"This PR supersedes #2003.
This PR exists so that other cleanflight developers can contribute to cleaning this code up so it can be merged into master.
I tested very breifly using an SPRacingF3Mini using BLHeliSuite 14.4.0.5 from here:
https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite
I was able to read esc setup, change parameters, flash and verify firmware and control motor outputs via VCP USB.
TODO:

cleanup large amounts of code and logic duplication.
include files including other files (a no-no in cleanflight right now).
fix code style preferCamelCase for new code not_underscores, x = y not x=y, etc
delete unneeded code.
move some of the code from serial_msp, if possible.

QUESTIONS:
a) do we need the old 1WIRE code if we now have the 4way interface code?
POSSIBLE ANSWERS:
a.1) no, delete it.  then there will be less to cleanup.",Compiles atm to:,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2012,2016-04-06T01:27:42Z,2016-04-20T19:09:41Z,2016-10-12T20:22:30Z,MERGED,True,1810,373,30,https://github.com/hydra,4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.,11,['Critical'],https://github.com/cleanflight/cleanflight/pull/2012,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2012#issuecomment-210852587,"This PR supersedes #2003.
This PR exists so that other cleanflight developers can contribute to cleaning this code up so it can be merged into master.
I tested very breifly using an SPRacingF3Mini using BLHeliSuite 14.4.0.5 from here:
https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite
I was able to read esc setup, change parameters, flash and verify firmware and control motor outputs via VCP USB.
TODO:

cleanup large amounts of code and logic duplication.
include files including other files (a no-no in cleanflight right now).
fix code style preferCamelCase for new code not_underscores, x = y not x=y, etc
delete unneeded code.
move some of the code from serial_msp, if possible.

QUESTIONS:
a) do we need the old 1WIRE code if we now have the 4way interface code?
POSSIBLE ANSWERS:
a.1) no, delete it.  then there will be less to cleanup.",Making the default build support BL and SK bootloaders would make the most sense - otherwise users would be like: but it's a BL heli ESC and it doesn't connect.  Cutting down on the user support so we can spend more time coding = win.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2012,2016-04-06T01:27:42Z,2016-04-20T19:09:41Z,2016-10-12T20:22:30Z,MERGED,True,1810,373,30,https://github.com/hydra,4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.,11,['Critical'],https://github.com/cleanflight/cleanflight/pull/2012,https://github.com/digitalentity,5,https://github.com/cleanflight/cleanflight/pull/2012#issuecomment-211012032,"This PR supersedes #2003.
This PR exists so that other cleanflight developers can contribute to cleaning this code up so it can be merged into master.
I tested very breifly using an SPRacingF3Mini using BLHeliSuite 14.4.0.5 from here:
https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite
I was able to read esc setup, change parameters, flash and verify firmware and control motor outputs via VCP USB.
TODO:

cleanup large amounts of code and logic duplication.
include files including other files (a no-no in cleanflight right now).
fix code style preferCamelCase for new code not_underscores, x = y not x=y, etc
delete unneeded code.
move some of the code from serial_msp, if possible.

QUESTIONS:
a) do we need the old 1WIRE code if we now have the 4way interface code?
POSSIBLE ANSWERS:
a.1) no, delete it.  then there will be less to cleanup.","Tested, working flawlessly!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2012,2016-04-06T01:27:42Z,2016-04-20T19:09:41Z,2016-10-12T20:22:30Z,MERGED,True,1810,373,30,https://github.com/hydra,4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.,11,['Critical'],https://github.com/cleanflight/cleanflight/pull/2012,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2012#issuecomment-211121323,"This PR supersedes #2003.
This PR exists so that other cleanflight developers can contribute to cleaning this code up so it can be merged into master.
I tested very breifly using an SPRacingF3Mini using BLHeliSuite 14.4.0.5 from here:
https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite
I was able to read esc setup, change parameters, flash and verify firmware and control motor outputs via VCP USB.
TODO:

cleanup large amounts of code and logic duplication.
include files including other files (a no-no in cleanflight right now).
fix code style preferCamelCase for new code not_underscores, x = y not x=y, etc
delete unneeded code.
move some of the code from serial_msp, if possible.

QUESTIONS:
a) do we need the old 1WIRE code if we now have the 4way interface code?
POSSIBLE ANSWERS:
a.1) no, delete it.  then there will be less to cleanup.","yeah, i gave this a whirl myself after merging master with it, working fine on the 12 esc's i tested it on (both SK & BLHeli bootloaders)  did a variety of tasks including reflashing and had no issues.
will continue review and merge ASAP.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2012,2016-04-06T01:27:42Z,2016-04-20T19:09:41Z,2016-10-12T20:22:30Z,MERGED,True,1810,373,30,https://github.com/hydra,4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.,11,['Critical'],https://github.com/cleanflight/cleanflight/pull/2012,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2012#issuecomment-212561730,"This PR supersedes #2003.
This PR exists so that other cleanflight developers can contribute to cleaning this code up so it can be merged into master.
I tested very breifly using an SPRacingF3Mini using BLHeliSuite 14.4.0.5 from here:
https://www.mediafire.com/folder/dx6kfaasyo24l/BLHeliSuite
I was able to read esc setup, change parameters, flash and verify firmware and control motor outputs via VCP USB.
TODO:

cleanup large amounts of code and logic duplication.
include files including other files (a no-no in cleanflight right now).
fix code style preferCamelCase for new code not_underscores, x = y not x=y, etc
delete unneeded code.
move some of the code from serial_msp, if possible.

QUESTIONS:
a) do we need the old 1WIRE code if we now have the 4way interface code?
POSSIBLE ANSWERS:
a.1) no, delete it.  then there will be less to cleanup.","ok, aside from some code style issues I'm happy enough for now with this.
Since it's not core flight code and is very isolated we can merge as-is now.  I welcome cleanup PR's on this code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2013,2016-04-06T08:55:59Z,2016-04-16T16:24:07Z,2016-08-29T17:13:59Z,CLOSED,False,6,0,1,https://github.com/martinbudden,Reserved two MSP commands for future expansion.,1,[],https://github.com/cleanflight/cleanflight/pull/2013,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2013,"Added MSP_EXTENSION_ONE_BYTE and MSP_EXTENSION_TWO_BYTES reserved values so that it will be possible to implement multi-byte MSP commands in future.
Addresses issue #1651.","Added MSP_EXTENSION_ONE_BYTE and MSP_EXTENSION_TWO_BYTES reserved values so that it will be possible to implement multi-byte MSP commands in future.
Addresses issue #1651.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2013,2016-04-06T08:55:59Z,2016-04-16T16:24:07Z,2016-08-29T17:13:59Z,CLOSED,False,6,0,1,https://github.com/martinbudden,Reserved two MSP commands for future expansion.,1,[],https://github.com/cleanflight/cleanflight/pull/2013,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2013#issuecomment-210849439,"Added MSP_EXTENSION_ONE_BYTE and MSP_EXTENSION_TWO_BYTES reserved values so that it will be possible to implement multi-byte MSP commands in future.
Addresses issue #1651.","closing, see #1651 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2014,2016-04-06T12:06:00Z,2017-02-25T16:55:37Z,2017-02-26T02:04:19Z,CLOSED,False,1853,148,23,https://github.com/hydra,Configuration menus,18,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2014,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2014,"The goal of this PR is menu system that works on an OSD (via MSP) and via a directly attached OLED screen both using sticks to navigate the menu system.
What we are looking for here is the first cut of a system that works, that can be extended upon in future. we do not need everything immediately - i.e. no 'kitchen sink' approach.
Later, support for telemetry systems that support HoTT, OpenTX and can be added.  PR's already exist with some code which we can bring into this as required.
The menu system must be intuitive and must work for Mode 1 and Mode 2 users.
This PR continues where PR #1654 left off.  It is in need of quite a bit of work and is not yet fit for merging to master.  It also has somewhat questionable implementation approach - it's heavyweight.  and I personally found it un-intuitive and frustrating.  See my experience here:  #1654 (comment)
The code here was only brielfly tested on an SPRacingF3Mini.  Not all menus were entered, not all settings were changed.
How to proceed:
a) Delete any broken or hard-to-implement code for now - we can add it back later.
b) Extract variables and methods from the serial_cli.c/h so they are reusable by both the cli and the menu system.
c) Make the navigation intuitive and obvious.
d) It needs to have as little logic as possible for the values that are configurable - similar to how cliGet/cliSet work currently.
e) Possibly extend cliGet/cliSet to use arrays and then using the same logic here will likely cut down on cli commands and menu code for things like configuring servos, failsafe settings, etc in future.
I also want tests for the menu system too.  It will be much easier to develop this way.  The menu system is text only so writing assertions should be easy enough.
high level tests:

send msp command 'get menu' returns a text menu with things in the right place.
send msp command 'button X pressed' followed by another 'get menu' did the right thing.

low level tests:

buildMenu() builds writes an appropriate menu via a buffer that can be checked.
tests for stick and/or button navigation that mock out the system time would also be good.","The goal of this PR is menu system that works on an OSD (via MSP) and via a directly attached OLED screen both using sticks to navigate the menu system.
What we are looking for here is the first cut of a system that works, that can be extended upon in future. we do not need everything immediately - i.e. no 'kitchen sink' approach.
Later, support for telemetry systems that support HoTT, OpenTX and can be added.  PR's already exist with some code which we can bring into this as required.
The menu system must be intuitive and must work for Mode 1 and Mode 2 users.
This PR continues where PR #1654 left off.  It is in need of quite a bit of work and is not yet fit for merging to master.  It also has somewhat questionable implementation approach - it's heavyweight.  and I personally found it un-intuitive and frustrating.  See my experience here:  #1654 (comment)
The code here was only brielfly tested on an SPRacingF3Mini.  Not all menus were entered, not all settings were changed.
How to proceed:
a) Delete any broken or hard-to-implement code for now - we can add it back later.
b) Extract variables and methods from the serial_cli.c/h so they are reusable by both the cli and the menu system.
c) Make the navigation intuitive and obvious.
d) It needs to have as little logic as possible for the values that are configurable - similar to how cliGet/cliSet work currently.
e) Possibly extend cliGet/cliSet to use arrays and then using the same logic here will likely cut down on cli commands and menu code for things like configuring servos, failsafe settings, etc in future.
I also want tests for the menu system too.  It will be much easier to develop this way.  The menu system is text only so writing assertions should be easy enough.
high level tests:

send msp command 'get menu' returns a text menu with things in the right place.
send msp command 'button X pressed' followed by another 'get menu' did the right thing.

low level tests:

buildMenu() builds writes an appropriate menu via a buffer that can be checked.
tests for stick and/or button navigation that mock out the system time would also be good.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2015,2016-04-06T14:02:05Z,2016-04-06T14:02:16Z,2016-04-08T06:59:46Z,CLOSED,False,13718,4919,152,https://github.com/digitalentity,Smoother takeoff in AltHold mode,234,[],https://github.com/cleanflight/cleanflight/pull/2015,https://github.com/digitalentity,1,https://github.com/cleanflight/cleanflight/pull/2015,Air cushion effect during takeoff makes baro unreliable. This PR compensates for this.,Air cushion effect during takeoff makes baro unreliable. This PR compensates for this.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2015,2016-04-06T14:02:05Z,2016-04-06T14:02:16Z,2016-04-08T06:59:46Z,CLOSED,False,13718,4919,152,https://github.com/digitalentity,Smoother takeoff in AltHold mode,234,[],https://github.com/cleanflight/cleanflight/pull/2015,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/2015#issuecomment-206385936,Air cushion effect during takeoff makes baro unreliable. This PR compensates for this.,"Damn, wrong repo. Sorry.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2016,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,2,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-206723540,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","I definately do like this idea.
I will have to go through it better when I am on my PC, but I assume the rates are still the same or did you scale those too to be the same?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-206739940,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle , I've changed the rate calculation as well. The main reason I did this was so that the test code could directly compare the P, I, and T terms calculated by pidLuxFloat and pidMultiWiiRewrite. Now it's proven to work I can change them back again (and alter the test code accordingly), if that is the consensus.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207088511,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",set to 1.13.0 since 1.13.0 already has loads of cleanup work done. it makes sense.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207088770,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",@borisbstyle thoughts regarding @martinbudden 's comments regarding rates?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,6,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207359113,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@hydra @martinbudden
I personally would like same rates and Pids for those pid controllers. That helps with determing defaults!
It's basically a choice. Having equal rates will require user to reconfigure their rates. If we provide enough info how to convert their old rates it should be fine.
btw I would also consider increasing the scaling for rewrite yaw rate to be closer to roll and pitch like current luxfloat",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207361182,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","It would be nice to separate conversion from PidProfile for PID parameters.
Define structure with parameters  applicable to given PID (using floating point vars for Lux) and function that will fill this structure with data from pidProfile (and possibly from other sources).

all scaling factors will be localized in this function (luxPTermScale etc)
it will be easier to test
fine-tuning / experimenting will be easier
it will document what variables are used in PID",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,8,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207400384,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",Also that averaging can go into function as well,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,9,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207498262,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle , @hydra , @ledvinap , for reference here are the original Cleanflight rates, my changes, and for comparison, the betaflight rates.
I agree with Boris, in that it's probably best if LUX_FLOAT and MWREWRITE have the save rates.
Any views on what the actual values should be?
Current LUX_FLOAT (changed to be same as MWREWRITE)
YAW
angleRate = (float)((rate + 27) * rcCommand[YAW]) / 32.0f;
ROLL, PITCH
angleRate = (float)((rate + 27) * rcCommand[axis]) / 16.0f;

Current MWREWRITE (unchanged)
YAW
angleRate = (((int32_t)(rate + 27) * rcCommand[YAW]) >> 5);
ROLL, PITCH
angleRate = ((int32_t)(rate + 27) * rcCommand[axis]) >> 4;

Previous LUX_FLOAT
YAW
AngleRate = (float)((rate + 10) * rcCommand[YAW]) / 50.0f;
ROLL, PITCH
AngleRate = (float)((rate + 20) * rcCommand[axis]) / 50.0f;

Previous MWREWRITE
YAW
AngleRateTmp = (((int32_t)(rate + 27) * rcCommand[YAW]) >> 5);
ROLL, PITCH
AngleRateTmp = ((int32_t)(rate + 27) * rcCommand[axis]) >> 4;

BetaFlight LUX_FLOAT
YAW
AngleRate = (float)((rate + 47) * rcCommand[YAW]) / 32.0f;
ROLL, PITCH
AngleRate = (float)((rate + 27) * rcCommand[axis]) / 16.0f;

BetaFlight MWREWRITE
YAW
AngleRateTmp = ((int32_t)(rate + 47) * rcCommand[YAW]) >> 5;
ROLL, PITCH
AngleRateTmp = ((int32_t)(rate + 27) * rcCommand[axis]) >> 4;",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207499263,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@ledvinap , wrt your suggestion about having a separate conversion function and new structure, I'm not really in favour of this, since the conversion is fairly straightforward. And the new structure will pretty much be the same as the pid profile.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,11,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207500335,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","Let me have some thoughts about it
I think we could actually even introduce degrees/second numbers for rates.
That also requires some MSP/configurator changes, but is the way to go IMO.
Maybe not in this particular PR, but it is really easy to do it that way
and get rid of this rate scaling.
So rcRate parameter should be removed and only roll, pitch, yaw rate should
be used.
Also mw23 pid controller could be removed too and we can asd Mwi Super Expo
feature into rewrite and luxfloat. I already did this in betaflight with
success.
Op 8 apr. 2016 18:16 schreef ""Martin Budden"" notifications@github.com:

@borisbstyle https://github.com/borisbstyle , @hydra
https://github.com/hydra , @ledvinap https://github.com/ledvinap ,
for reference here are the original Cleanflight rates, my changes, and for
comparison, the betaflight rates.
I agree with Boris, in that it's probably best if LUX_FLOAT and MWREWRITE
have the save rates.
Any views on what the actual values should be?
Current LUX_FLOAT (changed to be same as MWREWRITE)
YAW
angleRate = (float)((rate + 27) * rcCommand[YAW]) / 32.0f;
ROLL, PITCH
angleRate = (float)((rate + 27) * rcCommand[axis]) / 16.0f;
Current MWREWRITE (unchanged)
YAW
angleRate = (((int32_t)(rate + 27) * rcCommand[YAW]) >> 5);
ROLL, PITCH
angleRate = ((int32_t)(rate + 27) * rcCommand[axis]) >> 4;
Previous LUX_FLOAT
YAW
AngleRate = (float)((rate + 10) * rcCommand[YAW]) / 50.0f;
ROLL, PITCH
AngleRate = (float)((rate + 20) * rcCommand[axis]) / 50.0f;
Previous MWREWRITE
YAW
AngleRateTmp = (((int32_t)(rate + 27) * rcCommand[YAW]) >> 5);
ROLL, PITCH
AngleRateTmp = ((int32_t)(rate + 27) * rcCommand[axis]) >> 4;
BetaFlight LUX_FLOAT
YAW
AngleRate = (float)((rate + 47) * rcCommand[YAW]) / 32.0f;
ROLL, PITCH
AngleRate = (float)((rate + 27) * rcCommand[axis]) / 16.0f;
BetaFlight MWREWRITE
YAW
AngleRateTmp = ((int32_t)(rate + 47) * rcCommand[YAW]) >> 5;
ROLL, PITCH
AngleRateTmp = ((int32_t)(rate + 27) * rcCommand[axis]) >> 4;
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#2016 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,12,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207502155,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle I debated with myself about the line:
gyroRate = luxGyroScale * gyroADC[axis] * gyro.scale

The gyro.scale item here is set by the device driver and varies between gyrometers. pidLuxFloat is scaled to the gyro attached to the flight controller, pidMultiWiiRewrite is not, so how to square that circle?  My solution scales to the 3050, 6000, 6050 and 6500 gyros. It's not ideal, but it is a reasonable compromise.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207503311,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle , yes, it would be good to introduce degrees/second values for rates. But this PR is getting complicated enough, so let's save that for a new PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,14,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207504126,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle , I think there is a bug in your filterApplyAverage function in betaflight. You don't set averageSum to zero before you start summing.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,15,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207506151,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","ok lets do that in seperate PR than.
I agree about keeping the scaling as it is. No function needed.
The scaling from all gyros is same. Its all 16.4f. That extra calculation
is not really needed.
Maybe we should convert rewrite also to deg/sec with integer pre scaler? It
makes it more readable I guess? Maybe in the next PR
Op 8 apr. 2016 18:29 schreef ""Martin Budden"" notifications@github.com:

@borisbstyle https://github.com/borisbstyle , yes, it would be good to
introduce degrees/second values for rates. But this PR is getting
complicated enough, so let's save that for a new PR.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#2016 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,16,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207507916,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","yes you are righ....averagesum should indeed be set to 0.
i do use seperate filtering as well additionally
Op 8 apr. 2016 18:36 schreef ""Boris B."" dreambb1982@gmail.com:

ok lets do that in seperate PR than.
I agree about keeping the scaling as it is. No function needed.
The scaling from all gyros is same. Its all 16.4f. That extra calculation
is not really needed.
Maybe we should convert rewrite also to deg/sec with integer pre scaler?
It makes it more readable I guess? Maybe in the next PR
Op 8 apr. 2016 18:29 schreef ""Martin Budden"" notifications@github.com:

@borisbstyle https://github.com/borisbstyle , yes, it would be good to
introduce degrees/second values for rates. But this PR is getting
complicated enough, so let's save that for a new PR.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#2016 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,17,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207508823,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle , the scaling for the L3G4200 gyro is different. I don't know how widely it is used though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,18,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207515199,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","no targets out there what use it from what I know
Op 8 apr. 2016 18:46 schreef ""Martin Budden"" notifications@github.com:

@borisbstyle https://github.com/borisbstyle , the scaling for the
L3G4200 gyro is different. I don't know how widely it is used though.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#2016 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,19,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-207979344,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@hydra , ready for merge:

All comments considered, although not all acted upon
Flight tested
Test code passes
@borisbstyle has already copied scaling and rates into betaflight (although he has slightly increased yaw rates)

It now needs flight testing by a wider body of people. We may decide to increase the yaw rate after more people fly this, but that is a simple PR if required.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,20,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-208835566,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@martinbudden
I tested the scaling factors and I also did the equalize the rates between pid controllers and pretty happy with results.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-210848770,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",@martinbudden thanks for rebase.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-210848916,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",@martinbudden i like this since we get to delete a bunch of code.  will merge this once the build passes.  it totally makes sense to do this for v1.13.0 which is a great cleanup release.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-210853198,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","nice code size decrease too:
master:
   text    data     bss     dec     hex filename
 129020    1184   19272  149476   247e4 ./obj/main/cleanflight_SPRACINGF3MINI.elf

PR:
   text    data     bss     dec     hex filename
 127344    1168   19160  147672   240d8 ./obj/main/cleanflight_SPRACINGF3MINI.elf

reviewing now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/hydra,24,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-210857406,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",@martinbudden can you please review the documentation and update it accordingly via another PR?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/hydra,25,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-210857767,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",@martinbudden can you also update the unit tests as you see fit.  and see spelling of assess vs asses 😄   PR please.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,26,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-210859856,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@hydra , OK, I'll review the documentation.
As for the unit tests, this will allow them to be cleaned up significantly - the PIDs are much more testable now. I'll look into that as well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,27,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-211240456,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",Parsimony,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,28,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-211242917,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle , sorry, I couldn't resist the one-word parsimonious reply. To properly answer your question:

Generally I think the default position should be not to be configurable, unless there is a demonstrated need.
Users can already configure the filter by configuring the dterm_cut_hz value
A moving average is not a very good low pass filter anyway, so why put lipstick on a pig?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,29,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-211298916,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@martinbudden
dterm_cut_hz is not enabled by default.
The options should be separated IMO. One can choose what to have....avarage, filtering or both.
Also the scaling doesnt match all scenarios now. Rewrite scaling is now decreased by removing that average summing. Rewrite D values will end up higher than current tunes.
I suggest changing this line in rewrite as this will give more close D values as before
delta = (delta * ((uint16_t)0xFFFF / ((uint16_t)targetLooptime >> 4))) >> 5;
and change luxfloat according that
static const float luxDTermScale = (0.000001f * (float)0xFFFF) / 512;
The above 2 will make sure that scaling will be same/simillar. Still slight difference due to a bit different gyro interpretation.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/borisbstyle,30,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-211299384,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model",I would also suggest to remove MW23 to have more consistency and always good defaults,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,31,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-211379042,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle to address your points:

Would it be a good idea to enable dterm_cut_hz by default? If so could you suggest a default value?
Do people really use filtering and moving average together? Would not one or the other suffice?
On a related item, I note in betaflight you have changed to use a filterApplyPt1 filter (you previously used applyBiQuadFilter). What was the reason for the change, and should Cleanflight also change?
The current DTerm scaling is consistent between LUX and MWREWRITE, but as you note, results in higher D values. I'll change this.
Whether or not to include MW23 is @hydra 's call. I don't have a preference either way. I do note that you took it out of betaflight and then put it back in - why was that?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,32,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-214721423,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@borisbstyle , don't you mean that luxDTermScale should change from
static const float luxDTermScale = (0.000001f * (float)0xFFFF) / 256;

to
static const float luxDTermScale = (0.000001f * (float)0xFFFF) / 128;

(not /512)?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2016,2016-04-06T19:07:22Z,2016-04-16T16:56:41Z,2016-05-18T17:10:28Z,MERGED,True,1036,912,25,https://github.com/martinbudden,"For discussion - refactored LuxFloat to use P8[],I8[],D8[] and give same output as MwRewrite",29,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2016,https://github.com/martinbudden,33,https://github.com/cleanflight/cleanflight/pull/2016#issuecomment-220094758,"pidLuxFloat is refactored to use P8[], I8[] and D8[] etc, coefficients rather than P_f[], I_f[], D_f[] etc.
PTerm, ITerm, and DTerm output is scaled to produce the same output as pidMultiWiiRewrite.
Test code is written to check equivalence. (Although if this refactor finds favour I will write more test code.)
This means the same bank of PIDs is used for pidLuxFloat and pidMultiWiiRewrite and users should be able to swap between pidLuxFloat and pidMultiWiiRewrite without retuning.
Because P_f[], I_F[] etc no longer used simplification of serial_msp.c, serial_cli.c and rc_adjustments.c is possible.
pidLuxFloat uses floating point calculations based around the value of dT. pidMultiWiiRewrite does integer calculations based around the value of targetLoopTime, the conversion factors between these two values are defined in pid_luxfloat.c as;
// constants to scale pidLuxFloat so output is same as pidMultiWiiRewrite
static const float luxPTermScale = 1.0f / 128;
static const float luxITermScale = (1000000.0f / (0x1000000));
static const float luxDTermScale = 3 * (0.000001f * (float)0xFFFF) / 1028; // the 3 is because mwrewrite sums 3 deltas rather than taking moving average
static const float luxGyroScale = 16.4f / 4.0f; // the 16.4 is needed because mwrewrite does not scale according to the gyro model","@Bengt-M here: https://github.com/cleanflight/cleanflight/blob/master/src/main/config/config_unittest.h#L70
that is within the macro GET_PID_LUX_FLOAT_CORE_LOCALS",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2018,2016-04-06T21:09:43Z,2016-04-06T21:10:49Z,2016-04-06T21:15:59Z,CLOSED,False,261,556,20,https://github.com/4712,Blheli4wayif cleanup,3,[],https://github.com/cleanflight/cleanflight/pull/2018,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2018,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2019,2016-04-06T22:25:43Z,2016-04-16T16:31:16Z,2016-04-16T16:31:16Z,MERGED,True,262,1097,25,https://github.com/4712,cleanup for 4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2019,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2019,"cleanup for pr
4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.","cleanup for pr
4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2019,2016-04-06T22:25:43Z,2016-04-16T16:31:16Z,2016-04-16T16:31:16Z,MERGED,True,262,1097,25,https://github.com/4712,cleanup for 4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2019,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2019#issuecomment-210850072,"cleanup for pr
4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.",great!  I will have a look and test soon.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2019,2016-04-06T22:25:43Z,2016-04-16T16:31:16Z,2016-04-16T16:31:16Z,MERGED,True,262,1097,25,https://github.com/4712,cleanup for 4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2019,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2019#issuecomment-210850617,"cleanup for pr
4way Interface for ESC configuration and flashing - SK and BL bootloaders and USB VCP support.","in fact, I'll just merge this to the other branch now so that others can further cleanup and test too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2025,2016-04-08T15:16:48Z,2016-04-15T12:45:58Z,2016-06-09T14:18:23Z,CLOSED,False,2,38,9,https://github.com/borisbstyle,Removal of saturation Limit for airmode (unnecessary),1,[],https://github.com/cleanflight/cleanflight/pull/2025,https://github.com/borisbstyle,1,https://github.com/cleanflight/cleanflight/pull/2025,"Remove saturation limit for airmode and iterm reset
I will add another PR with better code for iterm reset where it is based on gyrorate instead of stick input","Remove saturation limit for airmode and iterm reset
I will add another PR with better code for iterm reset where it is based on gyrorate instead of stick input",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2025,2016-04-08T15:16:48Z,2016-04-15T12:45:58Z,2016-06-09T14:18:23Z,CLOSED,False,2,38,9,https://github.com/borisbstyle,Removal of saturation Limit for airmode (unnecessary),1,[],https://github.com/cleanflight/cleanflight/pull/2025,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2025#issuecomment-207983115,"Remove saturation limit for airmode and iterm reset
I will add another PR with better code for iterm reset where it is based on gyrorate instead of stick input","@hydra , @borisbstyle , this can be closed, I've included it as part of PR #2016",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2029,2016-04-10T10:26:07Z,2016-10-13T23:23:12Z,2016-10-13T23:23:12Z,CLOSED,False,746,84,14,https://github.com/DzikuVx,exotic mixers disabled on F1 targets with fallback to QuadX,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2029,https://github.com/DzikuVx,1,https://github.com/cleanflight/cleanflight/pull/2029,"This PR has following functions:

Introduces a way to disable predefined mixers. Specially those inherited from MultiWii and never really implemented or not used.
Allows to save some flash space on F1 targets by disabling uncommon mixers that still can be implemented using custom mixers. Approx. flash reduction: 700 bytes
It's a first step of servo handling refactoring that allows for more structurized, flexible and simpler servo approach

Disabled predefined mixers on F1:

MIXER_QUADP
MIXER_BICOPTER
MIXER_Y6
MIXER_HEX6 (Plus)
MIXER_Y4
MIXER_OCTOFLATP
MIXER_OCTOFLATX
MIXER_VTAIL4
MIXER_HEX6H
MIXER_DUALCOPTER
MIXER_SINGLECOPTER
MIXER_ATAIL4

Following mixers are always disabled since were never implemented:

MIXER_HELI_120_CCPM
MIXER_HELI_90_DEG

If user selects disabled mixer in Configurator or CLI, default MIXER_QUADX is loaded","This PR has following functions:

Introduces a way to disable predefined mixers. Specially those inherited from MultiWii and never really implemented or not used.
Allows to save some flash space on F1 targets by disabling uncommon mixers that still can be implemented using custom mixers. Approx. flash reduction: 700 bytes
It's a first step of servo handling refactoring that allows for more structurized, flexible and simpler servo approach

Disabled predefined mixers on F1:

MIXER_QUADP
MIXER_BICOPTER
MIXER_Y6
MIXER_HEX6 (Plus)
MIXER_Y4
MIXER_OCTOFLATP
MIXER_OCTOFLATX
MIXER_VTAIL4
MIXER_HEX6H
MIXER_DUALCOPTER
MIXER_SINGLECOPTER
MIXER_ATAIL4

Following mixers are always disabled since were never implemented:

MIXER_HELI_120_CCPM
MIXER_HELI_90_DEG

If user selects disabled mixer in Configurator or CLI, default MIXER_QUADX is loaded",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2029,2016-04-10T10:26:07Z,2016-10-13T23:23:12Z,2016-10-13T23:23:12Z,CLOSED,False,746,84,14,https://github.com/DzikuVx,exotic mixers disabled on F1 targets with fallback to QuadX,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2029,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/2029#issuecomment-207956135,"This PR has following functions:

Introduces a way to disable predefined mixers. Specially those inherited from MultiWii and never really implemented or not used.
Allows to save some flash space on F1 targets by disabling uncommon mixers that still can be implemented using custom mixers. Approx. flash reduction: 700 bytes
It's a first step of servo handling refactoring that allows for more structurized, flexible and simpler servo approach

Disabled predefined mixers on F1:

MIXER_QUADP
MIXER_BICOPTER
MIXER_Y6
MIXER_HEX6 (Plus)
MIXER_Y4
MIXER_OCTOFLATP
MIXER_OCTOFLATX
MIXER_VTAIL4
MIXER_HEX6H
MIXER_DUALCOPTER
MIXER_SINGLECOPTER
MIXER_ATAIL4

Following mixers are always disabled since were never implemented:

MIXER_HELI_120_CCPM
MIXER_HELI_90_DEG

If user selects disabled mixer in Configurator or CLI, default MIXER_QUADX is loaded",@hydra this is tested in INAV,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2029,2016-04-10T10:26:07Z,2016-10-13T23:23:12Z,2016-10-13T23:23:12Z,CLOSED,False,746,84,14,https://github.com/DzikuVx,exotic mixers disabled on F1 targets with fallback to QuadX,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2029,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2029#issuecomment-208064292,"This PR has following functions:

Introduces a way to disable predefined mixers. Specially those inherited from MultiWii and never really implemented or not used.
Allows to save some flash space on F1 targets by disabling uncommon mixers that still can be implemented using custom mixers. Approx. flash reduction: 700 bytes
It's a first step of servo handling refactoring that allows for more structurized, flexible and simpler servo approach

Disabled predefined mixers on F1:

MIXER_QUADP
MIXER_BICOPTER
MIXER_Y6
MIXER_HEX6 (Plus)
MIXER_Y4
MIXER_OCTOFLATP
MIXER_OCTOFLATX
MIXER_VTAIL4
MIXER_HEX6H
MIXER_DUALCOPTER
MIXER_SINGLECOPTER
MIXER_ATAIL4

Following mixers are always disabled since were never implemented:

MIXER_HELI_120_CCPM
MIXER_HELI_90_DEG

If user selects disabled mixer in Configurator or CLI, default MIXER_QUADX is loaded",I wouldn't call QUADP exotic. And it is a small mixer in terms of byte size.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2029,2016-04-10T10:26:07Z,2016-10-13T23:23:12Z,2016-10-13T23:23:12Z,CLOSED,False,746,84,14,https://github.com/DzikuVx,exotic mixers disabled on F1 targets with fallback to QuadX,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2029,https://github.com/DzikuVx,4,https://github.com/cleanflight/cleanflight/pull/2029#issuecomment-208218689,"This PR has following functions:

Introduces a way to disable predefined mixers. Specially those inherited from MultiWii and never really implemented or not used.
Allows to save some flash space on F1 targets by disabling uncommon mixers that still can be implemented using custom mixers. Approx. flash reduction: 700 bytes
It's a first step of servo handling refactoring that allows for more structurized, flexible and simpler servo approach

Disabled predefined mixers on F1:

MIXER_QUADP
MIXER_BICOPTER
MIXER_Y6
MIXER_HEX6 (Plus)
MIXER_Y4
MIXER_OCTOFLATP
MIXER_OCTOFLATX
MIXER_VTAIL4
MIXER_HEX6H
MIXER_DUALCOPTER
MIXER_SINGLECOPTER
MIXER_ATAIL4

Following mixers are always disabled since were never implemented:

MIXER_HELI_120_CCPM
MIXER_HELI_90_DEG

If user selects disabled mixer in Configurator or CLI, default MIXER_QUADX is loaded",And can be implemented in custom mixer without any problems.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2029,2016-04-10T10:26:07Z,2016-10-13T23:23:12Z,2016-10-13T23:23:12Z,CLOSED,False,746,84,14,https://github.com/DzikuVx,exotic mixers disabled on F1 targets with fallback to QuadX,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2029,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2029#issuecomment-210847935,"This PR has following functions:

Introduces a way to disable predefined mixers. Specially those inherited from MultiWii and never really implemented or not used.
Allows to save some flash space on F1 targets by disabling uncommon mixers that still can be implemented using custom mixers. Approx. flash reduction: 700 bytes
It's a first step of servo handling refactoring that allows for more structurized, flexible and simpler servo approach

Disabled predefined mixers on F1:

MIXER_QUADP
MIXER_BICOPTER
MIXER_Y6
MIXER_HEX6 (Plus)
MIXER_Y4
MIXER_OCTOFLATP
MIXER_OCTOFLATX
MIXER_VTAIL4
MIXER_HEX6H
MIXER_DUALCOPTER
MIXER_SINGLECOPTER
MIXER_ATAIL4

Following mixers are always disabled since were never implemented:

MIXER_HELI_120_CCPM
MIXER_HELI_90_DEG

If user selects disabled mixer in Configurator or CLI, default MIXER_QUADX is loaded","ok, i'm up for a more structured and better servo handling, there are many issues people want fixed.  Can you update this so that F1 still includes all the mixers that do not need servos. I think that is a better place to start point 3 from.  Right now it's a bit drastic to remove those defaults I think.
I feel a better approach is adding code to the configurator that allows mixers to be selected from some defaults to replace the defaults in the firmware.  Then you could delete ALL the mixer presets from the firmware.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2029,2016-04-10T10:26:07Z,2016-10-13T23:23:12Z,2016-10-13T23:23:12Z,CLOSED,False,746,84,14,https://github.com/DzikuVx,exotic mixers disabled on F1 targets with fallback to QuadX,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2029,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2029#issuecomment-210968708,"This PR has following functions:

Introduces a way to disable predefined mixers. Specially those inherited from MultiWii and never really implemented or not used.
Allows to save some flash space on F1 targets by disabling uncommon mixers that still can be implemented using custom mixers. Approx. flash reduction: 700 bytes
It's a first step of servo handling refactoring that allows for more structurized, flexible and simpler servo approach

Disabled predefined mixers on F1:

MIXER_QUADP
MIXER_BICOPTER
MIXER_Y6
MIXER_HEX6 (Plus)
MIXER_Y4
MIXER_OCTOFLATP
MIXER_OCTOFLATX
MIXER_VTAIL4
MIXER_HEX6H
MIXER_DUALCOPTER
MIXER_SINGLECOPTER
MIXER_ATAIL4

Following mixers are always disabled since were never implemented:

MIXER_HELI_120_CCPM
MIXER_HELI_90_DEG

If user selects disabled mixer in Configurator or CLI, default MIXER_QUADX is loaded","@DzikuVx , @hydra , this is a useful option to have available if an F1 target has run out of ROM, however it should not be enabled for a target until there is a ROM problem. There may be people using some of these mixers on CC3D and NAZE - there are certainly people who use QUADP, Y4, VTAILs and ATAILs, and they may be using CC3D or NAZE flight controllers. These would be broken if they upgraded   Cleanflight and the upgrade had these mixers removed.
So by all means include the changes to the C source - as I said this might come in useful at some point. But please don't change the target.h files until the specific target is running out of ROM.
And of course, we may choose to disable these mixers if and when a new big feature (e.g. iNav) is merged in.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2029,2016-04-10T10:26:07Z,2016-10-13T23:23:12Z,2016-10-13T23:23:12Z,CLOSED,False,746,84,14,https://github.com/DzikuVx,exotic mixers disabled on F1 targets with fallback to QuadX,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2029,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2029#issuecomment-253668211,"This PR has following functions:

Introduces a way to disable predefined mixers. Specially those inherited from MultiWii and never really implemented or not used.
Allows to save some flash space on F1 targets by disabling uncommon mixers that still can be implemented using custom mixers. Approx. flash reduction: 700 bytes
It's a first step of servo handling refactoring that allows for more structurized, flexible and simpler servo approach

Disabled predefined mixers on F1:

MIXER_QUADP
MIXER_BICOPTER
MIXER_Y6
MIXER_HEX6 (Plus)
MIXER_Y4
MIXER_OCTOFLATP
MIXER_OCTOFLATX
MIXER_VTAIL4
MIXER_HEX6H
MIXER_DUALCOPTER
MIXER_SINGLECOPTER
MIXER_ATAIL4

Following mixers are always disabled since were never implemented:

MIXER_HELI_120_CCPM
MIXER_HELI_90_DEG

If user selects disabled mixer in Configurator or CLI, default MIXER_QUADX is loaded","this went stale and concerns were not addressed, closing.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2033,2016-04-11T13:36:14Z,2016-04-16T16:28:54Z,2016-04-16T16:28:59Z,MERGED,True,7,2,2,https://github.com/Petfrogg,Adding name and links,7,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2033,https://github.com/Petfrogg,1,https://github.com/cleanflight/cleanflight/pull/2033,Adding the name and links for packages that needs to be installed in the doc for building in Cleanflight in Eclipse.,Adding the name and links for packages that needs to be installed in the doc for building in Cleanflight in Eclipse.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2033,2016-04-11T13:36:14Z,2016-04-16T16:28:54Z,2016-04-16T16:28:59Z,MERGED,True,7,2,2,https://github.com/Petfrogg,Adding name and links,7,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2033,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2033#issuecomment-210849868,Adding the name and links for packages that needs to be installed in the doc for building in Cleanflight in Eclipse.,thanks!  everything that helps new developers get started is welcomed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2034,2016-04-11T20:19:30Z,2016-04-16T15:19:41Z,2016-10-12T20:22:46Z,MERGED,True,415,381,38,https://github.com/ledvinap,Configuration storage - templates + improvements,8,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2034,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2034,"template reset
fixed duplicate registration in unittest
unittests for new templates, unittest for memory zeroing","template reset
fixed duplicate registration in unittest
unittests for new templates, unittest for memory zeroing",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2034,2016-04-11T20:19:30Z,2016-04-16T15:19:41Z,2016-10-12T20:22:46Z,MERGED,True,415,381,38,https://github.com/ledvinap,Configuration storage - templates + improvements,8,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2034,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2034#issuecomment-208543323,"template reset
fixed duplicate registration in unittest
unittests for new templates, unittest for memory zeroing","Can someone test on OSX an cygwin32, please ?
Unless I made some stupid mistake, this should be safe to merge. 500bytes of FLASH are saved
by template approach.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2034,2016-04-11T20:19:30Z,2016-04-16T15:19:41Z,2016-10-12T20:22:46Z,MERGED,True,415,381,38,https://github.com/ledvinap,Configuration storage - templates + improvements,8,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2034,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2034#issuecomment-210435549,"template reset
fixed duplicate registration in unittest
unittests for new templates, unittest for memory zeroing","@ledvinap , I get the following error when building the test code under OSX:
c++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 ../../obj/test/io/ledstrip.o ../../obj/test/ledstrip_unittest.o ../../obj/test/gtest_main.a -o ../../obj/test/../../obj/test/ledstrip_unittest
clang: warning: argument unused during compilation: '-pthread'
Undefined symbols for architecture x86_64:
  ""_pgResetFn_colors"", referenced from:
      _colors_Registry in ledstrip.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make: *** [../../obj/test/ledstrip_unittest] Error 1

I also get the warning
c++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 -Iunit -I../main -c unit/config_eeprom_unittest.cc -o ../../obj/test/config_eeprom_unittest.o
unit/config_eeprom_unittest.cc:161:5: warning: attribute declaration must precede definition [-Wignored-attributes]
    PG_REGISTER_ARR_WITH_RESET_FN(someSystemArrayItem_t, 10, someSystemArray, PG_RESERVED_FOR_TESTING_2, 0);
    ^
../main/config/parameter_group.h:167:62: note: expanded from macro 'PG_REGISTER_ARR_WITH_RESET_FN'
    extern void pgResetFn_ ## _name(_type *) __attribute__ ((weak));    \
                                                             ^
unit/config_eeprom_unittest.cc:150:10: note: previous definition is here
    void pgResetFn_someSystemArray(someSystemArrayItem_t *instance)
         ^
unit/config_eeprom_unittest.cc:148:5: warning: unused function 'someSystemArray_arr' [-Wunused-function]
    PG_DECLARE_ARR(someSystemArrayItem_t, 10, someSystemArray);
    ^
../main/config/parameter_group.h:110:28: note: expanded from macro 'PG_DECLARE_ARR'
    static inline _type (* _name ## _arr(void))[_size] { return &_name ## _SystemArray; } \
                           ^
<scratch space>:22:1: note: expanded from here
someSystemArray_arr
^
2 warnings generated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2034,2016-04-11T20:19:30Z,2016-04-16T15:19:41Z,2016-10-12T20:22:46Z,MERGED,True,415,381,38,https://github.com/ledvinap,Configuration storage - templates + improvements,8,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2034,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2034#issuecomment-210463464,"template reset
fixed duplicate registration in unittest
unittests for new templates, unittest for memory zeroing","@martinbudden : Thanks for report. Fixed now; so code from other attempts was left, masking this problem
Can you test it again?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2034,2016-04-11T20:19:30Z,2016-04-16T15:19:41Z,2016-10-12T20:22:46Z,MERGED,True,415,381,38,https://github.com/ledvinap,Configuration storage - templates + improvements,8,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2034,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2034#issuecomment-210553170,"template reset
fixed duplicate registration in unittest
unittests for new templates, unittest for memory zeroing","The tests now compile and run correctly. I now just get a single warning:
c++ -g -Wall -pthread -Wextra -ggdb3 -O0 -DUNIT_TEST -isystem ../../lib/test/gtest/inc -MMD -MP -std=gnu++11 -Iunit -I../main -c unit/config_eeprom_unittest.cc -o ../../obj/test/config_eeprom_unittest.o
unit/config_eeprom_unittest.cc:148:5: warning: unused function 'someSystemArray_arr' [-Wunused-function]
    PG_DECLARE_ARR(someSystemArrayItem_t, 10, someSystemArray);
    ^
../main/config/parameter_group.h:108:28: note: expanded from macro 'PG_DECLARE_ARR'
    static inline _type (* _name ## _arr(void))[_size] { return &_name ## _SystemArray; } \
                           ^
<scratch space>:150:1: note: expanded from here
someSystemArray_arr
^
1 warning generated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2034,2016-04-11T20:19:30Z,2016-04-16T15:19:41Z,2016-10-12T20:22:46Z,MERGED,True,415,381,38,https://github.com/ledvinap,Configuration storage - templates + improvements,8,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2034,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2034#issuecomment-210837443,"template reset
fixed duplicate registration in unittest
unittests for new templates, unittest for memory zeroing","ok, i'll merge this shortly and then suggest someone make a new PR or commit directly to fix the warning - add a unit test perhaps?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2035,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)","Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2035#issuecomment-208565795,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)","OSDs etc using MSP may be affected by mag_decl change. Is anyone using it?
Otherwise the change seems reasonable to me.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2035#issuecomment-208567786,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)","(sorry, wrong button)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/gaelj,4,https://github.com/cleanflight/cleanflight/pull/2035#issuecomment-208609208,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)",Is this failed check a problem ?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2035#issuecomment-208806152,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)","@gaelj , looks like you just need to add a stub for GPS_hdop in serial_msp_unittest.cc.
In the stubs section at the bottom of the file, in the part labeled //from gps.c just add the line:
uint16_t GPS_hdop;

That should fix the problem.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/gaelj,6,https://github.com/cleanflight/cleanflight/pull/2035#issuecomment-209103414,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)",Thank you very much for the hint.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/gaelj,7,https://github.com/cleanflight/cleanflight/pull/2035#issuecomment-209698067,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)",Hi. Should I squash this PR ?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/stronnag,8,https://github.com/cleanflight/cleanflight/pull/2035#issuecomment-210849293,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)",It would be useful to also consider the inav MSP_GPSSTATISTICS API (which also provides HDOP) in order to maximise the chances of this being well supported in ground stations / OSDs.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2035,2016-04-11T20:50:53Z,2016-04-16T16:10:31Z,2016-04-16T17:06:32Z,CLOSED,False,7,4,3,https://github.com/gaelj,MSP : Add HDOP + don't scale mag_decl,6,[],https://github.com/cleanflight/cleanflight/pull/2035,https://github.com/gaelj,9,https://github.com/cleanflight/cleanflight/pull/2035#issuecomment-210859704,"Add HDOP value to MSP_RAW_GPS
Do not scale mag_decl by 10
Update API_version_minor to 18
(See associated CFC pull request)",continued in #2054,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2036,2016-04-12T05:20:19Z,2016-04-19T11:59:14Z,2016-04-19T11:59:23Z,MERGED,True,5,8,3,https://github.com/larryho5,- Enable MPU9250 for Colibri Race,3,[],https://github.com/cleanflight/cleanflight/pull/2036,https://github.com/larryho5,1,https://github.com/cleanflight/cleanflight/pull/2036,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2036,2016-04-12T05:20:19Z,2016-04-19T11:59:14Z,2016-04-19T11:59:23Z,MERGED,True,5,8,3,https://github.com/larryho5,- Enable MPU9250 for Colibri Race,3,[],https://github.com/cleanflight/cleanflight/pull/2036,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2036#issuecomment-210428139,,"@larryho5
To set the default rc config to AETR you just need to remove the line:
parseRcChannels(""TAER1234"", rxConfig());

you don't need to add
parseRcChannels(""AETR1234"", rxConfig());

since AETR is the default.
Also if you #define BOARD_HAS_VOLTAGE_DIVIDER in target/COLIBRI_RACE/target.h you can remove featureSet(FEATURE_VBAT); since it will be set if BOARD_HAS_VOLTAGE_DIVIDER is defined.
You can also remove featureSet(FEATURE_FAILSAFE); from under the COLIBRI_RACE #define since FEATURE_FAILSAFE is set by default.
You can also remove pidProfile()->pidController = PID_CONTROLLER_MWREWRITE; from under the COLIBRI_RACE #define since that is the default.
The less board specific code there is in config.c the better. The above changes should get you down to 3 lines of Colibri specific code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2036,2016-04-12T05:20:19Z,2016-04-19T11:59:14Z,2016-04-19T11:59:23Z,MERGED,True,5,8,3,https://github.com/larryho5,- Enable MPU9250 for Colibri Race,3,[],https://github.com/cleanflight/cleanflight/pull/2036,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2036#issuecomment-210836570,,"@larryho5 please update the PR based on @martinbudden 's comments above and we'll get this merged.
@martinbudden thanks for the review and comments, much appreciated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2036,2016-04-12T05:20:19Z,2016-04-19T11:59:14Z,2016-04-19T11:59:23Z,MERGED,True,5,8,3,https://github.com/larryho5,- Enable MPU9250 for Colibri Race,3,[],https://github.com/cleanflight/cleanflight/pull/2036,https://github.com/larryho5,4,https://github.com/cleanflight/cleanflight/pull/2036#issuecomment-211179012,,"@martinbudden, thank you, i will change it asap",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2036,2016-04-12T05:20:19Z,2016-04-19T11:59:14Z,2016-04-19T11:59:23Z,MERGED,True,5,8,3,https://github.com/larryho5,- Enable MPU9250 for Colibri Race,3,[],https://github.com/cleanflight/cleanflight/pull/2036,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2036#issuecomment-211882162,,thanks @larryho5 - merged.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2038,2016-04-12T08:58:32Z,2016-04-16T15:20:12Z,2016-04-16T15:49:31Z,MERGED,True,10,52,1,https://github.com/martinbudden,Config cleanup - tidied assignment to customMotorMixer for ALIENWII.,1,['Critical'],https://github.com/cleanflight/cleanflight/pull/2038,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2038,"Assignment to customMotorMixer for ALIENWII tidied.
Used enum rather than integer for setting ALIENWII serialrx_provider.
One white space tidy.","Assignment to customMotorMixer for ALIENWII tidied.
Used enum rather than integer for setting ALIENWII serialrx_provider.
One white space tidy.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2043,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]","This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-210378422,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]",I've now virtualised the callbacks from map_protocol.c into serial_msp.c. This means that it should be straightforward implement MSP over I2C. All that is required is to create a mspI2CProcess (which can be loosely based on mspSerialProcess in serial_msp.c and create a new taskHandleI2C and hook it into the scheduler.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-210398701,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]","@martinbudden :
Still working on my version
My idea is to completely separate command handling from command transfer.
From point of MSP handling, command may be abstracted to:

int cmd - use larger command, let driver handle wire encoding (reserved codes for 2 byte command may be transparent from handling)
(direction, but it is mostly implicit)
error status / error code. Current implementation uses only 1 bit and no data on error, by we may use error codes easily (mapping nonzero error code to '!' in serial msp
message data + length

It new protocols, it may be useful to add:

message ID - reply is easily matched to command
message sequence number - refuse out-of-sequence important commands / avoid executing command twice when reply is lost.

Checksum calculation, serial headers, cmd and lenght encoding framing etc can be handled in serial driver, command processing can be totally independent ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-210413990,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]","@ledvinap , I look forward to having a look at it.
One comment - I think the checksum, framing etc are part of the MSP protocol and so shouldn't really be done in the serial driver. Or are you talking about the ability to add a new protocol using the existing serialize/read code?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-210453246,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]","I want to separate MSP protocol (frame format, synchronization, ...) from MSP command handling command IDs and strucutre of data messages).
Adding new transport protocol will be easy (I am planning extensible multiplexed protocol with blackbox, msp, possibly CLI)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-210542213,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]","It will take some time ..
basic idea is :
typedef struct sbuf_s {
    uint8_t *ptr;          // data pointer must be first (sbuff_t* is equivalent to uint8_t **)
    uint8_t *end;
} sbuf_t;

void sbufPutU32(sbuf_t *dst, uint32_t val);
void sbufPutData(sbuf_t *dst, const uint8_t *data, int len);

uint8_t sbufGetU8(sbuf_t *src);
uint16_t sbufGetU16(sbuf_t *src);
uint32_t sbufGetU32(sbuf_t *src);

int sbufBytesRemaining(sbuf_t *buf);
uint8_t* sbufPtr(sbuf_t *buf);
void sbufAdvance(int size);

typedef struct {
  sbuf_t buf;
  int command;
  ...
} mspPacket_t;
static void serializeSDCardSummaryReply(mspPacket_t *dst)

static bool processOutCommand(mspPacket *cmd, mspPacket_t *reply)
static bool processInCommand(mspPacket_t *cmd)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/jflyper,7,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-210817975,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]","@ledvinap
typedef struct sbuf_s {
    uint8_t *ptr;          // data pointer must be first (sbuff_t* is equivalent to uint8_t **)
    uint8_t *end;
} sbuf_t;

typedef struct {
  sbuf_t buf;
  int command;
  ...
} mspPacket_t;

Ah, just like any other networking code.
So it would not be 'Serial' protocol any more; MMP (Multiwii Messaging Protocol) or CFMP may be, and we would implement MMP/CFMP over serial, MMP/CFMP over I2C and such?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-210822322,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]",full agree with splitting command handling out and making the msp core re-usable.  ideally there should be an implmentation of the MSP core that doesn't know how or were it's being used so it can be reused.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-211459561,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]",My take on this is in #2062,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2043,2016-04-14T16:11:50Z,2016-04-23T08:45:34Z,2016-05-10T13:05:11Z,CLOSED,False,1930,1858,12,https://github.com/martinbudden,For discussion - split serial_msp.c into serial part and protocol part,15,[],https://github.com/cleanflight/cleanflight/pull/2043,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/2043#issuecomment-213694691,"This PR splits serial_msp.c into a much smaller serial_msp.c which only includes the serial specific items and msp_protocol.c which contains all the actual MSP protocol, with its dependencies on serial removed.
The primary motivation for this is to make it much easier to write tests for the MSP protocol, but a secondary motivation is to allow MSP to be implemented over another carrier, in particular I2C. This would allow future OSD other devices to connect via I2C and help solve the lack of serial ports problem.
[Note this PR is for discussion only, not yet ready to be merged.]","Closing, superseded by #2062.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2046,2016-04-15T14:54:02Z,2016-04-15T19:48:26Z,2016-04-15T19:48:26Z,CLOSED,False,23830,11116,323,https://github.com/ps915,"choose LED Color for ""armed"" and ""disarmed""",835,[],https://github.com/cleanflight/cleanflight/pull/2046,https://github.com/ps915,1,https://github.com/cleanflight/cleanflight/pull/2046,"Would it be possible that the user can change the LED Color for ""armed"" and ""disarmed"" state in Cleanflight and Betaflight?
Right now, the disarmed Color is blue and everytime there is a new releases, i have to change it manuell an compile it again.
Its not nessesary to configure it via the GUI. two cli variables would be awesome.
Cheers,
Phil","Would it be possible that the user can change the LED Color for ""armed"" and ""disarmed"" state in Cleanflight and Betaflight?
Right now, the disarmed Color is blue and everytime there is a new releases, i have to change it manuell an compile it again.
Its not nessesary to configure it via the GUI. two cli variables would be awesome.
Cheers,
Phil",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2046,2016-04-15T14:54:02Z,2016-04-15T19:48:26Z,2016-04-15T19:48:26Z,CLOSED,False,23830,11116,323,https://github.com/ps915,"choose LED Color for ""armed"" and ""disarmed""",835,[],https://github.com/cleanflight/cleanflight/pull/2046,https://github.com/SteveAmor,2,https://github.com/cleanflight/cleanflight/pull/2046#issuecomment-210522153,"Would it be possible that the user can change the LED Color for ""armed"" and ""disarmed"" state in Cleanflight and Betaflight?
Right now, the disarmed Color is blue and everytime there is a new releases, i have to change it manuell an compile it again.
Its not nessesary to configure it via the GUI. two cli variables would be awesome.
Cheers,
Phil","Hi @ps915 this sounds like a reasonable feature request. Can you close this PR and raise it as an issue. Title ""Feature request - choose LED Color for ""armed"" and ""disarmed""
Thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2050,2016-04-16T10:25:16Z,2016-04-16T14:59:55Z,2016-04-16T15:56:20Z,CLOSED,False,8,5,4,https://github.com/gaelj,Configurable armed led colors #2047,6,[],https://github.com/cleanflight/cleanflight/pull/2050,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2050,Armed status lights up LEDs using the user-defined color parameter instead of static blue,Armed status lights up LEDs using the user-defined color parameter instead of static blue,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2050,2016-04-16T10:25:16Z,2016-04-16T14:59:55Z,2016-04-16T15:56:20Z,CLOSED,False,8,5,4,https://github.com/gaelj,Configurable armed led colors #2047,6,[],https://github.com/cleanflight/cleanflight/pull/2050,https://github.com/gaelj,2,https://github.com/cleanflight/cleanflight/pull/2050#issuecomment-210787332,Armed status lights up LEDs using the user-defined color parameter instead of static blue,Only the last commit is related to #2047,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2050,2016-04-16T10:25:16Z,2016-04-16T14:59:55Z,2016-04-16T15:56:20Z,CLOSED,False,8,5,4,https://github.com/gaelj,Configurable armed led colors #2047,6,[],https://github.com/cleanflight/cleanflight/pull/2050,https://github.com/Arakon,3,https://github.com/cleanflight/cleanflight/pull/2050#issuecomment-210792857,Armed status lights up LEDs using the user-defined color parameter instead of static blue,"Doesn't work, won't compile.
./src/main/io/ledstrip.c: In function 'applyLedModeLayer':
./src/main/io/ledstrip.c:619:47: error: called object 'colors' is not a function
or function pointer
setLedHsv(ledIndex, colors(ledConfig->color));
^
./src/main/io/ledstrip.c:230:13: note: declared here
hsvColor_t colors;
^
Makefile:902: recipe for target 'obj/main/SPRACINGF3/io/ledstrip.o' failed
make: ** [obj/main/SPRACINGF3/io/ledstrip.o] Error 1",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2050,2016-04-16T10:25:16Z,2016-04-16T14:59:55Z,2016-04-16T15:56:20Z,CLOSED,False,8,5,4,https://github.com/gaelj,Configurable armed led colors #2047,6,[],https://github.com/cleanflight/cleanflight/pull/2050,https://github.com/Arakon,4,https://github.com/cleanflight/cleanflight/pull/2050#issuecomment-210793338,Armed status lights up LEDs using the user-defined color parameter instead of static blue,"And here's why. It should be:
setLedHsv(ledIndex, &colors[ledConfig->color]);",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2050,2016-04-16T10:25:16Z,2016-04-16T14:59:55Z,2016-04-16T15:56:20Z,CLOSED,False,8,5,4,https://github.com/gaelj,Configurable armed led colors #2047,6,[],https://github.com/cleanflight/cleanflight/pull/2050,https://github.com/gaelj,5,https://github.com/cleanflight/cleanflight/pull/2050#issuecomment-210813524,Armed status lights up LEDs using the user-defined color parameter instead of static blue,"Hi, thanks for taking interest.
I'm afraid applying your suggestion doens't compile on my side !
My CR passed the Travis-build so I would tend to think the problem lies on your end.
Anyways I am implementing a new CLI command to customize all ""static"" colors.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2050,2016-04-16T10:25:16Z,2016-04-16T14:59:55Z,2016-04-16T15:56:20Z,CLOSED,False,8,5,4,https://github.com/gaelj,Configurable armed led colors #2047,6,[],https://github.com/cleanflight/cleanflight/pull/2050,https://github.com/Arakon,6,https://github.com/cleanflight/cleanflight/pull/2050#issuecomment-210818164,Armed status lights up LEDs using the user-defined color parameter instead of static blue,"That's strange, because the way I put it is the same way it's used in several other places. After the change it compiles and works fine for me.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2050,2016-04-16T10:25:16Z,2016-04-16T14:59:55Z,2016-04-16T15:56:20Z,CLOSED,False,8,5,4,https://github.com/gaelj,Configurable armed led colors #2047,6,[],https://github.com/cleanflight/cleanflight/pull/2050,https://github.com/gaelj,7,https://github.com/cleanflight/cleanflight/pull/2050#issuecomment-210822069,Armed status lights up LEDs using the user-defined color parameter instead of static blue,Are you sure you can compile cleanflight/master ?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2050,2016-04-16T10:25:16Z,2016-04-16T14:59:55Z,2016-04-16T15:56:20Z,CLOSED,False,8,5,4,https://github.com/gaelj,Configurable armed led colors #2047,6,[],https://github.com/cleanflight/cleanflight/pull/2050,https://github.com/Arakon,8,https://github.com/cleanflight/cleanflight/pull/2050#issuecomment-210834643,Armed status lights up LEDs using the user-defined color parameter instead of static blue,"I actually used betaflight, but the file is the same for both. I just made the exact same change to a current cleanflight git, though, with exactly the same result.. fails with setLedHsv(ledIndex, colors(ledConfig->color));, compiles and works with setLedHsv(ledIndex, &colors[ledConfig->color]);.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2052,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8","New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/gaelj,2,https://github.com/cleanflight/cleanflight/pull/2052#issuecomment-210835364,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8",Addresses issue #819 and issue #2047,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2052#issuecomment-210839365,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8","@gaelj , as a general principle pull requests should be atomic. That is they should address one issue only. Certainly changes to GPS related things and LED related things should be in separate PRs. There are a number of reasons for this:

It is just good practice.
@hydra may choose to accept only one item, or may wish to address one or other of the items at a different time (for example, when other changes are going on in that area of code).
This a bigger chance of merge conflicts, which makes it much harder to accept the PR.

I would advise you to change this PR to address just the GPS issue and put the configurable colours into a separate PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/gaelj,4,https://github.com/cleanflight/cleanflight/pull/2052#issuecomment-210841193,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8",Sorry about that. I will try again :),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2052#issuecomment-210844100,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8",@gaelj please link this PR to your new PR or just update your PR branch with different commits and force push it over the old remote branch and then reopen this PR.  The changes are quite small and lots of people have asked for this so it's simple to merge once you give us just the commits needed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2052#issuecomment-210846932,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8",could you also include a commit that updates the documentation; perhaps copy/paste from PR description and update accordingly.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/gaelj,7,https://github.com/cleanflight/cleanflight/pull/2052#issuecomment-210848989,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8","Thanks for the comments.
New individual PR's for each of my ongoing change requests coming up shortly, this time I think it got it right. Apologies for the mix-ups.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2052#issuecomment-210849600,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8",@gaelj great,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2052,2016-04-16T15:01:43Z,2016-04-16T15:38:46Z,2016-04-20T21:12:52Z,CLOSED,False,221,87,7,https://github.com/gaelj,Configurable led colors issue #819 issue #2047,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2052,https://github.com/gaelj,9,https://github.com/cleanflight/cleanflight/pull/2052#issuecomment-212607509,"New CLI command: mode_color
No arguments: lists all mode colors
arguments: ModeIndex, ModeColorIndex, ColorIndex

First 6 groups of ModeIndexes are :
orientation
headfree
horizon
angle
mag
baro

Each of these groups use these ModelColorIndexes :
north
east
south
west
up
down

Group 6 is used for special colors according to these ModelColorIndexes:
disarmed
armed
animation
bakground

The ColorIndex is picked from the colors array (""palette"").
Examples :
set armed color to red: mode_color 6 1 2
set disarmed color to yellow: mode_color 6 0 4
set Headfree Mode - South to Cyan: mode_color 1 2 8",See #2053,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2053,2016-04-16T16:34:56Z,2016-05-09T09:49:57Z,2016-05-12T22:25:16Z,CLOSED,False,272,84,5,https://github.com/gaelj,CLI: add command mode_color,4,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2053,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2053,Configurable led colors - issue #819 issue #2047,Configurable led colors - issue #819 issue #2047,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2053,2016-04-16T16:34:56Z,2016-05-09T09:49:57Z,2016-05-12T22:25:16Z,CLOSED,False,272,84,5,https://github.com/gaelj,CLI: add command mode_color,4,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2053,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2053#issuecomment-217821971,Configurable led colors - issue #819 issue #2047,"merged
@gaelj please review the follow commits:
2ad3ebe
5b81eea
0e00085
6a4b2e5
c69994b
also, we prefer it if you just force-push new commits to your existing PR rather than opening a new as it helps to keep the discussion in one place and reduces issue tracker clutter and cross-referencing.  also, the milestones and labels are lost on new PR's.
Thanks!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2053,2016-04-16T16:34:56Z,2016-05-09T09:49:57Z,2016-05-12T22:25:16Z,CLOSED,False,272,84,5,https://github.com/gaelj,CLI: add command mode_color,4,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2053,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2053#issuecomment-217825509,Configurable led colors - issue #819 issue #2047,and see 5d5fd6e,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2054,2016-04-16T16:36:55Z,2016-05-11T22:50:49Z,2016-05-12T22:24:19Z,MERGED,True,5,2,3,https://github.com/gaelj,MSP_RAW_GPS: add GPS_hdop,4,[],https://github.com/cleanflight/cleanflight/pull/2054,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2054,"Add HDOP value to MSP_RAW_GPS
cleanflight/cleanflight-configurator issue 218","Add HDOP value to MSP_RAW_GPS
cleanflight/cleanflight-configurator issue 218",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2054,2016-04-16T16:36:55Z,2016-05-11T22:50:49Z,2016-05-12T22:24:19Z,MERGED,True,5,2,3,https://github.com/gaelj,MSP_RAW_GPS: add GPS_hdop,4,[],https://github.com/cleanflight/cleanflight/pull/2054,https://github.com/stronnag,2,https://github.com/cleanflight/cleanflight/pull/2054#issuecomment-210861310,"Add HDOP value to MSP_RAW_GPS
cleanflight/cleanflight-configurator issue 218","Please consider that CF is not the only game in town and not the only user of MSP. Breaking an established, published  specification such as MSP is likely to cause, at best, confusion.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2054,2016-04-16T16:36:55Z,2016-05-11T22:50:49Z,2016-05-12T22:24:19Z,MERGED,True,5,2,3,https://github.com/gaelj,MSP_RAW_GPS: add GPS_hdop,4,[],https://github.com/cleanflight/cleanflight/pull/2054,https://github.com/digitalentity,3,https://github.com/cleanflight/cleanflight/pull/2054#issuecomment-210967408,"Add HDOP value to MSP_RAW_GPS
cleanflight/cleanflight-configurator issue 218","I don't think this will break compatibility. MSP processing code does not check for the message size. HDOP is added to the end of the message, legacy code will simply ignore the extra data. Newer code may check for MSP version to see if HDOP is available.
BTW, INAV has exactly this extra HDOP value to MSP_RAW_GPS",True,{'THUMBS_UP': ['https://github.com/gaelj']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2055,2016-04-16T16:39:40Z,2016-05-11T22:50:50Z,2016-05-12T22:24:13Z,MERGED,True,3,3,2,https://github.com/gaelj,MSP: do not scale mag_declination value by 10,2,[],https://github.com/cleanflight/cleanflight/pull/2055,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2055,"Related to CF cfg issue 153
Requires the corresponding patch in cleanflight-configurator","Related to CF cfg issue 153
Requires the corresponding patch in cleanflight-configurator",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2055,2016-04-16T16:39:40Z,2016-05-11T22:50:50Z,2016-05-12T22:24:13Z,MERGED,True,3,3,2,https://github.com/gaelj,MSP: do not scale mag_declination value by 10,2,[],https://github.com/cleanflight/cleanflight/pull/2055,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2055#issuecomment-210992396,"Related to CF cfg issue 153
Requires the corresponding patch in cleanflight-configurator",please create a PR for the configurator and put a link to it here.  I notice the commit you reference doesn't contain any code for dealing with the older API version that people still use.  there needs to be some conditional code to deal with older API versions in the PR for the configurator and some configuration migration code in backup_restore.js too.,True,{'THUMBS_UP': ['https://github.com/gaelj']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2055,2016-04-16T16:39:40Z,2016-05-11T22:50:50Z,2016-05-12T22:24:13Z,MERGED,True,3,3,2,https://github.com/gaelj,MSP: do not scale mag_declination value by 10,2,[],https://github.com/cleanflight/cleanflight/pull/2055,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2055#issuecomment-212582509,"Related to CF cfg issue 153
Requires the corresponding patch in cleanflight-configurator","@hydra, I don't think anything needs to be updated in backup_restore.js, as the value contained in MISC.mag_declination is not affected. It's the value passed to CF that changes. So the value used in backup / restore remains valid. But it was well worth the check. :) Please correct me if I am wong.
Old API versions are now dealt with in CFC.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2056,2016-04-16T18:08:27Z,2016-04-16T19:49:05Z,2016-04-16T19:49:14Z,CLOSED,False,2,2,1,https://github.com/jaisor,Update Battery.md,1,[],https://github.com/cleanflight/cleanflight/pull/2056,https://github.com/jaisor,1,https://github.com/cleanflight/cleanflight/pull/2056,Corrected current_meter_scale formula example.,Corrected current_meter_scale formula example.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2056,2016-04-16T18:08:27Z,2016-04-16T19:49:05Z,2016-04-16T19:49:14Z,CLOSED,False,2,2,1,https://github.com/jaisor,Update Battery.md,1,[],https://github.com/cleanflight/cleanflight/pull/2056,https://github.com/jaisor,2,https://github.com/cleanflight/cleanflight/pull/2056#issuecomment-210882766,Corrected current_meter_scale formula example.,NVM,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2057,2016-04-17T14:39:18Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,14,14,10,https://github.com/martinbudden,"For discussion - should accelerometer, barometer and compass configs be in profile?",2,"['Question', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2057,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2057,"This is a ""for discussion"" PR.
Should accelerometerConfig_t, barometerConfig_t and compassConfig_t be part of the profile? I think not, but others may disagree, hence this is raised for discussion.
If there is consensus that any or all of these should be removed from the profile, then this PR provides @hydra with an easy way to cherry pick the items to remove.
(And isn't it great that the new PG macros make it so easy to change this?)","This is a ""for discussion"" PR.
Should accelerometerConfig_t, barometerConfig_t and compassConfig_t be part of the profile? I think not, but others may disagree, hence this is raised for discussion.
If there is consensus that any or all of these should be removed from the profile, then this PR provides @hydra with an easy way to cherry pick the items to remove.
(And isn't it great that the new PG macros make it so easy to change this?)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2057,2016-04-17T14:39:18Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,14,14,10,https://github.com/martinbudden,"For discussion - should accelerometer, barometer and compass configs be in profile?",2,"['Question', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2057,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2057#issuecomment-212770018,"This is a ""for discussion"" PR.
Should accelerometerConfig_t, barometerConfig_t and compassConfig_t be part of the profile? I think not, but others may disagree, hence this is raised for discussion.
If there is consensus that any or all of these should be removed from the profile, then this PR provides @hydra with an easy way to cherry pick the items to remove.
(And isn't it great that the new PG macros make it so easy to change this?)","i think they were there for four reasons:

different flying styles with the same aircraft.
flying at different locations with the same aircraft.
using different batteries with the same aircraft.
developer testing.

and yes, yes it's great we can change it easily 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2057,2016-04-17T14:39:18Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,14,14,10,https://github.com/martinbudden,"For discussion - should accelerometer, barometer and compass configs be in profile?",2,"['Question', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2057,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2057#issuecomment-213333187,"This is a ""for discussion"" PR.
Should accelerometerConfig_t, barometerConfig_t and compassConfig_t be part of the profile? I think not, but others may disagree, hence this is raised for discussion.
If there is consensus that any or all of these should be removed from the profile, then this PR provides @hydra with an easy way to cherry pick the items to remove.
(And isn't it great that the new PG macros make it so easy to change this?)","@borisbstyle , do you have any views on this?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2058,2016-04-17T14:40:54Z,2016-04-21T06:20:25Z,2016-04-21T08:03:25Z,MERGED,True,6,6,2,https://github.com/martinbudden,Simplifies call to sonarGetHardwareConfiguration,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2058,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2058,Simplifies call to sonarGetHardwareConfiguration by just passing currentMeterType since that is all that is used.,Simplifies call to sonarGetHardwareConfiguration by just passing currentMeterType since that is all that is used.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2059,2016-04-17T15:44:34Z,2016-05-06T18:04:32Z,2016-05-06T19:45:19Z,MERGED,True,40,69,1,https://github.com/martinbudden,Update of PID documentation to reflect PID_LUXFLOAT changes,2,[],https://github.com/cleanflight/cleanflight/pull/2059,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2059,"Also took the opportunity to do some minor editing.
This is just a minimal edit to reflect the changes to PID_LUXFLOAT, it could still be improved.","Also took the opportunity to do some minor editing.
This is just a minimal edit to reflect the changes to PID_LUXFLOAT, it could still be improved.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2059,2016-04-17T15:44:34Z,2016-05-06T18:04:32Z,2016-05-06T19:45:19Z,MERGED,True,40,69,1,https://github.com/martinbudden,Update of PID documentation to reflect PID_LUXFLOAT changes,2,[],https://github.com/cleanflight/cleanflight/pull/2059,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2059#issuecomment-217516886,"Also took the opportunity to do some minor editing.
This is just a minimal edit to reflect the changes to PID_LUXFLOAT, it could still be improved.",thanks again @martinbudden,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2062,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211529280,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@ledvinap , my initial thoughts are that it is very similar to my approach - at least ""in the large"", ""in the small"" there are differences, for example you create a new streambuf abstraction, whereas I just continue to use the serialize functions over the bufWriter. I'll look at in more detail later but I have a few initial comments:

The mspSerialProcessReceivedByte state machine is independent of the serial port and should be in  msp.c rather than serial_msp.c
You have changed the state machine to use a switch statement. This is the more natural implementation, but I tried that as part of my implementation and was surprised to find it used significantly more ROM, over 200 bytes (I can't remember the exact figure, but it may have even been more than 300 bytes). (Actually on second thoughts, I'm not that surprised: ARM is very efficient at these simple conditionals, especially when testing the same variable, whereas for a switch statement the compiler probably set up a jump table.)
I also think that the mspSerialProcessReceivedByte function should be in msp.c (and perhaps be called mspProcessReceivedByte) - this is my approach and I handle the serial dependency with a callback.
You probably haven't got this far yet, but you'll also need callbacks to handle the releasing and reallocation of resources for the 1WIRE command.

My implementation has 4 callbacks:
typedef void (*mspFunctionPtr)(void);

typedef struct mspFunctionPointers_s {
    mspFunctionPtr beginWrite;
    mspFunctionPtr endWrite;
    mspFunctionPtr releaseFor1Wire;
    mspFunctionPtr reallocateAfter1Wire;
} mspFunctionPointers_t;",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211773608,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@ledvinap , I've thought a bit more about the problem. There are actually 3 things going on:

Internalisation and externalisation of Cleanflight variables
Conversion of externalised data to MSP format
Use of serial port

or, more abstractly:

Cleanflight specific code
MSP specific code
Serial port specific code.

Both your approach and mine split the code into two, you group the MSP specific code with the serial port specific code, whereas I group the MSP specific code with the Cleanflight specific code. I think the correct approach is actually to split the code into three parts.
(In my code, I was never entirely happy with how the MSP specific code, in particular the checksum, combined with the internalisation and externalisation of Cleanflight variables.)
There's also another minor  difference between our two implementations - you've created a new streamBuf abstraction which uses a pointer to the streamBuf on every invocation, whereas I've continued to use the read and serialize which operate on a statically defined pointer to the buffer used. Your approach is cleaner and has the advantage of being reentrant, whereas my approach means fewer changes to the existing code [although these changes are just search and replace changes] and my approach probably saves a few bytes of code. I'd say overall your approach is the better one here.
On a minor point, I don't really like the use of the terms get and put, so I'd prefer sbufWriteU8 to sbufPutU8 and sbufReadU8 to sbufGetU8 etc.
So how to proceed?
If you are happy with it, then I suggest I take your streamBuf code and convert my implementation to use it, and then I split out the MSP specific code. That would make the vast majority of our implementations identical (that is the two massive switch statements in what is currently mspProcessOutCommand and mspProcessInCommand). There would then be two other small .c files containing the MSP specific code and the serial specific code  - we can then discuss a common approach to those two files.
Does that sound like a good way to proceed?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211830547,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@martinbudden:
I agree with your analysis in second post, with little rewording:

command interpretation: command+params -> output
MSP framing (header, checksum)
data transfer

My goal was to separate part 1, it is in my view main part of protocol (and most complicated).
Input is command + size-limited input buffer; output is size-limited buffer. Using buffers that are 'large enough' simplifies lot of code (no size checking on output commands, possibility to post-check input, it is possible to add conditionally-compiled assertions)
Reply size and checksum can be computed in upper layer (MSP framing), code does not need to handle that.
I don't like MSP framing - the header contains useless info ($M>), synchronization is not guaranteed, checksum is poor. It's OK for backward-compatibility, but it is IMO bad idea to base new protocols on it.
Personally I would like to use some robust serial protocol that will allow multiplexing of MSP, blackbox and other protocols (with possibility of real-time tap into control loop). Probably something based on HDLC.
For I2C MSP framing does not make much sense - frame boundaries are handled by START/STOP or ACK/NAK, only output message length may need some work.
For wireless protocols (MSP over nfr24), framing will be protocol-specific too (cmd+frame data, chip will handle length and checksum)
So framing is specific to transfer method and not that reusable.

streamBuf is designed to as simple as possible. It's mostly used as uint8_t **, there is only possibility to check buffer space available for writing and remaining length for reading.
Performance will be comparable (possibly better for streambuf approach). Passing pointer is register is cheap and called function needs only single ld to get actual pointer. With static variable, variable address is stored relative to PC and another instruction is needed to get it into register.
Compiler should use inlining in both cases ...
Also with explicit pointer approach there is not need for 'active msp port', source and destination is passed in function arguments and framing code is fully isolated.

I'll look into switch-based state machine implementation. The overhead should be quite small (index check + tbb)

1-WIRE is problematic, in my implementation special handling will be necessary. It does not follow RPC call abstraction of other commands.
Ideally it should use multiple MSP commands (1-WIRE transceive) without stealing serial port, but thats probably unrealistic with third party software involved.
What should 1-WIRE on I2C do ?
Reset handling is problematic too - reset handler should be probably in main loop, shutting down system properly, independent of reset source (what if 2 msp ports are used?)

I'am not native speaker and have problem naming things properly. Refactoring put/get to write/read is easy.

mspProcessOutCommand, mspProcessInCommand are converted in my code, with minor fixes.
Direct registry access should be separated.

As for proceeding .. i'll finish my version a bit more to see if it see viable. Meantime we can discuss the approach a bit more ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211878980,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@ledvinap , some further comments
MSP framing , I agree I don't really like MSP framing either, for the reasons you state. Let's keep it together with serial then for the moment, since as you say it is specific to serial.
streamBuf - yes, I like this implementation.
1-WIRE and reset handling, agreed these are problematic. My 1-WIRE solution is not that good. Let's defer these until everything else is working.
mspProcessOutCommand  and mspProcessInCommand. I think these can have their dependency on mspPacket_t removed by changing
bool processInCommand(mspPacket_t *cmd)
and
bool processOutCommand(mspPacket_t *cmd, mspPacket_t *reply)

to
bool processInCommand(uint16_t cmd, const sbuf_t *src)
and
bool processOutCommand(uint16_t cmd, const sbuf_t *src, sbuf_t *dst)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211883809,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","It may be useful to add other fields to mspPacket_t in future.
mspPacket contains unpacked info from header  - only command and result (single-bit ok/error) now, but sequence number, additional flags etc may be added later.
Also it may make sense to reply with different command sometimes (but PRC-like property of current behavior is nice)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211923626,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?",The code does compile now ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211942101,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","BTW:
             text      data     bss     dec     hex filename
master:    113520      1060   12996  127576   1f258 ./obj/main/cleanflight_SPARKY.elf
new code:  113016      1060   12924  127000   1f018 ./obj/main/cleanflight_SPARKY.elf

The reduced BSS size is strange ... maybe there is some problem with the code  ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211947816,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@martinbudden:
using switch in serial receive processing generated reasonable code,
    ldrb    r3, [r4, #64]   @ zero_extendqisi2  @ MEM[base: data_142, offset: 64B], MEM[base: data_142, offset: 64B]
data_142, offset: 64B]
    mov r1, r0  @ c,
    cmp r3, #6  @ MEM[base: data_142, offset: 64B],
    bhi .L54    @
    tbb [pc, r3]    @ MEM[base: data_142, offset: 64B]
.L31:
    .byte   (.L30-.L31)/2
    .byte   (.L32-.L31)/2
    .byte   (.L33-.L31)/2
    .byte   (.L34-.L31)/2
    .byte   (.L35-.L31)/2
    .byte   (.L36-.L31)/2
    .byte   (.L37-.L31)/2
    .p2align 1
.L30:
    .loc 1 163 0
    cmp r0, #36 @ c,
    bne .L37    @,
    .loc 1 164 0
    movs    r3, #1  @ tmp225,
    b   .L69    @
.L32:
    .loc 1 170 0
    cmp r0, #77 @ c,
    ite ne
    movne   r3, #0  @ D.8462,
    moveq   r3, #2  @ D.8462,
    b   .L69    @
.L33:
    .loc 1 173 0
    cmp r0, #60 @ c,
    ite ne
    movne   r3, #0  @ D.8462,
    moveq   r3, #3  @ D.8462,
    b   .L69    @",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,10,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-211984688,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?",BTW: MSP_LED_STRIP_CONFIG returns 32*7 = 224 bytes of data .. .,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/martinbudden,11,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212023097,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","The buffer size bug must have been there for ages, I guess it's just luck that it hasn't caused a problem.
I guess next step is to get the test code working. I'm afraid it looks into the internals of the old MSP code, but it shouldn't be too hard to get it going.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212044082,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","There was no output buffer in old Msp code, output was directly into serial (and serial buffer was large enough)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212279263,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","""There was no output buffer in old Msp code, output was directly into serial (and serial buffer was large enough)"" - of course. And reusing serial buffer for output is an optimisation we can add back in later.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212355122,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@hydra, @martinbudden :
What to do about long MSP messages?
Most long messages may be returned by index (already used for SET counterpart, may be implemented for array (_ARR) configuration variables)
MSP_BOXNAMES will be only long message then ..
MSP_BOXNAMES may be up to 214 bytes long
MSP_SERVO_CONFIGURATIONS 112
MSP_SERVO_MIX_RULES 112
MSP_MODE_RANGES 80
MSP_ADJUSTMENT_RANGES 72
MSP_LED_COLORS 64
MSP_LED_STRIP_CONFIG 224",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,15,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212364827,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@martinbudden : Serial buffers were greatly enlarged to accommodate long  MSP messages (and all ports that can be used for MSP need large buffer).
Using serial buffer directly will need packet abstraction that is more complicated (pure stream abstraction won't allow calculating MSP packet length from data emitted), but it is not that hard.
Wasting some space for temporary buffer is much simpler.
Large messages will cause problem with port multiplexing - time needed to transmit them will be too large. Ideally al messages should take only reasonable part of gyro cycle - with 1MBit serial link budget is only 100 bytes (at 1kHz)  - it may be easier to fragment MSP messages in multiplexer.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/martinbudden,16,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212419443,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?",Returning long names by index seems a good plan to me. Can't you also return MSP_BOXNAMES by index as well?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,17,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212427895,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","Yes, it should be quite easy, and it will be consistent with array access (we may even index by permanent IDs)
But it will break backward compatibility of quite common command",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,18,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212536408,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","Well ... what if I use 256Bytes long buffer to support old MSP_BOXNAMES (and other long commands) for now. RAM is plentiful now.
I'll finish unittests and other dependent parts of code and will look into array commands.
MSP_BOXNAMES may be deprecated/alternative syntax used, there is no big pressure.
Personally I would limit messages to 64B. This is still too big for nrf24 (32B payload), but using shorter packets may cause too much problems (and too much overhead for flash access)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/martinbudden,19,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212546650,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","I'm very much in favour of the ""get it working"" and then ""get it working well"" approach to development - that is: get it working and then do the optimisations later. So I don't see a problem with using a 256 byte buffer for now - we can think how to optimise that later.
Note also that you seem to have started your work before the merger of PR #2016 , the one that changed PID_LUXFLOAT to use the P8[], I8[], D8[] PIDs. So see https://github.com/cleanflight/cleanflight/pull/2016/files#diff-b2b29e72f4b7263e160784dff0c923d7R854 and https://github.com/cleanflight/cleanflight/pull/2016/files#diff-b2b29e72f4b7263e160784dff0c923d7R1275",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212768210,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","agreed with get it working, then get it working better approach.
prefer not to use additional buffers if possible.  there is a requirement to be able to use MSP on THREE serial ports. (e.g. USB VCP/UART1/UART2).
probably a good idea to rebase this against master now that the updated blheli/sk support is merged.
MSP_BOXNAMES is not easily changable, it's used by OSDs etc.
@ledvinap can you create a branch on the cleanflight repo, push these changes to it and then @martinbudden will be able to contribute to it.
I consider this PR very valuable, but not as valuable as the EXTI2 PR which is where i'd prefer effort to be spent right now if possible.
However, if you're both close to completing this soon then please continue and let's just get it done before the code goes stale.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,21,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212781405,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@hydra: Only one buffer is shared for all MSP instances. But there must be enough space in serial buffer to store whole message without blocking.
It may be possible to allocate output buffer per mspPort (2 at the moment) and considerably reduce size of all serial buffers. The memory footprint will stay about the same.
I'll fix PID_LUXFLOAT and separate changes into separate commits. Unittests need some work too ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,22,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212787793,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","@hydra : what about BOXNAMES/pertmanentBoxIDs order? Is it important or is it enough to return them correctly?
(It would be much easier to handle available boxes as bitmask internally. But they will be then sent ordered by boxId_e)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,23,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212846181,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","Unittest are fixed now, but need some work ...
I don't understand old MSP unittest code command reflection (resend received data as test). Only payload is resent now.
unittests should be split into

serial_msp framing - check that packet bytestream is parsed correctly, check that reply is correctly encoded

msp tests, with simple buffer-in, buffer-out",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,24,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212847538,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","BTW: unittest makefile is terrible. Is there some automated tool to modify it?
Or can it be fixed? Autodependencies, automatic rules etc will make it human-editable ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,25,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-212972345,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","Utittests are fixed now.
msp_unittest was split into framing part (serial_msp_unittest) and command processing (msp_unittest)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,26,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-213017141,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","Changes are split into meaningful commits.
Can you test/review it briefly ? I'll create new CF branch it everything looks good.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,27,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-213030452,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?",4-WAY IF is missing / removed by this. I'll look into it tomorrow.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/hydra,28,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-213056547,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?",looking now,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/hydra,29,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-213063279,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?",all looking very good @ledvinap please create branch.  let me know if you have any issues doing so.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/martinbudden,30,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-213120417,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","Yes, it's all looking good to me too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,31,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-213722617,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","Fixed, improved unittests.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/ledvinap,32,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-213725215,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?",#2075,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2062,2016-04-18T16:29:49Z,2016-05-06T18:18:04Z,2016-05-06T18:18:04Z,CLOSED,False,2653,2306,24,https://github.com/ledvinap,Msp mem interface,12,[],https://github.com/cleanflight/cleanflight/pull/2062,https://github.com/hydra,33,https://github.com/cleanflight/cleanflight/pull/2062#issuecomment-217519158,"Sketch of MSP improvement.
It is unfinished (and does not compile now), I'll force-push changes.
I would appreciate any comments.
@hydra : Is there a chance to get this merged eventually?","ok, closing this PR since it is replaced by #2075 now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2066,2016-04-20T06:24:41Z,2016-04-21T06:44:21Z,2016-04-21T08:03:57Z,MERGED,True,22,33,9,https://github.com/martinbudden,Minor cleanup of config.c to use fewer target board build flags,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2066,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2066,"Added DEFAULT_RX_FEATURE to various target.h files to avoid using target board build flags
Moved defaultRateProfileIndex bounds check into rate_profile.c
Removed unused getCurrentMinthrottle function from config.c
Removed unused declarations of copyCurrentProfileToProfileSlot and getCurrentMinthrottle from config.h
Various other variable definition cleanups in config.c","Added DEFAULT_RX_FEATURE to various target.h files to avoid using target board build flags
Moved defaultRateProfileIndex bounds check into rate_profile.c
Removed unused getCurrentMinthrottle function from config.c
Removed unused declarations of copyCurrentProfileToProfileSlot and getCurrentMinthrottle from config.h
Various other variable definition cleanups in config.c",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2066,2016-04-20T06:24:41Z,2016-04-21T06:44:21Z,2016-04-21T08:03:57Z,MERGED,True,22,33,9,https://github.com/martinbudden,Minor cleanup of config.c to use fewer target board build flags,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2066,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2066#issuecomment-212769235,"Added DEFAULT_RX_FEATURE to various target.h files to avoid using target board build flags
Moved defaultRateProfileIndex bounds check into rate_profile.c
Removed unused getCurrentMinthrottle function from config.c
Removed unused declarations of copyCurrentProfileToProfileSlot and getCurrentMinthrottle from config.h
Various other variable definition cleanups in config.c",great!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2068,2016-04-20T16:39:58Z,2016-04-20T16:45:35Z,2016-04-20T16:45:35Z,CLOSED,False,0,0,0,https://github.com/raul-ortega,Merge pull request #1 from cleanflight/master,1,[],https://github.com/cleanflight/cleanflight/pull/2068,https://github.com/raul-ortega,1,https://github.com/cleanflight/cleanflight/pull/2068,"This is a mistake, plese delete this pull request","This is a mistake, plese delete this pull request",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2069,2016-04-20T16:48:18Z,2016-04-20T16:55:28Z,2016-04-20T16:55:28Z,CLOSED,False,0,0,0,https://github.com/raul-ortega,Merge pull request #1 from cleanflight/master,1,[],https://github.com/cleanflight/cleanflight/pull/2069,https://github.com/raul-ortega,1,https://github.com/cleanflight/cleanflight/pull/2069,Update from original,Update from original,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2070,2016-04-21T12:45:35Z,2016-04-22T23:37:28Z,2016-04-23T06:34:52Z,MERGED,True,588,7,6,https://github.com/titanyum,Adding IRCFUSION Target for Vortex 250 Pro,3,[],https://github.com/cleanflight/cleanflight/pull/2070,https://github.com/titanyum,1,https://github.com/cleanflight/cleanflight/pull/2070,"Hi Dominic,
Can you pull the target for the vortex 250.
Thanks in advance!","Hi Dominic,
Can you pull the target for the vortex 250.
Thanks in advance!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2070,2016-04-21T12:45:35Z,2016-04-22T23:37:28Z,2016-04-23T06:34:52Z,MERGED,True,588,7,6,https://github.com/titanyum,Adding IRCFUSION Target for Vortex 250 Pro,3,[],https://github.com/cleanflight/cleanflight/pull/2070,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2070#issuecomment-213064692,"Hi Dominic,
Can you pull the target for the vortex 250.
Thanks in advance!","aha!  I was just thinking today ""I wonder where that PR is?""  😄
Will review ASAP.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2070,2016-04-21T12:45:35Z,2016-04-22T23:37:28Z,2016-04-23T06:34:52Z,MERGED,True,588,7,6,https://github.com/titanyum,Adding IRCFUSION Target for Vortex 250 Pro,3,[],https://github.com/cleanflight/cleanflight/pull/2070,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2070#issuecomment-213321622,"Hi Dominic,
Can you pull the target for the vortex 250.
Thanks in advance!",one more change required: inclusion of the target to the build scripts.  see travis.yml and fake_travis_build.sh,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2070,2016-04-21T12:45:35Z,2016-04-22T23:37:28Z,2016-04-23T06:34:52Z,MERGED,True,588,7,6,https://github.com/titanyum,Adding IRCFUSION Target for Vortex 250 Pro,3,[],https://github.com/cleanflight/cleanflight/pull/2070,https://github.com/titanyum,4,https://github.com/cleanflight/cleanflight/pull/2070#issuecomment-213334861,"Hi Dominic,
Can you pull the target for the vortex 250.
Thanks in advance!","Done.
On Fri, Apr 22, 2016 at 10:22 AM Dominic Clifton notifications@github.com
wrote:

one more change required: inclusion of the target to the build scripts.
see travis.yml and fake_travis_build.sh
—
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
#2070 (comment)

Meilleures salutations /Herzliche Gruesse/Best regards/最好的祝福送给你

www.lemantechlabs.com
Yann Oeffner",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2070,2016-04-21T12:45:35Z,2016-04-22T23:37:28Z,2016-04-23T06:34:52Z,MERGED,True,588,7,6,https://github.com/titanyum,Adding IRCFUSION Target for Vortex 250 Pro,3,[],https://github.com/cleanflight/cleanflight/pull/2070,https://github.com/titanyum,5,https://github.com/cleanflight/cleanflight/pull/2070#issuecomment-213675208,"Hi Dominic,
Can you pull the target for the vortex 250.
Thanks in advance!","Thank you Dominic. Have a good weekend
On Sat, 23 Apr 2016 at 01:37, Dominic Clifton notifications@github.com
wrote:

Merged #2070 #2070.
—
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
#2070 (comment)

Meilleures salutations /Herzliche Gruesse/Best regards/最好的祝福送给你

www.lemantechlabs.com
Yann Oeffner",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2075,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-213729682,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","4way code is so ugly.
Is it kept in sync with some project? Or is it OK to clean it up first before merging it with MSP ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-213734710,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@ledvinap , I'd just merge it in as it is. Leave the cleanup to a separate PR. It's always possible to introduce subtle bugs when cleaning up code, and I'd like to see this MSP code merged into master as soon as possible.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-213735007,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","I've just noticed that streambuf.c, streambuf.h and msp.h don't have the ""This file is part of Cleanflight...."" comment at the top of the file.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-213736436,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","I'll add copyright notices
4way interface still needs work. Setting flag to enter 4way (together with serialPort to use) and handling it in serial code is probably cleanest option ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/jflyper,6,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-214764645,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","The RAM space is much more scarce in MCUs used for traditional OSDs than STM32s.
For example, ATmega328 used in extremely popular MinimOSD and variants only have 2KB RAM.
Under such environment, the BOXNAMES is really a problem, because the max list grows very quickly and endlessly as we keep adding new fancy modes and cool switches. The BOXIDS is similar, but it grows only one byte/mode.
We should invent a new message, say, something like BOXDEF <bitpos> <name string>, so we can tell receivers about literal names of bits in the STATUS in a one-by-one fashion with bounded message length, and stop adding things to BOXNAMES.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-214814438,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@jflyper : command returning one boxname per query may help a bit - OSD may request only displayed boxnames (28 boxes probably won't fit the screen anyway) or request boxnames on the fly.
And it will solve long boxnames reply.
Using permanentBoxId to map from bit to name is not that wasteful - you can save permanentBoxId for each bit (32 bytes with current protocol).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/jflyper,8,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-214825448,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@ledvinap : Just a comment.
I believe the BOXNAMES is intended for receivers having no prior knowledge of modes and switches, although some OSD implementations (MWOSD at least) do compare received names against known names to map literal strings to fancy icons. With BOXIDS, the receiver is expected to have full knowledge of what each ID mean. I can think of a possible use case of all raw strings given by BOXNAMES: a page filled with all names and their states for ... say, pre-flight check? :)
P.S.
While watching the fantastic work on MSP separation, I did some clean up job on MWOSD code to make some room for I2C receive buffer; waiting for MSP messages over I2C now :)
Some random thoughts:

Interrupt (requires a pin), periodic polling, multi-master?
Fragmentation protocol? Maximum fragment size?
I2C bus scheduling (to avoid interfering gyro read ... ah, no multi-master then)?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-214997144,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@jflyper : As long as peramanentIds are unique, OSD may contain ROM table of all/common names to save RAM. Unknown names may be fetched from FC. Returning BOXNAMES on demand will remove longest MSP message. Command to get permanentId by bit index may help with orthogonality, but is not necessary until more than 32bits for modes is implemented.
MSP over I2C - polling from CF (with optional interrupt) is IMO easiest to implement and most robust.
Quick idea:
Use FIFO for command parameters and reply (with shared memory space to save RAM).
`CMD FIFO-LEN FIFO-REG'
Master will poll command register until non-idle command is read, then fetch LEN (or all) bytes from FIFO, process it, write reply to FIFO (length can be implicit) and confirm command by writing processing result into CMD register (or use different register address).
FIFO access may be split into multiple  I2C transactions, it's on master (CF) to handle bus arbitration.
If CF-initiated commands are necessary (MSP telemetry in old code), then just split FIFO memory (or implement command for FIFO arbitration), write params to FIFO and invoke command by writing command register. Possible reply may be handled as normal polled command.
Open new PR if you are interested implementing something like this ..  we can create protocol specification, implementation in code should be quite easy.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-215008277,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@ledvinap and @martinbudden fyi, I'm travelling for few days so won't be able to work on this for a few days.  Please continue to work together to complete this cleanup so we can merge it into master ASAP.  When it's ready for merging please add a comment on here and I'll keep an eye out for it.
To be honest with the quality work you're both doing recently I'd be happy to let you merge this yourselves when you both think it's ready.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/martinbudden,11,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-215369525,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@ledvinap , following @hydra 's comments, do you think this is ready for merge?
I've been using it with the Cleanflight configurator with no problems. I haven't tried it with an OSD though.
It's taking a step back to go forward, in the sense that the 1-wire stuff is not in there yet, but that's not far from finished.
I'd like to see this merged and then complete the 1-wire stuff afterwards. What do you think?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-215382023,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@martinbudden : 4way-if is (almost?) ready, it would be easier to merge it first and then adapt msp before merging ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-215426511,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@ledvinap , whichever way you think is easier. I just wanted to indicate that I think that this is ready to merge, but by all means finish the 4way stuff first.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-216701075,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet",Is this ready for merging now?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/martinbudden,15,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-216753296,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@hydra, as far as I am concerned, this is good to go. @ledvinap can you confirm?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,16,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-216820357,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","Currently this PR will disable 4-way interface.
Can we merge #2090 first? I can create minimal fix for current version if absolutely necessary ..
Or is it OK to live without 4way until it is fixed?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/martinbudden,17,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-216823597,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@ledvinap , @hydra , I assumed #2090 would be merged in first, since that is ready to go as well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,18,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-217456045,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","4way interface is working now.
Ready to merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/hydra,19,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-217519331,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@ledvinap awesome, i will give this a whirl tonight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/martinbudden,20,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-217528684,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","Yes, @ledvinap , this is a really excellent piece of work.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,21,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-217532412,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet",Thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-217670008,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet",needs a merge of master due to merge of #1668,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-217670091,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","I didn't have the chance to test this yet, I'm trying to do a few quick-wins as per #2103 (prepare for 1.13.0)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/martinbudden,24,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-217731890,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet","@ledvinap , can you rebase this - there are now conflicts.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/ledvinap,25,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-217736141,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet",Done,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2075,2016-04-23T11:36:11Z,2016-05-10T09:59:19Z,2016-10-31T18:28:13Z,MERGED,True,2654,2307,24,https://github.com/ledvinap,Msp mem interface,13,[],https://github.com/cleanflight/cleanflight/pull/2075,https://github.com/hydra,26,https://github.com/cleanflight/cleanflight/pull/2075#issuecomment-218112667,"Separate MSP command processing from serial port and serial framing

add streamBuf abstraction
use mspPacket_t to handle packet processing
serial_msp.c code handles MSP framing on input and output
activeBoxIds is handled as bitmask, permanent IDs and boxNames are returned in boxId_e order

4WAY-IF MSP entry is not implemented yet",done and done!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2076,2016-04-23T13:54:37Z,2016-05-06T18:02:12Z,2016-05-06T19:44:25Z,MERGED,True,25,26,2,https://github.com/martinbudden,Changed TASK_ACCEL desiredPeriod to 1ms.,3,"['BUG', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2076,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2076,"Fixed issue #1946 by setting TASK_ACCEL desiredPeriod to 1000 (1ms).
Also added comments to other desired periods and changed TASK_SONAR desired period to 70ms to match sonar trigger interval.","Fixed issue #1946 by setting TASK_ACCEL desiredPeriod to 1000 (1ms).
Also added comments to other desired periods and changed TASK_SONAR desired period to 70ms to match sonar trigger interval.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2076,2016-04-23T13:54:37Z,2016-05-06T18:02:12Z,2016-05-06T19:44:25Z,MERGED,True,25,26,2,https://github.com/martinbudden,Changed TASK_ACCEL desiredPeriod to 1ms.,3,"['BUG', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2076,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2076#issuecomment-217516776,"Fixed issue #1946 by setting TASK_ACCEL desiredPeriod to 1000 (1ms).
Also added comments to other desired periods and changed TASK_SONAR desired period to 70ms to match sonar trigger interval.","@martinbudden thanks for the update, @ledvinap thanks for review.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2077,2016-04-23T16:05:36Z,2016-05-07T20:35:42Z,2016-05-08T12:01:26Z,MERGED,True,50,85,5,https://github.com/martinbudden,Cleanup - further tidying of config.c,4,[],https://github.com/cleanflight/cleanflight/pull/2077,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2077,"Removed unused #includes.
Grouped #ifdef code together to avoid repeated tests of same condition.
Made some functions static.
Cleaned up some related #ifdef USE_SERVOS function declaration and definition madness.","Removed unused #includes.
Grouped #ifdef code together to avoid repeated tests of same condition.
Made some functions static.
Cleaned up some related #ifdef USE_SERVOS function declaration and definition madness.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2077,2016-04-23T16:05:36Z,2016-05-07T20:35:42Z,2016-05-08T12:01:26Z,MERGED,True,50,85,5,https://github.com/martinbudden,Cleanup - further tidying of config.c,4,[],https://github.com/cleanflight/cleanflight/pull/2077,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2077#issuecomment-217667280,"Removed unused #includes.
Grouped #ifdef code together to avoid repeated tests of same condition.
Made some functions static.
Cleaned up some related #ifdef USE_SERVOS function declaration and definition madness.","I resolved the conflicts and merged.
I also added some code in a57c356 so that F3 targets still have telemetry inversion set by default but only via initial configuration and not when validating/fixing the config as @ledvinap noted.  I think that was the original intention anyway, just the code somehow ended up in the wrong place.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2081,2016-04-25T06:35:25Z,2016-05-06T18:03:29Z,2016-05-07T14:35:39Z,MERGED,True,4,0,1,https://github.com/MJ666,Fix G-Tune,1,[],https://github.com/cleanflight/cleanflight/pull/2081,https://github.com/MJ666,1,https://github.com/cleanflight/cleanflight/pull/2081,"Proposed G-Tune fix. Not tested yet.
#2074
#2020","Proposed G-Tune fix. Not tested yet.
#2074
#2020",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2081,2016-04-25T06:35:25Z,2016-05-06T18:03:29Z,2016-05-07T14:35:39Z,MERGED,True,4,0,1,https://github.com/MJ666,Fix G-Tune,1,[],https://github.com/cleanflight/cleanflight/pull/2081,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2081#issuecomment-214194989,"Proposed G-Tune fix. Not tested yet.
#2074
#2020","@MJ666 , looks good to me.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2083,2016-04-25T09:31:31Z,2016-08-19T04:46:52Z,2016-08-19T04:46:52Z,CLOSED,False,319,2,6,https://github.com/tsunyi,Add barometer fbm320,4,[],https://github.com/cleanflight/cleanflight/pull/2083,https://github.com/tsunyi,1,https://github.com/cleanflight/cleanflight/pull/2083,"This is my attempt to add support for barometer FBM320.
It is as precision as MS5611, but less expensive.
I have tested on CC3D, and it performed well.","This is my attempt to add support for barometer FBM320.
It is as precision as MS5611, but less expensive.
I have tested on CC3D, and it performed well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2084,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214488805,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","Question: why do you have
# define RX_LED_OFF   do {} while(0)
etc

rather than
# define RX_LED_OFF   {}",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214501572,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","try
if(1) RX_LED_ON;
else RX_LED_OFF;

empty while cycle caused error if semicolon is missing, forcing statement-like use of macro.
Also there there is/was some problem with empty statement written as ;, probably warning in arcane compilers.
in gcc ({}) will be even better (it is expression, not statement), but that's non-standard.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214504073,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t",It's horrible though!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214504094,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","@martinbudden : maybe static inline void nop(void) {} in 'utils/common.h' and #define RX_LED_ON nop() ,may be a bit better",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214504898,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t",Or #define NOP <one of variants above> in common header file,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214505759,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","Well, they are all a bit horrible, might as well just leave it as it is.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214506846,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t",Empty macro may be dangerous (in some quite obscure context). I prefer catching as much errors as possible during compilation ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214508368,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","Another variant is to use functions instead of macros (static inline in header files).
But there is soo much to improve in 4-way code ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214511700,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","Yes, this is all a distraction from the main task at hand. Let's just get this PR in and do some proper cleanup later. (The LED1_ON etc functions in light_led.h all suffer the same problem anyway.)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,11,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214703112,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","Cleanup mostly done. Some better war to handle multiple interfaces would be nice (a lot of switch statements), bug gcc generates reasonable code.
Still needs testing",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-214716231,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","There are few areas where original code is confusing. Can someone help?

cmd_InterfaceTestAlive returns ACK_OK when interface is not connected. Is that intentional?
cmd_DeviceInitFlash - (possibly invalid) deviceInfo is returned on error. Is that necessary?
address in header is changed when calling cmd_DevicePageErase. Is is just optimization, or something depends on it?
in StkRcvPacket packet with length of 254 is refused. This is probably bug, but hard to trigger",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2084,2016-04-25T15:55:33Z,2016-04-27T17:43:57Z,2016-04-27T17:45:38Z,MERGED,True,805,985,7,https://github.com/ledvinap,Cleanup 4way interface,4,[],https://github.com/cleanflight/cleanflight/pull/2084,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/2084#issuecomment-215168038,"Here is my attempt to cleanup 4WAY-IF.. It is untested yet (but it should not change anything important), I'll do some test soon.
All comments are welcome
Cleaning 4-way interface sources.
Source formatting changed to CleanFlight style
Removed AVR idioms where possible
Remove some unnecessary optimization
Use serialPort_t instead of mspPort_t","Atmel interface with SimonSK bootloader is working now.
Fixed buffer overflow bug (2 bytes of stack after packet buffer may be overwritten in master code)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2085,2016-04-26T18:31:19Z,2016-05-10T12:01:12Z,2016-05-10T12:01:25Z,MERGED,True,1,2,1,https://github.com/tigert,irc channel: don't ask and leave! :-),1,[],https://github.com/cleanflight/cleanflight/pull/2085,https://github.com/tigert,1,https://github.com/cleanflight/cleanflight/pull/2085,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2087,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-214917975,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.",I'm really happy how Pavel Holoborodko's formula works. D-term is now totally noise-free and can be used without any filtering (and essentially without delay).,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215038268,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Yes, this may be great improvement.
I would prefer to implement differentiation as generic filter. Both old averaging code and Pavels are FIR filters, so why not implement as one. Computing requirements are quite low (at least for single-digit tap count) and it will greatly simplify testing new ideas (Sawitsky-Golay is one alternative).
Biquad and PT1 is IIR, but we may optionally include one biquad stage (with small overhead for PT1 - set unused coefficients to 1).
Making the code generic and mathematically correct will IMO help a lot in long term.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215043770,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","BTW: old averaging filter ( [1/3 0 0 -1/3] ) has notch in transfer frequency at 0.33 Fs (330Hz). This is close to common motor frequency, so under right conditions it may work better than smooth Holobrodko filters. Savitzky–Golay filter may have similar advantage (trading smoothness for stopband performance)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,5,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215062150,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I will have a look and do some testing with it. It is a nice research project.
I would also rather see this wrapped in a function with other filters than in the pid controller itself, but lets test it first.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215069105,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","OK, I've updated this to use a FIR filter for the differentiation. The filter implementation is a bit ""quick and dirty"" and could certainly do with tidying up, but the overall principle is demonstrated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215132738,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Updated as per suggestions.
@borisbstyle , the only reason rewrite isn't configurable is that I haven't done it yet. I generally find the best coding approach is ""deep then wide"" - i.e. go deeply into a particular instance of a problem so that the problem is well understood and then generalise to other instances. In this case that means getting luxfloat fully working and then pulling the code over into rewrite (which should be fairly simple).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,8,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215149635,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden
Yes of course. I will test this soon and report back what I see compared to other approaches.
Also I would propose to ditch the MW23 as the defaults don't match it. Only thing you lose is the multiwii ""super expo"" implementation. I or even you can simply add a PR where super expo can be a mode in rewrite and luxfloat.
There are no further differences in MW23 pid controller.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,9,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215183126,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@borisbstyle , I've been looking into the ""super expo"" implementation. One thing I'd like to do alongside that is improve the anti-windup protection. @digitalentity has a good implementation of anti-windup in iNav and I was planning on moving that over before adding in the ""super expo"" stuff.
I look forward to hearing the results of your flight testing.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,10,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215226374,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden
I changed mine too with something simple but solid. Check my latest commits
Super expo needs to ignore Iterm at certain point as the error is being manipulated otherwise it will wind up anyways.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/digitalentity,11,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215265391,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden, @borisbstyle
I'm not an acro pilot, but N=5 seems like an optimal choice. I don't feel a difference when changing from 5 to 7 or 8, but I feel noticable difference when changing from 3 to 5.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,12,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215354512,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I'm curious about phase shift when n=5, how much at what frequencies?  e.g. at 50, 100, 150Hz?
Also the 'low pass' effect - Pavel's approach seems to be an efficient way of performing the equivalent of filtering then differentiating.  Is there some kind of equivalent filtering frequency for the n=5 solution?  It seems that functionally dterm should be responsive and without meaningful phase shift up to around 100Hz.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215381324,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.",@ctzsnooze : Here is response and delay of all new fiters:,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,14,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215386412,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Thank you!  Wow! n=5 does seem ideal for us.
By100Hz there is very littlephase shift, maybe only 10-15 degrees, nearly perfect linear reproduction of dTerm to that point, and group delay of no consequence. Awesome!
After 100Hz maybe phase shift becomes an issue - at 200Hz maybe 70 degrees.  And inherent dTerm gain continues up to about 250Hz, rather high.
On that basis would it be fair to say that with this code, the incoming gyro data should be LPF filtered at 80 - 100Hz, in practice, to reduce excessive dTerm gain on motor noise frequencies > 160-300, and to keep to keep derived Pterm and Dterm in phase?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/digitalentity,15,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215387301,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I did empirical tests when choosing the length in INAV's PID controller. I also concluded N=5 to be optimal. Lower doesn't have enough noise suppression, higher gives significant delay in D-term that was causing oscillations.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,16,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215412756,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze : It's not important where you filter the data, all filter will introduce delay and phase shift.
Using common filter has some performance advantage, but otherwise the filter may be merged into differentiator.
Here is Savitzky-Golay filter added for comparison (I can synthesize them easily - http://www.mathworks.com/matlabcentral/fileexchange/30299-savitzky-golay-smooth-differentiation-filters-and-filter-application/content/savitzkyGolay.m) , with zero group delay (at DC) and 2 sample delay (-2 variant). The cost of zero group delay at DC considerable (effect on Holoborodko's differentiators will be similar. It is equivalent to cascade of filter (with positive DC delay) and (~ high pass) filter with negative group delay). No free lunch here ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,17,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215456261,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","The new proposal looks much better!  :-)
Out of curiosity how would comparable graphs of our current delta calculation followed by say current IIR dTerm filtering at say 100Hz?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,18,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215504968,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I'm trying to translate the 'group delay in samples' concept to 'functional delay in seconds'... could you assist with that?
I guess this depends on how many loops are needed to get enough samples to compute the output?  If 5 samples are needed, and group delay is close to 1 sample at 100Hz, does that sort of mean the 'functional' time delay can be through of as being around 5ms - or to ask differently, how would the group delay numbers above compare to a simple classical RC filter time constant?
Also... I'm curious about what happens to the frequency response / phase shift if loop time changes?  Current delta calculations are loop time (well, target loop time) compensated.  Given the variability in user's set loop time, we need something either loop time compensated or loop time independent.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,19,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215517297,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze , I think talking about delta calculations being loop time compensated is an incorrect way of looking at things and is probably a hangover form MultiiWii which just did it incorrectly. The DTerm is a differential and so by definition is loop time independent. The basic computations this: we measure the change in gyro rate (dR) by the calculation:
dR = gyroRate - lastGyroRate

then we divide by dT to get the derivative dR/dT
Of course the overall PID (i.e. PTerm + ITerm + DTerm) is not normalised for the loop time, so changing the loop time may require retuning, and I think there is a case for normalising the overall PID - something for a later day though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,20,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215519114,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","OK that's true - sorry!  Yes, there's no 'delay' in our current dTerm calculation.  However we currently typically use dTerm filtering - an IIR - to ameliorate high frequency noise amplitude gain of the current dTerm calculation.  This filter changes frequency response and introduces phase delay.  I could be wrong.  I was curious to see graphs of how the current arrangement - set to a typical or comparable value - compares to the newer dTerm calculation.
But then I started thinking about the influence of loop time on the existing filter vs the newer proposal for dTerm (which functionally includes a filter).  Like how does changing the loop time influence actual cutoff frequencies, delay and/or phase shift.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,21,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215523154,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ledvinap , Pavel Holoborodko provided two sets of filter coefficients:

""Precise on 1, x"", that is gives exact differentials for constant and linear functions.
""Precise on 1, x, x^2"", that is gives exact differentials for constant, linear and quadratic functions

I, somewhat arbitrarily, used set two. The coefficients for set one are:
1/4  (h[0] = 1, h[-1] = 1, h[-2] =-1, h[-3] =-1)
1/8  (h[0] = 1, h[-1] = 2, h[-2] = 0, h[-3] =-2, h[-4] =-1)
1/16 (h[0] = 1, h[-1] = 3, h[-2] = 2, h[-3] =-2, h[-4] =-3, h[-5] =-1)
1/32 (h[0] = 1, h[-1] = 4, h[-2] = 5, h[-3] = 0, h[-4] =-5, h[-5] =-4, h[-6] =-1)
1/64 (h[0] = 1, h[-1] = 5, h[-2] = 9, h[-3] = 5, h[-4] =-5, h[-5] =-9, h[-6] =-5, h[-7] =-1)

Can you do your graphical magic with these coefficients to see how they compare with the current ones?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,22,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215528417,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze , my apologies if I was over-pedantic. Continuing in that vein, there actually is a delay in the current raw DTerm calculation, because we calculate dR = gyroRate - lastGyroRate we are actually approximating the derivative at a time dT/2 in the past, so there is a delay of half a loop time. Note that the n=2 case is equivalent to simple differentiation and you can see this delay of 0.5 in @ledvinap 's graphs.
I'm not sure how much delay the biquad filter currently used introduces, but it is simple to work out how much delay the moving average filter introduces - it's half the length of the moving average, so an 8 point moving average will introduce a delay of 4*dT. Note that the filter with N=3 is equivalent to a simple 2 point moving average and introduces a delay of 1, again as seen in @ledvinap 's graphs.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,23,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215531562,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","It's strange that for n=3 the delay is fixed regardless of frequency but for n=5 it varies?
Betaflight currently uses a simple IIR, not a biquad filter, for filtering calculated d_term.  That's why I was curious to see graphs of the current vs proposed solution, and to know how loop time affected both.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,24,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215531582,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze : All graphs are based on 1kHz sampling frequency; 1 sample is 1ms for group delay.
For symmetrical FIR filter group delay is constant and is directly delay of filter.
Zero group delay at DC is interesting, because for linear slope there will be no delay (except where changing direction).
You should try playing with Octave (or Matlab) a bit ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,25,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215532924,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Ledvinap, it's true that I can 'play' with octave, but that's about my limit - you really know how to use it much better than I do!  :-)
So if we ran the proposed filter at 8kHz, sounds like the group delay would become much less in absolute time - but would the 'filtering' effect change also?  That's very important.  Intuitively, the rolloff point would shift to 8 times higher frequencies...  i.e. the peak on n=5 might shift up to 1600Hz or so, which means the the filtering effect wouldn't be so helpful to us unless the filter was calculated every 8th loop or something like that.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,26,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215546086,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze : for n=3 the filter is antisymetrical, so tit has constant delay (half the filter length). filters starting with n=5 have zero group delay at DC
 f        = struct (""name"", ""n=2"", ""a"", 1, ""b"", [ 1.0,   -1.0]');
%f(end+1) = struct (""name"", ""n=3"", ""a"", 1, ""b"", [ 1.0/2,  0.0,   -1.0/2]);
%f(end+1) = struct (""name"", ""n=4"", ""a"", 1, ""b"", [ 1.0/4,  1.0/4, -1.0/4, -1.0/4]);
 f(end+1) = struct (""name"", ""n=5"", ""a"", 1, ""b"", [ 5.0/8,  1.0/4, -1.0,   -1.0/4,  3.0/8]');
%f(end+1) = struct (""name"", ""n=6"", ""a"", 1, ""b"", [ 3.0/8,  1.0/2, -1.0/2, -3.0/4,  1.0/8,  1.0/4]);
%f(end+1) = struct (""name"", ""n=7"", ""a"", 1, ""b"", [ 7.0/32, 1.0/2, -1.0/32,-3.0/4,-11.0/32, 1.0/4,  5.0/32]);
 f(end+1) = struct (""name"", ""n=8"", ""a"", 1, ""b"", [ 1.0/8,  13.0/32,  1.0/4, -15.0/32, -5.0/8, -1.0/32,  1.0/4, 3.0/32]');",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,27,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215551278,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","here is 2nd order Butterworth filter (biquad code probaly uses Butterworth coefs) + differentiation (subtract previous sample).
100Hz second order IIR delay is ~2-3 samples, 0.5 sample delay is added by difference",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,28,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215554069,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden :
(ordered as in yout post)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,29,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215555300,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ledvinap : those graphs are awesome!  :-)
So the current differentiation code + IIR at 100Hz provides much better 'noise' filtering (1/2 the dTerm amplitude at 100Hz and 1/8th the dTerm amplitude at 200Hz), but significantly more delay and therefore way more phase shift.
I'm confused then as to why the dTerm traces with the new differentiator are being reported as being so smooth. Could it simply be that by keeping dTerm in phase up to 100Hz, it is more effectively suppressing resonance... from your graphs, it does not appear to be due to simple gain reduction or 'filtering' inherent in the new differentiator :-)
PS - equally important, what is the effect of loop time on the differentiator, e.g. 8kHz vs 1kHz?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,30,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215555763,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Here is the code: https://gist.github.com/ledvinap/ebdf43cbc50f063878d0b2e35255f686
Sorry, it's ugly, Octave scripting is not my cup of tea ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,31,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215565841,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Well, all these graphs do seem to indicate as @ledvinap says, there is no free lunch. Each approach makes different trade-offs between filtering and delay.
@ledvinap , @ctzsnooze , do you have any opinions as to which is the best trade-off, or what should be the default?
Currently the code supports noise-robust differentiation, PT1 filter, and a moving average filter. Questions:

What default coefficients should I use for the noise-robust differentiation? I'm inclined to use the original N=5 coefficients.
Should we also turn on PT1 filtering by default, and if so what dterm_lpf_hz should be the default?
I'm inclined to drop the moving average filter - does everyone agree?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,32,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215565956,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze : My understanding on Control theory (and mathematical background) is quite poor to draw conclusions ..
Sampling frequency should not be too important. Filters has to be modified to get correct high-frequency cutoff (possibly increasing filter length). Performance will be similar ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/digitalentity,33,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215573755,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Also please remember that we have an lpf on gyro data, so the input of
differentiator is augmented at high frequencies.
N=5 differentiator + BiQuad filter at 100Hz our more sounds like an optimal
choice to me.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,34,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215574516,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@digitalentity - your mean ""input of differentiator is reduced at high frequencies"" ? (not augmented)?
@ledvinap - sorry to ask again for your graphing expertise, but would N=5 differentiator + BiQuad filter at 100Hz look better than N=5 differentiator + IIR filter at 100Hz?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/digitalentity,35,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215574710,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Sorry, not BiQuad, pt1 filter",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,36,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215574754,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@digitalentity , you say ""we have an lpf on gyro data, so the input of differentiator is augmented at high frequencies."" Don't you mean attenuated? [augmented = increased, attenuated = decreased]",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/digitalentity,37,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215574981,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Yes, ""reduced"" is what I ment. Didn't have my morning coffee yet 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,38,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215575889,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","But @digitalentity - theoretically - should we expect a suitable BiQuad at 100Hz do better than an IIR at 100Hz for the purpose of attenuating higher frequencies in the differentiator output - which would have the least phase shift for comparable cut?  Boris has tried both on dTerm output, I don't think it was entirely obvious if there was a big difference.  Currently a BiQuad is currently used gyro, an IIR on dTerm.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,39,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215576734,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze , @borisbstyle said earlier in this thread: ""IMO biquad for dterm can fully be removed. It is too much and it easily puts D and P out of phase. pt1 is a 1 point filter which is good enough in case when filter wanted""",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,40,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215582013,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I am not actually certain which of the two - biquad vs pt1/IIR - is better from a phase perspective.
Boris has tried both biquad and IIR on dTerm output, and went back to IIR.  I am aware of his comment above, we discussed this privately, but I don't know for sure if there was clear evidence of better or worse phase shift.  From @ledvinap's graphs, IIR looks so bad I am now wondering if biquad could possibly be worse - from the phase perspective!
90 degree phase shift puts dTerm completely in phase with pTerm.  This dramatically enhances the very Pterm oscillations it should be trying to stop.  My flight/logging experience is that it's better to have the IIR filter set very high, well above the biquad, or the phase shift from the IIR makes things worse.
@ledvinap - sorry to ask one more favour, would it be possible to graph how the biquad Boris uses compares to the IIR used on dTerm, in terms of phase vs cut?  That would be really helpful.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/digitalentity,41,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215583858,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I suspect we just need smooth D-term with as minimal phase shift as possible and attenuate only very high frequencies (which is done when filtering the gyro data itself).
The very purpose of D-term is to stop the change in gyro data and attenuate the sharp response from P - this is only possible when D has as low delay as possible (preferably none, but that's apparently not possible.
I have an insane idea that we can probably figure out filter parameters to delay D even more, to get a combined group delay of 360deg whilch might make D more effective.",True,{'LAUGH': ['https://github.com/ctzsnooze']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,42,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215749781,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.",@ctzsnooze : Did I mention the 'no free lunch' part ? ;-),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,43,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215764486,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Just tested the N5 differentiator on one of my noisier quads and it is indeed like @ledvinap data shows not filtering much at all around important frequency ranges. The bb log in fact does not show improvement over a simple averaging method.
It was flying quite well actually with this low amplitude noise, but logs look by far not that clean. In fact it even looked like there was more low amplitude high frequency noise than on simple averaging + IIR.
During my tests I also used 70hz IIR filter on top of this.
To make this approach more successfull it would have to filter better in the range of 200-300hz. That is where the typical motor noise is at.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,44,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215774216,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Here is D-term calculated from some borisbstyle's data (blackbox_many_flights.01).
Original gyro data is divided by 20, gyro rate is actually quite high",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,45,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215776615,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","And here same data, but integrator is applied after filtering, reconstructing 'original' data.
Delay of different filters is clearly visible ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,46,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215781865,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.",One for SavitzkyGolay with order 20:,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,47,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215822372,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I will post some more logs when I get to it.
I will once more retest biquad, but with much higher cutoff values. TBH we were only trying to create ideal theoretical world and using low cutoff values 20-60hz. That was obviously putting P and D too much out of phase just enough to make it very hard to tune.
I think cutoff of 100hz with biquad could still filter enough and hopefully not be delayed too much.
@ledvinap Do you have any ""quick"" sg filter code I could use to test that one as well.
Test cases:

Current biquad but very high cutoff
Savitzky Golay
1st order IIR (high cutoffs)
differentiator + any of above

I have a great success at the moment with 4 sample averaging together with 1st order IIR 70hz (pt1)
That gives reasonable clean D without side effects of phase delay, but willing to see if there is anything better.
What do you guys think of PI kind of controller? Would it be possible to have something different than derivative to make things ""smoother""  and more stable.
For example old multiwii code was constraining P in certain scenarios for yaw.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,48,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215843859,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Main thing is to avoid dTerm phase shift.  We probably don't need massive deep dTerm cut, just enough to control noise above say 100Hz.  I recall FIR filtering can be implemented with zero phase shift?  I think we rejected it previously because it did not cut very deep, and we needed a deep cut at the time.  But the biquad has given quite a deep cut.  Maybe an FIR on dTerm set to the same rolloff frequency as the biQuad on gyro  might work well enough?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,49,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215844837,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Good to get some real world results @borisbstyle
I think we do really have a case of horses for courses. It seems the N5 differentiator does not do sufficient noise reduction on its own for noisier quads, but it might give good results for very well balanced quads. It would be interesting if you could test on a non-noisy quad.
""What do you guys think of PI kind of controller?"" - interesting you ask that. I've been experimenting with setting my D8 terms to zero for my brushed quads and and they fly quite well. I'm not an expert pilot though. I'm also pretty sure all the 'toy' quads (e.g. Hubsan etc) use PI controllers and they fly well enough (but not in rate mode, of course).
My opinion is that as loop times get shorter the DTerm becomes less and less relevant. Currently the way the gyro update, the pid controller and the mixer are handled by the scheduler in Cleanflight is not ideal. @borisbstyle 's changes for betaflight are an improvement but I've been thinking about a different approach that allows the pid controller to run every gyro update even on F1 processors (of course this needs to be tested). I'll write this up in a separate ""for discussion"" PR (although I haven't actually written any code for this yet).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,50,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215857456,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I will post logs I collected later. I will also show a clip from the flight showing that it flies great and that the noise is not affecting the flight.
Anyway yes I am walking with idea to work on a PI controller. PI controller actually feels very crisp and sharp on sticks and flies really good, but as you may have noticed very sharp stick inputs can cause it to be  a bit more ""bumpy"". To me not the worst thing on the world as you can fly with that as a pilot and be fully responsible for smoothness or lower P, but that would make it more mushy.
What D does make itself most usefull for is the prop wash scenarios and fast 180 turns where a lot of instability is being introduced. That is the tricky part. It again can be solved by less P, which makes it more sluggish.
So my idea is following. A multirotor can hover and fly very smoothly without D and no or not much stick input at all. Where the responsivity is felt the most is when we pull on the sticks.
If we could make P dynamic in such way where it is low or not much active without stick input and fully active with more stick input. That might in theory remove the need for derivative or at least not much derivative.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,51,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215868393,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@borisbstyle , dynamic P makes sense to me. There is a sort of assumption that PIDs are tuned for the particular copter, but in fact they are tuned for the copter and the mode of flight. Everyone knows that if you change your copter setup (new motors, different props etc) you potentially have to retune. I don't see any reason why the ""best"" P value for straight and level flight should be same as the ""best"" P value for aggressive turns.
Although I hadn't originally considered it, having dynamic PIDs fits in well with the thoughts I've been having on changing the PID controller scheduling.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,52,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215882727,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ledvinap - your graphs are really, really helpful.

D=2 differentiator looks definitely more suitable than D=5, less delay at higher frequencies, less gain at higher frequencies.  Question is: is D=2 better than our current dTerm calculator?
SG20 is WAY better, on the graphs provided, than any other dTerm filtering.  Almost zero delay and excellent smoothing.  Looks much better than butter 2 100Hz.  BUT - Boris points out current dTerm filter, that works OK, is a 1st order IIR, not 2nd order.

So could I ask for some more graphs, if possible?  First up, phase/frequency response, and separately what they do to real data, like your most recent post.  I'd really like to compare D=2 differentiator to current dTerm calculation, and to compare 1st order IIR at say 70 vs 200 vs SG20 on top of each differentiator.
If SG20 proves to be the best, and I think it will be better by a considerable margin, then we have the real-world implementation problem of processor time / algorithm complexity  Also, how difficult is it to adjust SG filter for different loop times from 1000 to 8000?
@borisbstyle - we definitely are getting much closer
first the 4-point smoothing is, I'm sure, doing nothing useful, even if no other dTerm filtering.  Make recordings on and off, look at the motors traces with zoom, I anticipate them being better with it off, even if dTerm looks worse.
second, 1st order 70Hz IIR makes for terrible delay, look at the yellow line in Pedr's graphs of 50Hz 1st order IIR and - the peaks are completely out of phase.  1st order IIR only results in linear Dterm with respect to frequency.  It does not reduce dTerm, just stops the exaggeration at higher frequencies. Stronger filtering is needed to reduce dTerm noise. But if filtering causes phase shift then overall noise will be worse not better.  1st order IIR, I think, definitely needs to be >100Hz and probably >125Hz to avoid problems from phase shift noise augmentation.  1st order IIR at 125Hz or 150Hz might be OK with D=2 differentiator, however, but SG looks far superior.
third - can we do without dTerm?  I think not.  dTerm is needed, because it is the only thing that responds effectively to fast low amplitude external influences like prop wash and roll stop wobble. Pterm signal is too small and too slow at low gyro rates to fix these.  Dynamic P concept I've had is P is enhanced at low gyro rates, but without D the likelihood of wobble is too much.  As you know I already already have dynamic Dterm with extra D at low gyro rates, this is great, combination of both might be OK.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,53,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215885818,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze Delay on dterm is important, but I dont think we have to get obsessed by it. 70hz IIR simply just works really well with and without moving average. Moving average just softens some occassional spiking, but not necessary and not doing anything wrong at all. There is a certain point where suddenly delay starts to introduce resonance in the loop.
I still believe Pterm can be more dynamic. Lower P drastically and your propwash handling will be like never before! You only lose stick responsitivity ans you notice it only when giving stick input
I noticed that also from playing with multiwii ""super expo"" where the need for D was just less due to added dynamics bases on stick input.
I guess it all can be found out by testing ;)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,54,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215896833,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze , you ask ""Question is: is D=2 better than our current dTerm calculator?"" D=2 is exactly equivalent to differentiation - it just uses the filter to calculate gyroRate - lastRate rather than doing it explicitly. (Note also the D=3 is just differentiation combined with a two point moving average.)
I also think it is important not to give too much importance to the graphs. I don't think any of us could state from a theoretical perspective the relative importance of delay and noise. Without that knowledge we cannot predict from graphs alone which gives the best flight performance. The important thing is to do real flight testing and see what gives the best results in practice. And this may vary from copter to copter - a well balanced machine might fly better with less filtering, whereas a ""noisy"" machine may fly better with more filtering.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,55,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215897002,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Yes exactly - I am now quite obsessive about delay in dTerm.  And for good reason.  dTerm that is not phase shifted will never increase PID sum, since when it is properly in phase it can only reduce P.  With no phase shift it can therefore only reduce signal to motors.
The problem is when delay/phase shift causes dTerm to augment, rather than diminish, pTerm.  This effect happens whether or not resonant feedback occurs.  Of course if the motors are able to respond, pTerm feedback oscillation will then happen, and if phase shifted at that frequency, dTerm will be making it worse, not better.
A 70Hz 1st order IIR will put dTerm 45 degrees out of phase at 70Hz, so maybe the good and bad balance out here - i.e. the reduction in dTerm amplitude from filtering might balance out the increase in pTerm from phase shift.  So maybe it is 'neutral' up to 70Hz.  Above that it will quickly become negative.  For sure, if you had 100Hz noise (like in Pedr's sample data above) then IIR at 70 will be making it worse, not better.  At some high frequency point the motors can't respond - I don't know where that point is, but ever faster ESCs push that point higher and higher.  So yeah, I think we need to be very obsessive about dTerm delay, much less concerned about how 'big' the dTerm signal looks, much more concerned about how the filtering affects total PID not just how it looks in dTerm.
True, this needs to be tested; I could be worrying about nothing - as we say, ""the proof of the pudding is in the eating"" ha ha!
PS: On reflection, Pedr needs logs from a quad with zero dTerm filtering / smoothing - its the only way to get 'clean' gyro data for testing.  Otherwise probably he is working with test data that already has resonant dTerm effects in it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,56,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215898547,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden - OK thanks for that, if D=2 is the same as current dTerm calculation exactly, that's fine, no need to change what we do there.  We just focus on finding the optimal filter for dTerm, and for me that is not so much the cut rate of the filter, but much more the phase shift.  Looks like either SG20 / FIR most likely best in that regard, assuming no significant programming complexity or issues with filter performance when user changes loop time.
But if neither is practical, my experience is that dTerm with no filtering - perhaps with less Dterm overall - gives results that are quite amazing.  Especially now I have some testing with dynamic Dterm that increases dTerm at low gyro rates only - i.e. where you need it most, and where it does the least harm.  Every time I push the dTerm filter point up, the better the flight experience and the longer the battery lasts - so far that's my experience.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,57,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215902609,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze , you say

Yes exactly - I am now quite obsessive about delay in dTerm. And for good reason. dTerm that is not phase shifted will never increase PID sum, since when it is properly in phase it can only reduce P. With no phase shift it can therefore only reduce signal to motors.

I'm afraid I don't understand your reasoning. The DTerm is a differential, in fact it is the negative of the differential. So if P is increasing then the DTerm will decrease the PID sum and if P is decreasing then the DTerm will increase the PID sum. (Strictly speaking the DTerm will decrease the PID sum if the rateError is increasing, but since P is proportional to the rateError (by definition) the DTerm will decrease the PID sum if P term is increasing. And vice versa.) The DTerm works by attenuating P and so reduces overshoot, which in turn makes convergence more rapid.
Phase shift means the the DTerm effectively acts on an old value of P, so this may cause errors.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,58,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215904038,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","We are saying the same thing, I maybe expressed it badly.  We agree that dTerm as we use it (negative dTerm), provided that it is in correct phase relationship to pTerm, can only be opposite sign to pTerm, so it can only reduce PIDsum.  Saying (as I did above) that dTerm would reduce pTerm wasn't strictly true, strictly it can only reduce PIDsum, but I think of dTerm as a 'modifier' to pTerm since it has no effect on iTerm, so that in effect it is reducing pTerm contribution to PIDsum).   Strictly, of course, Pterm is from error and we mostly now calculate Dterm from measurement rather than  error, but whenever rc input is zero, measurement and error are the same.  Yes we are saying the same thing I think, but it only is true when phase relationships are correct.  Once 90 degrees out of phase dTerm augments pTerm, increasing PIDsum, that's what the problem is.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,59,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215905203,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze I disagree.
PIDSum = PTerm + ITerm + DTerm;

ignoring ITerm, suppose PTerm is 8 and increasing. Then DTerm will be negative, and so it reduces PIDSum. On the other hand , if PTerm is 8 and decreasing DTerm will be positive and so it increases PIDSum.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,60,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215905943,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Ha ha yes that is true, but since pTerm is falling, and dTerm when tuned typically in absolute numbers contributes less than pTerm, the actual PIDsum won't get any bigger was pTerm falls, it will just fall a bit more slowly.  And since it is always a tiny bit delayed, pTerm has already fallen before dTerm responds.
Strictly, when pTerm falls from sticks being returned to centre after a roll, so error falls abruptly, that's where Dterm from measurement can hold PIDsum significant higher than it otherwise would be for a while.
But in no case will dTerm, in properly tuned amounts, increase the overall amplitude of pTerm oscillation - only if it is profoundly too high (uncommon) or if there is phase shift (common) will that happen.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,61,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215910596,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@borisbstyle , I've just had a look through the MW23 code and it has dynamic P, I, and D terms:
uint8_t dynP8[3], dynI8[3], dynD8[3];

I haven't looked into them in detail, and they may not be doing what you suggest, but some part of the idea is there.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/digitalentity,62,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215912100,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","What I've just thought of: what if we deliberately introduce phase shift to
Pterm as well? Apply the same lpf to pterm? Or apply lpf to PIDsum, not the
Dterm?
This will increase the overall delay of PID controller, but will put P and
D more in-phase. Wouldn't this be beneficial for control loop stability?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,63,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215920257,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Total phase shift however can put the total PID response out of phase with motors.  That would make PID/motor resonance type oscillations worse, not better.  Lowering gyro_lpf to say 20Hz sort of functionally achieves your suggestion, but then you do see these kinds of oscillations, and it doesn't fly well.  Overall we want as little phase shift as possible on both P and D, I think we are getting very close.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,64,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215940316,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden
Those dynP8, dynI8 and dynD8 are coming from multiwii pid controllers and do indeed something simillar. I think that P may be the only one what would need something like that.
Do 2 options.
1 Use (smoothed) derivative from stick input for P acceleration or deacceleration gain
2 use linear P gain relation from stick input.
btw i didnt test any of the above, just thinking out loud.
concerning Dterm delay.....it would be good to test what phaseshift starts to become problematic and design from there.
Maybe introduce artificial delay what can be adjusted and than test it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,65,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-215966528,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I just tried biquad filter set to 130hz cutoff and it was running perfect :). No side effects from any kind of phase delay at all. D noise was less than with N5 differentor.
I will let some more people try, but I dont think a filter redesign is needed. I think we were too greedy before and wanted too clean dterm.
@martinbudden
I also quickly made some code for dynamic pterm based on stick input and that really rocked tbh!
It is possible to get the ultra sharp stick responses without any penalty when done in right proportions.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,66,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216003007,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ledvinap - It would be really helpful to me if you could please make a graph comparing betaflight's first order IIR and biquad filters for phase and frequency say when each is set to 50, 100, 150 or 200 Hz and overlaid over our current dTerm calculation.
We care most about phase shift below 50Hz and filtering above say 100-150Hz.
We need to see which is most likely to be the best, accepting that neither is ideal.  As you said, there is no free lunch.
Is it likely that the actual biquad implementation we are using could be much different from your second order butterworth graphs?  If so they hint that a biquad, set twice as high as a first order IIR, may be a better solution.  Looking at your previous graphs, a biquad set to 200Hz may have less phase shift below 50Hz than a first order IIR set to 100Hz, and filter better above 150Hz, but I cannot be sure.  These are the tradeoffs to consider.
One thing is for sure, these filters need to be set well above gyro_cut or the phase shifts become a problem.
From memory when we evaluated linear phase FIRs they had too much delay.  So really we only have first order IIR or the biquad as contenders at the moment.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,67,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216030613,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@borisbstyle , I must admit I don't understand why people seem to choose low cutoff frequencies, e.g. 70Hz (I've even seen videos where people are setting it at 40Hz). It seems to me that there is lots of real data (i.e. signal) at up to 100Hz.
Anyway, I've now updated the code so you can choose either a BiQuad filter or a PT1. So now there is:

optional FIR filter as part of differentiation
configurable lpf frequency which can be used for BiQuad or PT1 filter
optional moving average filter

So that is total overkill!
But it will allow people to experiment and then we can find out which are the best options. (And even more overkill for me, since for my brushed quads I'm experimenting setting the d_ values to zero).
I've also given some more thought to the dynamic PTerm. In the PID we have:
    float PTerm = luxPTermScale * rateError * pidProfile->P8[axis] * PIDweight[axis] / 100;

So the PTerm is already being adjusted by PIDweight, which has a similar effect. (Admittedly you may wish to change the way PIDweight is calculated.)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,68,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216067883,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden
I dont know. Even I thought low was needed. I guess thats addiction for getting stuff as smooth as possible.
Anyway here some testing with P acceleration on stick movements. My stick inputs felt really sharp! Still working and testing different proportions.
https://www.youtube.com/watch?v=olr9Mj33_aU",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,69,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216071505,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","We know if we increase Pterm too much we get prop wash wobble and oscillation after stopping rolls etc.  Those things occur at relatively low gyro rates and with sticks centred, often enough.  But if we want crisp responses to stick inputs we need P.  It seems to me that dynamic Pterm based on sticks would be most helpful if it decreased centre responsiveness.  This can be achieved if say we increase PTerm at high stick input e.g. factor = 1+(rcCommand/500) or something like that, and reduce P overall in PIDs.  I doubt it wants to be too much of a 'factor' since just increasing P term without corresponding Dterm may result in high stick input P oscillation.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,70,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216183375,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze :
Here are the graphs. Biquad coefficients in BetaFlight are a bit different from Butterworth filter, with some gain in passband. Bandwidth of generated filter is a bit off (about 7% larger), but that is quite negligible.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,71,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216185142,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze : FIR filter has linear phase when it is symmetric or antisymmetric. But any linear filter can be realized/approximated as FIR (FIR filter coefficients are just impulse response).
Holobrodko's and Sawitzky-Golay are examples of FIR filters without linear phase/constant group delay (and they are optimal with respect to design goal)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,72,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216188977,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Further observations on filtering
I've been looking through the gyro output chain in the code to see what filtering is applied.

Filtering by done by gyro sensor itself.

for Cleanflight default is gyro_lpf=1, this gives 188 Hz lpf, 1.9ms delay, 1kHz sample rate
for betaflight default is gyro_lpf=0, this gives 256 Hz lpf, 0.98ms delay, 8kHz sample rate


Filtering by sensors/gyro.c

for Cleanflight default is soft_gyro_lpf_hz = 60, this is a biquad filter
for betaflight default is soft_gyro_lpf_hz = 80, this is a biquad filter


Filtering in PID

for Cleanflight default is dterm_lpf_hz = 0, 4 point moving average applied
for betaflight default is dterm_lpf_hz = 70, yaw_lpf_hz=70 (applied to yaw PTerm)



That is the current state, i.e. before the implementation of the robust differentiator.
There is an awful lot of filtering going on and I think it is accidental rather than by design - that is filters were added without considering what filters were already in place.
@borisbstyle , I'm not surprised your copter flew perfectly when you set dterm_lpf_hz = 130, since an 80Hz biquad filter had already been applied.
My thoughts:

The processor in the gyro sensor is probably not that powerful, certainly less powerful than the flight controller. So we can do a better job of filtering than the sensor itself (the filtering in the sensor itself is there for when it is in low-cost hardware). So by default the gyro_lpf should be zero (although a value of 1 is OK). We then need to decouple the gyro sample rate from the gyro lpf value (so that is is possible to set gyro_lpf to zero and have a sample rate of 1kHz, if desired).
We need to choose an appropriate default value of soft_gyro_lpf_hz. I think 60 is probably too low.
Of the PID terms, ITerm is least susceptible to noise (since the noise is effectively integrated away), and DTerm is most susceptible, since differentiating amplifies the effect of the noise. So there is a case for some additional filtering for the DTerm. I think the noise robust differentiator is useful here.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,73,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216211054,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden :
1: The MPU internal filter is working well, it looks like there is 256Hz filter + optional filter  set by gyro_lpf (at 188Hz). Difference between on-chip filter and anything we can implement in firmware is negligible. On the other hand, disabling the on-chip filter while reading data at 1kHz will increase problem with aliasing (anything above 500Hz is mirrored back into 0-500Hz interval, 1000Hz noise is seen as DC), on-chip filters (running at 8kHz) reduce this effect (#1014 (comment)). #1014 has lots of discussion about this problem.
With 8kHz readout aliasing will be smaller problem, but that nearly impossible on I2C
2: Yes, but users with noisy quad may experience problems. Using higher-order filter (2 biquad sections) may be better choice than decreasing cutoff frequency. Using filter bank may be a good choice.
3: I-term is also quite insensitive to delay, so it does not make much sense handling is separately from P-term.
Additional filter for D-term is necessary, but using P-term/common filter as first D-term filter stage will save some resources.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,74,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216309111,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ledvinap , thanks for your comments - it looks like I've come late to this party...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,75,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216327348,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden : It is still open ... Previous discussion was mainly about aliasing caused by discarded samples/low samplerate. Gyro sync mostly solved it. Filter characteristic and signal path can still be improved.
It would be great to devise some testing methodology / testing method to get comparable results ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,76,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216336100,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Well, the thing about this PR is that it leaves everything configurable:

optional and configurable FIR filter as part of differentiation
configurable DTerm lpf frequency which can be used for BiQuad or PT1 filter
optional and configurable DTerm moving average filter

Total overkill. But it does allow all options to be tested. I'd like to see this PR make it into the next release of Cleanflight, so that it is opened up to real world testing by lots of people. Then when we get some results we can discard the less good options in the Cleanflight release after that. What do you think? @hydra , do you have any views on this?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,77,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216393578,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ledvinap - Really, really useful data in your most recent graphs.  THANK YOU!  (again)
My take is that for dTerm filtering, the bi-quad is a bad choice.  For any given biquad frequency - in particular look at 50Hz and 100Hz - the attenuation is minimal at the chosen frequency, and phase shift is 90 degrees at that frequency.  So...
If we choose a 100Hz biquad filter, we get almost no dTerm attenuation at 100Hz, and what gets though, being 90 degrees out of phase, will be amplified, leading very likely to resonance effects and increasing PIDsum for noise rather than reducing it.  This will also happen down to 70Hz and further up too.  True, by 200Hz, the stronger cut of a biquad means that dTerm is reduced by half, but now it is 180 degrees out of phase, which means that when added back to PIDsum it will make PIDsum bigger.  So there is a big problem area close to the setpoint, and it's only any good well away from setpoint.
On the other hand, simple first order IIR does not have the phase shift problem - or at least, it is nowhere near as bad.  All 'linearise' dTerm with respect to frequency.  If we look at the 100Hz IIR, dTerm has an extra phase shift of maybe 45 degrees at 100Hz, and not much worse at 200Hz.  So dTerm will effectively reduce PIDsum even though the magnitude is not as well controlled as with the biquad.  The filtering effect is not strong, but good enough to prevent dTerm 'amplification with increasing frequency'.  Hence dTerm is nicely linearised to match pTerm.  This is good.  Surprisingly, when the IIR is at 100Hz, the overall magnitude of dTerm control is actually better than the biquad below about 130Hz.  This is really good.  It means that an IIR at 100Hz gives better dTerm control and much less phase shift in the main frequencies we care about.
It seems to me that any simple first order IIR from 75 to 150Hz is preferable to a biquad regardless of biquad cutoff frequency chosen.
If we use the first order IIR instead of biquad, the dTerm signal will look bigger - we may see more dTerm noise at frequencies above cutoff - but we should see smaller PIDsum, and have much less risk of amplification causing resonance / motor feedback, because of better phase shift characteristics.
We should assess the suitability of the filter on PIDsum and motor signals, not just by looking at dTerm - even though dTerm graph might look worse for a simple IIR, it will, most likely, control PIDsum better.
Before locking a biquad into dTerm filtering code we need to carefully compare the two and be sure our assessments are based on the appropriate parameter.  Just seeing a big dTerm signal doesn't mean its bad.
I have for some time now been running a simple IIR on dterm and setting it 50% higher than the gyro_cut biquad.  For me this simple arrangement has worked extremely well in terms of cool running smooth sounding motors with good resonance control.  The graphs confirm why this actually works so well in practice.  Very cool.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,78,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216481567,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze
My next tests are comparing biquad vs IIR yet. Maybe indeed IIR is just enough for dterm. A bit of noise is not a big issue.
@ledvinap
There is a difference in feel and tuning with or without internal filter. Without it feels more ""crisp"" and the tuning seems to go easier. Biquad filter works great for gyro filtering btw.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ledvinap,79,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216504560,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze : We are probably rediscovering something quite trivial from control theory. But my google-fu and math background is not helping much.
Here is CF input filter, 256Hz 1st (MPU filter 1), 180Hz 1st (MPU optional), 80Hz 2nd (soft_gyro_lpf_hz), this time in dB:


If I understand the theory, phase@gain=1 (Phase margin) and gain@phase=180(Gain margin) is most important from stability point of view.
Phase=180 is at ~120Hz only for digital input filtering part, mechanical gyro filtering (any volunteer to do some measurements of gyro mounting?), PWM + ESC propagation delay, motor time constant will make this much lower.
Signal that is considerably higher than this frequency will probably only increase power consumption.
This frequency should be close to frequency of oscillations caused by too high P-term, it may as low as ~15Hz for my 250 quad. I'll look into this further
On the other hand, 1st order filter will only eliminate gain caused by differentiation, resulting in flat frequency response. P-term gain is constant, with totally flat frequency response, so noise contribution from P-term and D-term will be comparable over the frequency spectrum.
So maybe correct approach is 1st order filter (or some smoothing filter like SG/Holobrodko's) and use higher filtering common both to P-term and D-term.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,80,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216507093,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ledvinap
PWM + ESC delays are typically between 20 and 40ms from benchtesting depending on ESC's. ESC's with hardware PWM are in the range of ~20ms and those where PWM signal is generated in the MCU itself have delays around ~35ms.
Another thing to note is that de-accelerating of props is significantly lower than accelerating with some gear, but with good active braking and harware PWM this is unnoticaeble.
Thats why we were hunting the filter values in the range of 0-50hz before as the motors/esc's simply cant do more.
But there are indeed other things in filtering to bare in mind. It's the clogging of frequencies near the cutoff. That can get the loop into resonant state.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,81,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216657411,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@ctzsnooze , we seem to have come full circle on using the biquad filter for DTerm. We started with the pT1 filter because @borisbstyle was using that in betaflight, having previously tried biquad. Then at your suggestion we stared looking at biquad, but now we've seen the graphs, the consensus seems to be going against using the biquad filter for DTerm. Would you agree?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,82,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216671173,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","I vote for IIR. Did some more testing today and it indeed seemed better.
Besides that all these ESC firmwares are getting better too and have their filtering.
For example I tried the latest blheli 14.5 and it was night and day difference with previous versions.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/ctzsnooze,83,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216703728,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","Yep, the first order IIR to linearise dTerm should be all that's needed.  I'd the cutoff relatively high, somewhere above software gyro biquad, like maybe 50% higher just for testing.
As Boris points out, since motors can't respond to very high frequencies anyway, our main concern with very high frequency noise really is aliasing causing folding down to frequencies that they actually can respond to.  8k sampling and 8k loop times seem to be the solution there, and the biquad seems ideal the primary gyro filter in that it doesn't seem to introduce significant aliasing and is quite steep.
I flew yesterday with gyro software biquad filter at 70 and IIR on dTerm at 105 on two different power setups, 8k8k with LB30 multishot RS2205 2600's on 4S, and 8k4k LB20 SS2204 2300's on the other, both multishot, wow, talk about smooth!  Motors cool as could possibly be, flight responsiveness great.  Multishot is way smoother (haven't used BLHeli 14.5 yet).  And agree entirely with Boris that ESC developments are very positive.  I think I could set filters higher still without problems, given how smooth these ESCs are getting and that dTerm is now working properly since it has much less relative phase shift.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,84,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216753091,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@borisbstyle , @ctzsnooze , OK, I'll ditch the option to set a biquad filter on DTerm.
To be clear, is the filter you guys are using on the DTerm the pt1 filter, or have you implemented a different filter?
And presumably no-one is using the moving average?
As for defaults, I'm inclined to set them quite high, say:

soft_gyro_lpf_hz = 80
dterm_lpf_hz = 110

Does that seem reasonable?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/borisbstyle,85,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-216775874,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.","@martinbudden
Yes just remove anything else and only keep IIR in there. Even averaging can be removed.
I did quite some testing last week with different scenarios and IIR was indeed by far giving the best tune / P behaviour.
I am not sure about the cutoffs yet and especially 110hz on dterm. I am still experimenting with that on different copters.
So far 80 for gyro and 70 for dterm has served me well, but will try to find the limits.
I also suggest changing names to soft_gyro_lowpass and dterm_lowpass.
I also noticed that Yaw axis is sensitive to noise on P. That is because yaw P is much higher than Roll and pitch and you get more noise amplification. Besides that yaw is much more active anyway.
I suggest adding a yaw_lowpass, which just fitlers the yaw P or pid_sum.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2087,2016-04-26T20:45:12Z,2016-09-28T17:29:25Z,2016-09-28T17:29:25Z,CLOSED,False,670,411,19,https://github.com/martinbudden,For discussion - use of noise-robust differentiators for DTerm in PIDs,12,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2087,https://github.com/martinbudden,86,https://github.com/cleanflight/cleanflight/pull/2087#issuecomment-250238050,"For discussion I've implemented a set of noise-robust differentiators for the DTerm.
These were formulated by Pavel Holoborodko and are described at http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators/
Essentially these combine differentiation with noise suppression and zero time lag in a computationally efficient manner.
Of course the only way to see if they are any good for DTerm calculation is to actually try them out. @digitalentity is already using a variant in iNav.
@borisbstyle , you may be interested in these for Betaflight.
@ledvinap , @hydra , @joshuabardwell , I'd certainly value your thoughts on these.
The differentiators are configurable by filter length, from N=1 which is just ordinary numeric differentiation to N=5.
Cleanflight necessarily uses one-sided filters, and these have some disadvantages compared with centred filters, in that they need to be longer and they amplify noise in the ""mid-frequency range"". How that effects Cleanflight is to be seen.
The coefficients are customisable to give different filter characteristics and Pavel has given some indication on his web page that he might be willing to help with such customisation, but I haven't contacted him yet.",Closing this as discussion has run its course.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2088,2016-04-27T18:19:39Z,2016-04-27T18:32:23Z,2016-04-27T18:32:23Z,CLOSED,False,985,806,7,https://github.com/ledvinap,"Revert ""Cleanup 4way interface""",1,[],https://github.com/cleanflight/cleanflight/pull/2088,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2088,"I'am very sorry, I pushed to wrong remote, merging my branch into master by mistake.
This Pr should revert all bad commits.
@hydra: Please check it and merge (or possibly reset master before my commits. But that may be too intrusive)","I'am very sorry, I pushed to wrong remote, merging my branch into master by mistake.
This Pr should revert all bad commits.
@hydra: Please check it and merge (or possibly reset master before my commits. But that may be too intrusive)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2088,2016-04-27T18:19:39Z,2016-04-27T18:32:23Z,2016-04-27T18:32:23Z,CLOSED,False,985,806,7,https://github.com/ledvinap,"Revert ""Cleanup 4way interface""",1,[],https://github.com/cleanflight/cleanflight/pull/2088,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2088#issuecomment-215184152,"I'am very sorry, I pushed to wrong remote, merging my branch into master by mistake.
This Pr should revert all bad commits.
@hydra: Please check it and merge (or possibly reset master before my commits. But that may be too intrusive)","Sorry, wrong revert",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2089,2016-04-27T18:29:43Z,2016-04-28T07:38:17Z,2016-04-28T09:37:38Z,MERGED,True,985,806,7,https://github.com/ledvinap,Revert cleanup 4way 2,5,[],https://github.com/cleanflight/cleanflight/pull/2089,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2089,"Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly","Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2089,2016-04-27T18:29:43Z,2016-04-28T07:38:17Z,2016-04-28T09:37:38Z,MERGED,True,985,806,7,https://github.com/ledvinap,Revert cleanup 4way 2,5,[],https://github.com/cleanflight/cleanflight/pull/2089,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2089#issuecomment-215184418,"Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly",This reverts invalid merge completelly,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2089,2016-04-27T18:29:43Z,2016-04-28T07:38:17Z,2016-04-28T09:37:38Z,MERGED,True,985,806,7,https://github.com/ledvinap,Revert cleanup 4way 2,5,[],https://github.com/cleanflight/cleanflight/pull/2089,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2089#issuecomment-215218986,"Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly","Another option is to merge #2090, it fixes 4way-if problems, tested on Sibabs and both Atmel bootloaders ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2089,2016-04-27T18:29:43Z,2016-04-28T07:38:17Z,2016-04-28T09:37:38Z,MERGED,True,985,806,7,https://github.com/ledvinap,Revert cleanup 4way 2,5,[],https://github.com/cleanflight/cleanflight/pull/2089,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2089#issuecomment-215247966,"Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly","@ledvinap , one thing you might like to try is renaming your git remote upstream for your cleanflight directory. If you change it form upstream to, say, cf-upstream it makes it harder to make mistakes (of course it makes some ordinary things a bit more difficult as well).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2089,2016-04-27T18:29:43Z,2016-04-28T07:38:17Z,2016-04-28T09:37:38Z,MERGED,True,985,806,7,https://github.com/ledvinap,Revert cleanup 4way 2,5,[],https://github.com/cleanflight/cleanflight/pull/2089,https://github.com/jamde,5,https://github.com/cleanflight/cleanflight/pull/2089#issuecomment-215283370,"Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly","hello Martinbudden
naze32 was supported Nrf24 yet ? i try to connect nrf24 to naze32 and use protocol v202 but it doesn't work . I use GNU arm to compile code .
can you post file hex for naze 32 support nrf24l01 ?
and connect pin below right ?
// RC pinouts
// RC3              RX_PPM
// RC4  PA1         CE / RSSI_ADC
// RC5  PA2         USART2 TX
// RC6  PA3         USART2 RX
// RC7  PA6/TIM3    CSN / softserial1 RX / LED_STRIP
// RC8  PA7         SCK / softserial1 TX
// RC9  PB0         MISO / softserial2 RX / sonar trigger
// RC10 PB1         MOSI /softserial2 TX / sonar echo / current",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2089,2016-04-27T18:29:43Z,2016-04-28T07:38:17Z,2016-04-28T09:37:38Z,MERGED,True,985,806,7,https://github.com/ledvinap,Revert cleanup 4way 2,5,[],https://github.com/cleanflight/cleanflight/pull/2089,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2089#issuecomment-215317697,"Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly","@martinbudden:
I have git configured to require explicit remote specification. But in magit merge remote has to be set and it is used as alternative push target.
Main problem is that I was pushing 'msp-mem-interface' to upstream (set to correct branch) and did not realize I am on 4way branch (with upstream set to master)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2089,2016-04-27T18:29:43Z,2016-04-28T07:38:17Z,2016-04-28T09:37:38Z,MERGED,True,985,806,7,https://github.com/ledvinap,Revert cleanup 4way 2,5,[],https://github.com/cleanflight/cleanflight/pull/2089,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2089#issuecomment-215317852,"Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly",I'll merge this soon to get master to working state. Both commits and reverts may be reset later ..,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2089,2016-04-27T18:29:43Z,2016-04-28T07:38:17Z,2016-04-28T09:37:38Z,MERGED,True,985,806,7,https://github.com/ledvinap,Revert cleanup 4way 2,5,[],https://github.com/cleanflight/cleanflight/pull/2089,https://github.com/martinbudden,8,https://github.com/cleanflight/cleanflight/pull/2089#issuecomment-215367927,"Another attempt to revert my mistake, now commit-by-commit, should revert everything correctly","@ledvinap , well accidents do happen...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2090,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-215218484,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..",Works with BLHeli bootloader on Atmel,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-215710763,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","Ready for merge.
All comments welcome",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/4712,4,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216080148,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@ledvinap Thanks for all the work and thanks for finding the stk500v2 StkRcvPacket bug, which lets read of 253 bytes fail. (Btw: the failure never occurs in normal operation).
Is there any additional improvement in the 4-way functionality you found?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216108891,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@4712: There was minor buffer overflow in StkRcvPacket (ack bytes are stored after buffer), but in real code it overwrites ESC and possibly I_PARAM_LEN (it looked as if 2 bytes were received after data, but only 1   is documented.  .. I didn't investigate it further, maybe I just overlooked something).
Otherwise the code looks good. I mostly changed coding style and refactored some parts.
I can undo most changes to bootloader drivers if that helps you keeping them in sync with Arduino/AVR code.
I would like to keep esc4wayProcessCmd and esc4wayProcess separated, so that packet framing can be easily replaced.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216111360,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@4712 : Can you consider using MSP framing for Cleanflight 4way interface? Probably packing 4way command/address and data as one MSP command.
BLHeliSuite does implement MSP framing, so it should be quite easy.
Only problem is buffer size - MSP input buffer is only 64 bytes now. We can increase buffer size, but limiting MSP packets size will be better in long term (I would prefer to limit MSP packets to about 80B (64B payload + 16B for headers), but even 128B (144B) may be reasonable.
It would allow removing 4way framing, saving some FLASH space and slightly decreasing overall code complexity.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/4712,7,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216371888,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@ledvinap MSP framing doesn't make sense to me. Buffer size reduction might be doable. But why, I thought the buffer is only consuming RAM while the interface is active...
Well, I asked questions enough about the flash space consequences of implementing the 4way stuff over and over again... no reactions. Now I did a lot of work and things get stuck because of size matters ...
On the long run it might be better to remove the whole 4way stuff and get back to a non buffer consuming 1wire pass-through for serial rs232 and the st500v2 protocol as well.
Less space consuming, and more universal usage. There are downsides as well...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216430336,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@4712 : Personally I thing that 4way interface is well worth the flash. It's much more elegant and maintainable than 1wire. Pass-through command may be added for universal access to ESC.
My idea was to use existing MSP command handling instead of 4Way framing. With current code there is no need to exit MSP processing (unless I overlooked something), it should be possible to implement 4way without switching to 4way processing loop.
There is persistent 64B input buffer per MSP connection (and unlimited output stream). This size may be easily increased, but limiting MSP command size has long-term advantages (MSP may be implemented over air/i2c  / MSP multiplexing with blackbox etc)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216702183,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@4712 I thought I saw and answered your questions regarding flash place and we decided it was a very useful feature and that we can do optimizations at a later date to make everything fit.  @ledvinap is talking now about such optimizations.  Perhaps I missed something though.
Any and all code in the codebase can be optimized as we see fit,  it makes sense to address @ledvinap 's points now because there is other on-going cleanup work going on with the MSP code.
Anything that you can do to help is greatly appreciated!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/4712,10,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216818628,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@hydra Yes for Cleanup, but no for restructuring of the protocol. I will not add MSP framing into BLHeliSuite, not ATM. Too  many other things in progress...
BTW, I'm not sure about side effects, when MSP is still enabled while flashing an ESC.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,11,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216822562,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@4712: I thought that MSP is already implemented in BLHeliSuite (to get cleanflight versions, access motors and switch to 4Way interface), that it will need only minor change.
I would expect that pwmDisableMotors will stop all access to ESC pins. We can improve this (implement pwmRelease / pwmReconfigure or similar)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/4712,12,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216827002,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@ledvinap MSP is used only as a frame, but not for any flash procedure.
Disabling the motor pwm is not the problem, but there should be as less as possible other ongoing actions, which could disturb (MSP packages ...).
ESC flashing and parameter handling will never be done in flight time.
So, switch off all disturbing procedure (as MSP, PWM and Beeper is in this case), do the job with the 4way interface - and reinitialize all necessary after done work.
That's my understanding of a clean way...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216834858,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@4712 : MSP packets should not pose any problem - BLHeliSuite does own serial port (no injected 'foreign' commands), there will be no change from BLHeli framing.
Other functions will be called, but only between commands, so it should not interfere with ESC programming. Interrupt handlers are called in both cases.
Beeper will be handled as usual - beep time may be prolonged by single CMD processing time (only chip erase is long enough to cause audible difference)
There is no acute need for  implementing this, but it would be nice in long-term.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216835027,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@hydra, @4712 : this is ready for merge ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-216890558,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","ok, i will review and merge, maybe tonight if i get time.  I've just arrived in ibiza and have setup the office, I'll be here for 3 weeks and can now continue with reviewing PR's and merging and finishing up CF 1.13.0.  I am feeling the need to release CF 1.13.0 ASAP and move the IO EXTI 2 PR for the first thing for CF 1.14.0.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/martinbudden,16,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-217084203,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@Hyrda, I'm all for a v1.13.0 release. There are some bug related and other PRs that should make it into this release. For you convenience I've collected them together in issue #2103.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-217276200,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..",@martinbudden great thanks I'll take a look.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-217276867,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..","@ledvinap thanks for the great cleanup!  I gave this a test on a couple of boards tonight and didn't encounter any issues, merged.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/4712,19,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-217293717,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..",@ledvinap thanks a lot. I merged it into 1.12 and noticed you saved up some bytes (~900 bytes for the Naze board). Quite impressive!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2090,2016-04-27T19:52:53Z,2016-05-05T20:51:56Z,2016-05-06T17:54:47Z,MERGED,True,919,1075,8,https://github.com/ledvinap,Cleanup 4way-if,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2090,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2090#issuecomment-217513853,"4way-if is working on silabs BLHeli bootloader and AVR SimonK bootloader
Can someone test AVR-BLHeli bootloader? I'll get to it later ..",@4712 @ledvinap teamwork = win! 😄 👍,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2098,2016-04-30T07:16:46Z,2016-10-13T08:24:04Z,2016-10-13T08:48:35Z,CLOSED,False,193,3,2,https://github.com/GaryKeeble,Blackbox enhancements PID Parameters and more.,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2098,https://github.com/GaryKeeble,1,https://github.com/cleanflight/cleanflight/pull/2098,"@martinbudden
This is a pull request to enhance the blackbox logger to include PID parameters, flight mode status and Cleanflight revision in the log header; as per issue #2045.
Note that the new logged information is backwards compatible with the standard log viewer; (although the user will not be able to see the information using the viewer directly).
In the code, there are some commented out fields that are only available in the betaflight version; I have left them in the source code for reference just in case they make their way back into cleanflight.","@martinbudden
This is a pull request to enhance the blackbox logger to include PID parameters, flight mode status and Cleanflight revision in the log header; as per issue #2045.
Note that the new logged information is backwards compatible with the standard log viewer; (although the user will not be able to see the information using the viewer directly).
In the code, there are some commented out fields that are only available in the betaflight version; I have left them in the source code for reference just in case they make their way back into cleanflight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2098,2016-04-30T07:16:46Z,2016-10-13T08:24:04Z,2016-10-13T08:48:35Z,CLOSED,False,193,3,2,https://github.com/GaryKeeble,Blackbox enhancements PID Parameters and more.,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2098,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2098#issuecomment-216030740,"@martinbudden
This is a pull request to enhance the blackbox logger to include PID parameters, flight mode status and Cleanflight revision in the log header; as per issue #2045.
Note that the new logged information is backwards compatible with the standard log viewer; (although the user will not be able to see the information using the viewer directly).
In the code, there are some commented out fields that are only available in the betaflight version; I have left them in the source code for reference just in case they make their way back into cleanflight.","@GaryKeeble , looks good. @hydra is travelling at the moment, but hopefully he'll look at it when he gets back.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2098,2016-04-30T07:16:46Z,2016-10-13T08:24:04Z,2016-10-13T08:48:35Z,CLOSED,False,193,3,2,https://github.com/GaryKeeble,Blackbox enhancements PID Parameters and more.,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2098,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2098#issuecomment-216187311,"@martinbudden
This is a pull request to enhance the blackbox logger to include PID parameters, flight mode status and Cleanflight revision in the log header; as per issue #2045.
Note that the new logged information is backwards compatible with the standard log viewer; (although the user will not be able to see the information using the viewer directly).
In the code, there are some commented out fields that are only available in the betaflight version; I have left them in the source code for reference just in case they make their way back into cleanflight.",Maybe it would be easier to add cli dump to blackbox header.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2098,2016-04-30T07:16:46Z,2016-10-13T08:24:04Z,2016-10-13T08:48:35Z,CLOSED,False,193,3,2,https://github.com/GaryKeeble,Blackbox enhancements PID Parameters and more.,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2098,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2098#issuecomment-218138483,"@martinbudden
This is a pull request to enhance the blackbox logger to include PID parameters, flight mode status and Cleanflight revision in the log header; as per issue #2045.
Note that the new logged information is backwards compatible with the standard log viewer; (although the user will not be able to see the information using the viewer directly).
In the code, there are some commented out fields that are only available in the betaflight version; I have left them in the source code for reference just in case they make their way back into cleanflight.","@ledvinap easier maybe but no - we don't want any dependencies on the cli code at all, ever.  CLI must die.
Perhaps a better solution is using serialized parameter groups?  That would make more sense to me.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2098,2016-04-30T07:16:46Z,2016-10-13T08:24:04Z,2016-10-13T08:48:35Z,CLOSED,False,193,3,2,https://github.com/GaryKeeble,Blackbox enhancements PID Parameters and more.,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2098,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2098#issuecomment-218140454,"@martinbudden
This is a pull request to enhance the blackbox logger to include PID parameters, flight mode status and Cleanflight revision in the log header; as per issue #2045.
Note that the new logged information is backwards compatible with the standard log viewer; (although the user will not be able to see the information using the viewer directly).
In the code, there are some commented out fields that are only available in the betaflight version; I have left them in the source code for reference just in case they make their way back into cleanflight.","@hydra: It's repeated again and again - parameter groups/ msp / cli / adjustments / blackbox.
In long-term it would be best to have meta-information about configurable variables.
Serializing parameters groups is easy and the (binary) format is supported in configurator, so 'documented'.
Data may be hex-encoded to keep blackbox headers text-only.
Sharing code between blackbox and configurator (parameter group format description) will help a lot.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2098,2016-04-30T07:16:46Z,2016-10-13T08:24:04Z,2016-10-13T08:48:35Z,CLOSED,False,193,3,2,https://github.com/GaryKeeble,Blackbox enhancements PID Parameters and more.,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2098,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2098#issuecomment-253447339,"@martinbudden
This is a pull request to enhance the blackbox logger to include PID parameters, flight mode status and Cleanflight revision in the log header; as per issue #2045.
Note that the new logged information is backwards compatible with the standard log viewer; (although the user will not be able to see the information using the viewer directly).
In the code, there are some commented out fields that are only available in the betaflight version; I have left them in the source code for reference just in case they make their way back into cleanflight.","Although I see the value in doing this I feel there must be a better way, the code-size impact of this is large at the moment and it doesn't currently fit with the long term goals.  I will close this PR.
Thanks for the code and the PR.  Please leave your branch so we have it for reference when we re-visit this in the future.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2098,2016-04-30T07:16:46Z,2016-10-13T08:24:04Z,2016-10-13T08:48:35Z,CLOSED,False,193,3,2,https://github.com/GaryKeeble,Blackbox enhancements PID Parameters and more.,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2098,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2098#issuecomment-253452864,"@martinbudden
This is a pull request to enhance the blackbox logger to include PID parameters, flight mode status and Cleanflight revision in the log header; as per issue #2045.
Note that the new logged information is backwards compatible with the standard log viewer; (although the user will not be able to see the information using the viewer directly).
In the code, there are some commented out fields that are only available in the betaflight version; I have left them in the source code for reference just in case they make their way back into cleanflight.","@hydra, the code size of this is not that large and this is useful info for people when tuning. It may not fit with your long term goals, but I see no problem including it in the short term and getting rid of it later. Also, if code size really is a problem, then it could just be included on targets with > 128K ROM.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2099,2016-05-02T20:33:25Z,2016-05-10T12:02:28Z,2016-05-10T12:14:37Z,MERGED,True,15,29,2,https://github.com/MotoLab,Add MPU6000 code to MOTOLAB target,1,[],https://github.com/cleanflight/cleanflight/pull/2099,https://github.com/MotoLab,1,https://github.com/cleanflight/cleanflight/pull/2099,Required for new boards.,Required for new boards.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2099,2016-05-02T20:33:25Z,2016-05-10T12:02:28Z,2016-05-10T12:14:37Z,MERGED,True,15,29,2,https://github.com/MotoLab,Add MPU6000 code to MOTOLAB target,1,[],https://github.com/cleanflight/cleanflight/pull/2099,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2099#issuecomment-216701264,Required for new boards.,Any chance of a documentation update to go with this (docs\Board - Motolab.md) ?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2099,2016-05-02T20:33:25Z,2016-05-10T12:02:28Z,2016-05-10T12:14:37Z,MERGED,True,15,29,2,https://github.com/MotoLab,Add MPU6000 code to MOTOLAB target,1,[],https://github.com/cleanflight/cleanflight/pull/2099,https://github.com/MotoLab,3,https://github.com/cleanflight/cleanflight/pull/2099#issuecomment-216704178,Required for new boards.,"Certainly. I'll work on that tonight.
On Tue, May 3, 2016 at 6:52 PM, Dominic Clifton notifications@github.com
wrote:

Any chance of a documentation update to go with this (docs\Board -
Motolab.md) ?
—
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
#2099 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2100,2016-05-03T16:00:36Z,2016-05-10T11:59:40Z,2016-05-10T12:15:01Z,MERGED,True,3,2,3,https://github.com/aergid,Chapters missing from Manual.pdf when there are no \n before '#SectionName',2,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2100,https://github.com/aergid,1,https://github.com/cleanflight/cleanflight/pull/2100,"Using build_docs.sh to generate Manual.pdf I get document with 26 pages
and a lot of dead referencess to different chapters. This holds true when I
use either gimli from build_docs.sh or switch to pandoc.
Turned out that sections with #-headers not separated by a new line from previous
text got ignored in final pdf.
E.g. after 'Getting Started.md' and 'Safety.md' joint:
^* [Migrating from baseflight](Migrating from baseflight.md)
^# Safety
Just added new line concatenation between *.md files in concat-loop.
Newly generated pdf contains 64 pages and everything seems in place.","Using build_docs.sh to generate Manual.pdf I get document with 26 pages
and a lot of dead referencess to different chapters. This holds true when I
use either gimli from build_docs.sh or switch to pandoc.
Turned out that sections with #-headers not separated by a new line from previous
text got ignored in final pdf.
E.g. after 'Getting Started.md' and 'Safety.md' joint:
^* [Migrating from baseflight](Migrating from baseflight.md)
^# Safety
Just added new line concatenation between *.md files in concat-loop.
Newly generated pdf contains 64 pages and everything seems in place.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2100,2016-05-03T16:00:36Z,2016-05-10T11:59:40Z,2016-05-10T12:15:01Z,MERGED,True,3,2,3,https://github.com/aergid,Chapters missing from Manual.pdf when there are no \n before '#SectionName',2,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2100,https://github.com/tracernz,2,https://github.com/cleanflight/cleanflight/pull/2100#issuecomment-217058287,"Using build_docs.sh to generate Manual.pdf I get document with 26 pages
and a lot of dead referencess to different chapters. This holds true when I
use either gimli from build_docs.sh or switch to pandoc.
Turned out that sections with #-headers not separated by a new line from previous
text got ignored in final pdf.
E.g. after 'Getting Started.md' and 'Safety.md' joint:
^* [Migrating from baseflight](Migrating from baseflight.md)
^# Safety
Just added new line concatenation between *.md files in concat-loop.
Newly generated pdf contains 64 pages and everything seems in place.",I think you'll find this is the actual problem: http://stackoverflow.com/questions/729692/why-should-text-files-end-with-a-newline,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2100,2016-05-03T16:00:36Z,2016-05-10T11:59:40Z,2016-05-10T12:15:01Z,MERGED,True,3,2,3,https://github.com/aergid,Chapters missing from Manual.pdf when there are no \n before '#SectionName',2,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2100,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2100#issuecomment-217141267,"Using build_docs.sh to generate Manual.pdf I get document with 26 pages
and a lot of dead referencess to different chapters. This holds true when I
use either gimli from build_docs.sh or switch to pandoc.
Turned out that sections with #-headers not separated by a new line from previous
text got ignored in final pdf.
E.g. after 'Getting Started.md' and 'Safety.md' joint:
^* [Migrating from baseflight](Migrating from baseflight.md)
^# Safety
Just added new line concatenation between *.md files in concat-loop.
Newly generated pdf contains 64 pages and everything seems in place.","@tracernz : Only these files do not end with newline:
./development/Blackbox Internals.md
./Board - Sparky.md",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2100,2016-05-03T16:00:36Z,2016-05-10T11:59:40Z,2016-05-10T12:15:01Z,MERGED,True,3,2,3,https://github.com/aergid,Chapters missing from Manual.pdf when there are no \n before '#SectionName',2,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2100,https://github.com/aergid,4,https://github.com/cleanflight/cleanflight/pull/2100#issuecomment-217144318,"Using build_docs.sh to generate Manual.pdf I get document with 26 pages
and a lot of dead referencess to different chapters. This holds true when I
use either gimli from build_docs.sh or switch to pandoc.
Turned out that sections with #-headers not separated by a new line from previous
text got ignored in final pdf.
E.g. after 'Getting Started.md' and 'Safety.md' joint:
^* [Migrating from baseflight](Migrating from baseflight.md)
^# Safety
Just added new line concatenation between *.md files in concat-loop.
Newly generated pdf contains 64 pages and everything seems in place.","You both are right. The problem is in missing lineending and correct way is to fix 'broken' .md files.
However, we all make mistakes from time to time, and one could accidentialy forget to end with linefeed after updating files.
I believe that this 'guardian' echo won't hurt.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2100,2016-05-03T16:00:36Z,2016-05-10T11:59:40Z,2016-05-10T12:15:01Z,MERGED,True,3,2,3,https://github.com/aergid,Chapters missing from Manual.pdf when there are no \n before '#SectionName',2,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2100,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2100#issuecomment-217161386,"Using build_docs.sh to generate Manual.pdf I get document with 26 pages
and a lot of dead referencess to different chapters. This holds true when I
use either gimli from build_docs.sh or switch to pandoc.
Turned out that sections with #-headers not separated by a new line from previous
text got ignored in final pdf.
E.g. after 'Getting Started.md' and 'Safety.md' joint:
^* [Migrating from baseflight](Migrating from baseflight.md)
^# Safety
Just added new line concatenation between *.md files in concat-loop.
Newly generated pdf contains 64 pages and everything seems in place.","@aergid : Probably combination of both - some .md files end with empty line, but that should not be necessary.
./development/Blackbox Internals.md, ./Board - Sparky.md (POSIX violation) should be fixed in addition to blank line insertion.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2100,2016-05-03T16:00:36Z,2016-05-10T11:59:40Z,2016-05-10T12:15:01Z,MERGED,True,3,2,3,https://github.com/aergid,Chapters missing from Manual.pdf when there are no \n before '#SectionName',2,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2100,https://github.com/tracernz,6,https://github.com/cleanflight/cleanflight/pull/2100#issuecomment-217226898,"Using build_docs.sh to generate Manual.pdf I get document with 26 pages
and a lot of dead referencess to different chapters. This holds true when I
use either gimli from build_docs.sh or switch to pandoc.
Turned out that sections with #-headers not separated by a new line from previous
text got ignored in final pdf.
E.g. after 'Getting Started.md' and 'Safety.md' joint:
^* [Migrating from baseflight](Migrating from baseflight.md)
^# Safety
Just added new line concatenation between *.md files in concat-loop.
Newly generated pdf contains 64 pages and everything seems in place.",Good stuff. Github gives you a nice little warning char in the diff viewer for text files when the linefeed at the end is missing. ;-),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2101,"New LED functions: G & S
Isssue #709
Isssue #1384","New LED functions: G & S
Isssue #709
Isssue #1384",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-216700969,"New LED functions: G & S
Isssue #709
Isssue #1384",There are compilation errors.  Please see build log details and add another commit that fixes the problems.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-216702398,"New LED functions: G & S
Isssue #709
Isssue #1384",Oops. It only appeared as a warning in my eclipse. Fixed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,4,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-216765425,"New LED functions: G & S
Isssue #709
Isssue #1384",Great! Could you also add a Beacon mode? The configured LED should flash in a preselected color. Usefull as position lights.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,5,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-216766212,"New LED functions: G & S
Isssue #709
Isssue #1384",Here is a example: https://m.youtube.com/watch?v=neq82MD5v3A,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-216801865,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj , test code is not passing. Can you fix that?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,7,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217203263,"New LED functions: G & S
Isssue #709
Isssue #1384","@skaman82 I will be looking into the beacon mode now.
@martinbudden, @hydra, your feedback on the code is very welcome.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/martinbudden,8,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217240174,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj , some feedback on your code, mostly to do with style.

I much prefer to declare variables at the point of usage, in my view it makes the code much easier to read. It also gives the opportunity to declare the variable const (if it is const), which aids understanding.
This is especially true of for loops, so, in your code, for (int ledIndex = 0; ledIndex < ledCount;ledIndex++)... rather than for (ledIndex = 0; ledIndex < ledCount; ledIndex++)
Unless there is good reason, I prefer to use i (and j and k) as loop indices, so in your case
 for (int i = 0; i < ledCount; ++i)...(I prefer the pre increment++` operator - it's a good habit to use it since it is the more efficient form when it is an overloaded operator in C++)
I like the ternary conditional both for compactness and clarity, e.g. gpsColor = STATE(GPS_FIX) ?&hsv_green : &hsv_red;
In my view continue is ""considered harmful"", and should generally be avoided.
Double negatives should also generally be avoided (e.g. if(!x) statement1 else statement2; should be replaced by if(x) statement2 else statement1;. So in your code:

if (!(ledConfig->flags & LED_FUNCTION_GPS)) {
     continue;
}
setLedHsv(ledIndex, gpsColor);

should be replaced by
if ((ledConfig->flags & LED_FUNCTION_GPS)) {
    setLedHsv(ledIndex, gpsColor);
}

and similarly in the applyLedRssiLayer function.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,9,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217281217,"New LED functions: G & S
Isssue #709
Isssue #1384","Fixed on my functions, however this coding style was used throughout the whole file.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,10,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217286578,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj Thanks, are you adding the new functions to the LED Tab interface on the configurator branch? It would be also great if #2053 would be configurable also in the GUI",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,11,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217292097,"New LED functions: G & S
Isssue #709
Isssue #1384","Of course @skaman82, this will be the next step once the cleanflight code is reviewed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217402268,"New LED functions: G & S
Isssue #709
Isssue #1384","@martinbudden :
ad 5/6: there is useful idiom for iterating with continue:
for(int i = 0; i < count; i++) {
   if(!filter1(item[i]))
     continue;
   if(!filter2(item[i]))
     continue;
   doSomething(item[i]);
   doSomethingElse();
}

This avoids deep nesting and is quite easy to read",True,{'THUMBS_UP': ['https://github.com/hydra']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217404778,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj : On ARM processors (and probably most 32 bit processors + all desktops) it is more efficient to use int variables instead of shorter alternatives.

Local variables end up in registers and GCC emits lots of instructions to convert byte/halfword to word.
When passing arguments, values must be passed as 4 bytes, forcing sign or zero extension. This incurs overhead (and previous point applies inside function)
When stored in memory, reading the value will take identical time (unless value is unaligned). Only advantage is saving RAM memory.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,14,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217718514,"New LED functions: G & S
Isssue #709
Isssue #1384",see CF Configurator PR cleanflight/cleanflight-configurator#379,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,15,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217741357,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj just tested the blink feature. It works fantastic, thank you!
Also testing the GPS led function now. The strange thing is, that the LED is off with no fix (not red like you've stated in the docs). If I apply a color setting additionally it starts to blink in that selected color.
It starts working correctly when the first 3D fix is acquired. Then, if the fix is lost, the led starts blinking red.
It would be nice if the LED starts blinking red before the first fix is there.
Can not test the RSSI. Can someone else test that?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,16,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217744486,"New LED functions: G & S
Isssue #709
Isssue #1384","I'll be looking into this new travis check failure + initialization issue you describe.
I don't have the means to test RSSI either but it's copy and paste from the throttle behaviour.
Would be nice to have some feedback though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,17,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217744665,"New LED functions: G & S
Isssue #709
Isssue #1384",@ledvinap your suggestion leads to an 18 byte flash overflow. Shall I revert or would you suggest something else ?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,18,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217744702,"New LED functions: G & S
Isssue #709
Isssue #1384","Regarding travis check: it looks like the new code is to large for cc3d target.
Von meinem iPhone gesendet

Am 08.05.2016 um 22:34 schrieb Gaël James notifications@github.com:
I'll be looking into this new travis check failure + initialization issue you describe.
I don't have the means to test RSSI either but it's copy and paste from the throttle behaviour.
Would be nice to have some feedback though.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,19,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217745153,"New LED functions: G & S
Isssue #709
Isssue #1384",In the worst case you can leave the rssi out to save code space. I personally can't imagine how a rssi indication on a aircraf that is far away could be usefull at all.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/martinbudden,20,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217745183,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj , I wouldn't worry about the 18 bytes overflow. I've got some PRs lined up that will save more than that amount of memory, so when they are merged this will build without errors.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,21,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217746292,"New LED functions: G & S
Isssue #709
Isssue #1384","Yes I saw those @martinbudden. Excellent work. I did revert in the end just for the sake of not having the error and restore consistency with the coding style that is used throughout the file anyway.
Regarding RSSI not being very usefull, it was a suggestion brought up by @hydra so I would like to have his seconds thoughts on this one before removing it. I'll refactor both functions into one to gain space.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,22,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217800887,"New LED functions: G & S
Isssue #709
Isssue #1384","Testing now. The GPS mode LEDs are now red and blinking yellow before the first fix is acquired. If the fix is lost, the gps LEDs turn red for a moment and then they sometimes just go completely OFF (happens not every time). They start blinking green again if the fix is back.
Suggestions:
• Better use orange color instead of yellow (it is hard to make out a difference between yellow and green in the sunlight)
• The GPS leds should be red again when fix is lost instead of going completely dark",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217827189,"New LED functions: G & S
Isssue #709
Isssue #1384","please let me know when testing is complete so we can merge it.
thanks for code review guys.  the gps and blink features will be very useful indeed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,24,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217944973,"New LED functions: G & S
Isssue #709
Isssue #1384","The LEDs will always go black for a while if you wait enough, then it starts working again. I'm suspecting an overflow of the time variables but coding µs in a signed int32 still gives 35 minutes before overflow, and the blackness starts much before. So I'm still looking into it...
I've implemented the orange color. Expected behaviour is :

solid red when no satellites
blinking orange when satellites but no fix
blinking green when fix",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,25,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217951461,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj ok, give me a quick note here when you have figure it out. I will test it again then.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,26,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217959137,"New LED functions: G & S
Isssue #709
Isssue #1384",OK i've found the bug.... just another case of me being blind,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,27,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217982627,"New LED functions: G & S
Isssue #709
Isssue #1384",Just tested you changes before your last commit. In searching Mode The GPS LED is now blinking red:green (not orange). And if i pull the GPS the lights still go off,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,28,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217984485,"New LED functions: G & S
Isssue #709
Isssue #1384",Correction. It goes of only when i reattach the wires,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,29,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217987547,"New LED functions: G & S
Isssue #709
Isssue #1384",Please try those last 2 commits. Seems pretty fine now to me (finally !),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,30,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217991973,"New LED functions: G & S
Isssue #709
Isssue #1384",Still goes off when i pull and reattach The GPS wires. Strange thing is. First in searching Mode it blinks red/yellow. If it gets a fix ist blinks YELLOW then i cut the gps connection and reattach it. The LEDs go off completely and starting blinking GREEN.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,31,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-217993009,"New LED functions: G & S
Isssue #709
Isssue #1384",@martinbudden @ledvinap could you please help debugging and test this if you have some time? I can't test the RSSI function.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/martinbudden,32,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218000455,"New LED functions: G & S
Isssue #709
Isssue #1384","@skaman82  , unfortunately I don't have the facility to test the RSSI function.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,33,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218001017,"New LED functions: G & S
Isssue #709
Isssue #1384",@martinbudden thanks for the quick feedback. Could you then take a look at the GPS LED function. There seems to be a bug somewhere causing strange behavior described above. Two sets of eyes are always better…,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,34,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218015975,"New LED functions: G & S
Isssue #709
Isssue #1384","Over here when I disconnect the GPS unit, the LEDs blink green a few more seconds then go solid red.
Then possibly blinking orange for one cycle and blinking green again. I don't get any dark pauses any more.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,35,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218017218,"New LED functions: G & S
Isssue #709
Isssue #1384",I sadly do. @digitalentity may have some ideas. I am talking with him about this right now,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,36,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218027642,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj please see improved GPS code here: https://gist.github.com/digitalentity/f4f021876653acb1f7f1525024388348
I tested this and this now works like it should. Please also add
#include ""sensors/sensors.h"" at the top of the ledstrip.c file for this
thank you @digitalentity !
No sats: red
Low sats (no fix): red, blinking orange
GPS fix: blinking green (depending on locked sats count)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/digitalentity,37,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218050156,"New LED functions: G & S
Isssue #709
Isssue #1384","No problem, glad I could help :D",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,38,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218232779,"New LED functions: G & S
Isssue #709
Isssue #1384","Thanks guys. Seems the sensor check was not an issue on my side.
The general code cleanup was quite needed too IMO, although it's not always directly related to the PR.
I merged with the very latest commit of CF/master and solved all conflicts.
Now that the PR for cli command mode_color is merged, I will make the GPS-status colors configurable.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,39,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218252923,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj I think you should check this further. If I have 3 sats the blinking stops the leds a red for a while and the they go dark completely, then it blinks a few times yellow and then get just solid red without any blinking. Sometimes it even don't blink when the fix is there for maybee 15-20 seconds. It also goes completely dark if I pull and reattach the gps wires.
The code-snippet I posted above has worked very well tonight with no issues at all. Please have a closer look at it
.
EDIT: I also couldn't find a similar behavior in your code like in line 19 here https://gist.github.com/digitalentity/f4f021876653acb1f7f1525024388348",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,40,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218258768,"New LED functions: G & S
Isssue #709
Isssue #1384","It was working, but not up-to-date with the latest PR's.
I had to fix quite a lot of conflicts and then merging this PR gave some more conflicts.
Could you please give me your feedback on this commit ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,41,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218261913,"New LED functions: G & S
Isssue #709
Isssue #1384","still no win. Green flashing just goes completely dark even if I have a fix (9 sats). If I replace the whole void applyLedGpsLayer(uint8_t updateNow) area with digitalentitys code it just works solid and good. I would suggest to just copy and paste, optimize later if necessary",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,42,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218265165,"New LED functions: G & S
Isssue #709
Isssue #1384",OK I will check. The commit will not solve it as I did not see your comment.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,43,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218268510,"New LED functions: G & S
Isssue #709
Isssue #1384","@ledvinap could you please confirm if you are having problems as well ? Quite honestly it's working on my side and appart from the 2 latests commit (incrementation bugfix & configurable colors) the file contents of your version and mine match.
@skaman82 could you check you have the correct code and / or be more specific about the difference between both versions of the function ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,44,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218269051,"New LED functions: G & S
Isssue #709
Isssue #1384","OK, I got the line 19...
EDIT: It was missing from ledvinaps's commit.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/ledvinap,45,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218271136,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj : Sorry, I don't have gps or ledstrip at hand ... but the code should be simple enough ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,46,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218271875,"New LED functions: G & S
Isssue #709
Isssue #1384","OK, @skaman82 ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/ledvinap,47,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218275708,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj gpsFlashCounter is still increased during pause, so it will skip 2 sats",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,48,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218279310,"New LED functions: G & S
Isssue #709
Isssue #1384","Tested the state before your last commit. This is looking good, but after i while the green flashing just stops and the leds go dark. I just made a video while testing at the stage the green blinking stopped: https://www.youtube.com/watch?v=m1n5rbIq4Z8",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,49,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218294289,"New LED functions: G & S
Isssue #709
Isssue #1384",This should at least help.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,50,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218385346,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj Thank you, tested today with a new board and had no issues with the GPS LEDs - no matter how hard I tried to throw them off :)
@hydra You wanted a heads-up when this is ready, I think it is now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/martinbudden,51,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218392101,"New LED functions: G & S
Isssue #709
Isssue #1384","@skaman82 , the travis build is failing - that needs to be fixed before it can be included.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,52,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218395533,"New LED functions: G & S
Isssue #709
Isssue #1384",@gaelj would you please check the travis errors?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,53,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218414244,"New LED functions: G & S
Isssue #709
Isssue #1384","I'm glad it's finally working !!!
Obvisouly I will fix the Travis build - later today.
I hope this PR can still make it to 1.13 ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/hydra,54,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218431843,"New LED functions: G & S
Isssue #709
Isssue #1384","yes if you fix this today it will be included, if not it'll be for 1.14",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,55,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218518574,"New LED functions: G & S
Isssue #709
Isssue #1384","@skaman82, did you test the working release on your SP F3 which was giving us the problems yesterday ? How does it behave ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,56,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218518940,"New LED functions: G & S
Isssue #709
Isssue #1384",Can test after work,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,57,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218526665,"New LED functions: G & S
Isssue #709
Isssue #1384","OK, everything's now fine except for CC3D build that overflowed by 62 bytes.
So I tried changing quite a few declarations from int to uint8_t, but now it's overflowing by 126 bytes !
@martinbudden, @ledvinap, I would very much welcome some hints...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/martinbudden,58,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218533285,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj , as a general principle changing ints to uint8_ts is not going to save you ROM, as you've found out. The most efficient code is generated when variables are the ""natural"" size for the processor (that is, the same size as registers). Certainly for local variables int is the most efficient choice. For static and global variables it's more complicated though.
62 bytes isn't much, but then it's a lot when you absolutely need them. I'm afraid I don't have time to look at this more today, but a general piece of advice is that the easiest way to save ROM is to cut out functionality. I don't know your code that well, but if you could say cut out the RSSI functionality that might buy you the 62 bytes. You could put the RSSI functionality back in for 1.14, when you have more time to optimise the code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,59,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218533767,"New LED functions: G & S
Isssue #709
Isssue #1384","+1 Cut the RSSI

Am 11.05.2016 um 19:38 schrieb Martin Budden notifications@github.com:
@gaelj , as a general principle changing ints to uint8_ts is not going to save you ROM, as you've found out. The most efficient code is generated when variables are the ""natural"" size for the processor (that is, the same size as registers). Certainly for local variables int is the most efficient choice. For static and global variables it's more complicated though.
62 bytes isn't much, but then it's a lot when you absolutely need them. I'm afraid I don't have time to look at this more today, but a general piece of advice is that the easiest way to save ROM is to cut out functionality. I don't know your code that well, but if you could say cut out the RSSI functionality that might buy you the 62 bytes. You could put the RSSI functionality back in for 1.14, when you have more time to optimise the code.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,60,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218540112,"New LED functions: G & S
Isssue #709
Isssue #1384","RSSI is now just a function call to applyLedHue(), just the same as for throttle but with different parameters. So I doubt removing this function will change much.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/martinbudden,61,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218542524,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj , yes, I wasn't hopeful.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,62,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218546031,"New LED functions: G & S
Isssue #709
Isssue #1384",It's getting better though ! Maybe a deeper removal of rssi will do the trick.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/ledvinap,63,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218553187,"New LED functions: G & S
Isssue #709
Isssue #1384","@gaelj : you can probably save considerable ROM by optimizing this switch statement:
https://github.com/cleanflight/cleanflight/pull/2101/files#diff-bb48e8235ba420743f280df4cfa26af7R1063",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/hydra,64,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218562205,"New LED functions: G & S
Isssue #709
Isssue #1384",@gaelj Is this ready now?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,65,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218562248,"New LED functions: G & S
Isssue #709
Isssue #1384",testing now,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,66,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218562343,"New LED functions: G & S
Isssue #709
Isssue #1384",ready in 5 minutes,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,67,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218562368,"New LED functions: G & S
Isssue #709
Isssue #1384",I've plainly disabled GPS LEDs for CC3D. If this is OK for you it's good for me.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,68,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218562716,"New LED functions: G & S
Isssue #709
Isssue #1384",@skaman82 is desperately waiting for his GPS fix :D,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,69,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218563415,"New LED functions: G & S
Isssue #709
Isssue #1384",:D works like a charm on my SPracing @hydra good to go!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/skaman82,70,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218563781,"New LED functions: G & S
Isssue #709
Isssue #1384",Big thanks to @gaelj @digitalentity @ledvinap @martinbudden,True,{'THUMBS_UP': ['https://github.com/gaelj']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,71,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218563977,"New LED functions: G & S
Isssue #709
Isssue #1384",And big thanks to @skaman82 ! I'm so glad this could make it to 1.13.,True,{'THUMBS_UP': ['https://github.com/skaman82']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/martinbudden,72,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-218575506,"New LED functions: G & S
Isssue #709
Isssue #1384","Yes, for a while I thought it was going to get puppied.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/shaw05,73,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-224571268,"New LED functions: G & S
Isssue #709
Isssue #1384",Has anyone mentioned that this would be a fantastic function to merge into the iNav fork of cleanflight? There is an issue which relates to this already: iNavFlight/inav#199,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2101,2016-05-03T23:30:02Z,2016-05-11T22:50:41Z,2016-06-08T14:05:21Z,MERGED,True,286,193,6,https://github.com/gaelj,"LEDs: GPS fix, Sat count, RSSI & Flash",90,[],https://github.com/cleanflight/cleanflight/pull/2101,https://github.com/gaelj,74,https://github.com/cleanflight/cleanflight/pull/2101#issuecomment-224599466,"New LED functions: G & S
Isssue #709
Isssue #1384","I know. Betaflight needs it too. I still have some new LEDstrip features I would like to add in Cleanflight, for which discussion is still ongoing (such as battery level, see #2160).
I am willing to work on the merge for inav & etaflight once LEDstrip is fully finished in Cleanflight.
If someone else wants to already merge the existing updates, that's also fine by me :)
Any help on the questions raised in #2160 would be good as well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2102,2016-05-04T01:07:55Z,2016-05-10T11:55:47Z,2016-05-10T11:58:13Z,MERGED,True,18,78,1,https://github.com/MotoLab,Update documentation for MOTOLAB target,1,[],https://github.com/cleanflight/cleanflight/pull/2102,https://github.com/MotoLab,1,https://github.com/cleanflight/cleanflight/pull/2102,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/digitalentity,1,https://github.com/cleanflight/cleanflight/pull/2107,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)","Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-217585233,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)",This is not ready to be merged yet. Still cleaning things up.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/Susurrus,3,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-217593173,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)",Do note that I'm have commit rights to the MAVLink repo and have many commits there under my belt. If there's something you'd like to push on that end I can help try to move it along.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-217668080,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)","@Susurrus hi!  anything you could do to help would be great, having to maintain patches or modified libraries is always a pain that no-developer needs.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/Susurrus,5,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-217677419,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)","Yes, the point of MAVLink is that it serves everyone's needs. I've been running it on a 16-bit microcontroller and others use a full 32-bit CPU and Linux on top of that. So if you raise issues on the main MAVLink repo I can shepard them and help them into PRs and get them merged. This effort does need to be lead by someone else, however, as I don't have hardware for CF nor do I have experience building it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/vooon,6,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-217699634,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)","@hydra @digitalentity  wide parameters still not in use by APM or PX4, but easiest is to use -std=gnu11 instead of gnu99 (since you use gnu extensions).
I checked this with default build of master by gcc-arm-embedded and got same sizes.
arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 5.3.1 20160307 (release) [ARM/embedded-5-branch revision 234589]
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/digitalentity,7,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-217701218,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)",@hydra what do you think about switching to -std=gnu11?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-223789396,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)",@digitalentity not had time to check the differences.  would be curious as to what @martinbudden and @ledvinap think too.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/digitalentity,9,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-226259525,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)","@martinbudden @ledvinap
What to you think, can we merge this?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-253436570,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)",i relocated the mavlink code to /lib/main/mavlink and merged it.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2107,2016-05-06T23:14:16Z,2016-10-13T07:29:53Z,2016-10-13T07:32:10Z,MERGED,True,15,53047,166,https://github.com/digitalentity,MAVLink telemetry cleanup,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2107,https://github.com/digitalentity,11,https://github.com/cleanflight/cleanflight/pull/2107#issuecomment-253436827,"Continuation of #806
I've enclosed mavlink library with pragmas to disable -Wpedantic to avoid compile warnings (until the unnamed union issue is resolved in mavlink/mavlink#386)","Thanks @hydra, I've forgotten about this PR 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2108,2016-05-07T07:08:31Z,2016-05-07T20:14:22Z,2016-05-08T12:00:42Z,MERGED,True,108,57,2,https://github.com/martinbudden,Added PIDs to OLED display profile page. Added TASKS page.,4,[],https://github.com/cleanflight/cleanflight/pull/2108,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2108,Also changed so battery page is not displayed if neither FEATURE_VBAT or FEATURE_CURRENT_METER is enabled.,Also changed so battery page is not displayed if neither FEATURE_VBAT or FEATURE_CURRENT_METER is enabled.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2109,2016-05-07T10:53:13Z,2016-06-01T15:52:01Z,2016-06-01T16:36:05Z,MERGED,True,32,19,1,https://github.com/martinbudden,"Makefile cleanup - Improved handling of different TARGETS, removed duplication.",2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2109,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2109,"@hydra, you probably want to take this now. A small step in improving the maintainability of the Makefile.","@hydra, you probably want to take this now. A small step in improving the maintainability of the Makefile.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2109,2016-05-07T10:53:13Z,2016-06-01T15:52:01Z,2016-06-01T16:36:05Z,MERGED,True,32,19,1,https://github.com/martinbudden,"Makefile cleanup - Improved handling of different TARGETS, removed duplication.",2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2109,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2109#issuecomment-217707840,"@hydra, you probably want to take this now. A small step in improving the maintainability of the Makefile.","Nice work
Another possibility is to include target-specific makefile into main and define things like memory sizes and supported features there .. But maybe it will make things more complicated ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2109,2016-05-07T10:53:13Z,2016-06-01T15:52:01Z,2016-06-01T16:36:05Z,MERGED,True,32,19,1,https://github.com/martinbudden,"Makefile cleanup - Improved handling of different TARGETS, removed duplication.",2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2109,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2109#issuecomment-218141336,"@hydra, you probably want to take this now. A small step in improving the maintainability of the Makefile.","since this is a makefile cleanup, we should defer this to 1.14.0 - code cleanups yes, now.  makefile can wait a little bit.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2109,2016-05-07T10:53:13Z,2016-06-01T15:52:01Z,2016-06-01T16:36:05Z,MERGED,True,32,19,1,https://github.com/martinbudden,"Makefile cleanup - Improved handling of different TARGETS, removed duplication.",2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2109,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2109#issuecomment-223034853,"@hydra, you probably want to take this now. A small step in improving the maintainability of the Makefile.",I'll give this a whirl here and merge this for the final release of 1.13.0 since I need to get started on some other Makefile related changes.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2110,2016-05-07T12:11:23Z,2016-05-11T23:01:17Z,2016-10-12T20:22:29Z,MERGED,True,22,8,2,https://github.com/hydra,SPRACINGF3MINI - Add 5 channel parallel PWM receiver support,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2110,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2110,"Via MOTOR 6-8 for RC CH 1-4 and PPM for AUX1.
PA0-3 are the input which are NOT 5V TOLERANT.
This works perfectly with receivers that give 3v outputs, such as the nice little FrSky VD5M (Tested).","Via MOTOR 6-8 for RC CH 1-4 and PPM for AUX1.
PA0-3 are the input which are NOT 5V TOLERANT.
This works perfectly with receivers that give 3v outputs, such as the nice little FrSky VD5M (Tested).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2110,2016-05-07T12:11:23Z,2016-05-11T23:01:17Z,2016-10-12T20:22:29Z,MERGED,True,22,8,2,https://github.com/hydra,SPRACINGF3MINI - Add 5 channel parallel PWM receiver support,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2110,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2110#issuecomment-217632290,"Via MOTOR 6-8 for RC CH 1-4 and PPM for AUX1.
PA0-3 are the input which are NOT 5V TOLERANT.
This works perfectly with receivers that give 3v outputs, such as the nice little FrSky VD5M (Tested).","status: receiver input working fine, need to do a little bit more testing before merging.  This PR exists so that others can try it too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2112,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.","This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-217674278,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.",CC3D fails to build for me due to flash size.  Added a couple more commits to fix compilation issues for some targets.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-217701847,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.","@hydra , see PR #2113. This saves about 850 bytes of ROM on CC3D by limiting the max number of motors to 6 (there are only 6 PWM pins on CC3D boards anyway, so this shouldn't cause a problem for many people). This should provide enough to allow PR #2112 to build - Travis build says CC3D overflowed ROM by 210 bytes. [I haven't actually tested the 2112 build with my PR though.]",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-217741643,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.","@Pierre-A can you make a PR against this branch to address comments raised by @ledvinap ?
I test flew the binary today from latest master + this PR but didn't test the functionality in this PR yet.  Need to dig out a beeper.  Testing beeper functionality late at night in a holiday resort isn't ideal 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-217741915,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.",@martinbudden thanks for the heads up about #2113.  merged that into master and into this branch.  CC3D builds for me now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-218234679,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.",merged master again.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-218431713,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.",I'll fix the merge later on.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-218616397,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.","this doesn't fit in flash on more than one F1 target.
rescheduling for 1.14.0",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/Pierre-A,9,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-218663850,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.","just discovering this,
I'm abroad for a while and sorry can't do anything.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-247159719,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.",This needs rebasing against master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-247177139,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.","master merged, untested.
come code from previous comments also merged, also untested.
@ivanwyc would appreciate if you have time to test this and submit a PR against this branch to fix anything that's still broken.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-247179570,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.",i don't know wtf is going on with git for me tonight...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2112,2016-05-07T22:08:36Z,2016-09-14T22:42:09Z,2016-09-14T22:54:57Z,CLOSED,False,30967,10083,369,https://github.com/hydra,"new CLI ""beeper"" command ",19,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2112,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2112#issuecomment-247181778,"This continues where #1894 left off.
@Pierre-A See beeperConfig_t and please review and test the changes.  I did the merge of your commits but without the rebase commit that you did.  Please investigate how to rebase correctly when you have time.  But simply, when you rebase, it puts all your changes from your branch to one side, updates your branch with the branch to be rebased on so you have the latest code, then it attempts to apply your commits onto the latest code, one commit at a time.  It's an important topic to learn, suggest playing with a test git repo to learn how to do it.
I have not tested the changes, but it does compile.","For some reason github/git is playing up and I can't seem to restore this PR, I will create a new one with a single commit that contains all the changes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2113,2016-05-08T06:38:32Z,2016-05-08T19:42:59Z,2016-05-08T20:25:00Z,MERGED,True,58,19,5,https://github.com/martinbudden,Allowed max motors to be set in target.h. Set to 6 for CC3D.,3,[],https://github.com/cleanflight/cleanflight/pull/2113,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2113,Allowed target specific setting of max motor count. Set to 6 for CC3D - saves about 850 bytes of ROM for CC3D build. CC3D has only 6 PWM pins anyway.,Allowed target specific setting of max motor count. Set to 6 for CC3D - saves about 850 bytes of ROM for CC3D build. CC3D has only 6 PWM pins anyway.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2113,2016-05-08T06:38:32Z,2016-05-08T19:42:59Z,2016-05-08T20:25:00Z,MERGED,True,58,19,5,https://github.com/martinbudden,Allowed max motors to be set in target.h. Set to 6 for CC3D.,3,[],https://github.com/cleanflight/cleanflight/pull/2113,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2113#issuecomment-217707430,Allowed target specific setting of max motor count. Set to 6 for CC3D - saves about 850 bytes of ROM for CC3D build. CC3D has only 6 PWM pins anyway.,Maybe TARGET_SERVO_COUNT can be added too,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2113,2016-05-08T06:38:32Z,2016-05-08T19:42:59Z,2016-05-08T20:25:00Z,MERGED,True,58,19,5,https://github.com/martinbudden,Allowed max motors to be set in target.h. Set to 6 for CC3D.,3,[],https://github.com/cleanflight/cleanflight/pull/2113,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2113#issuecomment-217711416,Allowed target specific setting of max motor count. Set to 6 for CC3D - saves about 850 bytes of ROM for CC3D build. CC3D has only 6 PWM pins anyway.,"@ledvinap , good observations, thanks.
I looked at also setting servo count, but this is more complicated, since currently servers are allocated specific function (e.g. SERVO_FLAPS = 7) so you cannot reduce the number of servos without breaking the airplane mixer. Certainly something to look at in future though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2114,2016-05-08T12:44:43Z,2016-05-10T14:42:36Z,2016-05-10T20:46:58Z,MERGED,True,16,25,3,https://github.com/martinbudden,Reduced target specific #ifdefs in config.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2114,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2114,Reduced the number of target specific #ifdefs in config.c by adding a DEFAULT_FEATURES #define that can be set in the target.h file.,Reduced the number of target specific #ifdefs in config.c by adding a DEFAULT_FEATURES #define that can be set in the target.h file.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2114,2016-05-08T12:44:43Z,2016-05-10T14:42:36Z,2016-05-10T20:46:58Z,MERGED,True,16,25,3,https://github.com/martinbudden,Reduced target specific #ifdefs in config.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2114,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2114#issuecomment-218180688,Reduced the number of target specific #ifdefs in config.c by adding a DEFAULT_FEATURES #define that can be set in the target.h file.,"great, thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2116,2016-05-08T13:52:53Z,2016-05-10T19:46:43Z,2016-05-10T20:46:28Z,MERGED,True,36,42,6,https://github.com/martinbudden,Cleanup of gyro_sync.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2116,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2116,"Make variables and functions static where appropriate. Removed duplicated condition. Made gyro_soft_lpf uint16_t rather than float.
Saves 160 bytes of ROM.","Make variables and functions static where appropriate. Removed duplicated condition. Made gyro_soft_lpf uint16_t rather than float.
Saves 160 bytes of ROM.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2116,2016-05-08T13:52:53Z,2016-05-10T19:46:43Z,2016-05-10T20:46:28Z,MERGED,True,36,42,6,https://github.com/martinbudden,Cleanup of gyro_sync.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2116,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2116#issuecomment-217727811,"Make variables and functions static where appropriate. Removed duplicated condition. Made gyro_soft_lpf uint16_t rather than float.
Saves 160 bytes of ROM.","Looks great, IMO it's safe to merge",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2116,2016-05-08T13:52:53Z,2016-05-10T19:46:43Z,2016-05-10T20:46:28Z,MERGED,True,36,42,6,https://github.com/martinbudden,Cleanup of gyro_sync.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2116,https://github.com/borisbstyle,3,https://github.com/cleanflight/cleanflight/pull/2116#issuecomment-217732500,"Make variables and functions static where appropriate. Removed duplicated condition. Made gyro_soft_lpf uint16_t rather than float.
Saves 160 bytes of ROM.",check......looks good to me,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2117,2016-05-08T14:48:04Z,2016-05-10T19:42:29Z,2016-05-21T16:51:37Z,MERGED,True,42,45,19,https://github.com/martinbudden,Cleanup of acc device drivers extern usage,5,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2117,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2117,"This fixes the horrible condition whereby the acc device drivers use an extern (acc_1G) owned by sensors/acceleration.c, i.e. the acc device drivers have a dependency on higher level code.
As @ledvinap has suggested, in the long term it is probably best that the scaling of the acc output is done in the device drivers themselves.
Has the not insignificant side benefit of saving 136 bytes of ROM.","This fixes the horrible condition whereby the acc device drivers use an extern (acc_1G) owned by sensors/acceleration.c, i.e. the acc device drivers have a dependency on higher level code.
As @ledvinap has suggested, in the long term it is probably best that the scaling of the acc output is done in the device drivers themselves.
Has the not insignificant side benefit of saving 136 bytes of ROM.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2117,2016-05-08T14:48:04Z,2016-05-10T19:42:29Z,2016-05-21T16:51:37Z,MERGED,True,42,45,19,https://github.com/martinbudden,Cleanup of acc device drivers extern usage,5,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2117,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2117#issuecomment-218180529,"This fixes the horrible condition whereby the acc device drivers use an extern (acc_1G) owned by sensors/acceleration.c, i.e. the acc device drivers have a dependency on higher level code.
As @ledvinap has suggested, in the long term it is probably best that the scaling of the acc output is done in the device drivers themselves.
Has the not insignificant side benefit of saving 136 bytes of ROM.",@martinbudden rebase needed please.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2117,2016-05-08T14:48:04Z,2016-05-10T19:42:29Z,2016-05-21T16:51:37Z,MERGED,True,42,45,19,https://github.com/martinbudden,Cleanup of acc device drivers extern usage,5,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2117,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2117#issuecomment-218235178,"This fixes the horrible condition whereby the acc device drivers use an extern (acc_1G) owned by sensors/acceleration.c, i.e. the acc device drivers have a dependency on higher level code.
As @ledvinap has suggested, in the long term it is probably best that the scaling of the acc output is done in the device drivers themselves.
Has the not insignificant side benefit of saving 136 bytes of ROM.",@martinbudden thanks! merging.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2117,2016-05-08T14:48:04Z,2016-05-10T19:42:29Z,2016-05-21T16:51:37Z,MERGED,True,42,45,19,https://github.com/martinbudden,Cleanup of acc device drivers extern usage,5,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2117,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2117#issuecomment-218267929,"This fixes the horrible condition whereby the acc device drivers use an extern (acc_1G) owned by sensors/acceleration.c, i.e. the acc device drivers have a dependency on higher level code.
As @ledvinap has suggested, in the long term it is probably best that the scaling of the acc output is done in the device drivers themselves.
Has the not insignificant side benefit of saving 136 bytes of ROM.","I flight tested master merged with this on a couple of quads, no issues.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2120,2016-05-09T16:14:37Z,2016-05-29T23:20:23Z,2016-05-30T08:00:07Z,MERGED,True,2,2,1,https://github.com/ledvinap,USB-VCP gcc 5.3  fix,1,[],https://github.com/cleanflight/cleanflight/pull/2120,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2120,"looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207","looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2120,2016-05-09T16:14:37Z,2016-05-29T23:20:23Z,2016-05-30T08:00:07Z,MERGED,True,2,2,1,https://github.com/ledvinap,USB-VCP gcc 5.3  fix,1,[],https://github.com/cleanflight/cleanflight/pull/2120,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2120#issuecomment-218165752,"looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207","Changed PR to clear LSB bits of BTABLE register (they are zero), gcc then generates working code.
Tested on SPARKY with gcc 4.9 and 5.3, should be safe to merge (zero bits are zeroed explicitly, no other change)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2120,2016-05-09T16:14:37Z,2016-05-29T23:20:23Z,2016-05-30T08:00:07Z,MERGED,True,2,2,1,https://github.com/ledvinap,USB-VCP gcc 5.3  fix,1,[],https://github.com/cleanflight/cleanflight/pull/2120,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2120#issuecomment-218718856,"looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207",(changed the mask to correct value),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2120,2016-05-09T16:14:37Z,2016-05-29T23:20:23Z,2016-05-30T08:00:07Z,MERGED,True,2,2,1,https://github.com/ledvinap,USB-VCP gcc 5.3  fix,1,[],https://github.com/cleanflight/cleanflight/pull/2120,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2120#issuecomment-220035313,"looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207",@hydra: Can you look at this - the change is trivial and tested ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2120,2016-05-09T16:14:37Z,2016-05-29T23:20:23Z,2016-05-30T08:00:07Z,MERGED,True,2,2,1,https://github.com/ledvinap,USB-VCP gcc 5.3  fix,1,[],https://github.com/cleanflight/cleanflight/pull/2120,https://github.com/digitalentity,5,https://github.com/cleanflight/cleanflight/pull/2120#issuecomment-220036070,"looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207",@hydra I confirm that it works,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2120,2016-05-09T16:14:37Z,2016-05-29T23:20:23Z,2016-05-30T08:00:07Z,MERGED,True,2,2,1,https://github.com/ledvinap,USB-VCP gcc 5.3  fix,1,[],https://github.com/cleanflight/cleanflight/pull/2120,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2120#issuecomment-222388883,"looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207","@digitalentity thanks for confirmation.  @ledvinap thanks for finding the issue.
@ledvinap Can I enquire as to how you found the problem?  Seems like it would have taken me quite some time to find that very obscure issue.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2120,2016-05-09T16:14:37Z,2016-05-29T23:20:23Z,2016-05-30T08:00:07Z,MERGED,True,2,2,1,https://github.com/ledvinap,USB-VCP gcc 5.3  fix,1,[],https://github.com/cleanflight/cleanflight/pull/2120,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2120#issuecomment-222426188,"looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207","@hydra Code did work with -O1. I used #pragma GCC optimize, disabling optimizations until VCP started working again. Then isolating affected function.
Assembly (-save-temps -fverbose-asm) of init function was easy enough to analyze by hand",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2120,2016-05-09T16:14:37Z,2016-05-29T23:20:23Z,2016-05-30T08:00:07Z,MERGED,True,2,2,1,https://github.com/ledvinap,USB-VCP gcc 5.3  fix,1,[],https://github.com/cleanflight/cleanflight/pull/2120,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2120#issuecomment-222426460,"looks like gcc bug - gcc generates half-word access in _SetEPTxAddr / _SetEPRxAddr macro. Using addr & ~ 3 fixes this and VCP works fine
Code works when optimization level is decreased for Virtual_Com_Port_Reset
here is invalid code for reference:
    .loc 4 493 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPRxAddr
    uxtah   r3, r2, r3  @ D.5188, tmp245, D.5186
    lsls    r3, r3, #1  @ D.5189, D.5188,
    mov r9, #64 @ tmp249,
    ldrh    r2, [r3]    @, *_219
    strh    r9, [r3]    @ movhi @ tmp249, *_219
    ldrh    r2, [r3, #2]    @, *_219
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_219
.LVL58:
.LBE93:
.LBE98:
.LBB99:
.LBB100:
    .loc 4 481 0
    ldr r3, [r7]    @ D.5186, MEM[(volatile unsigned int *)1073765456B(BTABLE)] SetEPTxAddr
    uxth    r3, r3  @ D.5187, D.5186
    add r3, r3, #536870912  @ D.5188, D.5187,
    add r3, r3, #12288  @ D.5188, D.5188,
    lsls    r3, r3, #1  @ D.5189, D.5188,
.LBE100:
.LBE99:
    .loc 1 139 0
    mov r0, r4  @, tmp217
.LBB102:
.LBB101:
    .loc 4 481 0
    ldrh    r2, [r3]    @, *_207
    movs    r2, #128    @ tmp261,
    strh    r2, [r3]    @ movhi @ tmp261, *_207
    ldrh    r2, [r3, #2]    @, *_207
    strh    r4, [r3, #2]    @ movhi @ tmp217, *_207",@hydra: Finding problem that is deterministic is easy .. race conditions are much more fun,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2121,2016-05-09T22:11:25Z,2016-05-09T22:16:09Z,2016-05-09T22:21:30Z,CLOSED,False,1709,85,34,https://github.com/SpektrumRC,Spektrum serial receiver changes,23,[],https://github.com/cleanflight/cleanflight/pull/2121,https://github.com/SpektrumRC,1,https://github.com/cleanflight/cleanflight/pull/2121,"Follow up on pull request #1985
Some additions and changes done to current Spektrum rx serial implementation.
In short.
-scaling change to have serial and ppm input travel matching if SPEKTRUM_PROPER_SCALING is defined. Otherwise, scaling remains as before
-If bound as internal receiver, system data (resolution) is automatically read from the rx and set if not already correct
-though currently not implemented elsewhere, frame losses are now read from rx and stored in ""frameLoss"" variable.","Follow up on pull request #1985
Some additions and changes done to current Spektrum rx serial implementation.
In short.
-scaling change to have serial and ppm input travel matching if SPEKTRUM_PROPER_SCALING is defined. Otherwise, scaling remains as before
-If bound as internal receiver, system data (resolution) is automatically read from the rx and set if not already correct
-though currently not implemented elsewhere, frame losses are now read from rx and stored in ""frameLoss"" variable.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2121,2016-05-09T22:11:25Z,2016-05-09T22:16:09Z,2016-05-09T22:21:30Z,CLOSED,False,1709,85,34,https://github.com/SpektrumRC,Spektrum serial receiver changes,23,[],https://github.com/cleanflight/cleanflight/pull/2121,https://github.com/SpektrumRC,2,https://github.com/cleanflight/cleanflight/pull/2121#issuecomment-218006457,"Follow up on pull request #1985
Some additions and changes done to current Spektrum rx serial implementation.
In short.
-scaling change to have serial and ppm input travel matching if SPEKTRUM_PROPER_SCALING is defined. Otherwise, scaling remains as before
-If bound as internal receiver, system data (resolution) is automatically read from the rx and set if not already correct
-though currently not implemented elsewhere, frame losses are now read from rx and stored in ""frameLoss"" variable.",Oops I screwed something up here. Closing.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2122,2016-05-09T22:23:36Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,67,9,3,https://github.com/SpektrumRC,Spektrum serial receiver changes,3,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2122,https://github.com/SpektrumRC,1,https://github.com/cleanflight/cleanflight/pull/2122,"Follow up on pull request #1985
Some additions and changes done to current Spektrum rx serial implementation.
In short.
-scaling change to have serial and ppm input travel matching if SPEKTRUM_PROPER_SCALING is defined. Otherwise, scaling remains as before
-If bound as internal receiver, system data (resolution) is automatically read from the rx and set if not already correct
-though currently not implemented elsewhere, frame losses are now read from rx and stored in ""frameLoss"" variable.","Follow up on pull request #1985
Some additions and changes done to current Spektrum rx serial implementation.
In short.
-scaling change to have serial and ppm input travel matching if SPEKTRUM_PROPER_SCALING is defined. Otherwise, scaling remains as before
-If bound as internal receiver, system data (resolution) is automatically read from the rx and set if not already correct
-though currently not implemented elsewhere, frame losses are now read from rx and stored in ""frameLoss"" variable.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2122,2016-05-09T22:23:36Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,67,9,3,https://github.com/SpektrumRC,Spektrum serial receiver changes,3,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2122,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2122#issuecomment-240898928,"Follow up on pull request #1985
Some additions and changes done to current Spektrum rx serial implementation.
In short.
-scaling change to have serial and ppm input travel matching if SPEKTRUM_PROPER_SCALING is defined. Otherwise, scaling remains as before
-If bound as internal receiver, system data (resolution) is automatically read from the rx and set if not already correct
-though currently not implemented elsewhere, frame losses are now read from rx and stored in ""frameLoss"" variable.",@SpektrumFPV thanks for your contribution here.  Is there any chance you guys could get some hardware sent over to me?   e.g.  basic DX8/DXe TX and suitable recent (telemetry) receiver?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2123,2016-05-10T09:16:19Z,2016-05-10T10:08:02Z,2016-05-10T10:11:37Z,CLOSED,False,727,641,16,https://github.com/martinbudden,Split mixer.c into mixer.c and servos.c,2,[],https://github.com/cleanflight/cleanflight/pull/2123,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2123,"This splits mixer.c into two files mixer.c and servos.c.
mixer.c contains a large number of #ifdef USE_SERVOS which makes it difficult to read, understand and maintain. This PR splits all the servo code into a separate file, making everything much clearer.","This splits mixer.c into two files mixer.c and servos.c.
mixer.c contains a large number of #ifdef USE_SERVOS which makes it difficult to read, understand and maintain. This PR splits all the servo code into a separate file, making everything much clearer.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2124,2016-05-10T10:16:01Z,2016-06-01T15:14:14Z,2016-07-07T07:39:10Z,MERGED,True,1,2,1,https://github.com/DzikuVx,Cf yaw jump prevention limit docs update,2,[],https://github.com/cleanflight/cleanflight/pull/2124,https://github.com/DzikuVx,1,https://github.com/cleanflight/cleanflight/pull/2124,Cleaned docs for 'yaw_jump_prevention_limit' setting,Cleaned docs for 'yaw_jump_prevention_limit' setting,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2125,2016-05-10T10:57:59Z,2016-05-10T14:49:22Z,2016-05-10T20:47:23Z,MERGED,True,726,640,16,https://github.com/martinbudden,Split mixer.c into mixer.c and servos.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2125,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2125,"This splits mixer.c into two files mixer.c and servos.c.
mixer.c contained a large number of #ifdef USE_SERVOS which made it difficult to understand and maintain. This PR fixes that.","This splits mixer.c into two files mixer.c and servos.c.
mixer.c contained a large number of #ifdef USE_SERVOS which made it difficult to understand and maintain. This PR fixes that.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2125,2016-05-10T10:57:59Z,2016-05-10T14:49:22Z,2016-05-10T20:47:23Z,MERGED,True,726,640,16,https://github.com/martinbudden,Split mixer.c into mixer.c and servos.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2125,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2125#issuecomment-218181421,"This splits mixer.c into two files mixer.c and servos.c.
mixer.c contained a large number of #ifdef USE_SERVOS which made it difficult to understand and maintain. This PR fixes that.","great, should make the code easier to navigate now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2126,2016-05-10T13:01:17Z,2016-09-14T15:10:32Z,2016-09-14T15:10:32Z,CLOSED,False,8,0,1,https://github.com/marcusramberg,Channel forwarding docs,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2126,https://github.com/marcusramberg,1,https://github.com/cleanflight/cleanflight/pull/2126,"Add a little info to the mixer documentation about channel forwarding. Note that behavior has been described to the best of my understanding of the code in pwm_mapping.c
As far as I can tell, channel forwarding only works on naze and spracing? Not sure if this should be said more clearly? I'm also curious if the led strip condition also should check for soft serial, as this seems to overlap with the 5-8 pwm pins as well.","Add a little info to the mixer documentation about channel forwarding. Note that behavior has been described to the best of my understanding of the code in pwm_mapping.c
As far as I can tell, channel forwarding only works on naze and spracing? Not sure if this should be said more clearly? I'm also curious if the led strip condition also should check for soft serial, as this seems to overlap with the 5-8 pwm pins as well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2126,2016-05-10T13:01:17Z,2016-09-14T15:10:32Z,2016-09-14T15:10:32Z,CLOSED,False,8,0,1,https://github.com/marcusramberg,Channel forwarding docs,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2126,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2126#issuecomment-223026180,"Add a little info to the mixer documentation about channel forwarding. Note that behavior has been described to the best of my understanding of the code in pwm_mapping.c
As far as I can tell, channel forwarding only works on naze and spracing? Not sure if this should be said more clearly? I'm also curious if the led strip condition also should check for soft serial, as this seems to overlap with the 5-8 pwm pins as well.","It would likely be better to add a section on channel forwarding rather than just a mere mention.  Painless360 was asking about this feature this week saying users are confused by it so some good documentation and an example would be excellent.
Not going to merge as-is, please update as described above and force-push the changes over the old commits.
Looking forward to reading what you come up with.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2126,2016-05-10T13:01:17Z,2016-09-14T15:10:32Z,2016-09-14T15:10:32Z,CLOSED,False,8,0,1,https://github.com/marcusramberg,Channel forwarding docs,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2126,https://github.com/marcusramberg,3,https://github.com/cleanflight/cleanflight/pull/2126#issuecomment-224004576,"Add a little info to the mixer documentation about channel forwarding. Note that behavior has been described to the best of my understanding of the code in pwm_mapping.c
As far as I can tell, channel forwarding only works on naze and spracing? Not sure if this should be said more clearly? I'm also curious if the led strip condition also should check for soft serial, as this seems to overlap with the 5-8 pwm pins as well.",I've tried to update it as you requested now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2126,2016-05-10T13:01:17Z,2016-09-14T15:10:32Z,2016-09-14T15:10:32Z,CLOSED,False,8,0,1,https://github.com/marcusramberg,Channel forwarding docs,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2126,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2126#issuecomment-247045584,"Add a little info to the mixer documentation about channel forwarding. Note that behavior has been described to the best of my understanding of the code in pwm_mapping.c
As far as I can tell, channel forwarding only works on naze and spracing? Not sure if this should be said more clearly? I'm also curious if the led strip condition also should check for soft serial, as this seems to overlap with the 5-8 pwm pins as well.","merged, thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2133,2016-05-13T06:11:27Z,2016-09-14T16:20:07Z,2016-09-14T16:20:08Z,CLOSED,False,20,10,1,https://github.com/jflyper,i2cWriteBuffer() for F3 targets,3,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2133,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2133,"A rush job solution for #2111 , but it works.
Converted the single byte i2cWrite() to loop for the given buffer, just like the i2cRead() does.
A new i2cWrite() calls the converted i2cWriteBuffer().","A rush job solution for #2111 , but it works.
Converted the single byte i2cWrite() to loop for the given buffer, just like the i2cRead() does.
A new i2cWrite() calls the converted i2cWriteBuffer().",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2133,2016-05-13T06:11:27Z,2016-09-14T16:20:07Z,2016-09-14T16:20:08Z,CLOSED,False,20,10,1,https://github.com/jflyper,i2cWriteBuffer() for F3 targets,3,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2133,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2133#issuecomment-218962419,"A rush job solution for #2111 , but it works.
Converted the single byte i2cWrite() to loop for the given buffer, just like the i2cRead() does.
A new i2cWrite() calls the converted i2cWriteBuffer().","@jflyper : This PR is empty.
Also I2C functionality can be improved as part of new feature PRs, no need to hurry/get it out in 1.13",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2133,2016-05-13T06:11:27Z,2016-09-14T16:20:07Z,2016-09-14T16:20:08Z,CLOSED,False,20,10,1,https://github.com/jflyper,i2cWriteBuffer() for F3 targets,3,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2133,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/2133#issuecomment-218974296,"A rush job solution for #2111 , but it works.
Converted the single byte i2cWrite() to loop for the given buffer, just like the i2cRead() does.
A new i2cWrite() calls the converted i2cWriteBuffer().","@ledvinap
Oops!  I thought I could stuff the PR in before anyone sees it empty!
No, the PR wasn't intended for 1.13 release. I started to write msp over i2c, and thought it would be nice to have i2cWriteBuffer() in the master.
Yes, the I2C functionality definitely needs improvements; multi channel, ... DMA is a must, I suppose.
RT capable bus scheduling will be super.
Any plan for the new features?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2133,2016-05-13T06:11:27Z,2016-09-14T16:20:07Z,2016-09-14T16:20:08Z,CLOSED,False,20,10,1,https://github.com/jflyper,i2cWriteBuffer() for F3 targets,3,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2133,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2133#issuecomment-230370974,"A rush job solution for #2111 , but it works.
Converted the single byte i2cWrite() to loop for the given buffer, just like the i2cRead() does.
A new i2cWrite() calls the converted i2cWriteBuffer().",as a general principle we don't want unused code in the codebase.  prefer as part of a feature PR instead. @ledvinap is correct.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2133,2016-05-13T06:11:27Z,2016-09-14T16:20:07Z,2016-09-14T16:20:08Z,CLOSED,False,20,10,1,https://github.com/jflyper,i2cWriteBuffer() for F3 targets,3,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2133,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2133#issuecomment-247069196,"A rush job solution for #2111 , but it works.
Converted the single byte i2cWrite() to loop for the given buffer, just like the i2cRead() does.
A new i2cWrite() calls the converted i2cWriteBuffer().",rather than leaving this PR open for eternity I'll close it since it's essentially dead code.  I'm happy to merge it in as part of supporting some new external device.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2139,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219296041,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","Unittests needs update, I'll comit it soon",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219304095,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","Wonderful job. With this much flash saved, couldn't you re enable GPS LEDs on the CC3D ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219374910,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","Here is list of questionable parts led code, comments are welcome
Some colors are hardcoded, avoiding user-configurable palette - WARNING, INDICATOR, and partially color ring. Moving them into specialColors is probably way to go.
Default (ROM based) palette is not user accessible. Color index may map both into user-defined colors and hardcoded ones (for example using negative index for hardcoded colors)
Grid size and quadrant handling works only if leds start at index 0,0. When using configurator, it is natural to use grid center as reference, but then quadrant and orientation handling does not work.
It may be better to hardcode north/south/east/west limits (possibly with wide gap in center, so that user can enough place leds that are part of any side). Grid size calculation will be a bit more complicated (min/max bounds / bitmap)
applyDirectionalModeColor - I don't understand the logic - why must be led in correct quadrant AND correct direction? Is there some use-case when this is useful ?
WARNING layer - the cycle is fixed length, even when only one warning is active. Skipping inactive warnings (instead of waiting) may be better choice.
applyLedGpsLayer - when there is no 3d fix, led alternates between GPSNOLOCK and GPSNOSATS. Is this intended? @gaelj ?
applyLedThrustRingLayer - sequence length algorithm is working only in few cases. I'll fix it ..
What if we rotate actual led colors? Let user select colors + pattern ..
applyLedAnimationLayer - Can someone explain this mode?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/gaelj,5,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219393275,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","@ledvinap

remaining hard-coded colors: indicator and color ring should indeed be user-configurable. I decided to deliberately skip Warning colors to prevent support issues.
about orange / red blinking, this was indeed not the original behaviour which was orange / black.
@digitalentity introduced it in his proposal here https://gist.github.com/digitalentity/f4f021876653acb1f7f1525024388348 and I personnaly found it better than the old method so I kept it.
if you enable USE_LED_ANIMATION, you will see what applyLedAnimationLayer does. Basically it adds a circling white LED animation, which is not configurable and in my opinion, annoying (especially when used with the new GPS mode as it acts as a distraction, makes it slightly more difficult to read the satellite count as green LED blinks). It does look pretty cool on first look though.
an additional point: specialcolors is a 1-element array. I implemented it in this way because it was easier but we could probably optimize this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219394763,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","applyLedIndicatorLayer lights only leds that are in some quadrant (SE,SW,NE,NW). Leds that are directly N/E/S/W are not affected. Is this desired behavior?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/gaelj,7,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219401449,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","I believe it is, probably due to being designed primarily for X shaped quads.
In my opinion it could be generalised to all horizontal directions, preferably in a user-configurable way.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219706392,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","There is ugly bug in master ledstrip code
applyLedWarningLayer, applyLedGpsLayer and applyLedBlinkLayer first update led state, then check updateNow flag and update internal state.
When other event is triggered before next updateNow == true call (which is expected behavior), it will apply internal state to led state, changing the led too soon. This causes too short or too long blinks and possibly blinks missing at all (GPS led problems were probably caused by this bug).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219712305,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","New version committed, ready for testing.
I'll probably rebase this branch to cleanup commits, so expect force-push.
Code size is reduced by 950B, new code is also a faster (but take that with grain of salt)
   text    data     bss     dec     hex filename
 116584    1072   13452  131108   20024 ./obj/main/cleanflight_SPARKY.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY.elf

Task list          max/us  avg/us rate/hz maxload avgload     total/ms
13 -     LEDSTRIP     363      34     100    4.1%    0.8%      1538
13 -     LEDSTRIP     242      13      94    2.7%    0.6%      1345",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,10,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219717594,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","Comparing gyro / blink total time, master is around 1.4%, new version ~ 0.95% - about 35% faster",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/gaelj,11,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-219783146,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf",I will review and test asap (hopefully still today).,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/gaelj,12,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-220194080,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","Looks all good as far as I can see. Thanks for this cleanup !
@hydra it would be nice to get this merged in 1.13 RC2 as it fixes some bugs in the LED strip handling, cleans up the code, and frees some memory, thus enabling GPS LEDs on CC3D.
#2103",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-220284421,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","Commits cleaned up, code is identical
Ready for merge",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222264002,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","great, i will review and test soon.  just got to Malaga in Spain now and set my computers back up again, hence my absence recently.
applyDirectionalModeColor - I don't understand the logic - why must be led in correct quadrant AND correct direction? Is there some use-case when this is useful ?
yes.  e.g rear facing LEDs on the front arms.  it's specifically for night-time orientation.  different colors are picked due to the position and led orientation.
the implementation still allows you to, for example, iterate over all rear-facing leds and do a color fade front to back on rear facing LEDs by row if so desired.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222388359,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","ok i gave this a whirl today but there seems to be an issue with the blink color.  it seems the blink color inherits the color from the previous led in the strip.
e.g.
led 0 white,
led 1 blink.
led 0 7,8::C:1
led 1 8,8::B:0

first led appears white,
second led is white and blinks to OFF.
led 0 white
led 2 red + blink.
led 0 7,8::C:1
led 1 8,8::CB:2

first led appears white.
second is white and blinks red.
i think the 'inherit previous LED color' is a mistake in the blink code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222388414,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","documentation says:
#### Blink

This mode blinks the current LED, alternatively from black to the selected color.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222388466,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf",a configurable color for the default state for LEDs that blink is probably the right long-term answer here.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/gaelj,18,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222391214,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","Configurable background blink is already the way it's done  :
const hsvColor_t *blinkColor = ledOn ? colors(ledConfig->color) : getSC(LED_SCOLOR_BLINKBACKGROUND);
You can set it via cli command mode_color 6 4 [colorIndex].
I tried your settings and unfortunately I can't reproduce your problem.
See also cleanflight/cleanflight-configurator#390",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,19,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222429132,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","@hydra: It may be better to apply led layers explicitly - using multiple function records for single led instead of flags. With proper encoding, this could save lot of space.
Configurator can translate from current configuration user-friendly style (with @gaelj enhancements) to this machine-optimized format ..
Something like:
led0: color(blue);
led1: indicator(left); blink(red);
led3: color(green); throttle(); warning();
led4: thrustRing(pos=1);
...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222502781,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","@gaelj thanks for the update. it looks like the board i was testing with had some garbage in the mode color configuration record as follows:
mode_color 6 4 42
mode_color 6 5 0
mode_color 6 6 45
mode_color 6 7 0

after resetting to defaults I confirm it's OK now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222506390,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf",@ledvinap that's a really good refactoring.  nice work!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222508897,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","merged, too much good stuff here to leave, further testing any more bug fixing can be done during RC2 phase.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/gaelj,23,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222537223,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","@hydra, would it be too late to merge the LED Battery and MSP mode_color PRs I issued, based on this PR ? I know they are both new features rather than bugfixes, so I'm afraid I already know the answer. :-)
MSP mode_color is required to fully take advantage of the CFC LED tab rework, and Battery color is a very nice additional feature.
I just merged these 2 PR's with the latest master, rebased and force-pushed.
#2160
#2173",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/ledvinap,24,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222538371,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","@gaelj : I would postpone #2160 a bit, so there is time to find better alternative to expanding size of led config ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/hydra,25,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222548205,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","@gaelj yes, a bit late.  since I already tagged the RC2 release 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2139,2016-05-15T16:34:16Z,2016-05-30T14:52:30Z,2016-05-30T21:48:25Z,MERGED,True,871,1161,16,https://github.com/ledvinap,Cleanup leds,7,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2139,https://github.com/gaelj,26,https://github.com/cleanflight/cleanflight/pull/2139#issuecomment-222558356,"Cleanup of ledstrip code. The changes mostly do not affect old behavior, only code is improved.
Over 500 bytes of FLASH saved:
 116984    1072   13452  131508   201b4 ./obj/main/cleanflight_SPARKY_new.elf
 117536    1072   13452  132060   203dc ./obj/main/cleanflight_SPARKY_orig.elf","No problem, I made sure the CFC LED tab rework was ""retro""-compatible with MW API 1.18.0.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2141,2016-05-15T19:50:10Z,2016-05-29T22:42:36Z,2016-05-29T23:22:53Z,MERGED,True,1,1,1,https://github.com/ledvinap,Fix dummy function prototype,1,[],https://github.com/cleanflight/cleanflight/pull/2141,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2141,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2148,This small PR should eliminate support requests for different flash chips.,This small PR should eliminate support requests for different flash chips.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,2,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-220267802,This small PR should eliminate support requests for different flash chips.,"I have a couple of question. This PR has four failed targets in Travis CI.
1.
Three are package downloading failures during environment building. Can I expect these go away on the next PR push?
2.
Another failed target is the ALIENFLIGHTF1, with 20 bytes overflow in FLASH. This is target is said to be almost identical to NAZE, but the NAZE build is more than 500 bytes smaller than ALIENFLIGHTF1. Do some one know where the extra 500 bytes came from?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-220313873,This small PR should eliminate support requests for different flash chips.,"@jflyper

normally the download failures go away on the next push.
ALIENFLIGHTF1 includes a custom octocopter mixer, that probably accounts for most of the 500 bytes",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,4,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-220339559,This small PR should eliminate support requests for different flash chips.,"@martinbudden
Thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,5,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-220381858,This small PR should eliminate support requests for different flash chips.,"The new feature is now an option CUSTOM_FLASHCHIP, and not included in any target for now (no wonder it passes the check!) If someone cares about the extension, then handling of the option should be reconsidered.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/MJ666,6,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-220463122,This small PR should eliminate support requests for different flash chips.,"It would be posible to undefine a few features for the AlienFlight F1 target (i.e. softserial ports, gps, 4wire etc.). @martinbudden looks to be the changed custom mixer code is taking more space in the flash as before the recent changes. Very strange.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223024005,This small PR should eliminate support requests for different flash chips.,"yes i like the idea, users can then do what they want and manufactuers of boards can tell users what to configure.
i think however there should also be a corresponding MSP command to configure the flash chip rather than request the users do it via the CLI.  See #922
A long term goal is to allow target specification via the configurator and not via the firmware.  This seems like a step towards that goal to me.  Think picture of board and a pop-up for blackbox/flash hardware configuration.",True,{'THUMBS_UP': ['https://github.com/JohnOCFII']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,8,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223212055,This small PR should eliminate support requests for different flash chips.,"@hydra Yes, I think I shared your vision of ""target specification via configurator"". I think it's awesome. Let me see what I can do for the MSP support.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,9,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223215923,This small PR should eliminate support requests for different flash chips.,Do we have generic MSP functionalities that deals with PGs?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/ledvinap,10,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223225530,This small PR should eliminate support requests for different flash chips.,@jflyper : There is some (proof-of-concept) code here: https://github.com/cleanflight/cleanflight/blob/master/src/main/io/msp.c#L462,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,11,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223539701,This small PR should eliminate support requests for different flash chips.,"@ledvinap
I've took a look at the PoC code. So it's a MSP-PG two way mapping service, correct?
I was imagining something like a PG manipulation facility/protocol running on top of MSP. There will be only two MSP commands, MSP_GET_PG and MSP_SET_PG. Payloads are identified with PG ids. Just like a simple RPC. Some sort of data serialization/deserialization service (and associated external generator if necessary)  will be nice. Thoughts?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223547335,This small PR should eliminate support requests for different flash chips.,"@jflyper : Yes, it makes sense, but is not implemented yet.
Some thought should be given to record versioning/profile/array handling etc, so the protocol is not obsolete too soon.
Implementing this will allow full backup/restore from CF configurator without using CLI ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,13,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223548294,This small PR should eliminate support requests for different flash chips.,"@ledvinap

Yes, it makes sense, but is not implemented yet.
Some thought should be given to record versioning/profile/array handling etc, so the protocol is not obsolete too soon.
Implementing this will allow full backup/restore from CF configurator without using CLI ...

Makes tons of sense. I'm in.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,14,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223729364,This small PR should eliminate support requests for different flash chips.,"@ledvinap
Haven't tested the SET side yet, but the GET side worked like a charm.
Two defs + one map entry = Done. Super.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,15,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-223735172,This small PR should eliminate support requests for different flash chips.,"@ledvinap
SET side verified for correct operation also.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/jflyper,16,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-226469186,This small PR should eliminate support requests for different flash chips.,ALIENFLIGHTF1 target will have NO_CUSTOM_FLASHCHIP defined now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-241826723,This small PR should eliminate support requests for different flash chips.,"ok the MSP commands have been dropped, we can wait for PG  GET/SET code as required.  Merged in the feature and the CLI changes.   I'm only enabling this feature for boards that have space for user-solderable flash chips since they are the only users that should be needing the feature - users of clone boards with different flash chips can buy original boards if they want support or compile it themselves.
This stance also solves the code-size issue too 😄   Also we avoid a double negative - #ifndef NO_CUSTOM_FLASHCHIP becomes #ifdef CUSTOM_FLASHCHIP.
The only board I know of with space for user-solderable flash chip is the NAZE32.  For good measure I'm adding CUSTOM_FLASHCHIP to the development board targets too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2148,2016-05-17T11:54:00Z,2016-08-24T17:14:13Z,2016-08-24T17:14:13Z,CLOSED,False,53,2,10,https://github.com/jflyper,Let users define flash chip specs,8,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2148,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2148#issuecomment-242141073,This small PR should eliminate support requests for different flash chips.,merged,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2150,2016-05-17T19:11:51Z,2016-05-29T22:46:04Z,2016-05-29T22:46:04Z,MERGED,True,14,3,5,https://github.com/ledvinap,Fix warnings,4,[],https://github.com/cleanflight/cleanflight/pull/2150,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2150,"Trivial fix for warnings in current code.
mavlink fix should be probably reverted when some conclusion about -Wpedantic is reached.
@hydra : Please merge this ASAP - it is so annoying to skip existing warnings when testing new code ..","Trivial fix for warnings in current code.
mavlink fix should be probably reverted when some conclusion about -Wpedantic is reached.
@hydra : Please merge this ASAP - it is so annoying to skip existing warnings when testing new code ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2151,2016-05-17T20:46:33Z,2016-06-01T15:12:53Z,2016-06-01T18:59:02Z,MERGED,True,28,6,3,https://github.com/ledvinap,Fail Travis build when PR contains warnings,2,[],https://github.com/cleanflight/cleanflight/pull/2151,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2151,"Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master","Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2151,2016-05-17T20:46:33Z,2016-06-01T15:12:53Z,2016-06-01T18:59:02Z,MERGED,True,28,6,3,https://github.com/ledvinap,Fail Travis build when PR contains warnings,2,[],https://github.com/cleanflight/cleanflight/pull/2151,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2151#issuecomment-220046589,"Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master","Added unittest handling too. Works as desired.
Checks should go fine when warnings in master are removed",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2151,2016-05-17T20:46:33Z,2016-06-01T15:12:53Z,2016-06-01T18:59:02Z,MERGED,True,28,6,3,https://github.com/ledvinap,Fail Travis build when PR contains warnings,2,[],https://github.com/cleanflight/cleanflight/pull/2151,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2151#issuecomment-223024551,"Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master","excellent, that should help the authors of PR's fix their code before we get involved.",True,{'THUMBS_UP': ['https://github.com/gaelj']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2151,2016-05-17T20:46:33Z,2016-06-01T15:12:53Z,2016-06-01T18:59:02Z,MERGED,True,28,6,3,https://github.com/ledvinap,Fail Travis build when PR contains warnings,2,[],https://github.com/cleanflight/cleanflight/pull/2151,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2151#issuecomment-223024657,"Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master","I'll merge now, hopefully master will build afterwards 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2151,2016-05-17T20:46:33Z,2016-06-01T15:12:53Z,2016-06-01T18:59:02Z,MERGED,True,28,6,3,https://github.com/ledvinap,Fail Travis build when PR contains warnings,2,[],https://github.com/cleanflight/cleanflight/pull/2151,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2151#issuecomment-223048122,"Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master","@ledvinap the build failed!
https://travis-ci.org/cleanflight/cleanflight/jobs/134477685
Can you take a look?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2151,2016-05-17T20:46:33Z,2016-06-01T15:12:53Z,2016-06-01T18:59:02Z,MERGED,True,28,6,3,https://github.com/ledvinap,Fail Travis build when PR contains warnings,2,[],https://github.com/cleanflight/cleanflight/pull/2151,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2151#issuecomment-223059089,"Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master",@hydra this should fix it: #2193,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2151,2016-05-17T20:46:33Z,2016-06-01T15:12:53Z,2016-06-01T18:59:02Z,MERGED,True,28,6,3,https://github.com/ledvinap,Fail Travis build when PR contains warnings,2,[],https://github.com/cleanflight/cleanflight/pull/2151,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2151#issuecomment-223074699,"Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master","@martinbudden nope, that didn't fix it.  PR fails to build.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2151,2016-05-17T20:46:33Z,2016-06-01T15:12:53Z,2016-06-01T18:59:02Z,MERGED,True,28,6,3,https://github.com/ledvinap,Fail Travis build when PR contains warnings,2,[],https://github.com/cleanflight/cleanflight/pull/2151,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2151#issuecomment-223091474,"Makefile will pass -Werror to gcc when building Travis Pull
request. Branches are build normally.
This PR should fail now - there are warnings in master","The problem is that CC is exported by Travis, so it get's inherited to submakefile (in make test)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2154,2016-05-18T18:38:59Z,2016-05-18T18:41:54Z,2016-05-18T18:42:22Z,CLOSED,False,24872,11372,328,https://github.com/RipperDrone,Bad 4S Battery Voltage Reading?,945,[],https://github.com/cleanflight/cleanflight/pull/2154,https://github.com/RipperDrone,1,https://github.com/cleanflight/cleanflight/pull/2154,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2157,2016-05-20T13:25:24Z,2016-07-15T08:49:16Z,2016-07-15T08:49:16Z,CLOSED,False,7,7,5,https://github.com/blckmn,Spelling correction for reevaluateLedConfig,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2157,https://github.com/blckmn,1,https://github.com/cleanflight/cleanflight/pull/2157,reevaluate spelt incorrectly.,reevaluate spelt incorrectly.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2157,2016-05-20T13:25:24Z,2016-07-15T08:49:16Z,2016-07-15T08:49:16Z,CLOSED,False,7,7,5,https://github.com/blckmn,Spelling correction for reevaluateLedConfig,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2157,https://github.com/blckmn,2,https://github.com/cleanflight/cleanflight/pull/2157#issuecomment-222665922,reevaluate spelt incorrectly.,Rebased.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2157,2016-05-20T13:25:24Z,2016-07-15T08:49:16Z,2016-07-15T08:49:16Z,CLOSED,False,7,7,5,https://github.com/blckmn,Spelling correction for reevaluateLedConfig,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2157,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2157#issuecomment-228603221,reevaluate spelt incorrectly.,Thanks for spotting this. I included the fix in #2160,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2159,2016-05-20T18:28:08Z,2016-05-29T22:37:38Z,2016-05-30T18:32:58Z,MERGED,True,1,1,1,https://github.com/gaelj,Implement BoxAirMode flag in MSP_STATUS,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2159,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2159,Fixes issue  #2156,Fixes issue  #2156,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2159,2016-05-20T18:28:08Z,2016-05-29T22:37:38Z,2016-05-30T18:32:58Z,MERGED,True,1,1,1,https://github.com/gaelj,Implement BoxAirMode flag in MSP_STATUS,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2159,https://github.com/gaelj,2,https://github.com/cleanflight/cleanflight/pull/2159#issuecomment-220687194,Fixes issue  #2156,"@hydra, I believe this PR should be merged in 1.13 RC2.
#2103",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2159,2016-05-20T18:28:08Z,2016-05-29T22:37:38Z,2016-05-30T18:32:58Z,MERGED,True,1,1,1,https://github.com/gaelj,Implement BoxAirMode flag in MSP_STATUS,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2159,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2159#issuecomment-220689683,Fixes issue  #2156,Thanks @ledvinap. Now it's nice and clean.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2159,2016-05-20T18:28:08Z,2016-05-29T22:37:38Z,2016-05-30T18:32:58Z,MERGED,True,1,1,1,https://github.com/gaelj,Implement BoxAirMode flag in MSP_STATUS,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2159,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2159#issuecomment-222264596,Fixes issue  #2156,@gaelj can you squash the commits and force push this please?  I will merge once you do it.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2159,2016-05-20T18:28:08Z,2016-05-29T22:37:38Z,2016-05-30T18:32:58Z,MERGED,True,1,1,1,https://github.com/gaelj,Implement BoxAirMode flag in MSP_STATUS,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2159,https://github.com/gaelj,5,https://github.com/cleanflight/cleanflight/pull/2159#issuecomment-222277945,Fixes issue  #2156,@hydra : squash done,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2159,2016-05-20T18:28:08Z,2016-05-29T22:37:38Z,2016-05-30T18:32:58Z,MERGED,True,1,1,1,https://github.com/gaelj,Implement BoxAirMode flag in MSP_STATUS,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2159,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2159#issuecomment-222387003,Fixes issue  #2156,"@gaelj thanks, merging.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2160,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,2,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220772932,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","After some test-flying, I decided that simple binding to hue was insufficient.
The last commit now sets LED colors to green, orange and red (configurable).
When battery level is not OK, LEDs will start flashing at a speed depending on the remaining battery level.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220779170,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@gaelj  : Led code is getting too complicated.
Extending flags to 32b will double the size of ledConfig (structure alignment), that's 64 bits per led, most of them wasted.
Position+direction takes 14 bits, but only 4 bits are needed for orientation and 3 bits for flight_mode, all other modes ignore this.
10 bits are  used for functions, but only few combinations make sense.
As for battery layer - allocating special colors is probably overkill - it may be better to hardcode colors, using interpolation over larger HSV range.
Use calculateBatteryCapacityRemainingPercentage for color (its stable and even virtual current sensor is quite accurate), use voltage for blinking.
Ad changing blinking frequency on low voltage .. maybe using one frequency for warning and second for critical is enough.
When mapping linear range to frequency, use 1/x (as in throttle/orientation). Direct mapping won't work well (relative change of frequency will decrease very quickly). Logarithm may be even better, but expensive.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,4,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220783725,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@ledvinap: what about splitting flags into 2 variables, one 8 and one 16 bit ?
    // uint32_t flags; // see LED_FLAG_FUNCTION + LED_FLAG_DIRECTION
    uint16_t function_flags; // see LED_FLAG_FUNCTION
    uint8_t direction_flags; // see LED_FLAG_DIRECTION

A few adaptations will be required though.
Any other ideas ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,5,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220798775,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","I'm testing an improved version taking all of your comments into account.
Only problem is, I have a problem with calculateBatteryCapacityRemainingPercentage(). I don't have a current sensor and it seems to give out always the same value, so for now I'm using calculateBatteryPercentage().",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220824525,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",You have to setup virtual current sensor. It estimates current from motor throttle and is surprisingly accurate when calibrated..,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,7,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220826267,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@ledvinap, using the virtual current sensor will indeed be very good here. Once again, I thank you for showing me the right direction.
But this feature is not working ""out of the box"" as it needs CLI setup and some calibration on behalf of the user.
Of course the documentation will have to mention this, but I'm concerned some users will not be able to benefit.
A solution could be to make it configurable via a new CLI parameter, such as led_battery_source which could then be VOLTAGE (default) or CAPACITY.
Would you agree ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,8,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220832166,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","I've calibrated my current sensor, and updated the function, it does work really well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220920616,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","Did you try voltage based indication? In my experience voltage fluctuates a lot depending on current drawn.
It's fine with beeper/blinking - you notice that battery drops below threshold, but ignore it until it happens too often. I can't imagine how this would work with led color ..
Making it configurable does not make much sense - if it is desired, just implement two FUNCTIONS, one for voltage, one for capacity. Using virtual current sensor is probably superior, but capacity estimation may need some improvement (connection of partially charged battery, different battery capacities etc)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,10,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-220961173,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","I tested both, it's much better with capacity instead of voltage. So I kept it that way, non configurable.
In the meantime I also stopped stripping the top and low 20% and did some testing.
I'll do a final release this evening with these few final changes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,11,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-222558717,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@ledvinap
Cleanup leds size :
text    data     bss     dec     hex filename
118084     980   15172  134236   20c5c ./obj/main/cleanflight_SPRACINGF3.elf
LED strips battery level size :
text    data     bss     dec     hex filename
118244     980   15240  134464   20d40 ./obj/main/cleanflight_SPRACINGF3.elf
It's getting better...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,12,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-223808306,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",Rebased against current master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,13,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-224091217,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@ledvinap, I'd be keen on having some of your advice to carry on with this one.
What about using something like this for the led configs :
 typedef struct ledConfig_s {
     uint8_t xy;     // see LED_X/Y_MASK defines
     uint8_t color;  // see colors (config_master)
     uint8_t direction_flags; // see LED_FLAG_DIRECTION
     uint8_t overlay_function_flags; // see LED_FUNCTION & LED_FLAG_OVERLAY
 } ledConfig_t;

With the first 4 bits of overlay_function_flags each representing an overlay flag (warning, indicator, hue shift, ...) and the last 4 bits define a base function ID.
This is possible as, apart from the special overlay functions, all other functions can only be used on their own. This was the guiding idea behind the CF configurator update as well.
This would allow for 16 LED functions, each with up to 4 simultaneous overlay layers.
But it would still be an array of flags. What did you have in mind in your comment in the cleanup leds thread ?

using multiple function records for single led instead of flags
Thanks :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-224621771,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@gaelj : it will work. You should consider if overlay is function-specific or global. Also 2 bits are left in direction byte ..
The idea was to have function+parameters+led encoded in ledConfig (with function-specific parameters). That way multiple ledConfigs can be applied to single LED, each specifying single function, with considerably shorter encoding.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,15,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225433612,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@ledvinap, I worked quite extensively on ledstrip.c these last few days.
I added new overlays: Larson Scanner (O) (based on #733 with optimizations) and Flash on landing (N).
I tried to get flash and RAM footprints as low as possible. Unfortunately some of the beauty of your code was lost in the process (applying each layer by looping on an array of function pointers): sorry about that.
It will require a configurator update as MSP_LED_STRIP_CONFIG now just needs a single uint32_t.
I'd be very glad to read your feedback.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,16,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225434143,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",still todo: fix doc & fix unit tests,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,17,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225434219,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@gaelj yay! can't wait to test the larson scanner!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,18,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225434534,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@skaman82
cleanflight_SPRACINGF3.zip",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,19,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225435052,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","Please note that Larson is an overlay so you need to define the base function as well.
For example
led 0 6,12:SU:ATOW:0
This would configure LED 0 as:

showing arming status
change color according to throttle
change brightness according to larson scanner
on top of all that, add the warning overlay

I have to say this combination looks pretty cool !",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,20,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225436257,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@gaelj Yes this is pretty cool. Could you speed up the larson scanner a bit? I think it should run a bit quicker like this one: https://www.youtube.com/watch?v=NPAqGgYpb4A,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,21,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225437772,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@gaelj BTW: can't get battery level LEDs to work. They are always pink. Does this function works with VBAT like the Configurator indicators?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,22,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225438955,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","You need to set up your battery and current sensor.
In my case, after calibration:
set battery_capacity = 5000
set current_meter_type = VIRTUAL
set current_meter_scale = 425
set current_meter_offset = 117",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,23,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225440613,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",I bound the Larsen scanner speed to the throttle valye once it's armed. I can increase the minimum speed of course.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,24,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225440982,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@ i find it better if the speed of this effect were independent from throttle value,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,25,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225447413,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",Larson scanner speed is now static and faster than previous default speed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,26,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225448611,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","Why am I getting different memory footprint values in cygwin, compared to the actual travis server ?
Cygwin:
118574     980   14724  134278   20c86 ./obj/main/cleanflight_SPRACINGF3.elf
Travis-ci:
118524        984   15184  134692   20e24 ./obj/main/cleanflight_SPRACINGF3.elf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,27,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225686529,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",Seems this version breaks compatibility when flashing: the board freezes after updating from 1.13.0 unless a full erase is performed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,28,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225688071,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",The LED-Tab also hangs an I nave the impression that larson scanner is the same speed as before,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/ledvinap,29,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225693041,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@gaelj : Sorry, too busy lately. I'll get to this tomorrow (I hope)...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,30,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225724837,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@skaman82 yes this is normal, the new LED format changes MSP format of LED configuration, meaning it is incompatible with the current configurator LED tab. CLI works, though.
I have a compatible configurator under progress.
Regarding Larson scanner, the speed is defined by 2 values (ledstrip.c#860):
    if (updateNow) {
        larsonScannerNextStep(&larsonParameters, 24);
        *timer += LED_STRIP_HZ(50);
    }

Color Value is increased by steps of 24 (instead of 10). Another possibility is to increase the refresh rate (LED_STRIP_HZ) above 50, this will make it smoother than increasing the step value, but also heavier on CPU.
Are you able to compile yourself now ? Or do you need an up-to-date hex ?
I have a strong feeling that this PR will still be heavily modified... @ledvinap 🙏",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,31,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225726141,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@gaelj thanks I play with the settings a bit,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,32,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225729750,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","I am too. 50HZ runs at 0,6 CPU, 100HZ runs at 1,5 CPU here (F3). Seems expensive. A step value of 48 is fairly fast.
Speed can also be made configurable of course.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,33,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-225730467,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","I am getting good result with
larsonScannerNextStep(&larsonParameters, 15);
*timer += LED_STRIP_HZ(60);
but will test more tomorrow",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,34,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-227858569,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","I've made a last cleanup including all remarks. @ledvinap probably will want to review this before merging.
This update requires full chip erase when updating, I'm not sure how this can be fixed as it's a side-effect of the memory optimization.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/ledvinap,35,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-227961972,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","Great work!
Parameter group have 4bits for version - is should be possible to bump version for each group with incompatible change (and PG shall be fixed if it does not work)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,36,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-227978129,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",Final updates this evening then. Thanks @ledvinap!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,37,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-228186486,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@ledvinap thanks very much ! All done.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,38,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-228471084,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","@hydra, @ledvinap, @skaman82, I think this is all good now.
I'm now working on the Betaflight and iNav ports.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,39,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-230164390,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@hydra @ledvinap  can we merge this?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,40,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-230871767,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@gaelj Could you please fix the conflicts?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,41,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-231039249,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",I'm on vacation this week. Next week I'll rebase & fix conflicts here and in BF. Hopefully it will get merged this time...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,42,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-232138016,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",rebased.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,43,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-232473280,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@hydra could you please merge this before it fells of the wagon again? It is tested and working well.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,44,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-233741272,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","Just rebased to latest master, no problems.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/hydra,45,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-234733945,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",@gaelj thanks for rebase.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/hydra,46,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-234734750,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.","ok, merged.  I note there was a conflict with the values of MSP_(SET_)LED_STRIP_MODECOLOR values.
I used:
#define MSP_LED_STRIP_MODECOLOR         86 //out message         Get LED strip mode_color settings
#define MSP_SET_LED_STRIP_MODECOLOR     87 //in message          Set LED strip mode_color settings

@gaelj @martinbudden @borisbstyle is this correct or should they be different?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/gaelj,47,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-234735859,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",I had to change those values to be betaflight compatible. The configurator also uses these new vales. In my opinion you should use the updated values.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2160,2016-05-21T00:50:11Z,2016-07-23T19:06:55Z,2016-07-29T15:23:28Z,MERGED,True,660,448,9,https://github.com/gaelj,LED strip rework + battery + larson scanner + blink on landing,5,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2160,https://github.com/skaman82,48,https://github.com/cleanflight/cleanflight/pull/2160#issuecomment-234736905,"Fixes #287 with a new function 'L' that binds LED hue to battery level.
Depends on merge of @ledvinap's LED cleanup.
@skaman82, configurator update will follow.",I am glad that this PR is finally merged. Great job @gaelj,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2164,2016-05-23T12:37:01Z,2016-05-31T12:04:14Z,2016-05-31T12:04:29Z,MERGED,True,10,0,1,https://github.com/tigert,mention ModemMAnager taking over some boards,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2164,https://github.com/tigert,1,https://github.com/cleanflight/cleanflight/pull/2164,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2164,2016-05-23T12:37:01Z,2016-05-31T12:04:14Z,2016-05-31T12:04:29Z,MERGED,True,10,0,1,https://github.com/tigert,mention ModemMAnager taking over some boards,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2164,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2164#issuecomment-222668780,,thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2167,2016-05-24T13:31:16Z,2016-05-24T17:03:31Z,2016-05-24T17:03:31Z,CLOSED,False,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),2,[],https://github.com/cleanflight/cleanflight/pull/2167,https://github.com/hori64,1,https://github.com/cleanflight/cleanflight/pull/2167,fix this issue,fix this issue,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2167,2016-05-24T13:31:16Z,2016-05-24T17:03:31Z,2016-05-24T17:03:31Z,CLOSED,False,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),2,[],https://github.com/cleanflight/cleanflight/pull/2167,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2167#issuecomment-221272108,fix this issue,"@hydra: This scaling is used in OpenTX, should be merged: https://github.com/opentx/opentx/blob/master/radio/src/telemetry/frsky_sport.cpp#L80",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2167,2016-05-24T13:31:16Z,2016-05-24T17:03:31Z,2016-05-24T17:03:31Z,CLOSED,False,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),2,[],https://github.com/cleanflight/cleanflight/pull/2167,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2167#issuecomment-221287691,fix this issue,"@hori64 : Sorry, I did not check properly - you must use GPS_speed variable, this is not iNav ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2167,2016-05-24T13:31:16Z,2016-05-24T17:03:31Z,2016-05-24T17:03:31Z,CLOSED,False,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),2,[],https://github.com/cleanflight/cleanflight/pull/2167,https://github.com/hori64,4,https://github.com/cleanflight/cleanflight/pull/2167#issuecomment-221304302,fix this issue,"I was distracted, I'm sorry
I corrected, but I do not know what to do.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2167,2016-05-24T13:31:16Z,2016-05-24T17:03:31Z,2016-05-24T17:03:31Z,CLOSED,False,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),2,[],https://github.com/cleanflight/cleanflight/pull/2167,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2167#issuecomment-221306144,fix this issue,"You can rewrite history and force-push to your branch. But squashing the PR during merge is simpler in this trivial case.
BTW: It's better to create new branch for each pull request .. git has some learning curve, but it's extremely powerful when learn how to use it ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2168,2016-05-24T15:56:12Z,2016-10-13T07:31:54Z,2016-10-13T07:32:02Z,MERGED,True,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2168,https://github.com/hori64,1,https://github.com/cleanflight/cleanflight/pull/2168,Second try,Second try,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2168,2016-05-24T15:56:12Z,2016-10-13T07:31:54Z,2016-10-13T07:32:02Z,MERGED,True,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2168,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2168#issuecomment-221320646,Second try,Will do ;-),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2168,2016-05-24T15:56:12Z,2016-10-13T07:31:54Z,2016-10-13T07:32:02Z,MERGED,True,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2168,https://github.com/hori64,3,https://github.com/cleanflight/cleanflight/pull/2168#issuecomment-221331017,Second try,THX!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2168,2016-05-24T15:56:12Z,2016-10-13T07:31:54Z,2016-10-13T07:32:02Z,MERGED,True,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2168,https://github.com/fredmcc,4,https://github.com/cleanflight/cleanflight/pull/2168#issuecomment-244622185,Second try,Would be great to get this change merged. I tried it with my Taranis and confirm it fixes my ground speed issue.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2168,2016-05-24T15:56:12Z,2016-10-13T07:31:54Z,2016-10-13T07:32:02Z,MERGED,True,4,2,1,https://github.com/hori64,Smart Port telemetry GPS ground speed unit is not applicable. (#2166),1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2168,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2168#issuecomment-253436807,Second try,"thanks for feedback, merging!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/andre92,1,https://github.com/cleanflight/cleanflight/pull/2171,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-221820890,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","This will fix #2165, so I'll merge it soon unless there are objections/better fix.
rcData/rcCommand design is terrible, it should be improved soon ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-221821972,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed",@andre92 : I assume headfree mode is totally unusable without 20157d9?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/andre92,4,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-221823376,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","yes, totally unusable, this fix is important. I tried to reproduce the error and it gave stuttering motors just like the issue with throttle. the program tried to update rcCommand for roll and pitch based on the one from previous loop instead of the one based from receiver. I compiled my patch and just flew it, all fixed :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/queaker,5,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-221830921,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","Hi.
I'm new to the cleanflight project. Sorry, if'm asking dump questions, but what the heck is going on here? Here is a part of the changed code.
int32_t tmp, tmp2;
tmp = (uint32_t)(tmp - rxConfig()->mincheck) * PWM_RANGE_MIN / (PWM_RANGE_MAX - rxConfig()->mincheck);       // [MINCHECK;2000] -> [0;1000]
Assignment of an unsigned int value to a signed int variable?
tmp2 = tmp / 100;
rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
Creating tmp2 as tmp/100, and using it later to always set the part ""(tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1]"" to zero?
Greetings from Germany",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/andre92,6,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-221835616,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","Hi.
I'm new to the cleanflight project. Sorry, if'm asking dump questions, but what the heck is going on here? Here is a part of the changed code.
int32_t tmp, tmp2;
tmp = (uint32_t)(tmp - rxConfig()->mincheck) * PWM_RANGE_MIN / (PWM_RANGE_MAX - rxConfig()->mincheck); // [MINCHECK;2000] -> [0;1000]
Assignment of an unsigned int value to a signed int variable?
tmp2 = tmp / 100;
rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100; // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
Creating tmp2 as tmp/100, and using it later to always set the part ""(tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1]"" to zero?
Greetings from Germany

That is a good question. To be honest, I don't know why it is casted to unsigned during calculation. I did not write that part, I only moved it to the correct place. Before CF1.12, this piece of code was working properly so I left it as it was",True,{'LAUGH': ['https://github.com/queaker']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-221837361,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","@queaker: This us usually multiwii legacy ..
First one is simple mapping from interval of mincheck .. PWM_RANGE_MAX to '0 .. 1000'. Someone replaced 1000 with PWM_RANGE_MIN to 'improve' code readability ( PWM_RANGE_MAX - PWM_RANGE_MIN shall be used) ...
The (uint32_t)cast does not make any sense. it's probably something left from old code when tmp was unsigned and compiler was complaining.
Second is piece-wise linear mapping using lookupThrottleRC table. It interpolates between lookupThrottleRC[ceil(tmp/100)] and lookupThrottleRC[ceil(tmp/100) + 1] (using 2 decimal places fixed point arithmetic)
Some part of CF are heaps of well-aged manure ... It can be quite frustrating, but the situation is improving slowly (sometimes being replaces with int sumTwoIntegerNumbersWithoutAnySideEffects(uint8_t a, uint16_t b) { int firstUint8ConvertedParameter = (int)a; int secondUint16ConvertedParameter = (int)b; int intSumOfTwoNumbersResult; intSumOfTwoNumbersResult = firstUint8ConvertedParameter; intSumOfTwoNumbersResult = intSumOfTwoNumbersResult + secondUint16ConvertedParameter; return (int)intSumOfTwoNumbersResult; } style :-( )",True,{'LAUGH': ['https://github.com/andre92']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/queaker,8,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-221839146,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed",Thanks @ledvinap.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-221840897,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","Ok, merged.
@hydra: v1.13-RC2 should be released immediately",True,{'THUMBS_UP': ['https://github.com/kgustine']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-222267601,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed",@ledvinap @queaker agreed.  seems the original problem came from @DzikuVx via PR #1990,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/martinbudden,11,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-222315292,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","@ledvinap , @hydra
I've had a look at this and I think there will still be a problem for fixed wing aircraft. My reasoning is as follows:

there was a problem for altHold for multi rotor aircraft because applyMultirotorAltHold relied on rcCommand[THROTTLE] being set
applyFixedWingAltHold looks like it relies on rcCommand[PITCH] being set
therefore there is probably a problem with altHold for fixed wing aircraft

Does that seem right? If so, the safest course is probably to revert the whole of PR #1990",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-222328356,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","@martinbudden : Yes, good catch.
I would prefer to fix rcData/rcCommand dataflow instead of reverting to old and ugly code.
One options is to enable rc_smoothing unconditionally until this is resolved.
Or update rcSmoothing function to cache and set rcCommand when not enabled..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/andre92,13,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-222328660,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","agreed with @martinbudden and @ledvinap
my apologies, I fly multirotors only and forgot to look at the fixed wing part but you are absolutely right. rcCommands should be set every loop. It will make for smoother operation especially in headfree and althold mode. I would opt for reverting #1990 because that is where the bugs started
rcSmoothing will not help this at all. and I'm not sure it even works with serial receivers",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2171,2016-05-26T09:14:16Z,2016-05-26T10:57:51Z,2016-05-29T05:25:40Z,MERGED,True,9,9,1,https://github.com/andre92,Update mw.c,2,[],https://github.com/cleanflight/cleanflight/pull/2171,https://github.com/martinbudden,14,https://github.com/cleanflight/cleanflight/pull/2171#issuecomment-222343501,"update rcCommand[throttle] every loop, to fix this issue: #2165
update rcCommand roll and pitch only when new RX data arrives to fix this issue: #2149
I think these 2 got accidentally reversed","I've created PR #2176 to fix this.
@ledvinap , I agree that this should be cleaned up properly, however the time for any large scale cleanup is not just before a release. My PR has some minor renaming and comments to help ensure this doesn't get broken again. In particular annexCode has been renamed to updateRcCommands and the code to update the LEDs has safely split out. Additionally gyro.temperature() is now directly called within taskMainPidLoop.
As for better cleanup, I have a few changes ready for 1.14. (This is indeed convoluted code and needs a bit of sorting out.)
@ledvinap , can you merge in this PR?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2173,2016-05-27T20:58:52Z,2016-06-01T15:00:56Z,2016-06-01T17:05:05Z,MERGED,True,49,4,3,https://github.com/gaelj,Implement LEDStripModeColor messages in MSP,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2173,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2173,"Implement new MSP messages :

MSP_LED_STRIP_MODECOLOR
MSP_SET_LED_STRIP_MODECOLOR

Additionally, in MSP_SET_LED_COLORS, check color HSV validity before appplying it.
Based on @ledvinap's Ledstrip Cleanup.","Implement new MSP messages :

MSP_LED_STRIP_MODECOLOR
MSP_SET_LED_STRIP_MODECOLOR

Additionally, in MSP_SET_LED_COLORS, check color HSV validity before appplying it.
Based on @ledvinap's Ledstrip Cleanup.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2173,2016-05-27T20:58:52Z,2016-06-01T15:00:56Z,2016-06-01T17:05:05Z,MERGED,True,49,4,3,https://github.com/gaelj,Implement LEDStripModeColor messages in MSP,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2173,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2173#issuecomment-223020902,"Implement new MSP messages :

MSP_LED_STRIP_MODECOLOR
MSP_SET_LED_STRIP_MODECOLOR

Additionally, in MSP_SET_LED_COLORS, check color HSV validity before appplying it.
Based on @ledvinap's Ledstrip Cleanup.","merged this, it makes sense to have this now as a configurator update is coming that will leverage this new code.",True,{'LAUGH': ['https://github.com/gaelj']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2173,2016-05-27T20:58:52Z,2016-06-01T15:00:56Z,2016-06-01T17:05:05Z,MERGED,True,49,4,3,https://github.com/gaelj,Implement LEDStripModeColor messages in MSP,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2173,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2173#issuecomment-223021043,"Implement new MSP messages :

MSP_LED_STRIP_MODECOLOR
MSP_SET_LED_STRIP_MODECOLOR

Additionally, in MSP_SET_LED_COLORS, check color HSV validity before appplying it.
Based on @ledvinap's Ledstrip Cleanup.",@gaelj See #2191,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2174,2016-05-28T00:06:26Z,2016-06-05T02:28:45Z,2016-06-05T11:04:12Z,MERGED,True,2,2,1,https://github.com/gaelj,Use lf EOL for travis and make files,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2174,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2174,Fixes #2152,Fixes #2152,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2174,2016-05-28T00:06:26Z,2016-06-05T02:28:45Z,2016-06-05T11:04:12Z,MERGED,True,2,2,1,https://github.com/gaelj,Use lf EOL for travis and make files,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2174,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2174#issuecomment-222668111,Fixes #2152,squash please,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2174,2016-05-28T00:06:26Z,2016-06-05T02:28:45Z,2016-06-05T11:04:12Z,MERGED,True,2,2,1,https://github.com/gaelj,Use lf EOL for travis and make files,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2174,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2174#issuecomment-222757396,Fixes #2152,"@hydra : branch is now squash-rebased and force pushed.
Thanks !",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2174,2016-05-28T00:06:26Z,2016-06-05T02:28:45Z,2016-06-05T11:04:12Z,MERGED,True,2,2,1,https://github.com/gaelj,Use lf EOL for travis and make files,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2174,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2174#issuecomment-222895094,Fixes #2152,"@gaelj , minor comment - the .gitattributes does not have an newline character at the end of the file. It's generally good practice to ensure text files end with newline (not having the newline character can cause problems with some linux tools).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2174,2016-05-28T00:06:26Z,2016-06-05T02:28:45Z,2016-06-05T11:04:12Z,MERGED,True,2,2,1,https://github.com/gaelj,Use lf EOL for travis and make files,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2174,https://github.com/gaelj,5,https://github.com/cleanflight/cleanflight/pull/2174#issuecomment-222918758,Fixes #2152,Oh right - I'll correct that later on today.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2174,2016-05-28T00:06:26Z,2016-06-05T02:28:45Z,2016-06-05T11:04:12Z,MERGED,True,2,2,1,https://github.com/gaelj,Use lf EOL for travis and make files,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2174,https://github.com/gaelj,6,https://github.com/cleanflight/cleanflight/pull/2174#issuecomment-223064457,Fixes #2152,Corrected,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2176,2016-05-29T05:17:16Z,2016-05-29T22:32:56Z,2016-05-30T04:21:09Z,MERGED,True,22,20,1,https://github.com/martinbudden,Fixed handling of rcCommands[] in main pid loop.,1,[],https://github.com/cleanflight/cleanflight/pull/2176,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2176,This fixes the alt hold bug for fixed wing aircraft as discussed in PR #2171,This fixes the alt hold bug for fixed wing aircraft as discussed in PR #2171,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2176,2016-05-29T05:17:16Z,2016-05-29T22:32:56Z,2016-05-30T04:21:09Z,MERGED,True,22,20,1,https://github.com/martinbudden,Fixed handling of rcCommands[] in main pid loop.,1,[],https://github.com/cleanflight/cleanflight/pull/2176,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2176#issuecomment-222356809,This fixes the alt hold bug for fixed wing aircraft as discussed in PR #2171,Looks good,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2176,2016-05-29T05:17:16Z,2016-05-29T22:32:56Z,2016-05-30T04:21:09Z,MERGED,True,22,20,1,https://github.com/martinbudden,Fixed handling of rcCommands[] in main pid loop.,1,[],https://github.com/cleanflight/cleanflight/pull/2176,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2176#issuecomment-222386763,This fixes the alt hold bug for fixed wing aircraft as discussed in PR #2171,"@ledvinap @martinbudden thanks, merging.  will do a couple more merges and create new RC.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2178,2016-05-29T05:29:30Z,2016-05-29T22:36:25Z,2016-05-30T04:21:53Z,MERGED,True,55,55,7,https://github.com/martinbudden,Fix for DTerm scaling in pid_luxfloat to match pid_mwrewrite.,1,[],https://github.com/cleanflight/cleanflight/pull/2178,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2178,Fixes issue #2177,Fixes issue #2177,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2178,2016-05-29T05:29:30Z,2016-05-29T22:36:25Z,2016-05-30T04:21:53Z,MERGED,True,55,55,7,https://github.com/martinbudden,Fix for DTerm scaling in pid_luxfloat to match pid_mwrewrite.,1,[],https://github.com/cleanflight/cleanflight/pull/2178,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2178#issuecomment-222386917,Fixes issue #2177,"@martinbudden great, nice to have the tests to prove it too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2182,2016-05-30T23:29:09Z,2016-06-01T11:04:26Z,2016-06-01T17:11:20Z,MERGED,True,7,0,1,https://github.com/gaelj,Doc: disabled-arming conditions,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2182,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2182,"Doc: list disabled arming conditions
Add SPRF3Evo to travis build targets","Doc: list disabled arming conditions
Add SPRF3Evo to travis build targets",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2182,2016-05-30T23:29:09Z,2016-06-01T11:04:26Z,2016-06-01T17:11:20Z,MERGED,True,7,0,1,https://github.com/gaelj,Doc: disabled-arming conditions,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2182,https://github.com/gaelj,2,https://github.com/cleanflight/cleanflight/pull/2182#issuecomment-222763606,"Doc: list disabled arming conditions
Add SPRF3Evo to travis build targets","Just removed ""Add SPRF3Evo to travis build targets"" as it has already been included yesterday.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2182,2016-05-30T23:29:09Z,2016-06-01T11:04:26Z,2016-06-01T17:11:20Z,MERGED,True,7,0,1,https://github.com/gaelj,Doc: disabled-arming conditions,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2182,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2182#issuecomment-222960958,"Doc: list disabled arming conditions
Add SPRF3Evo to travis build targets","thanks for adding that list.
I would like to update the LED/STATUS lights so they show different patterns for each condition as it's a common cause of questions by new users.  If you want to have a go at that it would be most welcomed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2182,2016-05-30T23:29:09Z,2016-06-01T11:04:26Z,2016-06-01T17:11:20Z,MERGED,True,7,0,1,https://github.com/gaelj,Doc: disabled-arming conditions,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2182,https://github.com/gaelj,4,https://github.com/cleanflight/cleanflight/pull/2182#issuecomment-223060909,"Doc: list disabled arming conditions
Add SPRF3Evo to travis build targets","Good idea. I know I would have like that feature very much when my Naze32 wouldn't arm when GPS was present, due to CPU overload.
Only the Status LEDs ? Or LED strip as well ? And maybe include the information in some MSP message as well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2183,2016-05-31T08:01:32Z,2016-06-01T15:04:42Z,2016-06-01T15:04:42Z,MERGED,True,1,0,1,https://github.com/ledvinap,Set rxRefreshRate for RX_MSP,1,[],https://github.com/cleanflight/cleanflight/pull/2183,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2183,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2183,2016-05-31T08:01:32Z,2016-06-01T15:04:42Z,2016-06-01T15:04:42Z,MERGED,True,1,0,1,https://github.com/ledvinap,Set rxRefreshRate for RX_MSP,1,[],https://github.com/cleanflight/cleanflight/pull/2183,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2183#issuecomment-222960545,,is it unset/default right now?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2183,2016-05-31T08:01:32Z,2016-06-01T15:04:42Z,2016-06-01T15:04:42Z,MERGED,True,1,0,1,https://github.com/ledvinap,Set rxRefreshRate for RX_MSP,1,[],https://github.com/cleanflight/cleanflight/pull/2183,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2183#issuecomment-222964123,,"Without this, it is zero. RcFiltering does not work, complicating testing ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2183,2016-05-31T08:01:32Z,2016-06-01T15:04:42Z,2016-06-01T15:04:42Z,MERGED,True,1,0,1,https://github.com/ledvinap,Set rxRefreshRate for RX_MSP,1,[],https://github.com/cleanflight/cleanflight/pull/2183,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2183#issuecomment-223021928,,"ok great, well spotted.  will merge now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2184,2016-05-31T18:01:09Z,2016-06-01T10:26:57Z,2016-06-01T18:25:53Z,MERGED,True,8,8,1,https://github.com/gaelj,Documentation update Battery.md after some CLI changes,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2184,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2184,Fixes #2010.,Fixes #2010.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2184,2016-05-31T18:01:09Z,2016-06-01T10:26:57Z,2016-06-01T18:25:53Z,MERGED,True,8,8,1,https://github.com/gaelj,Documentation update Battery.md after some CLI changes,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2184,https://github.com/gaelj,2,https://github.com/cleanflight/cleanflight/pull/2184#issuecomment-222796767,Fixes #2010.,I'm going through all .md files looking for such things to correct. Expect more commits :),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2184,2016-05-31T18:01:09Z,2016-06-01T10:26:57Z,2016-06-01T18:25:53Z,MERGED,True,8,8,1,https://github.com/gaelj,Documentation update Battery.md after some CLI changes,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2184,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2184#issuecomment-222953637,Fixes #2010.,great thanks @gaelj good work! everything helps.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2190,2016-06-01T14:04:31Z,2016-06-01T15:04:07Z,2016-06-01T19:02:01Z,MERGED,True,1,0,1,https://github.com/theRealc2c2,Update Spektrum bind.md,1,[],https://github.com/cleanflight/cleanflight/pull/2190,https://github.com/theRealc2c2,1,https://github.com/cleanflight/cleanflight/pull/2190,Added Lemon RX DSMX/DX6i to sat/trans combinations,Added Lemon RX DSMX/DX6i to sat/trans combinations,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2193,2016-06-01T17:02:45Z,2016-06-02T17:11:58Z,2016-06-02T17:45:42Z,CLOSED,False,3,3,2,https://github.com/martinbudden,Fixed makefile for unit tests.,2,[],https://github.com/cleanflight/cleanflight/pull/2193,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2193,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2193,2016-06-01T17:02:45Z,2016-06-02T17:11:58Z,2016-06-02T17:45:42Z,CLOSED,False,3,3,2,https://github.com/martinbudden,Fixed makefile for unit tests.,2,[],https://github.com/cleanflight/cleanflight/pull/2193,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2193#issuecomment-223074599,,@martinbudden build failed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2193,2016-06-01T17:02:45Z,2016-06-02T17:11:58Z,2016-06-02T17:45:42Z,CLOSED,False,3,3,2,https://github.com/martinbudden,Fixed makefile for unit tests.,2,[],https://github.com/cleanflight/cleanflight/pull/2193,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2193#issuecomment-223087193,,"@hydra,
the error is a linker error. It builds fine on my machine (a Mac), so the error is probably something to do with the parameter groups, i.e.
# Determine the OS and set up the parameter group linker flags accordingly
UNAME := $(shell uname -s)
ifeq ($(UNAME), Darwin)
PG_FLAGS = -Wl,-map,$(OBJECT_DIR)/$@.map
else
PG_FLAGS = -Wl,-T,$(TEST_DIR)/parameter_group.ld -Wl,-Map,$(OBJECT_DIR)/$@.map
endif

This means I can't really troubleshoot this any further.
@ledvinap any ideas?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2193,2016-06-01T17:02:45Z,2016-06-02T17:11:58Z,2016-06-02T17:45:42Z,CLOSED,False,3,3,2,https://github.com/martinbudden,Fixed makefile for unit tests.,2,[],https://github.com/cleanflight/cleanflight/pull/2193,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2193#issuecomment-223220729,,"@hydra,
although this doesn't fix all the problems, it nevertheless should be merged in, since it fixes some of them.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2193,2016-06-01T17:02:45Z,2016-06-02T17:11:58Z,2016-06-02T17:45:42Z,CLOSED,False,3,3,2,https://github.com/martinbudden,Fixed makefile for unit tests.,2,[],https://github.com/cleanflight/cleanflight/pull/2193,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2193#issuecomment-223297841,,"@hydra , @ledvinap this is now working with FAIL_ON_WARNINGS set.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2193,2016-06-01T17:02:45Z,2016-06-02T17:11:58Z,2016-06-02T17:45:42Z,CLOSED,False,3,3,2,https://github.com/martinbudden,Fixed makefile for unit tests.,2,[],https://github.com/cleanflight/cleanflight/pull/2193,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2193#issuecomment-223345349,,"@martinbudden : The idea was to set FAIL_ON_WARNINGS only when building PR, but build normally when building CF branches..
Moving PR detection code from Makefile to .travis.sh is probably best option ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2193,2016-06-01T17:02:45Z,2016-06-02T17:11:58Z,2016-06-02T17:45:42Z,CLOSED,False,3,3,2,https://github.com/martinbudden,Fixed makefile for unit tests.,2,[],https://github.com/cleanflight/cleanflight/pull/2193,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2193#issuecomment-223354036,,@martinbudden : #2194,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2193,2016-06-01T17:02:45Z,2016-06-02T17:11:58Z,2016-06-02T17:45:42Z,CLOSED,False,3,3,2,https://github.com/martinbudden,Fixed makefile for unit tests.,2,[],https://github.com/cleanflight/cleanflight/pull/2193,https://github.com/martinbudden,8,https://github.com/cleanflight/cleanflight/pull/2193#issuecomment-223358049,,"@ledvinap , OK, I'll withdraw this PR in favour of yours.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2194,2016-06-01T19:10:03Z,2016-06-05T02:13:03Z,2016-06-05T02:13:03Z,MERGED,True,10,14,3,https://github.com/ledvinap,Fix submakefile inheriting CC etc,3,[],https://github.com/cleanflight/cleanflight/pull/2194,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2194,This should help with make test failing. But something more elegant will be nice ...,This should help with make test failing. But something more elegant will be nice ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2194,2016-06-01T19:10:03Z,2016-06-05T02:13:03Z,2016-06-05T02:13:03Z,MERGED,True,10,14,3,https://github.com/ledvinap,Fix submakefile inheriting CC etc,3,[],https://github.com/cleanflight/cleanflight/pull/2194,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2194#issuecomment-223107345,This should help with make test failing. But something more elegant will be nice ...,"-Werror is disabled for unittest now, build succeeds ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2194,2016-06-01T19:10:03Z,2016-06-05T02:13:03Z,2016-06-05T02:13:03Z,MERGED,True,10,14,3,https://github.com/ledvinap,Fix submakefile inheriting CC etc,3,[],https://github.com/cleanflight/cleanflight/pull/2194,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2194#issuecomment-223114000,This should help with make test failing. But something more elegant will be nice ...,"The CC  inheritance in Makefile .. I can't find any elegant fix. It is sometimes useful to override compiler (and other tools), both for native and cross-compiler",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2194,2016-06-01T19:10:03Z,2016-06-05T02:13:03Z,2016-06-05T02:13:03Z,MERGED,True,10,14,3,https://github.com/ledvinap,Fix submakefile inheriting CC etc,3,[],https://github.com/cleanflight/cleanflight/pull/2194,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2194#issuecomment-223121972,This should help with make test failing. But something more elegant will be nice ...,also there is warning when compiling unittest - -lgcov should not be in CFLAGS (it belongs to LDLIBS https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2194,2016-06-01T19:10:03Z,2016-06-05T02:13:03Z,2016-06-05T02:13:03Z,MERGED,True,10,14,3,https://github.com/ledvinap,Fix submakefile inheriting CC etc,3,[],https://github.com/cleanflight/cleanflight/pull/2194,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2194#issuecomment-223353984,This should help with make test failing. But something more elegant will be nice ...,Seems to be working ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2194,2016-06-01T19:10:03Z,2016-06-05T02:13:03Z,2016-06-05T02:13:03Z,MERGED,True,10,14,3,https://github.com/ledvinap,Fix submakefile inheriting CC etc,3,[],https://github.com/cleanflight/cleanflight/pull/2194,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2194#issuecomment-223788953,This should help with make test failing. But something more elegant will be nice ...,"great, will merge the fix.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2196,2016-06-01T20:42:51Z,2016-09-14T21:23:58Z,2016-09-14T21:23:58Z,CLOSED,False,106,98,2,https://github.com/martinbudden,For discussion - cleanup pwmInit function by reduced use of continue,2,"['Cleanup', 'Feedback']",https://github.com/cleanflight/cleanflight/pull/2196,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2196,"This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.","This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.",True,"{'THUMBS_UP': ['https://github.com/gaelj', 'https://github.com/digitalentity']}"
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2196,2016-06-01T20:42:51Z,2016-09-14T21:23:58Z,2016-09-14T21:23:58Z,CLOSED,False,106,98,2,https://github.com/martinbudden,For discussion - cleanup pwmInit function by reduced use of continue,2,"['Cleanup', 'Feedback']",https://github.com/cleanflight/cleanflight/pull/2196,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2196#issuecomment-240898361,"This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.","yes, extracting the logic that way is better for sure.  can you rebase and complete this PR?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2196,2016-06-01T20:42:51Z,2016-09-14T21:23:58Z,2016-09-14T21:23:58Z,CLOSED,False,106,98,2,https://github.com/martinbudden,For discussion - cleanup pwmInit function by reduced use of continue,2,"['Cleanup', 'Feedback']",https://github.com/cleanflight/cleanflight/pull/2196,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2196#issuecomment-240942125,"This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.","Rebased and @ledvinap 's comment incorporated.
This PR was only rely as a discussion point to show my aversion to the use of the continue statement. But you are welcome to merge it in if you like.
It is untested, since I'm not at home at the moment and don't have any hardware for testing, so it should be tested before a merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2196,2016-06-01T20:42:51Z,2016-09-14T21:23:58Z,2016-09-14T21:23:58Z,CLOSED,False,106,98,2,https://github.com/martinbudden,For discussion - cleanup pwmInit function by reduced use of continue,2,"['Cleanup', 'Feedback']",https://github.com/cleanflight/cleanflight/pull/2196,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2196#issuecomment-241013767,"This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.","@martinbudden thanks for the rebase.   yes, it's very time consuming to test that code.  i really hate the PWM mapping code.  I would like to make it unit testable so we can sure the pwm mapping code really does work as it's a constant source of issues.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2196,2016-06-01T20:42:51Z,2016-09-14T21:23:58Z,2016-09-14T21:23:58Z,CLOSED,False,106,98,2,https://github.com/martinbudden,For discussion - cleanup pwmInit function by reduced use of continue,2,"['Cleanup', 'Feedback']",https://github.com/cleanflight/cleanflight/pull/2196,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2196#issuecomment-241014955,"This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.","I think the loop code in the loop should be extracted too.  something like io = pwmAllocate(usage)
perhaps also pwmChannelCanBeUsed should be pwmIsChannelAllocatable?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2196,2016-06-01T20:42:51Z,2016-09-14T21:23:58Z,2016-09-14T21:23:58Z,CLOSED,False,106,98,2,https://github.com/martinbudden,For discussion - cleanup pwmInit function by reduced use of continue,2,"['Cleanup', 'Feedback']",https://github.com/cleanflight/cleanflight/pull/2196,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2196#issuecomment-241017388,"This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.","@hydra , I think it's probably not worth spending too much time in this area. I believe there are plans afoot to revamp it all for betaflight 3.1 as part of the user-assignable IO. I think @blckmn is the person working on this. Once Cleanflight is converted to the new IO, you'll be able to pick this up for free.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2196,2016-06-01T20:42:51Z,2016-09-14T21:23:58Z,2016-09-14T21:23:58Z,CLOSED,False,106,98,2,https://github.com/martinbudden,For discussion - cleanup pwmInit function by reduced use of continue,2,"['Cleanup', 'Feedback']",https://github.com/cleanflight/cleanflight/pull/2196,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2196#issuecomment-241020254,"This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.","@hydra: Using RESOURCE from IO (and timer eventually) will help a bit.
Pin allocation order is in general different from pin function priority, so at least nonstandard cases has to be handled explicitly.
IMO it is best to use user-supplied mapping and only check for collisions on FC",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2196,2016-06-01T20:42:51Z,2016-09-14T21:23:58Z,2016-09-14T21:23:58Z,CLOSED,False,106,98,2,https://github.com/martinbudden,For discussion - cleanup pwmInit function by reduced use of continue,2,"['Cleanup', 'Feedback']",https://github.com/cleanflight/cleanflight/pull/2196,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2196#issuecomment-247159091,"This is just to illustrate why I think continue is overused in this function.
This is just a partial cleanup to illustrate the point.",@martinbudden ok i will close this now then.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2199,2016-06-02T12:23:54Z,2016-06-06T16:55:29Z,2016-06-07T17:15:49Z,MERGED,True,386,201,10,https://github.com/gaelj,Documentation update,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2199,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2199,"add SP Racing F3 Evo board
add links to other .md files where relevant
update CLI commands and variables
add Parallax 28015 Sonar
fix some typos","add SP Racing F3 Evo board
add links to other .md files where relevant
update CLI commands and variables
add Parallax 28015 Sonar
fix some typos",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2199,2016-06-02T12:23:54Z,2016-06-06T16:55:29Z,2016-06-07T17:15:49Z,MERGED,True,386,201,10,https://github.com/gaelj,Documentation update,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2199,https://github.com/gaelj,2,https://github.com/cleanflight/cleanflight/pull/2199#issuecomment-223276543,"add SP Racing F3 Evo board
add links to other .md files where relevant
update CLI commands and variables
add Parallax 28015 Sonar
fix some typos",Only .md files were modified. The travis fail is not related to the contents of this PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2199,2016-06-02T12:23:54Z,2016-06-06T16:55:29Z,2016-06-07T17:15:49Z,MERGED,True,386,201,10,https://github.com/gaelj,Documentation update,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2199,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2199#issuecomment-223808072,"add SP Racing F3 Evo board
add links to other .md files where relevant
update CLI commands and variables
add Parallax 28015 Sonar
fix some typos",@hydra: rebased.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2199,2016-06-02T12:23:54Z,2016-06-06T16:55:29Z,2016-06-07T17:15:49Z,MERGED,True,386,201,10,https://github.com/gaelj,Documentation update,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2199,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2199#issuecomment-223983704,"add SP Racing F3 Evo board
add links to other .md files where relevant
update CLI commands and variables
add Parallax 28015 Sonar
fix some typos","@gaelj this missed the 1.13.0 release deadline, scheduled for 1.14.0",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2201,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-223789502,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","can you move the travis/build related changes to a different PR (if needed) and rebase against current master.  hopefully the changes from @ledvinap that i just merged should fix the build issues.
I will have a look at this, i think it would be very helpful to the users.
soooo much to do!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-223806847,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","Hello @hydra. The travis build changes I incorporated were only there to make it pass the unit tests at the time of posting.
No need for a separate PR since the fix in now merged.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,4,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-223807501,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",Rebased.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-223829504,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","@gaelj : Sorry, I don't like the code. You are trying to hard to keep old code, making things more complicated.
With warningLedFlash removed, the code got a lot simpler.
Just implement
warningLedBeeper(bool on); that will set warning led it if is not used (for warning blinks).
Blink code can set correct state when starting blink, so it's ok to ignore start/end of beeper.
It's probably better to sample warning state only when blinking is done.
It may make sense to use uint32_t mask for blinks - use last bit as marker (not blinking it), then on each tick shift one bit to led. It will allow more complicated blink combinations (Morse anyone ;-) ) and all blink code will be in one switch .. Testing for active blinking is trivial, all state is in single variable ..
Another option is to merge warning led into beeper code - use existing code, just mark if output is beeper/led or both. But beeper code will probably need some cleanup too ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,6,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-223837548,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","@ledvinap thanks for your review.
I've implemented your remarks, expect for the uint32_t mask, as I think it would increase RAM footprint (each blinking mode would have it's own 32 bits, right ?) as well as increase interpretation complexity for users.
If I'm wrong, could you explain a little further what you have in mind ?
Merging into beeper code was indeed a possibility, but @hydra's request was to show it as warning LED blink patterns.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-223896631,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","The bitmask could be implemented as(edited):
static uint32_t blinkMask = 0;

static const uint32 blinkTab[] = {
[ARM_PREV_NONE] = 0,
[ARM_PREV_CLI] = 0b1000101;  // *.*...
[ARM_PREV_FAILSAFE] = 0b100010101;  // *.*.*...
// it is possible to use long blinks
[ARM_WARN_X] = 0b10001011   // long-short-delay

void warningLedRefresh(void)
{
    if(blinkMask <= 1) {  // skip interval for terminator bit, allow continuous on
      blinkMask = blinkTab[getArmingPreventionReason()];
    }
    if(blink_mask) {
       if(blinkMask & 1) 
         LED0_ON;
       else
          LED0_OFF;   
      blinkMask >>= 1;
    }
}",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,8,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-224070995,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","Nice. Now I understand the part about that LSB marker in the 32 bit word.
I saved a few bytes by simply using :
typedef enum {
    ARM_PREV_NONE       = 0,
    ARM_PREV_CLI        = 0b0000000010101,  // 2 flashes - CLI active in the configurator
    ARM_PREV_FAILSAFE   = 0b0000001010101,  // 3 flashes - Failsafe mode
    ARM_PREV_ANGLE      = 0b0000101010101,  // 4 flashes - Maximum arming angle exceeded
    ARM_PREV_CALIB      = 0b0010101010101,  // 5 flashes - Calibration active
    ARM_PREV_OVERLOAD   = 0b1010101010101   // 6 flashes - System overload
} armingPreventedReason_e;

EDIT:
typedef enum {
    ARM_PREV_NONE       = 0,
    ARM_PREV_CLI        = 0x15,  // 0b0000000010101  2 flashes - CLI active in the configurator
    ARM_PREV_FAILSAFE   = 0x55,  // 0b0000001010101  3 flashes - Failsafe mode
    ARM_PREV_ANGLE      = 0x155, // 0b0000101010101  4 flashes - Maximum arming angle exceeded
    ARM_PREV_CALIB      = 0x555, // 0b0010101010101  5 flashes - Calibration active
    ARM_PREV_OVERLOAD   = 0x1555 // 0b1010101010101  6 flashes - System overload
} armingPreventedReason_e;",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-224206379,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","@gaejl: With bitmask you can encode pause between blinks into blink code, so there is no need for long/short delay: <1-terminator><000-delay><101-pattern>
(Also 0b11 will be constant on, 0x10 constant off with beeper override disabled)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,10,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-224339462,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",This should now be a winner. @ledvinap if you are happy with the way it now is I'll rebase & squash.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/ledvinap,11,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-224366554,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",Great work. I hope I did not nag you too much ..,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,12,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-224394062,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",Absolutely not ! Thank you again for your time @ledvinap.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,13,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-224395951,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","@hydra, now it's ready.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230106049,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","ok, this will be very useful for many, i will merge this ahead of the OSD code which needs something similar.  I will update the OSD code to use this now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230106509,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","@ledvinap and @gaelj
although i just merged this, i don't like the tight coupling between arm prevention reason and blink masks here:
blinkMask = getArmingPreventionReason();

IMHO blink masks is an implementation detail of the blinker code, arming prevention reason is an output of system state.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230106676,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","i think to fix it, just store the blink masks in an array and index into it based on the reason.   however that would result in fragility if the reason list changed.
however, that could and should be mitigated by a unit test that asserts the array of blink masks is the same length as the amount of reason codes.
this is where I native language support for maps in C would be useful...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230106960,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","lastly, it feels like there is a bit of duplication between the arming code and the getArmingPreventionReason().
Likely it would be better if the arming prevention reason was set by the code as it prevents arming.  then getArmingPreventionReason() could just return that value, then finally the blink code to look up the mask for the reason in an array or map.
This would also then allow any attached UI (configurator or OSD) to display meaningful status information.
@gaelj Any chance you can do another PR to fix these issues?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,18,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230113412,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",No problem @hydra.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,19,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230113749,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","@gaelj actually, don't.  I'm doing it now as I rebase the OSD stuff onto master.
sorry if you had already started.
basically the statusindicator code also introduced new dependencies onto flight controller specific code which is obviously not used in an OSD only build.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,20,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230113844,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",I was about to... good think I checked. Go ahead ! 😃,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230113866,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",you can clearly see the dependencies added by all the additional includes.  I missed them in my quick review.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230113916,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","the solution involves moving the flight controller specific code into somewhere that has all the dependencies already includes, e.g. in the main mw.c / cleanflight_fc.c file.  likely there's a better place still but that is where the code duplication is too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,23,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230114215,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",Agreed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/hydra,24,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230115605,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.","done, see this first merge (code relocation, removal of dependencies from statusindicator.c)
ecc7077
then see how it's refactored here (and used by both osd and fc code).
25f4be7
I added some comments at the top of the file (in lieu of a unit test, ahem cough).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2201,2016-06-02T17:51:02Z,2016-07-02T15:04:24Z,2016-07-23T23:48:49Z,MERGED,True,86,65,6,https://github.com/gaelj,Status led pattern: disabled arm reason,1,[],https://github.com/cleanflight/cleanflight/pull/2201,https://github.com/gaelj,25,https://github.com/cleanflight/cleanflight/pull/2201#issuecomment-230116668,"Use Warning LED flash count to inform arming prevention reason.



Reason for disabled Arming
LED Flashes




CLI is active in the configurator
2


Failsafe mode is active
3


The aircraft has landed in failsafe mode
3


Maximum arming angle is exceeded
4


Calibration is active
5


The system is overloaded
6



See PR  #2182
Implements @ledvinap's travis fix.
Looking forward to read your comments.",I suppose those Magic Numbers when you call warningLedCode() will be cleaned up. The first commit is too huge to look at on my phone here.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2204,2016-06-02T23:06:54Z,2017-02-25T16:55:37Z,2017-02-25T16:59:57Z,CLOSED,False,606,7,8,https://github.com/landstroem,Added initial CMake support for the unit-tests,17,[],https://github.com/cleanflight/cleanflight/pull/2204,https://github.com/landstroem,1,https://github.com/cleanflight/cleanflight/pull/2204,"Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)","Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2204,2016-06-02T23:06:54Z,2017-02-25T16:55:37Z,2017-02-25T16:59:57Z,CLOSED,False,606,7,8,https://github.com/landstroem,Added initial CMake support for the unit-tests,17,[],https://github.com/cleanflight/cleanflight/pull/2204,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2204#issuecomment-223634906,"Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)","@landstroem : I'll fix the memcpy problem. This problem is cynwin-32 specific, cygwin64 should work
Personally I like plain Makefile (but unittest building needs redesign), but CMake may make bookkeeping a bit easier.
This will work only if Makefile is replaced, keeping both makes no sense ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2204,2016-06-02T23:06:54Z,2017-02-25T16:55:37Z,2017-02-25T16:59:57Z,CLOSED,False,606,7,8,https://github.com/landstroem,Added initial CMake support for the unit-tests,17,[],https://github.com/cleanflight/cleanflight/pull/2204,https://github.com/landstroem,3,https://github.com/cleanflight/cleanflight/pull/2204#issuecomment-223660245,"Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)","@ledvinap : Yes - it worked on cygwin64 so I'll remove the disabling of ledstrip_unittest for Cygwin. (I saw your PR #2207.)
Hopefully CMake can also make it easier to change the current unittest build process, this PR generally just tries to mimic the existing Makefile.
If this gets pulled in and matures, the existing Makefile for unittests should probably be replaced in the long run in order to avoid duplication. But that will also involve changes to the existing Makefile and CI configuration (?) which seems a bit scary to me...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2204,2016-06-02T23:06:54Z,2017-02-25T16:55:37Z,2017-02-25T16:59:57Z,CLOSED,False,606,7,8,https://github.com/landstroem,Added initial CMake support for the unit-tests,17,[],https://github.com/cleanflight/cleanflight/pull/2204,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2204#issuecomment-237936067,"Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)","interesting, what's missing however is why we want this.  I can see it looks like less work to add a new test but some insight from you on why you spent quite a bit of time doing this would clarify things for us all.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2204,2016-06-02T23:06:54Z,2017-02-25T16:55:37Z,2017-02-25T16:59:57Z,CLOSED,False,606,7,8,https://github.com/landstroem,Added initial CMake support for the unit-tests,17,[],https://github.com/cleanflight/cleanflight/pull/2204,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2204#issuecomment-247158771,"Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)",@landstroem please answer my previous comment on this.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2204,2016-06-02T23:06:54Z,2017-02-25T16:55:37Z,2017-02-25T16:59:57Z,CLOSED,False,606,7,8,https://github.com/landstroem,Added initial CMake support for the unit-tests,17,[],https://github.com/cleanflight/cleanflight/pull/2204,https://github.com/landstroem,6,https://github.com/cleanflight/cleanflight/pull/2204#issuecomment-249440472,"Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)","I used CMake to

generate a Visual Studio solution
keep my builds out-of-source so I could easily compare output files

and wanted to share.
I don't really think that Cleanflight needs the extra portability that comes with using CMake to create the Makefiles, but in my opinion, it doesn't hurt either.
I personally think it's easier to add a test (and reorganize builds) when CMake is used, but that is just my preference.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2204,2016-06-02T23:06:54Z,2017-02-25T16:55:37Z,2017-02-25T16:59:57Z,CLOSED,False,606,7,8,https://github.com/landstroem,Added initial CMake support for the unit-tests,17,[],https://github.com/cleanflight/cleanflight/pull/2204,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2204#issuecomment-262466400,"Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)","i have been contacted recently about cmake support again. from my limited exposure to it it sure seems clearer than makefiles.
I have been thinking a little about re-organizing the build system a little for cleanflight 2.0.0 (for F4 support) so this PR is starting to become relevent again.
Is there any chance you could rebase this against the current master?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2204,2016-06-02T23:06:54Z,2017-02-25T16:55:37Z,2017-02-25T16:59:57Z,CLOSED,False,606,7,8,https://github.com/landstroem,Added initial CMake support for the unit-tests,17,[],https://github.com/cleanflight/cleanflight/pull/2204,https://github.com/landstroem,8,https://github.com/cleanflight/cleanflight/pull/2204#issuecomment-263155168,"Tested by diffing _result.xml files vs the Makefile on Ubuntu
14.04 LTS (CMake version 2.8.12.2)
Partial support working on Windows 7 + Cygwin + GCC 5.3.0

Missing memcpy for ledstrip_unittest
Some failed test for PIDUnittest

Not tested for:
shell uname -s ""Darwin"" (uses different linker flags for some tests)",@hydra sure. Updated now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2207,2016-06-03T17:25:26Z,2016-06-05T02:09:55Z,2016-06-05T02:09:55Z,MERGED,True,6,0,1,https://github.com/ledvinap,Fix win32 unitests,1,[],https://github.com/cleanflight/cleanflight/pull/2207,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2207,memcpy was not mangled on win32 targets,memcpy was not mangled on win32 targets,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2207,2016-06-03T17:25:26Z,2016-06-05T02:09:55Z,2016-06-05T02:09:55Z,MERGED,True,6,0,1,https://github.com/ledvinap,Fix win32 unitests,1,[],https://github.com/cleanflight/cleanflight/pull/2207,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2207#issuecomment-223640824,memcpy was not mangled on win32 targets,"@martinbudden : Sorry, I overlooked this in your PR ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2209,2016-06-04T18:38:10Z,2016-06-05T02:25:29Z,2016-07-06T17:52:28Z,MERGED,True,3,3,1,https://github.com/MJ666,CJMCU and AlienFligth hardware detection MCP fix,1,[],https://github.com/cleanflight/cleanflight/pull/2209,https://github.com/MJ666,1,https://github.com/cleanflight/cleanflight/pull/2209,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2219,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/ethomas997,2,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-225037464,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","Also, posted this issue on subject of battery alarm settings:  Improvements to VBAT alarm settings #2220
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-234283676,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","@ethomas997 yes i remember this, merging...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-234284729,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","ahh.. except there is a small problem.  adding a new parameter in the middle of a structure used as a parameter group is not allowed.  they must be added to the end of the structure.  can you update the PR please.
Please also verify the default value of the new setting when a user upgrades from 1.13.0 to a build with the new parameter added to the end.  - without erasing the entire chip/eeprom.
please report your findings in comments below.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/ethomas997,5,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-239660619,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","@hydra I've moved the new 'vbathysteresis' field to the end of parameter group in ""battery.h"".
If the user upgrades from 1.13.0 to a build with the new 'vbat_hysteresis' parameter without erasing the entire chip/eeprom, the 'vbat_hysteresis' parameter ends up with an odd value (like 9 or 118).  Doing a Reset Settings to defaults sets the 'vbat_hysteresis' value to the proper default (1).  Is there a way to make it handle the upgrade better?
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/ethomas997,6,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-243334392,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","On Betaflight they've modified it so the hysteresis is only applied downwards of the configured minimum levels, and not downwards and upwards, as per BF PR #831.  I think this is a good improvement.  I can make this PR also do the same if desired; let me know...
--ET",True,{'THUMBS_UP': ['https://github.com/ledvinap']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-247156870,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","ok, with regards to the PG reset invalid value issue don't worry, that is already in-hand in #2395.
yes, please make the change to the hysteresis as you suggest as it seems like that solution is liked by you and other betaflight testers.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-247159503,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","@hydra: Invalid value after upgrade is strange - even old code did reset the structure first, then writing data from EEPROM ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/ethomas997,9,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-247245835,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","Rebased, modified so hysteresis is only applied downwards, and updated unit test.  Should be ready for merge.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/ethomas997,10,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-247472814,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","Also, doc update adding 'vbat_hysteresis' and doing minor improvements to other 'vbat' descriptions.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/ethomas997,11,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-257191423,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","Rebased to master 2016-10-30.  This PR should be ready to be merged in.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-257196942,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET",thanks. I will take another look at this asap.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2219,2016-06-09T21:30:43Z,2016-10-31T01:43:35Z,2016-10-31T01:43:35Z,MERGED,True,24,18,6,https://github.com/ethomas997,Add 'vbat_hysteresis' parameter,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2219,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2219#issuecomment-257197209,"Adds a 'vbat_hysteresis = #' CLI parameter, where '#' is the battery-alarm-hysteresis value in 0.1V increments. Default value is 1 (0.1V), which mirrors the current (v1.13.0) behavior.  Setting ""vbat_hysteresis=0"" can reduce time-delay lag in the battery-alarm response, especially on 1S and 2S setups.  This CLI parameter has been implemented in Betaflight.
The VBATT_HYSTERESIS functionality was added when the battery-state detection code was reworked in Cleanflight a while back.  My feeling is that hysteresis is not needed and negatively impacts the battery-low alarms; it adds an annoying time-delay lag to the warning-beep response, and on 1S micro setups the alarm tends to get ""stuck"" on when it shouldn't.  With VBATT_HYSTERESIS removed, the alarm tracks the state of battery like it should.
I posted a PR on Betaflight to remove VBATT_HYSTERESIS, but some felt that it should stay.  BorisB requested that it be made a CLI parameter, so I posted a PR to do that, and it has been merged in to the main branch.
--ET","looks good now, very minimal changes. merging.",True,{'THUMBS_UP': ['https://github.com/ethomas997']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2222,2016-06-11T22:25:00Z,2016-07-02T16:02:25Z,2016-07-02T16:02:26Z,MERGED,True,1,1,1,https://github.com/mojocorp,Fix a typo,1,[],https://github.com/cleanflight/cleanflight/pull/2222,https://github.com/mojocorp,1,https://github.com/cleanflight/cleanflight/pull/2222,Fix a typo in the doc buad => baud,Fix a typo in the doc buad => baud,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2224,2016-06-12T08:30:43Z,2016-07-02T16:00:35Z,2016-07-02T16:00:35Z,MERGED,True,3,0,1,https://github.com/tigert,Charging-only USB cables seem to be yet another cause of confusion.,3,[],https://github.com/cleanflight/cleanflight/pull/2224,https://github.com/tigert,1,https://github.com/cleanflight/cleanflight/pull/2224,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2225,2016-06-12T13:08:42Z,2016-07-21T15:07:05Z,2016-07-21T15:07:05Z,MERGED,True,2,1,1,https://github.com/4712,Blheli4wayif timing improvement,4,[],https://github.com/cleanflight/cleanflight/pull/2225,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2225,"Bit state reading timed later to improve connection for ESC with higher
capacities at input pin.","Bit state reading timed later to improve connection for ESC with higher
capacities at input pin.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2226,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/jflyper,2,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-225446343,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.",Dev board schematics?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-225458251,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","OK, I see you are re-using the scheduler - clever! So my comment about the scheduler changes being peripheral was wrong. Still, lots to look at...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-225467649,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@jflyper when I add the STM32F3DISCOVERYOSD target I will add schematics for it, separate PR for that.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/jflyper,5,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-225467853,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra I just wanted the connections around the MAX and the F1 so I can start breadboarding to see how it works. I can figure it out from the code, but wanted to be lazy :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-225671697,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra: mspClientProcessCommand does not make much sense. It is processing reply and not generating anything
The logic should be split (approximately) into:

command selection
command packet generation
command reply processing

Selection and generation may be combined, but then packet generation and command processing will be separated. It may be better to use one switch to generate request and process reply:
switch(pkt->cmd) {
 case cmd_1: 
   if(request) {
      // pack request into pkt
   } else {
      // process reply in pkt
   }  
   break;
}

edit - maybe even better:
#define MAP(id, request) ((id)*2+(request))
#define REQUEST(id) MAP(id, true)
#define REPLY(id) MAP(id, false)
switch(MAP(pkt->cmd, request)) {
  case REQUEST(cmd_2):
...
  case REPLY(cmd_2):
...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-225825348,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@ledvinap thanks for the code review.  I don't think there were any major issues in the code though right?  Did you like the driver agnostic implementation vs say, this:
savaga/betaflight-sirinfpv@8a93041
(Which is a direct port of the minimosd code which will only ever work with the max7456)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-225848706,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra:
The separation of fc code .. maybe it will be better in long run. It will be nightmare to rebase all PRs
Font upload may be realized as MSP command, avoiding character table in FLASH. It will force configurator use to change font, but that is IMO acceptable.
max7456_writeScreen -
this should be modified to update screen in chunks that fit in HSync.
Only changed parts of screen may be updated - either comparing old and new contents or using bitmask (for blocks, for example 8x1).
Eventually DMA may be used for updates, making OSD code non-blocking and transparent.
max7456_setCharacterAtPosition - with optimized writeScreen, this may be removed, always working with screen buffer.
Screen buffer abstraction will work for I2C OLED and (with some optimized update algorithm) with text based telemetry.
Maybe mspMaster / mspSlave will be easier to understand, not sure
mspClient should be redesigned, it is terrible hack",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/skaman82,9,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-225851720,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.",@hydra I would like to help testing this and to create a GUI tab layout for configuration. So if you have some test hardware lying around please let me know via email,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-226180491,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.",@skaman82 i will email you in a sec.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-226187508,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@ledvinap yes, regarding use of HSYNC, that is definately a good idea - non-blocking would be excellent and needed when integrating with FC/OSD devices.  We'll make it a requirement now that all MAX7456 CF OSD's need the HSYNC wired up with.
TODO: Add to VSYNC/HSYNC requirement to documentation.
With regards to font upload, it's something we could compile out if we run out of room (e.g. on an FC).  On a dedicated OSD there is plenty of space right now and it's one less thing to worry about when a user first gets an OSD and wires it up.  We can add font upload via MSP later easily enough.  Since there's no other font or hardware right now I don't see this being an issue for a little while.
Agreed re mspClient HACK.  I have been very time-poor recently!  Hardware design, testing factory stuff, etc.  It's software, we can change it.  None of this is by any means final.
I'll go through and address your other feedback/code review notes when I next work on the OSD code - later this week.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-226187917,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra:
BTW: STM32F3 should be powerful enough for OSD (possibly with one external mux).
With some low-cost DDS at color carrier frequency, it should be possible to include basic color support.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-226188468,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra: if mspClient gets merged into master, it will be hard to fix...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/martinbudden,14,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-228142187,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra , some brief thoughts on code reorganisation.

It is another welcome cleanup.
Can you move the task function declarations out of the top of fc_tasks.c into fc_tasks.h. It's just the right thing to do.
Can you create a new directory scheduler and put scheduler.c and scheduler.h in there. I know this makes a small directory, the the scheduler is a stand-alone bit of independent code, indeed as your usage has shown.
Is it possible to further clean up src/main by putting perhaps build_config, version and debug in the common directory. Or somewhere else if you think they have a better home.
I notice osd/boot.c has a configureScheduler function which keeps the main function nice and clean. Can you do the same in fc/boot.c?

I haven't had much time to look at this more thoroughly, but overall I think it's a good implementation. It's gratifying the the MSP changes and the scheduler are being used as well.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230100623,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@martinbudden thanks for the thoughts, I'm on it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230101576,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@martinbudden re point 4, i decided a 'build' is a better place 😄 I moved atomic block code there too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230102293,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.",@martinbudden points 2-4 are addressed with some recent commits.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230129820,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@skaman82 @martinbudden I've prepared 3 development boards for posting out.  @ledvinap too, if you want a board please can you all confirm the addresses that you'd like them sent to (grab my email from a recent commit).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/skaman82,19,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230164351,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra I think it would make more sense if @gaelj gets the test board before me. He is actually more involved into the configurator support code then I am. If you have a fourth, I of course would very like to have that one.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230320133,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@gaelj can you email me your address please?
@skaman82 yours went out in the post today along with an EVO to stack on it, i found the email you send me before.
@martinbudden did you email me your address?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230321171,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@ledvinap with regards to your thoughts on color support using a DDS.  Can you give a bit more information so I can get a feel for how it would work?  feel free to open a new ticket, comment here or email me directly.  Color OSD would certainly be welcomed by everyone I'm sure.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230362099,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@ledvinap I spent a while cleaning up some of the MSP code, it's much easier to understand now.
The msp_serial.c and msp.c have undergone significant changes, the msp_client_osd.c is unchanged for now. I feel we can merge the latter as-is and refactor as part of further development since the file is unused by the FC code and the only reason for change will be for the OSD code.
I will cleanup the remaining screen drawing/logo code and merge to master tomorrow, unless there are objections, so that others can begin using the rest of the OSD code which is functional.  We need to begin working on OSD display elements and configuration via configurator, for which code already exists in forks of betaflight and I'm keen to leverage the good work people are doing in that area before it becomes stale.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230362609,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","With regards to performance optimizations to the max7456 driver regarding use of VSYNC, yes we can and should do that.  The existence of the SIRINFPV target now makes this more complicated because it doesn't have VSYNC wired up like my new boards do.
We can go a few ways here:

require VSYNC for all targets (FC+OSD / OSD) & drop support for targets without VSYNC
on VSYNC-less targets always do full screen update and ignore artifacts.
on VSYNC-less targets do 'changed' updates and ignore artifacts (which may be less noticable).

I would like feedback and suggestions here.  Ideally the developers of the SIRINFPV target would have worked a bit closer with us before shipping but such is the way of things...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,24,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230364739,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@savaga has done a bunch of work with DMA transfer of max7456 screen buffer in this PR
betaflight/betaflight#617",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/jflyper,25,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230365777,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","on VSYNC-less targets always do full screen update and ignore artifacts.




on VSYNC-less targets do 'changed' updates and ignore artifacts (which may be less noticeable).




2 or 3.
3 is just a natural extension of 2, I suppose.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/martinbudden,26,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230396941,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra , I notice you have removed MSP support for parameter groups. I think, in balance, that is a good thing, since this introduced a fragility to MSP (since the MSP format was implicit and could be inadvertently changed). Is this your reasoning, or did you have some other reason?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/ledvinap,27,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230440091,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra:
Great work on MSP code, it's much cleaner now. I'll try to find time to read full PR again, but the changes looks good.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,28,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230442258,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@ledvinap great. Glad you're happy, it sure took some unpicking yesterday.  I feel the result is much better too.
@martinbudden Yes, the commit that removes it has some comments in it regarding this which i'll copy/paste here now: 13b8d3c
Remove MSP parameter group usage.

    NOTE: The long term goal is to expose PG's directly via MSP (for
    backup/restore purposes), rather than make existing MSP commands use
    PGs.  Clients will then be able to using PG's for setting/reading
    configuration and to use MSP commands for system state.

    This solves the problem of an 8 bit ID for MSP commands and since PG's
    are also versioned will help with compatibility.

that's my initial feeling and reasoning.  I think there are already issues floating around regarding backup/restore which this can be discussed further.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/martinbudden,29,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230442636,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra , I missed that comment. Yes, that seems a very good goal.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/ledvinap,30,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230444221,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra:
ad VSYNC: Is there something preventing use of VSYNC bit in status register and use only HSYNC signal for synchronization? IMO worst case is that one horizontal interval is missed due to HSYNC delay with respect to VSYNC.
And it would be better to count TV lines and start update before actual VSYNC - there are few undisplayed lines, is would add some time to update interval.
Same goes for LOS - LOSis detected after 32 VSYNCs - detecting LOS one line later does not matter.
And VSYNC timeout may be used in external-sync-only mode",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/ledvinap,31,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230445109,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.",@hydra: My mail address did not change .. but I am not sure how much time I'll find to play with OSD,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/ledvinap,32,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230450533,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra: Ad color OSD:
To get color in OSD, you need to accurately sync to color carrier generated by video source.
IMO only option how to get enough precision is to use local oscillator and use quadrature demodulation of color burst.
Then either adjust phase of local oscillator directly, or use phase difference to compensate line generation.
With DDS chip, it may possible to realize this -

use DDS to generate color carrier
either use STM32F3 ADC directly (with external sync from DSS) or use few analog switches as Q/I demodulator to get phase.
attach DDS sine output as one multiplexor inputs - input video / black / white / DDS color
select DDS phase (with correction from colorburst) for each color to be generated. Amplitude + level will need some consideration too (colorbust generation for internal sync mode)

But with price of DDS chips available, this is probably not that practical ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,33,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230462452,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@ledvinap no, nothing preventing use of HSYNC only other than time, as is often the case.
I feel right now, it's more important to get the functionality of the OSD working, since that won't change.  then optimizations at the driver can be done in parallel with other work since the code is isolated.
For cleanflight, the configuration menus, OSD usability, PG backup/restore, CLI removal, IO rework, flight performance and F4 merges take precedence over video driver optimizations.
However, the first time we add support for the SIRINFPV board in cleanflight we will likely need to work on video driver optimizations since the OSD code with then be running along side flight code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/savaga,34,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230690560,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra, I'd be happy to participate in this project, let me know which path do you want me to focus in.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,35,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230850616,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@savaga Hi, excellent.  Adding the DMA support to the CF would be very helpful, the sooner that is done the sooner we can support OSD+FC boards like the SIRINFPV.
If you have a SIRINFPV spare can you send me one, it would really help?  I can send you one of my prototype boards + an EVO to stack it with too if you like?
I'm going to merge this PR now, next i will look at merging some of the code for other OSD display elements and configurator support.  After that I will look at control of the standalone OSD via the FC (e.g. for menus, etc).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/savaga,36,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230858409,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra, awesome, emailed you",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/martinbudden,37,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-230868663,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@hydra , great to see this merged in!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2226,2016-06-12T14:27:53Z,2016-07-06T18:05:54Z,2016-10-12T20:22:27Z,MERGED,True,22060,1174,184,https://github.com/hydra,First cut of OSD support,41,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2226,https://github.com/hydra,38,https://github.com/cleanflight/cleanflight/pull/2226#issuecomment-231032167,"This PR is the first cut of the OSD support for standalone OSD boards.
It includes:

low level driver support for max7456 chip (including cleanflight font and font upload code)
support for F1 and F3 CPUs.
simple MSP client for communication with an attached FC.
code reorganization.
high level osd code and osd code for a text-based layout.
status indicator updates.
additional MSP commands for OSD configuration.
some ADC changes (development OSD boards monitor battery, 12v and 5v sources).
some hacks, and some far from ideal code. (remember, it's the first cut, the approach is: 'get it working, then get it working well')

There is much more planned for OSD support, but this PR serves as a good starting point for discussion and review before merging to master.  Additional OSD features will follow.
Current features:

Configuration, status and flashing via Cleanflight configurator.
Fixed layout
Cleanflight logo on power up 😄
Battery display.
Current meter and usage display.
display of FC state (acro/horizon/angle/baro/mag/rssi/vbat/motors)
PAL and NTSC support.
Camera disconnection state.
FC disconnection state.
Automatic font download.

This is basic OSD as-is.  Next up is code review and on-screen configuration menus.","@savaga email received, I'm writing your address on an envelope right now.  And you'll get some Cleanflight stickers too 😄",True,{'THUMBS_UP': ['https://github.com/savaga']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2227,2016-06-12T16:00:18Z,2016-07-07T06:18:12Z,2016-07-07T07:58:43Z,MERGED,True,5,7,1,https://github.com/DzikuVx,docs update for lpf filters,2,[],https://github.com/cleanflight/cleanflight/pull/2227,https://github.com/DzikuVx,1,https://github.com/cleanflight/cleanflight/pull/2227,Docs update to match current code,Docs update to match current code,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2230,2016-06-14T08:19:05Z,2016-06-14T08:22:53Z,2016-06-14T09:42:29Z,CLOSED,False,2,1,1,https://github.com/mojocorp, The 2nd memset() argument '1500' doesn't fit into an 'unsigned char'.,1,[],https://github.com/cleanflight/cleanflight/pull/2230,https://github.com/mojocorp,1,https://github.com/cleanflight/cleanflight/pull/2230,"The 2nd parameter is passed as an 'int', but the function fills the block of memory using the 'unsigned char' conversion of this value.
""void* memset( void* dest, int ch, std::size_t count );
Converts the value ch to unsigned char and copies it into each of the first count characters of the object pointed to by dest.""","The 2nd parameter is passed as an 'int', but the function fills the block of memory using the 'unsigned char' conversion of this value.
""void* memset( void* dest, int ch, std::size_t count );
Converts the value ch to unsigned char and copies it into each of the first count characters of the object pointed to by dest.""",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2230,2016-06-14T08:19:05Z,2016-06-14T08:22:53Z,2016-06-14T09:42:29Z,CLOSED,False,2,1,1,https://github.com/mojocorp, The 2nd memset() argument '1500' doesn't fit into an 'unsigned char'.,1,[],https://github.com/cleanflight/cleanflight/pull/2230,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2230#issuecomment-225819438,"The 2nd parameter is passed as an 'int', but the function fills the block of memory using the 'unsigned char' conversion of this value.
""void* memset( void* dest, int ch, std::size_t count );
Converts the value ch to unsigned char and copies it into each of the first count characters of the object pointed to by dest.""","Yes, this is bug. Your fix seems reasonable, why did you close this PR ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2230,2016-06-14T08:19:05Z,2016-06-14T08:22:53Z,2016-06-14T09:42:29Z,CLOSED,False,2,1,1,https://github.com/mojocorp, The 2nd memset() argument '1500' doesn't fit into an 'unsigned char'.,1,[],https://github.com/cleanflight/cleanflight/pull/2230,https://github.com/mojocorp,3,https://github.com/cleanflight/cleanflight/pull/2230#issuecomment-225819828,"The 2nd parameter is passed as an 'int', but the function fills the block of memory using the 'unsigned char' conversion of this value.
""void* memset( void* dest, int ch, std::size_t count );
Converts the value ch to unsigned char and copies it into each of the first count characters of the object pointed to by dest.""","Hi,
It breaks the unit tests. There is a side effect somewhere. I'll track the
bug and propose another pull request.
Sorry for the noise.
Morgan
On Tue, Jun 14, 2016 at 10:53 AM, Petr Ledvina notifications@github.com
wrote:

Yes, this is bug. Your fix seems reasonable, why did you close this PR ?
—
You are receiving this because you modified the open/close state.
Reply to this email directly, view it on GitHub
#2230 (comment),
or mute the thread
https://github.com/notifications/unsubscribe/AAAlyRUxbPMiA7c6tHNlqk8l0oZd07Miks5qLmwEgaJpZM4I1EcU
.


..::Morgan::..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2230,2016-06-14T08:19:05Z,2016-06-14T08:22:53Z,2016-06-14T09:42:29Z,CLOSED,False,2,1,1,https://github.com/mojocorp, The 2nd memset() argument '1500' doesn't fit into an 'unsigned char'.,1,[],https://github.com/cleanflight/cleanflight/pull/2230,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2230#issuecomment-225831380,"The 2nd parameter is passed as an 'int', but the function fills the block of memory using the 'unsigned char' conversion of this value.
""void* memset( void* dest, int ch, std::size_t count );
Converts the value ch to unsigned char and copies it into each of the first count characters of the object pointed to by dest.""","@mojocorp :
sizeof returns size in bytes, but pointer arithmetic works on underlying type, uint16_t in this case. So twice as many entries is overwriten.
Either use
std::fill( channelPulses, channelPulses + ARRAYLEN(channelPulses), 1500 );
// or in last version, there is macro ge get end of array:
std::fill( channelPulses, ARRAYEND(channelPulses), 1500 );

Or use for loop to fill array ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2231,2016-06-14T10:03:58Z,2016-07-21T15:06:09Z,2016-07-21T15:06:40Z,MERGED,True,8,7,2,https://github.com/mojocorp,The 2nd memset() argument '1500' doesn't fit into an 'unsigned char'.,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2231,https://github.com/mojocorp,1,https://github.com/cleanflight/cleanflight/pull/2231,"The 2nd parameter is passed as an 'int', but the function fills the block
of memory using the 'unsigned char' conversion of this value.
""void* memset( void* dest, int ch, std::size_t count );
Converts the value ch to unsigned char and copies it into each of the first
count characters of the object pointed to by dest.""","The 2nd parameter is passed as an 'int', but the function fills the block
of memory using the 'unsigned char' conversion of this value.
""void* memset( void* dest, int ch, std::size_t count );
Converts the value ch to unsigned char and copies it into each of the first
count characters of the object pointed to by dest.""",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2231,2016-06-14T10:03:58Z,2016-07-21T15:06:09Z,2016-07-21T15:06:40Z,MERGED,True,8,7,2,https://github.com/mojocorp,The 2nd memset() argument '1500' doesn't fit into an 'unsigned char'.,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2231,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2231#issuecomment-234283163,"The 2nd parameter is passed as an 'int', but the function fills the block
of memory using the 'unsigned char' conversion of this value.
""void* memset( void* dest, int ch, std::size_t count );
Converts the value ch to unsigned char and copies it into each of the first
count characters of the object pointed to by dest.""",thanks.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2234,2016-06-15T18:52:11Z,2016-07-07T06:53:39Z,2016-08-29T15:23:38Z,MERGED,True,83,92,13,https://github.com/martinbudden,Merge PID filter changes from betaflight.,1,[],https://github.com/cleanflight/cleanflight/pull/2234,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2234,"This addresses issue  ""Use PT1 filters rather than biQuad filters for PIDs. Improve filter defaults"" from issue #2213.","This addresses issue  ""Use PT1 filters rather than biQuad filters for PIDs. Improve filter defaults"" from issue #2213.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2234,2016-06-15T18:52:11Z,2016-07-07T06:53:39Z,2016-08-29T15:23:38Z,MERGED,True,83,92,13,https://github.com/martinbudden,Merge PID filter changes from betaflight.,1,[],https://github.com/cleanflight/cleanflight/pull/2234,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2234#issuecomment-230866655,"This addresses issue  ""Use PT1 filters rather than biQuad filters for PIDs. Improve filter defaults"" from issue #2213.","@hydra , rebased.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2235,2016-06-15T19:05:28Z,2016-07-07T06:23:35Z,2016-08-29T11:19:14Z,MERGED,True,56,46,3,https://github.com/martinbudden,Fixed rc_lookup so all implemetation detail is local to rc_curves.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2235,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2235,"This addresses item ""Move RC lookup out of mw.c into rc_curves.c"" of issue #2213","This addresses item ""Move RC lookup out of mw.c into rc_curves.c"" of issue #2213",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2235,2016-06-15T19:05:28Z,2016-07-07T06:23:35Z,2016-08-29T11:19:14Z,MERGED,True,56,46,3,https://github.com/martinbudden,Fixed rc_lookup so all implemetation detail is local to rc_curves.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2235,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2235#issuecomment-230097878,"This addresses item ""Move RC lookup out of mw.c into rc_curves.c"" of issue #2213",blocked by #2210 - code moved into new location. will merge afterwards.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2235,2016-06-15T19:05:28Z,2016-07-07T06:23:35Z,2016-08-29T11:19:14Z,MERGED,True,56,46,3,https://github.com/martinbudden,Fixed rc_lookup so all implemetation detail is local to rc_curves.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2235,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2235#issuecomment-230856149,"This addresses item ""Move RC lookup out of mw.c into rc_curves.c"" of issue #2213",unblocked - @martinbudden can you rebase please?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2235,2016-06-15T19:05:28Z,2016-07-07T06:23:35Z,2016-08-29T11:19:14Z,MERGED,True,56,46,3,https://github.com/martinbudden,Fixed rc_lookup so all implemetation detail is local to rc_curves.c,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2235,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2235#issuecomment-230866119,"This addresses item ""Move RC lookup out of mw.c into rc_curves.c"" of issue #2213","@hydra , rebased.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2246,2016-06-21T17:34:36Z,2016-07-21T15:01:21Z,2016-07-21T15:01:21Z,CLOSED,False,50,38,1,https://github.com/GruffyPuffy,Added support for older (and newer) versions of JR XBus DMSS sats,4,['Duplicate'],https://github.com/cleanflight/cleanflight/pull/2246,https://github.com/GruffyPuffy,1,https://github.com/cleanflight/cleanflight/pull/2246,"Some of the different sats for JR XBus with old firmware were not working. This pull request has re-worked the code for the XBus protocol to support all these sats. The code has been tested by various people including JR. Hopefully this can be accepted and added to the main code.
Edit: This update actually enables all DMSS sats from JR. It even supports the new range of diversity sats.","Some of the different sats for JR XBus with old firmware were not working. This pull request has re-worked the code for the XBus protocol to support all these sats. The code has been tested by various people including JR. Hopefully this can be accepted and added to the main code.
Edit: This update actually enables all DMSS sats from JR. It even supports the new range of diversity sats.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2246,2016-06-21T17:34:36Z,2016-07-21T15:01:21Z,2016-07-21T15:01:21Z,CLOSED,False,50,38,1,https://github.com/GruffyPuffy,Added support for older (and newer) versions of JR XBus DMSS sats,4,['Duplicate'],https://github.com/cleanflight/cleanflight/pull/2246,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2246#issuecomment-230366373,"Some of the different sats for JR XBus with old firmware were not working. This pull request has re-worked the code for the XBus protocol to support all these sats. The code has been tested by various people including JR. Hopefully this can be accepted and added to the main code.
Edit: This update actually enables all DMSS sats from JR. It even supports the new range of diversity sats.","Blocked by #2253.  See comments on #2253.  @GruffyPuffy and @Saberlot need to combine forces here.  I don't want to be merge one and not the other.  #2253 has already had some code review and also includes documentation updates.
Suggest merging this PR's commits into #2253 and retest appropriately.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2246,2016-06-21T17:34:36Z,2016-07-21T15:01:21Z,2016-07-21T15:01:21Z,CLOSED,False,50,38,1,https://github.com/GruffyPuffy,Added support for older (and newer) versions of JR XBus DMSS sats,4,['Duplicate'],https://github.com/cleanflight/cleanflight/pull/2246,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2246#issuecomment-234281453,"Some of the different sats for JR XBus with old firmware were not working. This pull request has re-worked the code for the XBus protocol to support all these sats. The code has been tested by various people including JR. Hopefully this can be accepted and added to the main code.
Edit: This update actually enables all DMSS sats from JR. It even supports the new range of diversity sats.","ok, closing this, superceeded by #2253 now.
@GruffyPuffy if this is in error please open a new PR with any additional changes.  thanks for your contributions and please be sure to keep an eye out for any bug reports with the new code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2248,2016-06-21T21:06:13Z,2016-08-23T18:05:18Z,2016-08-23T18:05:24Z,MERGED,True,18,0,1,https://github.com/mojocorp,accgyo_mpu6500: add temperature reading.,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2248,https://github.com/mojocorp,1,https://github.com/cleanflight/cleanflight/pull/2248,"Add MPU6500 gyro temperature reading, assuming the cleanflight temperature should be expressed in degree centigrades (not documented anywhere or ?).
Using decigrades would make more sens since the temperature is stored in a short. Maybe some other sensors do this since in the frsky.c telemetry, the temperature is divided by 10 before sending. No info in the git history about this.","Add MPU6500 gyro temperature reading, assuming the cleanflight temperature should be expressed in degree centigrades (not documented anywhere or ?).
Using decigrades would make more sens since the temperature is stored in a short. Maybe some other sensors do this since in the frsky.c telemetry, the temperature is divided by 10 before sending. No info in the git history about this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2249,2016-06-22T05:01:19Z,2016-07-02T11:31:22Z,2016-07-02T20:06:42Z,MERGED,True,1,1,1,https://github.com/willcraft1,Correcting a word in doc 'Board - SPRacingF3.md',1,[],https://github.com/cleanflight/cleanflight/pull/2249,https://github.com/willcraft1,1,https://github.com/cleanflight/cleanflight/pull/2249,"Added a single letter. Corrected an ""of"" to ""off.""","Added a single letter. Corrected an ""of"" to ""off.""",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2249,2016-06-22T05:01:19Z,2016-07-02T11:31:22Z,2016-07-02T20:06:42Z,MERGED,True,1,1,1,https://github.com/willcraft1,Correcting a word in doc 'Board - SPRacingF3.md',1,[],https://github.com/cleanflight/cleanflight/pull/2249,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2249#issuecomment-230097410,"Added a single letter. Corrected an ""of"" to ""off.""",thanks!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2251,2016-06-23T11:13:14Z,2016-07-02T17:36:45Z,2016-07-11T00:44:29Z,MERGED,True,1,0,1,https://github.com/inbilla,Fixing vagrant provisioning error.,2,[],https://github.com/cleanflight/cleanflight/pull/2251,https://github.com/inbilla,1,https://github.com/cleanflight/cleanflight/pull/2251,"Provisioning succeeds with this change.
#2250","Provisioning succeeds with this change.
#2250",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2251,2016-06-23T11:13:14Z,2016-07-02T17:36:45Z,2016-07-11T00:44:29Z,MERGED,True,1,0,1,https://github.com/inbilla,Fixing vagrant provisioning error.,2,[],https://github.com/cleanflight/cleanflight/pull/2251,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2251#issuecomment-228021053,"Provisioning succeeds with this change.
#2250",Isn't it possible to add proper public keys? This only masks the problem ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2251,2016-06-23T11:13:14Z,2016-07-02T17:36:45Z,2016-07-11T00:44:29Z,MERGED,True,1,0,1,https://github.com/inbilla,Fixing vagrant provisioning error.,2,[],https://github.com/cleanflight/cleanflight/pull/2251,https://github.com/inbilla,3,https://github.com/cleanflight/cleanflight/pull/2251#issuecomment-228028410,"Provisioning succeeds with this change.
#2250","I'll try it, give me a moment",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2251,2016-06-23T11:13:14Z,2016-07-02T17:36:45Z,2016-07-11T00:44:29Z,MERGED,True,1,0,1,https://github.com/inbilla,Fixing vagrant provisioning error.,2,[],https://github.com/cleanflight/cleanflight/pull/2251,https://github.com/inbilla,4,https://github.com/cleanflight/cleanflight/pull/2251#issuecomment-228028950,"Provisioning succeeds with this change.
#2250","Seems to work, happier with this @ledvinap?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2251,2016-06-23T11:13:14Z,2016-07-02T17:36:45Z,2016-07-11T00:44:29Z,MERGED,True,1,0,1,https://github.com/inbilla,Fixing vagrant provisioning error.,2,[],https://github.com/cleanflight/cleanflight/pull/2251,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2251#issuecomment-228032108,"Provisioning succeeds with this change.
#2250","This should be more robust, thanks. Will merge tomorrow if there are no objections ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2251,2016-06-23T11:13:14Z,2016-07-02T17:36:45Z,2016-07-11T00:44:29Z,MERGED,True,1,0,1,https://github.com/inbilla,Fixing vagrant provisioning error.,2,[],https://github.com/cleanflight/cleanflight/pull/2251,https://github.com/inbilla,6,https://github.com/cleanflight/cleanflight/pull/2251#issuecomment-228032496,"Provisioning succeeds with this change.
#2250","no prob, glad to help",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2251,2016-06-23T11:13:14Z,2016-07-02T17:36:45Z,2016-07-11T00:44:29Z,MERGED,True,1,0,1,https://github.com/inbilla,Fixing vagrant provisioning error.,2,[],https://github.com/cleanflight/cleanflight/pull/2251,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2251#issuecomment-230097390,"Provisioning succeeds with this change.
#2250","@ledvinap no objections, go ahead",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2251,2016-06-23T11:13:14Z,2016-07-02T17:36:45Z,2016-07-11T00:44:29Z,MERGED,True,1,0,1,https://github.com/inbilla,Fixing vagrant provisioning error.,2,[],https://github.com/cleanflight/cleanflight/pull/2251,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2251#issuecomment-230113369,"Provisioning succeeds with this change.
#2250","Sorry, forgot about this ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2252,2016-06-23T11:14:45Z,2016-07-21T14:59:16Z,2016-07-21T14:59:16Z,MERGED,True,7,0,1,https://github.com/inbilla,Adding servo support for F3 Evo.,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2252,https://github.com/inbilla,1,https://github.com/cleanflight/cleanflight/pull/2252,"This allows Tricopters on the SP Racing F3 Evo
#2243","This allows Tricopters on the SP Racing F3 Evo
#2243",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,1,https://github.com/cleanflight/cleanflight/pull/2253,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-228130937,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","Why not define a specific crc crc16_CCITT? This is the CRC that is used in the other places in Cleanflight (apart from simple checksums, which couldn't use the generic CRC you have defined anyway). That is:
uint16_t crc16_CCITT(uint16_t crc, uint16_t value)
{
    uint8_t i;

    crc = crc ^ value << 8;

    for (int ii = 0; ii < 8; ++ii) {
        if (crc & 0x8000) {
            crc = crc << 1 ^ 0x1021;
        } else {
            crc = crc << 1;
        }
    }
    return crc;
}",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,3,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-228532443,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","added it as CRC CCITT but still with uint8_t as value, SUMD also use 8 bit as input, crc calc char by char. I hesitate to change the crc calc in sumd because i don't have a method to test it, neither to debug it to see if it does the job correctly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,4,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-228539078,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@ledvinap makes sense, changed accordingly",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230366186,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","I'm guessing that this PR and #2246 will conflict an break each other.
Can you merge #2246 locally and refactor/test as appropriate and then update this PR with the changes from #2246?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/GruffyPuffy,6,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230386348,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@saperlot
Please let me know if/how I can help in this matter. I think, as @hydra suggested that it might be easier to merge my additions into this PR. Basically I just changed the RJ01-part of the code. The new additions come to the fact that JR has a few versions (with slightly different protocols) of their DMSS sats. Also moved unpacking from ISR code into main code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,7,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230819983,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","oops my commit should be called ""merge with #2246"" is there a way to rename a commit, i guess no.
Anyway, @GruffyPuffy please check the merge if it works.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230859157,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@saperlot can you rebase against master (some files moved)
@GruffyPuffy ok, can you do the testing of the new code from @saperlot and confirm correct operations.
Also, i just want to confirm that you both have tested that FC failsafe behavior works with the receivers you're using/testing.  If there is any special configuration required to make the FC failsafe work then please add that to the PR in the form user of documentation.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/GruffyPuffy,9,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230859837,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@saperlot
It does not work, you have removed a few critical lines... ;) Anyhow, I have a fix for it. How can I commit it to this PR? Please advice as I am not a git jedi...
Updated comment with how to fix:
You have changed the xBusUnpackModeBFrame() function to not check for crc properly (as expected by the protocol). Hence, if you make sure that the only change in that function is to use the crc-calculation from crc.c (crc16_CCITT instead of the previous local one) and leave the rest as in my PR, it will work. For this to work you also need to include a #define that you removed (XBUS_FRAME_SIZE). I just made these changes manually on my comp and tested it with multiple receivers here.
@hydra I will check the failsafe. I do need to read up on how/what is supposed to happen etc. I guess we are missing something in the code?
Update on failsafe: If I turn off the TX, the sat will send out the fail-safe values after the TX is gone. Is this what you expect of it?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,10,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230889011,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@GruffyPuffy please check if it works when you add just the defining of XBUS_FRAME_SIZE and do this change in the crc checking function:
for (i = 0; i < XBUS_FRAME_SIZE; i++) {
@hydra well, will try ;-) i'm not a git expert.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,11,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230890097,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@GruffyPuffy i guess you have to check the failsafe with either unpowering the RX or plug out the RX signal from the controller, then it should go into failsafe configuration (if enabled). A failure would be if it still recognizes that data is coming in and failsafe won't go into failsafe in this case.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/GruffyPuffy,12,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230890652,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@saperlot: May I suggest we use the already tested code. It has been tested with many different receivers etc.
Re failsafe: That is how it works. The receiver will output the ""safe values"" set while binding.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/GruffyPuffy,13,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230894752,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@saperlot - Perfect! It works! Tested with all receivers I have.
@hydra - Failsafe works as expected, i.e. when TX is shut off the values are set by the RX/Sat to correct values.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,14,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230897954,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@GruffyPuffy Thanks for the quick update. Your failsafe check does not check Clmeanflight, it just tests your RX. Please see my previous comment..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,15,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230898699,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@GruffyPuffy oh i see you commented already my comment. Not sure where the disconnect is, but don't test the failsafe of your receiver ;-). Test the failsafe of Cleanflight by dropping the connection RX - Cleanflight board.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/GruffyPuffy,16,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230901636,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@saperlot I looked at how the SUMD and SBUS implemented this. If I understand it correctly (cannot test) they receive a flag/bit in the data from the receiver that it is in failsafe mode. There is no such data (that I am aware of) in the xbus protocol. So, I do not think they will detect a broken RX either...or did I completely miss something? So, I do not really know what is expected from me. Shall we implement some kind of message counter and indicate failsafe if the data stream is lost. If so, I guess we need to add that to others (SRXL etc) as well. Or, maybe on a higher level (in RX)? Anyhow...getting late here. No more time today! :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,17,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230905408,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@GruffyPuffy Yes you miss something. But that's no problem ;-). We should test if our code detects a connection loss to the receiver. We should test if our code doesn't send just always the last same values, even if it does not receive new data.
it is already implemented with the function xBusFrameStatus after we disconnect the receiver from Cleanflight the return shall be SERIAL_RX_FRAME_PENDING. Cleanflight recognizes a connection loss when SERIAL_RX_FRAME_PENDING gets reported for a second or so. Then Cleanflight goes into failsafe. So please test it like this:

Connect the configurator and watch the Receiver values.
Move your sticks on the TX a bit, so that is not at default value.
Disconnect the RX cable (Cable between Cleanflight and your RX)
See if the RX value on your screen changes to default values (after you disconnect the cable)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/GruffyPuffy,18,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230907427,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@saperlot Haha...ok. I got it...but that has been in the code for a long time. It works like you described. If I for example have a high throttle value, disconnects the RX-sat, then the value (seen in the configurator) returns to 0. I.e. it does not stay with a high value. My guess is then that we are good to go regarding failsafe...unless I still miss something... :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/saperlot,19,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-230907876,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@hydra

merged with master
SRXL for failsafe tested
failsafe and function of xbus tested by @GruffyPuffy

It is ready to be merged
(please also merge  cleanflight/cleanflight-configurator#402 )
Thanks",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-231036800,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","@saperlot good work, thanks!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2253,2016-06-23T17:00:38Z,2016-07-21T14:56:33Z,2016-08-09T12:32:09Z,MERGED,True,372,114,9,https://github.com/saperlot,adding support for Multiplex SRXL V2,7,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2253,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/2253#issuecomment-234279512,"Reopened Pull Request #1538
(i had to delete the branch so it has closed)
SRXL implementation to a seperate file,  …
improved code within ISR
CRC code outsourced
docs updated
please also merge the configurator pull request","ok, gonna merge this now that some of the other changes are in the master branch.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2258,2016-06-25T15:32:00Z,2016-07-06T18:14:31Z,2016-07-07T03:11:24Z,CLOSED,False,184769,12558,579,https://github.com/ricard0g0mes,Possibility to auto RTH when battery at xx.xxV or bellow.,513,[],https://github.com/cleanflight/cleanflight/pull/2258,https://github.com/ricard0g0mes,1,https://github.com/cleanflight/cleanflight/pull/2258,"It would be great if the FC measuring the battery would return to home when battery low.
It could blink some led or use the buzzer 1 minute before or something like that and then, auto RTH","It would be great if the FC measuring the battery would return to home when battery low.
It could blink some led or use the buzzer 1 minute before or something like that and then, auto RTH",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2258,2016-06-25T15:32:00Z,2016-07-06T18:14:31Z,2016-07-07T03:11:24Z,CLOSED,False,184769,12558,579,https://github.com/ricard0g0mes,Possibility to auto RTH when battery at xx.xxV or bellow.,513,[],https://github.com/cleanflight/cleanflight/pull/2258,https://github.com/skaman82,2,https://github.com/cleanflight/cleanflight/pull/2258#issuecomment-229811832,"It would be great if the FC measuring the battery would return to home when battery low.
It could blink some led or use the buzzer 1 minute before or something like that and then, auto RTH",I'm not sure if you are targeting the right branch. Is this a vilid PR?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2258,2016-06-25T15:32:00Z,2016-07-06T18:14:31Z,2016-07-07T03:11:24Z,CLOSED,False,184769,12558,579,https://github.com/ricard0g0mes,Possibility to auto RTH when battery at xx.xxV or bellow.,513,[],https://github.com/cleanflight/cleanflight/pull/2258,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2258#issuecomment-229996646,"It would be great if the FC measuring the battery would return to home when battery low.
It could blink some led or use the buzzer 1 minute before or something like that and then, auto RTH",In addition you should use remaining mah capacity rather than voltage.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2258,2016-06-25T15:32:00Z,2016-07-06T18:14:31Z,2016-07-07T03:11:24Z,CLOSED,False,184769,12558,579,https://github.com/ricard0g0mes,Possibility to auto RTH when battery at xx.xxV or bellow.,513,[],https://github.com/cleanflight/cleanflight/pull/2258,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2258#issuecomment-230093877,"It would be great if the FC measuring the battery would return to home when battery low.
It could blink some led or use the buzzer 1 minute before or something like that and then, auto RTH","@ricard0g0mes , is this meant to be a PR for iNav rather than Cleanflight?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2258,2016-06-25T15:32:00Z,2016-07-06T18:14:31Z,2016-07-07T03:11:24Z,CLOSED,False,184769,12558,579,https://github.com/ricard0g0mes,Possibility to auto RTH when battery at xx.xxV or bellow.,513,[],https://github.com/cleanflight/cleanflight/pull/2258,https://github.com/turboworks,5,https://github.com/cleanflight/cleanflight/pull/2258#issuecomment-230205309,"It would be great if the FC measuring the battery would return to home when battery low.
It could blink some led or use the buzzer 1 minute before or something like that and then, auto RTH","hi,in inav, any way to get 2 active servo pins in custom or custom tri or bi ?in custom  tricopter it comes close ,works in the motor page, but only one output pin for servo, motors are good. naze 32 . inav works amazing ! great work.
thanks
Rick
turboworks@yahoo.com",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2258,2016-06-25T15:32:00Z,2016-07-06T18:14:31Z,2016-07-07T03:11:24Z,CLOSED,False,184769,12558,579,https://github.com/ricard0g0mes,Possibility to auto RTH when battery at xx.xxV or bellow.,513,[],https://github.com/cleanflight/cleanflight/pull/2258,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2258#issuecomment-230858231,"It would be great if the FC measuring the battery would return to home when battery low.
It could blink some led or use the buzzer 1 minute before or something like that and then, auto RTH",I think this PR has been created in the wrong place.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2258,2016-06-25T15:32:00Z,2016-07-06T18:14:31Z,2016-07-07T03:11:24Z,CLOSED,False,184769,12558,579,https://github.com/ricard0g0mes,Possibility to auto RTH when battery at xx.xxV or bellow.,513,[],https://github.com/cleanflight/cleanflight/pull/2258,https://github.com/turboworks,7,https://github.com/cleanflight/cleanflight/pull/2258#issuecomment-230968058,"It would be great if the FC measuring the battery would return to home when battery low.
It could blink some led or use the buzzer 1 minute before or something like that and then, auto RTH","Hi, thanks ,were would you ? Sorry,hardware guy. Btw good work!
On Jul 6, 2016, at 2:14 PM, Dominic Clifton notifications@github.com wrote:

I think this PR has been created in the wrong place.
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2268,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2268#issuecomment-230367058,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET",I ran some builds again as it had errored.  hopefully just a transient network error.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/ethomas997,3,https://github.com/cleanflight/cleanflight/pull/2268#issuecomment-230921050,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","I'll be implementing some changes as per feedback on the Betaflight PR.
@hydra Do you think this functionality should be split into two parameters (as per @martinbudden suggestion), a value for ""strength"" and a flag for ""inverted-flight-leveling""?  Also, do you have a preference for the names (""horizon_angle_strength"")?  I don't know what I'd call the flag parameter.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2268#issuecomment-231036427,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","yes, i dislike variable re-use. it just leads to complicated code, magic numbers and confusion for users and developers.  @martinbudden  is 100% correct on that issue.
with regards to naming, how about horizon_inversion_strength and horizon_angle_strength to start with and if any better names come up we can change them easily enough.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/ethomas997,5,https://github.com/cleanflight/cleanflight/pull/2268#issuecomment-231175981,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","@hydra What @martinbudden was suggesting is to have a value parameter and a flag parameter (not two value parameters).  Using the terms ""angle"" or ""strength"" for this seems quite problematic to me -- the old self-leveling flight mode is often referred to as ""angle"", and there are already ""Strength (Angle)"" and ""Strength (Horizon)"" settings.
I chose the term ""inclination"" because it's used with the same meaning elsewhere in Cleanflight -- in the code, and the 'max_angle_inclination' parameter.  In that parameter it's also called ""tilt"", so perhaps that's a good, short term to use.  How about this?:
horizon_tilt_effect 0|100|75:  Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode.  Larger values result in less self-leveling (more ""acro"") as the tilt of the vehicle increases.  The default value of 75 provides good performance when doing large loops and fast-forward flight.  With a value of 0 the strength of the self-leveling would be solely dependent on the stick position.
horizon_tilt_mode SAFE|EXPERT:  Sets the preformance mode for 'horizon_tilt_effect'
SAFE = leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)
EXPERT = leveling can be totally off when inverted:
In this range, the inclination (tilt) of the vehicle can fully ""override"" the self-leveling.  In this mode, when the 'horizon_tilt_effect' parameter is set to around 50, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/ethomas997,6,https://github.com/cleanflight/cleanflight/pull/2268#issuecomment-232897395,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","@hydra Wondering, what do you think of my plan in the previous comment to do this with two parameters?
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2268#issuecomment-234278675,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","@ethomas997 sorry it took a while to get round to answering, various crisis goings on in my life these days, seems like a new crisis every other day for a few weeks now... :(
yes, the usage of 'tilt' seems better than the original names.  please update the PR as you suggest.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/ethomas997,8,https://github.com/cleanflight/cleanflight/pull/2268#issuecomment-234727464,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","@hydra Understood; no problem.  I'll be updating this PR and 'vbat_hysteresis' #2219.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2268,2016-06-29T06:47:37Z,2016-08-22T07:20:35Z,2016-08-22T07:20:35Z,CLOSED,False,101,26,5,https://github.com/ethomas997,Add horizon_incl_fact parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2268,https://github.com/ethomas997,9,https://github.com/cleanflight/cleanflight/pull/2268#issuecomment-241332484,"Note:  This PR has been superseded by #2364
This modification adds a new CLI parameter, 'horizon_incl_fact' (""inclination factor""), which controls the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
The 'horizon_incl_fact' parameter affects Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_incl_fact' to 0 will run the current horizon-mode behavior.  For other values, there are two ranges for the 'horizon_incl_fact' parameter:
1 to 99 => Range 1 - leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered.  So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat.  This is similar to the current horizon-mode behavior.  (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)  Larger values result in less self-leveling in response to large inclinations.  The 'horizon_incl_fact' value is combined with the 'level_horizon' parameter to control the self-leveling effect.  The default value of 75 should provide significant improvements in horizon-mode flight characteristics.
100 to 250 => Range 2 - leveling can be totally off when inverted:
In this range, the inclination of the vehicle can fully ""override"" the self-leveling.  When the parameter set to around 150, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled.  This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_incl_fact' parameter value is separate for each profile, and is implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  My test flights with this version were successful.  (A PR of this mod for Betaflight is here).
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET",Superseded by #2364,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2272,2016-07-01T18:29:19Z,2016-09-14T16:21:26Z,2016-09-14T16:21:26Z,CLOSED,False,6,0,1,https://github.com/jflyper,Make I2C STOPF detection work (F3),1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2272,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2272,"i2cWrite() and i2cRead() returns prematurely without waiting for a stop condition if STOPF is already set before a transaction for some reason.
There are slave devices that can not handle back-to-back transactions, in which case some delay must explicitly be programmed. Returning prematurely from previous transaction makes it extremely difficult to determine the correct amount of delay, often ending up with large delay count that works for all cases.
This PR will pre-clear the STOPF prior to a transaction so the STOPF detection at the end of function correctly detect the stop condition for the transaction.","i2cWrite() and i2cRead() returns prematurely without waiting for a stop condition if STOPF is already set before a transaction for some reason.
There are slave devices that can not handle back-to-back transactions, in which case some delay must explicitly be programmed. Returning prematurely from previous transaction makes it extremely difficult to determine the correct amount of delay, often ending up with large delay count that works for all cases.
This PR will pre-clear the STOPF prior to a transaction so the STOPF detection at the end of function correctly detect the stop condition for the transaction.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2272,2016-07-01T18:29:19Z,2016-09-14T16:21:26Z,2016-09-14T16:21:26Z,CLOSED,False,6,0,1,https://github.com/jflyper,Make I2C STOPF detection work (F3),1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2272,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2272#issuecomment-230097345,"i2cWrite() and i2cRead() returns prematurely without waiting for a stop condition if STOPF is already set before a transaction for some reason.
There are slave devices that can not handle back-to-back transactions, in which case some delay must explicitly be programmed. Returning prematurely from previous transaction makes it extremely difficult to determine the correct amount of delay, often ending up with large delay count that works for all cases.
This PR will pre-clear the STOPF prior to a transaction so the STOPF detection at the end of function correctly detect the stop condition for the transaction.","@jflyper great, curoius though which slave devices has this been tested with?  what caused you to look into this and fix it?  how will existing users be affected by this? side effects?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2272,2016-07-01T18:29:19Z,2016-09-14T16:21:26Z,2016-09-14T16:21:26Z,CLOSED,False,6,0,1,https://github.com/jflyper,Make I2C STOPF detection work (F3),1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2272,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/2272#issuecomment-230132582,"i2cWrite() and i2cRead() returns prematurely without waiting for a stop condition if STOPF is already set before a transaction for some reason.
There are slave devices that can not handle back-to-back transactions, in which case some delay must explicitly be programmed. Returning prematurely from previous transaction makes it extremely difficult to determine the correct amount of delay, often ending up with large delay count that works for all cases.
This PR will pre-clear the STOPF prior to a transaction so the STOPF detection at the end of function correctly detect the stop condition for the transaction.","@hydra quick answers for now. More will follow (like backgrounds) and such.
Which slave device:
The specific device I came to notice this bug was an arduino variant that runs I2C-UART bridge, but my guess is that most software implemented slaves have a chance to be affected by the bug. Silicon implementations for simpler functions should be more tolerant.
What cause me to look into this:
Will be explained in a separate background comment.
Impact to existing users
The bug will only develop when consecutive WRITE transaction is executed, such as a WRITE transaction (e.g. register write)  followed by a WRITE-READ (e.g. register read) transaction. As mentioned above, if an existing device is a silicon implementation, then it is likely not to develop.
Side effects:
There's a penalty of 1 byte worth of time (around 10usec@800KHz bus) that the i2cWrite() must spend waiting for STOPF to be posted. If i2cWriteBuffer() is implemented and called with more than 2 bytes, then 2 bytes worth of time (around 20usec@800KHz bus) will be the penalty. i2cRead() side has much smaller penalty, probably few usec.
If the added penalty is considered harmful, then we can come up with an API(s) that is capable of distinguishing fire-and-forget and wait-for-completion cases.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2272,2016-07-01T18:29:19Z,2016-09-14T16:21:26Z,2016-09-14T16:21:26Z,CLOSED,False,6,0,1,https://github.com/jflyper,Make I2C STOPF detection work (F3),1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2272,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2272#issuecomment-230366692,"i2cWrite() and i2cRead() returns prematurely without waiting for a stop condition if STOPF is already set before a transaction for some reason.
There are slave devices that can not handle back-to-back transactions, in which case some delay must explicitly be programmed. Returning prematurely from previous transaction makes it extremely difficult to determine the correct amount of delay, often ending up with large delay count that works for all cases.
This PR will pre-clear the STOPF prior to a transaction so the STOPF detection at the end of function correctly detect the stop condition for the transaction.",@ledvinap thoughts?  Not got brain-space for this right now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2272,2016-07-01T18:29:19Z,2016-09-14T16:21:26Z,2016-09-14T16:21:26Z,CLOSED,False,6,0,1,https://github.com/jflyper,Make I2C STOPF detection work (F3),1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2272,https://github.com/jflyper,5,https://github.com/cleanflight/cleanflight/pull/2272#issuecomment-230369080,"i2cWrite() and i2cRead() returns prematurely without waiting for a stop condition if STOPF is already set before a transaction for some reason.
There are slave devices that can not handle back-to-back transactions, in which case some delay must explicitly be programmed. Returning prematurely from previous transaction makes it extremely difficult to determine the correct amount of delay, often ending up with large delay count that works for all cases.
This PR will pre-clear the STOPF prior to a transaction so the STOPF detection at the end of function correctly detect the stop condition for the transaction.",@hydra @ledvinap I would like to meld #2133 (adding i2cWriteBuffer() for F3)  into this PR if possible; it will be nice to have i2cWriteBuffer() so that CF can talk to CFOSD (and other I2C enabled OSDs) over I2C.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2272,2016-07-01T18:29:19Z,2016-09-14T16:21:26Z,2016-09-14T16:21:26Z,CLOSED,False,6,0,1,https://github.com/jflyper,Make I2C STOPF detection work (F3),1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2272,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2272#issuecomment-230371065,"i2cWrite() and i2cRead() returns prematurely without waiting for a stop condition if STOPF is already set before a transaction for some reason.
There are slave devices that can not handle back-to-back transactions, in which case some delay must explicitly be programmed. Returning prematurely from previous transaction makes it extremely difficult to determine the correct amount of delay, often ending up with large delay count that works for all cases.
This PR will pre-clear the STOPF prior to a transaction so the STOPF detection at the end of function correctly detect the stop condition for the transaction.",probably best to merge this and #2133 in a feature PR for I2C OSD support by the sounds of it then.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2272,2016-07-01T18:29:19Z,2016-09-14T16:21:26Z,2016-09-14T16:21:26Z,CLOSED,False,6,0,1,https://github.com/jflyper,Make I2C STOPF detection work (F3),1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2272,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2272#issuecomment-247069636,"i2cWrite() and i2cRead() returns prematurely without waiting for a stop condition if STOPF is already set before a transaction for some reason.
There are slave devices that can not handle back-to-back transactions, in which case some delay must explicitly be programmed. Returning prematurely from previous transaction makes it extremely difficult to determine the correct amount of delay, often ending up with large delay count that works for all cases.
This PR will pre-clear the STOPF prior to a transaction so the STOPF detection at the end of function correctly detect the stop condition for the transaction.",closing this for the same reason #2133 is closed - it's not needed right now and there is testing overhead in changing the i2c bus communications.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2276,2016-07-03T17:02:45Z,2016-07-06T18:13:27Z,2016-07-06T18:13:27Z,MERGED,True,3,0,1,https://github.com/DreamNik,Disable arm atomic functions on non-arm devices,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2276,https://github.com/DreamNik,1,https://github.com/cleanflight/cleanflight/pull/2276,This one is just disables all ARM-specific macro functions for non-arm targets (like x86).,This one is just disables all ARM-specific macro functions for non-arm targets (like x86).,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2277,2016-07-03T17:05:19Z,2016-07-06T18:09:13Z,2016-07-06T18:09:13Z,MERGED,True,8,2,3,https://github.com/DreamNik,cleanup led_config declaration.,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2277,https://github.com/DreamNik,1,https://github.com/cleanflight/cleanflight/pull/2277,"Is this unintentional mistype or there is some logic behind it?
I think it's more appropriate to declare it as ""extern"" in header.","Is this unintentional mistype or there is some logic behind it?
I think it's more appropriate to declare it as ""extern"" in header.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2277,2016-07-03T17:05:19Z,2016-07-06T18:09:13Z,2016-07-06T18:09:13Z,MERGED,True,8,2,3,https://github.com/DreamNik,cleanup led_config declaration.,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2277,https://github.com/DreamNik,2,https://github.com/cleanflight/cleanflight/pull/2277#issuecomment-230166976,"Is this unintentional mistype or there is some logic behind it?
I think it's more appropriate to declare it as ""extern"" in header.","Sorry, I'm more of a C++ guy - didn't used to put two names to same structure :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2277,2016-07-03T17:05:19Z,2016-07-06T18:09:13Z,2016-07-06T18:09:13Z,MERGED,True,8,2,3,https://github.com/DreamNik,cleanup led_config declaration.,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2277,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2277#issuecomment-230167337,"Is this unintentional mistype or there is some logic behind it?
I think it's more appropriate to declare it as ""extern"" in header.","Yes, I'm more of a C++ guy as well, and this is one of the really annoying differences between C and C++.
That, and the fact there is no function overloading - that could easily be in C.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2283,2016-07-06T07:23:03Z,2016-07-16T17:06:54Z,2016-07-16T17:10:31Z,MERGED,True,349,5,8,https://github.com/lkaino,New target: F3FC Racing,3,[],https://github.com/cleanflight/cleanflight/pull/2283,https://github.com/lkaino,1,https://github.com/cleanflight/cleanflight/pull/2283,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2283,2016-07-06T07:23:03Z,2016-07-16T17:06:54Z,2016-07-16T17:10:31Z,MERGED,True,349,5,8,https://github.com/lkaino,New target: F3FC Racing,3,[],https://github.com/cleanflight/cleanflight/pull/2283,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2283#issuecomment-230856644,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,rebase please.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2283,2016-07-06T07:23:03Z,2016-07-16T17:06:54Z,2016-07-16T17:10:31Z,MERGED,True,349,5,8,https://github.com/lkaino,New target: F3FC Racing,3,[],https://github.com/cleanflight/cleanflight/pull/2283,https://github.com/lkaino,3,https://github.com/cleanflight/cleanflight/pull/2283#issuecomment-230882745,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,@hydra rebased.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2283,2016-07-06T07:23:03Z,2016-07-16T17:06:54Z,2016-07-16T17:10:31Z,MERGED,True,349,5,8,https://github.com/lkaino,New target: F3FC Racing,3,[],https://github.com/cleanflight/cleanflight/pull/2283,https://github.com/lkaino,4,https://github.com/cleanflight/cleanflight/pull/2283#issuecomment-231007365,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,Rebased to get the CI jobs pass.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2283,2016-07-06T07:23:03Z,2016-07-16T17:06:54Z,2016-07-16T17:10:31Z,MERGED,True,349,5,8,https://github.com/lkaino,New target: F3FC Racing,3,[],https://github.com/cleanflight/cleanflight/pull/2283,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2283#issuecomment-231046445,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,"@lkaino , because of PR #2288 , you no longer need to include system_stm32f30x.c and system_stm32f30x.h
Note also your previous build failed because you accidentally removed SPRACINGF3OSD and SPRACINGF1OSD from the ..._TARGETS= lines in the makefile.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2283,2016-07-06T07:23:03Z,2016-07-16T17:06:54Z,2016-07-16T17:10:31Z,MERGED,True,349,5,8,https://github.com/lkaino,New target: F3FC Racing,3,[],https://github.com/cleanflight/cleanflight/pull/2283,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2283#issuecomment-231047610,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,"@lkaino , you've ommitted  SPRACINGF1OSD from VCP_TARGETS = ...
Also you can get rid of  system_stm32f30x.c and system_stm32f30x.h",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2283,2016-07-06T07:23:03Z,2016-07-16T17:06:54Z,2016-07-16T17:10:31Z,MERGED,True,349,5,8,https://github.com/lkaino,New target: F3FC Racing,3,[],https://github.com/cleanflight/cleanflight/pull/2283,https://github.com/lkaino,7,https://github.com/cleanflight/cleanflight/pull/2283#issuecomment-231049311,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,"@martinbudden Yes my bad, added it back.
Wow this thing changes fast :). Rebased again, removed the system files.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2283,2016-07-06T07:23:03Z,2016-07-16T17:06:54Z,2016-07-16T17:10:31Z,MERGED,True,349,5,8,https://github.com/lkaino,New target: F3FC Racing,3,[],https://github.com/cleanflight/cleanflight/pull/2283,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2283#issuecomment-233140427,Upcoming standalone F3 board from RCExplorer.se (not the Tricopter integrated one ).,"I'm going to rename this target to 'REF3'  i.e. 'RC Explorer F3'.
Target build identifiers are supposed to all be 4 characters too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2285,2016-07-06T21:35:06Z,2016-07-07T05:33:39Z,2016-07-08T15:02:31Z,MERGED,True,9,9,1,https://github.com/martinbudden,Changed binary constants to hex to avoid compiler warnings,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2285,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2285,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2285,2016-07-06T21:35:06Z,2016-07-07T05:33:39Z,2016-07-08T15:02:31Z,MERGED,True,9,9,1,https://github.com/martinbudden,Changed binary constants to hex to avoid compiler warnings,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2285,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2285#issuecomment-230983243,,"@hydra , I've merged this in since it was causing a lot of PRs to fail the Travis build.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2285,2016-07-06T21:35:06Z,2016-07-07T05:33:39Z,2016-07-08T15:02:31Z,MERGED,True,9,9,1,https://github.com/martinbudden,Changed binary constants to hex to avoid compiler warnings,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2285,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2285#issuecomment-231372239,,"ok, i did wonder if that was going to cause a problem.  Odd that I didn't get any issues with the PR I made or locally though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2285,2016-07-06T21:35:06Z,2016-07-07T05:33:39Z,2016-07-08T15:02:31Z,MERGED,True,9,9,1,https://github.com/martinbudden,Changed binary constants to hex to avoid compiler warnings,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2285,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2285#issuecomment-231383577,,"Yes, it was odd that your PR seemed to have passed the travis build.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/savaga,1,https://github.com/cleanflight/cleanflight/pull/2287,Needs for future max7456 driver DMA support,Needs for future max7456 driver DMA support,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-231118853,Needs for future max7456 driver DMA support,"Looks good.
One thing I am not sure about is callback-user-data parameter handling.
Personally I prefer handler object with callback function pointer as it's member. It is used in my EXTI implementation (https://github.com/ledvinap/cleanflight/blob/local/src/main/drivers/exti.c#L145 / https://github.com/ledvinap/cleanflight/blob/local/src/main/drivers/exti.h#L27) and in timer code.
Pointer to handler object is passed to callback function. It is easy to include handler structure in higher-level struct/object and use container_of macro to get 'self' pointer.
One example is here: https://github.com/cleanflight/cleanflight/blob/master/src/main/drivers/pwm_rx.c#L308, it is simple to add overflowCb and edgeCb into pwmInputPort_t structure.
One advantage is that you can add data members to user-allocated object, making static memory management easier (timerOvrHandlerRec_t is implemented as linked list of (user supplied) handlers - https://github.com/cleanflight/cleanflight/blob/master/src/main/drivers/timer.h#L55)
I am a bit biased in this matter, so take it only as suggestion/idea. Maybe other CF developers may comment too ...
Another minor optimization is to use dummy function instead of NULL for unused handler - that way few instructions are saved in IRQ ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/savaga,3,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-231508496,Needs for future max7456 driver DMA support,"@ledvinap, thanks for your review! I actually like the implementation of the linked list of user handlers. And I'm gonna use it in DMA too. The reason I need multiple handlers is supporting multiple devices on the same bus (like spi or i2c). Will update the PR soon
BTW any tips on how to pass those checks? I have no idea what's wrong with the code",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-231532643,Needs for future max7456 driver DMA support,"@savaga: I would expect single SPI/I2C driver per interface, with this driver handling all interface-specifin details (interrupts/dma/bus arbitration) and providing functions to multiple device drivers. Allowing direct DMA access to device driver will probably result in poor layer isolation.
The problem with I2C is IMO more about bus arbitration and glue that will connect interrupt and main loop.
Ideal solution is using RTOS, but CF is moving only slowly in this direction.
One possibility is to move (considerable) part of device driver into interrupt and let it communicate with task code somehow. But this will be quite hard to debug (multiple devices will be mixed together) and may increase interrupt latency considerable.
Or some command processor may in implemented in I2C driver - device driver will queue commands to be executed (read/write register(s); maybe same quick callback to handle conditional code effectively) and wait for competition (re-schedule when commands are finished).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/jflyper,5,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-231571228,Needs for future max7456 driver DMA support,"Or some command processor may in implemented in I2C driver - device driver will queue commands to be executed (read/write register(s); maybe same quick callback to handle conditional code effectively) and wait for competition (re-schedule when commands are finished).

+1
I was thinking of a similar approach, but I wasn't sure how to transfer from interrupt context to task context. Scheduler should be modified to honor tasks waiting for events?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-231586075,Needs for future max7456 driver DMA support,"@jflyper : Scheduler is pretty overengineered. The whole soft priority thing it far too complicated and is not used (ARM is refused when load is high - simple priority based scheduler is almost identical when load is light)
Normally you will simply move task to run-queue and use same mechanism to pass data.
IMO it would be best to take scheduler from same tested RTOS - freeRTOS / ChibiOS etc .. Just the part to select proces for running, no preemption.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-232466458,Needs for future max7456 driver DMA support,"@savaga Hiya!  Yes, I agree with @ledvinap regarding the use of callback object, likely there is other areas we can cleanup in Cleanflight regarding that but we can deal with that after this - this is time sensitive so please focus on this PR if possible.
When do you think you'll have a chance to finish this PR?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/savaga,8,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-232478212,Needs for future max7456 driver DMA support,"@hydra, I'll update the PR tonight (PDT)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-233132135,Needs for future max7456 driver DMA support,"@savaga Thanks for the update, @ledvinap thanks for the review!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-233132402,Needs for future max7456 driver DMA support,@savaga can you fix the failing unit tests.  Ready to merge otherwise?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/savaga,11,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-233153118,Needs for future max7456 driver DMA support,"The test passes in my local branch, but it fails in master. Last failure isn't related to my PR",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-233157506,Needs for future max7456 driver DMA support,"@savaga coolthanks, i'll check it out and merge asap.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-233282917,Needs for future max7456 driver DMA support,ok @savaga merged.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-233286402,Needs for future max7456 driver DMA support,"@savaga See #2210 (comment)
The max7456 via DMA should follow this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/ledvinap,15,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-233298365,Needs for future max7456 driver DMA support,"@hydra: This PR was failing build.
https://github.com/cleanflight/cleanflight/blob/master/src/main/target/RCEXPLORERF3/target.h#L178 is not converted to new DMA handler",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2287,2016-07-07T08:05:26Z,2016-07-18T09:23:49Z,2016-11-13T22:38:25Z,MERGED,True,234,203,39,https://github.com/savaga,Rework dma driver,4,[],https://github.com/cleanflight/cleanflight/pull/2287,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2287#issuecomment-244792002,Needs for future max7456 driver DMA support,@savaga i have referenced your MAX7456 DMA work and got it working on the boards here.  No need for a PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2288,2016-07-07T09:32:30Z,2016-07-07T10:47:56Z,2016-07-08T14:19:55Z,MERGED,True,6,5908,32,https://github.com/martinbudden,Deleted NAZE32PRO target and removed duplicated target files,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2288,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2288,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2288,2016-07-07T09:32:30Z,2016-07-07T10:47:56Z,2016-07-08T14:19:55Z,MERGED,True,6,5908,32,https://github.com/martinbudden,Deleted NAZE32PRO target and removed duplicated target files,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2288,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2288#issuecomment-231371910,,@martinbudden thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2291,2016-07-09T03:45:30Z,2016-07-09T07:10:06Z,2016-07-11T09:11:29Z,MERGED,True,1,1,1,https://github.com/jflyper,Fix a typo in openSerialPort(),1,[],https://github.com/cleanflight/cleanflight/pull/2291,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2291,"Small, irrelevant (caz softserials comes in a pair) mistake here.","Small, irrelevant (caz softserials comes in a pair) mistake here.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2293,2016-07-09T12:21:54Z,2016-07-09T12:30:06Z,2016-07-18T09:40:25Z,CLOSED,False,2,2,1,https://github.com/tedbarth, Fix ambiguous mode bit masking,1,[],https://github.com/cleanflight/cleanflight/pull/2293,https://github.com/tedbarth,1,https://github.com/cleanflight/cleanflight/pull/2293,I was wrong,I was wrong,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2293,2016-07-09T12:21:54Z,2016-07-09T12:30:06Z,2016-07-18T09:40:25Z,CLOSED,False,2,2,1,https://github.com/tedbarth, Fix ambiguous mode bit masking,1,[],https://github.com/cleanflight/cleanflight/pull/2293,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2293#issuecomment-233285688,I was wrong,"No need to change/delete things @tedbarth - it doesn't matter if you were wrong or not, just add comment and close in future please since now the conversation history is lost.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2295,2016-07-10T05:52:37Z,2016-07-10T05:52:45Z,2016-09-06T10:12:49Z,CLOSED,False,184814,12566,579,https://github.com/digitalentity,Force no PWM pulses on soft reset,531,[],https://github.com/cleanflight/cleanflight/pull/2295,https://github.com/digitalentity,1,https://github.com/cleanflight/cleanflight/pull/2295,A fix for brief motor spinup on reboot.,A fix for brief motor spinup on reboot.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2295,2016-07-10T05:52:37Z,2016-07-10T05:52:45Z,2016-09-06T10:12:49Z,CLOSED,False,184814,12566,579,https://github.com/digitalentity,Force no PWM pulses on soft reset,531,[],https://github.com/cleanflight/cleanflight/pull/2295,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/2295#issuecomment-231572364,A fix for brief motor spinup on reboot.,"Sorry, wrong master",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2297,2016-07-11T12:37:13Z,2016-07-11T14:12:48Z,2016-07-12T12:50:19Z,MERGED,True,1,1,1,https://github.com/jflyper,B is most likely,1,[],https://github.com/cleanflight/cleanflight/pull/2297,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2297,"Don’t know what the bus sw is, but looks like a simple typo.","Don’t know what the bus sw is, but looks like a simple typo.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2297,2016-07-11T12:37:13Z,2016-07-11T14:12:48Z,2016-07-12T12:50:19Z,MERGED,True,1,1,1,https://github.com/jflyper,B is most likely,1,[],https://github.com/cleanflight/cleanflight/pull/2297,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2297#issuecomment-231746355,"Don’t know what the bus sw is, but looks like a simple typo.",Thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2297,2016-07-11T12:37:13Z,2016-07-11T14:12:48Z,2016-07-12T12:50:19Z,MERGED,True,1,1,1,https://github.com/jflyper,B is most likely,1,[],https://github.com/cleanflight/cleanflight/pull/2297,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/2297#issuecomment-231778425,"Don’t know what the bus sw is, but looks like a simple typo.","BTW, do you know what the bus switch is? F3Discovery specific?
P.S.
I'm trying to convert my original (first rev) SPRF3 with a dead gyro into a test platform.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2298,2016-07-11T21:41:09Z,2016-07-16T14:09:25Z,2016-07-18T10:24:13Z,MERGED,True,1,16,1,https://github.com/wkrysmann,Update flashing procedure for CC3D,2,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2298,https://github.com/wkrysmann,1,https://github.com/cleanflight/cleanflight/pull/2298,Only single binary image mode can be used since version 1.11.0,Only single binary image mode can be used since version 1.11.0,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2298,2016-07-11T21:41:09Z,2016-07-16T14:09:25Z,2016-07-18T10:24:13Z,MERGED,True,1,16,1,https://github.com/wkrysmann,Update flashing procedure for CC3D,2,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2298,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2298#issuecomment-232267870,Only single binary image mode can be used since version 1.11.0,"to clarify, perhaps mention that older releases supported the OpenPilot boot loader and direct users to the old documentation,",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2298,2016-07-11T21:41:09Z,2016-07-16T14:09:25Z,2016-07-18T10:24:13Z,MERGED,True,1,16,1,https://github.com/wkrysmann,Update flashing procedure for CC3D,2,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2298,https://github.com/wkrysmann,3,https://github.com/cleanflight/cleanflight/pull/2298#issuecomment-232572951,Only single binary image mode can be used since version 1.11.0,"Good point, done",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2298,2016-07-11T21:41:09Z,2016-07-16T14:09:25Z,2016-07-18T10:24:13Z,MERGED,True,1,16,1,https://github.com/wkrysmann,Update flashing procedure for CC3D,2,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2298,https://github.com/wkrysmann,4,https://github.com/cleanflight/cleanflight/pull/2298#issuecomment-232576860,Only single binary image mode can be used since version 1.11.0,Fixes #1617,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2300,2016-07-12T18:47:56Z,2016-07-13T19:54:56Z,2016-07-23T23:47:59Z,MERGED,True,2,2,1,https://github.com/gaelj,don't scale mag_declination by 10 (readd),1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2300,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2300,"This change was added in cleanflight and then got left behind in a cleanup.
This brings an incompatiblity with the configurator.
Possibly fixes  #2290","This change was added in cleanflight and then got left behind in a cleanup.
This brings an incompatiblity with the configurator.
Possibly fixes  #2290",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2300,2016-07-12T18:47:56Z,2016-07-13T19:54:56Z,2016-07-23T23:47:59Z,MERGED,True,2,2,1,https://github.com/gaelj,don't scale mag_declination by 10 (readd),1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2300,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2300#issuecomment-232467821,"This change was added in cleanflight and then got left behind in a cleanup.
This brings an incompatiblity with the configurator.
Possibly fixes  #2290","merging, thanks!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2305,2016-07-16T23:35:35Z,2016-07-17T00:11:27Z,2016-11-10T13:43:11Z,CLOSED,False,10,0,1,https://github.com/AndersHoglund,Added driver/adc.o to rx unit tests. Build failed.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2305,https://github.com/AndersHoglund,1,https://github.com/cleanflight/cleanflight/pull/2305,"Added missing driver/adc.o to the rx unittests. Jenkins build failed, in RED. This PR fixes that.
http://andwho.sytes.net:8080/job/Hydra_CleanFlight/202/","Added missing driver/adc.o to the rx unittests. Jenkins build failed, in RED. This PR fixes that.
http://andwho.sytes.net:8080/job/Hydra_CleanFlight/202/",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2305,2016-07-16T23:35:35Z,2016-07-17T00:11:27Z,2016-11-10T13:43:11Z,CLOSED,False,10,0,1,https://github.com/AndersHoglund,Added driver/adc.o to rx unit tests. Build failed.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2305,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2305#issuecomment-233157784,"Added missing driver/adc.o to the rx unittests. Jenkins build failed, in RED. This PR fixes that.
http://andwho.sytes.net:8080/job/Hydra_CleanFlight/202/","this wasn't needed, see 84b3afd",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2305,2016-07-16T23:35:35Z,2016-07-17T00:11:27Z,2016-11-10T13:43:11Z,CLOSED,False,10,0,1,https://github.com/AndersHoglund,Added driver/adc.o to rx unit tests. Build failed.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2305,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2305#issuecomment-233157796,"Added missing driver/adc.o to the rx unittests. Jenkins build failed, in RED. This PR fixes that.
http://andwho.sytes.net:8080/job/Hydra_CleanFlight/202/",thanks for the timely PR though 😄,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2305,2016-07-16T23:35:35Z,2016-07-17T00:11:27Z,2016-11-10T13:43:11Z,CLOSED,False,10,0,1,https://github.com/AndersHoglund,Added driver/adc.o to rx unit tests. Build failed.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2305,https://github.com/AndersHoglund,4,https://github.com/cleanflight/cleanflight/pull/2305#issuecomment-233173386,"Added missing driver/adc.o to the rx unittests. Jenkins build failed, in RED. This PR fixes that.
http://andwho.sytes.net:8080/job/Hydra_CleanFlight/202/","OK, but rx still has this dependency to adc. Even if not used right now....",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2305,2016-07-16T23:35:35Z,2016-07-17T00:11:27Z,2016-11-10T13:43:11Z,CLOSED,False,10,0,1,https://github.com/AndersHoglund,Added driver/adc.o to rx unit tests. Build failed.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2305,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2305#issuecomment-233282367,"Added missing driver/adc.o to the rx unittests. Jenkins build failed, in RED. This PR fixes that.
http://andwho.sytes.net:8080/job/Hydra_CleanFlight/202/",i think it would be better to link it only when a test is written to exercise the code.  It makes refactoring easier in the mean time.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2307,2016-07-18T06:27:21Z,2016-07-18T06:27:30Z,2016-08-29T11:18:28Z,MERGED,True,35,11,5,https://github.com/martinbudden,Added pid delta from error calculation,1,[],https://github.com/cleanflight/cleanflight/pull/2307,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2307,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2307,2016-07-18T06:27:21Z,2016-07-18T06:27:30Z,2016-08-29T11:18:28Z,MERGED,True,35,11,5,https://github.com/martinbudden,Added pid delta from error calculation,1,[],https://github.com/cleanflight/cleanflight/pull/2307,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2307#issuecomment-233267319,,"This will break old config - variable was added in middle of config structure and id/version is the same.
Correct way to do this change is to add the variable last into parameter group and define it so that 0 is default value.
Also merging changes into master (and with Travis failing) without warning is bad idea ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2307,2016-07-18T06:27:21Z,2016-07-18T06:27:30Z,2016-08-29T11:18:28Z,MERGED,True,35,11,5,https://github.com/martinbudden,Added pid delta from error calculation,1,[],https://github.com/cleanflight/cleanflight/pull/2307,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2307#issuecomment-233277581,,"@ledvinap , you are correct - I should not have merged this without discussion. My apologies.
The reason the travis build failed was not because of build or test errors, but rather some internal problem. This seems to happen occasionally. Error message was:
The command ""eval git fetch origin +refs/pull/2307/merge:"" failed 3 times.
The command ""git fetch origin +refs/pull/2307/merge:"" failed and exited with 128 during .

I originally had the default value as zero, but changed it to match betaflight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2307,2016-07-18T06:27:21Z,2016-07-18T06:27:30Z,2016-08-29T11:18:28Z,MERGED,True,35,11,5,https://github.com/martinbudden,Added pid delta from error calculation,1,[],https://github.com/cleanflight/cleanflight/pull/2307,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2307#issuecomment-233278364,,"This Travis error is caused by missing PR branch - martinbudden:pid_delta_from_error was deleted after merging.
When build fails for same temporary reason, is is possible to restart it on Travis status page ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2307,2016-07-18T06:27:21Z,2016-07-18T06:27:30Z,2016-08-29T11:18:28Z,MERGED,True,35,11,5,https://github.com/martinbudden,Added pid delta from error calculation,1,[],https://github.com/cleanflight/cleanflight/pull/2307,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2307#issuecomment-233386139,,"There is still problem with breaking old pidProfile - deltaMethod probably ended up in place where padding was before, someone should check that.
And even then pidProfile will silently switch to  PID_DELTA_FROM_ERROR on upgrade...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2308,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-233272931,,"IMO gyro_sync and looptime belong to IMU, not gyro ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-233280651,,"The only place looptime is used is in
    gyroSetSampleRate(imuConfig()->looptime, gyroConfig()->gyro_lpf, imuConfig()->gyroSync, imuConfig()->gyroSyncDenominator);   // Set gyro sampling rate divider before initialization

in fc/boot.c
The main looptime variable is now targetLooptime which is owned by drivers/gyro_sync.c
In other words, it is all a bit of a confused mess.
My view is that gyro_sync should go - gyro sync should just be alway used, there is no advantage to not using gyro sync. looptime is superfluous and should also go.
Then we have the question of the ownership of targetLooptime.  My view is that it should be part of the gyro_t structure, but I'm willing to be conviced otherwise.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-234276676,,"gyro drivers likely shouldn't care about such things as 'loops' right?
perhaps the single responsibility principle can be used to figure it out?  i.e. one source of/reason for change.
in my mind the IMU code is what cares about loop times and we change loop time related code when we change how the IMU works.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-234277092,,"another way of thinking about it is, if you wanted to take the gyro reading code and did not use it in an IMU then would you need 'looptime'?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-234473115,,"@hydra to answer your points

gyro drivers likely shouldn't care about such things as 'loops' right?

Well, actually its the IMU that shouldn't care about things such as loops. And indeed it doesn't - looptime is not used by the IMU.
And while gyro drivers shouldn't care about loops, the gyro driver does care about how often the gyro is read, that is the gyro driver should care about gyroReadInterval - which is a property of the gyro and how it is set up (in particular what hardware filtering set).

another way of thinking about it is, if you wanted to take the gyro reading code and did not use it in an IMU then would you need 'looptime'?

No. But you would need something like gyroReadInterval.
As I said above, the whole concept of looptime is flawed and is a hangover from MultiWii/Baseflight. By moving looptime into the gyro config we localise the problem to the gyro code and the code can then rationalised entirely within the gyro code.
This change is a step towards rationalising the code, not the end point.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-247064807,,"ok, I'm convinced.  What's next in ditching the old looptime stuff then?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-247065405,,perhaps the gyroReadInterval change you mention should also be done as part of this?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/martinbudden,9,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-247071340,,I'll need to think a bit more about what the final cleanup should look like. So I think this should be merged as is.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/borisbstyle,10,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-247072841,,Why not cleaning up mw.c first?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/martinbudden,11,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-247075467,,"Yes, mw.c needs cleanup as well. But one step at a time...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/borisbstyle,12,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-247082742,,IMO thats the messiest file.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-247084468,,"No, pwm_mapping.c is the messiest file. But @blckmn is going to fix that soon.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/martinbudden,14,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-247847398,,"@hydra , note this can be merged. The only check to fail is the NAZE build and that is for space reasons, which I understand will be fixed elsewhere.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-248074932,,See #2416,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-253433897,,This PR is out of date now due to #2416.  Can you push new commits to this PR or do you want to make a new one?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/martinbudden,17,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-253452138,,Rebased.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2308,2016-07-18T06:39:58Z,2016-10-13T23:04:19Z,2016-10-13T23:04:19Z,MERGED,True,39,34,10,https://github.com/martinbudden,Moved gyro params out of imuConfig_t into gyroConfig_t,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2308,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2308#issuecomment-253663658,,@martinbudden thanks for speedy turnaround. merging.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2310,2016-07-18T16:35:35Z,2016-09-14T16:00:51Z,2016-09-14T16:00:51Z,MERGED,True,7,6,1,https://github.com/jflyper,Fix i2cErrorCount ignorance on F1 targets,3,[],https://github.com/cleanflight/cleanflight/pull/2310,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2310,"On F1 targets, i2cErrorCount is never counted up.
On F1 targets, errors are detected and handled silently by i2c_er_handler(), never by soft timeouts. Should honor the value of error variable set by i2c_er_handler() when checking for errors.","On F1 targets, i2cErrorCount is never counted up.
On F1 targets, errors are detected and handled silently by i2c_er_handler(), never by soft timeouts. Should honor the value of error variable set by i2c_er_handler() when checking for errors.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2310,2016-07-18T16:35:35Z,2016-09-14T16:00:51Z,2016-09-14T16:00:51Z,MERGED,True,7,6,1,https://github.com/jflyper,Fix i2cErrorCount ignorance on F1 targets,3,[],https://github.com/cleanflight/cleanflight/pull/2310,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2310#issuecomment-234275239,"On F1 targets, i2cErrorCount is never counted up.
On F1 targets, errors are detected and handled silently by i2c_er_handler(), never by soft timeouts. Should honor the value of error variable set by i2c_er_handler() when checking for errors.",@jflyper can you give a bit of background on what caused you to look into this?  was there a specific problem you were trying to solve?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2310,2016-07-18T16:35:35Z,2016-09-14T16:00:51Z,2016-09-14T16:00:51Z,MERGED,True,7,6,1,https://github.com/jflyper,Fix i2cErrorCount ignorance on F1 targets,3,[],https://github.com/cleanflight/cleanflight/pull/2310,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/2310#issuecomment-234283389,"On F1 targets, i2cErrorCount is never counted up.
On F1 targets, errors are detected and handled silently by i2c_er_handler(), never by soft timeouts. Should honor the value of error variable set by i2c_er_handler() when checking for errors.","I believe the PR contributes to generic I2C trouble shooting. Here's the story: Few days ago, I came to notice that one of my NAZE compatible is not lighting up the mag and baro icons on CFC anymore. I looked at the I2C error counter at the bottom and saw nice zero there. Since I don't use the mag and baro, I could leave it alone, but decided to see what's happening on the bus. Turned out as mag and baro are dead some how. They were addressed, but not responding. I turned to I2C driver and found the reason for the zero error count.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2310,2016-07-18T16:35:35Z,2016-09-14T16:00:51Z,2016-09-14T16:00:51Z,MERGED,True,7,6,1,https://github.com/jflyper,Fix i2cErrorCount ignorance on F1 targets,3,[],https://github.com/cleanflight/cleanflight/pull/2310,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2310#issuecomment-247062755,"On F1 targets, i2cErrorCount is never counted up.
On F1 targets, errors are detected and handled silently by i2c_er_handler(), never by soft timeouts. Should honor the value of error variable set by i2c_er_handler() when checking for errors.","ahh, that makes much more sense. now i have a reason to merge it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2311,2016-07-18T17:11:26Z,2016-07-19T07:17:14Z,2016-08-29T11:18:36Z,MERGED,True,5,5,3,https://github.com/martinbudden,Moved deltaMethod to end of PG. Use zero for measurement value,1,[],https://github.com/cleanflight/cleanflight/pull/2311,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2311,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2311,2016-07-18T17:11:26Z,2016-07-19T07:17:14Z,2016-08-29T11:18:36Z,MERGED,True,5,5,3,https://github.com/martinbudden,Moved deltaMethod to end of PG. Use zero for measurement value,1,[],https://github.com/cleanflight/cleanflight/pull/2311,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2311#issuecomment-233394716,,This should be safe to merge (when travis succeeds). Thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2313,2016-07-19T08:31:58Z,2016-07-21T14:37:05Z,2016-08-29T11:18:44Z,MERGED,True,47,22,1,https://github.com/martinbudden,Updated MSP protocol with betaflight and iNav commands,1,[],https://github.com/cleanflight/cleanflight/pull/2313,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2313,"This should help avoid future conflicts.
There are still outstanding conflicts to be resolved, see issue #2306","This should help avoid future conflicts.
There are still outstanding conflicts to be resolved, see issue #2306",True,{'THUMBS_UP': ['https://github.com/ledvinap']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2313,2016-07-19T08:31:58Z,2016-07-21T14:37:05Z,2016-08-29T11:18:44Z,MERGED,True,47,22,1,https://github.com/martinbudden,Updated MSP protocol with betaflight and iNav commands,1,[],https://github.com/cleanflight/cleanflight/pull/2313,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2313#issuecomment-234273634,"This should help avoid future conflicts.
There are still outstanding conflicts to be resolved, see issue #2306","I'll merge this,  I'm fine with changing any new CF id that are unused by CF configurator.  When the configurator is updated we will then be able to use the correct unique ids.  e.g.  The new voltage meter ones.
If there's any more PR's to change other ID's then please submit them.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2314,2016-07-19T15:56:01Z,2016-07-21T14:27:19Z,2016-07-21T14:27:19Z,MERGED,True,110,58,1,https://github.com/ledvinap,Update Mixed docs to match source code,4,"['Documentation', 'Idea']",https://github.com/cleanflight/cleanflight/pull/2314,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2314,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2314,2016-07-19T15:56:01Z,2016-07-21T14:27:19Z,2016-07-21T14:27:19Z,MERGED,True,110,58,1,https://github.com/ledvinap,Update Mixed docs to match source code,4,"['Documentation', 'Idea']",https://github.com/cleanflight/cleanflight/pull/2314,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2314#issuecomment-233682806,,"https://github.com/cleanflight/cleanflight/blob/master/src/main/flight/servos.c#L463-L465 is pprobably wrong, or I don't understand it ...
angleAtMin / angleAtMax is not used in code
gimbal code may be easily implemented as normal rules (with minor conditional rule extension)
servo speed granularity is probably too coarse - 1us/cycle, max slowdown is 0.5s middle->full extreme
servo reversal is a bit redundant, it may be implemented as rules (but custom config would be necessary)
There are no servos for CUSTOM mode - dual and single copter can't be customized
And code could use some face-lift ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2314,2016-07-19T15:56:01Z,2016-07-21T14:27:19Z,2016-07-21T14:27:19Z,MERGED,True,110,58,1,https://github.com/ledvinap,Update Mixed docs to match source code,4,"['Documentation', 'Idea']",https://github.com/cleanflight/cleanflight/pull/2314,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2314#issuecomment-234244684,,"Updated smix min/max ... Sorry, it took some sleep to read the code correctly ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2314,2016-07-19T15:56:01Z,2016-07-21T14:27:19Z,2016-07-21T14:27:19Z,MERGED,True,110,58,1,https://github.com/ledvinap,Update Mixed docs to match source code,4,"['Documentation', 'Idea']",https://github.com/cleanflight/cleanflight/pull/2314,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2314#issuecomment-234270059,,"with regard to angleAtMin/angleAtMax that was so that the tilt drone guys could continue their PR's for tilt support but the work has not been completed.
With regards to the cleanup of the mixer code again the tilt drone guys submitted a PR for it but it's not been worked on yet.  Quite when it'll get done I don't know.  There is just so much to do...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2314,2016-07-19T15:56:01Z,2016-07-21T14:27:19Z,2016-07-21T14:27:19Z,MERGED,True,110,58,1,https://github.com/ledvinap,Update Mixed docs to match source code,4,"['Documentation', 'Idea']",https://github.com/cleanflight/cleanflight/pull/2314,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2314#issuecomment-234270256,,"I'll merge the documentation changes now, and when we look at servo code we can refer to your notes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2317,2016-07-20T15:55:36Z,2016-07-21T14:22:44Z,2016-07-21T14:22:44Z,CLOSED,False,0,0,0,https://github.com/silkyGomboc,Merge remote-tracking branch 'cleanflight/master' into cleanflight/blheli4wayif,1,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2317,https://github.com/silkyGomboc,1,https://github.com/cleanflight/cleanflight/pull/2317,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2317,2016-07-20T15:55:36Z,2016-07-21T14:22:44Z,2016-07-21T14:22:44Z,CLOSED,False,0,0,0,https://github.com/silkyGomboc,Merge remote-tracking branch 'cleanflight/master' into cleanflight/blheli4wayif,1,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2317,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2317#issuecomment-234269024,,i think this PR is made in error. closing.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2321,2016-07-21T13:14:10Z,2016-07-21T14:21:26Z,2016-07-22T07:36:19Z,MERGED,True,1,1,1,https://github.com/jflyper,Fix for issue 2319 run TASK_GPS at 100Hz,1,[],https://github.com/cleanflight/cleanflight/pull/2321,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2321,As per #2319,As per #2319,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,1,https://github.com/cleanflight/cleanflight/pull/2323,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-234733917,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","@gaelj looking forward to the cleanups, no problem with merging once done.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,3,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-234735899,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","Sure, will be done this evening :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,4,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-234748812,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","@hydra, while rebasing this, I noticed we still have the old MSP ID's you put back, for ledstrip mode colors.
Shall I put the new ones back in this PR ? These IDs can be easily changed, the configurator never used them before the PR you merged today~~, which uses the new IDs~~...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,5,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-234749785,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","All done now, rebased, squashed and force pushed. Please bear in mind this code is untested for the moment. I don't have an RGBW ledstrip (yet).
Feedback is expected in thread #2318.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,6,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-234766153,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).",Maybe I'll put back original MSP codes into this PR....? @hydra,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-234800691,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","@gaelj , can you keep them at 127 and 221? Otherwise we have a clash with betaflight and iNav.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,8,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-234801732,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","I figured, as the configurator was reverted (in this aspect) as well, such
a change doesn't belong embedded in this current PR.
The best way is probably that you rebase your PR to reintroduce the new
IDs, and someone issues a PR on the configurator with the BF and INAV
-compatible IDs.
On Sun, Jul 24, 2016 at 10:37 PM, Martin Budden notifications@github.com
wrote:

@gaelj https://github.com/gaelj , can you keep them at 127 and 221?
Otherwise we have a clash with betaflight and iNav.
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#2323 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AIeRmHna_HP5YWe0Uv3cxG8yfmu6Hf3Gks5qY80ZgaJpZM4JST56
.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,9,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-243593797,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","@hydra @ledvinap @martinbudden a first cut is now tested on my side and ready for review, if either of you has a little time to look into this.
Initial testing on static colors went well.
Testing with 32 LEDs in static background with a blink overlay (which blinks the white LED in RGBW mode) showed what I would interpret as a frame timing / sync issue due to the extra byte to encode the W value.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,10,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-243604727,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","Well the problem's now solved, I didn't spot that the interframe delay is longer for RGBW LEDs.
It's now rock stable.
EDIT: after a few minutes, instability kicks in again.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,11,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-246211438,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).",Seems fine now with latest fixes. Configurator update is required and comming up.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-247075441,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).",probably a good idea to see https://www.google.com/patents/US8049763 and other related topics on the subject.  I specifically chose HSV for color representation instead of the legacy RGB.  adding W to HSV feels like a hack to me.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,13,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-247168188,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","Thanks for the review and comments.
I can implement the formula in the link you provide, @hydra, it seems promissing. Are we allowed to use it ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-253433130,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","@gaelj it's not a good idea to use patented methodology unless there is an agreement from the patent owners.  you would need to check with the patent holders.
when do you think you will have time to complete this PR?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,15,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-253875791,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","I'll work on it this week-end @hydra.
The patent owner is Samsung. I've no idea how to approach them on this matter... Should I try to contact them directly ?
Or, thinking about it, wouldn't the simple formula (1-S) x V work ? (considering 1-based HSV values for simplicity)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,16,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-253981598,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).",Looks like we have a candidate @hydra.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-275940945,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).",@gaelj any update on this?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2323,2016-07-21T23:23:23Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,238,82,40,https://github.com/gaelj,Support of RGBW LEDs,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2323,https://github.com/gaelj,18,https://github.com/cleanflight/cleanflight/pull/2323#issuecomment-275941907,"Addresses #2318.
Needs testing.
Adds the CLI get / set value led_type, which accepts RGB (24bits) or RGBW (32bits).","Unfortunately my paid workload hasn't diminished, quite the contrary
actually.
I will definitely come back here eventually, I just can't say when right
now.
…
On Sun, 29 Jan 2017 at 20:52, Dominic Clifton ***@***.***> wrote:
 @gaelj <https://github.com/gaelj> any update on this?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#2323 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AIeRmK4XoGSMl_ZGqdwWr6Mo1PGIuVVBks5rXO4NgaJpZM4JST56>
 .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2324,2016-07-22T06:16:33Z,2016-07-22T06:19:08Z,2016-07-22T06:19:32Z,CLOSED,False,103,36,8,https://github.com/Codeharp,Flip32optimizedio,3,[],https://github.com/cleanflight/cleanflight/pull/2324,https://github.com/Codeharp,1,https://github.com/cleanflight/cleanflight/pull/2324,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2327,2016-07-25T08:26:22Z,2016-08-04T21:35:00Z,2016-08-04T21:37:58Z,MERGED,True,15,7,1,https://github.com/martinbudden,Fixed MSP conflicts with betaflight. Requires corresponding change in configurator,1,['Critical'],https://github.com/cleanflight/cleanflight/pull/2327,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2327,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2327,2016-07-25T08:26:22Z,2016-08-04T21:35:00Z,2016-08-04T21:37:58Z,MERGED,True,15,7,1,https://github.com/martinbudden,Fixed MSP conflicts with betaflight. Requires corresponding change in configurator,1,['Critical'],https://github.com/cleanflight/cleanflight/pull/2327,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2327#issuecomment-237690839,,cleanflight/cleanflight-configurator#412 also merged,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2328,2016-07-25T11:58:49Z,2016-09-14T16:02:02Z,2016-09-14T16:02:11Z,CLOSED,False,0,0,0,https://github.com/silkyGomboc,Merge remote-tracking branch 'cleanflight/master' into cleanflight/blheli4wayif,2,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2328,https://github.com/silkyGomboc,1,https://github.com/cleanflight/cleanflight/pull/2328,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2328,2016-07-25T11:58:49Z,2016-09-14T16:02:02Z,2016-09-14T16:02:11Z,CLOSED,False,0,0,0,https://github.com/silkyGomboc,Merge remote-tracking branch 'cleanflight/master' into cleanflight/blheli4wayif,2,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2328,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2328#issuecomment-247063266,,"@silkyGomboc this is another invalid PR, please make sure you create your PR's correctly and in the right projects.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2329,2016-07-26T05:12:53Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,38,34,3,https://github.com/jflyper,I2C: Allow 0xFF as sub-address,2,"['Cleanup', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2329,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2329,"i2cRead(), i2cWrite() and i2cWriteBuffer()(F1 only) uses 0xFF in reg to signal the non-subaddressed access. It doesn’t work for the case in which we have actually have to access a register at 0xFF. u-blox DDC (I2C) is an example of the device with register at 0xFF.
Fix this by reg argument to i2cRead(), i2cWrite() and i2cWriteBuffer() be an int, and use -1 rather than 0xFF to signal the non-subaddressed access.
This is another isolated PR on I2C code. As I understand this repo prefers this kind of fix as a part of a feature PR, my intention is to share my findings with other developers to avoid potential, unnecessary debug efforts.","i2cRead(), i2cWrite() and i2cWriteBuffer()(F1 only) uses 0xFF in reg to signal the non-subaddressed access. It doesn’t work for the case in which we have actually have to access a register at 0xFF. u-blox DDC (I2C) is an example of the device with register at 0xFF.
Fix this by reg argument to i2cRead(), i2cWrite() and i2cWriteBuffer() be an int, and use -1 rather than 0xFF to signal the non-subaddressed access.
This is another isolated PR on I2C code. As I understand this repo prefers this kind of fix as a part of a feature PR, my intention is to share my findings with other developers to avoid potential, unnecessary debug efforts.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2329,2016-07-26T05:12:53Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,38,34,3,https://github.com/jflyper,I2C: Allow 0xFF as sub-address,2,"['Cleanup', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2329,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2329#issuecomment-237690378,"i2cRead(), i2cWrite() and i2cWriteBuffer()(F1 only) uses 0xFF in reg to signal the non-subaddressed access. It doesn’t work for the case in which we have actually have to access a register at 0xFF. u-blox DDC (I2C) is an example of the device with register at 0xFF.
Fix this by reg argument to i2cRead(), i2cWrite() and i2cWriteBuffer() be an int, and use -1 rather than 0xFF to signal the non-subaddressed access.
This is another isolated PR on I2C code. As I understand this repo prefers this kind of fix as a part of a feature PR, my intention is to share my findings with other developers to avoid potential, unnecessary debug efforts.",this kind of code change would really benefit from some form of automated testing.  i.e. there should be a test case written to test that the full range of sub addresses work.  suggestions welcome.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2329,2016-07-26T05:12:53Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,38,34,3,https://github.com/jflyper,I2C: Allow 0xFF as sub-address,2,"['Cleanup', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2329,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/2329#issuecomment-237737810,"i2cRead(), i2cWrite() and i2cWriteBuffer()(F1 only) uses 0xFF in reg to signal the non-subaddressed access. It doesn’t work for the case in which we have actually have to access a register at 0xFF. u-blox DDC (I2C) is an example of the device with register at 0xFF.
Fix this by reg argument to i2cRead(), i2cWrite() and i2cWriteBuffer() be an int, and use -1 rather than 0xFF to signal the non-subaddressed access.
This is another isolated PR on I2C code. As I understand this repo prefers this kind of fix as a part of a feature PR, my intention is to share my findings with other developers to avoid potential, unnecessary debug efforts.","You mean a test case that involves actual bus transaction? I can come up with external slave device that responds to entire address/subaddress range, and a test procedure that may be called at the end of the i2c initialization, but I don't think this is not what you have in mind.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2329,2016-07-26T05:12:53Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,38,34,3,https://github.com/jflyper,I2C: Allow 0xFF as sub-address,2,"['Cleanup', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2329,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2329#issuecomment-247067004,"i2cRead(), i2cWrite() and i2cWriteBuffer()(F1 only) uses 0xFF in reg to signal the non-subaddressed access. It doesn’t work for the case in which we have actually have to access a register at 0xFF. u-blox DDC (I2C) is an example of the device with register at 0xFF.
Fix this by reg argument to i2cRead(), i2cWrite() and i2cWriteBuffer() be an int, and use -1 rather than 0xFF to signal the non-subaddressed access.
This is another isolated PR on I2C code. As I understand this repo prefers this kind of fix as a part of a feature PR, my intention is to share my findings with other developers to avoid potential, unnecessary debug efforts.","@jflyper no.  You just need a test that creates an i2c read/writes and mocks out the i2c register reads/writes with test code than can record the values so that you can then assert the correct values were given to the hardware.
likely you will need a macro that is used when UNIT_TEST is defined.  This macro should call a test method to record the register read/write methods and just directly access the registers when UNIT_TEST is not defined.
You'd also of course need to mock out I2C_GetFlagStatus() and similar methods to return the values needed by your test.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2329,2016-07-26T05:12:53Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,38,34,3,https://github.com/jflyper,I2C: Allow 0xFF as sub-address,2,"['Cleanup', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2329,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2329#issuecomment-247067742,"i2cRead(), i2cWrite() and i2cWriteBuffer()(F1 only) uses 0xFF in reg to signal the non-subaddressed access. It doesn’t work for the case in which we have actually have to access a register at 0xFF. u-blox DDC (I2C) is an example of the device with register at 0xFF.
Fix this by reg argument to i2cRead(), i2cWrite() and i2cWriteBuffer() be an int, and use -1 rather than 0xFF to signal the non-subaddressed access.
This is another isolated PR on I2C code. As I understand this repo prefers this kind of fix as a part of a feature PR, my intention is to share my findings with other developers to avoid potential, unnecessary debug efforts.","Further to this, I feel that such an i2c transaction test would be very beneficial for those working on any i2c drivers and we could then take a similar approach when writing tests for the acc/mag/baro drivers to assert we send the hardware the correct payloads.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2332,2016-07-27T15:35:01Z,2016-07-27T15:35:30Z,2016-07-27T15:35:30Z,CLOSED,False,189037,14354,611,https://github.com/digitalentity,Unsynched motor update,586,[],https://github.com/cleanflight/cleanflight/pull/2332,https://github.com/digitalentity,1,https://github.com/cleanflight/cleanflight/pull/2332,"Deprate FEATURE_ONESHOT125
Introduce new parameter motor_pwm_protocol (like in Betaflight)
Always update motors asynchnonously from PID loop at motor_pwm_rate","Deprate FEATURE_ONESHOT125
Introduce new parameter motor_pwm_protocol (like in Betaflight)
Always update motors asynchnonously from PID loop at motor_pwm_rate",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2332,2016-07-27T15:35:01Z,2016-07-27T15:35:30Z,2016-07-27T15:35:30Z,CLOSED,False,189037,14354,611,https://github.com/digitalentity,Unsynched motor update,586,[],https://github.com/cleanflight/cleanflight/pull/2332,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/2332#issuecomment-235624839,"Deprate FEATURE_ONESHOT125
Introduce new parameter motor_pwm_protocol (like in Betaflight)
Always update motors asynchnonously from PID loop at motor_pwm_rate","Wrong repo, sorry.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2334,2016-07-28T13:32:30Z,2016-07-28T16:07:27Z,2016-07-28T16:07:27Z,MERGED,True,1,1,1,https://github.com/richard-scott,Update Rx.md,1,[],https://github.com/cleanflight/cleanflight/pull/2334,https://github.com/richard-scott,1,https://github.com/cleanflight/cleanflight/pull/2334,"I've updated the URL for ""Lemon Rx DSMX Compatible PPM 8-Channel Receiver + Lemon DSMX Compatible Satellite with Failsafe""","I've updated the URL for ""Lemon Rx DSMX Compatible PPM 8-Channel Receiver + Lemon DSMX Compatible Satellite with Failsafe""",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/qwedsazxc78,1,https://github.com/cleanflight/cleanflight/pull/2340,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/Linjieqiang,2,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237429414,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","But I can't find it in China Market,such as Taobao.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/qwedsazxc78,3,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237433441,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","Yes, we are Taiwan company and focus on B2B business.
Now, we are trying to go on consumer drone market, so that's why you don't see any developing board in Taobao or ruten. That's our next step. if you need, we can delivery the sample to your workstation or office.
We'd like to provide the more better compass than HMC. For example

Resolution 3mG/LSG than HMC
ODR support up to 200Hz
lower noise",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/qwedsazxc78,4,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237434936,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","By the way, you can refer the noise analysis in my quardcopter

platform : QAV250 + APM2.72
compass : HMC5883 and IST8310

https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/digitalentity,5,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237442414,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@qwedsazxc78 Hi Alex, as INAV firmware maintainer I'm very interested in seeing actual hardware (GPS/Compass modules) with this compass chip. Without actual hardware available to end user it's pointless to create support for this chip.
Can you kindly answer a few more questions:

Does anybody manufacture and sell GPS/Compass or only Compass modules/breakout boards with your chip?
Do you also manufacture accelerometer/gyroscope chips to use in flight control hardware?

I'm asking because I'm working on a new navigation capable flight controller (iNavFlight/inav#287).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/qwedsazxc78,6,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237446949,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@digitalentity
Hi Konstantin,
Seeing Russian is happy for me, because I supported Russia region in my previous company before. In winter, the -20 degree temp in Moscow really craze me.
about your question:


Does anybody manufacture and sell GPS/Compass or only Compass modules/breakout boards with your chip?
yes, we co-work with a taiwan manufacture that design GPS+compass, but it don't release in this stage, I will check with this company if they can provide the engineer samples.


Do you also manufacture accelerometer/gyroscope chips to use in flight control hardware?
No, we focus on compass.



As I know, the most people use MPU-6050+ HMC5883, MPU9250 =MPU-6050 + AKM8963.
But when the MPU-6050 + AKM8963 in a integrated circuit meet the micro-level magnetic interference in MEMS, and AKM sensor principle is hall sensor, the hysteresis could affect the performance. As you know, the NOISE.
anyway,I think this dependent on user's application. iphone use AKM.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/digitalentity,7,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237447747,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@qwedsazxc78
I'm actually in an Eastern region of Russia (https://goo.gl/kezgEy), -40 in winter 😆
Cool! Then we will start supporting those GPS/Compass modules in INAV!
It would be great if you can send me an Eagle component library of the IST8310 compass and a few enginnering samples. I might be able to put this compass on the new FC if there is some free space on the board.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/Linjieqiang,8,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237447976,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing",@digitalentity Sounds great!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237497291,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@qwedsazxc78 : Actual compass driver got removed in second commit ...
Also can you pleas fix the PR to contain only changes related to driver?
Some files got moved and you are trying to add them again.
You also changed formatting of unrelated code (to different coding style)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/qwedsazxc78,10,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237499142,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@ledvinap yes, I am trying to fix it now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/digitalentity,11,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237499449,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@qwedsazxc78 maybe it'll be easier to take latest master and start from scratch? The actual driver code is small, you'll just have to add some companion code to compass.h, makefile and initialisation.c",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237500806,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@qwedsazxc78 : BTW: in Noise Analysis on HMC5883 and IST8310,
'Average : 16 time' is mentioned. Does it mean that actual output rate is 6.25Hz ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/qwedsazxc78,13,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237512791,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@ledvinap My description confuses people, I am going to modify it.
This Average mean internal avg_register is 16 time, it mean our ADC of compass will get the 16 time data and give you a average value. ADC get one value is about 160us, so 3 axis and average 16 time totally cost about 6ms, so it meet the spec of the ODR (out put data rate) 100Hz / 10ms.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237806314,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@qwedsazxc78 : It seems that github/git is still confused about point where your branch diverged and some changes already in master are applied again.
Rebasing against master may help to fix this ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/qwedsazxc78,15,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237807516,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing",@ledvinap I should modify upper parts and pull request again?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/ledvinap,16,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237832856,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","@qwedsazxc78 : It depends how much GIT do you want to learn. Rebasing will keep conversation in one place, but creating new PR is easier ...
You may save backup copy of your wortktree and try rebasing + force pushing. If something gets too wrong, you can reset to master (or fresh checkout) and apply your changes (ideally using some compare/merge tool, but copying files over will do the job too)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-237934996,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","thanks everyone for your work, it's great to see some new compass hardware.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-247158242,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","I'm marking this as low-priority for now, once production hardware is available users to purchase or when an FC integrates the sensor we can merge.  It would also help if you send evaluation/breakout boards to @digitalentity and me.  Please email me for my address.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/qwedsazxc78,19,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-248348636,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","hi @hydra  and @digitalentity ,
sorry for reply, I was in military for 7D training, so I can't access my computer.
we can delivery the demo board to you, and we have developed a FC board - FishDrone with our partner. However, it support the betaflight 3.0.0 only now,but it doesn't finish the pull request check and official release. Therefore, We are going to speed up this developing stage in CF.
Thus, could you please provide the address, and I negotiate with our company to check if we can delivery ic, demo board, and GPS with compass module to your office that is possible to be blocked in costoms, becasue they are electric compoment.
please mail the address to me to below mail. thx!
qwedsazxc78@gmail.com or alexhsieh@isentek.com",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-277517417,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","demo board requested.
@qwedsazxc78 please can you update and complete this PR so we can get the support merged in?
Also, please create another PR to support the FishDrone FC.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2340,2016-08-03T04:57:29Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,631,286,12,https://github.com/qwedsazxc78,Ist8310 compass,8,"['Enhancement', 'Low priority']",https://github.com/cleanflight/cleanflight/pull/2340,https://github.com/isentek-MH,21,https://github.com/cleanflight/cleanflight/pull/2340#issuecomment-277517731,"Hey team,
I port diver and test our compass IST8310 in SPRacingF3, all code are confirm to work fine.
Benefit

Clearflight can support IST8310 compass, and the user can have more selection.
HMC5883 had phase out and stopped to shipment. All ic now are in stock.
We can provide technical support ASAP, and provide better compass solution in your developing platform.
We have provided compass solution to DJI, mi, zeroteh .. etc , commercial drone company in China. Our IC is able to compete with any compass venders in this world.

introduce
I am Alex and work in a compass ic design company in Taiwan, and our company hope we could have the change to be business partner on Drone application. In recent year,  Now, We have already added our ist8310 compass sensor in spracingF3 flight board, this sensor has the high resolution, low noise, and nice performance. Moreover, we'd like to provide compass solution for your next generation product.
If you have any question or sample inquery, please kindly let us know.
1. iSenteck introduction
http://www.isentek.com/en/
2. ist8310 chip - datasheet : http://www.isentek.com/en/thgle_product.php?pid=4
IST8310 is a s three-axis magnetometer featuring 16-pin LGA package, dimensions are length x width x height, 3.0 x 3.0 x 1.0 mm3, respectively. It supports I2C slave interface, fast mode up to 400kHz. Maximum Output Data Rate is 200Hz and low hysteresis is <0.05%FS.
3. Src code with ist8310 driver:
https://github.com/qwedsazxc78/cleanflight/tree/ist8310_compass
4. porting compass test:
https://drive.google.com/folderview?id=0BzNzLVK6-Zk2QnJfZ2NQb1YtNUE&usp=sharing","Sure, I will complete it recently.
I get the address in email, sorry for my ignore.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/andrew-milovidov,1,https://github.com/cleanflight/cleanflight/pull/2341,ibusFramePosition was not set to zero after finishing frame,ibusFramePosition was not set to zero after finishing frame,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2341#issuecomment-237488864,ibusFramePosition was not set to zero after finishing frame,"What's wrong with current version?
It waits for interframe pause to sync to next frame.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/andrew-milovidov,3,https://github.com/cleanflight/cleanflight/pull/2341#issuecomment-237490475,ibusFramePosition was not set to zero after finishing frame,"I found that in some reasons frames could be lost. Besides it, it's more safe.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2341#issuecomment-237495049,ibusFramePosition was not set to zero after finishing frame,"As for safety - the problem with current code is that byte received after frame without enough delay will set ibusFrameDone flag again, processing the frame multiple times.
You fix may increase potential for race conditions (there is delay between clearing done and resetting position). Also more state than necessary is shared.
Waiting for delay+sync char as frame sync is probably good idea, but it should be implemented correctly.
Setting ibusFramePosition to 'wait-for-sync' value when packet is received and ignoring all chars till interframe gap may handle most cases.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/andrew-milovidov,5,https://github.com/cleanflight/cleanflight/pull/2341#issuecomment-237502585,ibusFramePosition was not set to zero after finishing frame,"There is no race condition. Technically ibusFramePosition was also static variable. You must clear the array index var after the job is done. If flysky will decrease sync pause (they can and we will know it a post factum), this index var will be out of range. In case of setting zero to ibusFramePosition  ibusFrameDone will not be setting many times during sync pause.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2341#issuecomment-247047262,ibusFramePosition was not set to zero after finishing frame,"@ledvinap @andrew-milovidov can we come to some agreement here please so we can get this completed.  Since I don't have test equipment here I can't verify the fix.
Perhaps write a unit test that simulates the conditions you are experiencing and what the expected behavior should be when it occurs?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/andrew-milovidov,7,https://github.com/cleanflight/cleanflight/pull/2341#issuecomment-247298366,ibusFramePosition was not set to zero after finishing frame,"I found this potential trouble while making ibus-to-pwm converter based on this code. And I found hard faults because of out of range pointer.
I can test these changes on sp f3 and fs-ia6b/ia10.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2341#issuecomment-253432190,ibusFramePosition was not set to zero after finishing frame,@andrew-milovidov please can you test this on your equipment and report back?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2341,2016-08-04T07:49:56Z,2016-10-20T15:40:45Z,2016-10-20T15:40:45Z,MERGED,True,3,2,1,https://github.com/andrew-milovidov,ibusFramePosition update,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2341,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2341#issuecomment-255143555,ibusFramePosition was not set to zero after finishing frame,I'm going to merge this. I don't like this situation but some other guys have also added iBus telemetry so between this PR and the iBus telemetry we should get some good reports as to whether it works OK or not.  If there's issues they can be raised as new bugs.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2342,2016-08-05T02:55:52Z,2016-08-05T12:01:34Z,2016-08-05T12:01:34Z,CLOSED,False,160314,20276,694,https://github.com/s700ky,New Target,1787,[],https://github.com/cleanflight/cleanflight/pull/2342,https://github.com/s700ky,1,https://github.com/cleanflight/cleanflight/pull/2342,For Kombini F3 FC from Furious FPV,For Kombini F3 FC from Furious FPV,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2342,2016-08-05T02:55:52Z,2016-08-05T12:01:34Z,2016-08-05T12:01:34Z,CLOSED,False,160314,20276,694,https://github.com/s700ky,New Target,1787,[],https://github.com/cleanflight/cleanflight/pull/2342,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2342#issuecomment-237833133,For Kombini F3 FC from Furious FPV,"This PR is obviously targeting wrong repo, closing",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/mikeller,1,https://github.com/cleanflight/cleanflight/pull/2345,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-238636428,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","Interesting.  It's a shame no other receivers will work at the same baud rates for serial rx and telemetry.  I wish the manufacturers would use standard baud rates with no inversion for serialrx and telemetry.  It would make things much easier for everyone.
Please can you fix the unit tests and the CC3D build?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-238662206,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","Yes. Ideally the protocol for serial RX and telemetry should be rolled into one anyway, like Jeti EX bus does.
With openLRS hardware, the situation is even such that only one serial port is available and supported by the firmware, so running both things over a single serial port on the flight controller side is probably the only way to get them working reliably.
Sorry for breaking thing, I wasn't aware that they were. I ran fake_travis_build.sh before pushing, and that one seemed to go through all fine. Will fix.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-238663803,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","@hydra: I just saw that CC3D is broken due to image size. Any preference on what to cull from it, or what do you propose we do?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/maxsymba,5,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-238724096,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","Can I use both SBUS and S.Port from X4RSB on same UART (SPRacing, UART3)?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/mikeller,6,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-238738875,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","@maxsymba: No. S.Port uses bidirectional communication for telemetry, so it's not possible to combine it with serial RX on the same port, as serial RX and the TX -> RX part of S.Port would interfere.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/mikeller,7,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-239611863,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.",This should be good to go now I think.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-247050738,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.",unrelated support comments deleted.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-247052786,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","seems OK, initially I was confused but then I found the defintion for TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK and then I was happy. 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-247053011,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","User documentation is missing for this, please can you create a new PR that adds it?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-247054841,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","This needs rebasing against master.
Also I think telemetryIsPortSharedWithRx is better name for 'telemetryCheckRxPortShared'.  Can you also fix that?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/mikeller,12,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-247328788,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.",":-(
Now I get regionFLASH' overflowed by 466 bytes` for NAZE. Do you want to postpone this, or is there another feature that can be culled?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-247370873,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","That's strange .. this does not look like 450 bytes of code ...
Maybe comparing .map files will reveal other problem",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/mikeller,14,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-247482497,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","@ledvinap I couldn't spot anything untowards, and looking at the changes it might be 450 bytes worth of.
For now I have disabled SONAR on NAZE to make it build (we already had to do this for CC3D_OPBL).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/martinbudden,15,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-249160390,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","@hydra , can we merge this? As well as being useful in itself, it is also helps convergence with betaflight: the rx and telemetry directories are certainly areas where the code should be common.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/unitware,16,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-250097342,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","Yeah, it was just a comment, and an opportunity to improve the docs if you are inclined to do so. I did some measurements last night to find out if this was the case.
Of course if the PR is merged before the IBus one - then I can add that myself in the docs.
//M

28 sep. 2016 kl. 09:51 skrev Michael Keller notifications@github.com:
@mikeller commented on this pull request.
In docs/Serial.md #2345:


Smartport telemetry cannot be shared with MSP.
+* FrSky and LTM telemetry can be shared with serial RX. In this case, the serial port's RX pin on the flight controller will be used for serial RX, the TX pin for telemetry output. When used this way, the baudrate used for telemetry will be set to the baudrate that is used by serial RX, make sure to check your RX supports this (currently only confirmed working with openLRSng modules).
That's why only FrSky and LTM are supported...


—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub #2345, or mute the thread https://github.com/notifications/unsubscribe-auth/AFyM4sptLVGFH4HD0MRn0iA-HeV2FETkks5quhyMgaJpZM4Jef5G.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/mikeller,17,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-250101648,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","I'm not sure if the docs need updating. I decided to list the supported protocols (as opposed to the ones not supported) for port sharing. This way, without any protocol being added that explicitly implements sharing, the docs should not need updating.
My hope is that this should be clear enough. If too many user questions arise, I might have to revert to listing both supported and non-supported protocols explicitly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/unitware,18,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-250101885,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","Im fine with that
//M

28 sep. 2016 kl. 10:16 skrev Michael Keller notifications@github.com:
I'm not sure if the docs need updating. I decided to list the supported protocols (as opposed to the ones not supported) for port sharing. This way, without any protocol being added that explicitly implements sharing, the docs should not need updating.
My hope is that this should be clear enough. If too many user questions arise, I might have to revert to listing both supported and non-supported protocols explicitly.
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub #2345 (comment), or mute the thread https://github.com/notifications/unsubscribe-auth/AFyM4hZRVy0gZaAL0OVG92oQt-NtXsUeks5quiJOgaJpZM4Jef5G.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/fishpepper,19,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-267155799,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","Interesting. It's a shame no other receivers will work at the same baud rates for serial rx and telemetry. I wish the manufacturers would use standard baud rates with no inversion for serialrx and telemetry. It would make things much easier for everyone.

When you flash the frsky receivers with my opensource code (OpenSky) you can use the same port for telemetry as you do for sbus at 100000baud ;)
This is a really nice feature, it also allows rx firmware upgrades by using the serial passthrough mode.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2345,2016-08-07T13:25:32Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,178,34,17,https://github.com/mikeller,Graft of 'serial RX and telemetry on same port' feature from Betaflight.,3,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2345,https://github.com/unitware,20,https://github.com/cleanflight/cleanflight/pull/2345#issuecomment-268370310,"This PR enables sharing of one serial port between serial RX and telemetry. If a port is shared, the speed and inversion settings of the port are dictated by the serial RX protocol used, and any settings for the telemetry protocol are ignored. As a consequence, this will only work if the RX can receive telemetry data at the same speed as the serial RX data it is set to output.
This has only been tested (and found to work fine) with a Naze32 rev 6 as the FC, and an OrangeRx openLRS RX. The combination of SUMD RX and FrSky telemetry over the same serial port works fine with this hardware.
Any feedback on other combinations working / not working is appreciated, and will be integrated.","I'm testing to combine flysky ibus telemetry and serial rx here, borrowed some snippets in the isSerialConfigurationValid from here.
#2545",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2346,2016-08-07T16:15:10Z,2016-09-07T18:49:13Z,2017-01-04T11:10:12Z,CLOSED,False,4,4,1,https://github.com/jflyper,SPRACINGF3: Fix typos in comments for soft serial timer allocation,1,[],https://github.com/cleanflight/cleanflight/pull/2346,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/2346,"In target/SPRACINGF3/target.h, timer hardware for soft serials are incorrectly commented as PWM5,6,7,8 instead of RC 5,6,7,8. Minor, but a source of confusion for people doing trouble shooting.","In target/SPRACINGF3/target.h, timer hardware for soft serials are incorrectly commented as PWM5,6,7,8 instead of RC 5,6,7,8. Minor, but a source of confusion for people doing trouble shooting.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2346,2016-08-07T16:15:10Z,2016-09-07T18:49:13Z,2017-01-04T11:10:12Z,CLOSED,False,4,4,1,https://github.com/jflyper,SPRACINGF3: Fix typos in comments for soft serial timer allocation,1,[],https://github.com/cleanflight/cleanflight/pull/2346,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2346#issuecomment-238630423,"In target/SPRACINGF3/target.h, timer hardware for soft serials are incorrectly commented as PWM5,6,7,8 instead of RC 5,6,7,8. Minor, but a source of confusion for people doing trouble shooting.","technically the comments are correct.  They relate to indexes into the timerHardware table and are not directly related to RC channels.  Perhaps it's just best to remove the comments entirely.  I don't like either versions as they are, as you say, a source of confusion.  there are many other instances of this in the codebase due to the pwm_mapping.c.  I'd rather spend time reviewing work on #884 than this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2346,2016-08-07T16:15:10Z,2016-09-07T18:49:13Z,2017-01-04T11:10:12Z,CLOSED,False,4,4,1,https://github.com/jflyper,SPRACINGF3: Fix typos in comments for soft serial timer allocation,1,[],https://github.com/cleanflight/cleanflight/pull/2346,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/2346#issuecomment-238634838,"In target/SPRACINGF3/target.h, timer hardware for soft serials are incorrectly commented as PWM5,6,7,8 instead of RC 5,6,7,8. Minor, but a source of confusion for people doing trouble shooting.","They relate to indexes into the timerHardware table
and are not directly related to RC channels.

Yes. I understand that. They indirectly refer to the RC channels.

Perhaps it's just best to remove the comments entirely

Well, they are still commented as RC channels in timer.c. I understand that RC channels are aliases for these pins,  Change them to IO_1[5,6] and IO_2[7,8] perhaps? There should be something that can relate logical pins to physical pins without looking up timer-pin table.

I'd rather spend time reviewing work on #884 than this.

+1
Also +1 for EXTI 2.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2346,2016-08-07T16:15:10Z,2016-09-07T18:49:13Z,2017-01-04T11:10:12Z,CLOSED,False,4,4,1,https://github.com/jflyper,SPRACINGF3: Fix typos in comments for soft serial timer allocation,1,[],https://github.com/cleanflight/cleanflight/pull/2346,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2346#issuecomment-245379236,"In target/SPRACINGF3/target.h, timer hardware for soft serials are incorrectly commented as PWM5,6,7,8 instead of RC 5,6,7,8. Minor, but a source of confusion for people doing trouble shooting.","if you can submit a PR to REMOVE any confusing comments, great - then the developer won't be confused but will have to look how they are used.  not an ideal situation but would probably lead to code that works first time and less debugging.  I'll close this issue now and wait for a PR if you have time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2352,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)","however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2352#issuecomment-240431316,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)","Can you check if there is any benefit to ccache?
On my linux box:
with ccache enabled:
make all_targets clean
time make all_targets
real    13m18.738s
user    10m52.612s
sys     0m42.772s

make all_targets clean
time make all_targets
real    13m6.715s
user    10m51.476s
sys     0m42.612s

with ccache disabled:
make all_targets clean
time make all_targets
real    12m48.151s
user    10m50.548s
sys     0m44.192s

Maybe ccache is configured incorrectly (just did apt-get install ccache), but IMO main problem is that ccache wont help with LTO compilation. At least it does not make things worse ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2352#issuecomment-240435817,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)","OK, it does help for single project, but ccache cache size must be properly sized to hold all_targets
make clean
time make
real    0m37.295s
user    0m30.688s
sys     0m2.148s

make clean
time make
real    0m9.700s
user    0m7.396s
sys     0m0.440s",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2352#issuecomment-240739226,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)","After some testing:
~ 1.5G cache is required on debian to build all targets.
~ 0.5G cache is required when compression is enabled. This may increase build time a bit, but nothing dramatic (build times differ even with same options, I am too lazy to get enough data)
compression disabled:
real    13m41.311s
user    11m9.464s
sys     0m50.864s

real    4m21.027s
user    2m25.688s
sys     0m11.964s

with compression enabled:
real    14m58.598s
user    12m43.048s
sys     0m49.344s

real    3m42.460s
user    2m32.300s
sys     0m10.816s


This should be at least documented. Or better, makefile should be modified to set options accordingly (probably using local configuration and cache)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2352#issuecomment-240811112,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)","@ledvinap thanks for that info. much appreciated.
I hadn't actually tried it, i just pulled the commits from betaflight.  I'm not sure if this will be useful to speed up the travis builds because the cache is obviously not shared.  still locally it is useful when properly configured.
Do you have any details of what changes you made to the ccache settings and/or how to do it?  I've not looked into that.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2352#issuecomment-240966578,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)","CCACHE_COMPRESS=true
export CCACHE_COMPRESS

and possibly set CCACHE_DIR to directory in cleanflight and store config there.
CCache parameters did change lately (my Debian version is quite different to newest), so take care
Also ccache is supported by Travis (but $HOME/.ccache must be used):
https://docs.travis-ci.com/user/caching/#ccache-cache
With ccache care should be taken not to include PR/git commit dependent data into most files ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2352#issuecomment-240967060,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)",BTW: No cached files are reused between different targets,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2352#issuecomment-242139192,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)","ok, added the travis config, let's see what happens 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2352,2016-08-15T01:06:29Z,2016-08-26T01:10:37Z,2016-10-12T20:22:34Z,MERGED,True,14,4,2,https://github.com/hydra,Enable ccache,4,[],https://github.com/cleanflight/cleanflight/pull/2352,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2352#issuecomment-242592710,"however, see this if you use cygwin
betaflight/betaflight#774
(basically, cygwin + ccache = fail)","merged this now, if there's any issues other than the one linked we can revert.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2355,2016-08-18T18:31:10Z,2016-08-19T00:40:53Z,2016-10-12T20:22:25Z,MERGED,True,2,2,1,https://github.com/hydra,Try GCC 5.4 on travis.,1,[],https://github.com/cleanflight/cleanflight/pull/2355,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2355,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2357,2016-08-18T21:52:10Z,2016-08-19T18:34:55Z,2016-08-19T19:55:09Z,MERGED,True,1,1,1,https://github.com/QuinnDamerell,Docs: Ubuntu - Updating the Repo Url Because the old Url is dead.,1,[],https://github.com/cleanflight/cleanflight/pull/2357,https://github.com/QuinnDamerell,1,https://github.com/cleanflight/cleanflight/pull/2357,"There are a few other pull requests out to fix the version numbers of the packages, but none addressed the issue that the repository url listed in the docs is now redacted.","There are a few other pull requests out to fix the version numbers of the packages, but none addressed the issue that the repository url listed in the docs is now redacted.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2358,2016-08-18T22:16:01Z,2016-09-14T15:17:46Z,2016-09-14T15:17:46Z,MERGED,True,10,0,1,https://github.com/QuinnDamerell,Docs: Adding Information About Building on Bash for Windows 10,2,[],https://github.com/cleanflight/cleanflight/pull/2358,https://github.com/QuinnDamerell,1,https://github.com/cleanflight/cleanflight/pull/2358,"I added information about Bash on Windows 10, a new feature in Windows 10 that I found to be super helpful whenever working with based Linux. Bash for Windows 10 runs a copy of Ubuntu alongside your Windows OS and has great synergy between the two OSs. You can use just about any command line tool from the bash terminal, which makes building and debugging great just as it is on Ubuntu.
It is much cleaner and easier to use than cygwin, I would recommend it to anyone running Windows 10.","I added information about Bash on Windows 10, a new feature in Windows 10 that I found to be super helpful whenever working with based Linux. Bash for Windows 10 runs a copy of Ubuntu alongside your Windows OS and has great synergy between the two OSs. You can use just about any command line tool from the bash terminal, which makes building and debugging great just as it is on Ubuntu.
It is much cleaner and easier to use than cygwin, I would recommend it to anyone running Windows 10.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2362,2016-08-21T00:09:10Z,2016-08-24T16:58:22Z,2016-10-16T21:17:19Z,MERGED,True,11,1,2,https://github.com/hydra,Add softserial to SP Racing F3 EVO (via ESC outputs 5-8),1,"['Enhancement', 'Experimental']",https://github.com/cleanflight/cleanflight/pull/2362,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2362,"Provided as-is for those that want to test.
TODO

 Documentation
 Testing","Provided as-is for those that want to test.
TODO

 Documentation
 Testing",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2362,2016-08-21T00:09:10Z,2016-08-24T16:58:22Z,2016-10-16T21:17:19Z,MERGED,True,11,1,2,https://github.com/hydra,Add softserial to SP Racing F3 EVO (via ESC outputs 5-8),1,"['Enhancement', 'Experimental']",https://github.com/cleanflight/cleanflight/pull/2362,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2362#issuecomment-241812043,"Provided as-is for those that want to test.
TODO

 Documentation
 Testing",rebased,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2362,2016-08-21T00:09:10Z,2016-08-24T16:58:22Z,2016-10-16T21:17:19Z,MERGED,True,11,1,2,https://github.com/hydra,Add softserial to SP Racing F3 EVO (via ESC outputs 5-8),1,"['Enhancement', 'Experimental']",https://github.com/cleanflight/cleanflight/pull/2362,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2362#issuecomment-242136226,"Provided as-is for those that want to test.
TODO

 Documentation
 Testing","I'm going to merge this now, people can test as part of release candidate phase.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2362,2016-08-21T00:09:10Z,2016-08-24T16:58:22Z,2016-10-16T21:17:19Z,MERGED,True,11,1,2,https://github.com/hydra,Add softserial to SP Racing F3 EVO (via ESC outputs 5-8),1,"['Enhancement', 'Experimental']",https://github.com/cleanflight/cleanflight/pull/2362,https://github.com/urlu75,4,https://github.com/cleanflight/cleanflight/pull/2362#issuecomment-244551181,"Provided as-is for those that want to test.
TODO

 Documentation
 Testing","Tried SoftSerial 1 and 2 for SmartPort telemetry with no success (9600 & 19200).
Also give a try with SerialRX, it fails.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2362,2016-08-21T00:09:10Z,2016-08-24T16:58:22Z,2016-10-16T21:17:19Z,MERGED,True,11,1,2,https://github.com/hydra,Add softserial to SP Racing F3 EVO (via ESC outputs 5-8),1,"['Enhancement', 'Experimental']",https://github.com/cleanflight/cleanflight/pull/2362,https://github.com/monelli,5,https://github.com/cleanflight/cleanflight/pull/2362#issuecomment-253487073,"Provided as-is for those that want to test.
TODO

 Documentation
 Testing","Build from master branch, using SP Racing F3 Evo.
Smartport on softserial does not work.
For softserial1 I connect ""motor output"" 5 and 6 to smart port
From cleanflight documentation:
You have to bridge TX and RX lines of SoftSerial and connect them together to S.Port signal line in receiver.
Edit
Softserial work fine for UBLOX GPS, I try baud rate 9600, 19200, 38400, 57600 and work.
Update
I connect RX to S.port, TX to diode (1N4148) to S.port, now work on softserial!
RX----------------------   S.Port
TX---(a) Diode (k)------   S.Port
Tested with frsky x8r.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2363,2016-08-21T20:24:25Z,2016-08-24T17:03:08Z,2016-09-07T17:34:09Z,CLOSED,False,8,4,1,https://github.com/fredmcc,BaroAlt initialisation fix,3,['BUG'],https://github.com/cleanflight/cleanflight/pull/2363,https://github.com/fredmcc,1,https://github.com/cleanflight/cleanflight/pull/2363,"BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7","BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2363,2016-08-21T20:24:25Z,2016-08-24T17:03:08Z,2016-09-07T17:34:09Z,CLOSED,False,8,4,1,https://github.com/fredmcc,BaroAlt initialisation fix,3,['BUG'],https://github.com/cleanflight/cleanflight/pull/2363,https://github.com/QuinnDamerell,2,https://github.com/cleanflight/cleanflight/pull/2363#issuecomment-241280764,"BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7",I would suggest you always add {} around blocks (the else case) to prevent bugs in the future. :),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2363,2016-08-21T20:24:25Z,2016-08-24T17:03:08Z,2016-09-07T17:34:09Z,CLOSED,False,8,4,1,https://github.com/fredmcc,BaroAlt initialisation fix,3,['BUG'],https://github.com/cleanflight/cleanflight/pull/2363,https://github.com/fredmcc,3,https://github.com/cleanflight/cleanflight/pull/2363#issuecomment-241281683,"BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7","Yep. Normally would, but I read the coding style doc and it told me not to  :-)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2363,2016-08-21T20:24:25Z,2016-08-24T17:03:08Z,2016-09-07T17:34:09Z,CLOSED,False,8,4,1,https://github.com/fredmcc,BaroAlt initialisation fix,3,['BUG'],https://github.com/cleanflight/cleanflight/pull/2363,https://github.com/QuinnDamerell,4,https://github.com/cleanflight/cleanflight/pull/2363#issuecomment-241283949,"BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7","Ah, good call. I am under if this is something they should consider updating in the code standards. After heart bleed and such it seem to be agreed that always using them is usually better.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2363,2016-08-21T20:24:25Z,2016-08-24T17:03:08Z,2016-09-07T17:34:09Z,CLOSED,False,8,4,1,https://github.com/fredmcc,BaroAlt initialisation fix,3,['BUG'],https://github.com/cleanflight/cleanflight/pull/2363,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2363#issuecomment-241309634,"BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7","The development page says ""take a note of the https://github.com/multiwii/baseflight/wiki/CodingStyle""
That is ""take note of it"". Not necessarily follow everything in it. Unfortunately there is no up to date coding style for Cleanflight, but the style is slightly different from Baseflight.
In particular braces should always used around blocks and also the scope of local variables should be minimised (that is local variables should be declared as near as possible to the point of first usage, and if possible should be declared and initialised at the same time).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2363,2016-08-21T20:24:25Z,2016-08-24T17:03:08Z,2016-09-07T17:34:09Z,CLOSED,False,8,4,1,https://github.com/fredmcc,BaroAlt initialisation fix,3,['BUG'],https://github.com/cleanflight/cleanflight/pull/2363,https://github.com/QuinnDamerell,6,https://github.com/cleanflight/cleanflight/pull/2363#issuecomment-241314897,"BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7",Awesome! While we are here is it worth editing the style guides or perhaps starting a more formal doc?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2363,2016-08-21T20:24:25Z,2016-08-24T17:03:08Z,2016-09-07T17:34:09Z,CLOSED,False,8,4,1,https://github.com/fredmcc,BaroAlt initialisation fix,3,['BUG'],https://github.com/cleanflight/cleanflight/pull/2363,https://github.com/fredmcc,7,https://github.com/cleanflight/cleanflight/pull/2363#issuecomment-241471994,"BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7",Added the {}'s,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2363,2016-08-21T20:24:25Z,2016-08-24T17:03:08Z,2016-09-07T17:34:09Z,CLOSED,False,8,4,1,https://github.com/fredmcc,BaroAlt initialisation fix,3,['BUG'],https://github.com/cleanflight/cleanflight/pull/2363,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2363#issuecomment-242137165,"BaroAlt is being updated prior to Baro calibration being complete.
This was causing my taranis radio telemetry to sometimes report the wrong altitude as it learns the starting Smartport altitude value to in order to offset it to altitude above ground. (It was learning some of the initial incorrect values)
Below is a capture of the Smartport telemetry causing the intermittent issue.
Example Smartport messages after reset......
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -6861
100 (Altitude): 13004
100 (Altitude): -29604
100 (Altitude): -6729
100 (Altitude): -1759
100 (Altitude): -401
100 (Altitude): -105
100 (Altitude): -26
100 (Altitude): -8
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -1
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): 0
100 (Altitude): -7","merging now, thanks for the fix.  issues can be reported as part of the next release candidate cycle.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2364,2016-08-22T07:17:29Z,2016-09-14T15:55:20Z,2016-09-16T00:22:27Z,MERGED,True,104,26,5,https://github.com/ethomas997,Horizon Mode SAFE/EXPERT modes,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2364,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2364,"This is an updated version of PR #2268 ""Add horizon_incl_fact parameter""
This modification adds two new CLI commands, 'horizon_tilt_effect' and 'horizon_tilt_mode', which control the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
These commands affect Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_tilt_effect' to 0 will run the old horizon-mode behavior.  For other values, see below:
horizon_tilt_effect 0|175|75: Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode. Larger values result in less self-leveling (more ""acro"") as the tilt of the vehicle increases. The default value of 75 provides good performance when doing large loops and fast-forward flight. With a value of 0 the strength of the self-leveling would be solely dependent on the stick position.
horizon_tilt_mode SAFE|EXPERT: Sets the preformance mode for 'horizon_tilt_effect'
SAFE = leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered. So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat. (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)
EXPERT = leveling can be totally off when inverted:
In this range, the inclination (tilt) of the vehicle can fully ""override"" the self-leveling. In this mode, when the 'horizon_tilt_effect' parameter is set to around 75, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled. This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_tilt_effect' and 'horizon_tilt_mode' values are separate for each profile, and are implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  A PR of this mod for Betaflight is here.
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","This is an updated version of PR #2268 ""Add horizon_incl_fact parameter""
This modification adds two new CLI commands, 'horizon_tilt_effect' and 'horizon_tilt_mode', which control the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
These commands affect Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_tilt_effect' to 0 will run the old horizon-mode behavior.  For other values, see below:
horizon_tilt_effect 0|175|75: Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode. Larger values result in less self-leveling (more ""acro"") as the tilt of the vehicle increases. The default value of 75 provides good performance when doing large loops and fast-forward flight. With a value of 0 the strength of the self-leveling would be solely dependent on the stick position.
horizon_tilt_mode SAFE|EXPERT: Sets the preformance mode for 'horizon_tilt_effect'
SAFE = leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered. So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat. (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)
EXPERT = leveling can be totally off when inverted:
In this range, the inclination (tilt) of the vehicle can fully ""override"" the self-leveling. In this mode, when the 'horizon_tilt_effect' parameter is set to around 75, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled. This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_tilt_effect' and 'horizon_tilt_mode' values are separate for each profile, and are implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  A PR of this mod for Betaflight is here.
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2364,2016-08-22T07:17:29Z,2016-09-14T15:55:20Z,2016-09-16T00:22:27Z,MERGED,True,104,26,5,https://github.com/ethomas997,Horizon Mode SAFE/EXPERT modes,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2364,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2364#issuecomment-247060494,"This is an updated version of PR #2268 ""Add horizon_incl_fact parameter""
This modification adds two new CLI commands, 'horizon_tilt_effect' and 'horizon_tilt_mode', which control the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
These commands affect Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_tilt_effect' to 0 will run the old horizon-mode behavior.  For other values, see below:
horizon_tilt_effect 0|175|75: Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode. Larger values result in less self-leveling (more ""acro"") as the tilt of the vehicle increases. The default value of 75 provides good performance when doing large loops and fast-forward flight. With a value of 0 the strength of the self-leveling would be solely dependent on the stick position.
horizon_tilt_mode SAFE|EXPERT: Sets the preformance mode for 'horizon_tilt_effect'
SAFE = leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered. So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat. (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)
EXPERT = leveling can be totally off when inverted:
In this range, the inclination (tilt) of the vehicle can fully ""override"" the self-leveling. In this mode, when the 'horizon_tilt_effect' parameter is set to around 75, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled. This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_tilt_effect' and 'horizon_tilt_mode' values are separate for each profile, and are implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  A PR of this mod for Betaflight is here.
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","It really doesn't seem like anyone has flown this code based on comments in #2268 and the 5 or 6 other places the code and comments are spread over - I think making new PR's and closing old ones is to blame here, probably a forced push of new code to the old PR would have been better to keep the discussion and momentum going.
After looking at the code, the changes are pretty isolated and I'm of a mind to merge this as-is and get people to try it in the latest release candidate.  If people don't like it we can revert the changes for a later date.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2364,2016-08-22T07:17:29Z,2016-09-14T15:55:20Z,2016-09-16T00:22:27Z,MERGED,True,104,26,5,https://github.com/ethomas997,Horizon Mode SAFE/EXPERT modes,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2364,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2364#issuecomment-247061503,"This is an updated version of PR #2268 ""Add horizon_incl_fact parameter""
This modification adds two new CLI commands, 'horizon_tilt_effect' and 'horizon_tilt_mode', which control the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
These commands affect Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_tilt_effect' to 0 will run the old horizon-mode behavior.  For other values, see below:
horizon_tilt_effect 0|175|75: Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode. Larger values result in less self-leveling (more ""acro"") as the tilt of the vehicle increases. The default value of 75 provides good performance when doing large loops and fast-forward flight. With a value of 0 the strength of the self-leveling would be solely dependent on the stick position.
horizon_tilt_mode SAFE|EXPERT: Sets the preformance mode for 'horizon_tilt_effect'
SAFE = leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered. So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat. (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)
EXPERT = leveling can be totally off when inverted:
In this range, the inclination (tilt) of the vehicle can fully ""override"" the self-leveling. In this mode, when the 'horizon_tilt_effect' parameter is set to around 75, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled. This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_tilt_effect' and 'horizon_tilt_mode' values are separate for each profile, and are implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  A PR of this mod for Betaflight is here.
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","@ethomas997 I don't think we'd ever get much feedback from the betaflight userbase as they never fly in horizon mode 😄   I do and I will be testing this code out next time I go flying.  We'll see what other users think, be prepared for some feedback please.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2364,2016-08-22T07:17:29Z,2016-09-14T15:55:20Z,2016-09-16T00:22:27Z,MERGED,True,104,26,5,https://github.com/ethomas997,Horizon Mode SAFE/EXPERT modes,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2364,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2364#issuecomment-247062398,"This is an updated version of PR #2268 ""Add horizon_incl_fact parameter""
This modification adds two new CLI commands, 'horizon_tilt_effect' and 'horizon_tilt_mode', which control the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
These commands affect Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_tilt_effect' to 0 will run the old horizon-mode behavior.  For other values, see below:
horizon_tilt_effect 0|175|75: Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode. Larger values result in less self-leveling (more ""acro"") as the tilt of the vehicle increases. The default value of 75 provides good performance when doing large loops and fast-forward flight. With a value of 0 the strength of the self-leveling would be solely dependent on the stick position.
horizon_tilt_mode SAFE|EXPERT: Sets the preformance mode for 'horizon_tilt_effect'
SAFE = leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered. So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat. (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)
EXPERT = leveling can be totally off when inverted:
In this range, the inclination (tilt) of the vehicle can fully ""override"" the self-leveling. In this mode, when the 'horizon_tilt_effect' parameter is set to around 75, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled. This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_tilt_effect' and 'horizon_tilt_mode' values are separate for each profile, and are implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  A PR of this mod for Betaflight is here.
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET",@ethomas997 Please update the User documentation in a new PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2364,2016-08-22T07:17:29Z,2016-09-14T15:55:20Z,2016-09-16T00:22:27Z,MERGED,True,104,26,5,https://github.com/ethomas997,Horizon Mode SAFE/EXPERT modes,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2364,https://github.com/ethomas997,5,https://github.com/cleanflight/cleanflight/pull/2364#issuecomment-247111141,"This is an updated version of PR #2268 ""Add horizon_incl_fact parameter""
This modification adds two new CLI commands, 'horizon_tilt_effect' and 'horizon_tilt_mode', which control the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
These commands affect Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_tilt_effect' to 0 will run the old horizon-mode behavior.  For other values, see below:
horizon_tilt_effect 0|175|75: Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode. Larger values result in less self-leveling (more ""acro"") as the tilt of the vehicle increases. The default value of 75 provides good performance when doing large loops and fast-forward flight. With a value of 0 the strength of the self-leveling would be solely dependent on the stick position.
horizon_tilt_mode SAFE|EXPERT: Sets the preformance mode for 'horizon_tilt_effect'
SAFE = leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered. So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat. (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)
EXPERT = leveling can be totally off when inverted:
In this range, the inclination (tilt) of the vehicle can fully ""override"" the self-leveling. In this mode, when the 'horizon_tilt_effect' parameter is set to around 75, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled. This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_tilt_effect' and 'horizon_tilt_mode' values are separate for each profile, and are implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  A PR of this mod for Betaflight is here.
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","@hydra Thanks for doing the merge; I'm happy to hear any feedback and will work on a doc update.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2364,2016-08-22T07:17:29Z,2016-09-14T15:55:20Z,2016-09-16T00:22:27Z,MERGED,True,104,26,5,https://github.com/ethomas997,Horizon Mode SAFE/EXPERT modes,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2364,https://github.com/ethomas997,6,https://github.com/cleanflight/cleanflight/pull/2364#issuecomment-247490142,"This is an updated version of PR #2268 ""Add horizon_incl_fact parameter""
This modification adds two new CLI commands, 'horizon_tilt_effect' and 'horizon_tilt_mode', which control the effect the current inclination has on self-leveling in the Horizon flight mode.  With the existing horizon mode, the strength of the self-leveling is solely dependent on the stick position.  This is problematic when trying to do maneuvers like large loops and fast-forward flight.  Adding a factor that takes into account the current inclination of the craft provides a big improvement for these maneuvers and improves the ""feel"" of horizon mode.  (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater).
These commands affect Horizon mode for the LUX and REWRITE controllers.  The math is all integer based, so no (slower) floating-point operations are involved when using the REWRITE controller.
This mod also addresses an issue with the ""Transition (Horizon)"" ('d_level') parameter -- as of Cleanflight v1.13.0 the 'sensitivity_horizon' (LUX) and 'd_level' (REWRITE) CLI parameters were merged so that both use the 'd_level' parameter.  The problem is that the ranges behave differently -- in LUX, increasing the value results in more self leveling and zero results in no self leveling; in REWRITE, increasing the value results in less self leveling.  With this mod, increasing the value results in more self leveling and zero results in no self leveling.  The default has been changed to 75, which should give relatively unchanged default behavior for this parameter on both PID controllers.
The original idea for this mod came from ctzsnooze (see CleanFlight issue #695); I've expanded on it and turned it into a configurable option.  One characteristic of horizon mode I made a point of retaining is that, when the vehicle is flat and the sticks are near center, the self-leveling effect is not diminished by larger 'horizon_incl_fact' settings.  Like in the existing horizon mode, the strength of the self-leveling can be effectively managed using the ""Strength (Horizon)"" ('i_level') parameter.  Also, the ""Transition (Horizon)"" ('d_level') parameter operates the same as before.
Setting 'horizon_tilt_effect' to 0 will run the old horizon-mode behavior.  For other values, see below:
horizon_tilt_effect 0|175|75: Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode. Larger values result in less self-leveling (more ""acro"") as the tilt of the vehicle increases. The default value of 75 provides good performance when doing large loops and fast-forward flight. With a value of 0 the strength of the self-leveling would be solely dependent on the stick position.
horizon_tilt_mode SAFE|EXPERT: Sets the preformance mode for 'horizon_tilt_effect'
SAFE = leveling always active when sticks centered:
This is the ""safer"" range because the self-leveling is always active when the sticks are centered. So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat. (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.)
EXPERT = leveling can be totally off when inverted:
In this range, the inclination (tilt) of the vehicle can fully ""override"" the self-leveling. In this mode, when the 'horizon_tilt_effect' parameter is set to around 75, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled. This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying.
The 'horizon_tilt_effect' and 'horizon_tilt_mode' values are separate for each profile, and are implemented for both the LUX and REWRITE PID controllers.
I've posted a version of this modification applied to the v1.13.0 (release) version of Cleanflight, here.  A PR of this mod for Betaflight is here.
I've been flying this mod in my MiniFTC and other copters for quite a while now; I think it makes Horizon mode much better.
--ET","Doc update posted, see #2407
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/QuinnDamerell,1,https://github.com/cleanflight/cleanflight/pull/2366,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241584197,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.",ahh very interesting! I will have a look at this soon for sure!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241584556,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.",@digitalentity @martinbudden @ledvinap would love your comments on this if you have time.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/QuinnDamerell,4,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241588535,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","Great! I would love feedback on it, feel free to give me any thoughts you have. You can get a good feel of whats going on / what I thought the important code paths are by looking at the unit tests.
Random question, is there a reason why the code hasn't been migrated toward c++ STL? I'm so accustomed to it now I feel old school writing more classic c. Lol.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241591108,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","i have heard from many developers that they don't want C++.  Personally I love the encapsulation you get with C++ and I feel it would make developers think harder about the code they write rather then just hacking a new file and collection of methods and global variables up like you get with C.  It's a discussion for another issue though, let's keep this discussion on this PR focussed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/QuinnDamerell,6,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241596192,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","Yeah I agree with you 100%, but it is an issue for another time. I figured while I had your attention I would ask. 😁",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/proggod,7,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241605388,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","C is much more efficient then c++, and quite honestly c++ is dying and being replaced by better languages.   When your writing bare metal code you want to be as close to possible to native machine language. Since no one wants to write in assembly c is the next best choice.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/proggod,8,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241606188,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.",I don't like the dead wait loop,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/QuinnDamerell,9,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241607533,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","@proggod , which dead loop? For the main execute function?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/QuinnDamerell,10,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241607718,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.",(pushed to pull in the unit test fix),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/proggod,11,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241627657,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","There was a while, inside the while loop.   It shouldn't be a big deal, but while loops without a potential to exit have caused problems in the code before.   I will look at your code more in detail tomorrow, but it looked pretty good to me.   You should join slack, I think cleanflight could use some more help if you have time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/QuinnDamerell,12,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241629481,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","Sure, whats the slack address?
I pulled master and committed the merge that fixes the unit test fail, if there is another problem I will take a look tomorrow. 😁",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241633615,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","[Off topic - for the record I also prefer C++, and for embedded code you can avoid the primary inefficiencies of C++ vs C]
And @QuinnDamerell , it's always good to have someone new get involved in the project.
Back to the scheduler changes:

I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time.

The priority queue was introduced as an efficiency measure, not for it's ability to queue tasks at a given time. It allows three main efficiencies:

The realtime check loop only iterates through the realtime tasks, not all the tasks - possible since the tasks are in priority order.
processing tasks in priority order means that the conditional statements more often execute in our favour (that is take the quickest condition),
it removes the need for the isEnabled flag - if a task is enabled it is in the queue.  So only enabled tasks are iterated through


but the logic had a bug that would only make it apply if the realtime events were first in the queue.

Not a bug, a deliberate optimisation. The queue is a priority queue, so realtime events are the first in the queue.

I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms.

Jitter reduction is sometimes welcome, sometimes not. For example for sonar there must be at least 70ms between readings, otherwise the readings can be erroneous, so for sonar jitter reduction is not good. Also jitter reduction should not come at the cost of performance.
There is a comment in the code:
// We shouldn't select this task because it will take too long and the realtime task won't be ran on time.
// However we don't want to 100 starve the task, so we will heavily weight the task, but if it still wins the
// starvationPriority game it will be ran anyways. The weight will be higher for lower priority tasks.

A starved task should never pre-empt the realtime task.
The way an overloaded CPU is handled is that we prevent the FC from arming if the CPU is overloaded. That way the user can disable some features and try again. In practice this is only an issue with the F1 board (ie primarily NAZE and CC3D)
Note that this is not a general purpose scheduler, it is a scheduler specific to the needs of a Cleanflight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/digitalentity,14,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241642078,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","@QuinnDamerell
Primary task for this scheduler is being fast, being maintainable is the secondary objective. Priority queue approach might seem complex, but it improves performance. Your change is a step back - we've been using only one task list when I initially implemented the scheduler.
The only feisible change I see is jitter reduction, however as @martinbudden pointed out jitter reduction is not always desired and shouldn't come at expense of performance.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/borisbstyle,15,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241649863,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","I agree with @martinbudden. The scheduler is really mainly priority based.
Pretty much evolved superloop. If the schedulers goal was something else
RTOS would have been used.
The time interval between the tasks is sometimes crucial.
Also ESC writes are not allowed to occur too early as you can get
overlapping motor commands since it is just a pulse. Thats the way how the
current pid loop works.

I agree with @martinbudden. The scheduler is really mainly priority based
focused on realtime task. Pretty much evolved superloop. If the schedulers
goal was something else RTOS would have been used.
The time interval between the tasks is sometimes crucial.
Also ESC writes are not allowed to occur too early as you can get
overlapping motor commands since it is just a pulse.

More efficiency can be gained by minimising the busy wait on realtime task
for example and remove the delays. The penalty is just slightly getting out
of sync with gyro, which is totally not a big deal with higher cycletimes
now we usually run today when you do fast sampling where it doesnt matter.
Just have to make sure that you dont read the same sample twice, what can
be solved by using sampling fraction slower than gyro speed itself.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/ledvinap,16,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241715562,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","(repeating myself)
Here is tested, reasonably fast scheduler: https://github.com/ChibiOS/ChibiOS/blob/master/os/rt/src/chschd.c (and other in freeRTOS).
When scheduling promises are updated (no priority groups, no scheduler based handling of starved tasks), it should be very easy to use in CF. And as a bonus migration to RTOS would be much easier in future...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241757202,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","Can you rebase on master and fix the build problems?
Overall I find the code in the PR easy to follow.  There a few minor whitespace/style issues, such as the missing whitespace between if and the open brace ( - use if ( not if(.  Naming wise things seem pretty good.  There was a bit of logic duplication that I noted.  I will try out the unit tests and the code soon, over-all I'm liking the cleanup and I'm very in favour of cutting out stuff we don't need, fixing bugs and improving scheduling consistency so this is high priority for me.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241761278,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","some tasks would benefit in jitter reduction, yes.  perhaps it's possible to add a 'minimumInterval' property to such tasks and not run them earlier than that interval and elsewhere reduce jitter where possible?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/martinbudden,19,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241790589,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","When solving problems things should be made as simple as possible, no simpler.
Or in other words, problems have essential complexity and accidental complexity. The essential complexity is to do with the nature of the problem, the accidental complexity is to do with the nature of the solution and, as far as possible, should be eliminated.
Let's do some analysis. The problem is to schedule tasks with different priorities.

The number of tasks can vary at compile time (because of build flags like BARO etc)
The number of tasks can also at initialisation time (because of the user switching features on and off in the configurator).
After initialisation the number of tasks cannot change.

(1) means we need an iterable container for the tasks. An array is the simplest type of container we can use.
(2) means that we need an additional form of selection. There are two obvious solutions - an enable flag on each task, or a queue of enabled tasks
(3) means that if we choose a queue of enabled tasks it can be implemented as a simple buffer, if the number of tasks could vary arbitrarily at runtime then a linked list should be used for the queue.
Task-scheduling is a well understood problem and nothing above is new.
Using a flag on each task is sub-optimal, for a number of reasons that I have already stated in this thread.
Using a priority queue for task scheduling is pretty well the canonical implementation and as such is well understood and therefore easy to maintain.
There is room for improvement in the  current solution (as there is room for improvement in all code) but it will outperform the proposed changes.
I believe the proposed change is an oversimplification of the problem. That is essential aspects of the problem have been overlooked in the goal of simplification. It will result is less performant code.
@hydra I'm not sure why you want to prioritise replacing a working scheduler just before a release. If you don't like the existing code, fair enough, but surely it is wise to wait until after the current release to replace it.
Also, if you don't like the priority queue, I don't understand why you merged in PR #1784 - Scheduler optimized by using priority queue. This PR basically reverts those changes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/ledvinap,20,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241831334,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","@martinbudden : Another possibility is to use linked list of tasks.
Each module can allocate its own task description structure and register (multiple) tasks in initialization routine. No need for global structure separated from modules (it is possible to use linker sections to get task descriptors in continuous memory if necessary)
Run queue and wait queue may be easily separated, first sorted by priority, second by time to run.
Task insertion will be O(n) -  using O(log n) is probably overkill, there is quite few tasks so simpler algorithm will be faster.
This will probably improve performance compared to current behavior - no need to scan tasks on each scheduler call (or maybe performance will be similar - one task insert per schedule instead of one scan).
It will be easy to schedule task from event - no need for slow checker functions
It will allow much easier transition to RTOS in future if desired",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/martinbudden,21,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-241840506,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","@ledvinap , yes a linked list of tasks is another possibility. And RTOS is a whole other discussion...
But I'm generally not in favour of making changes in this area, especially just before a release:

The existing code works and is performant
Any bugs in the scheduler code are pretty sure to impact the user
Any work on the scheduler is an opportunity cost, when there are quite a few more important and urgent things to do. Migration to the new IO, for example.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-242135688,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","@martinbudden I have largely been leaving the scheduler side of things to those with an interest in it.  After these comments it's clear to me that the proposed changes are probably not right for now.
Also now agreed that due to the comments above it's not right to merge or change things for 1.14.0.
Agreed that each module should be able to add/register one or more tasks. this will help with modularisation for sure and will likely remove some FC specific code from the tests which is a good thing.
Agreed that we should do the new IO first.
OK, let's park this until after 1.14.0.
@QuinnDamerell I hope you are not disheartened by any of this, i think the goals are clearer now.  Definately include @martinbudden @digitalentity @borisbstyle and @ledvinap before embarking on writing new scheduler changes.  Perhaps you can think of a plan based on all the above?
Also, if there's any bugs in the current scheduler code (as you noted) perhaps we should fix them now for the 1.14.0 release?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/QuinnDamerell-MS,23,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-242168709,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","@hydra yeah sure!
Sorry I had things pick up at work so I haven't had time to read through all of the discussion. But when I get sometime I will look through it and respond. :)
I'm fine with pushing the work off / refactoring the changes. I will sync with the rest of the contributors and see what changes we want to have made and the best ways to do them. :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/martinbudden,24,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-242176442,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","@QuinnDamerell , and yes, despite my criticism, I hope you are not discouraged. My criticism is intended to be constructive and is of the code, not the person writing it. The scheduler is at the heart of the code, so any bugs introduced will manifest themselves, and they can do so in insidious and hard to track down ways.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,25,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-242592912,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","@martinbudden indeed.
@QuinnDamerell great, looking forward to seeing what you come up with.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,26,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-245379337,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.",@QuinnDamerell any progress?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2366,2016-08-22T16:34:19Z,2016-10-29T01:36:06Z,2016-10-29T01:36:06Z,CLOSED,False,1148,534,10,https://github.com/QuinnDamerell,"Scheduler rewrite, improvements, debugging, and tests",3,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/2366,https://github.com/hydra,27,https://github.com/cleanflight/cleanflight/pull/2366#issuecomment-257063104,"I wanted to get involved with the project so I pulled the code and found the scheduler as a good starting point. As I looked at the code I realized it was quite over complicated and there seemed to be two different concepts going on in the code. There is a static array of tasks that can be ran that is compiled into the code and there was also a queue of tasks, but the tasks were only added to the queue on boot and never changed.
I simplified the logic to only use the task list, which makes the code much easier to maintain but remove the possibility of queuing random task at any given time. That can still be added later down the road, but it didn’t seem like it was really a feature that would be needed in the system.
I also made some improvements, the scheduler had the concept of a realtime guard (tasks would not be scheduled if they would run past the time when a realtime task needed to be scheduled) but the logic had a bug that would only make it apply if the realtime events were first in the queue. It also only considered the highest running time of all of the tasks, so if there was one task that was super long it wouldn’t let any tasks queue in the time slot. I changed the logic to work for all realtime tasks, and to also consider each task length individually so if one will fit it will run.
I also improved the timing period for time based tasks, so if a task should run every 100ms the period between runs should be much closer to 100ms. The old code would reschedule the task to run 100ms from when it was executed, which means if the task was executed at 112 it would be queued to run at 212 next. A better way of doing this is to always schedule to the time it should have ran, so if it executed at 112 it would be scheduled to run at 200 next. The result is the time tasks are much more consistent.
And finally, I added a ton of unit tests. There were unit tests for the queue in the scheduler, but none for any of the scheduling logic. I added unit test for just about everything, including all of the realtime guard and priority features.","closing, lack of progress and developer response.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2367,2016-08-23T05:03:47Z,2016-08-23T05:04:23Z,2016-08-23T05:04:52Z,CLOSED,False,21903,879,133,https://github.com/conkerkh,Osd support,23,[],https://github.com/cleanflight/cleanflight/pull/2367,https://github.com/conkerkh,1,https://github.com/cleanflight/cleanflight/pull/2367,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2367,2016-08-23T05:03:47Z,2016-08-23T05:04:23Z,2016-08-23T05:04:52Z,CLOSED,False,21903,879,133,https://github.com/conkerkh,Osd support,23,[],https://github.com/cleanflight/cleanflight/pull/2367,https://github.com/conkerkh,2,https://github.com/cleanflight/cleanflight/pull/2367#issuecomment-241627742,,sorry my mistake,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/Bengt-M,1,https://github.com/cleanflight/cleanflight/pull/2370,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.","For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2370#issuecomment-242701030,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.",Great work!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2370#issuecomment-242701974,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.","What about case formating? Should it be aligned to switch or indented?
Personally I prefer to avoid indenting (so that case code is not double-indented)",True,{'THUMBS_UP': ['https://github.com/Bengt-M']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/Bengt-M,4,https://github.com/cleanflight/cleanflight/pull/2370#issuecomment-242968035,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.","About case formatting again. I agree that the case should be on the same level as the switch.

It is the default in Eclipse and Astyle (at least with the K&R style).
It is the Linux style.
It puts the statements at the same level as if the construct was using if/else if. That is nice; I can change a complicated if/else if to a switch/case construct with minimum impact.
It is a habit.

But; a lot of the Cleanfligt code actually use an extra indent level inside the switch block.
I have been trying with Astyle.
AStyle --style=kr --indent=spaces=4 --indent-col1-comments --min-conditional-indent=0 --max-instatement-indent=80 --pad-header --pad-oper --unpad-paren --align-pointer=name --align-reference=name --max-code-length=140 --break-after-logical --convert-tabs --preserve-date --suffix=none --mode=c --recursive src\*.*

Only looked at c code and I think it looks good but of course it changes almost all of the files. I think the two most common (and debatable) changes are the switch/case indentation and how to break and align very long lines.
Sometimes the lines need to be broken with some higher logic which the tools cannot know. Like matrices in math. So maybe a tool like this cannot be made mandatory.
If this was my own one-person project I would also add --add-brackets.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2370#issuecomment-245452748,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.","ok, can you update this PR based on comments above and we'll merge it.
if there's no concensus on a point then just remove it from the style guide, some merged guide is better than none, we can always add to it later.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2370#issuecomment-246101147,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.",ready for merge?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/Bengt-M,7,https://github.com/cleanflight/cleanflight/pull/2370#issuecomment-246107420,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.",I think so. Looking at who contributed/commented most it would be nice with a final word from @ledvinap and @martinbudden too.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2370#issuecomment-246109817,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.",Looks great to me,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2370,2016-08-26T09:16:51Z,2016-09-14T15:39:19Z,2016-09-14T16:30:14Z,MERGED,True,259,0,1,https://github.com/Bengt-M,Coding Style document,4,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2370,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2370#issuecomment-247055608,"For discussion.
Replacing the old Baseflight version, adding new input and some structure.
Been thinking about it sometimes since #2191.
Became longer than expected...
Probably not perfect but now all in one md file.","ok, merging.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2372,2016-08-28T23:22:24Z,2016-08-28T23:22:51Z,2016-08-29T11:00:18Z,CLOSED,False,212895,17620,749,https://github.com/digitalentity,Add extra delays when cold-booting,693,[],https://github.com/cleanflight/cleanflight/pull/2372,https://github.com/digitalentity,1,https://github.com/cleanflight/cleanflight/pull/2372,This is an attempt to exploit @stronnag's finding in iNavFlight/inav#431 (comment),This is an attempt to exploit @stronnag's finding in iNavFlight/inav#431 (comment),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2372,2016-08-28T23:22:24Z,2016-08-28T23:22:51Z,2016-08-29T11:00:18Z,CLOSED,False,212895,17620,749,https://github.com/digitalentity,Add extra delays when cold-booting,693,[],https://github.com/cleanflight/cleanflight/pull/2372,https://github.com/digitalentity,2,https://github.com/cleanflight/cleanflight/pull/2372#issuecomment-243006014,This is an attempt to exploit @stronnag's finding in iNavFlight/inav#431 (comment),"Wrong master, as usual, sorry.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2372,2016-08-28T23:22:24Z,2016-08-28T23:22:51Z,2016-08-29T11:00:18Z,CLOSED,False,212895,17620,749,https://github.com/digitalentity,Add extra delays when cold-booting,693,[],https://github.com/cleanflight/cleanflight/pull/2372,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2372#issuecomment-243094030,This is an attempt to exploit @stronnag's finding in iNavFlight/inav#431 (comment),😄,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2372,2016-08-28T23:22:24Z,2016-08-28T23:22:51Z,2016-08-29T11:00:18Z,CLOSED,False,212895,17620,749,https://github.com/digitalentity,Add extra delays when cold-booting,693,[],https://github.com/cleanflight/cleanflight/pull/2372,https://github.com/digitalentity,4,https://github.com/cleanflight/cleanflight/pull/2372#issuecomment-243094364,This is an attempt to exploit @stronnag's finding in iNavFlight/inav#431 (comment),"That's a drawback of being a fork, GitHub always thinkgs I'm going to merge to parent ;)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2374,2016-08-29T15:15:59Z,2016-09-14T15:16:44Z,2016-09-19T14:27:44Z,MERGED,True,14,0,1,https://github.com/rb1205,Added basic auto-leveled flight modes explanation,3,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2374,https://github.com/rb1205,1,https://github.com/cleanflight/cleanflight/pull/2374,"Added a basic explanation of how the default RATE mode works and the difference between ANGLE and HORIZON.
To address #2356","Added a basic explanation of how the default RATE mode works and the difference between ANGLE and HORIZON.
To address #2356",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2374,2016-08-29T15:15:59Z,2016-09-14T15:16:44Z,2016-09-19T14:27:44Z,MERGED,True,14,0,1,https://github.com/rb1205,Added basic auto-leveled flight modes explanation,3,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2374,https://github.com/rb1205,2,https://github.com/cleanflight/cleanflight/pull/2374#issuecomment-243262056,"Added a basic explanation of how the default RATE mode works and the difference between ANGLE and HORIZON.
To address #2356",Typo fixed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2375,2016-08-29T16:01:14Z,2016-09-02T00:27:51Z,2016-09-04T13:57:31Z,MERGED,True,130,107,13,https://github.com/martinbudden,Make mag init function bool and act on return value,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2375,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2375,Addresses issue #2211,Addresses issue #2211,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2375,2016-08-29T16:01:14Z,2016-09-02T00:27:51Z,2016-09-04T13:57:31Z,MERGED,True,130,107,13,https://github.com/martinbudden,Make mag init function bool and act on return value,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2375,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2375#issuecomment-243743972,Addresses issue #2211,"yes, we can drop the clearing of magData in the drivers.  the return value is enough to indicate whether the data can be used or should be cleared by the caller before using it elsewhere.  @martinbudden can you update the PR?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2375,2016-08-29T16:01:14Z,2016-09-02T00:27:51Z,2016-09-04T13:57:31Z,MERGED,True,130,107,13,https://github.com/martinbudden,Make mag init function bool and act on return value,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2375,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2375#issuecomment-243770521,Addresses issue #2211,PR updated.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2375,2016-08-29T16:01:14Z,2016-09-02T00:27:51Z,2016-09-04T13:57:31Z,MERGED,True,130,107,13,https://github.com/martinbudden,Make mag init function bool and act on return value,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2375,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2375#issuecomment-244251682,Addresses issue #2211,"@martinbudden awesome, thanks. merged but with regards to @ledvinap 's comment see additional commit 15e6e4a",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2375,2016-08-29T16:01:14Z,2016-09-02T00:27:51Z,2016-09-04T13:57:31Z,MERGED,True,130,107,13,https://github.com/martinbudden,Make mag init function bool and act on return value,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2375,https://github.com/digitalentity,5,https://github.com/cleanflight/cleanflight/pull/2375#issuecomment-244604901,Addresses issue #2211,"@hydra this change introduced a bug with MPU9250 internal compass. Fixed in INAV with iNavFlight/inav#560
You might want to cherry-pick this fix into CF",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2376,2016-08-29T17:31:03Z,2016-08-31T12:00:25Z,2016-08-31T13:50:22Z,MERGED,True,24,0,2,https://github.com/martinbudden,Add initialisation delays to allow GPS to power up,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2376,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2376,"As in iNav.
Addresses issue #2211","As in iNav.
Addresses issue #2211",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2376,2016-08-29T17:31:03Z,2016-08-31T12:00:25Z,2016-08-31T13:50:22Z,MERGED,True,24,0,2,https://github.com/martinbudden,Add initialisation delays to allow GPS to power up,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2376,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2376#issuecomment-243199502,"As in iNav.
Addresses issue #2211",Isn't GPS_BOOT_DELAY enough?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2376,2016-08-29T17:31:03Z,2016-08-31T12:00:25Z,2016-08-31T13:50:22Z,MERGED,True,24,0,2,https://github.com/martinbudden,Add initialisation delays to allow GPS to power up,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2376,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2376#issuecomment-243200618,"As in iNav.
Addresses issue #2211","It probably is. This is a copy of what is done in iNav and known to work. It's probably overkill for Cleanflight though.
@hydra you might want to cherry pick and not include the change in boot.c.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2376,2016-08-29T17:31:03Z,2016-08-31T12:00:25Z,2016-08-31T13:50:22Z,MERGED,True,24,0,2,https://github.com/martinbudden,Add initialisation delays to allow GPS to power up,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2376,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2376#issuecomment-243742662,"As in iNav.
Addresses issue #2211","merged, see e77405a - yes @ledvinap we do not want to delay system initialisation, just GPS initialisation.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2388,2016-09-07T07:06:48Z,2016-09-14T15:11:59Z,2016-09-14T15:12:15Z,CLOSED,False,280,0,4,https://github.com/silkyGomboc,Begin porting of some USBLinker code.,1,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2388,https://github.com/silkyGomboc,1,https://github.com/cleanflight/cleanflight/pull/2388,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2388,2016-09-07T07:06:48Z,2016-09-14T15:11:59Z,2016-09-14T15:12:15Z,CLOSED,False,280,0,4,https://github.com/silkyGomboc,Begin porting of some USBLinker code.,1,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2388,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2388#issuecomment-247046132,,"I'm closing this PR, it's not ready.
When it is finished open a new PR with the original port and additional commits and we can merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2389,2016-09-07T09:55:40Z,2016-09-07T20:01:24Z,2016-09-07T20:01:24Z,CLOSED,False,162961,20814,724,https://github.com/silkyGomboc,clean,1975,[],https://github.com/cleanflight/cleanflight/pull/2389,https://github.com/silkyGomboc,1,https://github.com/cleanflight/cleanflight/pull/2389,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2389,2016-09-07T09:55:40Z,2016-09-07T20:01:24Z,2016-09-07T20:01:24Z,CLOSED,False,162961,20814,724,https://github.com/silkyGomboc,clean,1975,[],https://github.com/cleanflight/cleanflight/pull/2389,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2389#issuecomment-245398877,,"this PR is targeting the wrong fork/head, closing.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2391,2016-09-09T10:05:32Z,2016-09-09T10:06:06Z,2017-01-11T11:05:25Z,CLOSED,False,163085,20815,727,https://github.com/borisbstyle,Add Back Some Dirty target code for SPRACINGF3EVO See #1131 #1127,1989,[],https://github.com/cleanflight/cleanflight/pull/2391,https://github.com/borisbstyle,1,https://github.com/cleanflight/cleanflight/pull/2391,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2393,2016-09-10T11:24:55Z,2016-09-14T15:04:56Z,2016-09-14T15:05:00Z,MERGED,True,13,15,1,https://github.com/fredmcc,Fixed SPort telemetry flight mode flag bug,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2393,https://github.com/fredmcc,1,https://github.com/cleanflight/cleanflight/pull/2393,"Fixes a bug introduced by commit 2507b90 that produces incorrect flight mode data on SPort telemetry.
Also included a change to produce expected output if GTUNE_MODE and PASSTHROUGH_MODE are set together.","Fixes a bug introduced by commit 2507b90 that produces incorrect flight mode data on SPort telemetry.
Also included a change to produce expected output if GTUNE_MODE and PASSTHROUGH_MODE are set together.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2393,2016-09-10T11:24:55Z,2016-09-14T15:04:56Z,2016-09-14T15:05:00Z,MERGED,True,13,15,1,https://github.com/fredmcc,Fixed SPort telemetry flight mode flag bug,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2393,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2393#issuecomment-247041749,"Fixes a bug introduced by commit 2507b90 that produces incorrect flight mode data on SPort telemetry.
Also included a change to produce expected output if GTUNE_MODE and PASSTHROUGH_MODE are set together.","Merging this PR, see comments on commit referenced by original posted.
@fredmcc thanks for PR and testing.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2396,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246206921,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",I'm considering adding FEATURE_CURRENT_METER_VIRTUAL in addition to the FEATURE_CURRENT_METER and allowing the virtual current meter to be compiled out as required.  Thoughts?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246347321,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",@ledvinap thanks for code review and comments.  I've just pushed another commit to fix the failing unit tests.  I will review your comments and fix as appropriate.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246350863,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",BTW: Can you consider using 'amperage' instead of 'current' ? It is much easier to grep and can't be  confused with temporal 'current'.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246353809,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","yes, amperage is better than current. I will adjust.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246361804,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","@ledvinap see c0d51ab with regards to the rename.
If I have missed anything please let me know.  There were many changes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246363538,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",@ledvinap I found more in 8554617,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246364104,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",I'm gonna go for a swim in the pool and grab some food.  Gotta keep fit.  More later today.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246368725,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",I know the current->amperage change is huge. But it should remove lot of confusion long-term ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/proggod,10,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246414954,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","You guys might want to check my formula in the raceflight rc12 code, you are losing precision going from the floats and ints, and you are also not really taking into account the vdivider ratios, etc as well, since they are never exactly what you think they are and should be measured.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/martinbudden,11,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246418202,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","For future reference I don't really think we should be combining a major rename (current->amperage) with other work:

It's a distraction
It makes code review more difficult - lot's of inconsequential changes to ignore
It is a potential source of errors.

Much better to do the rename atomically in a single PR. That way you can be sure it's correct, since you can compare the binaries produced - they should not have changed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246419625,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","@proggod yes, i am aware of that.  I specifically simplifed the unit testing of that code so that we can migrate to it at a later date.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246419859,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",@martinbudden good point. I'll consider myself slapped. 😄,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/proggod,14,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246420430,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",@hydra alright :),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246421595,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","@ledvinap @ProDrone I will leave the voltage change for now.  I agree that having the output in mV is best.  We will update the formula, tests, logging, telemetry, msp code as part of that change.  I will create an issue specifically for that.
EDIT: Issue #2398 created",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246426989,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","ok, when the build passes I'm gonna merge this.  Thanks for the contributions everyone.
I will now work on the corresponding configurator changes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/martinbudden,17,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246427965,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","@hydra , did you see my comment about the CJMCU pin?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246439275,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","@martinbudden yes.   I picked PA4 since we already have other code that works using that pin for other targets and does not interfere with PWM mapping.  CF doesn't yet have the nrf receiver code merged in.
I'd welcome a PR to allow a different pin to be used so long as it doesn't break PWM mapping code.  That change I feel is for a later date as I have much bigger fish to fry right now.
In your build for your quad just change your target file accordingly for now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/martinbudden,19,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246448718,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","OK, fair enough.
WRT doing my own build - I don't think I have a single quad that is running stock firmware :-)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246451917,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","@martinbudden all my quads have stock firmware.  I never fly anything else.  To this day I have still never flown betaflight, inav or raceflight either 😄  Shocking I know!
I think the term is 'dogfooding'.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/ledvinap,21,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246464927,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","@proggod : Can you please line relevant code? Is it this one? https://github.com/rs2k/raceflight/blob/master/src/main/sensors/battery.c#L66
Resolution of equation above is more than adequate, denominator is ~ 100000. Can't see any advantage to using float.
vbatscale resolution is ~ 3mv at max voltage, independent of voltage divider value. 1/1000 should be adequate considering other error sources.
@proggod and @ledvinap please continue this discussion regarding battery voltage formula on #2398",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246473987,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.","ok, build passes, merging!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2396,2016-09-11T21:44:15Z,2016-09-12T20:05:18Z,2016-10-12T20:22:09Z,MERGED,True,1122,546,69,https://github.com/hydra,First cut of refactored battery/voltage/curent sensor code for #2221,14,"['Critical', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2396,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/2396#issuecomment-246474070,"This is the PR  for #2221.
Features:

fixes quite a few dependency issues.
removes some hacks in the OSD 12V/5V code.
allows virtual and adc current meters at the same time.
completely seperates voltage and monitoring from the concept of a
battery.  Not all voltages are from a battery.
removes some battery/voltage/current configuration from MSP_BF_CONFIG
and MSP_MISC
allows each voltage meter and each current meter to be independantly
configured.
allows a single battery to be configured.
moves MSP server configuration into it's own PG (to fix the FIXME with
regards to multiWiiCurrentMeter code).

The tests WILL fail, they will be updated ASAP - I ran out of time
tonight.",@proggod and @ledvinap please continue this discussion regarding battery voltage formula on #2398,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2400,2016-09-13T20:36:26Z,2016-09-14T21:13:31Z,2016-09-14T21:14:02Z,CLOSED,False,5,3,2,https://github.com/Floyer007,Spelling fixes for doc and README,5,"['Documentation', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2400,https://github.com/Floyer007,1,https://github.com/cleanflight/cleanflight/pull/2400,Some little fixes to optimize the readability.,Some little fixes to optimize the readability.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2400,2016-09-13T20:36:26Z,2016-09-14T21:13:31Z,2016-09-14T21:14:02Z,CLOSED,False,5,3,2,https://github.com/Floyer007,Spelling fixes for doc and README,5,"['Documentation', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2400,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2400#issuecomment-247017604,Some little fixes to optimize the readability.,will merge once comments are addressed.  can you squash the commits too please?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2400,2016-09-13T20:36:26Z,2016-09-14T21:13:31Z,2016-09-14T21:14:02Z,CLOSED,False,5,3,2,https://github.com/Floyer007,Spelling fixes for doc and README,5,"['Documentation', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2400,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2400#issuecomment-247155834,Some little fixes to optimize the readability.,"squashed commits and merged, thanks!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2401,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247085408,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","This should help with #2395.
Review/comments are welcome, but the code is not yet ready for merge. I'll force-push new version, don't base new work on this PR",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247087013,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored",@hydra: Is it OK to config_eeprom.c functions to start with EEPROM?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247087172,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored",Unittests will be fixed soon,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247135543,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","@ledvinap nice to see some progress on this, cool.
there are a few cases that need to be handled:

load existing pg
initialise pg's that cannot be found
load pg with matching version that has NEW fields at the end of the record - the new fields must be reset to defaults - size mismatch.
re-initialise pg's the have a version mismatch.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247145788,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","load existing pg


Stored configuration is used when it does exist (correct profile/system +PGN) and version does match


initialise pg's that cannot be found


PG is reset when EEPROM record is not found


load pg with matching version that has NEW fields at the end of the record - the new fields must be reset to defaults - size mismatch.


PG is reset first, than stored data are copied over it.


re-initialise pg's the have a version mismatch.


Record is reset on version mismatch (nothing is copied over default values)
Handling of arrays may be improved - pad/trim on per-item basis, then reset remaining items if necessary. But that can go into next PR.
Also it will be quite easy to implement PG upgrade mechanism - register function that will chane record to higher version number. Multiple upgrade steps may be performed automatically, oldest supported CF version may be handled by #define, including only upgrade functions that fit available space",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247149015,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored",@ledvinap great. so all the cases outlined above are all handled by this PR as-is?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247154004,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","@hydra : I hope so .. It needs testing, I'll prepare some unittests ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247271155,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","@hydra: Is it OK to config_eeprom.c functions to start with EEPROM?

if you mean, is it ok to change the prefix of the eeprom functions to have eeprom at the start. yes. but not in this PR please.  as @martinbudden metioned recently let's keep larger renames a little more focused.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247411699,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored",@ledvinap ready?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247418594,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","@ledvinap in doing a bit of testing and monitoring the reg->pgn from inside pgLoad I noticed unexpected values, such as 4123 and 4107.  I had basically flashed the 1.13.0 binary, let it boot and then upgraded the firmware to master via SWD to see what what was being reset and what wasn't when i noticed these unexpected values.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247419007,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","ahh wait, never mind, lol, that's the version in the top 4 bits.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247420304,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","I do note, that after the config is loaded and some settings are reset the config is not immediately saved and the 'upgrade' process is followed on every boot until the config is saved once.
I think that's probably acceptable but I'd like your thoughts.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247431785,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","IMO repeated upgrade is fine. If you downgrade/change version before saving, you get original config back. Can be especially useful if you flash wrong version.
If config upgrade using intermediate versions is desired, you can save explicitly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,15,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247432848,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored",BTW: It should be quite easy to skip save when config did not change (use code identical to load and compare EEPROM records to PG).,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247435743,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","yeah, not-saving is useful feature actually 😄
nice.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,17,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247441591,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","This PR is not that large, I don't see any problem. But I did not test it on actual hardware.
If you tested it on HW (any board should do), is should be safe to merge.,",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-247453312,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","Yes I tested it on an SP Racing F3 EVO and went from 1.13.0 to the latest master + this PR.
I'll merge it now, we can fix in next RC if something comes up.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/hydra,19,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-248571955,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored",@ledvinap I'm finding if I upgrade from 1.13.0 to master then cli dump fails due to incorrect value of telemetry_send_cells.  This needs investigation.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2401,2016-09-14T17:08:01Z,2016-09-15T20:57:20Z,2016-09-22T10:31:59Z,MERGED,True,83,66,6,https://github.com/ledvinap,Redesign PG loading from EEPROM,4,['Critical'],https://github.com/cleanflight/cleanflight/pull/2401,https://github.com/ledvinap,20,https://github.com/cleanflight/cleanflight/pull/2401#issuecomment-248851950,"All parameter groups  initialized, either from EEPROM or reset to
default.
Stored record version is checked, mismatched version is ignored","fixed in #2421. The bug was there before this PR, I totally missed it ... At least new code is a bit nicer ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2402,2016-09-14T21:24:07Z,2016-10-12T20:33:56Z,2016-10-12T20:33:56Z,MERGED,True,19,14,1,https://github.com/Bengt-M,Update developer documentation.,1,[],https://github.com/cleanflight/cleanflight/pull/2402,https://github.com/Bengt-M,1,https://github.com/cleanflight/cleanflight/pull/2402,"Replace link to old style
Remove old items 3 and 5 due to duplication
plus some small things","Replace link to old style
Remove old items 3 and 5 due to duplication
plus some small things",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2403,2016-09-14T22:57:40Z,2017-02-25T16:55:37Z,2017-02-26T02:04:23Z,CLOSED,False,252,24,16,https://github.com/hydra,"new CLI ""beeper"" command",1,[],https://github.com/cleanflight/cleanflight/pull/2403,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2403,"Continuation of #2112 and #1894.
Totally untested.  Please compile test and create PR's to fix this.
PLEASE people, help me out here and get this finished if you have time.","Continuation of #2112 and #1894.
Totally untested.  Please compile test and create PR's to fix this.
PLEASE people, help me out here and get this finished if you have time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2403,2016-09-14T22:57:40Z,2017-02-25T16:55:37Z,2017-02-26T02:04:23Z,CLOSED,False,252,24,16,https://github.com/hydra,"new CLI ""beeper"" command",1,[],https://github.com/cleanflight/cleanflight/pull/2403,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2403#issuecomment-247599711,"Continuation of #2112 and #1894.
Totally untested.  Please compile test and create PR's to fix this.
PLEASE people, help me out here and get this finished if you have time.",@ivanwyc do you have time to test and fix up this PR so we can get it merged.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2403,2016-09-14T22:57:40Z,2017-02-25T16:55:37Z,2017-02-26T02:04:23Z,CLOSED,False,252,24,16,https://github.com/hydra,"new CLI ""beeper"" command",1,[],https://github.com/cleanflight/cleanflight/pull/2403,https://github.com/ivanwyc,3,https://github.com/cleanflight/cleanflight/pull/2403#issuecomment-247733029,"Continuation of #2112 and #1894.
Totally untested.  Please compile test and create PR's to fix this.
PLEASE people, help me out here and get this finished if you have time.",Will try to take a look tonight.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2403,2016-09-14T22:57:40Z,2017-02-25T16:55:37Z,2017-02-26T02:04:23Z,CLOSED,False,252,24,16,https://github.com/hydra,"new CLI ""beeper"" command",1,[],https://github.com/cleanflight/cleanflight/pull/2403,https://github.com/ivanwyc,4,https://github.com/cleanflight/cleanflight/pull/2403#issuecomment-266255246,"Continuation of #2112 and #1894.
Totally untested.  Please compile test and create PR's to fix this.
PLEASE people, help me out here and get this finished if you have time.","Created a new PR #2531
Have tested as much as I can.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2407,2016-09-16T00:18:28Z,2016-09-16T14:13:42Z,2016-09-16T14:14:08Z,MERGED,True,22,2,2,https://github.com/ethomas997,Doc update for #2364 Horizon Mode SAFE/EXPERT modes,1,[],https://github.com/cleanflight/cleanflight/pull/2407,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2407,"PID tuning.md:  Added Horizon Mode Commands, updated description of Level-D for MWREWRITE.
CLI.md:  Added 'horizon_tilt_effect' and 'horizon_tilt_mode', set 'd_level' default to 75.
Doc update for #2364","PID tuning.md:  Added Horizon Mode Commands, updated description of Level-D for MWREWRITE.
CLI.md:  Added 'horizon_tilt_effect' and 'horizon_tilt_mode', set 'd_level' default to 75.
Doc update for #2364",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2407,2016-09-16T00:18:28Z,2016-09-16T14:13:42Z,2016-09-16T14:14:08Z,MERGED,True,22,2,2,https://github.com/ethomas997,Doc update for #2364 Horizon Mode SAFE/EXPERT modes,1,[],https://github.com/cleanflight/cleanflight/pull/2407,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2407#issuecomment-247611247,"PID tuning.md:  Added Horizon Mode Commands, updated description of Level-D for MWREWRITE.
CLI.md:  Added 'horizon_tilt_effect' and 'horizon_tilt_mode', set 'd_level' default to 75.
Doc update for #2364",great thanks for a timely PR.  I'm looking forward to what the cleanflight userbase thinks of this.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2408,2016-09-16T17:41:54Z,2016-09-16T19:43:28Z,2016-09-16T19:43:28Z,CLOSED,False,163088,20817,727,https://github.com/mixMugz,Add new LED mode.,1995,[],https://github.com/cleanflight/cleanflight/pull/2408,https://github.com/mixMugz,1,https://github.com/cleanflight/cleanflight/pull/2408,"Hi there.
If possible, please add new LED stripe mode. Calling something like ""Flight Beacon""
Mode is based by led direction.
So, lets me explain:

four location NORTH/SOUTH/WEST/EAST
color for each led location can changed in configurator (default: N: white, S: yellow, E: red, W: blue)
one numeric option from '1' to '5' (or other not more '9'), named ""BPS (blink per second)""

So. Logic for this mode (for test we have 4 led for each location with assigned mode, 1-N, 1-S, 1-E, 1-W)
Mode is looped for 4 second.

Led for NORTH and SOUTH alway ON (no blinks or something) just always on.


For first we are use BPS option and blink WEST led for one second (if BPS is equal 1 - then LED 1 sec just ON, if 2 or more - blink 2 or more time in one second), EAST led is off.
WEST and EAST led off for one second.
EAST led blink with same logic, like step 1. (WEST LED is OFF)
Same logic like step 2.
Goto 1.

So, If you liked the idea that is ready to answer your questions.","Hi there.
If possible, please add new LED stripe mode. Calling something like ""Flight Beacon""
Mode is based by led direction.
So, lets me explain:

four location NORTH/SOUTH/WEST/EAST
color for each led location can changed in configurator (default: N: white, S: yellow, E: red, W: blue)
one numeric option from '1' to '5' (or other not more '9'), named ""BPS (blink per second)""

So. Logic for this mode (for test we have 4 led for each location with assigned mode, 1-N, 1-S, 1-E, 1-W)
Mode is looped for 4 second.

Led for NORTH and SOUTH alway ON (no blinks or something) just always on.


For first we are use BPS option and blink WEST led for one second (if BPS is equal 1 - then LED 1 sec just ON, if 2 or more - blink 2 or more time in one second), EAST led is off.
WEST and EAST led off for one second.
EAST led blink with same logic, like step 1. (WEST LED is OFF)
Same logic like step 2.
Goto 1.

So, If you liked the idea that is ready to answer your questions.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2408,2016-09-16T17:41:54Z,2016-09-16T19:43:28Z,2016-09-16T19:43:28Z,CLOSED,False,163088,20817,727,https://github.com/mixMugz,Add new LED mode.,1995,[],https://github.com/cleanflight/cleanflight/pull/2408,https://github.com/SteveAmor,2,https://github.com/cleanflight/cleanflight/pull/2408#issuecomment-247689450,"Hi there.
If possible, please add new LED stripe mode. Calling something like ""Flight Beacon""
Mode is based by led direction.
So, lets me explain:

four location NORTH/SOUTH/WEST/EAST
color for each led location can changed in configurator (default: N: white, S: yellow, E: red, W: blue)
one numeric option from '1' to '5' (or other not more '9'), named ""BPS (blink per second)""

So. Logic for this mode (for test we have 4 led for each location with assigned mode, 1-N, 1-S, 1-E, 1-W)
Mode is looped for 4 second.

Led for NORTH and SOUTH alway ON (no blinks or something) just always on.


For first we are use BPS option and blink WEST led for one second (if BPS is equal 1 - then LED 1 sec just ON, if 2 or more - blink 2 or more time in one second), EAST led is off.
WEST and EAST led off for one second.
EAST led blink with same logic, like step 1. (WEST LED is OFF)
Same logic like step 2.
Goto 1.

So, If you liked the idea that is ready to answer your questions.",@mixMugz could you please close this PR and add this request as an issue.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,1,https://github.com/cleanflight/cleanflight/pull/2415,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",True,"{'THUMBS_UP': ['https://github.com/CarlosGS', 'https://github.com/abramovtv'], 'HOORAY': ['https://github.com/mhils']}"
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,2,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-248048736,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Enable with cli
serial 1 1024 115200 57600 115200 115200",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,3,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-248156182,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",👍,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,4,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-249218094,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Recommendation documentation updates:
Supported RX device

FS-iA4B  (http://www.flysky-cn.com/products_detail/productId=46.html)

Ibus support (ok.)
Ibus telemetry support (ok.)
ibus protocol 10ch
PPM protocol 8ch
Parallel PWM 4ch
size:  35.4 * 29.6 * 13 (mm)
Weight: 10g


FS-iA6B  (http://www.flysky-cn.com/products_detail/productId=51.html)

Ibus support (ok.)
Ibus telemetry support (ok.)
ibus protocol 10ch
PPM protocol 8ch
Parallel PWM 6ch
size:  47 * 26.2 * 15 (mm)
Weight: 14.9g


FS-iA10B(http://www.flysky-cn.com/products_detail/productId=52.html)

Ibus support (ok.)
Ibus telemetry support (ok.)
ibus protocol 10ch
PPM protocol 8ch
Parallel PWM 10ch
size:  51 * 34 * 15 (mm)
Weight: 17.6g


FS-iA10  (http://www.flysky-cn.com/products_detail/productId=53.html)

Ibus support  (ok.)
Ibus telemetry support (to be confirmed)
ibus protocol 10ch
PPM protocol 8ch (to be confirmed)
Parallel PWM 10ch
size:  47 * 33.1 * 14.7 (mm)
Weight: 19.3g",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,5,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-249232284,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Thanks, what about PPM support? How many channels?
Skickat från min iPhone

23 sep. 2016 kl. 17:07 skrev 寒晨 notifications@github.com:
Recommendation documentation updates:
Supported RX device
FS-iA4B
Ibus support (ok.)
Ibus telemetry support (ok.)
ibus protocol 10ch
pwm 4ch
size: 35.4 * 29.6 * 13 (cm)
Weight: 10g
FS-iA6B
Ibus support (ok.)
Ibus telemetry support (ok.)
ibus protocol 10ch
pwm 6ch
size: 47 * 26.2 * 15 (mm)
Weight: 14.9g
FS-iA10B
Ibus support (ok.)
Ibus telemetry support (ok.)
ibus protocol 10ch
pwm 10ch
size: 47 * 33.1 * 14.7 (mm)
Weight: 19.3g
FS-iA10
Ibus support (to be confirmed)
Ibus telemetry support (to be confirmed)
ibus protocol 10ch
pwm 10ch
size: 47 * 33.1 * 14.7 (mm)
Weight: 19.3g
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,6,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-249345176,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",@unitware  already updated.,True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,7,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-249868228,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@unitware  Found BUG in FS-iA4B ,  Bind may be lost . (Not recommended)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,8,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-249887481,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",@cj1324 Did you run the saleae on that rx as well? Thinking is it a bug in the rx or in the our code? Does it work the same way as the others?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,9,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-249890799,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@unitware
Official reply: They have not tested Ibus protocol compatibility. FS-iA4B recommended with a car or boat use.
Suggested: return FS-iA4B
In addition:
They are ready to release the new receiver FS-X6B
FS-X6B.pdf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,10,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-249896480,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Ok, the new rx is without ibus telemetry it seems.
Skickat från min iPhone

27 sep. 2016 kl. 17:06 skrev 寒晨 notifications@github.com:
@unitware
Official reply: They have not tested Ibus protocol compatibility. FS-iA4B recommended with a car or boat use.
Suggested: return FS-iA4B
In addition:
They are ready to release the new receiver FS-X6B
FS-X6B.pdf
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,11,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-251656134,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@hydra and other admins, Is there any chance of getting a merge before the conflicts start to build up?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,12,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253289447,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Ehm, I got my own logic analyzer today and hooked it up. It seems like I need to filter out the stuff that the FC is transmitting since it will echo back again. The packets are the same in some cases so after the first sensor discovery packet the bus will flood with them. Actually it is strange that it works as well as it does.
I'll have a look at it tonight
So do not merge just yet..
Update:
The code is now updated to handle the local echo, and also increases the task frequency so that ibus responses are given in a decent timeframe. The increase of the task frequency is done only if iBus telemetry is runtime enabled.
I also did a rebase to the current master since there were conflicts.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253333317,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",please rebase again i just pushed a few changes and merged some PR's.,True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253345577,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","IMO outboundBytesToIgnoreOnRxCount is far too fragile.
There are other possibilities:

disable RX before replying to packet (driver modification probably required)
modify singlewire (SERIAL_BIDIR) mode to handle this - listening to self makes little sense, even in other drivers(needs testing). If someone needs it (collision detection?), implement flag to enable it explicitly. I am quite surprised it does not work this way ...
discard Rx buffer after respondToIbusRequest",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,15,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253473739,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@ledvinap thanks for checking the code
I thought of your suggested alternatives but went for the current one since it felt more safe for me in the respect that it does not affect the drivers - thus not destroying any other functionality. I'm not that familiar with the full codebase to do that safely and with confidence, the current changes could be made within the safety harness of the unit tests.
If you want then please elaborate why you think the counter solution being fragile, it's always interesting to get feedback!
If you or anyone else wants to have a go at doing it differently please do so and either create a pull request towards my ibus-telemetry branch or to cleanflight if this PR has been merged. I can do some testing on it if need be.
A side note: If you do and start thinking of inter packet timeout as a synchronization then take into account that a possible improvement to this is to combine flysky serial RX with the telemetry on the same serial port, it looks like it could be done with some hardware adaption. That's probably another PR, but the gap in between packets will e much smaller, in the vicinity of 1ms.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/ledvinap,16,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253490753,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@unitware :
Worst possibility is that characters are not echoed back (driver update, different mode etc). Then part of packets would be ignored, probably leading to hard to find bugs/suboptimal performance.
Other sync problems may appear (spurious/lost chars), but checksum should handle them.
Discarding all received chars just after respondToIbusRequest should be quite clean - you don't want to reply to stale request anyway ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,17,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253495049,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@ledvinap :
I think that discarding all received chars after respondToIbusRequest is not enough, we do not know that they hav been sent at that time, they are only placed in the serial transmit buffer (or driver). In that case we need to wait for empty transmit buffer at the driver before discarding. Is this what you mean (waitForSerialPortToFinishTransmitting()), is that ok to use in the telemetry code? In that case it would be a rather easy fix.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/ledvinap,18,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253496632,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@unitware : Sorry, I overlooked the TX buffering problem ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/ledvinap,19,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253496775,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",You solution is probably only reasonable given current serial driver state ...,True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253661716,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","so, the lack of flight testing scares me!  Has anyone actually flown this code?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253662544,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",I would add the presence of some tests makes me scared much less 😄,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/inode-,22,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253745768,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Any way to add more sensors sent over the ibus telemetry? Like barometer altitude, gps fix, gps cord etc?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,23,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253750840,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@iNode certainly possible but it would not be visible in the tranceiver with the current firmware (as I am aware of). The guys tweaking the 10 channel mod might be able to add more sonsors in the GUI. I have not dug in too deep in that as the calculated cell voltage is all I need for the moment.
If I remember correctly there are 16 sensor addresses of which four are used. (internal and external voltage, motorRPM, Temperature).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,24,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253751291,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@hydra I have flown with this during the summer but not much, and since I am learning to fly I would not see any degradation in performance due to this feature. The changes during the last days has yet to fly (during the weekend I think).
Update: I did a flight test just now and it worked fine as far as I can tell.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,25,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253831439,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Very simple test: OK.
Power by usb",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,26,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253831937,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@cj1324 thanks, any chance you can do a flight test as well?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,27,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253833854,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@unitware
need some time.
maybe tomorrow.",True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,28,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253963733,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@unitware
The current branch is not stable and can not fly normally.
Backbox logging failed, SDCard did not find the log file.
Stable 1.13.0 everything is normal, but not this feature.
Board:  SPRACINGF3EVO
Rx : FS-iA10B",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,29,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-253964105,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@cj1324:  Did you do a full chip erase?  I had to due to all other changes in the master branch.

And did you test fly the current master branch as well? Meaning is it master that is in a bad state or is it the ibus telemetry that's not working (which is rebased on the master branch a few days ago)?


15 okt. 2016 kl. 07:16 skrev 寒晨 notifications@github.com:
@unitware
The current branch is not stable and can not fly normally.
Backbox logging failed, SDCard did not find the log file.
Stable 1.13.0 everything is normal, but not this feature.
Board: SPRACINGF3EVO
Rx : FS-iA10B
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/caveymon,30,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-254146236,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@hydra I've flown with the 1.13 branch of this telemetry modification throughout summer without any noticable issues. Granted, I'm a beginner, and only flying LOS (and badly at that).
I stopped using the telemetry part at some point because my PPM pin pad broke on the Naze32 after a couple of crashes, so I've had to switch to iBus for input control, thus losing a vital UART for telemetry :(",True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/hydra,31,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-254474361,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","ok, I can't merge this until I get confirmation that it flies, I don't have the hardware here to test it.
@caveymon @unitware @cj1324 can you flight test it please?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,32,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-254518019,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",This weekend to continue testing.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/hydra,33,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-255130490,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","I will merge this code now, I want to get a new release candidate ready today for people to test this weekend.  Please provide feedback on this PR once you've tested it and it was OK, if not OK please raise new issues and PR's as appropriate.",True,"{'THUMBS_UP': ['https://github.com/cj1324', 'https://github.com/caveymon'], 'HOORAY': ['https://github.com/unitware']}"
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/rootik,34,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256186550,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","It seems, it does not work with software serial.
Update: it works with SoftSerial!
Just like with SmartPort SoftSerial you need to bridge TX and RX together.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/danarrib,35,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256200669,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","I have a SP Racing F3 and a FS-i6 and FS-iA6b hardware. I'm using IBUS on UART3 (just RX pin is connected to IBUS Signal on the FS-iA6b).
How can I test this?
I have to bridge RX and TX together with IBUS pin? (only one wire from RX pin for both pins on FC?)
What I need to enable in the FC configuration?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/rootik,36,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256255626,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","danarrib, you need to connect TX pin of UART to I-Bus sensor pin of FS-iA6B, like doc says https://github.com/cleanflight/cleanflight/blob/master/docs/Telemetry.md",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/rootik,37,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256258182,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","danarrib, connect SP Racing F3 UART TX pin to iBus sensor input pin of iA6B",True,{'THUMBS_UP': ['https://github.com/danarrib']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,38,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256262720,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@rootik cool pictures, maybe do a PR with updated documentation?
Thanks for testing, remember that soft serial is not guaranteed to work with 115200 baud rate (unless I'm mistaken)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/rootik,39,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256264853,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@unitware, I have not yet had the opportunity to test it in flight, but it definitely works on bench.
My setup: SP Racing F3 Acro flight controller, iA6B RX connected to FC (UART2) via iBus serial, minimOSD connected to UART3, iBus sensor input of RX connected to SoftSerial1 of FC (TX and RX pins bind together).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/rootik,40,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256278679,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","By the way, all possible sensors types supported by FS-i6 TX are: Mot Tem ExtV Odo1 Odo2 Spe and reserved - IntV Tx.V Err
0x00 is for ""IntV"", internal voltage
0x01 is for ""Tem"", temperature
0x02 is for ""Mot"", RPM
0x03 is for ""ExtV"", external voltage
0x7C is for ""Odo1"", odometer 1
0x7D is for ""Odo2"", odometer 2
0x7E is for ""Spe"", speed
0x7F is for ""Tx.V"", TX battery voltage
0xFE is for ""Err"", RSSI rate",True,{'HOORAY': ['https://github.com/cj1324']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/danarrib,41,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256326944,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Ok @rootik . Thanks for the information.
So, there's a way that I can use only one UART port for the FS-ia6b? Like:
FS-IA6B iBus Output ---- UART3 RX
FS-IA6B iBus Input ---- UART3 TX
Can I enable ""Telemetry"" and ""Serial RX"" on same port in the ports configuration? Or it must be on separate ports?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/rootik,42,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256327475,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@danarrib, no, you can't. It must be separate ports.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/danarrib,43,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256333991,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Ok, Thanks. I'll test it on the weekend. Can someone please provide a .hex file for SP Racing F3 Deluxe?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/rootik,44,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256336894,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@danarrib, choose SPRACINGF3 board in Cleanflight Configurator tool, select Show unstable releases, select v1.14.0-RC2 and press Load firmware (online). Then follow Recovery/Lost communication  section in Firmware flashing tab.
Or alternatively you can download it from here.",True,{'THUMBS_UP': ['https://github.com/danarrib']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/rootik,45,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-256433250,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",I have set battery constraints in TX and tested alarm while discharging LiPo. It works flawlessly.,True,"{'THUMBS_UP': ['https://github.com/unitware', 'https://github.com/cj1324']}"
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/inode-,46,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-257099812,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Currently testing the ibus feature under naze32 (on softserial).
I'm getting these sensor available and working:

IntV 1
Temp 3
ExtV 2
Tx.V 1
Mot 4
Err 1

I'm seeing that ""Mot 4"" sensor sometimes it disappear then it appear again. The others are stable. I got two question for you:

do you think it's possible to get the barometer data on one of the unused sensor (for example odometer2)
it will be possible to select which telemetry transmit and which no? Using the softserial I would like to drop much data as possible.

Thank you.
inode",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/unitware,47,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-257109281,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@iNode Hi, and thanks for testing!
I have not tested ibus telemetry on softserial myself. The baudrate is high and there is a requirement to respond within a certain short time (unclear how long time that is, but within the range of a ms I think). This might cause the disappearing sensor.
To answer your questions:

its perfectly possible to implement barometer data and map it to a free sensor slot.
likewise it's possible to create a configuration selection on what sensors to send and not.

Unless you are willing to do the coding yourself, then open an issue to get some more people on the idea and discuss possible solutions, and maybe someone who is willing to implement it. I'm sorry to say that I will not find the time to do so in the coming month at least.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/inode-,48,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-257141222,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@unitware on your tests the receiver ask via the ibus only the IDs that he know or ask all the IDs from 0x00 to 0x7F? I'm asking you that to understand better the situation. I was thinking about create an addon to the received to manager the telemetry data not managed by the FS-I6 and show them on a little display.
Known id:
0x00 is for ""IntV"", internal voltage
0x01 is for ""Tem"", temperature
0x02 is for ""Mot"", RPM
0x03 is for ""ExtV"", external voltage
0x7C is for ""Odo1"", odometer 1
0x7D is for ""Odo2"", odometer 2
0x7E is for ""Spe"", speed
0x7F is for ""Tx.V"", TX battery voltage
0xFE is for ""Err"", RSSI rate",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,49,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-257149453,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","Test on FS-i6S and iA6B.
test result:
0x01 is for ""Tem"", temperature
0x02 is for ""Mot"", RPM
0x03 is for ""ExtV"", external voltage
0x7C is for ""Odo1"", odometer 1   (The screen is not visible )
0x7D is for ""Odo2"", odometer 2 (The screen is not visible)
0x7E is for ""Spe"", speed    (The screen is not visible)
0x7F is for ""Tx.V"", TX battery voltage  (good)
0xFE is for ""Err"", RSSI rate  (There are some problems)
.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/inode-,50,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-257171952,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","More tests executed, I hope tomorrow to execute a flying test. My testcase is configured with 2 softserial, the first connected to an ubox at 19200 baud, the second used for telemetry. Used CLI to configure the serial port setting (serial 31 1024 115200 57600 115200 115200).
Here the results:

GPS active, Telemetry active. CPU load 40% (telemetry is not working)
GPS active, Telemetry deactive. CPU load 20%  (telemetry is not working)
GPS deactive, Telemetry active. CPU load 65% (telemetry is working)
GPS deactive, Telemetry deactive. CPU load 15%

This so high CPU load can cause problem with on fly tests?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/McGiverGim,51,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-283020293,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@cj1324 I know this is a very old discussion, but... The ""Sig.S"" telemetry info that appears in your FS-i6S with a value of 10, what does it means? My FS-I6S has the same data, maybe some info about signal?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/cj1324,52,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-283234758,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.","@McGiverGim  Should be the signal value, did not find the official description.
Debugging values always 10. Can be programmed to modify (unstable)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2415,2016-09-19T16:43:54Z,2016-10-20T14:56:53Z,2017-03-01T06:31:00Z,MERGED,True,1065,11,32,https://github.com/unitware,FlySky Ibus telemetry support,36,"['Enhancement', 'Requires testing']",https://github.com/cleanflight/cleanflight/pull/2415,https://github.com/McGiverGim,53,https://github.com/cleanflight/cleanflight/pull/2415#issuecomment-283257014,"This is an enhanced version of @CraigJPerry pull request #1723 dealing with issue
#1125
My contributions:

Rebased to current master
Unit tests
Discards characters that were echoed back on tx creating a loop.
Documentation
Possible support for daisy chained i-bus sensors (experimental due to lack of hardware)
Configurable Vbatt/Cell-voltage to make it easier to use the tranciever voltage restriction to 10 Volts.
Build time define TELEMETRY_IBUS to include code or not

I have tested the code in my quad but not flown much with it since I have barely set up my PID:s. I'd really like someone more experienced in flying to take a test run to see if stability or other things have been affected.
Credits to @CraigJPerry et.al.
Update:
@ledvinap has given lots of good review comments which are implemented except for the frame detection.
@cj1324 has done some bench testing with different receivers, added to documentation.",@cj1324 Thanks!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2416,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248158254,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",I just force pushed this branch - the first commit had 2 files missing from it.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248159640,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","ok, done for tonight, tomorrow i will try my brushed quad in each flight mode on each PID controller.  It has an SDCard socket so I can grab some logs too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248281334,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@borisbstyle : The changes are OK for BF, but CF should not drop support silently ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248335553,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra: Do you have some notch filter settings that have NaN problem?
One possible problem is use of Direct form II. This filter structure needs higher dynamic range (signal is amplified in recursive part, then attenuated in FIR). Using Direct Form I (impossible to overflow; with double memory requirement, but delay elements can be reused if biquad sections are cascaded) of Transposed Direct form II (only two delay elements) may provide better results.
https://ccrma.stanford.edu/~jos/fp/Four_Direct_Forms.html
EDIT: Filter is Transposed Direct form II, which is reasonable choice",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248347139,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@ledvinap the NaN problem you will see if you set the gyro_soft_notch_hz < gyro_soft_notch_cutoff.
IIRC d2 goes to infinity then on the next iteration d1 becomes NaN and then d2 does too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248347673,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",@ledvinap great code review.  So glad you had time to look.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248354080,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra: Well, I won't expect filter with negative Q doing anything useful ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248370250,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@ledvinap yes, I hadn't looked at the implementation, just looked into the source of failure that occurred when i set it to a non-zero value, which happened to be lower than the cutoff frequency that i hadn't checked. 😄 I thought I had merged something wrong!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248370627,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",@ledvinap and @borisbstyle I pushed a bunch of changes.  Code untested at this time.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/martinbudden,11,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248384153,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","Why oh why do we have these mega PRs?
Git makes branching easy and cheap. Why can't we have a single atomic PR for each issue? It's just so much better on so many levels.
For example the filter changes - a branch and PR for just that. Makes reviewing easy and you can be confident that it is correct. In fact I would say practically every single commit in this PR should have been a separate PR.
A big PR like this, I have no idea what I should be focusing on when reviewing it. And there is no continuous thread of comments on a single issue, so it's difficult to have a discussion about anything.
And a big PR just before a release - that's a recipe for disaster.
I thought Cleanflight was trying to use modern software development practices.
[rant over]",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248421384,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@martinbudden I know what you're saying.  I stated that I wasn't happy with this PR.  Your thoughts are mirrored in my head.
The goal was to implement just the filter changes for the notch but in doing so I found a bunch of other changes and ended up with a sprawling mess.
There's nothing however preventing us from abandoning this PR entirely and using the work in it to create smaller PR's that can be merged.
There is however the time and balance of things.  I'm always hard pressed to find time to manage and communicate things and develop while the rest of the world races by saying 'look we created cool shit, let's go fly it - everything else sucks'.  Somewhere there's a balance.  This PR doesn't fit my goal of balance, it's too big.  However, this discussion that comes from it is excellent and yes, please please please remind me and everyone else of your thoughts all the time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248427526,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@martinbudden I will contininue to rebase this thread on top of individual commits to master, so that we are left with a smaller PR here, or none at all.  For those wishing to test the 'long term' goal however, this PR still has merit in being experimental test code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248433280,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","ok, i moved a few of the unrelated cleanup commits to master to reduce the scope of this PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/martinbudden,15,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248434428,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra , I'm not saying it's easy - running a software project is a difficult job.
I don't think you should abandon this PR. Continuing to rebase over smaller commits is a reasonable way to go forward.
However for future reference I think these large PRs should be avoided. If, when working on something, you find another issue that needs to be addressed just create a new branch and a new PR.
Branches are cheap in Git and easy to create. To give you an example, I currently have 41 Cleanflight branches in my Cleanflight fork. Some of these are old and need to be deleted, but most have useful code in them. I've also got 21 betaflight branches, probably about 5 of those need deleting.
Branch early and branch often!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248435457,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@martinbudden ok, this PR is much more focussed now.  There are essentially two main changes:

reorganize pid task code (with included test code commits)
change the filtering (with included cleanup commits)

I'm thinking about squashing all the remaining commits into one, since the tests didn't pass until they were all combined.
I should note, that I have test-flown this code without issue.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,17,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248488382,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@martinbudden yeah, you're right. I should branch more. 😄 I'm getting better.  what happens is I feel I'm close, then i do a bit more, then I feel i'm closer. then something else comes up, then i fix that too, then i feel I must be closer but then something else comes up, and so on. and before I know it it's way too big.  hence my initial reservation.  I need to abandon, stash, branch, fix the root cause and then continue.  it's hard though...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/martinbudden,18,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248525834,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra , yes we all know the feeling - ""I'll just do this little fix here...""
I would amend ""I need to abandon, stash, branch, fix the root cause and then continue."" COMMIT don't stash. (Even push, if you like). You can always squash your commits later if you think there are too many.
I know it's hard to get into the habit of doing this, but once you do you will find you are more productive. And what's more it makes everyone else more productive as well.
I remember the days of locking version control systems (eg pvcs, subversion) and branching version control systems such as git are so much more powerful and easier to use.
I repeat: branch early and branch often.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/ledvinap,19,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-248559769,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra: I use magit in emacs, it's incredibly powerful tool. It is quite easy to split large changeset into related commits or branches.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,20,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249265072,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","Any additional flight testing people can do on this, as it stands, would be very helpful.  I flew the latest code again today on a brushed quad using the Lux pid controller in horizon and acro modes.  need to test the two other pid controllers (mw23 and mwrewrite) still.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/borisbstyle,21,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249268161,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra
Why not start dropping some of the pid controllers.
It will simplify flight testing and many other things.

For example getting rid of mw23 will allow you to cleanup some things.

Also iNav from @digitalentity and me in betaflight have worked on some new
pid controller alternatives.
It would be interresting to see which one would be a good candidate to make
it as a new default cleanflight pid controller.

Also it is very much possible to combine all of the best features from all
pid controllers into a single one. I did play with that over the last past
months.

The maintability factor when having only one single pid controller will
increase significantly when testing out new things.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249270323,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","yeah, that has long been planned.  mw23 is the first one to go, the default was changed to mwrewrite a long time ago in preparation.
I am looking forwards to trying the new pidcontrollers out and going the code of them a little more, i have not had time to do so recently.
I'm of a view that if there are code size issues that compiling out the old pid controllers on some targets is probably a good solution - it will prepare people.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249443131,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@ledvinap is it my imagination or is dT not used correctly by pt1FilterApply4 - since the value of dT is only saved once in filter.dT and any future call to pt1FilterApply4() ignores the current value of dT.
This particular issue is in master, i noticed it when testing c7eaecf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,24,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249443660,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@ledvinap @borisbstyle and @martinbudden  with reference to earlier comments regarding pid initialisatiion. a minor speed improvement can be obtained by removing the lazy initialisation of the pt1 filter too.  pidInitFilters is the place to do it, but the usage of the dT argument as noted in my previous comment above needs to be answered before I can do that.  Help required to answer #2416 (comment) please.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,25,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249446242,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",I just quickly tested all 3 pid controllers in acro and horizon mode - with all the filters on. no issues found.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,26,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249447373,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","What do you guys that about the fact that this PR removes the usage of the gyro INT signal and uses a fixed rate?  I'm not convinced that is a good idea at all.
@borisbstyle can you explain a little your reasons for doing so?  @martinbudden I thought you were of the view that the system should always be synced to the gyro?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/borisbstyle,27,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249447463,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra
As mpu6500 and its variants dont support divider option anyway. Also the rest of the code is not optimised for gyro on interrupt.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,28,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249448670,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",ac5fc4b also reduces ram usage.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,29,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249448932,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@borisbstyle that being the case, there is shedloads of code that can be removed that deals with the gyro int pin.  I'm not convinced that is a good idea at all.  Would like other people's thoughts on this very important point.  @ledvinap @proggod @rs2k @martinbudden - see #2416 (comment)
@martinbudden I'm now 100% convinced that I should pull the gyro sync stuff into a different PR and defer that part of it for the future, I'm not ready to throw away a bunch of code dealing with int pin handling...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/borisbstyle,30,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249450361,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra
This is too much stuff in single PR.
But yes ...not all gyros behave consistently with gyro sync as it is. You would have to do target defined defaults what again doesn make it more consistent.
Mpu6500 still triggers 8k interrupt unregarding the configured divider and not all targets can run that. Its the scheduler what still makes it run at configured lower speeds.
Also the busy loop stuff wastes some cpu power.
Some other solution has to come with sampling based on EXTI",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/borisbstyle,31,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249450413,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra
The Dt is constant value. It is dependent of the configured loop time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,32,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249555729,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@borisbstyle Yeah, there seems to have been quite a few changes relating to dT in the past, i thought it was constant for the mw23 and mwrewrite pids controllers and variable for the luxfloat pid controller.  I guess I need to refresh my memory on that point.
oh gosh, what to do... where to start...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/borisbstyle,33,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249557488,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","Variable was causing jitter instead of removing it. It basically tries to
compensate to something without knowing the real jitter. The pid loop
jitter is not the only jitter.
What it does now is scaling of pids and filters based on loop speed ;). It
is not doing notihing in case you thought that.
2016-09-26 14:27 GMT+02:00 Dominic Clifton notifications@github.com:

@borisbstyle https://github.com/borisbstyle Yeah, there seems to have
been quite a few changes relating to dT in the past, i thought it was
constant for the mw23 and mwrewrite pids controllers and variable for the
luxfloat pid controller. I guess I need to refresh my memory on that point.
oh gosh, what to do... where to start...
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#2416 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AKQlhIp_8XFUvel1FOgvbIjg08L2Xed_ks5qt7oWgaJpZM4KAxQ_
.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,34,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249851557,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@borisbstyle yes, there are lots of sources of jitter for sure!  Do you have time to very the changes have been merged in correctly? I would really appreciate your assistance on this one.
@martinbudden After further investigation, and as I understand it, the gyro frequency changes are important in this PR and cannot really be separated from the filtering code.  The code as it stands allows the gyro to be read and filtered many times before the PID controller uses the filtered values.  And as I understand it having more data to filter works better.
ALL: Last night I did a bit of work on re-instating the gyro/sync code by re-organizing some task code, and simplifying initialization.
Key points (when using gyro synchronization):

The gyro sampling frequency is specified in hz.
The Gyro interrupts deltas are always timed and recorded.
gyro_sync_denom and mpuDividerDrops is gone.
The gyro task has a 'checkFunc' which waits for an appropriate amount of interrupts to occur and for the period to match the specified sample frequency - the high-level code simply sums all the interrupt deltas together and compares to the desired sample frequency.
The gyro task simple calls gyroUpdate() and sets a gyroReady flag indicating gyro readings have been taken and filtered.
The pid task checkFunc simply checks for the gyroReady flag and it then uses a counter for the pid_process_denom and then the counter reaches the same value the pid loop is run.

You can see some unfinished proof of concept code here to get more of the idea:
fa8b697
the branch is here:
https://github.com/cleanflight/cleanflight/compare/betaflight-merges-1-gyro-sync-2",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/ledvinap,35,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249855772,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra : Gyro is sampling at fixed,accurate rate (actually gyro clock is derived from gyro vibration). There is very little jitter in raw values.
All that is necessary is to either process all samples or downsample gyro data correctly. Code as you describe it seems reasonable...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,36,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249893688,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@ledvinap ok, i did a bit more work on it, i will merge those gyro sync changes into here now, I'm fairly happy with the location of code and the fact it's clearer what is actually going on.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,37,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249913257,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","Ok, just flight tested again on a brushed SP Racing F3 EVO Quad using the 4K/2K defaults (250/500) and it flies good.
Please can others test this code?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/martinbudden,38,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249948324,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","I haven't had a close eye on the gyro code for a while, since I am working on other things. As I understood it, betaflight changed to make the gyro update interrupt driven, then that was changed because some flight controllers (especially some cheap clones) did not have the gyro interrupt pin connected to the FC. I thought that this was a temporary change that would be addressed post betaflight 3.0, but I may be mistaken. @borisbstyle can you confirm?
@hydra , its difficult to review your code as it is part of such a big PR, but I don't thing your approach is right. You seem to be recording a time in the gyro ISR and then using this time in the taskGyroCheck (newly created function). In my bones this just feels wrong.
Here's the way I think it should work (and betaflight isn't doing this, but I assumed it was going to move in this direction). The basic principle is all gyro output should be used as input to the PID, with no values discarded. So:

gyro iterrupt service routine (ISR) should just read the gyro data and put it in a FIFO (see also note (*)). No filtering should occur at this stage (ie gyroUpdate should not filter)
Filtering is done at the time the PID uses the data - data is read out of the FIFO put through a filter and the used by the PID.

So basically the gyro triggered by an interrupt and the PID is controlled by the scheduler.
(*) Note, traditionally in a real-time OS the ISR does the minimum of work, so in this case it would queue a delayed function call (DFC) which would read the gyro data. This may or may not be the best approach for cleanflight, but whether the gyro data is read in the ISR or in a DFC is an implementation detail that can be changed independently of the rest of the gyro/PID logic.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,39,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249950384,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@martinbudden yes, the time is recorded since as boris noted the interrupt is triggered on some gyros when the INTERNAL registers are updated.  So we need to ensure that when we read the gyro we read it when the data is ACTUALLY ready.
Yes, we could move the reading of the data into the ISR, once enough interrupts have occurred, i.e. once the data is actually ready in the user-facing SPI/I2C registers.  That seems like a future optimization though, right now I'm trying to unpick what is actually /supposed/ to be happening.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,40,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249957523,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@martinbudden Oh, I should note that I'm aware that ISR's should generally do the minimal amount of work especially since I worked on some 6808 processors for controlling power to 50V solenoids in pinball machines 😄   Get that wrong and the solenoids burn!
https://www.youtube.com/watch?v=yuWjiszpLNw",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,41,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249974166,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",added a few commits to master and rebased again.  flight tested again with about 5 batteries via my little brushed quad.  seems to be working nicely.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/ledvinap,42,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249985806,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@martinbudden, @hydra :

Gyro source should be separated from PID.
the filtering code can be tied both to gyro read (size of state is constant - only filter state + last filtered sample) or PID (filtering of multiple samples can be optimized a bit / needs FIFO)
INTs ignoring MPU divider settings can be handles as gyro bug. Workaround code can be limited to ISR handler (just simple divider that is missing in gyro, call upper layer only on Nth int)
reading gyro in ISR is bad idea - bus is(I2C)/may be(SPI) shared between multiple devices. Just trigger read and process it when appropriate.
It is possible to sync to gyro update even without INT pin.

one possibility is to use FIFO, just read at quite high rate and trigger PID when enough samples are ready (code is in my 'local' branch; It did work on AFRO mini). FIFO is in slow register set, so only 1MHz SPI ...
or use dataRdy bit from status register. Using some king of PLL (sampling close before and after expected gyro update) can reduce overhead to 2 register checks (or even lower, using 'blind' read and using update samples for synchronization only) per update and get very accurate estimate of actual update timing. Gyro frequency is specified as +-1% over temperature, so PLL should work very well",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/ledvinap,43,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249986141,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","BTW: what gyro is causing too many INT activations? Is it documented? Is is silicon bug?
EDIT: internal filter (1k mode) must be selected for divider to be effective ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/borisbstyle,44,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249992546,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@ledvinap There is not a one that I know of in general.
MPU6500 / MPU9250 and most new ones ignore the divider option, so this should be done in the ISR itself as you say. That would be the solution.
There are quite some boards out there like old Afromini without INT pin. Those would need to be able to fall back to the normal (current) mode or use something different. I honestly think not much time should be spent to that. Just use scheduler for those.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/borisbstyle,45,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-249992957,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@ledvinap
Check also this one iNavFlight/inav#619",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,46,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-250347832,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@martinbudden and @ledvinap

I have updated the MPUxxxx code to handle the interrupt differences in 61e5fbd
I have removed all the old gyro sync int timing code in 387d991

I think the result is much cleaner now.  Comments?
Rebased again - In testing this on an MPU6050 on a NAZE32 Rev 6 i found that the Gyro Sync wasn't working due to the re-ordering of the BMP085/MS5611 that happened recently.  The Naze32 with BMP085 rev4 used the same pins as the MPU int pins on the rev5 onwards so I had to do some workaround commits which are now also in master.
Sorry for the emails that you're getting due to rebases...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,47,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-250430278,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",@ledvinap I synced the delays in the init code to the ones in betaflight.  I had found that the MPU was randomly not being configured correctly during a warm boot after changing settings in the CLI.  The delays fixed it.  That change should have been in a separate commit.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/borisbstyle,48,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-250432664,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","Yes delay is needed especially on fast SPI connected gyros during warm
reboots",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/ledvinap,49,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-250440072,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",@borisbstyle : All of them? Also 15ms is huge delay ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,50,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-251157298,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","I've not got much internet access right now, moving house again.  I'm still working on and testing this.
If you have time please test this code and report back.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,51,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-253000720,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","Ok, quick status update:
I was in Ibiza for 4 days and have lots of other stuff to attend to, finally today I was able to flight test this on one of my more sensitive test-rigs and an happy to report that it flies excellently.
I was using:
set gyro_sync=ON
set gyro_lpf=OFF
set pid_process_denom=2
set baro_hardware=1 // disabled
set mag_hardware=1 // disabled
gyro_notch_hz = 200
gyro_notch_cutoff_hz = 130

With LUX on default PIDs, yeah sure there was some oscillation due to too-high gains after reviewing the logs, mainly on the roll axis which is normal for this frame, but to fly it felt amazingly locked in and there were no yaw-spike issues at all.
I will do a little more cleanup and then merge to master this week.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,52,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-253002237,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1",LOG00043.TXT,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/hydra,53,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-253325964,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","merged, we can fix any remaining issues in RC phase.
@ledvinap can you create a PR to cleanup the notch filter code using the results of your investigation?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2416,2016-09-19T17:48:59Z,2016-10-12T20:14:20Z,2016-10-12T20:29:46Z,MERGED,True,1015,569,71,https://github.com/hydra,Merge some betaflight changes into CF.,73,[],https://github.com/cleanflight/cleanflight/pull/2416,https://github.com/martinbudden,54,https://github.com/cleanflight/cleanflight/pull/2416#issuecomment-253329828,"Work-in-progress.
Status:

fixes bug with mag valid readings being overwritten when MPU9250 mag has no new data.
there's an issue with the notch filter, some floating point error is occuring and the notch filter d1/d2 values end up as NaN.
compiles, arms, sensor readings look ok.
unit tests currently broken.
lots of untested changes.
WARNING: various defaults changed too (lux float, gyro settings, etc).

Update:

Flight tested LUX on a brushed version of an SPRacingF3EVO, acro and horizon tested.  No flight issues.

Update:

The issue with d1/d2 ending up as NaN is because there is no check for infinity in the biquad filter, AFAICT this occurs when the gyro_notch_hz is set lower than gyro_notch_cutoff.  This is probably a bug in betaflight too.

Update:

Unit tests updated and fixed.
Changes pushed after a code review, No flight testing has been done on the updated code.

Update:

Unrelated changed from this PR cherry-picked and merged to master.
Test flown again.

I'm not fantastically happy with the state of the PR, but since I got this far I thought I'd share it.
I started out porting the notch filter code over but in order to really use it we need to split up the tasks due to the changes with targetPidLooptime and targetGyroLooptime.
I should also note that in looking at the Betaflight codebase and this I found a whole bunch of cruft lever over from various changes in betaflight.  Outdated comments, unused extern's, unused methods - nothing major though.  If I get time I'll push some commits to a PR for betaflight but my focus is here right now.
There is a new branch with the corresponding work-in-progress configurator changes here:
https://github.com/cleanflight/cleanflight-configurator/tree/betaflight-merges-1","@hydra - finally!
Can you please, please avoid big PRs like this in future?

It's just not agile.
It's difficult to review and comment on.
It's difficult to see if your comments have been addressed or acted upon.
Knowing there is a big PR outstanding is a big disincentive to doing any work, since you know it will have to be rebased and retested.

Each individual small change should be made into a separate PR and merged into master when it is reviewed/tested. I see absolutely no advantages in making one huge PR out of lots of little PRs. Perhaps you could explain why you like to do things this way?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2417,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/etracer65,2,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248454334,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","Since I'm expecting the ""what is the optimal tree"" conversation to continue…  I'm wondering how feasible it would be to always calculate the optimal tree for the data rather than using a predefined table?  Does anybody know the read speed from SPI flash?  In a worst case we'd have to read 16MB (128mbit flash chip is the biggest I know of)  and calculate the frequencies (256 entry table).  Then generating the tree is relatively simple and not processing intensive.  If it takes a few seconds to read through the flash during the analysis stage than it's probably worth it.  Significantly longer than probably not.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248457905,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","I've done some analysis of the BB log files and there format is such that I expect there to be little to be gained by generating the optimal tree.
If you get 30% compression with an optimal tree and 29% compression with a predefined tree it's just not worth it. Even if the numbers are 30% and 25% it's still not worth it.
Anyway, once this is working the facility to generate an optimal tree can be added later. I'm not going to do any work on that myself though.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248525391,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.",Any real-word performance data?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248526196,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","Yes, I've done some cli based Huffman compression of blackbox logs and get about 30% compression.
I've just done one now:
bblog.txt 1803008 bytes, compressed 1253945 bytes, just over 30% compression.
I haven't pushed the cli stuff into github yet, but I'll try and get that done today.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248568045,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@martinbudden : Its probably easier to implement test code as separate utility...
If the coding is augmented to handle consecutive 0xff/0x00, it may be possible to drop some coding optimizations from blackbox (variable length encoding, maybe others) and get about some output bitrate.
BTW: gzip/bzip2 packs files to 78% of original ... your results are surprisingly good ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248589718,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@ledvinap , the cli Huffman code and the tree generation code is now at:
https://github.com/martinbudden/huffman/tree/tree_output",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248613090,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@martinbudden : Can you send me some BB logs?
Ratio between 0x00 and least used char is ~ 159 in .LOGs I have here
perl -ne '
  ++$c{$_} foreach split //;
  END { printf ""0x%02x : %d\n"", ord($_), $c{$_}
        foreach (sort {$c{$b} <=> $c{$a}} keys %c) }' LOG*.TXT

(stolen from http://unix.stackexchange.com/questions/5010/how-can-i-count-the-number-of-different-characters-in-a-file)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,9,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248687857,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","bblogs.zip
@ledvinap , I've attached a couple of black box logs. Note in the second one, 13 bit codes are used. It's a bit of an odd one though - the code for zero is 0 - a one-bit code. That file must be full of zeros.
The logs I am using may not be entirely representative - can you send me a couple of your logs so I have a wider data set to work with?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/etracer65,10,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248717890,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@martinbudden Here are three logs from this past weekend to add to your analysis.  Three different quads, but all running BF 3.0 and using the SPRACINGF3 target (X-Racer F303's).  Logging 1:1 at 2.67KHz with debug_mode=NOTCH.
etracer65_blackbox_logs.zip",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,11,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248729766,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@etracer65 , thanks for the logs.
I just checked the first log file - got 42% compression. Ratio of most frequent character (0x00) to least frequent character (0xFA) was 775394:298 or about 2602:1. 0x00 encoded to 11 and 0xFA encoded to 00000000000001 - a 14-bit code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248750781,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","Interesting..
Longest code length affects worst case performance, so it is desirable to limit it, at least for fixed table.
I am very surprised by Huffman coding performance.. I would expect that coding tricks in BB will remove a lot more of the entropy..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/etracer65,13,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248751824,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@martinbudden

@etracer65 , thanks for the logs.
I just checked the first log file - got 42% compression. Ratio of most frequent character (0x00) to least frequent character (0xFA) was 775394:298 or about 2602:1. 0x00 encoded to 11 and 0xFA encoded to 00000000000001 - a 14-bit code.

If you get a chance, try testing the compression on this same file using the encoding table from your code.  Since this file generates a significantly different table it would be interesting to see how much is being ""given up"" by using a standardized table vs. an optimal code table.  If it still comes in ~30% then I don't think there's any concern.  Yes, some is being left on the table but 30% is still good.  I'd be concerned if the non-optimal table significantly lowers the results.
I suspect the high logging rate and notch filter debugging is probably what's making this file different.  But it's good to see different examples.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248865520,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","Some logs I collected are here:
https://drive.google.com/file/d/0B9HM4UOKDQBLTzVfVDM0Q3EzX1k/view?usp=sharing
It's mix of logs from different users, some may be experimental/damaged",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,15,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248967995,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","All my log files together compress to 78.6% - 21% saved
Using gzip I get 76.6% and bzip2 75.8% .. there isn't much room for improvement ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-248999048,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","Hi guys.
While this is all very interesting I think it'd be better if the IO code was done before we look at this.  Right now I'd rather get to a point were it's easier for the 3 forks to share code before adding more code.
The betaflight merges are very important too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,17,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249017355,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@hydra , this PR has a while to go before it is ready to merge - it needs corresponding configurator changes for a start.
As for the new IO, I agree that is very important. I'm waiting for 1.14 to come out before I do any work on that, since it involves disruptive changes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,18,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249159233,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@ledvinap , yes your logs do compress less. They have fewer zeroes in them. I'm not sure why - perhaps the other logs collected data when the quad was stationary on the ground?
Even so, we are getting compression of 20% to 40% depending on log file, which I think is a useful saving.
@etracer65 , some figures from your logs, which I'll call b1, b2 and b3.



logfile
size
compressed size
saving
compressed with b1 Huffman table
saving




b1
2160640
1267940
41.3
1267683*
40.8


b2
2408448
1648839
31.6
1648582
31.4


b3
2336768
1565289
33.0
1567547
32.9




For b1 the second compression is done with the Huffman table from my original test file bblog.txt

So, for these log files at least, we get good compression with a common Huffman tree. I don't find this surprising because a large proportion of the compression was because of the large numbers of certain byte values, in particular: 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x50
I expect the results will not be so favourable with @ledvinap 's log files - I will investigate this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,19,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249176256,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@martinbudden : Most of my log files are recorded at around 3ms looptime. Also some of my logs include unfiltered gyro at 1kHz (using multiple fields), lot of entropy there.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,20,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249177933,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","Huffman disadvantage is that symbol frequency has to be rounded to power of two. With very high frequency of some symbols, this degrades performance considerably.
Arithmetic coding is much better in this regard and it may be feasible : https://github.com/rygorous/ryg_rans/
I'am getting results that are only slightly worse than bzip2 and much better than gzip ...
Encoding table can be quite small (32bits per symbol) and it may take reasonable number of cycles (even when assuming 12 cycle divide)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,21,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249184366,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","https://github.com/rygorous/ryg_rans/blob/master/rans_word_sse41.h, see encoder
per symbol: 1x divide, few shifts by constant and sums
output in 16bit units, so it will avoid bitstuffing from Huffman (no need for optimization/output buffer in register)
Results are great, but it may be caused by distribution based on actual data, fixed table may make it worse.
Maybe per-quad table will bring considerable improvement for low-noise quads ...
All data combined is encoded to 78% .. only slightly better than Huffman.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/hydra,22,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249289779,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.",@martinbudden ok.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/martinbudden,23,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249349468,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@ledvinap , let's not the best be the enemy of the good here. Huffman compression is working and gives useful results. There are better compression methods, but it it will take some time to implement any of them.
I am planning to add a byte to the MSP_DATAFLASH_READ message which specifies compression type (or no compression), so it will be possible to add further compression methods in future.
Indeed on faster processors it will be possible, on a message per message basis, try several compression methods and use the compression method that is best for that message.
Another simple way to improve compression would to change the format of the interframe - P frames. These are so common that P is about the 6th most common character in log files. If interframes could be delimited with a character that is already common, say, 0x01 then better compression could be achieved. I don't know enough about how the black box logs are interpreted to know if that would be possible.  (`0x00 would be even better, but from reading the code that looks like it would cause conflicts)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,24,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249359052,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@martinbudden :  From my perspective transfer compression is useful only as proof of concept.
Much more interesting is

compression of logs before storage

effectively increasing possible transfer rate (but interesting parts may be harder to compress, possibly dropping these parts)
increasing onboard flash capacity


replacing byte stuffing tricks/optimizations in encoder with entropy coder.

Not sure if this will work ... but it may greatly simplify blackbox encoding, making it easier to extend it ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/etracer65,25,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249361543,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@ledvinap Transfer compression is much more useful than simply as a proof of concept.  Spending ~30% less time downloading dataflash logs will have a meaningful impact.  Anybody who has ever tried to tune in the field will agree.
I agree with @martinbudden that this is a good first step.  It demonstrates the usefulness of compression in this case and provides a real benefit.  Initially compression was rejected because it was assumed that since the logs were binary they wouldn't be compressible.  In reality they turned out to be quite low entropy and compression has proven to be viable.
There may be opportunities to extend this to compressing the logs before being written to the log device as suggested.  From a dataflash perspective the only real gain there would be additional capacity.  Transfer speed hasn't (yet?) proven to be a constraint.  SAme for the (relatively) few boards that have SPI-connected SD card slots.  For serial openlog devices the reduction in bandwidth is most important.  In the big picture though I'm not sure how much benefit the extra 30% will help on the already quite slow serial rate.  And as stated, compression isn't always linear or predictable.  There may be high entropy periods in the log that result in the compression actually growing the data.  This would be terrible from a serial openlog perspective.  And I have to be realistic and say that serial logging is rapidly dying out.  The PID loops are just getting too fast and there's too much additional data going into the logs requiring large logging denominators - making the logs not that useful because of the low resolution data that remains.
Lastly there's the issue of processing power and whether we want to incur the additional load during the PID loop as we write data to storage.  Would likely be a real problem on F1 targets, probably on F3 - at least impacting max gyro/PID loop capabilities.  Using compression during download has none of these concerns.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,26,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249363151,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@etracer65 : Yes, I mostly agree with you points.
Openlog speed was mainly limited by SD page erase latency (and small, ~1k buffer in openlog), not serial speed. It's possible to run blackbox port at 500kbit/s (tested), HW limit is (guessing) 4.5 or 9Mbit/s
@thenickdude probably improved this on onboard SD cards by preallocating all blocks, same trick may work for openlog
Serial logging to Intel Edison is quite nice - automatic log upload over Wifi, wireless (WIFI) MSP, lot of onboard storage ..
And processing power - both Huffman and rANS may be optimized to performance comparable/better than current serial port write overhead. If blackbox coding can be simplified (variable length integer packing is quite expensive), it may result in overall gain in performance",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/digitalentity,27,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249363309,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","Interesting. If we log blackbox data without variable-length encoding
(frames of fixed size) and simply feed the byte stream into Huffman encoder
to do variable-bit+compression for us it might improve both blackbox
overhead and maximum logging time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/ledvinap,28,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249364652,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.",@digitalentity : Definitely worth a try ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/hydra,29,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249393664,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@etracer65 @ledvinap @martinbudden Transfer speed is limited by the MSP protocol.  IIRC when the EEPROM content is downloaded the configurator spends a lot of time doing nothing and so does the FC, mainly due to the MSP protocol implementation.  I think a lot of time could be saved by having the FC just stream out the EEPROM when requested rather than the way it's done now.
If you want to improve transfer speeds look there first before adding transfer compression.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/etracer65,30,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249397434,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@hydra This is already been addressed.  Improvements in the packet size and increased baud rates are showing nearly a 7x increase in transfer speed.
Pull request: betaflight/betaflight#1161
These optimizations came out of earlier discussions about using compression for blackbox downloads.
Issue: betaflight/betaflight#1156",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2417,2016-09-20T20:53:38Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,864,0,5,https://github.com/martinbudden,Use Huffman compression for blackbox data transfer,9,[],https://github.com/cleanflight/cleanflight/pull/2417,https://github.com/hydra,31,https://github.com/cleanflight/cleanflight/pull/2417#issuecomment-249449736,"This includes an implementation of Huffman using a pre-computed Huffman table.
See issue betaflight/betaflight#1156 - """"Suggestion: Use compression to speed up on-board flash blackbox transfer for discussion"" and PR betaflight/betaflight#1198
Initial implementation in Cleanflight because it has a working test harness.","@etracer65 yes i thought i saw some comments about that, thanks for the links!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2421,2016-09-22T08:17:34Z,2016-09-22T09:16:17Z,2016-09-22T19:05:18Z,MERGED,True,1,1,1,https://github.com/ledvinap,Fix invalid length of EEPROM record,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2421,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2421,"Invalid length was passed to pgLoad, overwriting PG data when record
size was increased","Invalid length was passed to pgLoad, overwriting PG data when record
size was increased",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2421,2016-09-22T08:17:34Z,2016-09-22T09:16:17Z,2016-09-22T19:05:18Z,MERGED,True,1,1,1,https://github.com/ledvinap,Fix invalid length of EEPROM record,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2421,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2421#issuecomment-248840578,"Invalid length was passed to pgLoad, overwriting PG data when record
size was increased","BTW: It would be a bit more elegant to use typeof gcc extension:
pgLoad(reg, profileIndex, rec->pg, rec->size - offsetof(typeof(rec), pg), rec->version);

It is not standard compliant, but will increase  code robustness. What do you think?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2421,2016-09-22T08:17:34Z,2016-09-22T09:16:17Z,2016-09-22T19:05:18Z,MERGED,True,1,1,1,https://github.com/ledvinap,Fix invalid length of EEPROM record,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2421,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2421#issuecomment-248998205,"Invalid length was passed to pgLoad, overwriting PG data when record
size was increased","@ledvinap great work, thanks for the fix.  I'm all for robust code, not sure we should use too many gcc extensions though.  I had a quick read up on typeof and it doesn't seem particularly portable.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2423,2016-09-24T15:51:17Z,2016-09-25T12:27:28Z,2016-09-25T12:27:28Z,MERGED,True,6,170,1,https://github.com/AustinSaintAubin,Fixed CLI Table,1,[],https://github.com/cleanflight/cleanflight/pull/2423,https://github.com/AustinSaintAubin,1,https://github.com/cleanflight/cleanflight/pull/2423,Based off commendt for cli.md is broken #2419,Based off commendt for cli.md is broken #2419,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2425,2016-09-24T23:55:50Z,2016-09-25T14:32:46Z,2016-09-25T21:55:16Z,CLOSED,False,213540,17809,753,https://github.com/MarcoPTG,iNav improve the G-tune features and PID for GPS mod. ,732,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2425,https://github.com/MarcoPTG,1,https://github.com/cleanflight/cleanflight/pull/2425,"Hi Digitalentity.
Could you create a g-tune for GPS modes to improve the PID for stability on high altitudes. I have some different oscillations at different altitudes but if we could improve the PID at high altitude we fix the issue of only be unstable at 200mts of altitude. My big trouble with iNav its only the PID's value on GPS mod. And i dont know why my RTH on fail safe doesn't work.
One more idea. You should enable a feature to RTH when the battery is entering on Alarm state. With that feature it should be a perfect firmware. comparable to the Naza.
Regards.
Marco Silva
PS. On iNav 1.2.0 i have an IC2 Error. Did you fix this issue?","Hi Digitalentity.
Could you create a g-tune for GPS modes to improve the PID for stability on high altitudes. I have some different oscillations at different altitudes but if we could improve the PID at high altitude we fix the issue of only be unstable at 200mts of altitude. My big trouble with iNav its only the PID's value on GPS mod. And i dont know why my RTH on fail safe doesn't work.
One more idea. You should enable a feature to RTH when the battery is entering on Alarm state. With that feature it should be a perfect firmware. comparable to the Naza.
Regards.
Marco Silva
PS. On iNav 1.2.0 i have an IC2 Error. Did you fix this issue?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2425,2016-09-24T23:55:50Z,2016-09-25T14:32:46Z,2016-09-25T21:55:16Z,CLOSED,False,213540,17809,753,https://github.com/MarcoPTG,iNav improve the G-tune features and PID for GPS mod. ,732,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2425,https://github.com/SteveAmor,2,https://github.com/cleanflight/cleanflight/pull/2425#issuecomment-249408190,"Hi Digitalentity.
Could you create a g-tune for GPS modes to improve the PID for stability on high altitudes. I have some different oscillations at different altitudes but if we could improve the PID at high altitude we fix the issue of only be unstable at 200mts of altitude. My big trouble with iNav its only the PID's value on GPS mod. And i dont know why my RTH on fail safe doesn't work.
One more idea. You should enable a feature to RTH when the battery is entering on Alarm state. With that feature it should be a perfect firmware. comparable to the Naza.
Regards.
Marco Silva
PS. On iNav 1.2.0 i have an IC2 Error. Did you fix this issue?","@MarcoPTG can you please close this PR. Looks like you meant to raise an issue, to request a feature, which should be done in the iNav repository, not Cleanflight. Thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2425,2016-09-24T23:55:50Z,2016-09-25T14:32:46Z,2016-09-25T21:55:16Z,CLOSED,False,213540,17809,753,https://github.com/MarcoPTG,iNav improve the G-tune features and PID for GPS mod. ,732,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2425,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2425#issuecomment-249425001,"Hi Digitalentity.
Could you create a g-tune for GPS modes to improve the PID for stability on high altitudes. I have some different oscillations at different altitudes but if we could improve the PID at high altitude we fix the issue of only be unstable at 200mts of altitude. My big trouble with iNav its only the PID's value on GPS mod. And i dont know why my RTH on fail safe doesn't work.
One more idea. You should enable a feature to RTH when the battery is entering on Alarm state. With that feature it should be a perfect firmware. comparable to the Naza.
Regards.
Marco Silva
PS. On iNav 1.2.0 i have an IC2 Error. Did you fix this issue?",this has targetted the wrong base - target inav.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2425,2016-09-24T23:55:50Z,2016-09-25T14:32:46Z,2016-09-25T21:55:16Z,CLOSED,False,213540,17809,753,https://github.com/MarcoPTG,iNav improve the G-tune features and PID for GPS mod. ,732,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2425,https://github.com/MarcoPTG,4,https://github.com/cleanflight/cleanflight/pull/2425#issuecomment-249449142,"Hi Digitalentity.
Could you create a g-tune for GPS modes to improve the PID for stability on high altitudes. I have some different oscillations at different altitudes but if we could improve the PID at high altitude we fix the issue of only be unstable at 200mts of altitude. My big trouble with iNav its only the PID's value on GPS mod. And i dont know why my RTH on fail safe doesn't work.
One more idea. You should enable a feature to RTH when the battery is entering on Alarm state. With that feature it should be a perfect firmware. comparable to the Naza.
Regards.
Marco Silva
PS. On iNav 1.2.0 i have an IC2 Error. Did you fix this issue?","Sorry but i dont know how to close the PR. I try but didn't find were. Sorry.

De: Steveis notifications@github.com
Enviado: 25 de setembro de 2016 07:51
Para: cleanflight/cleanflight
Cc: MarcoPTG; Mention
Assunto: Re: [cleanflight/cleanflight] iNav improve the G-tune features and PID for GPS mod. (#2425)
@MarcoPTGhttps://github.com/MarcoPTG can you please close this PR. Looks like you meant to raise an issue, to request a feature, which should be done in the iNav repository, not Cleanflight. Thanks.

You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHubhttps://github.com//pull/2425#issuecomment-249408190, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ASZhCRd5TbMZTuLjj101RHGniaWmt4GMks5qtif4gaJpZM4KFxue.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2427,2016-09-25T20:37:01Z,2016-09-25T20:41:50Z,2016-09-25T20:41:50Z,CLOSED,False,69,5,1,https://github.com/aftersomemath,Enable msp control pwm fallback,9,[],https://github.com/cleanflight/cleanflight/pull/2427,https://github.com/aftersomemath,1,https://github.com/cleanflight/cleanflight/pull/2427,"There is currently a 3-position switch with statuses motors disarmed, motors armed, controlled by rc, and motors armed, controlled by autopilot. This is bad because we need to arm the motors to get to the autopilot. This setup needs to be split into two switches, as follows:
Arming switch off, Autopilot switch on: Motors disarmed
Arming switch on, Autopilot switch on: Motors armed or disarmed depending on what autopilot says
Arming switch off, Autopilot switch off: Motors disarmed
Arming switch on, Autopilot switch off: Motors armed, under rc control
Also angle mode is controlled by the rc controller when autopilot is off. When autopilot is on angle mode is controlled by the autopilot.
AUX1 is armed channel.
AUX2 is the angle control channel.
AUX5 is the autopilot control channel.","There is currently a 3-position switch with statuses motors disarmed, motors armed, controlled by rc, and motors armed, controlled by autopilot. This is bad because we need to arm the motors to get to the autopilot. This setup needs to be split into two switches, as follows:
Arming switch off, Autopilot switch on: Motors disarmed
Arming switch on, Autopilot switch on: Motors armed or disarmed depending on what autopilot says
Arming switch off, Autopilot switch off: Motors disarmed
Arming switch on, Autopilot switch off: Motors armed, under rc control
Also angle mode is controlled by the rc controller when autopilot is off. When autopilot is on angle mode is controlled by the autopilot.
AUX1 is armed channel.
AUX2 is the angle control channel.
AUX5 is the autopilot control channel.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2427,2016-09-25T20:37:01Z,2016-09-25T20:41:50Z,2016-09-25T20:41:50Z,CLOSED,False,69,5,1,https://github.com/aftersomemath,Enable msp control pwm fallback,9,[],https://github.com/cleanflight/cleanflight/pull/2427,https://github.com/aftersomemath,2,https://github.com/cleanflight/cleanflight/pull/2427#issuecomment-249445383,"There is currently a 3-position switch with statuses motors disarmed, motors armed, controlled by rc, and motors armed, controlled by autopilot. This is bad because we need to arm the motors to get to the autopilot. This setup needs to be split into two switches, as follows:
Arming switch off, Autopilot switch on: Motors disarmed
Arming switch on, Autopilot switch on: Motors armed or disarmed depending on what autopilot says
Arming switch off, Autopilot switch off: Motors disarmed
Arming switch on, Autopilot switch off: Motors armed, under rc control
Also angle mode is controlled by the rc controller when autopilot is off. When autopilot is on angle mode is controlled by the autopilot.
AUX1 is armed channel.
AUX2 is the angle control channel.
AUX5 is the autopilot control channel.","Apologies, this was for a seperate fork of cleanflight for our university project.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2428,2016-09-26T05:43:26Z,2016-09-26T07:50:14Z,2016-09-26T16:42:54Z,MERGED,True,1,0,1,https://github.com/scottlykken,Add .vscode to .gitignore,1,[],https://github.com/cleanflight/cleanflight/pull/2428,https://github.com/scottlykken,1,https://github.com/cleanflight/cleanflight/pull/2428,The Visual Studio Code IDE creates .vscode subfolders when opening a folder. Adding these to .gitignore to keep things clean.,The Visual Studio Code IDE creates .vscode subfolders when opening a folder. Adding these to .gitignore to keep things clean.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2428,2016-09-26T05:43:26Z,2016-09-26T07:50:14Z,2016-09-26T16:42:54Z,MERGED,True,1,0,1,https://github.com/scottlykken,Add .vscode to .gitignore,1,[],https://github.com/cleanflight/cleanflight/pull/2428,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2428#issuecomment-249502078,The Visual Studio Code IDE creates .vscode subfolders when opening a folder. Adding these to .gitignore to keep things clean.,"Sounds reasonable, merging ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2429,2016-09-26T07:31:17Z,2016-10-12T20:30:29Z,2017-03-06T08:15:36Z,CLOSED,False,164,104,27,https://github.com/martinbudden,Split motor_and_servo.* into motors.* and servos.*,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2429,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2429,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2429,2016-09-26T07:31:17Z,2016-10-12T20:30:29Z,2017-03-06T08:15:36Z,CLOSED,False,164,104,27,https://github.com/martinbudden,Split motor_and_servo.* into motors.* and servos.*,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2429,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2429#issuecomment-249554886,,@martinbudden there is also a unit test failure.  See the travis build log.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2429,2016-09-26T07:31:17Z,2016-10-12T20:30:29Z,2017-03-06T08:15:36Z,CLOSED,False,164,104,27,https://github.com/martinbudden,Split motor_and_servo.* into motors.* and servos.*,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2429,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2429#issuecomment-249641003,,Updated as per comments.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2429,2016-09-26T07:31:17Z,2016-10-12T20:30:29Z,2017-03-06T08:15:36Z,CLOSED,False,164,104,27,https://github.com/martinbudden,Split motor_and_servo.* into motors.* and servos.*,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2429,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2429#issuecomment-253330039,,merged,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2430,2016-09-26T17:38:24Z,2016-10-18T10:54:14Z,2016-10-18T10:54:14Z,MERGED,True,30,21,18,https://github.com/martinbudden,Tidied header files and reduced dependencies,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2430,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2430,Reduced dependencies by moving some #includes out of header files into .c files.,Reduced dependencies by moving some #includes out of header files into .c files.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2430,2016-09-26T17:38:24Z,2016-10-18T10:54:14Z,2016-10-18T10:54:14Z,MERGED,True,30,21,18,https://github.com/martinbudden,Tidied header files and reduced dependencies,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2430,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2430#issuecomment-250096120,Reduced dependencies by moving some #includes out of header files into .c files.,"@hydra , can this be merged in now?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2430,2016-09-26T17:38:24Z,2016-10-18T10:54:14Z,2016-10-18T10:54:14Z,MERGED,True,30,21,18,https://github.com/martinbudden,Tidied header files and reduced dependencies,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2430,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2430#issuecomment-253329106,Reduced dependencies by moving some #includes out of header files into .c files.,@martinbudden can we keep the directory prefixes? then I'll merge it.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2430,2016-09-26T17:38:24Z,2016-10-18T10:54:14Z,2016-10-18T10:54:14Z,MERGED,True,30,21,18,https://github.com/martinbudden,Tidied header files and reduced dependencies,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2430,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2430#issuecomment-253433563,Reduced dependencies by moving some #includes out of header files into .c files.,"@hydra , the vast majority of the #includes in the drivers directory do not use the directory prefix. As I said before if we want to change that and make it consistent then there should be a single PR to do so.
Note that by doing that it will make merging in betaflight and iNav drivers more difficult.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2430,2016-09-26T17:38:24Z,2016-10-18T10:54:14Z,2016-10-18T10:54:14Z,MERGED,True,30,21,18,https://github.com/martinbudden,Tidied header files and reduced dependencies,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2430,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2430#issuecomment-253662698,Reduced dependencies by moving some #includes out of header files into .c files.,"@martinbudden ok, i will merge as is then.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2430,2016-09-26T17:38:24Z,2016-10-18T10:54:14Z,2016-10-18T10:54:14Z,MERGED,True,30,21,18,https://github.com/martinbudden,Tidied header files and reduced dependencies,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2430,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2430#issuecomment-253662841,Reduced dependencies by moving some #includes out of header files into .c files.,@martinbudden actually this needs a rebase due to the motors/servos split.  Can you update it please?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2430,2016-09-26T17:38:24Z,2016-10-18T10:54:14Z,2016-10-18T10:54:14Z,MERGED,True,30,21,18,https://github.com/martinbudden,Tidied header files and reduced dependencies,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2430,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2430#issuecomment-253718615,Reduced dependencies by moving some #includes out of header files into .c files.,Rebased,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2430,2016-09-26T17:38:24Z,2016-10-18T10:54:14Z,2016-10-18T10:54:14Z,MERGED,True,30,21,18,https://github.com/martinbudden,Tidied header files and reduced dependencies,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2430,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2430#issuecomment-254473376,Reduced dependencies by moving some #includes out of header files into .c files.,great!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2432,2016-09-27T13:42:53Z,2016-09-27T14:28:53Z,2016-09-27T14:28:53Z,CLOSED,False,2,0,1,https://github.com/skaman82,Wider baro support for the SPRACINGF3 target,1,[],https://github.com/cleanflight/cleanflight/pull/2432,https://github.com/skaman82,1,https://github.com/cleanflight/cleanflight/pull/2432,"Allows the use of external baro breakout boards like:
http://www.ebay.de/itm/BMP280-Luftdruck-Temperatur-Sensor-Modul-Nachfolger-von-BMP-085-180-I2C-SPI-/252389881101?hash=item3ac39bf50d:g:2qYAAOSwIgNXszcZ
on the SPRACINGF3 target.","Allows the use of external baro breakout boards like:
http://www.ebay.de/itm/BMP280-Luftdruck-Temperatur-Sensor-Modul-Nachfolger-von-BMP-085-180-I2C-SPI-/252389881101?hash=item3ac39bf50d:g:2qYAAOSwIgNXszcZ
on the SPRACINGF3 target.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2432,2016-09-27T13:42:53Z,2016-09-27T14:28:53Z,2016-09-27T14:28:53Z,CLOSED,False,2,0,1,https://github.com/skaman82,Wider baro support for the SPRACINGF3 target,1,[],https://github.com/cleanflight/cleanflight/pull/2432,https://github.com/skaman82,2,https://github.com/cleanflight/cleanflight/pull/2432#issuecomment-249881694,"Allows the use of external baro breakout boards like:
http://www.ebay.de/itm/BMP280-Luftdruck-Temperatur-Sensor-Modul-Nachfolger-von-BMP-085-180-I2C-SPI-/252389881101?hash=item3ac39bf50d:g:2qYAAOSwIgNXszcZ
on the SPRACINGF3 target.","will complete this it later, closing for now",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2433,2016-09-30T11:21:40Z,2016-10-12T20:25:18Z,2016-10-12T20:25:24Z,CLOSED,False,164865,20824,736,https://github.com/mixMugz,Clear onboard flash (erase blackbox),2085,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2433,https://github.com/mixMugz,1,https://github.com/cleanflight/cleanflight/pull/2433,"May be possible make stick command (or aux command) for clearing onboard flash memory for writing blackbox log from start?
Now i need each time to connect to computer for format flash.","May be possible make stick command (or aux command) for clearing onboard flash memory for writing blackbox log from start?
Now i need each time to connect to computer for format flash.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2433,2016-09-30T11:21:40Z,2016-10-12T20:25:18Z,2016-10-12T20:25:24Z,CLOSED,False,164865,20824,736,https://github.com/mixMugz,Clear onboard flash (erase blackbox),2085,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2433,https://github.com/SteveAmor,2,https://github.com/cleanflight/cleanflight/pull/2433#issuecomment-250837114,"May be possible make stick command (or aux command) for clearing onboard flash memory for writing blackbox log from start?
Now i need each time to connect to computer for format flash.",@mixMugz can you please close this PR and raise this as an issue (feature request).  Thanks.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2433,2016-09-30T11:21:40Z,2016-10-12T20:25:18Z,2016-10-12T20:25:24Z,CLOSED,False,164865,20824,736,https://github.com/mixMugz,Clear onboard flash (erase blackbox),2085,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2433,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2433#issuecomment-253328646,"May be possible make stick command (or aux command) for clearing onboard flash memory for writing blackbox log from start?
Now i need each time to connect to computer for format flash.",invalid PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2437,2016-10-02T11:18:49Z,2016-10-02T11:19:35Z,2017-02-26T02:04:14Z,CLOSED,False,1642,76,31,https://github.com/TobysF,V1.12.1,20,[],https://github.com/cleanflight/cleanflight/pull/2437,https://github.com/TobysF,1,https://github.com/cleanflight/cleanflight/pull/2437,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2440,2016-10-08T20:05:28Z,2016-10-12T20:24:47Z,2016-10-13T19:37:57Z,MERGED,True,5,0,2,https://github.com/scottlykken,Add HMC5883 compass support to RMDO target,2,[],https://github.com/cleanflight/cleanflight/pull/2440,https://github.com/scottlykken,1,https://github.com/cleanflight/cleanflight/pull/2440,Tested this on RMRC Dodo board with HolyBro M8N GPS (HMC5983L part on I2C).,Tested this on RMRC Dodo board with HolyBro M8N GPS (HMC5983L part on I2C).,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2441,2016-10-09T17:32:02Z,2016-10-12T20:24:14Z,2016-10-12T20:24:14Z,MERGED,True,1,1,1,https://github.com/Firehammer047,Update Notes.md,1,[],https://github.com/cleanflight/cleanflight/pull/2441,https://github.com/Firehammer047,1,https://github.com/cleanflight/cleanflight/pull/2441,Typo fixed,Typo fixed,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2446,2016-10-13T10:03:09Z,2016-10-18T10:09:26Z,2016-10-18T10:37:03Z,MERGED,True,25,11,1,https://github.com/digitalentity,Fix I2C bus error handling for F1 targets,1,['Critical'],https://github.com/cleanflight/cleanflight/pull/2446,https://github.com/digitalentity,1,https://github.com/cleanflight/cleanflight/pull/2446,"Fix for too aggressive error handling when a NAK (a normal bus event) was treated as a bus error and resulted in bus ""unstick"". Additionally, unstick was only clocking out 8 bits, while in most cases it should be 9 (8 bit data and ACK/NAK) and clock was followed by an empty trasnaction (START-STOP with no clock).
See iNavFlight/inav#668","Fix for too aggressive error handling when a NAK (a normal bus event) was treated as a bus error and resulted in bus ""unstick"". Additionally, unstick was only clocking out 8 bits, while in most cases it should be 9 (8 bit data and ACK/NAK) and clock was followed by an empty trasnaction (START-STOP with no clock).
See iNavFlight/inav#668",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2446,2016-10-13T10:03:09Z,2016-10-18T10:09:26Z,2016-10-18T10:37:03Z,MERGED,True,25,11,1,https://github.com/digitalentity,Fix I2C bus error handling for F1 targets,1,['Critical'],https://github.com/cleanflight/cleanflight/pull/2446,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2446#issuecomment-253904299,"Fix for too aggressive error handling when a NAK (a normal bus event) was treated as a bus error and resulted in bus ""unstick"". Additionally, unstick was only clocking out 8 bits, while in most cases it should be 9 (8 bit data and ACK/NAK) and clock was followed by an empty trasnaction (START-STOP with no clock).
See iNavFlight/inav#668","is this tried, tested and working for you @digitalentity ?
ready for merge?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2446,2016-10-13T10:03:09Z,2016-10-18T10:09:26Z,2016-10-18T10:37:03Z,MERGED,True,25,11,1,https://github.com/digitalentity,Fix I2C bus error handling for F1 targets,1,['Critical'],https://github.com/cleanflight/cleanflight/pull/2446,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2446#issuecomment-253904390,"Fix for too aggressive error handling when a NAK (a normal bus event) was treated as a bus error and resulted in bus ""unstick"". Additionally, unstick was only clocking out 8 bits, while in most cases it should be 9 (8 bit data and ACK/NAK) and clock was followed by an empty trasnaction (START-STOP with no clock).
See iNavFlight/inav#668",p.s. thanks for the timely PR too 😄,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2446,2016-10-13T10:03:09Z,2016-10-18T10:09:26Z,2016-10-18T10:37:03Z,MERGED,True,25,11,1,https://github.com/digitalentity,Fix I2C bus error handling for F1 targets,1,['Critical'],https://github.com/cleanflight/cleanflight/pull/2446,https://github.com/digitalentity,4,https://github.com/cleanflight/cleanflight/pull/2446#issuecomment-254396915,"Fix for too aggressive error handling when a NAK (a normal bus event) was treated as a bus error and resulted in bus ""unstick"". Additionally, unstick was only clocking out 8 bits, while in most cases it should be 9 (8 bit data and ACK/NAK) and clock was followed by an empty trasnaction (START-STOP with no clock).
See iNavFlight/inav#668","@hydra this is bench tested, no ill effects. Should be safe to merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2446,2016-10-13T10:03:09Z,2016-10-18T10:09:26Z,2016-10-18T10:37:03Z,MERGED,True,25,11,1,https://github.com/digitalentity,Fix I2C bus error handling for F1 targets,1,['Critical'],https://github.com/cleanflight/cleanflight/pull/2446,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2446#issuecomment-254470319,"Fix for too aggressive error handling when a NAK (a normal bus event) was treated as a bus error and resulted in bus ""unstick"". Additionally, unstick was only clocking out 8 bits, while in most cases it should be 9 (8 bit data and ACK/NAK) and clock was followed by an empty trasnaction (START-STOP with no clock).
See iNavFlight/inav#668","tested it on on a naze32 full, no issues with I2C detection here either, merged.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2447,2016-10-14T07:58:55Z,2016-11-03T10:09:14Z,2016-11-03T10:09:14Z,CLOSED,False,52,30,6,https://github.com/andre92,"import Acc Biquad filter from Betaflight (not tested, do not merge)",9,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/2447,https://github.com/andre92,1,https://github.com/cleanflight/cleanflight/pull/2447,"It compiles, but I haven't had the chance to verify it's working. My FC is at home and I'm not...
Could someone please add Don't merge Label? It seems I can't","It compiles, but I haven't had the chance to verify it's working. My FC is at home and I'm not...
Could someone please add Don't merge Label? It seems I can't",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2447,2016-10-14T07:58:55Z,2016-11-03T10:09:14Z,2016-11-03T10:09:14Z,CLOSED,False,52,30,6,https://github.com/andre92,"import Acc Biquad filter from Betaflight (not tested, do not merge)",9,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/2447,https://github.com/andre92,2,https://github.com/cleanflight/cleanflight/pull/2447#issuecomment-253784641,"It compiles, but I haven't had the chance to verify it's working. My FC is at home and I'm not...
Could someone please add Don't merge Label? It seems I can't","@ledvinap I updated my PR: entirely removed switch, removed float cast and moved externs to the header
I'm bad with git btw",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2447,2016-10-14T07:58:55Z,2016-11-03T10:09:14Z,2016-11-03T10:09:14Z,CLOSED,False,52,30,6,https://github.com/andre92,"import Acc Biquad filter from Betaflight (not tested, do not merge)",9,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/2447,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2447#issuecomment-254473105,"It compiles, but I haven't had the chance to verify it's working. My FC is at home and I'm not...
Could someone please add Don't merge Label? It seems I can't","@andre92 you are free to continue on working on this, the changes I was doing have been merged to master.
@ledvinap I was not working on the acc filtering code, only the gyro code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2448,2016-10-14T09:07:47Z,2016-10-18T10:47:35Z,2016-10-18T10:57:21Z,MERGED,True,60,54,18,https://github.com/martinbudden,Improved const correctness of streambuf and serial,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2448,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2448,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2448,2016-10-14T09:07:47Z,2016-10-18T10:47:35Z,2016-10-18T10:57:21Z,MERGED,True,60,54,18,https://github.com/martinbudden,Improved const correctness of streambuf and serial,3,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2448,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2448#issuecomment-254472492,,"merged, this didn't apply cleanly due to the uint8/32 change i made last night.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2449,2016-10-14T09:18:22Z,2016-10-18T10:38:59Z,2016-10-18T10:58:22Z,MERGED,True,9,10,4,https://github.com/martinbudden,Tidied gyro initialisation,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2449,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2449,,,True,{'THUMBS_UP': ['https://github.com/ledvinap']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2450,2016-10-14T18:34:16Z,2016-10-18T10:37:38Z,2016-10-18T10:58:47Z,MERGED,True,19,24,11,https://github.com/martinbudden,Made rx ReadRawRC functions const correct,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2450,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2450,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2450,2016-10-14T18:34:16Z,2016-10-18T10:37:38Z,2016-10-18T10:58:47Z,MERGED,True,19,24,11,https://github.com/martinbudden,Made rx ReadRawRC functions const correct,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2450,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2450#issuecomment-254470437,,great martin,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2452,2016-10-15T15:30:41Z,2016-10-15T15:32:36Z,2016-10-16T08:51:55Z,CLOSED,False,218263,19949,819,https://github.com/stronnag,Pwm cli doc,860,[],https://github.com/cleanflight/cleanflight/pull/2452,https://github.com/stronnag,1,https://github.com/cleanflight/cleanflight/pull/2452,updated Cli.md for new PWM settings.,updated Cli.md for new PWM settings.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2452,2016-10-15T15:30:41Z,2016-10-15T15:32:36Z,2016-10-16T08:51:55Z,CLOSED,False,218263,19949,819,https://github.com/stronnag,Pwm cli doc,860,[],https://github.com/cleanflight/cleanflight/pull/2452,https://github.com/stronnag,2,https://github.com/cleanflight/cleanflight/pull/2452#issuecomment-253991242,updated Cli.md for new PWM settings.,Wrong repo. I hate git,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2456,2016-10-18T13:27:04Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,67,51,12,https://github.com/martinbudden,Increase MSP and serial separation,2,[],https://github.com/cleanflight/cleanflight/pull/2456,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2456,"Increases separation between MSP and serial code by avoiding hardcoded mspProcessCommand in msp_serial.c. Instead a function pointer is passed into mspSerialInit.
Only done for the MSP_SERVER side, but a similar thing could be done for the MSP_CLIENT.
@hydra - what do you think?","Increases separation between MSP and serial code by avoiding hardcoded mspProcessCommand in msp_serial.c. Instead a function pointer is passed into mspSerialInit.
Only done for the MSP_SERVER side, but a similar thing could be done for the MSP_CLIENT.
@hydra - what do you think?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2456,2016-10-18T13:27:04Z,2017-02-25T16:55:37Z,2017-02-25T16:55:37Z,CLOSED,False,67,51,12,https://github.com/martinbudden,Increase MSP and serial separation,2,[],https://github.com/cleanflight/cleanflight/pull/2456,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2456#issuecomment-254623478,"Increases separation between MSP and serial code by avoiding hardcoded mspProcessCommand in msp_serial.c. Instead a function pointer is passed into mspSerialInit.
Only done for the MSP_SERVER side, but a similar thing could be done for the MSP_CLIENT.
@hydra - what do you think?","Is this really usefull? There is always only one possible handler for packets received over MSP and linker can easily resolve correct function for FC/OSD case (with error checking). Using indirection will only complicate things ...
But I may be missing something ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2459,2016-10-18T20:27:06Z,2016-10-19T18:00:09Z,2017-03-06T08:20:07Z,MERGED,True,167,179,23,https://github.com/martinbudden,Rationalised rx interface so serial/pwm/ppm/msp have same interface,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2459,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2459,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2459,2016-10-18T20:27:06Z,2016-10-19T18:00:09Z,2017-03-06T08:20:07Z,MERGED,True,167,179,23,https://github.com/martinbudden,Rationalised rx interface so serial/pwm/ppm/msp have same interface,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2459,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2459#issuecomment-254891923,,lovely. merging.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2460,2016-10-19T12:01:39Z,2016-10-19T17:56:58Z,2016-10-19T18:17:04Z,MERGED,True,91,2,4,https://github.com/ledvinap,Fix NVIC_PRIORITY_SUB to return correct bits,2,[],https://github.com/cleanflight/cleanflight/pull/2460,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2460,"Fixes #2457
@asbird found this bug, thanks.","Fixes #2457
@asbird found this bug, thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2460,2016-10-19T12:01:39Z,2016-10-19T17:56:58Z,2016-10-19T18:17:04Z,MERGED,True,91,2,4,https://github.com/ledvinap,Fix NVIC_PRIORITY_SUB to return correct bits,2,[],https://github.com/cleanflight/cleanflight/pull/2460,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2460#issuecomment-254793047,"Fixes #2457
@asbird found this bug, thanks.","Can someone test this change? It should have minimal effect, but it will change priorities. softserial performance may be slightly improved ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2460,2016-10-19T12:01:39Z,2016-10-19T17:56:58Z,2016-10-19T18:17:04Z,MERGED,True,91,2,4,https://github.com/ledvinap,Fix NVIC_PRIORITY_SUB to return correct bits,2,[],https://github.com/cleanflight/cleanflight/pull/2460,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2460#issuecomment-254890972,"Fixes #2457
@asbird found this bug, thanks.","let's just merge this now, we can change any priorities as desired later.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2460,2016-10-19T12:01:39Z,2016-10-19T17:56:58Z,2016-10-19T18:17:04Z,MERGED,True,91,2,4,https://github.com/ledvinap,Fix NVIC_PRIORITY_SUB to return correct bits,2,[],https://github.com/cleanflight/cleanflight/pull/2460,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2460#issuecomment-254896822,"Fixes #2457
@asbird found this bug, thanks.",@hydra: There is (extremely small) chance that changing priorities in group will trigger some problem (all subpriorities were 0 before this PR),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2465,2016-10-25T18:42:03Z,2016-10-31T18:26:55Z,2016-10-31T18:27:29Z,CLOSED,False,296,317,4,https://github.com/javiavi,Night hawk32 new pid functions,8,[],https://github.com/cleanflight/cleanflight/pull/2465,https://github.com/javiavi,1,https://github.com/cleanflight/cleanflight/pull/2465,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2465,2016-10-25T18:42:03Z,2016-10-31T18:26:55Z,2016-10-31T18:27:29Z,CLOSED,False,296,317,4,https://github.com/javiavi,Night hawk32 new pid functions,8,[],https://github.com/cleanflight/cleanflight/pull/2465,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2465#issuecomment-257062997,,can you rebase this please?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2465,2016-10-25T18:42:03Z,2016-10-31T18:26:55Z,2016-10-31T18:27:29Z,CLOSED,False,296,317,4,https://github.com/javiavi,Night hawk32 new pid functions,8,[],https://github.com/cleanflight/cleanflight/pull/2465,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2465#issuecomment-257147676,,@javiavi update?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2465,2016-10-25T18:42:03Z,2016-10-31T18:26:55Z,2016-10-31T18:27:29Z,CLOSED,False,296,317,4,https://github.com/javiavi,Night hawk32 new pid functions,8,[],https://github.com/cleanflight/cleanflight/pull/2465,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2465#issuecomment-257378260,,"this is an invalid PR, already merged a while ago.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2470,2016-10-28T17:22:48Z,2016-10-29T01:35:03Z,2016-10-29T01:35:14Z,CLOSED,False,503432,25427,1241,https://github.com/Bobbaone,Standard Starting Mode,2660,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2470,https://github.com/Bobbaone,1,https://github.com/cleanflight/cleanflight/pull/2470,"Hello,
it will be very nice, if you could implement that you can programm a starting mode like ""Angle"".
If you Switch to another, the other modes are available. For absolute beginners is the Standard mode very difficult.
Thanks.","Hello,
it will be very nice, if you could implement that you can programm a starting mode like ""Angle"".
If you Switch to another, the other modes are available. For absolute beginners is the Standard mode very difficult.
Thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2470,2016-10-28T17:22:48Z,2016-10-29T01:35:03Z,2016-10-29T01:35:14Z,CLOSED,False,503432,25427,1241,https://github.com/Bobbaone,Standard Starting Mode,2660,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2470,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2470#issuecomment-257063036,"Hello,
it will be very nice, if you could implement that you can programm a starting mode like ""Angle"".
If you Switch to another, the other modes are available. For absolute beginners is the Standard mode very difficult.
Thanks.",invalid PR,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2475,2016-11-01T01:10:32Z,2016-11-01T22:33:58Z,2016-11-04T02:32:52Z,CLOSED,False,44,4,3,None,Adding Spektrum simulated RSSI,4,[],https://github.com/cleanflight/cleanflight/pull/2475,None,1,https://github.com/cleanflight/cleanflight/pull/2475,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2477,2016-11-03T10:41:51Z,2016-11-19T18:43:03Z,2016-11-19T18:44:04Z,CLOSED,False,18,11,1,https://github.com/andre92,Update Acc filtering to same rate as task_accel,1,[],https://github.com/cleanflight/cleanflight/pull/2477,https://github.com/andre92,1,https://github.com/cleanflight/cleanflight/pull/2477,"edit: superseded by #2505, closing
This PR runs Acc filter at same rate as sampling, using all acc samples for lowpass filter instead of 1/10.
I feel this is necessary since using 100 samples per second is rather slow, might give problems with althold like with 1.12.0
edit: builds failing, I'm guessing it uses a few bytes of memory too much. I could build it for F3 but not F1 targets, maybe related to #2478","edit: superseded by #2505, closing
This PR runs Acc filter at same rate as sampling, using all acc samples for lowpass filter instead of 1/10.
I feel this is necessary since using 100 samples per second is rather slow, might give problems with althold like with 1.12.0
edit: builds failing, I'm guessing it uses a few bytes of memory too much. I could build it for F3 but not F1 targets, maybe related to #2478",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2486,2016-11-07T21:17:15Z,2017-02-05T12:37:05Z,2017-02-05T17:07:35Z,MERGED,True,273,0,2,https://github.com/unitware,added unit tests for ibus serial rx,1,[],https://github.com/cleanflight/cleanflight/pull/2486,https://github.com/unitware,1,https://github.com/cleanflight/cleanflight/pull/2486,"Comments and questions:


I'd expect that runtime configuration was not initialized unless there was a serial port to run but the implementation states otherwise (ibus.c:62)


ibusInit: is it ok to have undefined channel values after init? (ibus.h:75)


ibusFrameStatus should return rxFrameState_t not uint8_t","Comments and questions:


I'd expect that runtime configuration was not initialized unless there was a serial port to run but the implementation states otherwise (ibus.c:62)


ibusInit: is it ok to have undefined channel values after init? (ibus.h:75)


ibusFrameStatus should return rxFrameState_t not uint8_t",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2486,2016-11-07T21:17:15Z,2017-02-05T12:37:05Z,2017-02-05T17:07:35Z,MERGED,True,273,0,2,https://github.com/unitware,added unit tests for ibus serial rx,1,[],https://github.com/cleanflight/cleanflight/pull/2486,https://github.com/unitware,2,https://github.com/cleanflight/cleanflight/pull/2486#issuecomment-268659141,"Comments and questions:


I'd expect that runtime configuration was not initialized unless there was a serial port to run but the implementation states otherwise (ibus.c:62)


ibusInit: is it ok to have undefined channel values after init? (ibus.h:75)


ibusFrameStatus should return rxFrameState_t not uint8_t",rebased today,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2486,2016-11-07T21:17:15Z,2017-02-05T12:37:05Z,2017-02-05T17:07:35Z,MERGED,True,273,0,2,https://github.com/unitware,added unit tests for ibus serial rx,1,[],https://github.com/cleanflight/cleanflight/pull/2486,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2486#issuecomment-275940899,"Comments and questions:


I'd expect that runtime configuration was not initialized unless there was a serial port to run but the implementation states otherwise (ibus.c:62)


ibusInit: is it ok to have undefined channel values after init? (ibus.h:75)


ibusFrameStatus should return rxFrameState_t not uint8_t","thanks for the rebase.  I'll have a look at this when I next get time to do some work on CF, I've been very busy with a new job recently and haven't had much time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2487,2016-11-08T08:00:42Z,2017-02-05T12:24:55Z,2017-02-26T14:09:57Z,MERGED,True,22,1,3,https://github.com/unitware,Lcov coverage report,2,[],https://github.com/cleanflight/cleanflight/pull/2487,https://github.com/unitware,1,https://github.com/cleanflight/cleanflight/pull/2487,"Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)","Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2487,2016-11-08T08:00:42Z,2017-02-05T12:24:55Z,2017-02-26T14:09:57Z,MERGED,True,22,1,3,https://github.com/unitware,Lcov coverage report,2,[],https://github.com/cleanflight/cleanflight/pull/2487,https://github.com/unitware,2,https://github.com/cleanflight/cleanflight/pull/2487#issuecomment-259071799,"Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)","Example output from the build if lcov is installed:
Summary coverage rate:
  lines......: 46.5% (2333 of 5012 lines)
  functions..: 52.8% (295 of 559 functions)
  branches...: no data found
lcov --list coverage.info
Reading tracefile coverage.info
                                   |Lines       |Functions  |Branches    
Filename                           |Rate     Num|Rate    Num|Rate     Num
=========================================================================
[/home/magnus/unitware/work/cleanflight/src/main/]
common/encoding.c                  | 100%      5| 100%     2|    -      0
common/filter.c                    |60.7%     56|50.0%     8|    -      0
common/maths.c                     |58.7%    138|52.4%    21|    -      0
common/pilot.h                     | 0.0%      1| 0.0%     1|    -      0
common/printf.c                    |49.4%     83|44.4%     9|    -      0
common/streambuf.c                 |70.8%     48|71.4%    14|    -      0
common/typeconversion.c            |49.0%    145|70.0%    10|    -      0
common/utils.h                     | 0.0%      2| 0.0%     2|    -      0
config/config_eeprom.c             |93.1%    101|87.5%     8|    -      0
config/config_streamer.c           |88.4%     43|85.7%     7|    -      0
config/config_system.h             | 100%      1| 100%     1|    -      0
config/feature.c                   |61.1%     18|57.1%     7|    -      0
config/feature.h                   | 100%      1| 100%     1|    -      0
config/parameter_group.c           |72.0%     50|66.7%     9|    -      0
config/parameter_group.h           | 100%      4| 100%     4|    -      0
config/profile.c                   |85.7%      7| 100%     2|    -      0
config/profile.h                   | 100%      1| 100%     1|    -      0
drivers/barometer_bmp085.c         |36.0%    100|27.3%    11|    -      0
drivers/barometer_bmp280.c         |49.2%     59|37.5%     8|    -      0
drivers/barometer_ms5611.c         |49.4%     83|20.0%    10|    -      0
drivers/buf_writer.c               | 0.0%     17| 0.0%     3|    -      0
drivers/light_ws2811strip.c        |12.0%     50| 9.1%    11|    -      0
drivers/pwm_rx.h                   | 100%      1| 100%     1|    -      0
drivers/sonar_hcsr04.c             |50.0%     18|50.0%     4|    -      0
fc/config.c                        |75.5%     94|70.0%    10|    -      0
fc/msp_server_fc.c                 |46.1%    723|58.3%    12|    -      0
fc/rate_profile.h                  | 100%      2| 100%     2|    -      0
fc/rc_adjustments.c                |58.8%    160|66.7%     9|    -      0
fc/rc_adjustments.h                | 100%      1| 100%     1|    -      0
fc/rc_controls.c                   |17.4%    138|45.5%    11|    -      0
fc/rc_controls.h                   | 100%      3| 100%     3|    -      0
flight/altitudehold.c              |23.8%    101|44.4%     9|    -      0
flight/altitudehold.h              | 0.0%      1| 0.0%     1|    -      0
flight/failsafe.c                  |87.6%    137|87.5%    16|    -      0
flight/failsafe.h                  | 100%      1| 100%     1|    -      0
flight/gps_conversion.c            |95.5%     22| 100%     1|    -      0
flight/imu.c                       |14.6%    205| 9.5%    21|    -      0
flight/imu.h                       | 100%      2| 100%     2|    -      0
flight/mixer.c                     |33.8%    130|50.0%    10|    -      0
flight/mixer.h                     | 100%      3| 100%     4|    -      0
flight/pid.c                       |41.7%     60|85.7%     7|    -      0
flight/pid.h                       | 100%      1| 100%     1|    -      0
flight/pid_luxfloat.c              |67.9%     56| 100%     2|    -      0
flight/pid_mw23.c                  | 6.7%     60|50.0%     2|    -      0
flight/pid_mwrewrite.c             |72.2%     54| 100%     2|    -      0
flight/servos.c                    |61.2%    188|62.5%    16|    -      0
flight/servos.h                    | 100%      2| 100%     3|    -      0
io/gimbal.h                        | 0.0%      1| 0.0%     1|    -      0
io/gps.h                           | 100%      1| 100%     1|    -      0
io/ledstrip.c                      |24.6%    431|21.9%    32|    -      0
io/ledstrip.h                      |85.7%     14|87.5%    16|    -      0
io/motors.h                        | 100%      1| 100%     1|    -      0
io/serial.c                        |10.4%    192|13.6%    22|    -      0
io/serial.h                        | 100%      1| 100%     1|    -      0
io/transponder_ir.h                | 100%      1| 100%     1|    -      0
msp/msp.c                          | 100%      5| 100%     1|    -      0
msp/msp_serial.c                   |59.3%    135|54.5%    11|    -      0
msp/msp_server.h                   | 100%      1| 100%     1|    -      0
osd/osd_element.c                  |81.7%     60|82.4%    17|    -      0
osd/osd_element_render.c           |74.6%     71|72.7%    11|    -      0
osd/osd_screen.c                   |73.0%     63|80.0%    10|    -      0
rx/rx.c                            |18.1%    199|20.7%    29|    -      0
rx/rx.h                            |33.3%      3|33.3%     3|    -      0
scheduler/scheduler.c              |78.9%    123|78.6%    14|    -      0
sensors/acceleration.h             | 100%      1| 100%     1|    -      0
sensors/amperage.h                 | 100%      1| 100%     1|    -      0
sensors/barometer.h                | 0.0%      1| 0.0%     1|    -      0
sensors/battery.c                  |74.1%     54|50.0%     6|    -      0
sensors/battery.h                  | 100%      1| 100%     1|    -      0
sensors/boardalignment.c           |66.1%     56|25.0%     4|    -      0
sensors/boardalignment.h           | 100%      1| 100%     1|    -      0
sensors/compass.h                  | 100%      1| 100%     1|    -      0
sensors/gyro.h                     | 100%      1| 100%     1|    -      0
sensors/sensors.h                  | 100%      3| 100%     3|    -      0
sensors/sonar.c                    |44.7%     38|42.9%     7|    -      0
sensors/voltage.c                  | 4.7%     43|12.5%     8|    -      0
sensors/voltage.h                  | 100%      1| 100%     1|    -      0
telemetry/frsky.h                  | 100%      1| 100%     1|    -      0
telemetry/hott.c                   |16.8%    220| 7.1%    28|    -      0
telemetry/hott.h                   | 0.0%      1| 0.0%     1|    -      0
telemetry/ibus.c                   |92.6%    108|94.4%    18|    -      0
telemetry/ibus.h                   | 100%      1| 100%     1|    -      0
telemetry/telemetry.h              | 100%      1| 100%     1|    -      0
=========================================================================
                             Total:|46.5%   5012|52.8%   559|    -      0

Note that only files that are touched by unittests are measured",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2487,2016-11-08T08:00:42Z,2017-02-05T12:24:55Z,2017-02-26T14:09:57Z,MERGED,True,22,1,3,https://github.com/unitware,Lcov coverage report,2,[],https://github.com/cleanflight/cleanflight/pull/2487,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2487#issuecomment-266310985,"Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)","great thanks for this, I'll get this merged asap.",True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2487,2016-11-08T08:00:42Z,2017-02-05T12:24:55Z,2017-02-26T14:09:57Z,MERGED,True,22,1,3,https://github.com/unitware,Lcov coverage report,2,[],https://github.com/cleanflight/cleanflight/pull/2487,https://github.com/unitware,4,https://github.com/cleanflight/cleanflight/pull/2487#issuecomment-268659050,"Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)",rebased today,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2487,2016-11-08T08:00:42Z,2017-02-05T12:24:55Z,2017-02-26T14:09:57Z,MERGED,True,22,1,3,https://github.com/unitware,Lcov coverage report,2,[],https://github.com/cleanflight/cleanflight/pull/2487,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2487#issuecomment-277516560,"Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)",@unitware ok i added enabled coveralls for the cleanflight repo - please keep an eye on the coveralls output and let me know if it's not working right.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2487,2016-11-08T08:00:42Z,2017-02-05T12:24:55Z,2017-02-26T14:09:57Z,MERGED,True,22,1,3,https://github.com/unitware,Lcov coverage report,2,[],https://github.com/cleanflight/cleanflight/pull/2487,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2487#issuecomment-277517594,"Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)","it seems to be working:
https://coveralls.io/github/cleanflight/cleanflight",True,{'HOORAY': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2487,2016-11-08T08:00:42Z,2017-02-05T12:24:55Z,2017-02-26T14:09:57Z,MERGED,True,22,1,3,https://github.com/unitware,Lcov coverage report,2,[],https://github.com/cleanflight/cleanflight/pull/2487,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2487#issuecomment-282527821,"Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)",@unitware can you please create a new PR to add coveralls for the new master branch which is now based on the betaflight v3.1 codebase.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2487,2016-11-08T08:00:42Z,2017-02-05T12:24:55Z,2017-02-26T14:09:57Z,MERGED,True,22,1,3,https://github.com/unitware,Lcov coverage report,2,[],https://github.com/cleanflight/cleanflight/pull/2487,https://github.com/unitware,8,https://github.com/cleanflight/cleanflight/pull/2487#issuecomment-282558390,"Merged some stuff from https://github.com/mkschreder/ninjaflight after reading the issue #2476
This pull request adds coverage reports as a list in the build output if lcov tool is installed
It also publishes data to the server at https://coveralls.io which is free for open source projects.
(Example page from my account: https://coveralls.io/jobs/19911189)
Credits are due to @mkschreder
Stuff to do by the maintainer when merging:

Create account at coveralls.io and enable the cleanflight repository (it takes like five seconds)
Update the link for the status gadget in the end of README.md (https://github.com/unitware/cleanflight/blob/lcov-coverage-report/README.md)",@hydra see: betaflight/betaflight#2497,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2489,2016-11-10T15:15:19Z,2016-12-06T20:43:25Z,2016-12-06T20:43:35Z,CLOSED,False,6,6,2,https://github.com/xuyuan,bugfix: blackbox baudrate configuration,3,[],https://github.com/cleanflight/cleanflight/pull/2489,https://github.com/xuyuan,1,https://github.com/cleanflight/cleanflight/pull/2489,The order of baudrate enum has to be same as cleanflight-configuator,The order of baudrate enum has to be same as cleanflight-configuator,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2489,2016-11-10T15:15:19Z,2016-12-06T20:43:25Z,2016-12-06T20:43:35Z,CLOSED,False,6,6,2,https://github.com/xuyuan,bugfix: blackbox baudrate configuration,3,[],https://github.com/cleanflight/cleanflight/pull/2489,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2489#issuecomment-265265677,The order of baudrate enum has to be same as cleanflight-configuator,"good catch, thanks for the PR!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2489,2016-11-10T15:15:19Z,2016-12-06T20:43:25Z,2016-12-06T20:43:35Z,CLOSED,False,6,6,2,https://github.com/xuyuan,bugfix: blackbox baudrate configuration,3,[],https://github.com/cleanflight/cleanflight/pull/2489,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2489#issuecomment-265266330,The order of baudrate enum has to be same as cleanflight-configuator,merged to master and v1.14.2,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2497,2016-11-14T22:07:47Z,2016-11-17T18:43:01Z,2016-11-17T18:43:01Z,CLOSED,False,218897,19949,827,https://github.com/RBirdie001,Buzzer and current sensor not working on NAZE AfroMini boards,877,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2497,https://github.com/RBirdie001,1,https://github.com/cleanflight/cleanflight/pull/2497,"I use AfroMini 32 NAZE boards on my multicopters Rev.3 (with external I2C magnetometer) (http://www.abusemark.com/downloads/afromini_rev3.pdf) and these boards work fine with NAZE builds except the BEEPER and Current sensor.
Reason is that Rev. 3 use NPN transistor for driving buzzer so need to output high level for beeping and not sink output to ground as other NAZE boards.
One possible solution already is prepared here: #1482 (comment) but it was never merged.
Another solution would be to make another separate target board with modified definitions.
...
All versions of AfroMini also use A5 pin for current sensor ADC input so current sensor doesn't work with standard NAZE builds. Also this would be easy to correct with creating new AfroMini target board.
I'm not able of modify code myself. Can please someone help me with this issue?
Thanks!
Roman","I use AfroMini 32 NAZE boards on my multicopters Rev.3 (with external I2C magnetometer) (http://www.abusemark.com/downloads/afromini_rev3.pdf) and these boards work fine with NAZE builds except the BEEPER and Current sensor.
Reason is that Rev. 3 use NPN transistor for driving buzzer so need to output high level for beeping and not sink output to ground as other NAZE boards.
One possible solution already is prepared here: #1482 (comment) but it was never merged.
Another solution would be to make another separate target board with modified definitions.
...
All versions of AfroMini also use A5 pin for current sensor ADC input so current sensor doesn't work with standard NAZE builds. Also this would be easy to correct with creating new AfroMini target board.
I'm not able of modify code myself. Can please someone help me with this issue?
Thanks!
Roman",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2498,2016-11-14T23:48:44Z,2016-11-14T23:50:14Z,2016-11-14T23:50:14Z,CLOSED,False,509420,25780,1290,https://github.com/JasonB91,DShot with BrainFPV RE1,2997,[],https://github.com/cleanflight/cleanflight/pull/2498,https://github.com/JasonB91,1,https://github.com/cleanflight/cleanflight/pull/2498,"Is it possible for someone to check into implimenting DShot with the BrainFPV RE1?
https://www.rcgroups.com/forums/showpost.php?p=36152670&postcount=187","Is it possible for someone to check into implimenting DShot with the BrainFPV RE1?
https://www.rcgroups.com/forums/showpost.php?p=36152670&postcount=187",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2500,2016-11-15T14:53:45Z,2016-12-06T20:36:06Z,2016-12-06T20:36:12Z,CLOSED,False,515979,27041,1321,https://github.com/dronesandercar,descargar ,3321,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2500,https://github.com/dronesandercar,1,https://github.com/cleanflight/cleanflight/pull/2500,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2500,2016-11-15T14:53:45Z,2016-12-06T20:36:06Z,2016-12-06T20:36:12Z,CLOSED,False,515979,27041,1321,https://github.com/dronesandercar,descargar ,3321,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2500,https://github.com/lkaino,2,https://github.com/cleanflight/cleanflight/pull/2500#issuecomment-262969103,,What's this PR about?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2500,2016-11-15T14:53:45Z,2016-12-06T20:36:06Z,2016-12-06T20:36:12Z,CLOSED,False,515979,27041,1321,https://github.com/dronesandercar,descargar ,3321,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2500,https://github.com/JohnOCFII,3,https://github.com/cleanflight/cleanflight/pull/2500#issuecomment-262970301,,"What's this PR about?

I sure don't know, but it looks like Dominic is getting an early Christmas present from his friends!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2500,2016-11-15T14:53:45Z,2016-12-06T20:36:06Z,2016-12-06T20:36:12Z,CLOSED,False,515979,27041,1321,https://github.com/dronesandercar,descargar ,3321,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2500,https://github.com/martinbudden,4,https://github.com/cleanflight/cleanflight/pull/2500#issuecomment-262974932,,I assum this PR is set up to allow easy cherrypicking of betaflight PRs into Cleanflight. But I may be mistaken.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/raphaelcoeffic,1,https://github.com/cleanflight/cleanflight/pull/2504,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.","This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/raphaelcoeffic,2,https://github.com/cleanflight/cleanflight/pull/2504#issuecomment-261541702,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.","Another thing: the build fails with NAZE only, because of that:
region `FLASH' overflowed by 584 bytes

Any suggestion how to solve it? Should it be made optional? I have no idea what should be done here.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2504#issuecomment-261638040,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.","yes, make it optional.  Current there are SKIP_* and USE_* defines.  We prefer USE_*.  So please add USE_SMARTPORT_MSP_BRIDGE. Then edit the makefile and add a section to add USE_SMARTPORT_BRIDGE for all F3 targets.  There's an example of this at around 224-234.
All the F1 targets are space limited.
Unless you prefer adding 'USE_SMARTPORT_MSP_BRIDGE' to each F3 target.h file?
Other suggestions welcomed.  Pick one at your discretion, we can always change that bit later anyway, not critical.
Please perform some testing too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/raphaelcoeffic,4,https://github.com/cleanflight/cleanflight/pull/2504#issuecomment-261747373,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.","@hydra the current head of master does not fit either into NAZE target:
ld: region `FLASH' overflowed by 194 bytes`).

However, with the current modifications to smartport (MSP bridge OFF), I get 20 bytes back.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/raphaelcoeffic,5,https://github.com/cleanflight/cleanflight/pull/2504#issuecomment-261821541,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.","I've tested it on SPRACINGF3EVO + opentx 2.2 + LUA script, and it works just fine. Some modifications might still be needed to better adapt the LUA script to cleanflight's rate settings (had some troubles first understanding how they work).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2504#issuecomment-277517479,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.","Hi @raphaelcoeffic
Is this code up to date?  have there been any more changes in BF that need merging in with this PR?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/raphaelcoeffic,7,https://github.com/cleanflight/cleanflight/pull/2504#issuecomment-277517666,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.","Hi @hydra!
Nope, the code in smartport.c has been pretty stable and working steadily. Did you try it out? I'm not 100% sure I've understood the configuration in cleanflight correctly. If you get the chance, it would be good if you could have a try at the LUA script and see if the values are used/interpreted correctly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2504#issuecomment-277519653,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.",@raphaelcoeffic which part of the configuration are you struggling with?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2504,2016-11-18T12:08:17Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,990,24,3,https://github.com/raphaelcoeffic,smartport: added MSP/SPORT bridge,3,[],https://github.com/cleanflight/cleanflight/pull/2504,https://github.com/raphaelcoeffic,9,https://github.com/cleanflight/cleanflight/pull/2504#issuecomment-277519918,"This new feature allows for using the MSP interface over smart port, for example from a LUA script.
Please note that it has not been tested with cleanflight, only with betaflight. I need to shrink the naze target first, so that I can test it on my devel board.
This PR is related to issue #2474.","The rates, I think it's different from BF.
…
 On 5 Feb 2017, at 14:25, Dominic Clifton ***@***.***> wrote:

 @raphaelcoeffic which part of the configuration are you struggling with?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2505,2016-11-19T12:41:48Z,2016-11-29T20:15:41Z,2016-11-29T21:39:24Z,CLOSED,False,63,35,7,https://github.com/mamalala,"Changed code for accelerometer handling, filtering is now done in acc…",1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2505,https://github.com/mamalala,1,https://github.com/cleanflight/cleanflight/pull/2505,"…eleration.c, using
the biquad filter, like in betaflight. Changed imu and boot.c accordingly.","…eleration.c, using
the biquad filter, like in betaflight. Changed imu and boot.c accordingly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2505,2016-11-19T12:41:48Z,2016-11-29T20:15:41Z,2016-11-29T21:39:24Z,CLOSED,False,63,35,7,https://github.com/mamalala,"Changed code for accelerometer handling, filtering is now done in acc…",1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2505,https://github.com/mamalala,2,https://github.com/cleanflight/cleanflight/pull/2505#issuecomment-261734103,"…eleration.c, using
the biquad filter, like in betaflight. Changed imu and boot.c accordingly.","I fixed the unit tests that broke due to the change.
However, the Travis CI build still fails. This is due to  the removal of two legacy targets by hydra, they were accidentally left as targets in the fake_travis_build.sh script.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2505,2016-11-19T12:41:48Z,2016-11-29T20:15:41Z,2016-11-29T21:39:24Z,CLOSED,False,63,35,7,https://github.com/mamalala,"Changed code for accelerometer handling, filtering is now done in acc…",1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2505,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2505#issuecomment-263542645,"…eleration.c, using
the biquad filter, like in betaflight. Changed imu and boot.c accordingly.",@mamalala I'll fix the travis issue now. can you rebase when it's done?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2505,2016-11-19T12:41:48Z,2016-11-29T20:15:41Z,2016-11-29T21:39:24Z,CLOSED,False,63,35,7,https://github.com/mamalala,"Changed code for accelerometer handling, filtering is now done in acc…",1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2505,https://github.com/mamalala,4,https://github.com/cleanflight/cleanflight/pull/2505#issuecomment-263568244,"…eleration.c, using
the biquad filter, like in betaflight. Changed imu and boot.c accordingly.","OK, hopefully i did the rebase the correct  way, i'm rather new to using GIT. The current CI build should go well now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2505,2016-11-19T12:41:48Z,2016-11-29T20:15:41Z,2016-11-29T21:39:24Z,CLOSED,False,63,35,7,https://github.com/mamalala,"Changed code for accelerometer handling, filtering is now done in acc…",1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2505,https://github.com/mamalala,5,https://github.com/cleanflight/cleanflight/pull/2505#issuecomment-263685605,"…eleration.c, using
the biquad filter, like in betaflight. Changed imu and boot.c accordingly.","Closing this PR, re-opened it under a proper name.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2509,2016-11-23T20:42:22Z,2016-11-27T20:48:14Z,2016-11-27T20:48:14Z,MERGED,True,0,4,2,https://github.com/mamalala,"Fixed fake_travis_build.sh, removing the legacy targets that have bee…",2,[],https://github.com/cleanflight/cleanflight/pull/2509,https://github.com/mamalala,1,https://github.com/cleanflight/cleanflight/pull/2509,…n removed by Hydra.,…n removed by Hydra.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2515,2016-11-27T15:24:29Z,2016-11-29T07:10:53Z,2016-11-29T20:08:14Z,MERGED,True,2,6,4,https://github.com/SandroGrzicic,OSD - Fix RSSI rendering by reverting the previous RSSI rendering change,4,[],https://github.com/cleanflight/cleanflight/pull/2515,https://github.com/SandroGrzicic,1,https://github.com/cleanflight/cleanflight/pull/2515,"RSSI is always zero while using the Cleanflight OSD due to a recent change in the RSSI rendering calculations, which converts any incoming RSSI from the FC to zero.
This reverts the ""fix"", reverting to the prior behaviour of simply converting the RSSI which is in the range of 0 to 1000 to a range of 0 to 100.
See #2514","RSSI is always zero while using the Cleanflight OSD due to a recent change in the RSSI rendering calculations, which converts any incoming RSSI from the FC to zero.
This reverts the ""fix"", reverting to the prior behaviour of simply converting the RSSI which is in the range of 0 to 1000 to a range of 0 to 100.
See #2514",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2515,2016-11-27T15:24:29Z,2016-11-29T07:10:53Z,2016-11-29T20:08:14Z,MERGED,True,2,6,4,https://github.com/SandroGrzicic,OSD - Fix RSSI rendering by reverting the previous RSSI rendering change,4,[],https://github.com/cleanflight/cleanflight/pull/2515,https://github.com/SandroGrzicic,2,https://github.com/cleanflight/cleanflight/pull/2515#issuecomment-263132824,"RSSI is always zero while using the Cleanflight OSD due to a recent change in the RSSI rendering calculations, which converts any incoming RSSI from the FC to zero.
This reverts the ""fix"", reverting to the prior behaviour of simply converting the RSSI which is in the range of 0 to 1000 to a range of 0 to 100.
See #2514","The CI checks seem to be failing due to #2509
[EDIT] Resolved since that PR has been merged.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2517,2016-11-29T18:45:28Z,2016-12-06T20:24:26Z,2016-12-07T01:08:05Z,MERGED,True,1986,140,60,https://github.com/hydra,SPRacingF3NEO - Initial target support.,63,[],https://github.com/cleanflight/cleanflight/pull/2517,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2517,"The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.","The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2517,2016-11-29T18:45:28Z,2016-12-06T20:24:26Z,2016-12-07T01:08:05Z,MERGED,True,1986,140,60,https://github.com/hydra,SPRacingF3NEO - Initial target support.,63,[],https://github.com/cleanflight/cleanflight/pull/2517,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2517#issuecomment-263661795,"The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.","Changed base to v1.14.2, I'll also merge this branch into master when ready.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2517,2016-11-29T18:45:28Z,2016-12-06T20:24:26Z,2016-12-07T01:08:05Z,MERGED,True,1986,140,60,https://github.com/hydra,SPRacingF3NEO - Initial target support.,63,[],https://github.com/cleanflight/cleanflight/pull/2517,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2517#issuecomment-263731091,"The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.",BTW: in lot of places int would be much better than explicitly-sized type (uint8_t),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2517,2016-11-29T18:45:28Z,2016-12-06T20:24:26Z,2016-12-07T01:08:05Z,MERGED,True,1986,140,60,https://github.com/hydra,SPRacingF3NEO - Initial target support.,63,[],https://github.com/cleanflight/cleanflight/pull/2517,https://github.com/digitalentity,4,https://github.com/cleanflight/cleanflight/pull/2517#issuecomment-263736227,"The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.",@hydra looks like this PR has a lot of things that affect other targets. Won't it be better to split this PR into a number of smaller ones?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2517,2016-11-29T18:45:28Z,2016-12-06T20:24:26Z,2016-12-07T01:08:05Z,MERGED,True,1986,140,60,https://github.com/hydra,SPRacingF3NEO - Initial target support.,63,[],https://github.com/cleanflight/cleanflight/pull/2517,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2517#issuecomment-263931954,"The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.","@digitalentity probably but I wanted to share the code as the device goes on sale.  We can pick and pull from this as required.
Were there specific things that affect other targets that you can see causing issues?  I'm not really aware of any issues there.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2517,2016-11-29T18:45:28Z,2016-12-06T20:24:26Z,2016-12-07T01:08:05Z,MERGED,True,1986,140,60,https://github.com/hydra,SPRacingF3NEO - Initial target support.,63,[],https://github.com/cleanflight/cleanflight/pull/2517,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2517#issuecomment-265261872,"The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.","Ok, I've addressed the main issues in this PR and will merge to 1.14.2 and to master later today.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2517,2016-11-29T18:45:28Z,2016-12-06T20:24:26Z,2016-12-07T01:08:05Z,MERGED,True,1986,140,60,https://github.com/hydra,SPRacingF3NEO - Initial target support.,63,[],https://github.com/cleanflight/cleanflight/pull/2517,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2517#issuecomment-265262930,"The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.","bah, github service issues tonight lost some commits that should have been on this PR before it was merged.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2517,2016-11-29T18:45:28Z,2016-12-06T20:24:26Z,2016-12-07T01:08:05Z,MERGED,True,1986,140,60,https://github.com/hydra,SPRacingF3NEO - Initial target support.,63,[],https://github.com/cleanflight/cleanflight/pull/2517,https://github.com/digitalentity,8,https://github.com/cleanflight/cleanflight/pull/2517#issuecomment-265324654,"The SP Racing F3 NEO has been in development for a few months and is on sale this weekend at the UKDroneShow.  The code changes in this PR add the following main changes:

First FC with Cleanflight OSD support.
VTX control, with remote VTX power ON/OFF support.
Support for ICM20608-G and ICM20602 sensors.

Further details, photos and pricing of the board will be on http://seriouslypro.com soon. This post will be updated with a suitable link - please don't ask for more details before then as none shall be given.
And yes, there is a betaflight target support PR ready. 😄
@borisbstyle @martinbudden @ledvinap would love some code review if you have time, obviously this is big due to the changes requires to support the new hardware features.
@stronnag and @digitalentity You will be interested in this target for iNAV due to the use of the larger F3 chip with more IO capability.","@hydra I had a deeper look at the code - the board looks promising, but why no barometer?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2518,2016-11-29T20:15:12Z,2016-11-29T20:24:48Z,2016-12-07T07:57:56Z,MERGED,True,63,35,7,https://github.com/mamalala,Changed code for accelerometer handling,1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2518,https://github.com/mamalala,1,https://github.com/cleanflight/cleanflight/pull/2518,"Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.","Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2518,2016-11-29T20:15:12Z,2016-11-29T20:24:48Z,2016-12-07T07:57:56Z,MERGED,True,63,35,7,https://github.com/mamalala,Changed code for accelerometer handling,1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2518,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2518#issuecomment-263688038,"Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.","flight tested here, merging.  there's some cleanups that can be done, but we'll do those in due course.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2518,2016-11-29T20:15:12Z,2016-11-29T20:24:48Z,2016-12-07T07:57:56Z,MERGED,True,63,35,7,https://github.com/mamalala,Changed code for accelerometer handling,1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2518,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2518#issuecomment-263691079,"Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.",see #2505,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2518,2016-11-29T20:15:12Z,2016-11-29T20:24:48Z,2016-12-07T07:57:56Z,MERGED,True,63,35,7,https://github.com/mamalala,Changed code for accelerometer handling,1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2518,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2518#issuecomment-263696584,"Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.","BTW: Just from the github diff it seems that accADC is  still exported, but never set.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2518,2016-11-29T20:15:12Z,2016-11-29T20:24:48Z,2016-12-07T07:57:56Z,MERGED,True,63,35,7,https://github.com/mamalala,Changed code for accelerometer handling,1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2518,https://github.com/mamalala,5,https://github.com/cleanflight/cleanflight/pull/2518#issuecomment-263698938,"Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.","Finally, the accTargetLooptime should be set to whatever the period time for the ACCEL task is. If somone now changes that time for the task, accTarget... won't change. But then, it didn't before either.
Question is: Is the time supposed to be fixed, or should it become configurable at some point?
Regarding accADC, i wasn't sure wether it may be used elsewhere in the codebase, so for now i left it in.
I will do some more work on the acceleration.c and related code soon. There are still some things that could be cleaned up, i think. For example, some variables are duplicated, like acc_cut_Hz is in imuRuntimeConfig as well as accelerometerConfig. I guess that could be consolidated to be in one place only, or is there any reason to keep it duplicated?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2518,2016-11-29T20:15:12Z,2016-11-29T20:24:48Z,2016-12-07T07:57:56Z,MERGED,True,63,35,7,https://github.com/mamalala,Changed code for accelerometer handling,1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2518,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2518#issuecomment-263705305,"Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.","at the moment i've removed the code, later we can make it configurable.  PR's welcomed to clean it up.
@mamalala @ledvinap see the following commits
c2fa06a - removed bad init code
4e2c347 - rename of variable
b9cb582 - cleanup initialisation, improve performance, reduce logic etc.
2f10a45 - delete accADC",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2518,2016-11-29T20:15:12Z,2016-11-29T20:24:48Z,2016-12-07T07:57:56Z,MERGED,True,63,35,7,https://github.com/mamalala,Changed code for accelerometer handling,1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2518,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2518#issuecomment-263707277,"Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.","@mamalala iirc, with regards to acc_cut_Hz in runtimeConfig and accelerometerConfig the clue is in the name of the containing structure, however it may no-longer be necessary to keep a runtime copy of the value, a PR to clean it up is welcomed if that is the case.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2518,2016-11-29T20:15:12Z,2016-11-29T20:24:48Z,2016-12-07T07:57:56Z,MERGED,True,63,35,7,https://github.com/mamalala,Changed code for accelerometer handling,1,"['BUG', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2518,https://github.com/bbfishyang,8,https://github.com/cleanflight/cleanflight/pull/2518#issuecomment-265380791,"Filtering is now done in acceleration.c, using the biquad filter, like in betaflight. Changed imu and boot.c accordingly. Fixed issues with unit-test flight_imu_* and msp_fc_* due to changes in accelerometer filtering. This is the same a PR #2505, but this time under a proper branch name, since i messed it up the first time.
Test flight in horizon and angle mode was OK for me, although i could do only limited testing.","accelerationFilterInit(uint8_t acc_cut_hz) is the first function that uses accSamplingInterval, so I think accSamplingInterval = 1000 in configureScheduler(void) should be moved into accelerationFilterInit(uint8_t acc_cut_hz).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2526,2016-12-04T04:42:30Z,2016-12-04T04:43:00Z,2016-12-04T04:44:58Z,CLOSED,False,0,0,0,https://github.com/quispiam,Merge pull request #2 from cleanflight/master,1,[],https://github.com/cleanflight/cleanflight/pull/2526,https://github.com/quispiam,1,https://github.com/cleanflight/cleanflight/pull/2526,update fork to latest official cleanflight,update fork to latest official cleanflight,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2526,2016-12-04T04:42:30Z,2016-12-04T04:43:00Z,2016-12-04T04:44:58Z,CLOSED,False,0,0,0,https://github.com/quispiam,Merge pull request #2 from cleanflight/master,1,[],https://github.com/cleanflight/cleanflight/pull/2526,https://github.com/quispiam,2,https://github.com/cleanflight/cleanflight/pull/2526#issuecomment-264684153,update fork to latest official cleanflight,"my mistake, I was trying to update from the official repo into my fork..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2531,2016-12-11T01:50:57Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,252,23,16,https://github.com/ivanwyc,Pierre a cli beeper command,2,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2531,https://github.com/ivanwyc,1,https://github.com/cleanflight/cleanflight/pull/2531,"Since I don't have write access to CF I created a new PR.
Tested with -ALL, SYSTEM_INIT, ARMING, ARMED, RX_SET and they all work as expected.","Since I don't have write access to CF I created a new PR.
Tested with -ALL, SYSTEM_INIT, ARMING, ARMED, RX_SET and they all work as expected.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2531,2016-12-11T01:50:57Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,252,23,16,https://github.com/ivanwyc,Pierre a cli beeper command,2,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2531,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2531#issuecomment-266310855,"Since I don't have write access to CF I created a new PR.
Tested with -ALL, SYSTEM_INIT, ARMING, ARMED, RX_SET and they all work as expected.",great!  thanks for the update on this.  If any other dev has time to review and test that would be great.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2531,2016-12-11T01:50:57Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,252,23,16,https://github.com/ivanwyc,Pierre a cli beeper command,2,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2531,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2531#issuecomment-269846500,"Since I don't have write access to CF I created a new PR.
Tested with -ALL, SYSTEM_INIT, ARMING, ARMED, RX_SET and they all work as expected.",@unitware thanks for PR review.  @ivanwyc can you address as many of the points as possible if you agree with them?  I would like to get this merged to master ASAP.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2533,2016-12-13T09:30:17Z,2016-12-21T13:41:12Z,2016-12-21T13:41:24Z,CLOSED,False,2,0,1,https://github.com/DieHertz,Prevent serial overflow in BLHeli Passthrough,2,['BUG'],https://github.com/cleanflight/cleanflight/pull/2533,https://github.com/DieHertz,1,https://github.com/cleanflight/cleanflight/pull/2533,"BLHeli Suite and BLHeli Configurator use 256-byte reads during flashing operations, adding a 8-byte overhead per message theycan (and sometimes do) overflow the 256 byte TX buffer, leading to flashing failures.","BLHeli Suite and BLHeli Configurator use 256-byte reads during flashing operations, adding a 8-byte overhead per message theycan (and sometimes do) overflow the 256 byte TX buffer, leading to flashing failures.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2533,2016-12-13T09:30:17Z,2016-12-21T13:41:12Z,2016-12-21T13:41:24Z,CLOSED,False,2,0,1,https://github.com/DieHertz,Prevent serial overflow in BLHeli Passthrough,2,['BUG'],https://github.com/cleanflight/cleanflight/pull/2533,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2533#issuecomment-268525394,"BLHeli Suite and BLHeli Configurator use 256-byte reads during flashing operations, adding a 8-byte overhead per message theycan (and sometimes do) overflow the 256 byte TX buffer, leading to flashing failures.","commits squashed and merged to master and 1.14.2, thanks!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2534,2016-12-14T01:03:34Z,2016-12-31T03:19:46Z,2017-01-30T01:54:42Z,MERGED,True,49,5,8,https://github.com/SandroGrzicic,OSD - Add the averageSystemLoadPercent OSD element,1,[],https://github.com/cleanflight/cleanflight/pull/2534,https://github.com/SandroGrzicic,1,https://github.com/cleanflight/cleanflight/pull/2534,"This is my first Cleanflight PR that adds a new feature, so please feel free to comment and let me know if I did anything wrong. I have included a unit test, let me know if I should expand it. Thanks.
I have tested this on my OSD board, in combination with my SP Racing F3 Evo running Betaflight 3.1 (today's master) - https://www.youtube.com/watch?v=jtsUIIeRwjQ
See #2399
If everything checks out, I will try to add other OSD elements as well in separate PRs, if that's OK.","This is my first Cleanflight PR that adds a new feature, so please feel free to comment and let me know if I did anything wrong. I have included a unit test, let me know if I should expand it. Thanks.
I have tested this on my OSD board, in combination with my SP Racing F3 Evo running Betaflight 3.1 (today's master) - https://www.youtube.com/watch?v=jtsUIIeRwjQ
See #2399
If everything checks out, I will try to add other OSD elements as well in separate PRs, if that's OK.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2534,2016-12-14T01:03:34Z,2016-12-31T03:19:46Z,2017-01-30T01:54:42Z,MERGED,True,49,5,8,https://github.com/SandroGrzicic,OSD - Add the averageSystemLoadPercent OSD element,1,[],https://github.com/cleanflight/cleanflight/pull/2534,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2534#issuecomment-268306543,"This is my first Cleanflight PR that adds a new feature, so please feel free to comment and let me know if I did anything wrong. I have included a unit test, let me know if I should expand it. Thanks.
I have tested this on my OSD board, in combination with my SP Racing F3 Evo running Betaflight 3.1 (today's master) - https://www.youtube.com/watch?v=jtsUIIeRwjQ
See #2399
If everything checks out, I will try to add other OSD elements as well in separate PRs, if that's OK.",@SandroGrzicic looks good.,True,{'THUMBS_UP': ['https://github.com/SandroGrzicic']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2534,2016-12-14T01:03:34Z,2016-12-31T03:19:46Z,2017-01-30T01:54:42Z,MERGED,True,49,5,8,https://github.com/SandroGrzicic,OSD - Add the averageSystemLoadPercent OSD element,1,[],https://github.com/cleanflight/cleanflight/pull/2534,https://github.com/SandroGrzicic,3,https://github.com/cleanflight/cleanflight/pull/2534#issuecomment-268668589,"This is my first Cleanflight PR that adds a new feature, so please feel free to comment and let me know if I did anything wrong. I have included a unit test, let me know if I should expand it. Thanks.
I have tested this on my OSD board, in combination with my SP Racing F3 Evo running Betaflight 3.1 (today's master) - https://www.youtube.com/watch?v=jtsUIIeRwjQ
See #2399
If everything checks out, I will try to add other OSD elements as well in separate PRs, if that's OK.","Thank you, please let me know if you have any comments regarding the PR. I plan to add more OSD elements.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2536,2016-12-15T22:51:10Z,2016-12-28T01:37:04Z,2016-12-28T01:37:04Z,MERGED,True,20,7,6,https://github.com/monelli,Allow RSSI ADC inversion.,4,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2536,https://github.com/monelli,1,https://github.com/cleanflight/cleanflight/pull/2536,"Using  PWM RSSI input of SP Racing F3 evo with FrSky x8r receiver the value are inverted.
0% RSSI is good signal
100% RSSI is not signal
With this change, using CLI variable rssi_ppm_invert I allow the signal RSSI ADC inversion.
Using
set rssi_ppm_invert = ON
RSSI now work fine:
100% with good signal
0% with no signal.
I have not tested on other flight controllers, but considering the change I do not think there are problems.","Using  PWM RSSI input of SP Racing F3 evo with FrSky x8r receiver the value are inverted.
0% RSSI is good signal
100% RSSI is not signal
With this change, using CLI variable rssi_ppm_invert I allow the signal RSSI ADC inversion.
Using
set rssi_ppm_invert = ON
RSSI now work fine:
100% with good signal
0% with no signal.
I have not tested on other flight controllers, but considering the change I do not think there are problems.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2536,2016-12-15T22:51:10Z,2016-12-28T01:37:04Z,2016-12-28T01:37:04Z,MERGED,True,20,7,6,https://github.com/monelli,Allow RSSI ADC inversion.,4,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2536,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2536#issuecomment-268526174,"Using  PWM RSSI input of SP Racing F3 evo with FrSky x8r receiver the value are inverted.
0% RSSI is good signal
100% RSSI is not signal
With this change, using CLI variable rssi_ppm_invert I allow the signal RSSI ADC inversion.
Using
set rssi_ppm_invert = ON
RSSI now work fine:
100% with good signal
0% with no signal.
I have not tested on other flight controllers, but considering the change I do not think there are problems.","ok, so this is fine apart from the name of the config variable.  rssi_ppm_invert is now used for PPM RSSI and ADC RSSI inversion.  suggest renaming it to simply rssi_invert.
Can you add a commit to this PR that does that and then I can merge it?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2536,2016-12-15T22:51:10Z,2016-12-28T01:37:04Z,2016-12-28T01:37:04Z,MERGED,True,20,7,6,https://github.com/monelli,Allow RSSI ADC inversion.,4,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2536,https://github.com/monelli,3,https://github.com/cleanflight/cleanflight/pull/2536#issuecomment-268648519,"Using  PWM RSSI input of SP Racing F3 evo with FrSky x8r receiver the value are inverted.
0% RSSI is good signal
100% RSSI is not signal
With this change, using CLI variable rssi_ppm_invert I allow the signal RSSI ADC inversion.
Using
set rssi_ppm_invert = ON
RSSI now work fine:
100% with good signal
0% with no signal.
I have not tested on other flight controllers, but considering the change I do not think there are problems.","I have renamed rssi_ppm_invert in rssi_invert
I have updated the documentation
Sorry for the different commit but I do not know git.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2536,2016-12-15T22:51:10Z,2016-12-28T01:37:04Z,2016-12-28T01:37:04Z,MERGED,True,20,7,6,https://github.com/monelli,Allow RSSI ADC inversion.,4,"['Enhancement', 'Needs additional work']",https://github.com/cleanflight/cleanflight/pull/2536,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2536#issuecomment-269410423,"Using  PWM RSSI input of SP Racing F3 evo with FrSky x8r receiver the value are inverted.
0% RSSI is good signal
100% RSSI is not signal
With this change, using CLI variable rssi_ppm_invert I allow the signal RSSI ADC inversion.
Using
set rssi_ppm_invert = ON
RSSI now work fine:
100% with good signal
0% with no signal.
I have not tested on other flight controllers, but considering the change I do not think there are problems.","@monelli it's ok, i can squash them for you, but if you want to learn see here: https://help.github.com/articles/about-git-rebase/",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2538,2016-12-16T10:12:24Z,2016-12-16T10:12:41Z,2016-12-22T10:14:48Z,CLOSED,False,561813,38257,1241,https://github.com/digitalentity,Airherof3 ppm in fix,1293,[],https://github.com/cleanflight/cleanflight/pull/2538,https://github.com/digitalentity,1,https://github.com/cleanflight/cleanflight/pull/2538,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2539,2016-12-17T13:42:28Z,2016-12-19T12:22:21Z,2016-12-19T12:22:21Z,CLOSED,False,518407,27630,1339,https://github.com/GrishaLutsenko,Inverted motor rotation in GUI can be added ?,3460,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2539,https://github.com/GrishaLutsenko,1,https://github.com/cleanflight/cleanflight/pull/2539,"Can be there added an GUI option to make same as ""set_yaw_motor_direction = -1"" does ?
I like to swap motor direction and a lot of people like that too...","Can be there added an GUI option to make same as ""set_yaw_motor_direction = -1"" does ?
I like to swap motor direction and a lot of people like that too...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2539,2016-12-17T13:42:28Z,2016-12-19T12:22:21Z,2016-12-19T12:22:21Z,CLOSED,False,518407,27630,1339,https://github.com/GrishaLutsenko,Inverted motor rotation in GUI can be added ?,3460,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2539,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2539#issuecomment-267951818,"Can be there added an GUI option to make same as ""set_yaw_motor_direction = -1"" does ?
I like to swap motor direction and a lot of people like that too...","Is is PR, resulting in notification on each commit pushed betaflight. Either open new Issue or use support forums.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2544,2016-12-19T14:31:11Z,2016-12-27T22:41:46Z,2016-12-27T22:41:51Z,CLOSED,False,9,3,2,https://github.com/andre92,Update acceleration.c,5,['BUG'],https://github.com/cleanflight/cleanflight/pull/2544,https://github.com/andre92,1,https://github.com/cleanflight/cleanflight/pull/2544,this should fix #2542,this should fix #2542,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2544,2016-12-19T14:31:11Z,2016-12-27T22:41:46Z,2016-12-27T22:41:51Z,CLOSED,False,9,3,2,https://github.com/andre92,Update acceleration.c,5,['BUG'],https://github.com/cleanflight/cleanflight/pull/2544,https://github.com/de-o,2,https://github.com/cleanflight/cleanflight/pull/2544#issuecomment-268148212,this should fix #2542,I tested the most recent branch (bf68d28) in @andre92 's fork and it fixes issue #2532.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2544,2016-12-19T14:31:11Z,2016-12-27T22:41:46Z,2016-12-27T22:41:51Z,CLOSED,False,9,3,2,https://github.com/andre92,Update acceleration.c,5,['BUG'],https://github.com/cleanflight/cleanflight/pull/2544,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2544#issuecomment-268523632,this should fix #2542,"I made a commit to the master and v1.14.2 branches, please test and report.
See 7f1c0a4",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2544,2016-12-19T14:31:11Z,2016-12-27T22:41:46Z,2016-12-27T22:41:51Z,CLOSED,False,9,3,2,https://github.com/andre92,Update acceleration.c,5,['BUG'],https://github.com/cleanflight/cleanflight/pull/2544,https://github.com/andre92,4,https://github.com/cleanflight/cleanflight/pull/2544#issuecomment-268623271,this should fix #2542,"I just tested angle and althold mode in my room on latest commit and both are working (Martian2, SPR F3 EVO, 4S)
may I suggest an emergency bugfix release?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2544,2016-12-19T14:31:11Z,2016-12-27T22:41:46Z,2016-12-27T22:41:51Z,CLOSED,False,9,3,2,https://github.com/andre92,Update acceleration.c,5,['BUG'],https://github.com/cleanflight/cleanflight/pull/2544,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2544#issuecomment-268630659,this should fix #2542,"@hydra , I agree. This warrants an emergency bugfix release.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2544,2016-12-19T14:31:11Z,2016-12-27T22:41:46Z,2016-12-27T22:41:51Z,CLOSED,False,9,3,2,https://github.com/andre92,Update acceleration.c,5,['BUG'],https://github.com/cleanflight/cleanflight/pull/2544,https://github.com/de-o,6,https://github.com/cleanflight/cleanflight/pull/2544#issuecomment-268821280,this should fix #2542,"I built master with this fix merged into it.  On my bench, the acc looks to be fixed.  I'll hopefully get some flight time with it this weekend (fingers crossed for the weather forecast).  Master also contained a merge for preventing a serial overflow while using bl_heli passthrough.  I'll do a quick regression test for it, but not sure how to hit the exact scenario the merge addresses.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2544,2016-12-19T14:31:11Z,2016-12-27T22:41:46Z,2016-12-27T22:41:51Z,CLOSED,False,9,3,2,https://github.com/andre92,Update acceleration.c,5,['BUG'],https://github.com/cleanflight/cleanflight/pull/2544,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2544#issuecomment-269393108,this should fix #2542,"@andre92 thanks for testing and feedback.
@martinbudden and @andre92 yes I was waiting for feedback before making a new release.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2544,2016-12-19T14:31:11Z,2016-12-27T22:41:46Z,2016-12-27T22:41:51Z,CLOSED,False,9,3,2,https://github.com/andre92,Update acceleration.c,5,['BUG'],https://github.com/cleanflight/cleanflight/pull/2544,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2544#issuecomment-269393203,this should fix #2542,I will close this PR as there is nothing left to merge from it.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2546,2016-12-24T11:10:14Z,2016-12-27T22:38:51Z,2016-12-27T22:38:51Z,MERGED,True,2,2,1,https://github.com/jacquev6,Doc: fix broken links,1,[],https://github.com/cleanflight/cleanflight/pull/2546,https://github.com/jacquev6,1,https://github.com/cleanflight/cleanflight/pull/2546,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2553,2016-12-28T17:56:26Z,2016-12-28T17:57:25Z,2017-01-05T22:50:04Z,CLOSED,False,562180,38278,1245,https://github.com/DzikuVx,No Iterm scaling fixedwing,1353,[],https://github.com/cleanflight/cleanflight/pull/2553,https://github.com/DzikuVx,1,https://github.com/cleanflight/cleanflight/pull/2553,Something I want to check in following days. Should greatly improve aerobatics capabilities of fixed wings.,Something I want to check in following days. Should greatly improve aerobatics capabilities of fixed wings.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2553,2016-12-28T17:56:26Z,2016-12-28T17:57:25Z,2017-01-05T22:50:04Z,CLOSED,False,562180,38278,1245,https://github.com/DzikuVx,No Iterm scaling fixedwing,1353,[],https://github.com/cleanflight/cleanflight/pull/2553,https://github.com/DzikuVx,2,https://github.com/cleanflight/cleanflight/pull/2553#issuecomment-269514315,Something I want to check in following days. Should greatly improve aerobatics capabilities of fixed wings.,"wrong repo, sorry :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,1,https://github.com/cleanflight/cleanflight/pull/2554,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,2,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-269613569,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","It flies quite well in acro mode.
In angle and horizon i think it's a bit ""wobbly but non crashing"". Probably some filtering or PID settings that needs to be tweaked. I'd love some feedback on that - blackbox logs: https://www.dropbox.com/s/kooe0h3zqqe11o3/blackbox_log_2016-12-29_105630.TXT?dl=0
I tested angle mode, then horizon and finally acro.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,3,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-274320901,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Hi! I'm waiting for pieces of my new quadcopter. In a Naze32 10DOF my idea is to use OSD (UART1), IBus (UART2), SoftSerial 1 (IBus telemetry) and SoftSerial 2 (GPS). If I do it in this way I can't connect a LED strip.
I understand that this mod will let me use SoftSerial 1 for LED Strip and change the IBus telemetry to the UART1 too. Is that correct?
If I want to test it, what must I do? I'm a newbie and I'm not sure of how to test it.
I forgot to tell that I will use a FS-ia10b and a FS-i6s.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,4,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-274323361,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","That is correct + I would not run telemetry on soft uart at all since it is on 115200 baud.

Follow the instructions in the documentation (in this pull request) and have a look in the picture on how to do the wiring.

Skickat från min iPhone
…
 22 jan. 2017 kl. 10:55 skrev McGiverGim ***@***.***>:

 Hi! I'm waiting for pieces of my new quadcopter. In a Naze32 10DOF my idea is to use OSD (UART1), IBus (UART2), SoftSerial 1 (IBus telemetry) and SoftSerial 2 (GPS). If I do it in this way I can't connect a LED strip.

 I understand that this mod will let me use SoftSerial 1 for LED Strip and change the IBus telemetry to the UART1 too. Is that correct?

 If I want to test it, what must I do? I'm a newbie and I'm not sure of how to test it.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,5,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-274328614,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","My pieces will arrive in one or two weeks. I will try it. If I have some problem I'll let you know.
Thanks for your hard work!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-275940786,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","you seem to have some additional commits that are not needed, can you remove them from the PR so that the commit list only shows the commits to be added by this PR and so the 'Files changed' tab shows only the code changes needed for the PR?    No new PR needed, just force push over your old PR branch on your repo and this PR will update.  If it helps, create a new (backup) branch from current PR branch before you start.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,7,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-276604871,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Hi! My Naze32 has arrived. Do you have a .hex with this modification to flash it? Or must I generate it by my own? I'm newbie with GIT , so I will need some instructions to accomplish that.
Regards!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,8,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277341216,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Hi unitware! One question:

I have connected by ibus my FS-IA10B to my FS-I6S. Installed the latest stable version of cleanflight. Configured it. All the sticks worked.
I've added the diode and the resistence, and now it don't wok. I don't know if I need your software modified to let the sticks work or not with the diode.
Can you help me? I'm very newbie in the electronic things ;)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,9,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277348617,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","You need to move from the uart rx to tx. And you need to build a custom firmware from the pull request since it's not merged to any official release.

Hope you get it working.

//M

Skickat från min iPhone
…
 3 feb. 2017 kl. 20:35 skrev McGiverGim ***@***.***>:

 Hi unitware! One question:

 I have connected by ibus my FS-IA10B to my FS-I6S. Installed the latest stable version of cleanflight. Configured it. All the sticks worked.
 I've added the diode and the resistence, and now it don't wok. I don't know if I need your software modified to let the sticks work or not with the diode.
 Can you help me? I'm very newbie in the electronic things ;)
 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,10,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277432028,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Hi unitware. Thanks for your answer.
I'm trying to build it by myself, but it's impossible.
My first problem is that I cannot clone the git repository. I don't know why but it stucks at 14-15%. I've tried all the solutions found in google but they didn't work.
The next problem will be the build itself, I cannot install bash for windows in my system, I don't know why. I can try with cygwin but first I need to end with the clone.
I don't know if you have a .hex file for Naze32 that you can pass to me :(
I will continue trying...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,11,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277444944,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Finally I compiled the hex file. I've used another computer and all went ok.
First problem:

In CLI, when I put the command:

serial 1 1088 1115200 57600 115200 115200
I get a ""Parse error"" :(",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,12,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277445463,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","I've found the problem:
In your instructions (in the commit and in the message):
serial 1 1088 1115200 57600 115200 115200
But there's a 1 extra in 1115200 -> 115200
With this all seems to work :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,13,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277504333,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Glad that you managed to build the code and thanks for spotting that typo, I will have a look at hydras comments and fix this in the same time some day. hopefully in the coming week but most probably in the coming month.
Sorry that I did not have a hex handy, but time is lacking at the moment and I was not close to my development rig.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,14,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277504693,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",Thanks to you for your hard work and your help! Waiting for the integration with the master branch... ;),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,15,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277535678,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@hydra: I have rebased and removed the stuff that I wrongly did merge into my branch while trying to rebase earlier.
I can guess that you will find some changes in the include files a bit unusual. I have tried to clean up the dependencies on include files a bit to make it testable. I strongly believe that a file should include what it needs and not the stuff its include file needs (and their ancestors and so on). It might have worked in the beginning but it makes test fixtures and readability suffer.
The code has not changed since I flew with it but you never know. Maybe @McGiverGim can give it a spin before merge? (I haven't got any quad in flying state at the moment).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/coveralls,16,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277536267,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",Coverage increased (+0.09%) to 46.253% when pulling 9a3742c on unitware:combine-ibus-serial-rx-and-telemetry into a47dc7e on cleanflight:master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/coveralls,17,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277537624,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",Coverage increased (+0.09%) to 46.253% when pulling 3ce419f on unitware:combine-ibus-serial-rx-and-telemetry into a47dc7e on cleanflight:master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,18,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277546900,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","I will try it as soon I can... I'm building now the dron but I'm waiting for the lipo to arrive. I hope this week they arrive...
My others drones doesn't support cleanflight.
When your changes will be approved, I can modify the configurator to add an option for this useful feature.
Thanks again!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,19,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277549801,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@McGiverGim It's already in the develoment version, cleanflight/cleanflight-configurator#422",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,20,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277550087,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",@unitware thanks again. You were fast 😂,True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,21,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-277550268,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","well its nothing new for this pr, just enable serial rx and ibus telemetry on the same port.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/FreshRC,22,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281834943,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@unitware @McGiverGim
Hi guys,
I am really new at this, could you please confirm if I understood correctly this .
I have SPRacingF3EVo and FS-iA10b (FS-i6S transmiter) on the way and I would like to do this mod.
So I only need to connect iBus Serial and iBus Sensor with UART TX pin on FC (of course add resistor and diode) and telemetry will work on the same port as iBUS?
Also I need to wait for CF Configurator 1.2.5 to be released to use this feature?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,23,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281835999,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Yes that is. You can use 1.2.5 developer or use the CLI commands in the actual version.
But this pull request is not included in the latest version of cleanflight, it will be included sometime perhaps 😉. Maybe @hydra can say something about it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/FreshRC,24,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281838198,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@McGiverGim
Thank you!
Just one more thing, under ""But this pull request is not included in the latest version of cleanflight"" you mean that this will not work on CF 1.14.2?
What do I need to do to have it working :-/",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,25,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281912849,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","You need to download the code of 1.14.2, merge the changes needed to make this work (that are included into this pull request) and compile all.
If you don't know anything about developing code, maybe I can do it for you, if you are interested.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/FreshRC,26,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281930155,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@McGiverGim
Hi, I've never liked programming which is weird as I work in IT company :-D
And really don't know anything about developing code.
If it's not too much trouble or waste of your time please I am interested.
As I am new in this RC world and this is my first build it looks to me I will have to start coding if I want to use the full potential of equipment.
So with your code I will only need to flash the FC and it should work (regardless of CF Configurator?)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,27,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281948192,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Here you have, for the SPRACING3EVO:
https://drive.google.com/file/d/0B6cSJRBCexb2UFNWclNqREUteTA/view?usp=sharing
If someone want to test for NAZE (that's what I use):
https://drive.google.com/file/d/0B6cSJRBCexb2WVRuMXdXVHdiSjA/view?usp=sharing
To activate it, in CLI put this commands (sample for serial 1, I don't know what serial will you use):

serial 1 1088 115200 57600 115200 115200
feature RX_SERIAL
set serialrx_provider = IBUS
save",True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/FreshRC,28,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281952859,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@McGiverGim
WOW this was fast, thank you very much!
I will use UART2 so I guess in CLI I will add serial 2, right",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,29,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281980240,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Caution! In CLI, serial starts with 0, so for UART2 I think you must use serial 1.
If you put ""serial"" in CLI it will list all serials you have, you can see the numbers here.",True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/FreshRC,30,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281983386,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@McGiverGim
THANK YOU!
Hopefully I will receive all parts today or tomorrow and I will be able to try it out, will let you know how that went ;)",True,{'THUMBS_UP': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,31,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-281984499,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",@McGiverGim did you test fly the PR after I did the cleanup on 5th feb? It's ready for merge as soon as we get some approval of actual flight worthiness :) (My quads are not in a mood to fly at the moment),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,32,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-282000476,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@unitware the lipos finally arrived today :)
This weekend I will try to fly it. I will report my findings... ;)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,33,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-282480477,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@unitware tomorrow I will do more tests, but today I've been flying my new robocat.
I've not had any problem. I've been flying first in acro and after that in horizon, and both modes worked without problem.
I've been trying to fly in GPS mode but I've problems to get a fix with the GPS. I don't know what can be the problem, but the comunication between the GPS and the Naze is ok, and in gpspassthrough mode I can't connect with the u-center software without problem. Maybe I need to let more time withouth moving the GPS.
Now, I will analize the blackbox log and test again tomorrow, but for me, your patch is ok, but I'm very newbie in the hobbie ;)
Ahhh! I forgot to mention, the telemetry arrive to my FS-i6s withouth problem :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,34,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-282502923,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",@hydra what is going on? This pull request has now been flight tested and working. Why are you closing it without merging it to master?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,35,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-282502999,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",All issues and pull request have been closed. Maybe a hacker? Is strange.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,36,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-282504358,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@hydra, please reopen and merge into master_v1.x, i have changed base",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/McGiverGim,37,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-282581743,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","@unitware I don't know what will happen with this PR, but today I've flied 6 lipos. I've tested angle, horizon, acro and airmode. Some flips and rolls. All worked perfectly.
The problem with the GPS was solved by moving the position of the receiver. Now it locks 8-9 satellites without problem, but flying in GPS hold does not hold anything 🤔 maybe something bad configured.
I will remain with this version by the moment with your changes and probably forever because I don't know where this is going in version 2.0 for F1 users.
Thanks!",True,{'HOORAY': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,38,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-282581952,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",Glad to hear that you are happy with it. I'm still hoping that there will be some efforts on maintaining the master_v1.x branch for us with F1 targets.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/unitware,39,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-285975454,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",This PR has now risen from the ashes in Betaflight: betaflight/betaflight#2639,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/dolie,40,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-679031488,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Hello @unitware @McGiverGim ,
I can't make it work :(
I am using 1kohm resistor, 1N4148 diode and a spracingf3.
I entered the commands in CLI but when I check serial it is reset to defaults...
Please help 🙏
ER;�$M>�����'����&$M>�n�ø
CLI

# serial
serial 0 1 115200 57600 0 115200
serial 1 0 115200 57600 0 115200
serial 2 0 115200 57600 0 115200

# serial 1 1088 115200 57600 115200 115200
serial 1 1088 115200 57600 115200 115200

# feature RX_SERIAL
Enabled RX_SERIAL

# set serialrx_provider = IBUS
serialrx_provider set to IBUS
# save",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/dolie,41,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-680005704,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545",Update : It seems that some features (like USE_TELEMETRY_IBUS) has been removed from boards that are ≤ 256k . I will manually build cleanflight with needed features and try again.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2554,2016-12-29T10:52:15Z,2017-02-25T16:55:38Z,2020-08-26T08:27:08Z,CLOSED,False,597,245,17,https://github.com/unitware,Combine ibus serial rx and telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/2554,https://github.com/dolie,42,https://github.com/cleanflight/cleanflight/pull/2554#issuecomment-680736491,"It's now possible to combine the serial rx and ibus telemetry on the sam fc uart on a single pin.
I'm combining the ibus ports of the FS-iA6B receiver with a diode and a resistor.
+---------+
| FS-iA6B |
|         |
| Ser RX  |---|<---\       +------------+
|         |        |       | FC         |
| Sensor  |---[R]--*-------| SerialTX   |
+---------+                +------------+

R = 10Kohm, Diode 1N4148 or similar.

Both uart tx and rx channels are used so it's not possible to use the spare pin for rx of something else.
Discussion and how to connect here: #2545","Final Update : with a custom build (adding especially USE_TELEMETRY_IBUS and USE_TELEMETRY_IBUS_EXTENDED), I was able to use ""on same wire serial and telemetry"". The CLI commands did not worked, BUT, enabling serial RX (type IBUS) and IBUS Telemetry together on UART2, it worked. 👍",True,{'ROCKET': ['https://github.com/unitware']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2555,2016-12-29T18:32:06Z,2016-12-31T01:59:19Z,2017-01-30T16:44:22Z,MERGED,True,53,12,2,https://github.com/ledvinap,Fix atomic.h,3,[],https://github.com/cleanflight/cleanflight/pull/2555,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2555,"=m output operand means that value is write only, gcc may discard previous value because it assumes that it will be overwritten. This bug was not triggered in gcc v4 because asm volatile triggered full memory barrier.
With old version, this code will increase markme only by 2, not 3:
static int markme = 0;
markme++;
ATOMIC_BLOCK_NB(0xff) {
  ATOMIC_BARRIER(markme);  // markme is marked as overwritten, previous increment can be discarded
  markme++;
}
markme++;","=m output operand means that value is write only, gcc may discard previous value because it assumes that it will be overwritten. This bug was not triggered in gcc v4 because asm volatile triggered full memory barrier.
With old version, this code will increase markme only by 2, not 3:
static int markme = 0;
markme++;
ATOMIC_BLOCK_NB(0xff) {
  ATOMIC_BARRIER(markme);  // markme is marked as overwritten, previous increment can be discarded
  markme++;
}
markme++;",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2555,2016-12-29T18:32:06Z,2016-12-31T01:59:19Z,2017-01-30T16:44:22Z,MERGED,True,53,12,2,https://github.com/ledvinap,Fix atomic.h,3,[],https://github.com/cleanflight/cleanflight/pull/2555,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2555#issuecomment-269765993,"=m output operand means that value is write only, gcc may discard previous value because it assumes that it will be overwritten. This bug was not triggered in gcc v4 because asm volatile triggered full memory barrier.
With old version, this code will increase markme only by 2, not 3:
static int markme = 0;
markme++;
ATOMIC_BLOCK_NB(0xff) {
  ATOMIC_BARRIER(markme);  // markme is marked as overwritten, previous increment can be discarded
  markme++;
}
markme++;","I added some documentation and bumped supported version.
Should be safe to merge (but it would be great if someone can spell check the texts)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2555,2016-12-29T18:32:06Z,2016-12-31T01:59:19Z,2017-01-30T16:44:22Z,MERGED,True,53,12,2,https://github.com/ledvinap,Fix atomic.h,3,[],https://github.com/cleanflight/cleanflight/pull/2555,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2555#issuecomment-276115160,"=m output operand means that value is write only, gcc may discard previous value because it assumes that it will be overwritten. This bug was not triggered in gcc v4 because asm volatile triggered full memory barrier.
With old version, this code will increase markme only by 2, not 3:
static int markme = 0;
markme++;
ATOMIC_BLOCK_NB(0xff) {
  ATOMIC_BARRIER(markme);  // markme is marked as overwritten, previous increment can be discarded
  markme++;
}
markme++;",@mikeller @ledvinap see eb8c63e,True,{'THUMBS_UP': ['https://github.com/ledvinap']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2568,2017-01-03T15:36:37Z,2017-01-29T19:46:14Z,2017-01-29T19:46:25Z,CLOSED,False,736251,34281,1484,https://github.com/Peter010103,Dshot add info,4051,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2568,https://github.com/Peter010103,1,https://github.com/cleanflight/cleanflight/pull/2568,"Hello,
I have been using Dshot 150 with the Racerstar V1 20A esc for quite some time. But it's not added to the list of Dshot capable escs on the wiki. I thought it was exactly the same as the v1 20A Cicidas...
Could you add it just for anyone else using them and despairing that they have to buy new escs :)
Thanks,
Peter.","Hello,
I have been using Dshot 150 with the Racerstar V1 20A esc for quite some time. But it's not added to the list of Dshot capable escs on the wiki. I thought it was exactly the same as the v1 20A Cicidas...
Could you add it just for anyone else using them and despairing that they have to buy new escs :)
Thanks,
Peter.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2568,2017-01-03T15:36:37Z,2017-01-29T19:46:14Z,2017-01-29T19:46:25Z,CLOSED,False,736251,34281,1484,https://github.com/Peter010103,Dshot add info,4051,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2568,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2568#issuecomment-275940515,"Hello,
I have been using Dshot 150 with the Racerstar V1 20A esc for quite some time. But it's not added to the list of Dshot capable escs on the wiki. I thought it was exactly the same as the v1 20A Cicidas...
Could you add it just for anyone else using them and despairing that they have to buy new escs :)
Thanks,
Peter.",PR against the wrong base branch!  review the PR *before& pressing the submit button please!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2573,2017-01-12T17:38:00Z,2017-01-29T14:10:13Z,2017-02-05T18:01:34Z,MERGED,True,1,0,1,https://github.com/unitware,Enable ibus telemetry on the SP Racing F3 NEO,1,[],https://github.com/cleanflight/cleanflight/pull/2573,https://github.com/unitware,1,https://github.com/cleanflight/cleanflight/pull/2573,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/error414,1,https://github.com/cleanflight/cleanflight/pull/2580,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-275917024,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","great, it's nice to see some alternative transponder support!
Suggest splitting the implementation up into seperate files, or at least use an interface otherwise - see serial port vtables for an example.  extract a common API for all transponders, move common code into transponder_common.c/.h files.
there should be NO need for transponderType inside any methods in non-shared code.
e.g. void transponderIrUpdateData(const uint8_t* transponderData, const uint8_t* transponderType) is bad.
Also, in cleanflight we use the word 'provider' when multiple different vendors provide something, as is the case for telemetry, e.g. telemeteryProvider   the word 'type' is overused by developers and is overloaded with the definition of a language type e.g 'int, boolean'.
there needs to be a better way of defining the DMA buffer since the sizes for the ARC one is different to the iLAPs one.  suggest using a union or some other way to define the buffers for each implementation so that the implementation for each transponder can manage the buffer correctly.
If you could provide some documentation regarding the IR protocol used (packet format, crc, start, stop bits, data length, IR carrier frequency, etc) that would be great.  Also any details of exact IR LEDs that are known to work would also help FC manufacturers release compatible products.
If you could send an IR receiver for your system to me I can help make sure that all Seriously Pro products can support year gear.  Please email me regarding this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-277516897,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM",@error414 any update?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/Arcicorsa,4,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-277528334,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","Hello Dominic, I'm sorry for my late answer. We are still working on code modification but progress is slow :-) .
Some specifications of aRCiTimer transponder system: IR protocol based on standard remote controller protocol with small modification. Carrier frequency is 38kHz, IR wavelenght is 940nm. LED for transponder is best VSLB3948 (standard 3mm LED) and  VSMB2948G (SMD).
This integration may also work with other systems based on IR remote standard protocoll. Only it is necessary to adjust the transmit frame according to specifications. Later, I explain how to create other IDs as required, it is easy :-) .
Dominic, I will contact you on email. I will send unit for you :-) .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/error414,5,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-279361425,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","I pushed refactoring of transponder, It uses vTable and union for DMA buffer. I tied do my best.
Does work coveralls properly? It seems that it run twice after each commit.
BTW: coveralls is awesome feature, very good that it was added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-279800776,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","do you think there should also be cli parameters for transponderProvider?   my feeling is probably not.
I specifically didn't add cli code to show the transponder data/code in the cli since people often paste config dumps in forums would leak their personal private data to the world.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/error414,7,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-280088673,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","Hmmm, :( Mixed ""refactor"" and ""fix tabs"" commits, it's not a good idea.
I think that transponder should not be available in CLI. You right
""paste config dumps in forums would leak their personal private data to the world""",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-282862573,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","please rebase this against current master.
note that there is now F4 transponder support too.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/error414,9,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-284061084,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","Hi,
I created new version for new code. It seems that travis is broken because it try compile suport for transponder for unsuported targets.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/error414,10,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-287529269,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","Hello,
What is the situation? Are you planning to accept the pull request?
Thank you very much.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-290042290,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","@error414 hiya, thanks for the rebasing, yes we plan to merge this, I'll do a review hopefully soon and will ask some other devs to take a look.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/error414,12,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-290773620,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","Hi,
I fixed all your requirements except one, because I dont know what did you mean. :(.
cleanflight/cleanflight-configurator@e756658",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-290932896,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM","@error414 thanks for the updated PR, much appreciated!  I answered your question above.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2580,2017-01-17T20:04:26Z,2017-04-01T17:07:20Z,2017-04-01T17:34:25Z,MERGED,True,490,95,15,https://github.com/error414,Support for next lap timer,4,[],https://github.com/cleanflight/cleanflight/pull/2580,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2580#issuecomment-290935043,"Hi,
We added aRCiTime IR lap timer support protocol. Adaptation of the configurator is in another pull request. Unfortunately, our video as well as webpages are only in Czech, but soon translation into English will be available. We added basic subtitles to the video. ARCitimer has been tested in several races and it worked perfectly.
We're arranging other competitions/races in which the aRCItimer will be tested.
https://www.youtube.com/watch?v=PbFRyhuG-E0&t=6s
https://www.youtube.com/watch?v=lQUbsCUiIeM",@error414 please see #2690,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2583,2017-01-19T04:10:45Z,2017-02-25T16:55:58Z,2017-02-25T16:55:58Z,CLOSED,False,238,20,33,https://github.com/cs8425,Altitude hold by acc only,7,[],https://github.com/cleanflight/cleanflight/pull/2583,https://github.com/cs8425,1,https://github.com/cleanflight/cleanflight/pull/2583,"Some small quadcopter didn't have barometer or space to attach sonar.
So, I add a Altitude hold mode that only require accelerometer.
This mode should conflict with BARO/SONAR mode(not tested).
Using 2 PID to adjust (PIDALT for going up, PIDVEL for going down).
Holding effect only test with a small quadcopter with ""SP RACING F3 EVO Brush"" control board.
Needs some volunteer to do some real test with other control board.","Some small quadcopter didn't have barometer or space to attach sonar.
So, I add a Altitude hold mode that only require accelerometer.
This mode should conflict with BARO/SONAR mode(not tested).
Using 2 PID to adjust (PIDALT for going up, PIDVEL for going down).
Holding effect only test with a small quadcopter with ""SP RACING F3 EVO Brush"" control board.
Needs some volunteer to do some real test with other control board.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2588,2017-01-23T04:35:47Z,2017-01-29T14:08:29Z,2017-02-05T13:21:41Z,MERGED,True,2,0,1,https://github.com/dhoulton,Naze gyro fix for 1.14,1,[],https://github.com/cleanflight/cleanflight/pull/2588,https://github.com/dhoulton,1,https://github.com/cleanflight/cleanflight/pull/2588,My NAZE32 rev 6 does not see gyro data since 1.14.0.  Described in issue #2587.  Resolved with one define in NAZE target.h.,My NAZE32 rev 6 does not see gyro data since 1.14.0.  Described in issue #2587.  Resolved with one define in NAZE target.h.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2588,2017-01-23T04:35:47Z,2017-01-29T14:08:29Z,2017-02-05T13:21:41Z,MERGED,True,2,0,1,https://github.com/dhoulton,Naze gyro fix for 1.14,1,[],https://github.com/cleanflight/cleanflight/pull/2588,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2588#issuecomment-274420580,My NAZE32 rev 6 does not see gyro data since 1.14.0.  Described in issue #2587.  Resolved with one define in NAZE target.h.,"@dhoulton , although this fixes the symptoms, it doesn't fix the underlying problem. Namely MPU_INT_EXTI is not defined in the NAZE target.h file.
Instead the following lines should be added to the target.h file (after the line#define USE_EXTI):
#define MAG_INT_EXTI            PC14
#define MPU_INT_EXTI            PC13

The difference between NAZE and CJMCU is that the CJMCU does not have the interrupt pin connected, whereas the NAZE does, so the fix is different.
Can you test, and if all works update the PR accordingly?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2588,2017-01-23T04:35:47Z,2017-01-29T14:08:29Z,2017-02-05T13:21:41Z,MERGED,True,2,0,1,https://github.com/dhoulton,Naze gyro fix for 1.14,1,[],https://github.com/cleanflight/cleanflight/pull/2588,https://github.com/dhoulton,3,https://github.com/cleanflight/cleanflight/pull/2588#issuecomment-274550685,My NAZE32 rev 6 does not see gyro data since 1.14.0.  Described in issue #2587.  Resolved with one define in NAZE target.h.,"Yes, I will try that tonight and will update the PR if successful.  Thanks!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2588,2017-01-23T04:35:47Z,2017-01-29T14:08:29Z,2017-02-05T13:21:41Z,MERGED,True,2,0,1,https://github.com/dhoulton,Naze gyro fix for 1.14,1,[],https://github.com/cleanflight/cleanflight/pull/2588,https://github.com/dhoulton,4,https://github.com/cleanflight/cleanflight/pull/2588#issuecomment-274712322,My NAZE32 rev 6 does not see gyro data since 1.14.0.  Described in issue #2587.  Resolved with one define in NAZE target.h.,"Added the EXTI definitions suggested by martin, and verified that this does indeed fix the gyro problem on my NAZE32 rev6.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2589,2017-01-23T12:07:10Z,2017-01-29T14:07:27Z,2017-01-29T14:07:34Z,CLOSED,False,423223,374391,1063,https://github.com/aravinds92,Serial blocking,79,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2589,https://github.com/aravinds92,1,https://github.com/cleanflight/cleanflight/pull/2589,Working configurator. Have to start scheduling accelerometer tasks now.,Working configurator. Have to start scheduling accelerometer tasks now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2589,2017-01-23T12:07:10Z,2017-01-29T14:07:27Z,2017-01-29T14:07:34Z,CLOSED,False,423223,374391,1063,https://github.com/aravinds92,Serial blocking,79,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2589,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2589#issuecomment-275916007,Working configurator. Have to start scheduling accelerometer tasks now.,please be careful when oping PR's - select the correct base branch!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2590,2017-01-23T20:21:25Z,2017-01-29T14:06:00Z,2017-02-26T02:04:15Z,CLOSED,False,183,184,34,https://github.com/ekncarcc,V1.14.2,28,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2590,https://github.com/ekncarcc,1,https://github.com/cleanflight/cleanflight/pull/2590,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2592,2017-01-24T18:34:12Z,2017-01-29T14:06:52Z,2017-01-29T14:06:52Z,CLOSED,False,156187,19069,657,https://github.com/Gamma-Software,Why using TPA ?,1496,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2592,https://github.com/Gamma-Software,1,https://github.com/cleanflight/cleanflight/pull/2592,"Hi guys,
Why do we still use TPA when a good filtering is enough.
What do you guys think ?
Valentin Rudloff","Hi guys,
Why do we still use TPA when a good filtering is enough.
What do you guys think ?
Valentin Rudloff",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2592,2017-01-24T18:34:12Z,2017-01-29T14:06:52Z,2017-01-29T14:06:52Z,CLOSED,False,156187,19069,657,https://github.com/Gamma-Software,Why using TPA ?,1496,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2592,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2592#issuecomment-275915974,"Hi guys,
Why do we still use TPA when a good filtering is enough.
What do you guys think ?
Valentin Rudloff",please don't use a PR as a way to ask questions.  use rcgroups forums or irc.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2598,2017-01-29T00:00:33Z,2017-01-29T00:01:30Z,2017-01-29T00:01:30Z,CLOSED,False,562311,38410,1245,https://github.com/brat002,Fixed misspellings in documentation,1377,[],https://github.com/cleanflight/cleanflight/pull/2598,https://github.com/brat002,1,https://github.com/cleanflight/cleanflight/pull/2598,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2600,2017-01-30T01:56:36Z,2017-02-05T12:33:19Z,2017-02-05T12:33:19Z,MERGED,True,48,2,8,https://github.com/SandroGrzicic,"OSD - Add the baro altitude OSD element, with a unit test.",1,[],https://github.com/cleanflight/cleanflight/pull/2600,https://github.com/SandroGrzicic,1,https://github.com/cleanflight/cleanflight/pull/2600,"The FC baro/sonar value in cm is converted to a value in meters.
I have tested this with a stationary quad (with the Evo FC running BF 3.1. with the baro enabled) but haven't done a real test flight yet.","The FC baro/sonar value in cm is converted to a value in meters.
I have tested this with a stationary quad (with the Evo FC running BF 3.1. with the baro enabled) but haven't done a real test flight yet.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2600,2017-01-30T01:56:36Z,2017-02-05T12:33:19Z,2017-02-05T12:33:19Z,MERGED,True,48,2,8,https://github.com/SandroGrzicic,"OSD - Add the baro altitude OSD element, with a unit test.",1,[],https://github.com/cleanflight/cleanflight/pull/2600,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2600#issuecomment-277516862,"The FC baro/sonar value in cm is converted to a value in meters.
I have tested this with a stationary quad (with the Evo FC running BF 3.1. with the baro enabled) but haven't done a real test flight yet.",@SandroGrzicic is there a corresponding configurator PR?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2602,2017-01-31T08:30:23Z,2017-02-05T12:29:22Z,2017-02-05T12:29:33Z,CLOSED,False,577852,42882,1309,https://github.com/eijowk,SPRACINGF3EVO with four servos and one Softserial,1812,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2602,https://github.com/eijowk,1,https://github.com/cleanflight/cleanflight/pull/2602,"This is a speical version of SPRACINGF3EVO with one SoftSerial instead of two which enables two motors and four servos for airplanes with Rudder, Elevator and two Ailerons. This is great if you want an FRSKY receiver together with telemetry, GPS and MWOSD in a SPRACING F3 EVO board. Maybe suits better for many INAV users than the current one? I guess that INAV is and will often be used in 4-servo airplane setups. Also the EVO board is great for those planes because of the logging to th microSD card.
I have attached a small zip which can be used to replace the SPRACINGF3EVO folder in target directory of INAV source code. Works perfect on bench - not flight tested yet.
Background:
Different IO pins have different timers connected, and timers are also shared for several IO pins. The matrix is a bit complex for IO vs timers. Servo and softserial can not share one timer, so timers has to be remapped together with interrupt to make it working.
Possible improvement:
Making the configuration and remapping of timers depending of the INAV configurator, If you eneable one softserial then get this mapping. If you enable two you get the previous one. However this change will add hardware related code in other parts of the code than the target files for SPRACINGF3EVO which not is good development from my understanding. To my understanding of the code it can not be done in only the target files.
SPRACINGF3EVO.zip","This is a speical version of SPRACINGF3EVO with one SoftSerial instead of two which enables two motors and four servos for airplanes with Rudder, Elevator and two Ailerons. This is great if you want an FRSKY receiver together with telemetry, GPS and MWOSD in a SPRACING F3 EVO board. Maybe suits better for many INAV users than the current one? I guess that INAV is and will often be used in 4-servo airplane setups. Also the EVO board is great for those planes because of the logging to th microSD card.
I have attached a small zip which can be used to replace the SPRACINGF3EVO folder in target directory of INAV source code. Works perfect on bench - not flight tested yet.
Background:
Different IO pins have different timers connected, and timers are also shared for several IO pins. The matrix is a bit complex for IO vs timers. Servo and softserial can not share one timer, so timers has to be remapped together with interrupt to make it working.
Possible improvement:
Making the configuration and remapping of timers depending of the INAV configurator, If you eneable one softserial then get this mapping. If you enable two you get the previous one. However this change will add hardware related code in other parts of the code than the target files for SPRACINGF3EVO which not is good development from my understanding. To my understanding of the code it can not be done in only the target files.
SPRACINGF3EVO.zip",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2602,2017-01-31T08:30:23Z,2017-02-05T12:29:22Z,2017-02-05T12:29:33Z,CLOSED,False,577852,42882,1309,https://github.com/eijowk,SPRACINGF3EVO with four servos and one Softserial,1812,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2602,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2602#issuecomment-277516692,"This is a speical version of SPRACINGF3EVO with one SoftSerial instead of two which enables two motors and four servos for airplanes with Rudder, Elevator and two Ailerons. This is great if you want an FRSKY receiver together with telemetry, GPS and MWOSD in a SPRACING F3 EVO board. Maybe suits better for many INAV users than the current one? I guess that INAV is and will often be used in 4-servo airplane setups. Also the EVO board is great for those planes because of the logging to th microSD card.
I have attached a small zip which can be used to replace the SPRACINGF3EVO folder in target directory of INAV source code. Works perfect on bench - not flight tested yet.
Background:
Different IO pins have different timers connected, and timers are also shared for several IO pins. The matrix is a bit complex for IO vs timers. Servo and softserial can not share one timer, so timers has to be remapped together with interrupt to make it working.
Possible improvement:
Making the configuration and remapping of timers depending of the INAV configurator, If you eneable one softserial then get this mapping. If you enable two you get the previous one. However this change will add hardware related code in other parts of the code than the target files for SPRACINGF3EVO which not is good development from my understanding. To my understanding of the code it can not be done in only the target files.
SPRACINGF3EVO.zip",targetting the wrong branch - review your changes BEFORE pressing the 'submit pr' button please!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2608,2017-02-05T14:21:04Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,9,7,2,https://github.com/jpajala,"removed non-existent extern variables and some unusable code, and added documentation",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2608,https://github.com/jpajala,1,https://github.com/cleanflight/cleanflight/pull/2608,"cleanflight_fc.c: Removed non-existent extern variable declarations. Removed non-usable code from inside of USE_PID_MW23 flags.
msp.c: added some documentation.","cleanflight_fc.c: Removed non-existent extern variable declarations. Removed non-usable code from inside of USE_PID_MW23 flags.
msp.c: added some documentation.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2608,2017-02-05T14:21:04Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,9,7,2,https://github.com/jpajala,"removed non-existent extern variables and some unusable code, and added documentation",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2608,https://github.com/coveralls,2,https://github.com/cleanflight/cleanflight/pull/2608#issuecomment-277524168,"cleanflight_fc.c: Removed non-existent extern variable declarations. Removed non-usable code from inside of USE_PID_MW23 flags.
msp.c: added some documentation.",Coverage remained the same at 46.168% when pulling 9545f82 on jpajala:fixDocumentationAndBadCodeRemoval into a47dc7e on cleanflight:master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2608,2017-02-05T14:21:04Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,9,7,2,https://github.com/jpajala,"removed non-existent extern variables and some unusable code, and added documentation",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2608,https://github.com/coveralls,3,https://github.com/cleanflight/cleanflight/pull/2608#issuecomment-277524169,"cleanflight_fc.c: Removed non-existent extern variable declarations. Removed non-usable code from inside of USE_PID_MW23 flags.
msp.c: added some documentation.",Coverage remained the same at 46.168% when pulling 9545f82 on jpajala:fixDocumentationAndBadCodeRemoval into a47dc7e on cleanflight:master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2608,2017-02-05T14:21:04Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,9,7,2,https://github.com/jpajala,"removed non-existent extern variables and some unusable code, and added documentation",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2608,https://github.com/unitware,4,https://github.com/cleanflight/cleanflight/pull/2608#issuecomment-279069267,"cleanflight_fc.c: Removed non-existent extern variable declarations. Removed non-usable code from inside of USE_PID_MW23 flags.
msp.c: added some documentation.","What about this documentation, can you update it as well?
> git grep -n dynP8
docs/development/PID Internals.md:55:P -=  gyroADC[axis] / 4 * dynP8 / 10 / 8
docs/development/PID Internals.md:63: - PD controller(parameters dynP8/dynD8) with zero setpoint acting on gyroADC",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2608,2017-02-05T14:21:04Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,9,7,2,https://github.com/jpajala,"removed non-existent extern variables and some unusable code, and added documentation",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2608,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2608#issuecomment-279801995,"cleanflight_fc.c: Removed non-existent extern variable declarations. Removed non-usable code from inside of USE_PID_MW23 flags.
msp.c: added some documentation.",@jpajala any update?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2608,2017-02-05T14:21:04Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,9,7,2,https://github.com/jpajala,"removed non-existent extern variables and some unusable code, and added documentation",1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2608,https://github.com/jpajala,6,https://github.com/cleanflight/cleanflight/pull/2608#issuecomment-280114985,"cleanflight_fc.c: Removed non-existent extern variable declarations. Removed non-usable code from inside of USE_PID_MW23 flags.
msp.c: added some documentation.","The documentation truly is outdated, but I'd rather leave the documentation fix to someone who fully understands the PID functionality. I'm not there yet. :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2610,2017-02-08T02:35:47Z,2017-02-14T19:00:44Z,2017-02-14T19:01:06Z,CLOSED,False,737044,34768,1489,None,Add flip feature,4236,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2610,None,1,https://github.com/cleanflight/cleanflight/pull/2610,Add way to flip the copter over in case stuck on top of structure to help with drone recovery. selecting which side to flip from.,Add way to flip the copter over in case stuck on top of structure to help with drone recovery. selecting which side to flip from.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2610,2017-02-08T02:35:47Z,2017-02-14T19:00:44Z,2017-02-14T19:01:06Z,CLOSED,False,737044,34768,1489,None,Add flip feature,4236,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2610,https://github.com/SpoonFPV,2,https://github.com/cleanflight/cleanflight/pull/2610#issuecomment-278533544,Add way to flip the copter over in case stuck on top of structure to help with drone recovery. selecting which side to flip from.,I would like to see TBS Smart Audio and IRC telemetry input peripheral features used to adjust the VTX power in flight based on the distance from the pilot.  The distance could be determined based on the RSSI from the radio.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2610,2017-02-08T02:35:47Z,2017-02-14T19:00:44Z,2017-02-14T19:01:06Z,CLOSED,False,737044,34768,1489,None,Add flip feature,4236,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2610,https://github.com/unitware,3,https://github.com/cleanflight/cleanflight/pull/2610#issuecomment-279068017,Add way to flip the copter over in case stuck on top of structure to help with drone recovery. selecting which side to flip from.,"Really there is no way to digest this pull request, it's too big. And I must guess (did not even try to read it) that it's not focussed on only this feature.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2610,2017-02-08T02:35:47Z,2017-02-14T19:00:44Z,2017-02-14T19:01:06Z,CLOSED,False,737044,34768,1489,None,Add flip feature,4236,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2610,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2610#issuecomment-279801569,Add way to flip the copter over in case stuck on top of structure to help with drone recovery. selecting which side to flip from.,please use the correct base when creating PR's,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2615,2017-02-11T14:50:14Z,2017-02-14T18:59:58Z,2017-02-14T19:00:21Z,CLOSED,False,562311,38410,1245,https://github.com/jesusbravo38,First Pull Request,1379,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2615,https://github.com/jesusbravo38,1,https://github.com/cleanflight/cleanflight/pull/2615,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2615,2017-02-11T14:50:14Z,2017-02-14T18:59:58Z,2017-02-14T19:00:21Z,CLOSED,False,562311,38410,1245,https://github.com/jesusbravo38,First Pull Request,1379,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2615,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2615#issuecomment-279801402,,please use the correct base when creating PR's,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2619,2017-02-14T12:36:28Z,2017-02-23T01:57:22Z,2017-02-23T01:57:22Z,MERGED,True,56,39,7,https://github.com/ledvinap,Feature irqhandlers,2,[],https://github.com/cleanflight/cleanflight/pull/2619,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2619,"IRQHANDLER(name)
Check that name is valid handler name (corresponding IRQ number is defined) and emit handler definition
IRQHANDLER(TIM1_UP_IRQ) will expand to void TIM1_UP_IRQHandler(void) on F1, but generate compile-time error on F3 target (correct name is TIM1_UP_TIM16_IRQ)","IRQHANDLER(name)
Check that name is valid handler name (corresponding IRQ number is defined) and emit handler definition
IRQHANDLER(TIM1_UP_IRQ) will expand to void TIM1_UP_IRQHandler(void) on F1, but generate compile-time error on F3 target (correct name is TIM1_UP_TIM16_IRQ)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2619,2017-02-14T12:36:28Z,2017-02-23T01:57:22Z,2017-02-23T01:57:22Z,MERGED,True,56,39,7,https://github.com/ledvinap,Feature irqhandlers,2,[],https://github.com/cleanflight/cleanflight/pull/2619,https://github.com/coveralls,2,https://github.com/cleanflight/cleanflight/pull/2619#issuecomment-279700222,"IRQHANDLER(name)
Check that name is valid handler name (corresponding IRQ number is defined) and emit handler definition
IRQHANDLER(TIM1_UP_IRQ) will expand to void TIM1_UP_IRQHandler(void) on F1, but generate compile-time error on F3 target (correct name is TIM1_UP_TIM16_IRQ)",Coverage remained the same at 46.168% when pulling e8b7d86 on ledvinap:feature-irqhandlers into a47dc7e on cleanflight:master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2619,2017-02-14T12:36:28Z,2017-02-23T01:57:22Z,2017-02-23T01:57:22Z,MERGED,True,56,39,7,https://github.com/ledvinap,Feature irqhandlers,2,[],https://github.com/cleanflight/cleanflight/pull/2619,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2619#issuecomment-279801202,"IRQHANDLER(name)
Check that name is valid handler name (corresponding IRQ number is defined) and emit handler definition
IRQHANDLER(TIM1_UP_IRQ) will expand to void TIM1_UP_IRQHandler(void) on F1, but generate compile-time error on F3 target (correct name is TIM1_UP_TIM16_IRQ)","yes this looks very useful,  ready to merge?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2619,2017-02-14T12:36:28Z,2017-02-23T01:57:22Z,2017-02-23T01:57:22Z,MERGED,True,56,39,7,https://github.com/ledvinap,Feature irqhandlers,2,[],https://github.com/cleanflight/cleanflight/pull/2619,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2619#issuecomment-279994820,"IRQHANDLER(name)
Check that name is valid handler name (corresponding IRQ number is defined) and emit handler definition
IRQHANDLER(TIM1_UP_IRQ) will expand to void TIM1_UP_IRQHandler(void) on F1, but generate compile-time error on F3 target (correct name is TIM1_UP_TIM16_IRQ)","(fixed minor whitespace)
IMO it's safe to merge, generated code should be identical",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2621,2017-02-20T06:38:13Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,11,4,1,https://github.com/ellingo,Barometer calibration improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2621,https://github.com/ellingo,1,https://github.com/cleanflight/cleanflight/pull/2621,"Assumes pressure to be 1 std atm (101325 Pa) before first calibration to
dampen overshoot.
Stops calibration early when measurements (moving average) are stable.","Assumes pressure to be 1 std atm (101325 Pa) before first calibration to
dampen overshoot.
Stops calibration early when measurements (moving average) are stable.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2621,2017-02-20T06:38:13Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,11,4,1,https://github.com/ellingo,Barometer calibration improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2621,https://github.com/coveralls,2,https://github.com/cleanflight/cleanflight/pull/2621#issuecomment-281001771,"Assumes pressure to be 1 std atm (101325 Pa) before first calibration to
dampen overshoot.
Stops calibration early when measurements (moving average) are stable.",Coverage remained the same at 46.168% when pulling 52adb27 on ellingo:barometer-calibration into a47dc7e on cleanflight:master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2621,2017-02-20T06:38:13Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,11,4,1,https://github.com/ellingo,Barometer calibration improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2621,https://github.com/coveralls,3,https://github.com/cleanflight/cleanflight/pull/2621#issuecomment-281654674,"Assumes pressure to be 1 std atm (101325 Pa) before first calibration to
dampen overshoot.
Stops calibration early when measurements (moving average) are stable.",Coverage decreased (-0.02%) to 46.15% when pulling 7e37b73 on ellingo:barometer-calibration into a47dc7e on cleanflight:master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2621,2017-02-20T06:38:13Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,11,4,1,https://github.com/ellingo,Barometer calibration improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2621,https://github.com/coveralls,4,https://github.com/cleanflight/cleanflight/pull/2621#issuecomment-281662470,"Assumes pressure to be 1 std atm (101325 Pa) before first calibration to
dampen overshoot.
Stops calibration early when measurements (moving average) are stable.",Coverage remained the same at 46.168% when pulling 41999ba on ellingo:barometer-calibration into a47dc7e on cleanflight:master.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2621,2017-02-20T06:38:13Z,2017-02-25T16:55:38Z,2017-02-25T16:55:38Z,CLOSED,False,11,4,1,https://github.com/ellingo,Barometer calibration improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2621,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2621#issuecomment-281867558,"Assumes pressure to be 1 std atm (101325 Pa) before first calibration to
dampen overshoot.
Stops calibration early when measurements (moving average) are stable.",@digitalentity have you seen this? care to review?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2627,2017-02-26T13:13:38Z,2017-02-26T13:43:36Z,2017-04-01T22:59:59Z,MERGED,True,20,132,21,https://github.com/hydra,Fix usb disconnect (f1/f3/f4/f7),2,[],https://github.com/cleanflight/cleanflight/pull/2627,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2627,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2628,2017-02-26T13:49:29Z,2017-02-26T22:25:09Z,2017-04-01T22:59:57Z,MERGED,True,1,1,1,https://github.com/hydra,SPRACINGF3NEO - Disable OSD by default.,1,[],https://github.com/cleanflight/cleanflight/pull/2628,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2628,"NEO ships without optional OSD board, users turn it on manually when they add the OSD/VTX board.","NEO ships without optional OSD board, users turn it on manually when they add the OSD/VTX board.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2629,2017-02-26T13:54:01Z,2017-02-27T18:05:05Z,2017-02-27T19:28:51Z,MERGED,True,2032,1085,139,https://github.com/hydra,merge recent BF changes.,49,[],https://github.com/cleanflight/cleanflight/pull/2629,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2629,,,True,{'HOORAY': ['https://github.com/andyshinn']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2630,2017-02-26T18:07:07Z,2017-02-26T22:46:21Z,2017-04-01T22:59:56Z,MERGED,True,4,1,2,https://github.com/hydra,CF/BF - fix CMS compilation when blackbox is disabled.,1,[],https://github.com/cleanflight/cleanflight/pull/2630,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2630,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2631,2017-02-27T19:59:54Z,2017-02-27T20:41:27Z,2017-04-01T22:59:50Z,MERGED,True,38,15,2,https://github.com/hydra,Fix F4 transponder transponder.,1,[],https://github.com/cleanflight/cleanflight/pull/2631,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2631,Tested on F3/F4 targets using real iLaps receiver hardware.,Tested on F3/F4 targets using real iLaps receiver hardware.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2632,2017-02-28T21:06:06Z,2017-02-28T22:11:31Z,2017-04-01T22:59:48Z,MERGED,True,1,1,1,https://github.com/hydra,CF - Add RTC6705 to VTX list.,1,[],https://github.com/cleanflight/cleanflight/pull/2632,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2632,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2633,2017-03-01T17:42:24Z,2017-03-06T12:34:00Z,2017-03-06T12:34:00Z,MERGED,True,1150764,1115,840,https://github.com/hydra,merge recent betaflight changes,51,[],https://github.com/cleanflight/cleanflight/pull/2633,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2633,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2633,2017-03-01T17:42:24Z,2017-03-06T12:34:00Z,2017-03-06T12:34:00Z,MERGED,True,1150764,1115,840,https://github.com/hydra,merge recent betaflight changes,51,[],https://github.com/cleanflight/cleanflight/pull/2633,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2633#issuecomment-283663241,,Transponder changes from betaflight are untested and conflict with working code in cleanflight.  Waiting for @blckmn to test and report back.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2635,2017-03-04T06:24:37Z,2017-03-04T22:22:01Z,2017-03-04T22:22:18Z,CLOSED,False,113583,17651,666,https://github.com/dammstanger,Update Project 20170304,1907,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2635,https://github.com/dammstanger,1,https://github.com/cleanflight/cleanflight/pull/2635,"update the project at 20170304
Sorry ,I've made a mistake, please ignore this pull requests.","update the project at 20170304
Sorry ,I've made a mistake, please ignore this pull requests.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2637,2017-03-04T22:45:30Z,2017-03-05T01:23:57Z,2017-04-01T22:59:46Z,MERGED,True,0,3,1,https://github.com/hydra,CF/BF - SPRACINGF3EVO - remove the two #undefs to enable softserial,1,[],https://github.com/cleanflight/cleanflight/pull/2637,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2637,…the serial port count was mismatched and causing duplicate serial ports to appear in the configurator.,…the serial port count was mismatched and causing duplicate serial ports to appear in the configurator.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2638,2017-03-05T00:59:53Z,2017-03-05T01:23:42Z,2017-03-05T01:23:42Z,MERGED,True,8,3,1,https://github.com/hydra,CF/BF - Fix AK8975 mag detection,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2638,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2638,"was broken by 196baa4.
The bit to enable bypass mode was incorrect.
@blckmn @borisbstyle you'll probably want to pull this into betaflight to close betaflight/betaflight#2555","was broken by 196baa4.
The bit to enable bypass mode was incorrect.
@blckmn @borisbstyle you'll probably want to pull this into betaflight to close betaflight/betaflight#2555",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2638,2017-03-05T00:59:53Z,2017-03-05T01:23:42Z,2017-03-05T01:23:42Z,MERGED,True,8,3,1,https://github.com/hydra,CF/BF - Fix AK8975 mag detection,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2638,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2638#issuecomment-284197710,"was broken by 196baa4.
The bit to enable bypass mode was incorrect.
@blckmn @borisbstyle you'll probably want to pull this into betaflight to close betaflight/betaflight#2555",tested on SPRACINGF3MINI,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2639,2017-03-05T11:02:59Z,2017-03-05T21:54:14Z,2017-03-06T20:59:32Z,MERGED,True,7,5,1,https://github.com/hydra,CF/BF - Further MPU9250/AK8975 mag cleanup.,1,[],https://github.com/cleanflight/cleanflight/pull/2639,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2639,as per comments by @martinbudden  on betaflight/betaflight#2556 (review),as per comments by @martinbudden  on betaflight/betaflight#2556 (review),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2641,2017-03-06T09:26:24Z,2017-03-06T12:33:59Z,2017-03-06T12:33:59Z,MERGED,True,1150752,1118,838,https://github.com/hydra,Merge betaflight master changes,52,[],https://github.com/cleanflight/cleanflight/pull/2641,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2641,Merge commit also resolves the F4 transponder conflicts.,Merge commit also resolves the F4 transponder conflicts.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2642,2017-03-06T20:48:59Z,2017-03-06T21:18:04Z,2017-03-06T21:18:04Z,MERGED,True,572,445,29,https://github.com/hydra,merge recent betaflight changes,8,[],https://github.com/cleanflight/cleanflight/pull/2642,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2642,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2643,2017-03-07T23:12:54Z,2017-03-10T19:02:28Z,2017-04-01T22:59:45Z,MERGED,True,63,39,4,https://github.com/hydra,OSD improvements,10,[],https://github.com/cleanflight/cleanflight/pull/2643,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2643,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2643,2017-03-07T23:12:54Z,2017-03-10T19:02:28Z,2017-04-01T22:59:45Z,MERGED,True,63,39,4,https://github.com/hydra,OSD improvements,10,[],https://github.com/cleanflight/cleanflight/pull/2643,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2643#issuecomment-284903703,,"@mikeller this is a work-in-progress branch which I will force push to periodically while I do some cleanup and merges from the cleanflight osd code.  I was interrupted by the G/F and just pushed un-finished code earlier, hence the do-not-merge label 😄",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2643,2017-03-07T23:12:54Z,2017-03-10T19:02:28Z,2017-04-01T22:59:45Z,MERGED,True,63,39,4,https://github.com/hydra,OSD improvements,10,[],https://github.com/cleanflight/cleanflight/pull/2643,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2643#issuecomment-284915847,,"Ha, maybe we need a 'work in progress' label. I understood the 'don't merge' label to be 'needs discussion / testing first'.
Or maybe a 'GF' label. :-P",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2643,2017-03-07T23:12:54Z,2017-03-10T19:02:28Z,2017-04-01T22:59:45Z,MERGED,True,63,39,4,https://github.com/hydra,OSD improvements,10,[],https://github.com/cleanflight/cleanflight/pull/2643,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2643#issuecomment-284983986,,@mikeller I will add the work-in-progress label,True,{'LAUGH': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2644,2017-03-08T18:59:19Z,2017-03-08T22:12:09Z,2017-03-08T22:12:20Z,MERGED,True,1017,127,24,https://github.com/hydra,merge recent betaflight changes,32,[],https://github.com/cleanflight/cleanflight/pull/2644,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2644,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2645,2017-03-09T15:20:48Z,2017-03-10T00:24:07Z,2017-03-10T00:24:07Z,CLOSED,False,640,906,48,https://github.com/michael-blue2,change camera settings from betaflight osd,7,[],https://github.com/cleanflight/cleanflight/pull/2645,https://github.com/michael-blue2,1,https://github.com/cleanflight/cleanflight/pull/2645,"Is it possible to make a feuture that we will connect the osd cable from our camera to a uart port, and change the settings of the camera using Taranis or betaflight osd, without having to take apart each time our quads to connect the osd cable and change the settings of our cameras","Is it possible to make a feuture that we will connect the osd cable from our camera to a uart port, and change the settings of the camera using Taranis or betaflight osd, without having to take apart each time our quads to connect the osd cable and change the settings of our cameras",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2645,2017-03-09T15:20:48Z,2017-03-10T00:24:07Z,2017-03-10T00:24:07Z,CLOSED,False,640,906,48,https://github.com/michael-blue2,change camera settings from betaflight osd,7,[],https://github.com/cleanflight/cleanflight/pull/2645,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2645#issuecomment-285530852,"Is it possible to make a feuture that we will connect the osd cable from our camera to a uart port, and change the settings of the camera using Taranis or betaflight osd, without having to take apart each time our quads to connect the osd cable and change the settings of our cameras","Yes it is possible. But you opened this as a pull request, which does not make sense. Please open it as an issue, so we can keep track of it as a feature request.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2646,2017-03-10T18:29:51Z,2017-03-10T19:02:14Z,2017-03-10T19:02:15Z,MERGED,True,657,1315,50,https://github.com/hydra,merge recent betaflight changes,13,[],https://github.com/cleanflight/cleanflight/pull/2646,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2646,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2647,2017-03-12T10:26:57Z,2017-03-12T11:42:14Z,2017-03-12T11:42:14Z,MERGED,True,315,4,7,https://github.com/hydra,merge recent betaflight changes,9,[],https://github.com/cleanflight/cleanflight/pull/2647,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2647,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2648,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.",True,{'THUMBS_UP': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-285953690,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.",I now have a very very very strong feeling that the ADC code should be seperated from the battery task.  especially when you consider that if you have a battery voltage source that is NOT the FC but you still want to create telemetry/buzzer/osd warnings/alarms.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-285953772,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","also, the filtering frequency of the ADC need not be the same as the frequency as the ""battery"" task.
wondering if an ""alarms"" task is more appropriate.  thinking out loud here.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-285953901,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","also, the code is now littered with checks for the ESC sensor and that can all be cleaned up",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-285954212,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","regarding frequency of battery task, the BATTERY task, does not need to be scheduled at 50hz.  the ADC on the other hand, might still want to be 50hz.  likely the alarms, cell checking and other battery code can run at just 1hz.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-285955506,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.",I think splitting the battery task makes sense.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-285957015,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","@martinbudden okey doke, i'll take a look.  gonna have a break from the code now to further clarify my thoughts on the subject.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-286591222,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","@martinbudden @mikeller ok, I did some major work on this today.

battery voltage and current adc and virtual current meter and/or esc sensors samples/updated at 50hz
battery states calculated at 5 hz.
battery state calculation cleaned up
some flight specific code moved into the tasks, not battery.c to reduce flight specific dependencies.
osd 'LAND NOW' message added.
loads of battery globals removed and replaced with private state.
battery / voltage / current api's clarified.
bugs fixed (with regards to consumptionState)
crazy 'lets update the battery presence state as soon as we arm' code removed.
FEATURE_VBAT removed.
FEATURE_CURRENT_METER removed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/mikeller,9,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-287236963,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","should we add batteryAmperage?

I think so.

should we add batteryPercentageRemaining?

I'd probably rather go for batteryTotalCapacity, and let the client do the maths if percentage is desired.

should we add batteryState (which is really a combined voltage AND consumption alert state)?

I think so.
￼> should we add batteryVoltageState and batteryConsumptionState?
No, I think batteryState gives enough detail.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-287305211,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","@mikeller thanks for the responses, agreed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-287305734,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.",Note: batteryTotalCapacity can be obtained from MSP_BATTERY_CONFIG but if we're removing configuration MSP commands in the future I'm happy to add the capacity to MSP_BATTERY_STATE,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-287466454,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","the CLI has no support for PG_ARRAYs. so storing an array of configuration for the ADC and VIRTUAL current meters will not work.  Additionally the configuration requirements of the ADC and VIRTUAL sensors, while currently being identical, may not be in future, so tying the implementations and configuration together in a PG_ARRAY is probably not good anyway.  I will split the configuration and add two new CLI commands to support independent configuration of current and adc sensors.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-287467156,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.",all tested and working on an SPRacingF3NEO hardware.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-287550286,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","i reverted the changes to the i2c_bst.c, since TBS won't be updating their OSD firmware there is no point adding new features to it, we just need to keep it compatible.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,15,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-287565064,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.","@martinbudden done, see 9912229",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2648,2017-03-12T14:46:07Z,2017-03-19T02:06:53Z,2017-04-01T22:59:25Z,MERGED,True,1787,695,80,https://github.com/hydra,Battery / Voltage / Current cleanup,25,[],https://github.com/cleanflight/cleanflight/pull/2648,https://github.com/hydra,16,https://github.com/cleanflight/cleanflight/pull/2648#issuecomment-287570031,"Port some CF v1.x cleanups from #2221 to CF v2.x
The goals of this PR are:

 Separate the concerns of battery from voltage
 Separate the concerns of battery from current.
 Separate the concerns of alarms from specific voltage and current meters.
 Update the MSP code to allow configuration of a single battery (e.g min/max cell voltage)
 Update the MSP code to allow configuration of any kind of voltage meter
 Update the MSP code to allow configuration of any kind of current meter
 Update the MSP code to expose any number of voltage meters
 Update the MSP code to expose any number of current meters

all this is especially relevant now that the follow types of sensors are available:
FC built in voltage sensors (one or more)
FC built in current sensors (generally only one)
Telemetry / RX voltage sensors that can be read by the FC (one or more)
Telemetry / RX current sensors that can be read by the FC (generally only one)
ESC based voltage sensors (one per esc)
ESC based current sensors (one per esc)
external sensors that measure per-cell and total voltages (generally only one).
other remote sensors that have voltage, current and RSSI inputs - e.g. PCBs with an MCU with I2C/CAN/UART connection such as MinimOSD, SPRacingF3OSD.
As a side note there has long been the desire to have per-cell metering done by the FC.
Key points:

each type of SENSOR has different configuration requirements (some, none, etc).
some types of SENSORS have identical configuration requirements to others (e.g. ADC current and Virtual current) - but this should not necessarily mean the configuration is shared as once is it shared it's hard to separate concerns.
battery concerns should not be mixed with sensor concerns.  e.g. values for cell detection (min/max cell voltage) have nothing to do with a VOLTAGE SENSOR.  values for battery capacity have nothing to do with a CURRENT SENSOR.
meters can have multiple outputs, based on one or more sensors.  e.g.  current METER calculates AMPERAGE and mAH drawn from a single current SENSOR.
Meters use sensors - they are closely related but have separate concerns.

outstanding tasks

 cli configuration of virtual current sensor configuration
 fix tests, builds
 rewrite git history
 check PR changes for FIXMEs.
 complete and test MSP changes.",rebased against master after merging latest betaflight changes.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2650,2017-03-13T10:18:22Z,2017-03-13T11:06:26Z,2017-03-13T11:06:26Z,MERGED,True,45,22,4,https://github.com/hydra,merge recent betaflight changes,4,[],https://github.com/cleanflight/cleanflight/pull/2650,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2650,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2652,2017-03-13T20:03:05Z,2017-03-13T20:34:58Z,2017-03-13T20:58:31Z,CLOSED,False,16,7,2,https://github.com/geniola,SP3 omnibus v2 no lpt,4,[],https://github.com/cleanflight/cleanflight/pull/2652,https://github.com/geniola,1,https://github.com/cleanflight/cleanflight/pull/2652,"I tried to update the firmware Flip 32 omnibus pro sd v.2 with Betaflight with Zelig I managed to configure Betaflight in DFU and I did the firmware flash that I did not succeed but then connecting the Omnibus Pro I no longer see any LPT port, I am bewildered not understand anything ....","I tried to update the firmware Flip 32 omnibus pro sd v.2 with Betaflight with Zelig I managed to configure Betaflight in DFU and I did the firmware flash that I did not succeed but then connecting the Omnibus Pro I no longer see any LPT port, I am bewildered not understand anything ....",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2652,2017-03-13T20:03:05Z,2017-03-13T20:34:58Z,2017-03-13T20:58:31Z,CLOSED,False,16,7,2,https://github.com/geniola,SP3 omnibus v2 no lpt,4,[],https://github.com/cleanflight/cleanflight/pull/2652,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2652#issuecomment-286235020,"I tried to update the firmware Flip 32 omnibus pro sd v.2 with Betaflight with Zelig I managed to configure Betaflight in DFU and I did the firmware flash that I did not succeed but then connecting the Omnibus Pro I no longer see any LPT port, I am bewildered not understand anything ....","Hi @geniola. This is GitHub, it is for software development related questions and discussions.
For general configuration help please ask on RCGroups: http://www.rcgroups.com/forums/showthread.php?t=2249574",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2652,2017-03-13T20:03:05Z,2017-03-13T20:34:58Z,2017-03-13T20:58:31Z,CLOSED,False,16,7,2,https://github.com/geniola,SP3 omnibus v2 no lpt,4,[],https://github.com/cleanflight/cleanflight/pull/2652,https://github.com/geniola,3,https://github.com/cleanflight/cleanflight/pull/2652#issuecomment-286241640,"I tried to update the firmware Flip 32 omnibus pro sd v.2 with Betaflight with Zelig I managed to configure Betaflight in DFU and I did the firmware flash that I did not succeed but then connecting the Omnibus Pro I no longer see any LPT port, I am bewildered not understand anything ....","I tried to update the flight board firmware SP3 pro omnibus ver.2 but I
lost the ST32 driver on LPT port because when I connect the USB adapter
does not work, I do not see more devices under management to voice the LPT
ST32 drivers. ..

2017-03-13 21:35 GMT+01:00 Michael Keller <notifications@github.com>:
…
 Hi @geniola <https://github.com/geniola>. This is GitHub, it is for
 software development related questions and discussions.

 For general configuration help please ask on RCGroups:
 http://www.rcgroups.com/forums/showthread.php?t=2249574

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#2652 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/APmrBfp8BtRVnw6RCjQp6RFmyocLTVh8ks5rlah4gaJpZM4Mbv1Y>
 .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2653,2017-03-16T17:00:30Z,2017-03-16T17:56:06Z,2017-03-16T17:56:06Z,MERGED,True,710,400,21,https://github.com/hydra,merge recent betaflight changes,23,[],https://github.com/cleanflight/cleanflight/pull/2653,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2653,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2655,2017-03-18T15:52:38Z,2017-03-18T19:08:56Z,2017-03-18T19:08:56Z,MERGED,True,121,441,9,https://github.com/hydra,merge recent betaflight changes,14,[],https://github.com/cleanflight/cleanflight/pull/2655,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2655,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2657,2017-03-18T20:29:57Z,2017-03-18T20:53:44Z,2017-04-01T22:59:44Z,MERGED,True,2,1,1,https://github.com/hydra,fix missing yaw default when using PGs.,1,[],https://github.com/cleanflight/cleanflight/pull/2657,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2657,this resulted in no yaw from RC input.,this resulted in no yaw from RC input.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2658,2017-03-18T20:57:20Z,2017-03-18T21:40:16Z,2017-04-01T22:59:27Z,MERGED,True,1,1,1,https://github.com/hydra,Add SPRacingF3NEO and SPRacingF3MINI to official targets list.,1,[],https://github.com/cleanflight/cleanflight/pull/2658,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2658,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2659,2017-03-19T00:33:08Z,2017-03-19T00:51:08Z,2017-03-19T00:51:08Z,CLOSED,False,104,55,10,https://github.com/hydra,merge recent betaflight changes,9,[],https://github.com/cleanflight/cleanflight/pull/2659,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2659,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2659,2017-03-19T00:33:08Z,2017-03-19T00:51:08Z,2017-03-19T00:51:08Z,CLOSED,False,104,55,10,https://github.com/hydra,merge recent betaflight changes,9,[],https://github.com/cleanflight/cleanflight/pull/2659,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2659#issuecomment-287586059,,merged by command line.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2660,2017-03-19T01:35:43Z,2017-03-19T02:10:02Z,2017-03-19T02:10:02Z,MERGED,True,88,54,7,https://github.com/hydra,merge recent betaflight changes,44,[],https://github.com/cleanflight/cleanflight/pull/2660,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2660,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2661,2017-03-19T10:19:23Z,2017-03-19T11:34:02Z,2017-04-22T20:35:32Z,CLOSED,False,2145,789,89,https://github.com/hydra,Battery cleanup,42,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2661,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2661,from CF #2648,from CF #2648,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2662,2017-03-19T11:35:09Z,2017-03-19T11:39:51Z,2017-03-19T11:39:51Z,MERGED,True,2159,797,93,https://github.com/hydra,merge recent betaflight changes,46,[],https://github.com/cleanflight/cleanflight/pull/2662,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2662,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2664,2017-03-19T18:48:44Z,2017-03-21T21:14:55Z,2017-03-21T21:19:17Z,MERGED,True,163,1087,10,https://github.com/hydra,Remove msp cruft,8,[],https://github.com/cleanflight/cleanflight/pull/2664,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2664,"Goals of this PR

 Remove long-deprecated MSP commands, like MSP_MISC, and MSP_BF_*
 Provide appropriate new MSP commands alternatives for the things added to MSP_MISC and MSP_BF_CONFIG.  See MSP_MOTOR_CONFIG, MSP_GPS_CONFIG, MSP_COMPASS_CONFIG.
 Rename some other MSP commands, for clarity.
 Remove some MSP commands that have been long unused by the CF/BF configurators.
 Remove cruft from BST that was never used.
 Disable RX_MSP on COLIBRI_RACE - unneeded on that target since the power-cube is designed for normal radio receivers only.
 Delete other cruft found along the journey.","Goals of this PR

 Remove long-deprecated MSP commands, like MSP_MISC, and MSP_BF_*
 Provide appropriate new MSP commands alternatives for the things added to MSP_MISC and MSP_BF_CONFIG.  See MSP_MOTOR_CONFIG, MSP_GPS_CONFIG, MSP_COMPASS_CONFIG.
 Rename some other MSP commands, for clarity.
 Remove some MSP commands that have been long unused by the CF/BF configurators.
 Remove cruft from BST that was never used.
 Disable RX_MSP on COLIBRI_RACE - unneeded on that target since the power-cube is designed for normal radio receivers only.
 Delete other cruft found along the journey.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2664,2017-03-19T18:48:44Z,2017-03-21T21:14:55Z,2017-03-21T21:19:17Z,MERGED,True,163,1087,10,https://github.com/hydra,Remove msp cruft,8,[],https://github.com/cleanflight/cleanflight/pull/2664,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2664#issuecomment-287764706,"Goals of this PR

 Remove long-deprecated MSP commands, like MSP_MISC, and MSP_BF_*
 Provide appropriate new MSP commands alternatives for the things added to MSP_MISC and MSP_BF_CONFIG.  See MSP_MOTOR_CONFIG, MSP_GPS_CONFIG, MSP_COMPASS_CONFIG.
 Rename some other MSP commands, for clarity.
 Remove some MSP commands that have been long unused by the CF/BF configurators.
 Remove cruft from BST that was never used.
 Disable RX_MSP on COLIBRI_RACE - unneeded on that target since the power-cube is designed for normal radio receivers only.
 Delete other cruft found along the journey.","Update from the guys at TBS regarding which BST commands are used:
[20/03/2017, 09:27:49] Dominic Clifton: can you give me an exact list of the BST commands that are used by each product.
you should be able to search your source to find them.
i.e. BST_API_VERSION, BST_MIXER, BST_MODE_RANGES, etc etc.
[20/03/2017, 13:46:12] Remo Masina: This is a list of al the frames we currently use:
BST_MAG_CALIBRATION,
BST_ACC_CALIBRATION,
BST_SET_PID,
BST_SET_RC_TUNING,
BST_SET_LOOP_TIME,
BST_SELECT_SETTING,
BST_SET_RX_MAP,
BST_SET_MISC,
BST_SET_DEADBAND,
BST_SET_FC_FILTERS,
BST_SET_FEATURE,
BST_SET_RX_CONFIG,
BST_SET_MODE_RANGE,
BST_SET_LED_COLORS,
BST_EEPROM_WRITE,
BST_REBOOT,
BST_DISARM,
BST_ENABLE_ARM,
BST_PID,
BST_STATUS,
BST_RC_TUNING,
BST_LOOP_TIME,
BST_RX_MAP,
BST_MISC,
BST_DEADBAND,
BST_FC_FILTERS,
BST_FEATURE,
BST_RX_CONFIG,
[20/03/2017, 13:46:31] Dominic Clifton: awesome
[20/03/2017, 13:46:40] Dominic Clifton: i will delete everything else not on that list",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2664,2017-03-19T18:48:44Z,2017-03-21T21:14:55Z,2017-03-21T21:19:17Z,MERGED,True,163,1087,10,https://github.com/hydra,Remove msp cruft,8,[],https://github.com/cleanflight/cleanflight/pull/2664,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2664#issuecomment-287847269,"Goals of this PR

 Remove long-deprecated MSP commands, like MSP_MISC, and MSP_BF_*
 Provide appropriate new MSP commands alternatives for the things added to MSP_MISC and MSP_BF_CONFIG.  See MSP_MOTOR_CONFIG, MSP_GPS_CONFIG, MSP_COMPASS_CONFIG.
 Rename some other MSP commands, for clarity.
 Remove some MSP commands that have been long unused by the CF/BF configurators.
 Remove cruft from BST that was never used.
 Disable RX_MSP on COLIBRI_RACE - unneeded on that target since the power-cube is designed for normal radio receivers only.
 Delete other cruft found along the journey.","It's currently unclear if LED STRIP configuration is used.  BST Functionality kept for the time being until this question can be answered.   In the reply above BST_SET_LED_COLORS was listed, but there are 4 commands for the LED strip API as follows:

#define BST_LED_COLORS                  46
#define BST_SET_LED_COLORS              47

#define BST_LED_STRIP_CONFIG            48
#define BST_SET_LED_STRIP_CONFIG        49

therefore we do not know if the feature is really needed.  it would be strange to keep only one command out of the four.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2664,2017-03-19T18:48:44Z,2017-03-21T21:14:55Z,2017-03-21T21:19:17Z,MERGED,True,163,1087,10,https://github.com/hydra,Remove msp cruft,8,[],https://github.com/cleanflight/cleanflight/pull/2664,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2664#issuecomment-287851868,"Goals of this PR

 Remove long-deprecated MSP commands, like MSP_MISC, and MSP_BF_*
 Provide appropriate new MSP commands alternatives for the things added to MSP_MISC and MSP_BF_CONFIG.  See MSP_MOTOR_CONFIG, MSP_GPS_CONFIG, MSP_COMPASS_CONFIG.
 Rename some other MSP commands, for clarity.
 Remove some MSP commands that have been long unused by the CF/BF configurators.
 Remove cruft from BST that was never used.
 Disable RX_MSP on COLIBRI_RACE - unneeded on that target since the power-cube is designed for normal radio receivers only.
 Delete other cruft found along the journey.","After deleting BST cruft in 71c081a the following was observed:
BEFORE:
   text	   data	    bss	    dec	    hex	filename
 230236	   7660	  24888	 262784	  40280	./obj/main/cleanflight_COLIBRI_RACE.elf

AFTER:
   text	   data	    bss	    dec	    hex	filename
 225320	   7660	  24884	 257864	  3ef48	./obj/main/cleanflight_COLIBRI_RACE.elf",True,"{'HOORAY': ['https://github.com/mikeller', 'https://github.com/wind0r']}"
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2669,2017-03-20T21:32:54Z,2017-03-21T21:15:10Z,2017-04-01T22:59:22Z,MERGED,True,2,4,1,https://github.com/hydra,CF/BF - SPRACINGF3NEO - Fix incorrect LED strip output pin.,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2669,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2669,"Allow LED and transponder even when DSHOT is compiled.
Enabling LED_STRIP and/or TRANSPONDER will break DSHOT on motor outputs
1 and 3.
Without DSHOT, LED_STRIP and TRANSPONDER work fine, at the same time.","Allow LED and transponder even when DSHOT is compiled.
Enabling LED_STRIP and/or TRANSPONDER will break DSHOT on motor outputs
1 and 3.
Without DSHOT, LED_STRIP and TRANSPONDER work fine, at the same time.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2671,2017-03-21T21:42:54Z,2017-03-21T21:43:05Z,2017-03-21T21:43:05Z,MERGED,True,31,0,1,https://github.com/hydra,CF/BF - Restore BST_API_VERSION and BST_BUILD_INFO,1,[],https://github.com/cleanflight/cleanflight/pull/2671,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2671,"Based on updated requirements from TBS engineers.
Larry Ho: ""
BST_MAG_CALIBRATION,
BST_ACC_CALIBRATION,
BST_SET_PID,
BST_SET_RC_TUNING,
BST_SET_LOOP_TIME,
BST_SELECT_SETTING,
BST_SET_RX_MAP,
BST_SET_MISC,
BST_SET_DEADBAND,
BST_SET_FC_FILTERS,
BST_SET_FEATURE,
BST_SET_RX_CONFIG,
BST_SET_MODE_RANGE,
BST_SET_LED_COLORS,
BST_SET_LED_STRIP_CONFIG,
BST_EEPROM_WRITE,
BST_REBOOT,
BST_DISARM,
BST_ENABLE_ARM,
BST_PID,
BST_STATUS,
BST_RC_TUNING,
BST_LOOP_TIME,
BST_RX_MAP,
BST_MISC,
BST_DEADBAND,
BST_FC_FILTERS,
BST_FEATURE,
BST_RX_CONFIG,
BST_LED_COLORS,
BST_LED_STRIP_CONFIG,
BST_API_VERSION""
There was a required to keep BST_BF_BUILD_INFO, which is not on the
list above, but has been deprecated for ages.  Since it was never used
we will keep the replacement BS_BUILD_INFO instead.
Dominic Clifton: ""I will keep BST_BUILD_INFO and BST_API_VERSION and all
the ones on your list above.""","Based on updated requirements from TBS engineers.
Larry Ho: ""
BST_MAG_CALIBRATION,
BST_ACC_CALIBRATION,
BST_SET_PID,
BST_SET_RC_TUNING,
BST_SET_LOOP_TIME,
BST_SELECT_SETTING,
BST_SET_RX_MAP,
BST_SET_MISC,
BST_SET_DEADBAND,
BST_SET_FC_FILTERS,
BST_SET_FEATURE,
BST_SET_RX_CONFIG,
BST_SET_MODE_RANGE,
BST_SET_LED_COLORS,
BST_SET_LED_STRIP_CONFIG,
BST_EEPROM_WRITE,
BST_REBOOT,
BST_DISARM,
BST_ENABLE_ARM,
BST_PID,
BST_STATUS,
BST_RC_TUNING,
BST_LOOP_TIME,
BST_RX_MAP,
BST_MISC,
BST_DEADBAND,
BST_FC_FILTERS,
BST_FEATURE,
BST_RX_CONFIG,
BST_LED_COLORS,
BST_LED_STRIP_CONFIG,
BST_API_VERSION""
There was a required to keep BST_BF_BUILD_INFO, which is not on the
list above, but has been deprecated for ages.  Since it was never used
we will keep the replacement BS_BUILD_INFO instead.
Dominic Clifton: ""I will keep BST_BUILD_INFO and BST_API_VERSION and all
the ones on your list above.""",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2673,2017-03-22T10:58:10Z,2017-03-29T09:55:45Z,2017-03-29T10:06:10Z,MERGED,True,170,0,1,https://github.com/McGiverGim,Document customized version,1,[],https://github.com/cleanflight/cleanflight/pull/2673,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2673,"According to the issue #2654 I've created a little document explaining how to compile your own version of CleanFlight, especially useful in the latest version 2.x that has disabled a lot of features that worked in version 1.x.
This document explains how to disable and enable some features in the code. In this way you can, for example, have magnetometer or GPS in a NAZE32 flight controller.
This document is aimed to people with some programming skill, maybe in a future the process can be automated to let every user create it's own online customized version.
I'm not english native, so it needs a good revision.
I've put it in the docs folder, I don't know if it will be better in the docs/development. I can change it if it's necessary.
Regards!","According to the issue #2654 I've created a little document explaining how to compile your own version of CleanFlight, especially useful in the latest version 2.x that has disabled a lot of features that worked in version 1.x.
This document explains how to disable and enable some features in the code. In this way you can, for example, have magnetometer or GPS in a NAZE32 flight controller.
This document is aimed to people with some programming skill, maybe in a future the process can be automated to let every user create it's own online customized version.
I'm not english native, so it needs a good revision.
I've put it in the docs folder, I don't know if it will be better in the docs/development. I can change it if it's necessary.
Regards!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2673,2017-03-22T10:58:10Z,2017-03-29T09:55:45Z,2017-03-29T10:06:10Z,MERGED,True,170,0,1,https://github.com/McGiverGim,Document customized version,1,[],https://github.com/cleanflight/cleanflight/pull/2673,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2673#issuecomment-289728684,"According to the issue #2654 I've created a little document explaining how to compile your own version of CleanFlight, especially useful in the latest version 2.x that has disabled a lot of features that worked in version 1.x.
This document explains how to disable and enable some features in the code. In this way you can, for example, have magnetometer or GPS in a NAZE32 flight controller.
This document is aimed to people with some programming skill, maybe in a future the process can be automated to let every user create it's own online customized version.
I'm not english native, so it needs a good revision.
I've put it in the docs folder, I don't know if it will be better in the docs/development. I can change it if it's necessary.
Regards!","I think I need to modify the document, as stated by @mikeller in #2678 :

Re your comments above, you should never have to modify target/common.h in order to be able to build > a single target. What you should do (if you have to modify anyting), is to modify the target specific file in > target/<target name/target.h for example if you want to stop telemetry from being built, and there is a > > #define TELEMETRY in target/common.h, simply add an #undef TELEMETRY into the target.h file for your > target. Since this file is parsed after common.h, it will undo the earlier define.

I will modify it and recommit again.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2673,2017-03-22T10:58:10Z,2017-03-29T09:55:45Z,2017-03-29T10:06:10Z,MERGED,True,170,0,1,https://github.com/McGiverGim,Document customized version,1,[],https://github.com/cleanflight/cleanflight/pull/2673,https://github.com/McGiverGim,3,https://github.com/cleanflight/cleanflight/pull/2673#issuecomment-289742807,"According to the issue #2654 I've created a little document explaining how to compile your own version of CleanFlight, especially useful in the latest version 2.x that has disabled a lot of features that worked in version 1.x.
This document explains how to disable and enable some features in the code. In this way you can, for example, have magnetometer or GPS in a NAZE32 flight controller.
This document is aimed to people with some programming skill, maybe in a future the process can be automated to let every user create it's own online customized version.
I'm not english native, so it needs a good revision.
I've put it in the docs folder, I don't know if it will be better in the docs/development. I can change it if it's necessary.
Regards!","Done, changed the document. Thanks!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2676,2017-03-23T21:56:52Z,2017-03-24T02:10:12Z,2017-04-01T22:59:21Z,MERGED,True,6,27,6,https://github.com/hydra,CF/BF - Remove more MSP cruft.,2,[],https://github.com/cleanflight/cleanflight/pull/2676,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2676,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2677,2017-03-25T07:36:18Z,2017-03-29T13:29:44Z,2017-03-29T13:31:54Z,MERGED,True,169,127,10,https://github.com/McGiverGim,Fix compile issues deactivating led strip,1,[],https://github.com/cleanflight/cleanflight/pull/2677,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2677,"This PR solves #2674
Thanks to @ledvinap for the code to make the DEF_TIM accept variable args.
Trying to make a customized version of CleanFlight, I found a problem: if I commented the LED_STRIP feature to get some free space, the compiler shows some issues. This PR makes all the targets compile with and without the LED_STRIP feature.
Please, these code needs some review because:

I've only a NAZE32 board, without leds. So I only can be sure that the code compiles in ALL targets with and without the LED_STRIP feature and it works in the NAZE32. I've not tested it in other boards.
I've a doubt when the values are NULL. For example, in the FURYF4 (that I've not touch in this PR), appears this code commented:
{ TIM8,  IO_TAG(PC9),  TIM_Channel_4, TIM_USE_PPM,   0, GPIO_AF_TIM8,  NULL,         0,             0  }
The actual code is like this:
DEF_TIM(TIM8, CH4, PC9, TIM_USE_PPM,   TIMER_INPUT_ENABLED,  0 )
If I expand the macros manually, the result of this latest line is:
{ TIM8,  IO_TAG(PC9),  TIM_Channel_4, TIM_USE_PPM,   0, GPIO_AF_TIM8, DMA2_ST7_STREAM, DMA_Channel_7, DMA2_ST7_HANDLER }
As you can see there's no NULL value for example. Maybe this parameters are ignored in this case and it's not important, but I've found other boards (changed in this PR) with NULL values that the DEF_TIM changes. Sorry if it's a silly question, but I'm newbie in C code.

Regards!","This PR solves #2674
Thanks to @ledvinap for the code to make the DEF_TIM accept variable args.
Trying to make a customized version of CleanFlight, I found a problem: if I commented the LED_STRIP feature to get some free space, the compiler shows some issues. This PR makes all the targets compile with and without the LED_STRIP feature.
Please, these code needs some review because:

I've only a NAZE32 board, without leds. So I only can be sure that the code compiles in ALL targets with and without the LED_STRIP feature and it works in the NAZE32. I've not tested it in other boards.
I've a doubt when the values are NULL. For example, in the FURYF4 (that I've not touch in this PR), appears this code commented:
{ TIM8,  IO_TAG(PC9),  TIM_Channel_4, TIM_USE_PPM,   0, GPIO_AF_TIM8,  NULL,         0,             0  }
The actual code is like this:
DEF_TIM(TIM8, CH4, PC9, TIM_USE_PPM,   TIMER_INPUT_ENABLED,  0 )
If I expand the macros manually, the result of this latest line is:
{ TIM8,  IO_TAG(PC9),  TIM_Channel_4, TIM_USE_PPM,   0, GPIO_AF_TIM8, DMA2_ST7_STREAM, DMA_Channel_7, DMA2_ST7_HANDLER }
As you can see there's no NULL value for example. Maybe this parameters are ignored in this case and it's not important, but I've found other boards (changed in this PR) with NULL values that the DEF_TIM changes. Sorry if it's a silly question, but I'm newbie in C code.

Regards!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2677,2017-03-25T07:36:18Z,2017-03-29T13:29:44Z,2017-03-29T13:31:54Z,MERGED,True,169,127,10,https://github.com/McGiverGim,Fix compile issues deactivating led strip,1,[],https://github.com/cleanflight/cleanflight/pull/2677,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2677#issuecomment-289421609,"This PR solves #2674
Thanks to @ledvinap for the code to make the DEF_TIM accept variable args.
Trying to make a customized version of CleanFlight, I found a problem: if I commented the LED_STRIP feature to get some free space, the compiler shows some issues. This PR makes all the targets compile with and without the LED_STRIP feature.
Please, these code needs some review because:

I've only a NAZE32 board, without leds. So I only can be sure that the code compiles in ALL targets with and without the LED_STRIP feature and it works in the NAZE32. I've not tested it in other boards.
I've a doubt when the values are NULL. For example, in the FURYF4 (that I've not touch in this PR), appears this code commented:
{ TIM8,  IO_TAG(PC9),  TIM_Channel_4, TIM_USE_PPM,   0, GPIO_AF_TIM8,  NULL,         0,             0  }
The actual code is like this:
DEF_TIM(TIM8, CH4, PC9, TIM_USE_PPM,   TIMER_INPUT_ENABLED,  0 )
If I expand the macros manually, the result of this latest line is:
{ TIM8,  IO_TAG(PC9),  TIM_Channel_4, TIM_USE_PPM,   0, GPIO_AF_TIM8, DMA2_ST7_STREAM, DMA_Channel_7, DMA2_ST7_HANDLER }
As you can see there's no NULL value for example. Maybe this parameters are ignored in this case and it's not important, but I've found other boards (changed in this PR) with NULL values that the DEF_TIM changes. Sorry if it's a silly question, but I'm newbie in C code.

Regards!","Done.
Regards!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2677,2017-03-25T07:36:18Z,2017-03-29T13:29:44Z,2017-03-29T13:31:54Z,MERGED,True,169,127,10,https://github.com/McGiverGim,Fix compile issues deactivating led strip,1,[],https://github.com/cleanflight/cleanflight/pull/2677,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2677#issuecomment-290089877,"This PR solves #2674
Thanks to @ledvinap for the code to make the DEF_TIM accept variable args.
Trying to make a customized version of CleanFlight, I found a problem: if I commented the LED_STRIP feature to get some free space, the compiler shows some issues. This PR makes all the targets compile with and without the LED_STRIP feature.
Please, these code needs some review because:

I've only a NAZE32 board, without leds. So I only can be sure that the code compiles in ALL targets with and without the LED_STRIP feature and it works in the NAZE32. I've not tested it in other boards.
I've a doubt when the values are NULL. For example, in the FURYF4 (that I've not touch in this PR), appears this code commented:
{ TIM8,  IO_TAG(PC9),  TIM_Channel_4, TIM_USE_PPM,   0, GPIO_AF_TIM8,  NULL,         0,             0  }
The actual code is like this:
DEF_TIM(TIM8, CH4, PC9, TIM_USE_PPM,   TIMER_INPUT_ENABLED,  0 )
If I expand the macros manually, the result of this latest line is:
{ TIM8,  IO_TAG(PC9),  TIM_Channel_4, TIM_USE_PPM,   0, GPIO_AF_TIM8, DMA2_ST7_STREAM, DMA_Channel_7, DMA2_ST7_HANDLER }
As you can see there's no NULL value for example. Maybe this parameters are ignored in this case and it's not important, but I've found other boards (changed in this PR) with NULL values that the DEF_TIM changes. Sorry if it's a silly question, but I'm newbie in C code.

Regards!",@mikeller thanks for the review. @McGiverGim thanks for the PR and changes.,True,{'THUMBS_UP': ['https://github.com/McGiverGim']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2679,2017-03-29T13:32:36Z,2017-04-01T13:50:15Z,2017-04-01T13:50:15Z,MERGED,True,1414,1989,115,https://github.com/hydra,merge recent betaflight changes,80,[],https://github.com/cleanflight/cleanflight/pull/2679,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2679,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2681,2017-03-30T07:15:46Z,2017-03-30T09:36:26Z,2017-03-30T09:36:27Z,CLOSED,False,580491,42435,1331,https://github.com/hzc916487783,"in inav I can't get telemetry with my frsky x8r receiver after I follow the docs done all steps, anyone had same problem as me?",2098,[],https://github.com/cleanflight/cleanflight/pull/2681,https://github.com/hzc916487783,1,https://github.com/cleanflight/cleanflight/pull/2681,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2681,2017-03-30T07:15:46Z,2017-03-30T09:36:26Z,2017-03-30T09:36:27Z,CLOSED,False,580491,42435,1331,https://github.com/hzc916487783,"in inav I can't get telemetry with my frsky x8r receiver after I follow the docs done all steps, anyone had same problem as me?",2098,[],https://github.com/cleanflight/cleanflight/pull/2681,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2681#issuecomment-290356610,,"What you opened is a request, not an issue. Closing.
GitHub is for bug reports / discussion about firmware development. For user / setup help please go to RCGroups.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2683,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290725432,,"Yes, it is mandatory.
I will wait until the table is fixed.
Are you directly going to fix it or do you want something from me? 😂",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290726213,,It would be great if someone can crosscheck it against documentation. Volunteers ? ;-),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/McGiverGim,4,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290727387,,"I'm new to all of this, but if you told me what documentation must I look at, I will do it. If it is not difficult, only boring 🤗",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290754045,,"OK, checked, this is the only error on F4",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290919939,,ok @McGiverGim please create your PR and include 27e4fe8 in it.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/McGiverGim,7,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290923515,,"@hydra Do you want that my PR includes the code of the commit or thant I only use the correction included in it? I think that you want the second, but I'm not sure.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/McGiverGim,8,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290923995,,"@hydra PR pushed #2689
If you need that this PR include the commit in the code, I will change it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290929220,,rebased against master,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2683,2017-03-30T19:35:15Z,2017-04-01T16:50:37Z,2017-04-01T19:31:27Z,MERGED,True,333,0,4,https://github.com/hydra,SPRACINGF4EVO - Initial target support,2,[],https://github.com/cleanflight/cleanflight/pull/2683,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2683#issuecomment-290931129,,"rebased and cherry-pciekd the DEF_TIM changes, tested 8 dshot outputs, LED strip and transponder - all OK.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2686,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290719684,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.",Good job. I think that's a good way of fixing the problem.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290722850,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","do {
#if defined(USE_PPM)
    if (feature(FEATURE_RX_PPM)) {
        ppmRxInit(ppmConfig(), motorConfig()->dev.motorPwmProtocol);
        break;
    } 
#endif
#if defined(USE_PWM)
    if (feature(FEATURE_RX_PARALLEL_PWM)) {
        pwmRxInit(pwmConfig());
        break;
    }
#endif
  } while(0);",True,{'THUMBS_UP': ['https://github.com/McGiverGim']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/McGiverGim,4,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290724348,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","@ledvinap I like your code 😁
If it is equivalent I will change it. Some other opinion?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290730272,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.",@ledvinap the do { and the } while(0); are completely superfluous.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290732556,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","@martinbudden : I need something to break out of.
Another possibility is
if(0) {}
#if TEST1
  else if(cond1) { ... }
#endif
#if TESTq
  else if(cond2) { ... }
#endif

The do { } while(0);  is nice idiom when you want to stop on first match ...",True,{'THUMBS_UP': ['https://github.com/hydra']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290745110,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","Perhaps the do while would be useful if it was important to skip the next test. But the thing that is being skipped is a simple bit test if (feature(FEATURE_RX_PARALLEL_PWM)) which is really cheap on ARM. And this is initialisation code, so it only ever occurs once. So I say the do while is totally unnecessary.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290750439,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","FEATURE_RX_PPM has priority over FEATURE_RX_PARALLEL_PWM. Original code used else if to handle this ...
It is quite possible that both features can't be set at same time, but I did not want to change the logic",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/McGiverGim,9,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290752477,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","I've checked my solution against the do-while(0) for size, both generates exactly the same size of hex file in all aspects. Maybe the optimizer generates the same or almost the same code for all of them.

If we don't want to modify the logic, I think I will use the do-while(0).
If we want to modify the logic, and we don't want priority (PPM and PWM can be active at the same time), is better to let only two ifs (without else) with the #if defined before.

Regards!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/ledvinap,10,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290754782,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","@McGiverGim: PWM/PPM share some data, so only one can be active at time.
Config sanitization checks that, but stating it explicitly is IMO good idea ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290932701,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.",I prefer the if (0) {} else solution.  I don't like the loop or the break.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2686,2017-03-31T13:51:43Z,2017-04-01T23:32:26Z,2017-04-05T10:38:31Z,MERGED,True,9,5,1,https://github.com/McGiverGim,Fix compile linking issues when USE_PWM is disabled,1,[],https://github.com/cleanflight/cleanflight/pull/2686,https://github.com/McGiverGim,12,https://github.com/cleanflight/cleanflight/pull/2686#issuecomment-290939874,"This solves #2685
When compiling a target with #undef USE_PWM the linker fails with this message:
Linking NAZE
/tmp/ccCHoCnV.ltrans1.ltrans.o: In function `servoDevInit':
/mnt/d/git/cleanflight-2.x/./src/main/drivers/pwm_output.c:354: undefined reference to `pwmConfig_System'
collect2: error: ld returned 1 exit status
make[1]: *** [obj/main/cleanflight_NAZE.elf] Error 1
make[1]: se sale del directorio «/mnt/d/git/cleanflight-2.x»
make: *** [hex] Error 2

This PR solves the problem. Maybe is not the better code, but I didn't wanted to modify the condition. Reviews are welcome.","Ok, changed to the if (0) {} form, it seems be accepted by all ;)",True,{'THUMBS_UP': ['https://github.com/ledvinap']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2687,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-290751364,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","What do you think?
Checking old version is nightmare ... this simplifies definitions, but macros are even more complicated.
IMO it is worth it, but comments are welcome",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/McGiverGim,3,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-290901117,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","I've been using the DEF_TIM macro in my latest commits and it was a hell. For me, your changes are good and a step ahead in clarity.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-290918194,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","I prefer the new definitions that come as a pair, I think the definitions are easier to maintain and check like that.
What's next for this PR?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-290931940,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","@hydra: I'll rewrite a bit, then port it for other CPUs ...
I wasn't sure about the whole idea behind this...
Also, new implementation actually expands variant number/ID, so variants may be #defined to something meaningful. But changeset will be huge (all target definitions ... )",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-290942985,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","@hydra: I did dive a bit deeper into macros, inferring all necessary identifiers from DMA definition tuple (DMAx, stream, channel)
Even error messages are quite acceptable (with DEF_TIM_DMA__1__BCH_TIM1_CH1 commented out):
%% target.c 
./src/main/target/ALIENFLIGHTF4/target.c:48:219: error: 'DEF_DMA_GET_DMA_STREAM__DEF_TIM_DMA__1__BCH_TIM1_CH1' undeclared here (not in a function)
./src/main/target/ALIENFLIGHTF4/target.c:48:273: error: 'DEF_DMA_GET_DMA_CHAN__DEF_TIM_DMA__1__BCH_TIM1_CH1' undeclared here (not in a function)
./src/main/target/ALIENFLIGHTF4/target.c:48:325: error: 'DEF_DMA_GET_DMA_HANDLER__DEF_TIM_DMA__1__BCH_TIM1_CH1' undeclared here (not in a function)
./src/main/target/ALIENFLIGHTF4/target.c:48:5: warning: missing initializer for field 'dmaRef' of 'timerHardware_t {aka const struct timerHardware_s}' [-Wmissing-field-initializers]
     DEF_TIM(TIM1, CH1, PA8,  TIM_USE_PWM | TIM_USE_PPM, TIMER_INPUT_ENABLED,  1), // PWM1  - PA8  RC1  - DMA2_ST6, *DMA2_ST1, DMA2_ST3
     ^
In file included from ./src/main/target/ALIENFLIGHTF4/target.c:24:0:
./src/main/drivers/timer.h:100:25: note: 'dmaRef' declared here
     DMA_Stream_TypeDef *dmaRef;
                         ^",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-290943100,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","In future, it will be trivial to change DMA definitions as needed, all changes should be quite limited and hidden from user/target.c code ...
We can even use some form of DMA tags (like in IO tags) to save space",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-292355698,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","@ledvinap looks good, what's next?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-292527681,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","I'll finish other CPUs soon ...
Does anyone know if F7 DMA does work? IMO it shouldn't even compile ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-293187636,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.",@sambas can you comment on @ledvinap's question?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,11,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-293901632,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","Other CPUs are converted now ...
Still not finished, some polishing is needed
@hydra: What do you think?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-294190786,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.",DMA variants are now on single line,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,13,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-294192433,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","It would be useful to generate AF table (TIMxCHy_Pxy) for F1 and F4, to check that timer pin assignment is valid, catching user errors ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-294509829,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","This needs a rebase, will take a closer look asap, right now I'm busy with the VTX code.
@martinbudden @mikeller @blckmn - care to take a look?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/martinbudden,15,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-294521962,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","@hydra , I don't really have a view on this - the changes are all internal to timer_def.h which is something I don't maintain. If the people who maintain that file think this makes it easier then fair enough.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/blckmn,16,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-294578730,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.",@hydra looks fine to me. The idea of the definitions was to eliminate updates across all targets if the timerHardware definition changed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,17,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-294782728,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.",Merged upstream,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,18,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-294784749,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.",I'll merge some macros that are the identical for all targets and it should be ready. I don't want to get much deeper into macro magic,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,19,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-296210279,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","Rebased+squashed, should be ready to merge
Generated code is identical",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/mikeller,20,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-297942332,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","Sorry to chime in on this so late, it collided with my holiday / backlog of emails. Looks good to me, the simplification should definitely make it easier to add definitions for new MCUs whenever that comes up. I agree that introducing more preprocessor magic will probably only increase the complexity / dependency on preprocessor libraries. All ok with this being merged?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2687,2017-03-31T15:49:44Z,2017-04-28T20:16:02Z,2017-04-28T20:16:02Z,MERGED,True,583,707,2,https://github.com/ledvinap,Simplify timer DMA definition,2,"['Enhancement', 'Cleanup']",https://github.com/cleanflight/cleanflight/pull/2687,https://github.com/ledvinap,21,https://github.com/cleanflight/cleanflight/pull/2687#issuecomment-297981364,"The idea is to use preprocessor magic to simplify actual mapping
definition, so that mapping database is easier to check/upkeep.","The code is ready. Generated code was identical (on official and group1 targets), so it should not break anything.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2688,2017-04-01T13:23:03Z,2017-04-01T16:31:30Z,2017-04-01T22:59:19Z,MERGED,True,2,2,1,https://github.com/hydra,CF/BF - Fix STM32F4 DMA mappings for TIM8_CH2.,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2688,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2688,"For Tim8Ch2, it should be
0: DMA2_ST3/DMA_Channel_0
1: DMA2_ST2/DMA_Channel_7
#2683 (comment)
See DM00031020 STM32F405xx Reference Manual page 309.
Thanks @ledvinap and @McGiverGim","For Tim8Ch2, it should be
0: DMA2_ST3/DMA_Channel_0
1: DMA2_ST2/DMA_Channel_7
#2683 (comment)
See DM00031020 STM32F405xx Reference Manual page 309.
Thanks @ledvinap and @McGiverGim",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2688,2017-04-01T13:23:03Z,2017-04-01T16:31:30Z,2017-04-01T22:59:19Z,MERGED,True,2,2,1,https://github.com/hydra,CF/BF - Fix STM32F4 DMA mappings for TIM8_CH2.,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2688,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2688#issuecomment-290923130,"For Tim8Ch2, it should be
0: DMA2_ST3/DMA_Channel_0
1: DMA2_ST2/DMA_Channel_7
#2683 (comment)
See DM00031020 STM32F405xx Reference Manual page 309.
Thanks @ledvinap and @McGiverGim",BTW: channel0 variant for TIM1/TIM8 seems to be triggered by any of three channels. This will work as expected only if single channel has DMA enabled ..,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2688,2017-04-01T13:23:03Z,2017-04-01T16:31:30Z,2017-04-01T22:59:19Z,MERGED,True,2,2,1,https://github.com/hydra,CF/BF - Fix STM32F4 DMA mappings for TIM8_CH2.,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2688,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2688#issuecomment-290930940,"For Tim8Ch2, it should be
0: DMA2_ST3/DMA_Channel_0
1: DMA2_ST2/DMA_Channel_7
#2683 (comment)
See DM00031020 STM32F405xx Reference Manual page 309.
Thanks @ledvinap and @McGiverGim","thanks, merging.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2689,2017-04-01T14:35:50Z,2017-04-01T16:51:27Z,2017-04-05T10:39:05Z,CLOSED,False,333,0,4,https://github.com/McGiverGim,Change the timerHardware_t to use the DEF_TIM macro,2,[],https://github.com/cleanflight/cleanflight/pull/2689,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2689,"It's better to use de DEF_TIM macro to create each element of the structure. In this way an user can deactivate the LED_STRIP or DSHOT to get some free space (not needed in the F4 fc, but for coherence with the rest of the boards). All the others config.c of each target use it.
It needs the 27e4fe8 to work.","It's better to use de DEF_TIM macro to create each element of the structure. In this way an user can deactivate the LED_STRIP or DSHOT to get some free space (not needed in the F4 fc, but for coherence with the rest of the boards). All the others config.c of each target use it.
It needs the 27e4fe8 to work.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2689,2017-04-01T14:35:50Z,2017-04-01T16:51:27Z,2017-04-05T10:39:05Z,CLOSED,False,333,0,4,https://github.com/McGiverGim,Change the timerHardware_t to use the DEF_TIM macro,2,[],https://github.com/cleanflight/cleanflight/pull/2689,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2689#issuecomment-290932179,"It's better to use de DEF_TIM macro to create each element of the structure. In this way an user can deactivate the LED_STRIP or DSHOT to get some free space (not needed in the F4 fc, but for coherence with the rest of the boards). All the others config.c of each target use it.
It needs the 27e4fe8 to work.",cherry picked the timer changes into the other PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2690,2017-04-01T17:33:57Z,2017-04-01T19:19:51Z,2017-04-01T22:59:00Z,MERGED,True,67,46,5,https://github.com/hydra,CF/BF - Cleanup transponder config after Arctimer merge.,2,[],https://github.com/cleanflight/cleanflight/pull/2690,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2690,See #2580,See #2580,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2690,2017-04-01T17:33:57Z,2017-04-01T19:19:51Z,2017-04-01T22:59:00Z,MERGED,True,67,46,5,https://github.com/hydra,CF/BF - Cleanup transponder config after Arctimer merge.,2,[],https://github.com/cleanflight/cleanflight/pull/2690,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2690#issuecomment-290936140,See #2580,"@error414 after having thought about the requirements of the client for configuring a transponder code and the existing instructions for users of ILAP codes I will change the MSP commands further.

 clients need to know the list of supported transponders. (e.g. NONE, or ILAP, ARCTIMER, etc)
 clients need to know the data size for each supported transponder so that they can configure the data entry field appropriately without having to maintain a list in the configurator that has to stay in sync with the firmware code.

Note: I decided not to care about backwards compatibility. It's not worth it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2691,2017-04-01T19:07:10Z,2017-04-01T22:57:17Z,2017-04-12T07:54:54Z,CLOSED,False,4,1,1,https://github.com/McGiverGim,Declare osdDisplayPort only ifdef OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2691,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2691,"The actual code gives a warning when compiling a target without OSD:
./src/main/fc/fc_init.c:438:20: warning: unused variable 'osdDisplayPort' [-Wunused-variable]
     displayPort_t *osdDisplayPort = NULL;
                    ^~~~~~~~~~~~~~

This PR declares the variable inside the ifdef to avoid this error.","The actual code gives a warning when compiling a target without OSD:
./src/main/fc/fc_init.c:438:20: warning: unused variable 'osdDisplayPort' [-Wunused-variable]
     displayPort_t *osdDisplayPort = NULL;
                    ^~~~~~~~~~~~~~

This PR declares the variable inside the ifdef to avoid this error.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2691,2017-04-01T19:07:10Z,2017-04-01T22:57:17Z,2017-04-12T07:54:54Z,CLOSED,False,4,1,1,https://github.com/McGiverGim,Declare osdDisplayPort only ifdef OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2691,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2691#issuecomment-290945872,"The actual code gives a warning when compiling a target without OSD:
./src/main/fc/fc_init.c:438:20: warning: unused variable 'osdDisplayPort' [-Wunused-variable]
     displayPort_t *osdDisplayPort = NULL;
                    ^~~~~~~~~~~~~~

This PR declares the variable inside the ifdef to avoid this error.","I've seen other solution in betaflight/betaflight#2791
I don't know what code is better.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2691,2017-04-01T19:07:10Z,2017-04-01T22:57:17Z,2017-04-12T07:54:54Z,CLOSED,False,4,1,1,https://github.com/McGiverGim,Declare osdDisplayPort only ifdef OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2691,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2691#issuecomment-290952625,"The actual code gives a warning when compiling a target without OSD:
./src/main/fc/fc_init.c:438:20: warning: unused variable 'osdDisplayPort' [-Wunused-variable]
     displayPort_t *osdDisplayPort = NULL;
                    ^~~~~~~~~~~~~~

This PR declares the variable inside the ifdef to avoid this error.","the other solution is better, it's not just OSD that uses it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2691,2017-04-01T19:07:10Z,2017-04-01T22:57:17Z,2017-04-12T07:54:54Z,CLOSED,False,4,1,1,https://github.com/McGiverGim,Declare osdDisplayPort only ifdef OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2691,https://github.com/McGiverGim,4,https://github.com/cleanflight/cleanflight/pull/2691#issuecomment-290966392,"The actual code gives a warning when compiling a target without OSD:
./src/main/fc/fc_init.c:438:20: warning: unused variable 'osdDisplayPort' [-Wunused-variable]
     displayPort_t *osdDisplayPort = NULL;
                    ^~~~~~~~~~~~~~

This PR declares the variable inside the ifdef to avoid this error.","Ok. But it is only initialized when the OSD feature is activated, and only used in this case I think. But no problem, with one solution that works I don't need more 😁",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2692,2017-04-01T23:27:30Z,2017-04-02T15:57:16Z,2017-04-22T18:59:30Z,MERGED,True,5,4,1,https://github.com/hydra,CF/BF - Fix Naze32 missing second softserial port.,1,[],https://github.com/cleanflight/cleanflight/pull/2692,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2692,"The NAZE32_SP can only have one port because it the pins are not
available for use as soft serial.
The NAZE32_SP should only configure the I2C pins if USART3 is not used.
See #2668 (comment)","The NAZE32_SP can only have one port because it the pins are not
available for use as soft serial.
The NAZE32_SP should only configure the I2C pins if USART3 is not used.
See #2668 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2692,2017-04-01T23:27:30Z,2017-04-02T15:57:16Z,2017-04-22T18:59:30Z,MERGED,True,5,4,1,https://github.com/hydra,CF/BF - Fix Naze32 missing second softserial port.,1,[],https://github.com/cleanflight/cleanflight/pull/2692,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2692#issuecomment-290967258,"The NAZE32_SP can only have one port because it the pins are not
available for use as soft serial.
The NAZE32_SP should only configure the I2C pins if USART3 is not used.
See #2668 (comment)","Tried the code and with NAZE32 REV6 10DOF the second SoftSerial appears, of course. I don't know about NAZE32_SP.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2692,2017-04-01T23:27:30Z,2017-04-02T15:57:16Z,2017-04-22T18:59:30Z,MERGED,True,5,4,1,https://github.com/hydra,CF/BF - Fix Naze32 missing second softserial port.,1,[],https://github.com/cleanflight/cleanflight/pull/2692,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2692#issuecomment-290994618,"The NAZE32_SP can only have one port because it the pins are not
available for use as soft serial.
The NAZE32_SP should only configure the I2C pins if USART3 is not used.
See #2668 (comment)",@McGiverGim thanks for the update.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2695,2017-04-02T15:43:45Z,2017-04-02T15:44:49Z,2017-04-22T18:59:23Z,MERGED,True,20,15,3,https://github.com/hydra,Fix spracingf3evo mag detection,3,[],https://github.com/cleanflight/cleanflight/pull/2695,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2695,"It was broken, again. 😒
I bisected it, found that this commit broke it:
60c2b81#diff-b0765a975ceb7d528b0ce88f63dcda40L112
the changes seemed incorrect and/or unfinished.
I also added the MPU6500_BIT_BYPASS_EN to the MPU9250 configuration - though this is actually being done twice now, once via the MPU6500 code and once in the al8963 spi detection code.
Please can I respectfully request that any future changes to the MPU9250 and AK8963 code are tested on real hardware.
Note that it's not enough to just run your changes without cold booting, you need to also test from a COLD BOOT and a WARM BOOT.","It was broken, again. 😒
I bisected it, found that this commit broke it:
60c2b81#diff-b0765a975ceb7d528b0ce88f63dcda40L112
the changes seemed incorrect and/or unfinished.
I also added the MPU6500_BIT_BYPASS_EN to the MPU9250 configuration - though this is actually being done twice now, once via the MPU6500 code and once in the al8963 spi detection code.
Please can I respectfully request that any future changes to the MPU9250 and AK8963 code are tested on real hardware.
Note that it's not enough to just run your changes without cold booting, you need to also test from a COLD BOOT and a WARM BOOT.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2699,2017-04-04T06:20:40Z,2017-04-06T23:07:49Z,2017-04-12T07:55:36Z,MERGED,True,2,2,1,https://github.com/McGiverGim,Make the GPS stable again,1,[],https://github.com/cleanflight/cleanflight/pull/2699,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2699,"This PR solves #2698
The GPS is unstable in NAZE32 (customized compilation, as GPS is disabled for F1 targets), but with this little change, based on CleanFlight 1.x, the GPS is stable as rock again. I don't know anything about GPS system, I've only changed lines between 1.x and 2.x until I found the lines that make it work again.
So if someone can take a look at it to see if this change is clean or can have secondary effects will be great. Maybe can be added with #if defined only for NAZE or only fo F1 CPUs. I'm open to test any changes.
Regards!","This PR solves #2698
The GPS is unstable in NAZE32 (customized compilation, as GPS is disabled for F1 targets), but with this little change, based on CleanFlight 1.x, the GPS is stable as rock again. I don't know anything about GPS system, I've only changed lines between 1.x and 2.x until I found the lines that make it work again.
So if someone can take a look at it to see if this change is clean or can have secondary effects will be great. Maybe can be added with #if defined only for NAZE or only fo F1 CPUs. I'm open to test any changes.
Regards!",True,{'THUMBS_UP': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2699,2017-04-04T06:20:40Z,2017-04-06T23:07:49Z,2017-04-12T07:55:36Z,MERGED,True,2,2,1,https://github.com/McGiverGim,Make the GPS stable again,1,[],https://github.com/cleanflight/cleanflight/pull/2699,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2699#issuecomment-292355154,"This PR solves #2698
The GPS is unstable in NAZE32 (customized compilation, as GPS is disabled for F1 targets), but with this little change, based on CleanFlight 1.x, the GPS is stable as rock again. I don't know anything about GPS system, I've only changed lines between 1.x and 2.x until I found the lines that make it work again.
So if someone can take a look at it to see if this change is clean or can have secondary effects will be great. Maybe can be added with #if defined only for NAZE or only fo F1 CPUs. I'm open to test any changes.
Regards!","@McGiverGim thanks for digging into the problem and finding a solution!  much appreciated.  thanks for your contributions recently, keep up the good work!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2700,2017-04-05T08:53:49Z,2017-04-06T23:06:00Z,2017-04-10T09:28:16Z,MERGED,True,2,2,1,https://github.com/edogaldo,Small improvements to README.md,1,[],https://github.com/cleanflight/cleanflight/pull/2700,https://github.com/edogaldo,1,https://github.com/cleanflight/cleanflight/pull/2700,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2701,2017-04-06T23:16:57Z,2017-04-06T23:45:00Z,2017-04-06T23:45:00Z,MERGED,True,3771,1471,72,https://github.com/hydra,merge recent BF changes,124,[],https://github.com/cleanflight/cleanflight/pull/2701,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2701,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2702,2017-04-06T23:57:05Z,2017-04-07T14:02:35Z,2017-04-22T18:59:15Z,MERGED,True,1,3,2,https://github.com/hydra,CF/BF - Enable MAG on NAZE32.,2,[],https://github.com/cleanflight/cleanflight/pull/2702,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2702,"Disabling LTM allows MAG to be enabled.
Likely more users want MAG support than LTM support on a NAZE32 so this makes sense - seems like a shame to waste the MAG sensors on the NAZE32.","Disabling LTM allows MAG to be enabled.
Likely more users want MAG support than LTM support on a NAZE32 so this makes sense - seems like a shame to waste the MAG sensors on the NAZE32.",True,{'THUMBS_UP': ['https://github.com/McGiverGim']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2704,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs","This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-292732997,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs","cleanflight_2.0.0_SPRACINGF3EVO-20170407-2312.zip
cleanflight_2.0.0_SPRACINGF3OSD-20170407-2313.zip
cleanflight_2.0.0_SPRACINGF4EVO-20170407-2313.zip
The above binaries can be used to try it out, remember to do a full-chip erase on both boards.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-292748260,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs","will merge in some BF changes, and then merge this.  configurator updated to support OSD SLAVE boards in cleanflight/cleanflight-configurator#450",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/emma0223,4,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-293160136,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs",Could this file be used in the sp racing mini f3?? Is there any ways in the future the spracing osd will be able to comunícate with bf while the osd is running cf?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/mikeller,5,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-293165027,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs","@emma0223: Depends on what you mean by 'this file'. The SPRACINGF3MINI will be able to control an SPRACING OSD board, but cannot act as an OSD itself, since it does not have the hardware that is required to do this. And yes, Betaflight will be able to work with an SPRACING OSD board, it will probably even be possible to build and run a Betaflight version of the SPRACING OSD code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/emma0223,6,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-293169413,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs","@mikeller .. what I meant was, could I flash a sp racing f3 mini with the Evo hex file found in the beginning of the thread? ..or does the new v2.0 hex for the sp racing f3 mini allows me to control the spracing pdb as a slave like in the video demonstration",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/mikeller,7,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-293176851,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs","Ah, no, the SPRACINGF3EVO firmware will not run on the SPRACINGF3MINI, you'd have to build the SPRACINGF3MINI firmware yourself.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/emma0223,8,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-293312683,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs",Shitt guess I'll have to wait I don't know how to build the software myself ☹️,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/emma0223,9,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-293416481,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs",@mikeller is there a how to on how to build the code yourself or is there some extra line of codes I could just add to v2.0 hex of the spracingmini f3,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-293490278,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs","@emma0223 , see https://github.com/cleanflight/cleanflight/tree/master/docs/development for instructions on how to build on various platforms.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2704,2017-04-08T14:13:06Z,2017-04-09T12:42:33Z,2017-04-12T23:49:58Z,MERGED,True,748,101,27,https://github.com/hydra,SPRACINGF3OSD for CF V2.0.0 via OSD-SLAVE.,10,[],https://github.com/cleanflight/cleanflight/pull/2704,https://github.com/emma0223,11,https://github.com/cleanflight/cleanflight/pull/2704#issuecomment-293738486,"This PR adds support for the SPRACINGF3OSD board, it allows an FC to generate an OSD screen which is then transferred to the OSD board via USART1/ Serial connection (through stacking pins).
The OSD elements are configured using the FC.
The OSD video mode and font are configured using the OSD.
Enter the OSD configuration menu using Throttle Mid, Yaw Left, Roll Center, Pitch High.
To use:

Flash new firmware to SPRACINGF3EVO/SPRACINGF4EVO (build from this branch or see download links below).
Flash new firmware to SPRACINGF3OSD (build from this branch or see download links below).
Enable OSD feature of SPRACINGF3EVO/SPRACINGF4EVO (NOT the SPRACINGF3OSD).
Ensure MSP is enabled on UART1 on board boards.
Upload the font via the font manager on the OSD board using the new configurator, see link below.

https://github.com/cleanflight/cleanflight-configurator/archive/update-for-api-1.33.0.zip
Video demonstration here:
https://www.youtube.com/watch?v=WHRSnqnBQNs",@martinbudden thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2707,2017-04-08T20:49:00Z,2017-04-08T20:49:35Z,2017-04-08T20:49:35Z,CLOSED,False,581715,43461,1333,https://github.com/DzikuVx,Omnibusf4pro current meter calibration,2142,[],https://github.com/cleanflight/cleanflight/pull/2707,https://github.com/DzikuVx,1,https://github.com/cleanflight/cleanflight/pull/2707,the result of todays calibration session. OmnibusF4 Pro users should be able to use CM without extra calibration,the result of todays calibration session. OmnibusF4 Pro users should be able to use CM without extra calibration,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2707,2017-04-08T20:49:00Z,2017-04-08T20:49:35Z,2017-04-08T20:49:35Z,CLOSED,False,581715,43461,1333,https://github.com/DzikuVx,Omnibusf4pro current meter calibration,2142,[],https://github.com/cleanflight/cleanflight/pull/2707,https://github.com/DzikuVx,2,https://github.com/cleanflight/cleanflight/pull/2707#issuecomment-292744714,the result of todays calibration session. OmnibusF4 Pro users should be able to use CM without extra calibration,"wront project, sry",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2709,2017-04-09T12:34:26Z,2017-04-09T12:40:51Z,2017-04-09T12:40:51Z,MERGED,True,414,89,20,https://github.com/hydra,merge recent BF changes,15,[],https://github.com/cleanflight/cleanflight/pull/2709,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2709,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2710,2017-04-09T17:18:48Z,2017-04-11T08:19:05Z,2017-04-20T11:49:43Z,MERGED,True,1174,646,41,https://github.com/hydra, CF/BF - OSD Slave build system,7,[],https://github.com/cleanflight/cleanflight/pull/2710,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2710,"First cut of allow building of the OSD SLAVE board without all the flight controller code.
Likely the dependencies can be further improved.  This is a minimal-impact solution while there are a lot of other Betaflight PRs still pending.","First cut of allow building of the OSD SLAVE board without all the flight controller code.
Likely the dependencies can be further improved.  This is a minimal-impact solution while there are a lot of other Betaflight PRs still pending.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2710,2017-04-09T17:18:48Z,2017-04-11T08:19:05Z,2017-04-20T11:49:43Z,MERGED,True,1174,646,41,https://github.com/hydra, CF/BF - OSD Slave build system,7,[],https://github.com/cleanflight/cleanflight/pull/2710,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2710#issuecomment-293088905,"First cut of allow building of the OSD SLAVE board without all the flight controller code.
Likely the dependencies can be further improved.  This is a minimal-impact solution while there are a lot of other Betaflight PRs still pending.","thanks for the review guys, I'll update the PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2710,2017-04-09T17:18:48Z,2017-04-11T08:19:05Z,2017-04-20T11:49:43Z,MERGED,True,1174,646,41,https://github.com/hydra, CF/BF - OSD Slave build system,7,[],https://github.com/cleanflight/cleanflight/pull/2710,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2710#issuecomment-293181164,"First cut of allow building of the OSD SLAVE board without all the flight controller code.
Likely the dependencies can be further improved.  This is a minimal-impact solution while there are a lot of other Betaflight PRs still pending.","@martinbudden ok, changes made.  I'll merge to master once the build passes and create a BF PR for you.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2710,2017-04-09T17:18:48Z,2017-04-11T08:19:05Z,2017-04-20T11:49:43Z,MERGED,True,1174,646,41,https://github.com/hydra, CF/BF - OSD Slave build system,7,[],https://github.com/cleanflight/cleanflight/pull/2710,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2710#issuecomment-295702763,"First cut of allow building of the OSD SLAVE board without all the flight controller code.
Likely the dependencies can be further improved.  This is a minimal-impact solution while there are a lot of other Betaflight PRs still pending.",@weaselpup what?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2711,2017-04-09T23:00:08Z,2017-04-09T23:05:06Z,2017-04-09T23:05:06Z,MERGED,True,758,107,30,https://github.com/hydra,merge recent bf changes,14,[],https://github.com/cleanflight/cleanflight/pull/2711,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2711,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2713,2017-04-11T18:52:27Z,2017-04-15T16:40:09Z,2017-04-15T16:40:09Z,CLOSED,False,3040,2970,465,https://github.com/hydra,merge recent bf changes,48,[],https://github.com/cleanflight/cleanflight/pull/2713,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2713,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2713,2017-04-11T18:52:27Z,2017-04-15T16:40:09Z,2017-04-15T16:40:09Z,CLOSED,False,3040,2970,465,https://github.com/hydra,merge recent bf changes,48,[],https://github.com/cleanflight/cleanflight/pull/2713,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2713#issuecomment-294304236,,manually merged via command line.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2715,2017-04-13T13:20:12Z,2017-04-23T14:00:19Z,2017-04-23T14:00:19Z,CLOSED,False,577,0,10,https://github.com/theseankelly,Adding target for Crazyflie 2.0 Nanocopter,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2715,https://github.com/theseankelly,1,https://github.com/cleanflight/cleanflight/pull/2715,"STM32F4-based flight controller
Onboard NRF51 soc with custom serial rx protocol (Bluetooth or ESB)

Two general changes to Cleanflight included:

Ability to customize MPU I2C address in target.h (MPU6500's address
can be changed in hardware by holding a pin high)
Addition of a target-specific serial type. Targets must opt-in in
their target.h and provide an implementation of the interface to
convert their custom Rx protocol into RawRC for Cleanflight","STM32F4-based flight controller
Onboard NRF51 soc with custom serial rx protocol (Bluetooth or ESB)

Two general changes to Cleanflight included:

Ability to customize MPU I2C address in target.h (MPU6500's address
can be changed in hardware by holding a pin high)
Addition of a target-specific serial type. Targets must opt-in in
their target.h and provide an implementation of the interface to
convert their custom Rx protocol into RawRC for Cleanflight",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2715,2017-04-13T13:20:12Z,2017-04-23T14:00:19Z,2017-04-23T14:00:19Z,CLOSED,False,577,0,10,https://github.com/theseankelly,Adding target for Crazyflie 2.0 Nanocopter,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2715,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2715#issuecomment-294304107,"STM32F4-based flight controller
Onboard NRF51 soc with custom serial rx protocol (Bluetooth or ESB)

Two general changes to Cleanflight included:

Ability to customize MPU I2C address in target.h (MPU6500's address
can be changed in hardware by holding a pin high)
Addition of a target-specific serial type. Targets must opt-in in
their target.h and provide an implementation of the interface to
convert their custom Rx protocol into RawRC for Cleanflight",related BF PR is here: betaflight/betaflight#2873,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2715,2017-04-13T13:20:12Z,2017-04-23T14:00:19Z,2017-04-23T14:00:19Z,CLOSED,False,577,0,10,https://github.com/theseankelly,Adding target for Crazyflie 2.0 Nanocopter,1,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2715,https://github.com/theseankelly,3,https://github.com/cleanflight/cleanflight/pull/2715#issuecomment-296445288,"STM32F4-based flight controller
Onboard NRF51 soc with custom serial rx protocol (Bluetooth or ESB)

Two general changes to Cleanflight included:

Ability to customize MPU I2C address in target.h (MPU6500's address
can be changed in hardware by holding a pin high)
Addition of a target-specific serial type. Targets must opt-in in
their target.h and provide an implementation of the interface to
convert their custom Rx protocol into RawRC for Cleanflight",This change was already pulled over from Betaflight by commit da56b08,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2721,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294248090,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","vtx channel via aux channel
tested with:
set vtx_band = 1
set vtx_channel = 1
set vtx_power = 1
vtx 0 6 5 1 900 1100
vtx 1 6 5 3 1100 1300
vtx 2 6 1 1 1300 1600
vtx 3 6 5 6 1600 1900
vtx 4 6 5 8 1900 2100",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/unitware,3,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294274302,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","Grest work (in progress) as always!
But surely some parts can be in separate PR:s? (The nephew button for example)
My thinking is that some parts can make it to merge faster?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294290396,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","@unitware I'm finding it hard to balance my available time for coding vs balancing my time around creating loads of pull requests and managing them, hence fewer PR's and more time coding.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/unitware,5,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294293217,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","It's surely a fine balance, and that was my argument for splitting in smaller chunks - it's a daunting task to review a PR when it's a full journey. Some won't look at it and some will review only a small part - leaving stuff not reviewed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294296862,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","@unitware yeah, I know what you mean.  That's why I try and be as informative in the commit messages.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/hydra,7,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294299893,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","decided not to port vtx on/off yet, since not all VTX modules support ON/OFF some decisions need to be made, there were conversations regarding this here: betaflight/betaflight#2392 (comment)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294301820,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","@martinbudden @mikeller @jflyper if you have time can you review?
There are some notes in commit messages which may be useful.  Perhaps scan the PR goals, commit messages and then look at the resulting changes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294303424,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","TESTERS - If you download this binary and try it please report back here even if it's just to say 'it works'.
Binaries:
cleanflight_2.0.0_SPRACINGF3NEO-20170415-1725.zip
VTX Button documentation:
https://github.com/cleanflight/cleanflight/blob/64cd11779eca4a0da91a12c45442aec058d0d2f7/docs/VTX.md",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2721,2017-04-14T20:27:34Z,2017-04-17T16:06:49Z,2017-04-22T18:59:00Z,MERGED,True,1192,682,49,https://github.com/hydra,CF/BF - Cleanup VTX api for RTC6705 via SPI and SoftSPI.,23,['Critical'],https://github.com/cleanflight/cleanflight/pull/2721,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/2721#issuecomment-294506924,"Delete VTX feature.
 Allow OSD to show RTX6705/SmartAudio/Tramp settings.
 Allow Sticks to change channel/band for RTX6705/SmartAudio/Tramp
 Allow OSD CMS menu to change RTX6705 settings.
 Support RTC6705 with and without POWER enable/disable pin.
 Delete 'vtx_mode' and 'vtx_mhz' settings. (use band/channel always, reduces code size and makes all features work all the time)
 Update RTC6705 via soft spi to use VTX API.
 Move existing VTX CMS code into vtx_rtc6705.c (as per tramp/smartaudio)
 Review comments from betaflight/betaflight#1912
 Port NEO VTX Button code from CF v1.x - Continue with main-loop blocking implementation for now, this can change later.  Of note is that the VTX  api does not support cycling around channel/band/power so the implementation will/may change a little.
 Port VTX on/off via AUX channel from CF v1.x
 Support optional onboard VTX modules.  The SPRacingF3EVO and SPRacingF4EVO have VTX connections but do not always have an actual VTX module attached.  In these cases Tramp and SmartAudio must be also available.

Marked as CRITICAL as there are many users of SPRacingF3NEO boards that need this.
Note:  This PR does NOT attempt to address or otherwise change the behavior of the RF power on the RTC6705, see betaflight/betaflight#2705","comments addressed, multiple cleanup commits added. Tested on SPRACINGF3NEO.
Once the build passes I will rebase and squash some of the early work-in-progress commits.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2723,2017-04-15T10:09:38Z,2017-04-17T17:26:35Z,2017-04-22T18:59:04Z,MERGED,True,45,24,5,https://github.com/hydra,CF/BF - SPRacingF3 Add OSD over MSP for SPRacingF3OSD compatibility.,3,[],https://github.com/cleanflight/cleanflight/pull/2723,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2723,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2727,2017-04-16T07:48:36Z,2017-04-17T13:17:30Z,2017-04-17T13:17:30Z,MERGED,True,5,5,1,https://github.com/dejaybe87,Fixed servo cli to process correct arguments.,1,[],https://github.com/cleanflight/cleanflight/pull/2727,https://github.com/dejaybe87,1,https://github.com/cleanflight/cleanflight/pull/2727,Noticed the the CLI servo command referenced invalid arguments via magic numbers.  Corrected that.,Noticed the the CLI servo command referenced invalid arguments via magic numbers.  Corrected that.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2727,2017-04-16T07:48:36Z,2017-04-17T13:17:30Z,2017-04-17T13:17:30Z,MERGED,True,5,5,1,https://github.com/dejaybe87,Fixed servo cli to process correct arguments.,1,[],https://github.com/cleanflight/cleanflight/pull/2727,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2727#issuecomment-294483815,Noticed the the CLI servo command referenced invalid arguments via magic numbers.  Corrected that.,"great, thanks!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2729,2017-04-16T18:09:20Z,2017-04-17T21:51:04Z,2017-04-28T07:05:58Z,MERGED,True,4,4,1,https://github.com/MylesShannon,Update to current sensor calibration with charger,1,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2729,https://github.com/MylesShannon,1,https://github.com/cleanflight/cleanflight/pull/2729,Formula changed to reflect current sensor scale as of Betaflight 3.1.7,Formula changed to reflect current sensor scale as of Betaflight 3.1.7,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2730,2017-04-17T17:51:57Z,2017-04-17T18:07:28Z,2017-04-22T18:58:59Z,MERGED,True,1,1,1,https://github.com/hydra,fixed blackbox devicelist,1,[],https://github.com/cleanflight/cleanflight/pull/2730,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2730,"From BF betaflight/betaflight#2877
Not sure if the problem description in the BF PR is correct since it affects the CLI, not the MSP commands.","From BF betaflight/betaflight#2877
Not sure if the problem description in the BF PR is correct since it affects the CLI, not the MSP commands.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2730,2017-04-17T17:51:57Z,2017-04-17T18:07:28Z,2017-04-22T18:58:59Z,MERGED,True,1,1,1,https://github.com/hydra,fixed blackbox devicelist,1,[],https://github.com/cleanflight/cleanflight/pull/2730,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2730#issuecomment-294546057,"From BF betaflight/betaflight#2877
Not sure if the problem description in the BF PR is correct since it affects the CLI, not the MSP commands.","change tested with latest cleanflight configurator 2.0.0 which still works fine, but now the CLI get/set 'blackbox_device' works correctly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2731,2017-04-17T18:11:49Z,2017-04-17T19:01:20Z,2017-04-22T18:58:57Z,MERGED,True,11,0,1,https://github.com/hydra,CF/BF - Fix CLI being spammed with OSD MSP_DISPLAYPORT messages,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2731,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2731,...  when OSD over MSP is enabled.,...  when OSD over MSP is enabled.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2733,2017-04-17T22:09:08Z,2017-04-18T01:43:54Z,2017-04-22T18:59:25Z,CLOSED,False,1,0,1,https://github.com/Gaela97,CF/BF - Fix SPRACINGF3EVO mag detection.,1,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2733,https://github.com/Gaela97,1,https://github.com/cleanflight/cleanflight/pull/2733,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2733,2017-04-17T22:09:08Z,2017-04-18T01:43:54Z,2017-04-22T18:59:25Z,CLOSED,False,1,0,1,https://github.com/Gaela97,CF/BF - Fix SPRACINGF3EVO mag detection.,1,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2733,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2733#issuecomment-294648121,,"this commit is already in master.
https://github.com/cleanflight/cleanflight/blame/master/src/main/target/SPRACINGF3EVO/target.h#L61
did you mean to create this PR for some other fork?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2734,2017-04-18T01:37:03Z,2017-04-18T20:30:33Z,2017-04-18T20:30:33Z,MERGED,True,2168,1927,271,https://github.com/hydra,merge recent BF changes,50,[],https://github.com/cleanflight/cleanflight/pull/2734,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2734,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2736,2017-04-18T08:20:08Z,2017-04-19T12:17:16Z,2018-02-23T12:29:39Z,MERGED,True,7,0,1,https://github.com/McGiverGim,For NAZE32 REV5 and REV6 use the dataflash for blackbox as default,1,[],https://github.com/cleanflight/cleanflight/pull/2736,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2736,"This solves #2666
@hydra I know you closed it, but I haven't do it before because it was assigned ;-).
The problem are the default values for the NAZE32. It uses serial device by default, but some hardware revisions have an on-board dataflash. This PR detects this revisions and uses by default the on-board dataflash.","This solves #2666
@hydra I know you closed it, but I haven't do it before because it was assigned ;-).
The problem are the default values for the NAZE32. It uses serial device by default, but some hardware revisions have an on-board dataflash. This PR detects this revisions and uses by default the on-board dataflash.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2736,2017-04-18T08:20:08Z,2017-04-19T12:17:16Z,2018-02-23T12:29:39Z,MERGED,True,7,0,1,https://github.com/McGiverGim,For NAZE32 REV5 and REV6 use the dataflash for blackbox as default,1,[],https://github.com/cleanflight/cleanflight/pull/2736,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2736#issuecomment-295246117,"This solves #2666
@hydra I know you closed it, but I haven't do it before because it was assigned ;-).
The problem are the default values for the NAZE32. It uses serial device by default, but some hardware revisions have an on-board dataflash. This PR detects this revisions and uses by default the on-board dataflash.","ok, from the conversations i thought it was more difficult than this, merging.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2738,2017-04-18T18:36:20Z,2017-04-19T08:08:25Z,2017-04-19T08:08:52Z,MERGED,True,7,7,1,https://github.com/ethomas997,Doc update for horizon_tilt_expert_mode,1,[],https://github.com/cleanflight/cleanflight/pull/2738,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2738,"Sync documentation for BF PR 2570
horizon_tilt_mode SAFE|EXPERT
changed to
horizon_tilt_expert_mode OFF|ON
--ET","Sync documentation for BF PR 2570
horizon_tilt_mode SAFE|EXPERT
changed to
horizon_tilt_expert_mode OFF|ON
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2738,2017-04-18T18:36:20Z,2017-04-19T08:08:25Z,2017-04-19T08:08:52Z,MERGED,True,7,7,1,https://github.com/ethomas997,Doc update for horizon_tilt_expert_mode,1,[],https://github.com/cleanflight/cleanflight/pull/2738,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2738#issuecomment-295153529,"Sync documentation for BF PR 2570
horizon_tilt_mode SAFE|EXPERT
changed to
horizon_tilt_expert_mode OFF|ON
--ET","@ethomas997 thanks for your work, again, on this!  much appreciated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2739,2017-04-18T20:18:00Z,2017-04-18T20:18:33Z,2017-04-18T20:18:36Z,CLOSED,False,1148,1473,245,https://github.com/hydra,Merge recent BF changes,1,[],https://github.com/cleanflight/cleanflight/pull/2739,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2739,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2743,2017-04-19T17:07:16Z,2017-04-19T17:07:21Z,2017-04-19T17:07:21Z,MERGED,True,1,0,1,https://github.com/hydra,merge recent BF changes,2,[],https://github.com/cleanflight/cleanflight/pull/2743,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2743,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2744,2017-04-19T20:37:18Z,2017-04-20T21:55:40Z,2017-04-22T18:58:54Z,MERGED,True,1099,1300,5,https://github.com/hydra,CLI Cleanup 1,12,[],https://github.com/cleanflight/cleanflight/pull/2744,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2744,"Extract CLI settings table so that they can be used by other parts of the system (e.g. CMS)
 Remove CLI backup switch code and variables.  This was always a pain because you actually had to remember to add any new PG to the CLI code rather than it being automatic.
 Adjust and fix size/speed/normal optimizations.

SPRACINGF3NEO:
BEFORE
   text	   data	    bss	    dec	    hex	filename
 249606	   6580	  32992	 289178	  4699a	./obj/main/cleanflight_SPRACINGF3NEO.elf

AFTER
   text	   data	    bss	    dec	    hex	filename
 243952	   6584	  32988	 283524	  45384	./obj/main/cleanflight_SPRACINGF3NEO.elf

249606 - 243952 = 5654 bytes!
NAZE32:
BEFORE:
region `FLASH' overflowed by 748 bytes
AFTER:
   text	   data	    bss	    dec	    hex	filename
 127256	   1616	  18376	 147200	  23f00	./obj/main/cleanflight_NAZE.elf

126*1024 = 129024 + 748 = 129772 - 127256 = 2516 bytes!","Extract CLI settings table so that they can be used by other parts of the system (e.g. CMS)
 Remove CLI backup switch code and variables.  This was always a pain because you actually had to remember to add any new PG to the CLI code rather than it being automatic.
 Adjust and fix size/speed/normal optimizations.

SPRACINGF3NEO:
BEFORE
   text	   data	    bss	    dec	    hex	filename
 249606	   6580	  32992	 289178	  4699a	./obj/main/cleanflight_SPRACINGF3NEO.elf

AFTER
   text	   data	    bss	    dec	    hex	filename
 243952	   6584	  32988	 283524	  45384	./obj/main/cleanflight_SPRACINGF3NEO.elf

249606 - 243952 = 5654 bytes!
NAZE32:
BEFORE:
region `FLASH' overflowed by 748 bytes
AFTER:
   text	   data	    bss	    dec	    hex	filename
 127256	   1616	  18376	 147200	  23f00	./obj/main/cleanflight_NAZE.elf

126*1024 = 129024 + 748 = 129772 - 127256 = 2516 bytes!",True,{'THUMBS_UP': ['https://github.com/McGiverGim']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2744,2017-04-19T20:37:18Z,2017-04-20T21:55:40Z,2017-04-22T18:58:54Z,MERGED,True,1099,1300,5,https://github.com/hydra,CLI Cleanup 1,12,[],https://github.com/cleanflight/cleanflight/pull/2744,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2744#issuecomment-295439285,"Extract CLI settings table so that they can be used by other parts of the system (e.g. CMS)
 Remove CLI backup switch code and variables.  This was always a pain because you actually had to remember to add any new PG to the CLI code rather than it being automatic.
 Adjust and fix size/speed/normal optimizations.

SPRACINGF3NEO:
BEFORE
   text	   data	    bss	    dec	    hex	filename
 249606	   6580	  32992	 289178	  4699a	./obj/main/cleanflight_SPRACINGF3NEO.elf

AFTER
   text	   data	    bss	    dec	    hex	filename
 243952	   6584	  32988	 283524	  45384	./obj/main/cleanflight_SPRACINGF3NEO.elf

249606 - 243952 = 5654 bytes!
NAZE32:
BEFORE:
region `FLASH' overflowed by 748 bytes
AFTER:
   text	   data	    bss	    dec	    hex	filename
 127256	   1616	  18376	 147200	  23f00	./obj/main/cleanflight_NAZE.elf

126*1024 = 129024 + 748 = 129772 - 127256 = 2516 bytes!",I like the direction this is heading. Putting the copy in the PG declaration makes sense - I should have thought of that.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2744,2017-04-19T20:37:18Z,2017-04-20T21:55:40Z,2017-04-22T18:58:54Z,MERGED,True,1099,1300,5,https://github.com/hydra,CLI Cleanup 1,12,[],https://github.com/cleanflight/cleanflight/pull/2744,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2744#issuecomment-295466372,"Extract CLI settings table so that they can be used by other parts of the system (e.g. CMS)
 Remove CLI backup switch code and variables.  This was always a pain because you actually had to remember to add any new PG to the CLI code rather than it being automatic.
 Adjust and fix size/speed/normal optimizations.

SPRACINGF3NEO:
BEFORE
   text	   data	    bss	    dec	    hex	filename
 249606	   6580	  32992	 289178	  4699a	./obj/main/cleanflight_SPRACINGF3NEO.elf

AFTER
   text	   data	    bss	    dec	    hex	filename
 243952	   6584	  32988	 283524	  45384	./obj/main/cleanflight_SPRACINGF3NEO.elf

249606 - 243952 = 5654 bytes!
NAZE32:
BEFORE:
region `FLASH' overflowed by 748 bytes
AFTER:
   text	   data	    bss	    dec	    hex	filename
 127256	   1616	  18376	 147200	  23f00	./obj/main/cleanflight_NAZE.elf

126*1024 = 129024 + 748 = 129772 - 127256 = 2516 bytes!",@martinbudden I updated the PR description to show the bytes saved by this PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2744,2017-04-19T20:37:18Z,2017-04-20T21:55:40Z,2017-04-22T18:58:54Z,MERGED,True,1099,1300,5,https://github.com/hydra,CLI Cleanup 1,12,[],https://github.com/cleanflight/cleanflight/pull/2744,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2744#issuecomment-295489181,"Extract CLI settings table so that they can be used by other parts of the system (e.g. CMS)
 Remove CLI backup switch code and variables.  This was always a pain because you actually had to remember to add any new PG to the CLI code rather than it being automatic.
 Adjust and fix size/speed/normal optimizations.

SPRACINGF3NEO:
BEFORE
   text	   data	    bss	    dec	    hex	filename
 249606	   6580	  32992	 289178	  4699a	./obj/main/cleanflight_SPRACINGF3NEO.elf

AFTER
   text	   data	    bss	    dec	    hex	filename
 243952	   6584	  32988	 283524	  45384	./obj/main/cleanflight_SPRACINGF3NEO.elf

249606 - 243952 = 5654 bytes!
NAZE32:
BEFORE:
region `FLASH' overflowed by 748 bytes
AFTER:
   text	   data	    bss	    dec	    hex	filename
 127256	   1616	  18376	 147200	  23f00	./obj/main/cleanflight_NAZE.elf

126*1024 = 129024 + 748 = 129772 - 127256 = 2516 bytes!","@mikeller Thanks for quick review, commits added with further flash savings, description updated.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2748,2017-04-20T22:09:03Z,2017-04-20T22:09:08Z,2017-04-20T22:09:23Z,MERGED,True,4,0,1,https://github.com/hydra,CF/BF - Fix RSSI output via MSP.,1,['BUG'],https://github.com/cleanflight/cleanflight/pull/2748,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2748,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2750,2017-04-21T18:30:00Z,2017-04-22T01:18:32Z,2017-04-22T18:58:52Z,MERGED,True,7,7,4,https://github.com/hydra,Merge recent BF changes,17,[],https://github.com/cleanflight/cleanflight/pull/2750,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2750,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2751,2017-04-22T01:25:31Z,2017-04-22T10:55:50Z,2017-04-22T18:58:50Z,MERGED,True,2,2,1,https://github.com/hydra,CF/BF - SPRACINGF3NEO - Change the default telemetry settings,1,[],https://github.com/cleanflight/cleanflight/pull/2751,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2751,to be appropriate for the XSR receiver.,to be appropriate for the XSR receiver.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2751,2017-04-22T01:25:31Z,2017-04-22T10:55:50Z,2017-04-22T18:58:50Z,MERGED,True,2,2,1,https://github.com/hydra,CF/BF - SPRACINGF3NEO - Change the default telemetry settings,1,[],https://github.com/cleanflight/cleanflight/pull/2751,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2751#issuecomment-296365357,to be appropriate for the XSR receiver.,also merging for v2.0.2,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2756,2017-04-22T16:12:48Z,2017-04-22T16:57:50Z,2017-04-23T10:50:30Z,MERGED,True,77,43,8,https://github.com/hydra,CF/BF - Fix HoTT telemetry.,1,[],https://github.com/cleanflight/cleanflight/pull/2756,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2756,"Two issues:
1 - failure to work on softserial ports.
The TX pin was not allocated due to the initial port mode.
HoTT telemetry is different in that it changes the serial port mode
between sending and receiving.
This change opens the port in RX/TX mode so that both RX and TX pins are
initally allocated.
Test scenario:

HoTT on SoftSerial 1
Diode connecting between RX and TX pins.

2 - bidirectional hardware ports were not supported.
Renamed sport_halfduplex to tlm_halfduplex.  The setting is now used
by sport and hott telemetry.","Two issues:
1 - failure to work on softserial ports.
The TX pin was not allocated due to the initial port mode.
HoTT telemetry is different in that it changes the serial port mode
between sending and receiving.
This change opens the port in RX/TX mode so that both RX and TX pins are
initally allocated.
Test scenario:

HoTT on SoftSerial 1
Diode connecting between RX and TX pins.

2 - bidirectional hardware ports were not supported.
Renamed sport_halfduplex to tlm_halfduplex.  The setting is now used
by sport and hott telemetry.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2757,2017-04-22T16:13:02Z,2017-04-29T19:44:13Z,2017-06-06T23:01:52Z,MERGED,True,4,1,1,https://github.com/hydra,CF/BF - SPRACINGF3 - Re-instate SONAR.,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2757,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2757,"It appears @borisbstyle broke it with this commit. 907a184
After it was commented out @mikeller later deleted it in ce6d020
See #2755","It appears @borisbstyle broke it with this commit. 907a184
After it was commented out @mikeller later deleted it in ce6d020
See #2755",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2757,2017-04-22T16:13:02Z,2017-04-29T19:44:13Z,2017-06-06T23:01:52Z,MERGED,True,4,1,1,https://github.com/hydra,CF/BF - SPRACINGF3 - Re-instate SONAR.,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2757,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2757#issuecomment-296383944,"It appears @borisbstyle broke it with this commit. 907a184
After it was commented out @mikeller later deleted it in ce6d020
See #2755",cleanflight_2.0.3_SPRACINGF3-20170422-1716.zip,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2757,2017-04-22T16:13:02Z,2017-04-29T19:44:13Z,2017-06-06T23:01:52Z,MERGED,True,4,1,1,https://github.com/hydra,CF/BF - SPRACINGF3 - Re-instate SONAR.,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2757,https://github.com/copter58,3,https://github.com/cleanflight/cleanflight/pull/2757#issuecomment-296428657,"It appears @borisbstyle broke it with this commit. 907a184
After it was commented out @mikeller later deleted it in ce6d020
See #2755","I have not tested it, but I think it's wrong.
Through the statement in line 97
(#if defined (SPRACINGF3) || defined (FLIP32F3OSD)
the else branch, starting from line 109, will never be reached with SPRACINGF3,
and this will not activate MAG.
I think, only the 3 lines 111-113,  must be inserted .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2757,2017-04-22T16:13:02Z,2017-04-29T19:44:13Z,2017-06-06T23:01:52Z,MERGED,True,4,1,1,https://github.com/hydra,CF/BF - SPRACINGF3 - Re-instate SONAR.,1,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2757,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2757#issuecomment-296511077,"It appears @borisbstyle broke it with this commit. 907a184
After it was commented out @mikeller later deleted it in ce6d020
See #2755",Yes. I tend to remove code that is commented out without a comment explaining the condition(s) for reinstatement.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2758,2017-04-22T18:58:22Z,2017-04-22T20:15:17Z,2017-04-23T10:50:21Z,MERGED,True,61,5,8,https://github.com/hydra,CF/BF - SPRacingF3MQ variant and SPRacing PCB revision consistency.,2,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2758,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2758,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2759,2017-04-22T19:08:36Z,2017-04-29T18:51:05Z,2017-06-06T23:02:02Z,MERGED,True,27,18,1,https://github.com/hydra,CF/BF - Cleanup the map command.,1,['Cleanup'],https://github.com/cleanflight/cleanflight/pull/2759,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2759,"Save a few more bytes of flash space by reusing the same format
string.
Remove magic numbers.
Reduce function calls.
Make it show parse error if the length is not correct.
Avoid modifying the cmdline variable - always use the buffer.","Save a few more bytes of flash space by reusing the same format
string.
Remove magic numbers.
Reduce function calls.
Make it show parse error if the length is not correct.
Avoid modifying the cmdline variable - always use the buffer.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2761,2017-04-23T10:33:17Z,2017-04-23T10:49:15Z,2017-04-23T10:50:19Z,MERGED,True,664,67,33,https://github.com/hydra,Merge BF changes,24,[],https://github.com/cleanflight/cleanflight/pull/2761,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2761,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2763,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296492811,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","cleanflight_2.1.0_SPRACINGF3EVO-20170429-1725.zip
cleanflight_2.1.0_SPRACINGF3OSD-20170429-1725.zip
cleanflight_2.1.0_SPRACINGF3-20170429-1747.zip
binaries for testing.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296552555,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","@hydra , I think for case 4c ""how frequently it should be sent"" a ""frequency"" of ""once"" should be supported. That is just sends the data once.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296577546,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","we could have flags so you can specify HZ, PERIOD, etc.  it's all possible.
What's the use-case for 'ONCE' ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296583286,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","Well, actually I'd like to use ONCE for the battery update. So the FC has a task which calls ""once"" periodically, rather than having the slave push the data periodically.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/digitalentity,6,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296585142,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","I have the same oppinion. MSP is request-response by design. Having unsolicited updates (from protocol point of view) is not a good thing for many reasons. Hence ""ONCE"" should be the only available option.",True,{'THUMBS_UP': ['https://github.com/ledvinap']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296587883,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","Yes, I'm not a fan of unsolicited updates.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296593623,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","@martinbudden @digitalentity as I noted in slack on saturday, we already have this precedent with mspSerialPush and MSP_DISPLAYPORT.
Also, technically, they are solicited in the case of MSP_SET_STREAM, since the FC requests the updates and the response is a reply to the request followed by a stream of updates.
Can anyone give me concrete reasons why doing this is actually bad, like, what problems might you envisage, in terms of behaviour, code or anything related.
We need a solution to the remote current-sensor issue and we need it fast.  If you're really opposed to MSP_SET_STREAM please can you suggest an alternative approach?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/digitalentity,9,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296604131,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","I've encountered the issue of MSP request flooding when MSP is used over a slow serial link. Basically FC hangs until it sends out the MSP respit is onse. One of the options to deal with this ""DoS attack"" is to not process data that arrive out of order.
If we allow unsolicited messages that violate request-response scheme it won't be possible to enforce the in-order processing.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296609752,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","@hydra , I have already suggested an alternative approach. Use the ONCE form of the protocol, and have he FC issue ONCE requests periodically.
Note that just because we have a precedent, that doesn't mean we should continue with the approach. There are a number of bad practices in the codebase, that doesn't mean we should repeat any of them.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/ledvinap,11,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296627028,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","As for unsolicited responses - I my experience polling protocols work better (little chance of link congestion, easier debugging, slave has smaller state).
In this case hybrid approach may work - master may setup stream with requested messages and then send MSP_POLL to get all packets slave wants to send.
But it combines complexity and advantages of both approaches, so some discussion is necessary ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/hydra,12,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-296830781,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","@ledvinap ""In this case hybrid approach may work - master may setup stream with requested messages and then send MSP_POLL to get all packets slave wants to send.
But it combines complexity and advantages of both approaches, so some discussion is necessary ..""
My approach was for the OSD to have no further interaction with the FC the OSD once it setup the stream, i.e. no queuing/buffering of stream data.  no MSP_POLL needed.
@martinbudden Point is noted regarding precedence.
@digitalentity the point regarding processing incoming data isn't valid because the FC has no incoming data to process.  it's the client that has to keep up.  the problem regarding dispatching messages exists with or without this code and it doesn't add to the problem.  instead it allows the clients to request messages at a frequency they want, if the fc refuses to send at a given data rate/frequency that's probably fine, since no /request/ would be ignored - we could add that, but not as part of this PR.
Also, guys, i wanted to avoid interfering with the MSP_DISPLAYPORT outgoing messages from the FC to the OSD.  As it is the OSD has to process all the serial buffer and update the display without being interrupted by more incoming serial IO.  Maybe there's enough breathing room, I went this way as i knew it definitely would not be an issue.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-298182917,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","ok, so I also tested the approach on an SPRACINGF3 and that works fine too, binaries updated.
Here's the difference in terms of CPU usage and code size between the two approaches.
Without MSP stream
   text	   data	    bss	    dec	    hex	filename
 239644	   8472	  31600	 279716	  444a4	./obj/main/cleanflight_SPRACINGF3EVO.elf

05 - (         SERIAL)     99     682       3    7.2%    0.5%       240
07 - (BATTERY_VOLTAGE)     49      41       4    0.7%    0.5%         4
08 - (BATTERY_CURRENT)     49     283       6    1.8%    0.5%        11
09 - ( BATTERY_ALERTS)      4       9       6    0.5%    0.5%         0

With MSP stream
   text	   data	    bss	    dec	    hex	filename
 239916	   8472	  31724	 280112	  44630	./obj/main/cleanflight_SPRACINGF3EVO.elf

# tasks
05 - (         SERIAL)     99     634       3    6.7%    0.5%        92
07 - (BATTERY_VOLTAGE)     49       6       4    0.5%    0.5%         3
08 - (BATTERY_CURRENT)     49      36       2    0.6%    0.5%         2
09 - ( BATTERY_ALERTS)      4       5       4    0.5%    0.5%         0

It's clear to see that the MSP_STREAM approach has far less impact on the CPU.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2763,2017-04-23T19:44:58Z,2017-04-29T17:55:10Z,2017-04-29T17:55:46Z,CLOSED,False,399,17,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP STREAM),3,[],https://github.com/cleanflight/cleanflight/pull/2763,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/2763#issuecomment-298184138,"The goal:
Use the current sensor on the OSD Slave as a source for amperage/mAhDrawn.
How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_STREAM to OSD Slave.  Payload contains a an
MSP command ID and a frequency.
OSD Slave listens for incoming MSP as usual.
When OSD slave receives a MSP_STREAM request on a port it remembers
a) the port, b) the details of what should be send. c) how frequently it
should be send.  In this case, an MSP_ANALOG reply at 10hz.
The OSD then sends the requested data on the specified port at the
given frequency.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.



Why MSP?

No additional protocol for sending data from OSD to FC is needed.  The FC and OSD both use a UART.
In the case of the SPRACINGF3 stacked with SPRACINGF3OSD MSP is a good choice because MSP must be enabled on UART1 for configurator connection.  Using a dedicated serial port with it's own protocol is not possible in this case - it would have to be shared and also not interfere with the usual usage of the port.
MSP_STREAM allows clients (e.g. groundstations) to be developed that get data from an FC in the air via remote radio links.
MSP_STREAM could also be used by the configurator, many configurator tabs continually request the same information in the background, now it can simply just request the FC should continue sending data and tell it to stop when disconnecting or switching tabs.  e.g. setup tab, motors tab, gps tab, sensors tab, etc.","I created a version of this PR without all the MSP stream stuff here.
#2768
I will close this PR and abandon the MSP stream approach.  Personally I think it's a good idea and works well but there's too much resistance to the approach.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2765,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298187356,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","ok so this is tricky, the change was done to reduce flash size by aligning strings in blackbox with strings in the cli so that each string is only saved once in the flash ram.  if you have two different strings you need space for both in flash.
can you check to see if it might make sense to rename the cli command too?
see settings.c / rc_rate_yaw.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298188464,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","We should have coherence, but we should also use the correct names. rc_rate_yaw is the correct name, so it is the blackbox viewer that should change, not the flight software.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/McGiverGim,4,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298188662,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.",@martinbudden If you see the code the internal var is called rcyawrate. I can change the blackbox without problem but one of them is wrong.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298213335,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","@McGiverGim , it's the blackbox view that should change. Note that the internal blackbox fieldname should not change, but rather the switch statement in https://github.com/betaflight/blackbox-log-viewer/blob/master/js/flightlog_parser.js , ie:
case ""rc_rate_yaw"":
case ""rcYawRate"":
    that.sysConfig.rcYawRate = parseInt(fieldValue, 10);
...

This fixes the problem and retains compatibility for older blackbox logs.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/McGiverGim,6,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298215132,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","@martinbudden Yes, I know where to change it in BlackBox, and here we don't have space limits, so I can support the three forms if it is necessary. Only wanted to note that if the string was incorrect, it was only incorrect in the code of the six latest weeks, so maybe it's not necessary to keep the three forms and we want ""correct"" it before it gets widely used:
9186551
But if you say that this is the correct form, and as @hydra point, this was changed to be the same as CLI, and in CLI it has the ""wrong"" form since a long time ago, it seems better to let the Blackbox exactly the same as CLI and make a refactor to change the internal var (a change that is not visible to users, so it is not important).
So if everybody accepts rc_rate_yaw as the correct form, for me this PR can be closed and then I will change the code in the viewer to support it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298215476,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","@McGiverGim , I think rc_rate_yaw is the form to use.
As you point out, there have been some other renames as well. It's probably best not to update the blackbox viewer to accept those yet, since I think there will be some further rationalisation of the names.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/McGiverGim,8,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298216512,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","I've opened a new PR in the log viewer.
If this PR is finally closed, I think that is important to merge it:
cleanflight/blackbox-log-viewer#58
Without it the viewer is useless for YAW values.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/McGiverGim,9,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298216663,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","I've make some tests, at least this values are not readed correctly:
Ignoring unsupported header ""vbat_scale""
flightlog_parser.js:697 Ignoring unsupported header ""rc_rate""
flightlog_parser.js:697 Ignoring unsupported header ""rc_expo""
flightlog_parser.js:697 Ignoring unsupported header ""thr_mid""
flightlog_parser.js:697 Ignoring unsupported header ""thr_expo""
flightlog_parser.js:697 Ignoring unsupported header ""tpa_rate""
flightlog_parser.js:697 Ignoring unsupported header ""d_notch_cut""
flightlog_parser.js:697 Ignoring unsupported header ""iterm_windup""
flightlog_parser.js:697 Ignoring unsupported header ""vbat_pid_gain""
flightlog_parser.js:697 Ignoring unsupported header ""anti_gravity_thresh""
flightlog_parser.js:697 Ignoring unsupported header ""setpoint_relax_ratio""
flightlog_parser.js:697 Ignoring unsupported header ""d_setpoint_weight""
flightlog_parser.js:697 Ignoring unsupported header ""yaw_accel_limit""
flightlog_parser.js:697 Ignoring unsupported header ""accel_limit""
flightlog_parser.js:697 Ignoring unsupported header ""pidsum_limit""
flightlog_parser.js:697 Ignoring unsupported header ""pidsum_limit_yaw""
flightlog_parser.js:697 Ignoring unsupported header ""gyro_lowpass_type""
flightlog_parser.js:697 Ignoring unsupported header ""gyro_lowpass""
flightlog_parser.js:697 Ignoring unsupported header ""rc_interp""
flightlog_parser.js:697 Ignoring unsupported header ""rc_interp_int""
flightlog_parser.js:697 Ignoring unsupported header ""use_unsynced_pwm""
flightlog_parser.js:697 Ignoring unsupported header ""motor_pwm_protocol""
flightlog_parser.js:697 Ignoring unsupported header ""digital_idle_value""

Are the strings changing? When they will be stable I can add this fields.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298222070,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","I'll work on standardising the names over the next few days. When I'm done, I'll let you know and you can update the blackbox viewer.",True,{'THUMBS_UP': ['https://github.com/McGiverGim']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/mikeller,11,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298223993,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.",@martinbudden: I think this PR makes a good case for the value of centralising the string resources in one place in the firmware: This will prevent PRs like this one from trying to change one occurrence of a reused string.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/martinbudden,12,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298225894,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","@mikeller , sort of. Centralised string resources have some advantages, but they are a pain to manage and can introduce errors of their own.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/martinbudden,13,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298597201,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","@McGiverGim , I've updated the blackbox field names in betaflight. It's now OK to update the log viewer to accept those new names.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/McGiverGim,14,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298610957,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","@martinbudden Ok, thanks. I will do it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2765,2017-04-27T18:18:12Z,2017-05-02T15:04:47Z,2017-05-02T15:04:56Z,CLOSED,False,1,1,1,https://github.com/McGiverGim,Rename rc_rate_yaw to rc_yaw_rate for coherence in blackbox,1,[],https://github.com/cleanflight/cleanflight/pull/2765,https://github.com/McGiverGim,15,https://github.com/cleanflight/cleanflight/pull/2765#issuecomment-298663007,"This solves part of the issue detected here with BlackBox:
betaflight/blackbox-log-viewer#57
For coherence with the others vars, the rc_rate_yaw value must be rc_yaw_rate.
It's a good moment to do this change, the BlackBox explorer has not been updated to read it, so we don't break anything.","Done: cleanflight/blackbox-log-viewer#59
I close this PR because it has been solved from the log viewer.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2766,2017-04-28T09:03:15Z,2017-05-02T21:19:18Z,2017-05-04T08:06:36Z,MERGED,True,1,1,1,None,rename logfile suffix,2,[],https://github.com/cleanflight/cleanflight/pull/2766,None,1,https://github.com/cleanflight/cleanflight/pull/2766,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2766,2017-04-28T09:03:15Z,2017-05-02T21:19:18Z,2017-05-04T08:06:36Z,MERGED,True,1,1,1,None,rename logfile suffix,2,[],https://github.com/cleanflight/cleanflight/pull/2766,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2766#issuecomment-297951368,,"There's one PR to change the extension in configurator and blackbox viewer to .BBL, adding a prefix to differentiate the FC firmware. For example:
cleanflight/cleanflight-configurator#456",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2766,2017-04-28T09:03:15Z,2017-05-02T21:19:18Z,2017-05-04T08:06:36Z,MERGED,True,1,1,1,None,rename logfile suffix,2,[],https://github.com/cleanflight/cleanflight/pull/2766,None,3,https://github.com/cleanflight/cleanflight/pull/2766#issuecomment-297965689,,"evertheless with onboard-sd logfiles will stored with the suffix .BFL ... which irritates ?-(
to keep the logfiles apart i prefer .BFL and .CFL as suffix ... with .BBL it is generalized
we also still have two blackbox log viewers based off an identical code base but  with different branding",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2766,2017-04-28T09:03:15Z,2017-05-02T21:19:18Z,2017-05-04T08:06:36Z,MERGED,True,1,1,1,None,rename logfile suffix,2,[],https://github.com/cleanflight/cleanflight/pull/2766,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2766#issuecomment-298186638,,"I have merged the configurator change, can you update this so the extension is BBL please.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2766,2017-04-28T09:03:15Z,2017-05-02T21:19:18Z,2017-05-04T08:06:36Z,MERGED,True,1,1,1,None,rename logfile suffix,2,[],https://github.com/cleanflight/cleanflight/pull/2766,None,5,https://github.com/cleanflight/cleanflight/pull/2766#issuecomment-298189908,,"@hydra
the extension is now .BBL",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2766,2017-04-28T09:03:15Z,2017-05-02T21:19:18Z,2017-05-04T08:06:36Z,MERGED,True,1,1,1,None,rename logfile suffix,2,[],https://github.com/cleanflight/cleanflight/pull/2766,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2766#issuecomment-298764526,,"great, thanks for helping out, all these little fixes and tweaks really do help.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2768,2017-04-29T17:44:43Z,2017-04-29T18:37:42Z,2017-06-06T23:01:59Z,MERGED,True,166,15,17,https://github.com/hydra,CF/BF - First cut of MSP current sensor (using MSP_ANALOG),1,[],https://github.com/cleanflight/cleanflight/pull/2768,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2768,"How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_ANALOG to OSD Slave.
OSD Slave listens for incoming MSP as usual.
OSD responds to MSP as usual.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.","How it works:

Current Meter Source on FC is set to MSP/OSD Slave by user.
On reboot FC sends MSP_ANALOG to OSD Slave.
OSD Slave listens for incoming MSP as usual.
OSD responds to MSP as usual.
The FC recevies the data from the OSD Slave and updates the MSP
Current Meter.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2769,2017-04-29T18:22:00Z,2017-04-29T18:47:30Z,2017-06-06T23:01:56Z,MERGED,True,6,6,1,https://github.com/hydra,CF - Re-arrange travis targets; group 4 was taking too long.,1,[],https://github.com/cleanflight/cleanflight/pull/2769,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2769,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2770,2017-04-29T18:38:51Z,2017-04-29T19:52:06Z,2017-04-29T19:52:06Z,MERGED,True,932,949,43,https://github.com/hydra,Merge recent BF changes.,48,[],https://github.com/cleanflight/cleanflight/pull/2770,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2770,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2771,2017-04-29T19:54:46Z,2017-05-02T21:15:07Z,2017-06-06T23:01:53Z,MERGED,True,6,4,1,https://github.com/hydra,CF/BF - Add VARIANT define to all variant targets.,1,[],https://github.com/cleanflight/cleanflight/pull/2771,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2771,"Adding VARIANT allows better flexibility in the target specific files.
It has always irked me that code for variants appears above official targets.  With this define we can fix this situation and hopefully improve the readability of the target files.  Especially ones were there are significant differences.","Adding VARIANT allows better flexibility in the target specific files.
It has always irked me that code for variants appears above official targets.  With this define we can fix this situation and hopefully improve the readability of the target files.  Especially ones were there are significant differences.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2771,2017-04-29T19:54:46Z,2017-05-02T21:15:07Z,2017-06-06T23:01:53Z,MERGED,True,6,4,1,https://github.com/hydra,CF/BF - Add VARIANT define to all variant targets.,1,[],https://github.com/cleanflight/cleanflight/pull/2771,https://github.com/blckmn,2,https://github.com/cleanflight/cleanflight/pull/2771#issuecomment-298198863,"Adding VARIANT allows better flexibility in the target specific files.
It has always irked me that code for variants appears above official targets.  With this define we can fix this situation and hopefully improve the readability of the target files.  Especially ones were there are significant differences.","I don't have a problem with this. Might even be worth putting both the fact that it is a variant, and the base target in the output hex file name....",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2771,2017-04-29T19:54:46Z,2017-05-02T21:15:07Z,2017-06-06T23:01:53Z,MERGED,True,6,4,1,https://github.com/hydra,CF/BF - Add VARIANT define to all variant targets.,1,[],https://github.com/cleanflight/cleanflight/pull/2771,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2771#issuecomment-298763469,"Adding VARIANT allows better flexibility in the target specific files.
It has always irked me that code for variants appears above official targets.  With this define we can fix this situation and hopefully improve the readability of the target files.  Especially ones were there are significant differences.",that would probably cause an issue with the configurator firmware flasher page code.  I'll merge this.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2771,2017-04-29T19:54:46Z,2017-05-02T21:15:07Z,2017-06-06T23:01:53Z,MERGED,True,6,4,1,https://github.com/hydra,CF/BF - Add VARIANT define to all variant targets.,1,[],https://github.com/cleanflight/cleanflight/pull/2771,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2771#issuecomment-298802816,"Adding VARIANT allows better flexibility in the target specific files.
It has always irked me that code for variants appears above official targets.  With this define we can fix this situation and hopefully improve the readability of the target files.  Especially ones were there are significant differences.","Sorry for my late comment on this, but I am still backlogged from the holidays. As a counter-proposal to this (which I think is going in the right direction), how about adding a define for BASE_TARGET or ORIGINAL_TARGET  to non-variants instead? I think this will make the conditionals in the target definitions a bit easier to read:
#ifdef BASE_TARGET
    ...
#elsif defined(<variant>)
    ...

vs.
#ifndef VARIANT
    ...
#elsif defined(<variant>)
    ...

Thoughts?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2776,2017-05-02T21:19:55Z,2017-05-02T21:53:07Z,2017-05-02T21:53:07Z,CLOSED,False,1909,958,58,https://github.com/hydra,merge recent betaflight changes,47,[],https://github.com/cleanflight/cleanflight/pull/2776,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2776,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2776,2017-05-02T21:19:55Z,2017-05-02T21:53:07Z,2017-05-02T21:53:07Z,CLOSED,False,1909,958,58,https://github.com/hydra,merge recent betaflight changes,47,[],https://github.com/cleanflight/cleanflight/pull/2776,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2776#issuecomment-298772590,,"closing, needs rebase.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2777,2017-05-02T21:54:34Z,2017-05-02T22:57:20Z,2017-05-02T22:57:20Z,MERGED,True,1742,942,41,https://github.com/hydra,merge recent bf changes,48,[],https://github.com/cleanflight/cleanflight/pull/2777,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2777,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2778,2017-05-03T21:38:08Z,2017-05-29T11:37:21Z,2017-05-29T11:37:21Z,CLOSED,False,195,8,11,https://github.com/SSPW,EasyRaceLapTimer Transponder Provider,8,[],https://github.com/cleanflight/cleanflight/pull/2778,https://github.com/SSPW,1,https://github.com/cleanflight/cleanflight/pull/2778,"I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.","I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2778,2017-05-03T21:38:08Z,2017-05-29T11:37:21Z,2017-05-29T11:37:21Z,CLOSED,False,195,8,11,https://github.com/SSPW,EasyRaceLapTimer Transponder Provider,8,[],https://github.com/cleanflight/cleanflight/pull/2778,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2778#issuecomment-299124345,"I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.","thanks for this, I will take a look asap.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2778,2017-05-03T21:38:08Z,2017-05-29T11:37:21Z,2017-05-29T11:37:21Z,CLOSED,False,195,8,11,https://github.com/SSPW,EasyRaceLapTimer Transponder Provider,8,[],https://github.com/cleanflight/cleanflight/pull/2778,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2778#issuecomment-299125541,"I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.","looks very good, well done!
Do you mind if I squash the commits when merging?
Is it possible you could add another commit that updates the documentation files?  I'd like to see at least a section that has links to ERLT receivers, forum threads, etc.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2778,2017-05-03T21:38:08Z,2017-05-29T11:37:21Z,2017-05-29T11:37:21Z,CLOSED,False,195,8,11,https://github.com/SSPW,EasyRaceLapTimer Transponder Provider,8,[],https://github.com/cleanflight/cleanflight/pull/2778,https://github.com/SSPW,4,https://github.com/cleanflight/cleanflight/pull/2778#issuecomment-299170738,"I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.","I don't mind if you squash. I am kind new to contributing. Definitely should have cleaned up a bit more before doing the request.
But before you squash, I have one question about configurator and EPROM storage and transponders. Seems the hex digits entered at configurator is ""inverted"" by the hex to string helpers for transponders data and stored that way. Got me a bit confused as I had to invert it back in my ERLT provider. Is there a reason for this? Just thinking that later when msp is used from a tx or osd to set transponder codes, those msp clients are going to have to send inverted byte data. This seems a bit confusing to me.
I can make changes in configurator and transponder providers do transponder data is stored ""wysiwyg"" as long as there isn't something else I am missing here. Let me know.
I looked at the docs but didnt find anything for the existing transponder support. I can start one. What doc would you suggest as a template?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2778,2017-05-03T21:38:08Z,2017-05-29T11:37:21Z,2017-05-29T11:37:21Z,CLOSED,False,195,8,11,https://github.com/SSPW,EasyRaceLapTimer Transponder Provider,8,[],https://github.com/cleanflight/cleanflight/pull/2778,https://github.com/SSPW,5,https://github.com/cleanflight/cleanflight/pull/2778#issuecomment-299302398,"I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.","created a Transponder.md with screenshots
https://github.com/SSPW/cleanflight/blob/erlt-provider/docs/Transponder.md",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2778,2017-05-03T21:38:08Z,2017-05-29T11:37:21Z,2017-05-29T11:37:21Z,CLOSED,False,195,8,11,https://github.com/SSPW,EasyRaceLapTimer Transponder Provider,8,[],https://github.com/cleanflight/cleanflight/pull/2778,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2778#issuecomment-299489501,"I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.","Great.  The main reason for inverting them was the privacy of people's iLap transponder codes which are paid for.
I'll try this and merge it this weekend.  Does the configurator need an update? Have you done it/are you doing it?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2778,2017-05-03T21:38:08Z,2017-05-29T11:37:21Z,2017-05-29T11:37:21Z,CLOSED,False,195,8,11,https://github.com/SSPW,EasyRaceLapTimer Transponder Provider,8,[],https://github.com/cleanflight/cleanflight/pull/2778,https://github.com/SSPW,7,https://github.com/cleanflight/cleanflight/pull/2778#issuecomment-299567649,"I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.","Its all ready.
cleanflight/cleanflight-configurator#479",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2778,2017-05-03T21:38:08Z,2017-05-29T11:37:21Z,2017-05-29T11:37:21Z,CLOSED,False,195,8,11,https://github.com/SSPW,EasyRaceLapTimer Transponder Provider,8,[],https://github.com/cleanflight/cleanflight/pull/2778,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/2778#issuecomment-299948543,"I have coded and tested an EasyRaceLapTimer (ERLT) transponder provider based on the existing CF transponder framework.
I have also modified the transponder update delay and jitter so those values are transponder specific.
I have tested this with SPRACINGF3EVO and RG_SSD_F3 targets.
I have also made a pull request on the CF Configurator for the supportng Transponder Tab change.",squashed and merged.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2779,2017-05-04T16:16:10Z,2017-05-05T15:17:57Z,2017-05-05T15:17:57Z,MERGED,True,4,4,1,https://github.com/McGiverGim,Update doc: common.h file is now common_fc_pre.h,1,[],https://github.com/cleanflight/cleanflight/pull/2779,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2779,Updated doc. The file common.h is now common_fc_pre.h.,Updated doc. The file common.h is now common_fc_pre.h.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2781,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2781#issuecomment-299281194,,"cleanflight_2.1.0_SPRACINGF3-20170405-2010.zip
cleanflight_2.1.0_NAZE-20170405-2010.zip",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2781#issuecomment-299281687,,"to try this, change motor outputs to servo outputs using resource command.
then use mixer RX_TO_SERVO.
configure an RX as usual.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2781#issuecomment-299289980,,"tested on SPRACINGF3 with 8 PWM inputs mapped to 8 PWM outputs using the following configuration
# Cleanflight / SPRACINGF3 2.1.0 May  4 2017 / 20:18:55 (18bea4a)
resource MOTOR 1 NONE
resource MOTOR 2 NONE
resource MOTOR 3 NONE
resource MOTOR 4 NONE
resource MOTOR 5 NONE
resource MOTOR 6 NONE
resource MOTOR 7 NONE
resource MOTOR 8 NONE
resource SERVO 1 A06n
resource SERVO 2 A07n
resource SERVO 3 A11n
resource SERVO 4 A12n
resource SERVO 5 B08n
resource SERVO 6 B09n
resource SERVO 7 A02n
resource SERVO 8 A03n
mixer RX_TO_SERVO

feature -RX_PPM
feature RX_PARALLEL_PWM
map TAER1234",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/jimmyhorns,5,https://github.com/cleanflight/cleanflight/pull/2781#issuecomment-299307518,,"Tested using Naze32 acro rev6 10DOP, JR XG14 Tx and JR RG031BX (xbus only output) Rx.
Used the attached Naze firmware. Flashes fine.
Configured UART2 to serial Rx in 'Ports'
Selected serial based receiver and Xbus type B in 'Configuration'
In 'Receiver' changed channel map to AER2T134 (and hit save)
Onto the CLI and then:
mixer RX_TO_SERVO
#note that this displays as PPM to Servo in the GUI configuration after doing this.
#then remove the motor assignments for motors 1 through 6
resource MOTOR 1 none
resource MOTOR 2 none
resource MOTOR 3 none
resource MOTOR 4 none
resource MOTOR 5 none
resource MOTOR 6 none
#then assign servos to the appropriate outputs (these were originally the designated pins for MOTOR 1 through 6).
resource SERVO 1 A08n
resource SERVO 2 A11n
resource SERVO 3 B06n
resource SERVO 4 B07n
resource SERVO 5 B08n
resource SERVO 6 B09n
#When you are done if you type resource in the CLI you should end up with a listing that looks like this:
resource
resource BEEPER 1 A12n
resource SERVO 1 A08n
resource SERVO 2 A11n
resource SERVO 3 B06n
resource SERVO 4 B07n
resource SERVO 5 B08n
resource SERVO 6 B09n
resource PPM 1 A00n
resource PWM 1 A00n
resource PWM 2 A01n
resource PWM 3 A02n
resource PWM 4 A03n
resource PWM 5 A06n
resource PWM 6 A07n
resource PWM 7 B00n
resource PWM 8 B01n
resource LED_STRIP 1 A06n
resource SERIAL_TX 11 A07n
resource SERIAL_TX 12 B01n
resource SERIAL_RX 11 A06n
resource SERIAL_RX 12 B00n
This will then give you direct servo output or passthrough, whether the board is armed or not, with the following assignments:
Servo 1  === Aileron / Roll
Servo 2 === Elevator / Pitch
Servo 3 === Rudder / Yaw
Servo 4 === Throttle
Servo 5 === Aux 1
Servo 6 === Aux 2
This is working fine with both Analog and Digital servos
Thanks very much for your help with this, solves my problem perfectly. For what its worth now I know how to get things working properly with AIRPLANE mode and using resource to correctly assign the servos im likely to give that a go too in some of my fixed wing models :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/2781#issuecomment-299430035,,"great.  i use CF on a couple fixed wings, the stabilisation really makes a big difference, especially in high-wind!
thanks for the feedback.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/Starejpes,7,https://github.com/cleanflight/cleanflight/pull/2781#issuecomment-395665358,,"Hi Hydra, I am several nights trying to make SPRACINGF3 with 8 PWM inputs mapped to 8 PWM using Hitec radio. I used your advice from May 5, 2017 it is working somehow but not with AETR1234 mapping. Is there any documentation to allow me to understand resources and their mappings. Would you be able to help me? Thank you.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/mikeller,8,https://github.com/cleanflight/cleanflight/pull/2781#issuecomment-395677184,,@Starejpes: https://github.com/betaflight/betaflight/wiki/Betaflight-resource-remapping,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2781,2017-05-04T19:09:34Z,2017-05-05T10:17:36Z,2018-06-13T05:28:06Z,MERGED,True,42,30,4,https://github.com/hydra,Implement RX to servo mixer,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2781,https://github.com/Starejpes,9,https://github.com/cleanflight/cleanflight/pull/2781#issuecomment-396817787,,"Hi,
I am already familiar with the link you sent me, Thank you, unfortunately it does not bring any light for me.
1/ I have receiver connected to SP Racing F3 board and it display movements of the controls well. Screen shot Receiver.PNG.
2/ I removed Motors (profile Airplane) from resources I am getting movement on the different servos I expect to get
Pitch on servo 7
Roll on servo 4, 5
Yaw on servo 6
Trottle on nill
3/ I do not understand software philosophy to solve the issue. Can anybody help to understand?
Best regards

Jindrich Kratochvil
67A North Beach Road, North Beach WA 6020
Mobile: +61 410 389 087
Email: jkratochv@hotmail.com

From: Michael Keller <notifications@github.com>
Sent: Friday, 8 June 2018 3:42 PM
To: cleanflight/cleanflight <cleanflight@noreply.github.com>
Cc: Starejpes <jkratochv@hotmail.com>; Mention <mention@noreply.github.com>
Subject: Re: [cleanflight/cleanflight] Implement RX to servo mixer (#2781)


@Starejpes<https://github.com/Starejpes>: https://github.com/betaflight/betaflight/wiki/Betaflight-resource-remapping

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<#2781 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AmICjGADROocqHiEsaLwd2yvPyaMX1paks5t6irIgaJpZM4NRGC4>.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2782,2017-05-05T15:57:55Z,2017-05-08T17:58:09Z,2017-05-08T17:58:09Z,MERGED,True,160,0,1,https://github.com/ledvinap,Resurrect src/utils/def_generated.pl,1,[],https://github.com/cleanflight/cleanflight/pull/2782,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2782,"Fix #2762, def_generated.pl was not copied into betagflight and got
lost","Fix #2762, def_generated.pl was not copied into betagflight and got
lost",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2782,2017-05-05T15:57:55Z,2017-05-08T17:58:09Z,2017-05-08T17:58:09Z,MERGED,True,160,0,1,https://github.com/ledvinap,Resurrect src/utils/def_generated.pl,1,[],https://github.com/cleanflight/cleanflight/pull/2782,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2782#issuecomment-299941629,"Fix #2762, def_generated.pl was not copied into betagflight and got
lost",thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2784,2017-05-05T22:24:31Z,2017-05-05T22:36:02Z,2017-05-05T22:36:03Z,MERGED,True,95,19,4,https://github.com/4712,added support for BLHeli32,4,[],https://github.com/cleanflight/cleanflight/pull/2784,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2784,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2788,2017-05-08T17:52:19Z,2017-05-08T18:15:37Z,2017-05-08T18:15:37Z,MERGED,True,1885,1365,281,https://github.com/hydra,Merge recent BF changes,73,[],https://github.com/cleanflight/cleanflight/pull/2788,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2788,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2795,2017-05-11T05:56:52Z,2017-05-29T11:35:57Z,2017-05-29T11:35:57Z,MERGED,True,3,3,1,https://github.com/hardybm,Updating cli variable telemetry_inversion to tlm_inversion,1,[],https://github.com/cleanflight/cleanflight/pull/2795,https://github.com/hardybm,1,https://github.com/cleanflight/cleanflight/pull/2795,Version 3.0 changed the mentions of variable telemetry_inversion to tml_inversion,Version 3.0 changed the mentions of variable telemetry_inversion to tml_inversion,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2798,2017-05-13T11:01:40Z,2017-06-03T15:40:59Z,2017-06-03T15:40:59Z,MERGED,True,3131,1166,285,https://github.com/hydra,merge recent bf changes,189,[],https://github.com/cleanflight/cleanflight/pull/2798,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2798,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2798,2017-05-13T11:01:40Z,2017-06-03T15:40:59Z,2017-06-03T15:40:59Z,MERGED,True,3131,1166,285,https://github.com/hydra,merge recent bf changes,189,[],https://github.com/cleanflight/cleanflight/pull/2798,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2798#issuecomment-305980536,,replaced by #2838,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2804,2017-05-17T18:40:38Z,2017-05-29T11:35:38Z,2017-05-29T11:35:38Z,MERGED,True,4,4,1,https://github.com/Schrolli91,Update Battery.md - virtual current sens formula,1,[],https://github.com/cleanflight/cleanflight/pull/2804,https://github.com/Schrolli91,1,https://github.com/cleanflight/cleanflight/pull/2804,False formula for the virtual current sensor,False formula for the virtual current sensor,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2807,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost","active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-302656106,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost","Sorry, my typo (+ testing build on wrong version locally)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-302668977,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost","Can someone briefly test it, please?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-302847016,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost","Seems to be mostly working. From the look of it, the null terminator at the end of the string is sent to the client now, causing display artefacts:

aux 1 31 0 1525 2100",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/ledvinap,5,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-302962485,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost","@martinbudden : You changed sbufWriteString() in 96e89d7. IMO this change is counterintuitive(in C terminating zero is not printed, puts, %s, ... ), naming the zero-terminating function sbufWriteStringZ or similar would be much better.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-302999623,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost",Good point. I'll submit a PR to fix it in the next few days.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/mikeller,7,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-303001430,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost",@martinbudden: I think we want to keep the improvements in this PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/martinbudden,8,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-303001983,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost","@mikeller , I'm happy for the change to be part of this PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/mikeller,9,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-303011794,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost",@martinbudden: It's not my PR. But it would be a shame if the proposed changes were lost once more.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-303021289,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost","@mikeller , my apologies - I didn't mean to close this PR - accidentally pressed the wrong button.
I think the easiest thing would be to merge this in and then for me to do a fixup of the naming later.",True,{'THUMBS_UP': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/ledvinap,11,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-303052451,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost","Fixed, crsf now writes terminating zero explicitly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2807,2017-05-18T16:35:36Z,2017-05-22T11:01:36Z,2017-05-22T11:01:36Z,MERGED,True,127,103,5,https://github.com/ledvinap,Improve box serialization,2,['Enhancement'],https://github.com/cleanflight/cleanflight/pull/2807,https://github.com/mikeller,12,https://github.com/cleanflight/cleanflight/pull/2807#issuecomment-303068624,"active boxes use bitmask instead of array
active box serialization is loop based instead of huge expression

Was included in
https://github.com/cleanflight/cleanflight/pull/2075/commits, but never
ported to BF and eventually lost",All good now. Thanks @ledvinap.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/christianrauch,1,https://github.com/cleanflight/cleanflight/pull/2812,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-303875519,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","Thanks for making the improvements. I would still like an explanation as to what benefits this change will bring. As it is now, I don't see what benefits would justify the additional effort required to maintain two more targets.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/christianrauch,3,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-303877175,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","I addressed some of the comments.
My statement:

use the available flash more efficiently

relates to the fact that on rev5 and rev6 targets we do not need to include all sensors, but only those that are actually on the hardware. The remaining space can instead be used for additional features, e.g. the magnetometer and the USE_RX_MSP.
I assume that people that are using cleanflight are aware of which version of the NAZE hardware they are using. If not, they can still use the generic NAZE target as before, which will work on all NAZE revisions. Users that want to use more features can refer to the specific firmware version.
Determining your NAZE revision is still easier than checking out the sourcecode and manually patching the target.h.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-303882531,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","relates to the fact that on rev5 and rev6 targets we do not need to include all sensors, but only those that are actually on the hardware. The remaining space can instead be used for additional features, e.g. the magnetometer and the USE_RX_MSP.

Magnetometer is already active in the current configuration. RX_MSP is a feature that is 'for testing only', so it shouldn't be used by users not actually working on the firmware. Both of them are not really justifications for adding more targets.
You have to understand that support for NAZE and the other F1 targets is kept in cleanflight / Betaflight just so that owners of craft with these boards can 'dip their toe' into recent versions of the firmware, before they have to commit to buying new hardware and modifying their craft. The real benefits of recent versions of the firmware (faster loop times, DShot, more features,...) will only be available to them once they upgrade. There are regular calls from developers for F1 support to be dropped altogether, since it creates extra work, so justifying adding even more work to this is not really possible.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/christianrauch,5,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-304145835,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","At least on the NAZE target.h, the magnetometer is commented out, so it is not used at all.
Why is USE_RX_MSP only for people working on the firmware? As I understand, it allows you to control the FC via MSP_SET_RAW_RC messages, e.g. through a companion PC. I see this as a user feature and not a developer feature. And even if USE_RX_MSP is defined, it is not active by default.
I am actually surprised that dropping F1 support is actively discussed. I thought that F1 flight controller are widely used, since they are cheap and easy to use.
I still think that using the magnetometer and controlling the flight controller via MSP_SET_RAW_RC are useful features. But if there are still strong rejections against providing these specific targets with additional features (compared to the generic version), feel free to close this PR. I will then recommend clean version 1.14.2 to people that want to use the magnetometer and control the flight controller via MSP_SET_RAW_RC messages.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/mikeller,6,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-304168912,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","At least on the NAZE target.h, the magnetometer is commented out, so it is not used at all.

For some reason that is not what you are basing your PR on.

Why is USE_RX_MSP only for people working on the firmware?

I guess part of it is that it is not as extensively developed and tested for reliability as the other RX types, since it is not intended to be used with a craft with props on. Users wanting to do so can - but it's at their own risk of getting attacked by a blender gone mad.
I am actually surprised that dropping F1 support is actively discussed. I thought that F1 flight controller are widely used, since they are cheap and easy to use.
Why are you surprised? The technology has moved on, and as much as it would be nice if today's float based PID controller could run at a reasonable speed on hardware without float support, that's just not the reality. To exacerbate this, the amount of useful features that has been added, plus the improvements that have been made to existing features simply have no way to fit into the 128K flash that F1 has.

I will then recommend clean version 1.14.2 to people that want to use the magnetometer and control the flight controller via MSP_SET_RAW_RC messages.

That is ok. This is open source, and people are free to use whatever version they like. If they are happy with the performance and features they get out of 1.14.2, and that there is little support and no bug fixes available, then there is not much reason for them to upgrade. As I said before, you have to understand that F1 support on 2.0 and on is only kept in as a kind of 'technology preview', and is not intended to be made into more than this.
@hydra: Do you agree to closing this?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-304232702,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","@christianrauch , I don't like to discourage people who make contributions to the codebase, however as is pointed out earlier in the thread, there is a maintenance cost to these changes. Whether it is worth bearing the maintenance cost depends on the utility of the features added. I would point out:

I haven't seen people asking for RX_MSP or magnetometer support on NAZE
On board magnetometer support is actually virtually useless anyway, since the high currents near the flight controller render its output unreliable (see various discussions around iNav)
If the user wants magnetometer supported flight modes, then iNav is a better choice than betaflight.


I will then recommend clean version 1.14.2 to people that want to use the magnetometer

As stated about, it is better to recommend iNav to people who want to use the magnetometer.
Having said all the above, please don't be discouraged from making future contributions.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/christianrauch,8,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-304238627,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","The primary feature I would like to have enabled at compile time is actually USE_RX_MSP.
I am developing a C++ library for communicating with flight controllers over MSP. I would say that most people that are using this library are interested in controlling a FC with an onboard PC using the MSP_SET_RAW_RC message. If this feature is removed at compile time, people need to manually check out the source code and add/remove a couple of #defines to have this feature enabled again.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/martinbudden,9,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-304240788,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","I'm much more sympathetic to enabling USE_RX_MSP, especially if there is (or becomes) available a C++ library that enables controlling flight controllers over MSP.
Turing on USE_RX_MSP costs 224 bytes on NAZE and currently fits in the build, so this is a currently a viable option.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/mikeller,10,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-304241486,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","Totally agreed with @martinbudden on this. Just be aware that it will be a prime candidate to be eliminated if space needs to be freed up to make the firmware fit onto F1 targets in the future.
Also, may I suggest that you get yourself an F3 based board for testing? They are available from USD 10 from China, and the amount of flash space is much less of a problem with them.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2812,2017-05-23T23:04:16Z,2017-05-28T23:54:42Z,2017-05-28T23:54:42Z,CLOSED,False,24,0,3,https://github.com/christianrauch,"specific variant targets for NAZE rev5, rev6",3,"['Do not merge', 'Missing Information']",https://github.com/cleanflight/cleanflight/pull/2812,https://github.com/christianrauch,11,https://github.com/cleanflight/cleanflight/pull/2812#issuecomment-304456547,"This commit provides variant targets for rev5 and rev6 of NAZE to use the available flash more efficiently. If no specific revision is given, the generic NAZE target will be built.
Only NAZE_rev6 has been tested on real hardware for now.
I am rebasing this this commit on tag CLFL_v2.0.2 since NAZE on master (069e837) is not booting.","There is a new PR #2819 to just activate USE_RX_MSP.
I am developing a C++ library for MSP communication at: https://github.com/christianrauch/msp. It is supposed to support all firmwares that use MSP communication (MultiWii, Cleanflight, Betaflight).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2814,2017-05-25T08:48:53Z,2017-05-29T02:54:11Z,2017-05-29T02:54:11Z,CLOSED,False,1924,583,146,https://github.com/DrClaes,Changed Throttle LED Strip functionality,109,[],https://github.com/cleanflight/cleanflight/pull/2814,https://github.com/DrClaes,1,https://github.com/cleanflight/cleanflight/pull/2814,Throttle Overlay for LED strip fades color (all HSV) smoothly from chosen color to next user defined color,Throttle Overlay for LED strip fades color (all HSV) smoothly from chosen color to next user defined color,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2814,2017-05-25T08:48:53Z,2017-05-29T02:54:11Z,2017-05-29T02:54:11Z,CLOSED,False,1924,583,146,https://github.com/DrClaes,Changed Throttle LED Strip functionality,109,[],https://github.com/cleanflight/cleanflight/pull/2814,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2814#issuecomment-303985104,Throttle Overlay for LED strip fades color (all HSV) smoothly from chosen color to next user defined color,@DrClaes: Something is not quite right with your PR. Can you please rebase / fix?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2814,2017-05-25T08:48:53Z,2017-05-29T02:54:11Z,2017-05-29T02:54:11Z,CLOSED,False,1924,583,146,https://github.com/DrClaes,Changed Throttle LED Strip functionality,109,[],https://github.com/cleanflight/cleanflight/pull/2814,https://github.com/McGiverGim,3,https://github.com/cleanflight/cleanflight/pull/2814#issuecomment-303990058,Throttle Overlay for LED strip fades color (all HSV) smoothly from chosen color to next user defined color,@DrClaes The base is betaflight:master and not cleanflight:master?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2814,2017-05-25T08:48:53Z,2017-05-29T02:54:11Z,2017-05-29T02:54:11Z,CLOSED,False,1924,583,146,https://github.com/DrClaes,Changed Throttle LED Strip functionality,109,[],https://github.com/cleanflight/cleanflight/pull/2814,https://github.com/DrClaes,4,https://github.com/cleanflight/cleanflight/pull/2814#issuecomment-304047880,Throttle Overlay for LED strip fades color (all HSV) smoothly from chosen color to next user defined color,"Yes; I will try to put the pull request to betaflight. First time ever for me.

/Claes Williamsson
…
 25 maj 2017 kl. 13:40 skrev Míguel Ángel Mulero Martínez ***@***.***>:

 @DrClaes <https://github.com/drclaes> The base is betaflight:master and not cleanflight:master?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub <#2814 (comment)>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AbmKkttVQ8Vx5IrJBjRAKhoiIkrmqwbvks5r9Wi4gaJpZM4NmHsg>.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2814,2017-05-25T08:48:53Z,2017-05-29T02:54:11Z,2017-05-29T02:54:11Z,CLOSED,False,1924,583,146,https://github.com/DrClaes,Changed Throttle LED Strip functionality,109,[],https://github.com/cleanflight/cleanflight/pull/2814,https://github.com/mikeller,5,https://github.com/cleanflight/cleanflight/pull/2814#issuecomment-304170652,Throttle Overlay for LED strip fades color (all HSV) smoothly from chosen color to next user defined color,"@DrClaes: All good, nothing that couldn't be fixed. If this PR has been superseded, can you please close it?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2816,2017-05-26T23:58:28Z,2017-05-27T00:17:14Z,2017-05-27T00:17:45Z,MERGED,True,25,25,8,https://github.com/phord,Fix markdown links to filenames with spaces,1,[],https://github.com/cleanflight/cleanflight/pull/2816,https://github.com/phord,1,https://github.com/cleanflight/cleanflight/pull/2816,"Markdown links cannot have actual spaces in the filename.  Use URL-encoded
spaces (%20) instead.
robo-fixed using:
sed -i -e 's/(]([^ )]) ([^""])/\1%20\2/g' **/.md
If you don't use zhell, you may need to customize the ** part of that command.","Markdown links cannot have actual spaces in the filename.  Use URL-encoded
spaces (%20) instead.
robo-fixed using:
sed -i -e 's/(]([^ )]) ([^""])/\1%20\2/g' **/.md
If you don't use zhell, you may need to customize the ** part of that command.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2816,2017-05-26T23:58:28Z,2017-05-27T00:17:14Z,2017-05-27T00:17:45Z,MERGED,True,25,25,8,https://github.com/phord,Fix markdown links to filenames with spaces,1,[],https://github.com/cleanflight/cleanflight/pull/2816,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2816#issuecomment-304412833,"Markdown links cannot have actual spaces in the filename.  Use URL-encoded
spaces (%20) instead.
robo-fixed using:
sed -i -e 's/(]([^ )]) ([^""])/\1%20\2/g' **/.md
If you don't use zhell, you may need to customize the ** part of that command.",Thanks - now the links work!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2817,2017-05-27T01:29:08Z,2017-05-27T01:38:35Z,2017-05-27T01:38:45Z,MERGED,True,1,1,1,https://github.com/pascoea,Updated Telemetry Inversion parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2817,https://github.com/pascoea,1,https://github.com/cleanflight/cleanflight/pull/2817,"Updated Telemetry inversion parameter from telemetry_inversion to tlm_inversion.
Not sure if any of the other parameters have changed.","Updated Telemetry inversion parameter from telemetry_inversion to tlm_inversion.
Not sure if any of the other parameters have changed.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2817,2017-05-27T01:29:08Z,2017-05-27T01:38:35Z,2017-05-27T01:38:45Z,MERGED,True,1,1,1,https://github.com/pascoea,Updated Telemetry Inversion parameter,1,[],https://github.com/cleanflight/cleanflight/pull/2817,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2817#issuecomment-304418143,"Updated Telemetry inversion parameter from telemetry_inversion to tlm_inversion.
Not sure if any of the other parameters have changed.","Thanks, @pascoea!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2819,2017-05-27T14:36:14Z,2017-05-28T23:51:09Z,2017-05-28T23:53:15Z,MERGED,True,2,0,1,https://github.com/christianrauch,activate 'USE_RX_MSP' on NAZE targets,1,[],https://github.com/cleanflight/cleanflight/pull/2819,https://github.com/christianrauch,1,https://github.com/cleanflight/cleanflight/pull/2819,"This PR replaces #2812. It activates 'USE_RX_MSP' for NAZE targets. I am not able to test this on hardware for now, since commit 839b5dd breaks cleanflight on NAZE targets.","This PR replaces #2812. It activates 'USE_RX_MSP' for NAZE targets. I am not able to test this on hardware for now, since commit 839b5dd breaks cleanflight on NAZE targets.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2819,2017-05-27T14:36:14Z,2017-05-28T23:51:09Z,2017-05-28T23:53:15Z,MERGED,True,2,0,1,https://github.com/christianrauch,activate 'USE_RX_MSP' on NAZE targets,1,[],https://github.com/cleanflight/cleanflight/pull/2819,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2819#issuecomment-304506194,"This PR replaces #2812. It activates 'USE_RX_MSP' for NAZE targets. I am not able to test this on hardware for now, since commit 839b5dd breaks cleanflight on NAZE targets.",@christianrauch: What exactly is broken with NAZE? Is there an issue for this?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2819,2017-05-27T14:36:14Z,2017-05-28T23:51:09Z,2017-05-28T23:53:15Z,MERGED,True,2,0,1,https://github.com/christianrauch,activate 'USE_RX_MSP' on NAZE targets,1,[],https://github.com/cleanflight/cleanflight/pull/2819,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/2819#issuecomment-304516310,"This PR replaces #2812. It activates 'USE_RX_MSP' for NAZE targets. I am not able to test this on hardware for now, since commit 839b5dd breaks cleanflight on NAZE targets.","@christianrauch , could you also make PR for betaflight? Thanks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2821,2017-05-28T12:46:59Z,2017-05-28T13:43:16Z,2017-05-28T13:43:16Z,CLOSED,False,1,1,1,https://github.com/ledvinap,IOGetByTag did not handle empty Tag correctly,1,"['BUG', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2821,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2821,"Fix critical bug.
IOGetByTag could return invalid IO_t when passed NONE. This error was triggered by non-zero bit in flash location not directly related to IO code and was dependent on another memory then.
Triggered by 839b5dd#commitcomment-22309747, fixes it
I am very sorry ...","Fix critical bug.
IOGetByTag could return invalid IO_t when passed NONE. This error was triggered by non-zero bit in flash location not directly related to IO code and was dependent on another memory then.
Triggered by 839b5dd#commitcomment-22309747, fixes it
I am very sorry ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2821,2017-05-28T12:46:59Z,2017-05-28T13:43:16Z,2017-05-28T13:43:16Z,CLOSED,False,1,1,1,https://github.com/ledvinap,IOGetByTag did not handle empty Tag correctly,1,"['BUG', 'Critical']",https://github.com/cleanflight/cleanflight/pull/2821,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2821#issuecomment-304516068,"Fix critical bug.
IOGetByTag could return invalid IO_t when passed NONE. This error was triggered by non-zero bit in flash location not directly related to IO code and was dependent on another memory then.
Triggered by 839b5dd#commitcomment-22309747, fixes it
I am very sorry ...",Merged from betaflight version (betaflight/betaflight#3165),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2824,2017-05-29T02:47:27Z,2017-05-29T03:06:32Z,2017-05-29T03:15:14Z,CLOSED,False,1,1,1,https://github.com/xdwgood,Update accgyro_mpu6050.c,4,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/2824,https://github.com/xdwgood,1,https://github.com/cleanflight/cleanflight/pull/2824,Modifying annotation information.,Modifying annotation information.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2824,2017-05-29T02:47:27Z,2017-05-29T03:06:32Z,2017-05-29T03:15:14Z,CLOSED,False,1,1,1,https://github.com/xdwgood,Update accgyro_mpu6050.c,4,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/2824,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2824#issuecomment-304562506,Modifying annotation information.,"Can you please remove your second commit:

pull requests should have a cohaerent content, and not fix various things at once;
schedulerTaskResetStatistics has already been fixed in Betaflight in betaflight/betaflight#3159. This will be merged into cleanflight at some stage. Fixing this in cleanflight as well will cause a merge conflict.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2824,2017-05-29T02:47:27Z,2017-05-29T03:06:32Z,2017-05-29T03:15:14Z,CLOSED,False,1,1,1,https://github.com/xdwgood,Update accgyro_mpu6050.c,4,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/2824,https://github.com/xdwgood,3,https://github.com/cleanflight/cleanflight/pull/2824#issuecomment-304564046,Modifying annotation information.,@mikeller  Thanks. I am a cleanflight fan.Please forgive me for my mistake.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2825,2017-05-29T03:12:09Z,2017-05-29T03:51:00Z,2017-05-29T03:55:38Z,MERGED,True,1,1,1,https://github.com/xdwgood,Update accgyro_mpu6050.c,1,[],https://github.com/cleanflight/cleanflight/pull/2825,https://github.com/xdwgood,1,https://github.com/cleanflight/cleanflight/pull/2825,Modifying annotation information,Modifying annotation information,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2825,2017-05-29T03:12:09Z,2017-05-29T03:51:00Z,2017-05-29T03:55:38Z,MERGED,True,1,1,1,https://github.com/xdwgood,Update accgyro_mpu6050.c,1,[],https://github.com/cleanflight/cleanflight/pull/2825,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2825#issuecomment-304566858,Modifying annotation information,"Thank you for your contribution, @xdwgood!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2829,2017-05-29T20:58:15Z,2017-06-03T14:23:33Z,2017-06-06T23:01:49Z,MERGED,True,2,0,1,https://github.com/hydra,CF/BF - SPRACINGF3NEO - Use appropriate current sensor scale.,1,[],https://github.com/cleanflight/cleanflight/pull/2829,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2829,110.00 A measurement with ~60.00Kohm = 0.0300 mV/A,110.00 A measurement with ~60.00Kohm = 0.0300 mV/A,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2830,2017-05-31T08:25:34Z,2017-05-31T13:04:54Z,2017-05-31T13:04:54Z,MERGED,True,1,1,1,https://github.com/xdwgood,Update fc_core.c,1,[],https://github.com/cleanflight/cleanflight/pull/2830,https://github.com/xdwgood,1,https://github.com/cleanflight/cleanflight/pull/2830,Word spelling error,Word spelling error,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/Smeat,1,https://github.com/cleanflight/cleanflight/pull/2831,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.","This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305345744,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.","Well spotted, @Smeat. But this will change the assignments of PWM inputs and motors to pins. I am not sure that this is what users of this board would want?
As an alternative, how about disabling I2C? (disclaimer: I don't know much about this target.)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/Smeat,3,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305348211,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.","This board acts as a frame, so the motor outputs are more or less fixed.
As for inputs: Since 1.14.2 seems to be the last working release for this target, my intention was to restore the assignments used there. But I am not opposed to change this if there is any valid reason.
Disabling I2C would be rather bad because the gyro and acc use I2C.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305349496,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.","Fair enough. So you've tested your change, and all input / output mappings are correct?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/AleksandrNull,5,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305355570,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.","That's correct commit. At least I've tested it from point of view of setting PB0,PB1,PB8 and PB9 s motor output but didn't touched I2C pins PB6 and PB7. I just changed their role to TIM_USE_PWM but with INPUT(0) state. So this fix looks good to me. From what I see it probably also requires reassignment of motors still.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/AleksandrNull,6,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305356641,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.","Anyway, I've tested it and it at least not flying away 5 seconds after booting up and testing of motors and all i2c devs is fine.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/Smeat,7,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305358262,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.","I made a little mistake with the motor assignments. But now it should map to the default ""Quad X"".
However I had to remove PA6 and PA7 to make motor 1 and 3 work properly. Those are used for the onboard nrf24l01-IC, so I think it shouldn't matter to remove that timer, but I am not entirely sure.
So far I was able to test it with a 5 channel ""PWM RX input"" and it flew just fine.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/mikeller,8,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305360403,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.",Mergeing this since it makes the target work. Any testing and feedback for further improvements appreciated.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/AleksandrNull,9,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305362251,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.",Last one works perfectly but I have one question to Kevin: you're talking about nrf24l01 onboard. Are you talking about CJMCU ? There is no such chip on board by default. Or you talking about soldered nrf24l01 module ?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2831,2017-05-31T23:11:14Z,2017-06-01T01:05:22Z,2017-06-02T23:35:08Z,MERGED,True,9,11,2,https://github.com/Smeat,Fix CJMCU pin mapping.,1,[],https://github.com/cleanflight/cleanflight/pull/2831,https://github.com/Smeat,10,https://github.com/cleanflight/cleanflight/pull/2831#issuecomment-305445857,"This should fix #2796.
The problem occurred because motor 3 and 4 were mapped to PB6 and PB7, which are used for I2C.
I am no expert on this and don't know if I broke anything else with this.
For now I just restored the functionality from 1.14.2 with PA8 as CH5/AUX1.","@AleksandrNull yes you are right, I worded that poorly. I meant a module connected to the exposed pins.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2832,2017-06-01T07:05:58Z,2017-06-01T07:07:53Z,2017-06-01T07:07:53Z,MERGED,True,26,0,2,https://github.com/McGiverGim,Documentation for combine ibus serial rx and telemetry on same UART,1,[],https://github.com/cleanflight/cleanflight/pull/2832,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2832,"This PR #2554 was not merged in CF1.x, and was merged into BF. But in BF the doc was not updated.
This PR only recovers the docs updated in this PR, explaining how to use the same UART for SerialRX and Telemetry in IBus.","This PR #2554 was not merged in CF1.x, and was merged into BF. But in BF the doc was not updated.
This PR only recovers the docs updated in this PR, explaining how to use the same UART for SerialRX and Telemetry in IBus.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2835,2017-06-03T14:21:15Z,2017-06-03T18:22:50Z,2017-06-06T23:01:41Z,MERGED,True,347,17,9,https://github.com/hydra,SPRACINGF4NEO - Initial target support.,4,[],https://github.com/cleanflight/cleanflight/pull/2835,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2835,"binary for testing:
cleanflight_2.1.0_SPRACINGF4NEO-20170603-1847.zip","binary for testing:
cleanflight_2.1.0_SPRACINGF4NEO-20170603-1847.zip",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2836,2017-06-03T14:21:28Z,2017-06-03T18:10:18Z,2017-06-06T23:01:48Z,MERGED,True,7,7,1,https://github.com/hydra,CF/BF - Cleanup OSD default positions.,1,[],https://github.com/cleanflight/cleanflight/pull/2836,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2836,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2837,2017-06-03T14:22:59Z,2017-06-03T18:10:46Z,2017-06-06T23:01:47Z,MERGED,True,8,4,1,https://github.com/hydra,CF/BF - Always size optimize some non-speed critical files.,2,[],https://github.com/cleanflight/cleanflight/pull/2837,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2837,This goes some way to addressing #2808 and certainly allows the new SPRACINGF4NEO target to have all the features enabled now.  See #2835,This goes some way to addressing #2808 and certainly allows the new SPRACINGF4NEO target to have all the features enabled now.  See #2835,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2837,2017-06-03T14:22:59Z,2017-06-03T18:10:46Z,2017-06-06T23:01:47Z,MERGED,True,8,4,1,https://github.com/hydra,CF/BF - Always size optimize some non-speed critical files.,2,[],https://github.com/cleanflight/cleanflight/pull/2837,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2837#issuecomment-305983046,This goes some way to addressing #2808 and certainly allows the new SPRACINGF4NEO target to have all the features enabled now.  See #2835,rebased on recent BF changes where the size/speed optimizations are now applied to all targets except F1.  The original commit f34f905 is not needed but the cleanup commit is still needed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2838,2017-06-03T15:04:28Z,2017-06-03T15:40:57Z,2017-06-03T15:40:57Z,MERGED,True,2847,1069,281,https://github.com/hydra,merge recent BF changes,190,[],https://github.com/cleanflight/cleanflight/pull/2838,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2838,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2839,2017-06-03T17:43:12Z,2017-06-04T12:36:58Z,2017-06-06T23:01:32Z,MERGED,True,64,98,3,https://github.com/hydra,Cleanup some dashboard code.,2,[],https://github.com/cleanflight/cleanflight/pull/2839,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2839,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2840,2017-06-03T18:09:41Z,2017-06-03T18:31:44Z,2017-06-06T23:01:37Z,MERGED,True,1,1,1,https://github.com/hydra,CF - Update travis script to use correct target filename.,1,[],https://github.com/cleanflight/cleanflight/pull/2840,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2840,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2841,2017-06-04T08:37:11Z,2017-06-04T14:12:40Z,2017-06-04T14:12:40Z,MERGED,True,2,1,1,https://github.com/McGiverGim,Fix compiles issues when not defined USE_SERVOS,1,[],https://github.com/cleanflight/cleanflight/pull/2841,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2841,"When added:
#undef USE_SERVOS

to the target.h file to free some space to other features, the compiler gives an error because:
/tmp/ccq2pmk9.ltrans15.ltrans.o: In function `loadEEPROM':
/mnt/d/git/mcgivergim/cleanflight/./src/main/config/config_eeprom.c:180: undefined reference to `servoMixers'

This commit solves the problem.
NOTE: I don't know what the code does exactly, so maybe it's better to put the conditional in other part. Please review the code before merge.","When added:
#undef USE_SERVOS

to the target.h file to free some space to other features, the compiler gives an error because:
/tmp/ccq2pmk9.ltrans15.ltrans.o: In function `loadEEPROM':
/mnt/d/git/mcgivergim/cleanflight/./src/main/config/config_eeprom.c:180: undefined reference to `servoMixers'

This commit solves the problem.
NOTE: I don't know what the code does exactly, so maybe it's better to put the conditional in other part. Please review the code before merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2842,2017-06-04T13:18:48Z,2017-06-04T13:19:30Z,2017-06-04T14:13:09Z,CLOSED,False,0,4,1,https://github.com/martinbudden,Restored BLHELI 4WAY interface on BEEBRAIN,1,[],https://github.com/cleanflight/cleanflight/pull/2842,https://github.com/martinbudden,1,https://github.com/cleanflight/cleanflight/pull/2842,Since BEEBRAIN can be used with brushless motors and there is room.,Since BEEBRAIN can be used with brushless motors and there is room.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2842,2017-06-04T13:18:48Z,2017-06-04T13:19:30Z,2017-06-04T14:13:09Z,CLOSED,False,0,4,1,https://github.com/martinbudden,Restored BLHELI 4WAY interface on BEEBRAIN,1,[],https://github.com/cleanflight/cleanflight/pull/2842,https://github.com/martinbudden,2,https://github.com/cleanflight/cleanflight/pull/2842#issuecomment-306039592,Since BEEBRAIN can be used with brushless motors and there is room.,"Oops, made against Cleanflight rather than betaflight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2842,2017-06-04T13:18:48Z,2017-06-04T13:19:30Z,2017-06-04T14:13:09Z,CLOSED,False,0,4,1,https://github.com/martinbudden,Restored BLHELI 4WAY interface on BEEBRAIN,1,[],https://github.com/cleanflight/cleanflight/pull/2842,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2842#issuecomment-306042444,Since BEEBRAIN can be used with brushless motors and there is room.,lol,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2843,2017-06-05T08:08:54Z,2017-06-06T19:37:11Z,2017-06-06T19:37:11Z,CLOSED,False,2015,1746,51,https://github.com/adrianmiriuta,enable BOXHEADADJ when HEADFREEE is active to enable correction of gyro drift ,26,[],https://github.com/cleanflight/cleanflight/pull/2843,https://github.com/adrianmiriuta,1,https://github.com/cleanflight/cleanflight/pull/2843,enable BOXHEADADJ when HEADFREEE active to enable correction of gyro drift,enable BOXHEADADJ when HEADFREEE active to enable correction of gyro drift,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2843,2017-06-05T08:08:54Z,2017-06-06T19:37:11Z,2017-06-06T19:37:11Z,CLOSED,False,2015,1746,51,https://github.com/adrianmiriuta,enable BOXHEADADJ when HEADFREEE is active to enable correction of gyro drift ,26,[],https://github.com/cleanflight/cleanflight/pull/2843,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2843#issuecomment-306168071,enable BOXHEADADJ when HEADFREEE active to enable correction of gyro drift,"Looks like something went wrong with this PR, there are a bunch of commits in here that don't belong in here. Once your PR betaflight/betaflight#3210 has been approved, the changes will get into cleanflight eventually, with no separate PR required.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2843,2017-06-05T08:08:54Z,2017-06-06T19:37:11Z,2017-06-06T19:37:11Z,CLOSED,False,2015,1746,51,https://github.com/adrianmiriuta,enable BOXHEADADJ when HEADFREEE is active to enable correction of gyro drift ,26,[],https://github.com/cleanflight/cleanflight/pull/2843,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2843#issuecomment-306594316,enable BOXHEADADJ when HEADFREEE active to enable correction of gyro drift,I'll merge the change in from the commit in BF.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2845,2017-06-06T20:26:16Z,2017-06-06T20:39:34Z,2017-06-06T23:01:34Z,MERGED,True,1619,1624,48,https://github.com/hydra,merge recent BF changes,27,[],https://github.com/cleanflight/cleanflight/pull/2845,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2845,"includes fixes to the SPRACINGF4NEO targets that were broken in BF.
missing semicolon, missing #define TARGET_CONFIG etc.
https://github.com/betaflight/betaflight/blob/master/src/main/target/SPRACINGF4NEO/config.c#L33","includes fixes to the SPRACINGF4NEO targets that were broken in BF.
missing semicolon, missing #define TARGET_CONFIG etc.
https://github.com/betaflight/betaflight/blob/master/src/main/target/SPRACINGF4NEO/config.c#L33",True,{'THUMBS_UP': ['https://github.com/aricblunk']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2846,2017-06-06T21:20:28Z,2017-10-21T13:22:17Z,2017-10-21T13:22:20Z,CLOSED,False,4,4,4,https://github.com/hydra,CF/BF - Cleanup TELEMETRY_UART configuration.,1,[],https://github.com/cleanflight/cleanflight/pull/2846,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2846,"There were some targets incorrectly using SBUS_TELEMETRY_UART
(BetaflightF3, Lux_Race).  That define appears nowhere else in the main
codebase and had no effect.
For clarity, the SBUS_TELEMETRY_UART that the TINYFISH target uses has
been renamed to SBUS_AND_TELEMETRY_UART.
If the intention for the LUX_RACE and BETAFLIGHTF3 is the same as the
TINYFISH then those targets and the TINYFISH should also define
TELEMETRY_PROVIDER_DEFAULT as FUNCTION_TELEMETRY_FRSKY | FUNCTION_RX_SERIAL and the code in the TINYFISH/config.c can be
deleted.","There were some targets incorrectly using SBUS_TELEMETRY_UART
(BetaflightF3, Lux_Race).  That define appears nowhere else in the main
codebase and had no effect.
For clarity, the SBUS_TELEMETRY_UART that the TINYFISH target uses has
been renamed to SBUS_AND_TELEMETRY_UART.
If the intention for the LUX_RACE and BETAFLIGHTF3 is the same as the
TINYFISH then those targets and the TINYFISH should also define
TELEMETRY_PROVIDER_DEFAULT as FUNCTION_TELEMETRY_FRSKY | FUNCTION_RX_SERIAL and the code in the TINYFISH/config.c can be
deleted.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2846,2017-06-06T21:20:28Z,2017-10-21T13:22:17Z,2017-10-21T13:22:20Z,CLOSED,False,4,4,4,https://github.com/hydra,CF/BF - Cleanup TELEMETRY_UART configuration.,1,[],https://github.com/cleanflight/cleanflight/pull/2846,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2846#issuecomment-322527289,"There were some targets incorrectly using SBUS_TELEMETRY_UART
(BetaflightF3, Lux_Race).  That define appears nowhere else in the main
codebase and had no effect.
For clarity, the SBUS_TELEMETRY_UART that the TINYFISH target uses has
been renamed to SBUS_AND_TELEMETRY_UART.
If the intention for the LUX_RACE and BETAFLIGHTF3 is the same as the
TINYFISH then those targets and the TINYFISH should also define
TELEMETRY_PROVIDER_DEFAULT as FUNCTION_TELEMETRY_FRSKY | FUNCTION_RX_SERIAL and the code in the TINYFISH/config.c can be
deleted.","in the latest BF master SBUS_TELEMETRY_UART is used to enabled smartport telemetry, i think it's easier now to just rename SBUS_TELEMETRY_UART to SMARPORT_TELEMETRY_UART.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2846,2017-06-06T21:20:28Z,2017-10-21T13:22:17Z,2017-10-21T13:22:20Z,CLOSED,False,4,4,4,https://github.com/hydra,CF/BF - Cleanup TELEMETRY_UART configuration.,1,[],https://github.com/cleanflight/cleanflight/pull/2846,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2846#issuecomment-338394142,"There were some targets incorrectly using SBUS_TELEMETRY_UART
(BetaflightF3, Lux_Race).  That define appears nowhere else in the main
codebase and had no effect.
For clarity, the SBUS_TELEMETRY_UART that the TINYFISH target uses has
been renamed to SBUS_AND_TELEMETRY_UART.
If the intention for the LUX_RACE and BETAFLIGHTF3 is the same as the
TINYFISH then those targets and the TINYFISH should also define
TELEMETRY_PROVIDER_DEFAULT as FUNCTION_TELEMETRY_FRSKY | FUNCTION_RX_SERIAL and the code in the TINYFISH/config.c can be
deleted.","closing this, may revisit this in the future.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2847,2017-06-06T22:39:50Z,2017-06-06T23:00:55Z,2017-06-06T23:01:16Z,MERGED,True,4,0,1,https://github.com/hydra,CF/BF - Fix OSD slave serial port initialisation,1,[],https://github.com/cleanflight/cleanflight/pull/2847,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2847,broken by fdfe9e8,broken by fdfe9e8,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2848,2017-06-06T23:07:10Z,2017-06-08T03:02:16Z,2017-06-20T18:42:45Z,MERGED,True,1,1,1,https://github.com/hydra,CF/BF - Fix alignment of OSD 'disarmed',1,[],https://github.com/cleanflight/cleanflight/pull/2848,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2848,so it aligns with 'craft_name' and battery voltages.,so it aligns with 'craft_name' and battery voltages.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2849,2017-06-07T11:09:38Z,2017-06-08T23:43:44Z,2017-06-08T23:57:59Z,CLOSED,False,21,13,9,https://github.com/grizewald,Fix TINYFISH target definition,16,"['Needs additional work', 'Do not merge']",https://github.com/cleanflight/cleanflight/pull/2849,https://github.com/grizewald,1,https://github.com/cleanflight/cleanflight/pull/2849,"For some reason, the original target definition has different pins for LED1 and BEEPER. This pull request corrects these to match the version 0.2 hardware's circuit diagram.
The changes have been tested by myself and others. See http://intofpv.com/t-awesome-90-pepperfish-de-1103-1s?pid=24135#pid24135","For some reason, the original target definition has different pins for LED1 and BEEPER. This pull request corrects these to match the version 0.2 hardware's circuit diagram.
The changes have been tested by myself and others. See http://intofpv.com/t-awesome-90-pepperfish-de-1103-1s?pid=24135#pid24135",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2849,2017-06-07T11:09:38Z,2017-06-08T23:43:44Z,2017-06-08T23:57:59Z,CLOSED,False,21,13,9,https://github.com/grizewald,Fix TINYFISH target definition,16,"['Needs additional work', 'Do not merge']",https://github.com/cleanflight/cleanflight/pull/2849,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2849#issuecomment-306983021,"For some reason, the original target definition has different pins for LED1 and BEEPER. This pull request corrects these to match the version 0.2 hardware's circuit diagram.
The changes have been tested by myself and others. See http://intofpv.com/t-awesome-90-pepperfish-de-1103-1s?pid=24135#pid24135","It looks like you've submitted the wrong changesets in your PR, this is entirely unrelated. Please update this PR to contain only your changeset.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2849,2017-06-07T11:09:38Z,2017-06-08T23:43:44Z,2017-06-08T23:57:59Z,CLOSED,False,21,13,9,https://github.com/grizewald,Fix TINYFISH target definition,16,"['Needs additional work', 'Do not merge']",https://github.com/cleanflight/cleanflight/pull/2849,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2849#issuecomment-307258980,"For some reason, the original target definition has different pins for LED1 and BEEPER. This pull request corrects these to match the version 0.2 hardware's circuit diagram.
The changes have been tested by myself and others. See http://intofpv.com/t-awesome-90-pepperfish-de-1103-1s?pid=24135#pid24135",Can be pulled from betaflight/betaflight#3238.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2850,2017-06-08T03:38:55Z,2017-06-11T09:48:01Z,2017-06-11T09:48:01Z,MERGED,True,2,1,1,https://github.com/Dingo420,Create Board - Naze32.md,1,[],https://github.com/cleanflight/cleanflight/pull/2850,https://github.com/Dingo420,1,https://github.com/cleanflight/cleanflight/pull/2850,Update note about GPS is not supported with naze32,Update note about GPS is not supported with naze32,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,1,https://github.com/cleanflight/cleanflight/pull/2852,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/skaman82,2,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307078486,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",Nice! Would you also please make a pull request to Betaflight repository?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307079307,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Nice! Would you also please make a pull request to Betaflight repository?

Not necessary. Once this is merged into cleanflight, it can easily be cherry-picked. Adding it with a separate PR will only create merge conflicts later on.",True,"{'THUMBS_UP': ['https://github.com/skaman82', 'https://github.com/hydra']}"
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,4,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307080132,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Hey, we're discussing it with Clair over email, if I get a prototype I'm going to help integrate this.",True,{'THUMBS_UP': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/martinbudden,5,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307107179,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@azolyoung , why didn't you ask for advice before you started writing the code?",True,{'THUMBS_UP': ['https://github.com/DieHertz']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/McGiverGim,6,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307112053,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","I think that he asked... but maybe not with enough data ;)
There're some questions from ""azol"" in the developers channel of cleanflight...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/ledvinap,7,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307118967,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","IMO 32bit box limitation needs to be removed first. Using uint64_t is quite easy, but MSP will run out of bits eventually (only used bits count, so there is some reserve now, but it is bad idea to depend on it).",True,{'THUMBS_UP': ['https://github.com/hydra']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,8,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307291527,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@skaman82
Hi,  We have working on Betaflight with this feature, My colleague allen will submit his version in the near future. Thank you.
@McGiverGim
Thank you very much for the help at developers channel of cf slack group.
@ledvinap
Yes. so After boxId_e has run out of all the bits, I want to implement this function, and only create another one uint32_t to save the new box.
Thank you for your advice, which is great for me. I will submit it again after the modification. Support RunCam Split CleanFlight Configurator I have written, but I did not expect the firmware to write the code there are so many problems, I think I had better improve the firmware code, and then submit my CleanFlight Configurator code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,9,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307333833,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@azolyoung please don't submit a separate PR to BetaFlight, after it's honed and finished for CF we will transfer the functionality to BF ourselves.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/martinbudden,10,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307335502,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@ledvinap , can you do a PR to change activeBoxIds to uint64_t?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,11,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307337251,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",@martinbudden I could do that if @ledvinap is currently unavailable,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,12,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307337435,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@DieHertz
Yes, I got it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307352953,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","a feature is not needed or wanted.  you can rely on the serial port function instead - in the init code just try and find the serial port with the function and if you find one you know to continue.
ideally there should be no need for any new MSP commands, somehow we should be able to use all the existing ones.
I will have more comments when I get a chance to review the code further.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/ledvinap,14,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307619672,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@azolyoung : Can you remove some rcModes for testing (https://github.com/cleanflight/cleanflight/blob/master/src/main/fc/rc_controls.h#L46-L50) and rewtire the PR to use them? Probably easiest is:
    BOXGTUNE,
    BOXSONAR = BOXGTUNE,
    BOXSERVO1 = BOXGTUNE,
    BOXSERVO2 = BOXGTUNE,
    BOXSERVO3 = BOXGTUNE,

Then add new modes to the enum and allocate new permanentIds (https://github.com/cleanflight/cleanflight/blob/master/src/main/fc/fc_msp.c#L152)
That way you can continue working on your code, almost no changes will be necessary when boxId is extended.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,15,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307707791,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@ledvinap
Hello,
Thank you for your suggestion that this is a good idea so that I can continue to improve the runcam split feature , and not conflict with your architecture.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/martinbudden,16,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-307720881,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@azolyoung , can you please revert all changes to target.h files so that this PR does not involve changes to 70 files? This PR should involve no changes to target.h files.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,17,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-308032486,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@martinbudden
yes, I'v make some changes, and these changes contain the target.h revert.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/martinbudden,18,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-308040987,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@azolyoung , thanks for the update. We now need to wait for PR #2856 to be finished and then this can be refactored to use the new box masks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,19,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-308041975,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@martinbudden not necessarily wait, meanwhile @azolyoung could comment out some modes and replace them with RC Split modes. Once #2856 is merged, he'll just need to change ids for RC Split modes to > 31",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/martinbudden,20,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-308042767,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",Good point.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/hydra,21,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-308951683,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","in related news, my runcam splits arrived yesterday so I have test equipment here now too. thanks @azolyoung",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/mikeller,22,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-308952563,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",Where do we sign up to get engineering samples? ;-P,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/hydra,23,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309207445,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",this can now be rebased on master which now has the changes to the 'rcModes' / 'box'.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,24,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309252107,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","hello, I'v merge the master branch at https://github.com/cleanflight/cleanflight.git, and update the boxex that runcam split used.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,25,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309253240,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Sorry, such a simple update, I‘ve committed 3 times",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,26,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309288936,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@hydra
Yes, you are right. Use CAMERAx will be better for support other cameras in the future.
I'v update the boxes name, and remove the ""rcsplit"" msp messages that no longer needed.
And I'v update the configurator code(It's in pull request) to support this change, when the user choose runcam split as a peripheral, in the modes tab, I add some code to adjust the box names to CAMERA WI-FI, CAMERA POWER, CAMERA CHANGE MODE.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/hydra,27,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309499027,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@azolyoung ok great!  thanks for the updates.
It's great how little new code we need now, good work everyone!",True,{'THUMBS_UP': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,28,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309615476,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",haha! thank you! good work everyone!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/martinbudden,29,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309665182,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Yes, looking good now. Just a few more things to tidy up - see my comments - and it should be ready to merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,30,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309669394,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",OK! I've make a new commit that fix these suggestions you post.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/mikeller,31,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-309720922,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@azolyoung: Good effort! Once you've done the changes, can you please rebase / squash into one commit?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,32,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310025269,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Hello, my branch has merge with master fews ago, and the rebase task(to compress the commits to one) is difficult.
Can I request a new pull request with my final code?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,33,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310028272,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",Just reset your branch to state before the latest merge and rebase on instead.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,34,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310030728,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@DieHertz  How to revert?
A few days ago, when  ledvinap finished the > 31 box support, I'v type the following command to pull the master to my branch
git remote add cleanflight-master https://github.com/cleanflight/cleanflight.git
git pull cleanflight-master master",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,35,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310031046,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",Can you use terminal for git? Are you familiar with it?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,36,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310031396,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","yes i can, i use terminal for git more then gui.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,37,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310035946,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@DieHertz
Thank you! After hard reset to 54e2ef3, I still no idea how to rebase it to compress the commits.
The following image is my branch history, you can see, in my branch history, it's not only my commit, there has other people commit here too. I'm trying to rebase it from morning till now(about 6 hours), I still can not compress my commits.. Please help..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,38,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310039837,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","So you've merged cleanflight/master into your branch twice, and one of them contains a loop, where you merged cleanflight/master into your branch and then pulled your branch without --rebase.
It's probably not worth the effort trying to fix it now and going through the merge conflicts.
A few advices for working on features to be integrated back into master:

Use git pull --rebase to pull remote changes in your current branch, that way you avoid this pesky Merge branch 'add-runcam-split-support' into add-runcam-split-support`
Use git rebase cleanflight-master/master instead of git pull cleanflight-master master to apply your changes on top of current master state, not merge current master state

At this point I suggest downloading the patch for associated pull request:
https://patch-diff.githubusercontent.com/raw/cleanflight/cleanflight/pull/2852.patch
Then reset your branch to current cleanflight/master state:
git reset --hard cleanflight-master/master
Then apply your patch:
git am 2852.patch
If everything is OK after that, perform a force push:
git push --force",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,39,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310041364,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","For some reason the GitHub patch contains changes besides the ones mentioned in ""Files changed' tab.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,40,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310042557,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Wow..Thank you very much!
When I run the command git reset --hard cleanflight-master/master(in add-runcam-split-support branch), I got the error:
fatal: ambiguous argument 'cleanflight-master/master': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git  [...] -- [...]'
in my case, should i type cleanflight-master/master or other?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,41,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310043567,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Since you said you have added cleanflight repo as cleanflight-master
git remote add cleanflight-master https://github.com/cleanflight/cleanflight.git
you should use cleanflight-master/master
Show us git remote -v output, and don't answer directly from email notifications, they don't contain possible edits to comments.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,42,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310068797,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.",Please make sure to use git pull --rebase and git rebase MAIN_REMOTE/master in the future to avoid issues with squashing :),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,43,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310069125,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Yes, I will.
I've resolve the conflicts, now is going to commit it",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,44,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310084054,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Good job @azolyoung, you have managed to do this without creating a separate PR!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,45,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310085026,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","I've heard that there are plans to allow changing camera settings over UART, is this real or just gossip?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,46,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310100027,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@DieHertz
yes, we are make  suppport with opentx, for now, we can through smart port to change the setting with camera, but still have problems, about ui, number of uart count in general flight board, and we'v osd menu that user can change camera setting, so this feature(telemetry support) maybe won't conlict with our osd menu, it's maybe only support some setting that most people used. But this feature will eventually be released, is still uncertain.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/DieHertz,47,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310104502,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Feel free to introduce me into the details of this feature as I'm getting a RunCam Split sample soon.
It's better to discuss such features before they get implemented into CF/BF :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,48,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310124569,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@DieHertz
Yes, it's still in the test, before the  beginning  of coding, I will ask you how to implemention is the most appropriate, to avoid writing some duplicate code or or worse! Thank you!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/mikeller,49,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310188198,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","Good work on your rebase, @azolyoung!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/hydra,50,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-310464622,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","merged, great work everyone.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/oleost,51,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-316978609,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","No new documentation in how to use, or did I miss it?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2852,2017-06-08T11:34:08Z,2017-06-22T18:31:17Z,2017-07-22T12:51:45Z,MERGED,True,706,10,13,https://github.com/azolyoung,Add runcam split support,1,[],https://github.com/cleanflight/cleanflight/pull/2852,https://github.com/azolyoung,52,https://github.com/cleanflight/cleanflight/pull/2852#issuecomment-317181647,"Hi
I would like to add the add-runcma-split-support branch to the trunk of the cleanflight, which is to support our RunCam Split( a new fpv camera) can work with the flight control supported by cleanflight. Through this branch, the user can control our camera through the switch of the remote control, such as  start / stop recording, or turn on / off the camera's wifi etc.
If there are any questions, please feel free to contact us, our mail address is hello@runcam.com.","@oleost
Hi Petter, you can find it in our user manual: http://www.runcam.com/download/runcamsplit",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2853,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.","This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2853#issuecomment-307316662,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.","If you open a PR against betaflight-configurator, we can merge it in there, @hydra can pull it into cleanflight-configurator together with the changes you are waiting for.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/McGiverGim,3,https://github.com/cleanflight/cleanflight/pull/2853#issuecomment-307318661,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.","@mikeller Ok, I can push it to betaflight, specifying that this PR must to be merged before in Betaflight. That's right?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2853#issuecomment-307319222,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.","You'll have to open a new PR against Betaflight. And do a rebase of your branch against Betaflight first, or else the PR will include all differences (like name, styling).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/McGiverGim,5,https://github.com/cleanflight/cleanflight/pull/2853#issuecomment-307320819,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.","Yes, but I mean that I only made the PR to the betaflight-configurator, the Betaflight firmware will take this changes from here, right?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/mikeller,6,https://github.com/cleanflight/cleanflight/pull/2853#issuecomment-307322143,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.","Not at all. Changes to either of the two are regularly synched into the other, just like with the firmware.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/McGiverGim,7,https://github.com/cleanflight/cleanflight/pull/2853#issuecomment-307323468,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.",Did you mean that I made this PR to Betaflight and other to Betaflight-Configurator and I close this PR here in CleanFlight? Sorry but I'm a bit loose ;),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/McGiverGim,8,https://github.com/cleanflight/cleanflight/pull/2853#issuecomment-307332546,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.",@mikeller I've the PR for Betaflight firmware and Betaflight configurator ready. Only waiting for your confirmation if this is what I must do ;-),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2853,2017-06-09T07:22:38Z,2017-06-09T09:28:17Z,2017-06-09T09:28:17Z,CLOSED,False,112,61,4,https://github.com/McGiverGim,Add HOME DIRECTION arrow to OSD,1,[],https://github.com/cleanflight/cleanflight/pull/2853,https://github.com/McGiverGim,9,https://github.com/cleanflight/cleanflight/pull/2853#issuecomment-307341999,"This PR adds the possibility to have an arrow pointing HOME in the OSD.
The code is based in the same functionality of iNav.
I have only made some very rudimentary ""hand"" tests because I damaged one motor and I'm waiting for the replacement, but the tests were ok.
I've the configurator PR ready, but I cannot push it because the actual code in the configurator is not up to date with the OSD elements, and the order matters. I've seen that this elements are missing:
GPS_LON
GPS_LAT
DEBUG
PITCH_ANGLE
ROLL_ANGLE
MAIN_BATT_USAGE
ARMED_TIME

All of them are included in the Betaflight Configurator, I don't know if it will be merged soon.",I close this PR and make both PR to BetaFlight to simplify the things. Thanks!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2855,2017-06-09T10:10:33Z,2017-06-09T10:33:11Z,2017-06-09T15:38:57Z,CLOSED,False,34,24,1,https://github.com/DieHertz,Extend activeBoxIds to 64 bits,1,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/2855,https://github.com/DieHertz,1,https://github.com/cleanflight/cleanflight/pull/2855,"Required for refactoring of #2852.
I have changed the type of activeBoxIds to uint64_t and extended MSP_STATUS and MSP_STATUS_EX to send the low-order 32 bits as before while appending the high-order 32 bits at the end of payload.
I will look into converting activeBoxIds + box names into a bitfield-based approach a bit later.","Required for refactoring of #2852.
I have changed the type of activeBoxIds to uint64_t and extended MSP_STATUS and MSP_STATUS_EX to send the low-order 32 bits as before while appending the high-order 32 bits at the end of payload.
I will look into converting activeBoxIds + box names into a bitfield-based approach a bit later.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2855,2017-06-09T10:10:33Z,2017-06-09T10:33:11Z,2017-06-09T15:38:57Z,CLOSED,False,34,24,1,https://github.com/DieHertz,Extend activeBoxIds to 64 bits,1,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/2855,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2855#issuecomment-307354310,"Required for refactoring of #2852.
I have changed the type of activeBoxIds to uint64_t and extended MSP_STATUS and MSP_STATUS_EX to send the low-order 32 bits as before while appending the high-order 32 bits at the end of payload.
I will look into converting activeBoxIds + box names into a bitfield-based approach a bit later.",I have array-based approach ready ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,1,https://github.com/cleanflight/cleanflight/pull/2856,MSP and blackbox still need support for larger masks,MSP and blackbox still need support for larger masks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307357786,MSP and blackbox still need support for larger masks,"from #2855: in MSP:
What about using topmost bit in flightModeFlags as continuation indicator?
Topmost bit was not set in current implementation.
Store first 32 bits in current position(including 'extension' bit), then store all remaining bits at and of current packet, in 31bit chunks (+extension).
If other fields are added, they can be send after second flightModeFlags place (which may have zero length)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307373640,MSP and blackbox still need support for larger masks,"'continuation' method for MSP implemented for review.
I am not sure if it is best possible way, would be great to get some ideas ...
Can someone do configurator part? I don't like JS that much ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,4,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307380284,MSP and blackbox still need support for larger masks,Blackbox still logs only first 32 bits ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/digitalentity,5,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307381699,MSP and blackbox still need support for larger masks,This is something that's pretty much wanted in INAV as well - we are running out of box mode bits there fast.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307382949,MSP and blackbox still need support for larger masks,"@digitalentity : Well, int8_t is next limit ;-)
boxNames reply will eventually get too long, maybe it's time to split it now (sending 31 names per reply, adding 'page' index as parameter to MSP_BOXNAMES, defaulting to 0
And the same for permanentIds ..
It will be backward compatible, old MSP implementation will simply ignore bits over 31 ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/digitalentity,7,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307384010,MSP and blackbox still need support for larger masks,"Yes, this is a good idea - but not 31 names. Let's make it 32 names per reply - legacy MSP will expect uint32_t for boxIds, so equal number of names should be allowed to be reported.
However, I'd rather redo that part altogether. I'd report all box names (and IDs) supported by firmware. No more bit shuffling to figure out what modes are active. Each box mode will always have the same bitmask.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,8,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307387761,MSP and blackbox still need support for larger masks,"@digitalentity : as implemented now in this PR, 32th bit is used as continuation mark. We can send dummy BOX for this bit, then names/permanent IDs will match flightModeFlags exactly.
(updated) Configurator will then ignore BOX with empty name/special permanent ID",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307388359,MSP and blackbox still need support for larger masks,"Also we can specify now that permanentBoxId is varint encoded (as in blackbox/protobuf), so that we don't ever run out of permanent IDs",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,10,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307390032,MSP and blackbox still need support for larger masks,@digitalentity : Current protocol allows using lots of permanentIds without making bitmask too large. Old BOXes are easy to deprecate /remove ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,11,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307404445,MSP and blackbox still need support for larger masks,"Dummy entry serialization added. MSP master may use active bitmask directly, every 32nd entry will be dummy.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,12,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307435800,MSP and blackbox still need support for larger masks,"Well, extension bit is overkill.
I'll try to use one byte to mark number of boxid words.
Is may be used for activeBoxids version too (allow active boxid change without reboot)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/hydra,13,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307617693,MSP and blackbox still need support for larger masks,what's next on this PR?  this is currently blocking the runcam split support #2852,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/DieHertz,14,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307617994,MSP and blackbox still need support for larger masks,"As no developer possesses the Split so far, it may remain blocked for a while, I'm getting a sample from RunCam in the coming weeks and will assist them with code support.
IMO this PR looks a over-engineered as of now, besides I don't see a point in implementing type-system in C for this task when we could just resort to C++.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,15,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307621288,MSP and blackbox still need support for larger masks,"@DieHertz : It depends .. extending to uint64_t is easier, but will only work for some time. This implementation should work for 128 bits, with easier extension in future.
Ad type system - it's just macro to define array large enough to hold required bits. Easier than typing rounding up in so many places, but can be replaced with macro that will return size only:
uint32_t activeBoxIds[BITARRAY_SIZE(uint32_t, CHECKBOX_ITEM_COUNT)];

c++ will be nice in some regards, but I'm afraid it will get quickly overused and code will be much harder to manage ...",True,{'THUMBS_UP': ['https://github.com/DieHertz']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/martinbudden,16,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307625293,MSP and blackbox still need support for larger masks,"@ledvinap , I'm inclined to agree with @DieHertz , in that this PR is somewhat over-engineered. Yes, uint64_t will run out at some time, but we could move to bitarray based solution if and when that happens. In the meantime a uint64_t based solution is simpler and easier to maintain.
As for using C++, I agree with @ledvinap - it will at some point start to cause problems and I am against a C/C++ hybrid solution. (I would support a total rewrite in C++, but we don't have the time and developers to do that.)
@hydra , I don't think we should rush the Runcam split support: it's important to get this right. I don't want to repeat the COLIBRI_RACE/BST situation where we have some non-mainstream code that causes problems pretty well every release.",True,{'THUMBS_UP': ['https://github.com/DieHertz']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/mikeller,17,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307629014,MSP and blackbox still need support for larger masks,@martinbudden: Totally agreed re not adding more one-off proprietary solutions. See betaflight/betaflight#3155 for an example of the trouble this gets you into.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/hydra,18,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307648364,MSP and blackbox still need support for larger masks,"i agree with the over-engineered nature of the runcam split PR.  However that is off-topic on this PR.
Right now the focus is to support > 32 bits for the 'box' flags to allow us to use the mode activation conditions for upto 64 positions.  once we have this we can continue fixing up the runcam split support.
I highly doubt that we will get past 64 any time soon.  So I'm happy to go either way, but since this blocks the other PR we need an agreement regarding the code in this PR or another solution.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/martinbudden,19,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307652005,MSP and blackbox still need support for larger masks,"@hydra , I was not stating that the RunCam Split PR was over-engineered. I was stating that the bit array used in this PR was over-engineered. That was also my interpretation of @DieHertz 's comment.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,20,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307657088,MSP and blackbox still need support for larger masks,"@DieHertz , @martinbudden : I agree wit you. Sometimes I don't know where to stop, feedback is very important. I'll try to simplify it (a bit) tomorrow:

use functions to access bits (passing void* + index)
typedef type large enough to hold all boxId_t
I hope it won't be that different from using uint64_t ot typedef directly

@hydra: runcam can be tested by temporarily disabling some boxId_t
IMO it is good idea to have lots of cheap BOXes - it is quite generic way to communicate state to configurator or trigger something. For example logical switches (openTx) can be implemented. Or OSD control and stick functions implemented using BOX (allow stick gesture to trigger box / trigger function by box. Or trigger boxes by telemetry. For example ACC calibration triggered by switch/telemetry can be quite useful)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,21,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307657544,MSP and blackbox still need support for larger masks,"What about MSP_STATUS_EX? (https://github.com/cleanflight/cleanflight/pull/2856/files#diff-ffa49532e0a35299ef3e307058236e8eR916). Is that OK?
I'm not sure about MSP_STATUS. It is trivial to implement it the same way as MSP_STATUS_EX (probably merging them and special-casing few fields that differ), both contain almost same data. I assume there was some historical reason for split, but I don't remember details ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,22,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307758400,MSP and blackbox still need support for larger masks,"Noticed this commit: 6343da6 (betaflight/betaflight#368).
It does reuse field, but does not rename it. Is it OK to rename it to rcModeActivationMask?
This is a bit more complicated.  Any idea why this was done?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,23,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-307776453,MSP and blackbox still need support for larger masks,Simplified bitarray handling and types. Should be almost equivalent to uint64_t variant (only typedef has to be changed and strict aliasing warning solved).,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/martinbudden,24,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308040496,MSP and blackbox still need support for larger masks,"@ledvinap , can you ensure test code runs?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,25,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308107605,MSP and blackbox still need support for larger masks,"@martinbudden : Of course, just need to find some time ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,26,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308179633,MSP and blackbox still need support for larger masks,"rc_controls split to simplify unittest dependency hell a bit
Seems I'm not only one who did enter Augeas stables ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/mikeller,27,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308253722,MSP and blackbox still need support for larger masks,"Erm, either I've gone blind, your you've forgotten to check in rc_modes.[ch].",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,28,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308256002,MSP and blackbox still need support for larger masks,@mikeller: sorry..,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,29,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308395598,MSP and blackbox still need support for larger masks,Files added,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,30,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308817355,MSP and blackbox still need support for larger masks,PR build without errors now ...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/mikeller,31,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308866581,MSP and blackbox still need support for larger masks,"If you think it's ready, would you mind a rebase?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,32,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308868968,MSP and blackbox still need support for larger masks,"I'll squash commits to get clean history.
I hope I didn't miss something..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/hydra,33,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308951534,MSP and blackbox still need support for larger masks,"great, i should have some time to review and merge this weekend if it's ready.",True,{'THUMBS_UP': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/mikeller,34,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-308952469,MSP and blackbox still need support for larger masks,"Would be appreciated, there is one candidate for an additional box in Betaflight already.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,35,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-309026305,MSP and blackbox still need support for larger masks,"Squashed, ready to merge
TODO:

add configurator support (it will work now when fewer than 32 bits are active)
blackbox logs only first 32 bits of activeRcmodes (and names them wrong and wastes blackbox memory)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/hydra,36,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-309207241,MSP and blackbox still need support for larger masks,@mikeller for the candidate in a BF PR that needs a 'box' please re-use BOXGOV as it's currently unused by the codebase.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/hydra,37,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-309207377,MSP and blackbox still need support for larger masks,"good work everyone merging.
@ledvinap can you do another PR for the second TODO you mentioned above?  If you don't have time please create a new issue so we don't forget this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/mikeller,38,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-309208227,MSP and blackbox still need support for larger masks,"@hydra: When re-using, do I just assign a new permanent ID? I want to avoid screwing with modes in backup / restore, like what happened the last time we reused boxes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2856,2017-06-09T10:39:38Z,2017-06-17T10:37:14Z,2017-06-17T11:08:25Z,MERGED,True,594,420,32,https://github.com/ledvinap,array based box masks,10,['Requires testing'],https://github.com/cleanflight/cleanflight/pull/2856,https://github.com/ledvinap,39,https://github.com/cleanflight/cleanflight/pull/2856#issuecomment-309208622,MSP and blackbox still need support for larger masks,"@mikeller : As designed, permament ID + name is only thing visible over MSP. Actual bit position is dependent on configuration and features and enum value is never sent over MSP.
Configs (cli dump) should store permanentId, but I did check this only briefly.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2859,2017-06-13T14:03:14Z,2017-06-13T14:42:20Z,2017-06-13T14:42:20Z,CLOSED,False,16,20,1,https://github.com/pinkywafer,Cli resource fix,2,[],https://github.com/cleanflight/cleanflight/pull/2859,https://github.com/pinkywafer,1,https://github.com/cleanflight/cleanflight/pull/2859,"should close #2854
Let me know if you're unhappy with this solution.","should close #2854
Let me know if you're unhappy with this solution.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2859,2017-06-13T14:03:14Z,2017-06-13T14:42:20Z,2017-06-13T14:42:20Z,CLOSED,False,16,20,1,https://github.com/pinkywafer,Cli resource fix,2,[],https://github.com/cleanflight/cleanflight/pull/2859,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2859#issuecomment-308132786,"should close #2854
Let me know if you're unhappy with this solution.",There's another PR in Betaflight to solve the same. I don't know what is better: betaflight/betaflight#3276,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2859,2017-06-13T14:03:14Z,2017-06-13T14:42:20Z,2017-06-13T14:42:20Z,CLOSED,False,16,20,1,https://github.com/pinkywafer,Cli resource fix,2,[],https://github.com/cleanflight/cleanflight/pull/2859,https://github.com/pinkywafer,3,https://github.com/cleanflight/cleanflight/pull/2859#issuecomment-308139051,"should close #2854
Let me know if you're unhappy with this solution.","Closing due to build error.
@mikeller has a better fix in betaflight#3276",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2860,2017-06-13T20:48:59Z,2017-06-13T21:52:37Z,2017-06-13T21:52:49Z,MERGED,True,3,3,1,https://github.com/rogiervandenberg,CHG PID tuning Angle/Horizon GUI text labels,1,[],https://github.com/cleanflight/cleanflight/pull/2860,https://github.com/rogiervandenberg,1,https://github.com/cleanflight/cleanflight/pull/2860,The description was not accurate (anymore) to Cleanflight 2. I changed the text accordingly.,The description was not accurate (anymore) to Cleanflight 2. I changed the text accordingly.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2860,2017-06-13T20:48:59Z,2017-06-13T21:52:37Z,2017-06-13T21:52:49Z,MERGED,True,3,3,1,https://github.com/rogiervandenberg,CHG PID tuning Angle/Horizon GUI text labels,1,[],https://github.com/cleanflight/cleanflight/pull/2860,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2860#issuecomment-308259754,The description was not accurate (anymore) to Cleanflight 2. I changed the text accordingly.,Thanks for your contribution!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2863,2017-06-16T12:23:52Z,2017-06-17T00:22:56Z,2017-06-17T00:23:05Z,MERGED,True,0,1,1,https://github.com/rosek86,Read current from ESC fixed.,1,[],https://github.com/cleanflight/cleanflight/pull/2863,https://github.com/rosek86,1,https://github.com/cleanflight/cleanflight/pull/2863,"I think there is a problem in currentMeterESCReadCombined function, it fills out meter pointer and then calls currentMeterReset function which clears the pointer.","I think there is a problem in currentMeterESCReadCombined function, it fills out meter pointer and then calls currentMeterReset function which clears the pointer.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2863,2017-06-16T12:23:52Z,2017-06-17T00:22:56Z,2017-06-17T00:23:05Z,MERGED,True,0,1,1,https://github.com/rosek86,Read current from ESC fixed.,1,[],https://github.com/cleanflight/cleanflight/pull/2863,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2863#issuecomment-309171884,"I think there is a problem in currentMeterESCReadCombined function, it fills out meter pointer and then calls currentMeterReset function which clears the pointer.",Thanks for this fix!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2864,2017-06-17T08:55:09Z,2017-06-18T15:57:10Z,2017-06-19T06:16:07Z,MERGED,True,38,0,4,https://github.com/rosek86,OSD: display temperature and speed from ESC sensor.,4,[],https://github.com/cleanflight/cleanflight/pull/2864,https://github.com/rosek86,1,https://github.com/cleanflight/cleanflight/pull/2864,Add option to display data from ESC sensor: temperature + speed.,Add option to display data from ESC sensor: temperature + speed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2864,2017-06-17T08:55:09Z,2017-06-18T15:57:10Z,2017-06-19T06:16:07Z,MERGED,True,38,0,4,https://github.com/rosek86,OSD: display temperature and speed from ESC sensor.,4,[],https://github.com/cleanflight/cleanflight/pull/2864,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2864#issuecomment-309247626,Add option to display data from ESC sensor: temperature + speed.,@hydra: This should probably be rebased / merged after you've merged the OSD changes coming in from Betaflight.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2864,2017-06-17T08:55:09Z,2017-06-18T15:57:10Z,2017-06-19T06:16:07Z,MERGED,True,38,0,4,https://github.com/rosek86,OSD: display temperature and speed from ESC sensor.,4,[],https://github.com/cleanflight/cleanflight/pull/2864,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2864#issuecomment-309286019,Add option to display data from ESC sensor: temperature + speed.,done,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2864,2017-06-17T08:55:09Z,2017-06-18T15:57:10Z,2017-06-19T06:16:07Z,MERGED,True,38,0,4,https://github.com/rosek86,OSD: display temperature and speed from ESC sensor.,4,[],https://github.com/cleanflight/cleanflight/pull/2864,https://github.com/rosek86,4,https://github.com/cleanflight/cleanflight/pull/2864#issuecomment-309288391,Add option to display data from ESC sensor: temperature + speed.,Thanks :-),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2864,2017-06-17T08:55:09Z,2017-06-18T15:57:10Z,2017-06-19T06:16:07Z,MERGED,True,38,0,4,https://github.com/rosek86,OSD: display temperature and speed from ESC sensor.,4,[],https://github.com/cleanflight/cleanflight/pull/2864,https://github.com/mikeller,5,https://github.com/cleanflight/cleanflight/pull/2864#issuecomment-309303424,Add option to display data from ESC sensor: temperature + speed.,@rosek86: Thanks for your contribution. Would it be possible that you added support for the new elements to the configurator as well?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2864,2017-06-17T08:55:09Z,2017-06-18T15:57:10Z,2017-06-19T06:16:07Z,MERGED,True,38,0,4,https://github.com/rosek86,OSD: display temperature and speed from ESC sensor.,4,[],https://github.com/cleanflight/cleanflight/pull/2864,https://github.com/rosek86,6,https://github.com/cleanflight/cleanflight/pull/2864#issuecomment-309348171,Add option to display data from ESC sensor: temperature + speed.,"@mikeller Yep, I'm working on that, should be ready tonight.",True,{'THUMBS_UP': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2865,2017-06-17T14:14:06Z,2017-06-17T15:18:53Z,2017-06-17T15:19:10Z,CLOSED,False,3601,1645,124,https://github.com/hydra,merge recent BF changes,104,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2865,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2865,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2865,2017-06-17T14:14:06Z,2017-06-17T15:18:53Z,2017-06-17T15:19:10Z,CLOSED,False,3601,1645,124,https://github.com/hydra,merge recent BF changes,104,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2865,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2865#issuecomment-309221103,,"conflicts, closing, replaced by #2866",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2866,2017-06-17T15:17:54Z,2017-06-18T14:17:22Z,2017-06-20T18:42:46Z,MERGED,True,3020,1558,114,https://github.com/hydra,merge recent BF changes,106,[],https://github.com/cleanflight/cleanflight/pull/2866,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2866,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2867,2017-06-17T16:36:39Z,2017-06-18T15:33:56Z,2017-06-20T18:42:47Z,MERGED,True,1,0,1,https://github.com/hydra,CF/BF - Fix missing initialiser in flightModeFlags,1,[],https://github.com/cleanflight/cleanflight/pull/2867,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2867,garbage output was observed.,garbage output was observed.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2867,2017-06-17T16:36:39Z,2017-06-18T15:33:56Z,2017-06-20T18:42:47Z,MERGED,True,1,0,1,https://github.com/hydra,CF/BF - Fix missing initialiser in flightModeFlags,1,[],https://github.com/cleanflight/cleanflight/pull/2867,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2867#issuecomment-309225641,garbage output was observed.,@ledvinap and @mikeller you may be interested in this fix.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2867,2017-06-17T16:36:39Z,2017-06-18T15:33:56Z,2017-06-20T18:42:47Z,MERGED,True,1,0,1,https://github.com/hydra,CF/BF - Fix missing initialiser in flightModeFlags,1,[],https://github.com/cleanflight/cleanflight/pull/2867,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/2867#issuecomment-309232627,garbage output was observed.,"Yes, good find.
But pack function should memset it internally, it's meant to be output argument",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2867,2017-06-17T16:36:39Z,2017-06-18T15:33:56Z,2017-06-20T18:42:47Z,MERGED,True,1,0,1,https://github.com/hydra,CF/BF - Fix missing initialiser in flightModeFlags,1,[],https://github.com/cleanflight/cleanflight/pull/2867,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2867#issuecomment-309280377,garbage output was observed.,"@ledvinap yeah, I had decided that after creating this PR.  Will fix and merge now.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2872,2017-06-23T20:20:52Z,2017-06-27T22:12:38Z,2018-03-02T20:01:29Z,MERGED,True,17,10,3,https://github.com/hydra,CF/BF - Fix servo filter initialisation.,1,[],https://github.com/cleanflight/cleanflight/pull/2872,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2872,"Prior to this only the first filter was initialised.  The bug was clearly visible from the motors tab in the UI - servos 2-8 were always static.
Either one flag per servo is needed or just initialise all of them after the targetPidLooptime is set.  I went with the latter as it's a) simpler , b) makes the main loop faster, and c) follows the same pattern as other filter initialisation code.
Tested and working here.","Prior to this only the first filter was initialised.  The bug was clearly visible from the motors tab in the UI - servos 2-8 were always static.
Either one flag per servo is needed or just initialise all of them after the targetPidLooptime is set.  I went with the latter as it's a) simpler , b) makes the main loop faster, and c) follows the same pattern as other filter initialisation code.
Tested and working here.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2872,2017-06-23T20:20:52Z,2017-06-27T22:12:38Z,2018-03-02T20:01:29Z,MERGED,True,17,10,3,https://github.com/hydra,CF/BF - Fix servo filter initialisation.,1,[],https://github.com/cleanflight/cleanflight/pull/2872,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2872#issuecomment-310763798,"Prior to this only the first filter was initialised.  The bug was clearly visible from the motors tab in the UI - servos 2-8 were always static.
Either one flag per servo is needed or just initialise all of them after the targetPidLooptime is set.  I went with the latter as it's a) simpler , b) makes the main loop faster, and c) follows the same pattern as other filter initialisation code.
Tested and working here.",also needed for CF v2.0.5.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2875,2017-06-27T04:20:17Z,2017-06-27T06:36:57Z,2017-06-27T06:36:57Z,CLOSED,False,2531,1516,181,https://github.com/MATEKSYS,Add betaflight_3.1.7_MATEKF405.hex to BF repository,98,[],https://github.com/cleanflight/cleanflight/pull/2875,https://github.com/MATEKSYS,1,https://github.com/cleanflight/cleanflight/pull/2875,"This firmware works normal on our MatekF405 FC.
Could you pls add it to BF repository, so that users can download it in GUI conveniently.
The hex file is here now. http://www.mateksys.com/Downloads/FW/betaflight_3.1.7_MATEKF405.hex
Thanks","This firmware works normal on our MatekF405 FC.
Could you pls add it to BF repository, so that users can download it in GUI conveniently.
The hex file is here now. http://www.mateksys.com/Downloads/FW/betaflight_3.1.7_MATEKF405.hex
Thanks",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2875,2017-06-27T04:20:17Z,2017-06-27T06:36:57Z,2017-06-27T06:36:57Z,CLOSED,False,2531,1516,181,https://github.com/MATEKSYS,Add betaflight_3.1.7_MATEKF405.hex to BF repository,98,[],https://github.com/cleanflight/cleanflight/pull/2875,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2875#issuecomment-311263939,"This firmware works normal on our MatekF405 FC.
Could you pls add it to BF repository, so that users can download it in GUI conveniently.
The hex file is here now. http://www.mateksys.com/Downloads/FW/betaflight_3.1.7_MATEKF405.hex
Thanks","Maybe this PR is wrong? This is CF no BF and your PR has a lot of changes (it comes from a branch of BF and not CF). It must have only the changes needed in top of CF.
Usually, CF will automatically cherry pick the change from BF before the next version.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2875,2017-06-27T04:20:17Z,2017-06-27T06:36:57Z,2017-06-27T06:36:57Z,CLOSED,False,2531,1516,181,https://github.com/MATEKSYS,Add betaflight_3.1.7_MATEKF405.hex to BF repository,98,[],https://github.com/cleanflight/cleanflight/pull/2875,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2875#issuecomment-311265004,"This firmware works normal on our MatekF405 FC.
Could you pls add it to BF repository, so that users can download it in GUI conveniently.
The hex file is here now. http://www.mateksys.com/Downloads/FW/betaflight_3.1.7_MATEKF405.hex
Thanks","Closing, since the board definition is already in cleanflight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2876,2017-06-27T22:13:28Z,2017-07-06T17:09:37Z,2017-07-06T17:09:37Z,CLOSED,False,6688,4011,319,https://github.com/hydra,merge recent BF changes,256,[],https://github.com/cleanflight/cleanflight/pull/2876,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2876,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2876,2017-06-27T22:13:28Z,2017-07-06T17:09:37Z,2017-07-06T17:09:37Z,CLOSED,False,6688,4011,319,https://github.com/hydra,merge recent BF changes,256,[],https://github.com/cleanflight/cleanflight/pull/2876,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2876#issuecomment-313459305,,replaced by #2878,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2878,2017-07-06T17:08:52Z,2017-07-06T19:01:04Z,2017-07-06T19:01:04Z,MERGED,True,5353,3613,301,https://github.com/hydra,Merge recent BF changes.,260,[],https://github.com/cleanflight/cleanflight/pull/2878,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2878,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2879,2017-07-06T21:38:04Z,2017-07-06T21:38:13Z,2017-07-06T21:38:13Z,MERGED,True,2,2,1,https://github.com/4712,Increased timeouts for BLHeli32/GigaDevice MCU,1,[],https://github.com/cleanflight/cleanflight/pull/2879,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2879,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2880,2017-07-07T19:53:22Z,2017-07-09T02:16:31Z,2017-07-09T02:16:31Z,CLOSED,False,967280,35254,1768,https://github.com/jesusbravo38,Second Pull Request,2521,[],https://github.com/cleanflight/cleanflight/pull/2880,https://github.com/jesusbravo38,1,https://github.com/cleanflight/cleanflight/pull/2880,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2880,2017-07-07T19:53:22Z,2017-07-09T02:16:31Z,2017-07-09T02:16:31Z,CLOSED,False,967280,35254,1768,https://github.com/jesusbravo38,Second Pull Request,2521,[],https://github.com/cleanflight/cleanflight/pull/2880,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2880#issuecomment-313806967,,"What are you trying to do, @jesusbravo38?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2881,2017-07-09T10:27:29Z,2017-07-09T10:36:40Z,2017-07-09T10:36:40Z,MERGED,True,1,1,1,https://github.com/4712,Updated 4way-if version number to indicate latest changes,1,[],https://github.com/cleanflight/cleanflight/pull/2881,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2881,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2882,2017-07-09T10:53:05Z,2017-07-09T11:13:21Z,2017-07-09T11:13:21Z,MERGED,True,633,463,43,https://github.com/hydra,merge recent BF changes.,30,[],https://github.com/cleanflight/cleanflight/pull/2882,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2882,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2883,2017-07-09T12:11:06Z,2017-07-16T12:20:05Z,2018-03-02T20:01:31Z,MERGED,True,4,0,2,https://github.com/hydra,CF/BF - SPRACINGF4NEO stabilise ADC readings.,1,[],https://github.com/cleanflight/cleanflight/pull/2883,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2883,"The F4 NEO ADC readings fluctuate quite a lot, this fix helps, but at the cost of latency.

The graph above shows the filtered ADC output, the unfiltered output and the difference between the two, for comparison.  Low-noise bench power supply used for tests.
This fix works for now, but perhaps it's working making the ADC frequency configurable?","The F4 NEO ADC readings fluctuate quite a lot, this fix helps, but at the cost of latency.

The graph above shows the filtered ADC output, the unfiltered output and the difference between the two, for comparison.  Low-noise bench power supply used for tests.
This fix works for now, but perhaps it's working making the ADC frequency configurable?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2883,2017-07-09T12:11:06Z,2017-07-16T12:20:05Z,2018-03-02T20:01:31Z,MERGED,True,4,0,2,https://github.com/hydra,CF/BF - SPRACINGF4NEO stabilise ADC readings.,1,[],https://github.com/cleanflight/cleanflight/pull/2883,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2883#issuecomment-313916343,"The F4 NEO ADC readings fluctuate quite a lot, this fix helps, but at the cost of latency.

The graph above shows the filtered ADC output, the unfiltered output and the difference between the two, for comparison.  Low-noise bench power supply used for tests.
This fix works for now, but perhaps it's working making the ADC frequency configurable?","See also:
STM32F40x and STM32F41x
Errata sheet - Section 2.1.15
http://www.st.com/content/ccc/resource/technical/document/errata_sheet/0a/98/58/84/86/b6/47/a2/DM00037591.pdf/files/DM00037591.pdf/jcr:content/translations/en.DM00037591.pdf
How to improve ADC accuracy when using STM32F2xx and
STM32F4xx microcontrollers
http://www.st.com/content/ccc/resource/technical/document/application_note/a0/71/3e/e4/8f/b6/40/e6/DM00050879.pdf/files/DM00050879.pdf/jcr:content/translations/en.DM00050879.pdf",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2883,2017-07-09T12:11:06Z,2017-07-16T12:20:05Z,2018-03-02T20:01:31Z,MERGED,True,4,0,2,https://github.com/hydra,CF/BF - SPRACINGF4NEO stabilise ADC readings.,1,[],https://github.com/cleanflight/cleanflight/pull/2883,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2883#issuecomment-313916915,"The F4 NEO ADC readings fluctuate quite a lot, this fix helps, but at the cost of latency.

The graph above shows the filtered ADC output, the unfiltered output and the difference between the two, for comparison.  Low-noise bench power supply used for tests.
This fix works for now, but perhaps it's working making the ADC frequency configurable?","Interesting finding. Does this only apply to the SPRACINGF4NEO, or is this the only F4 that you've tested?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2883,2017-07-09T12:11:06Z,2017-07-16T12:20:05Z,2018-03-02T20:01:31Z,MERGED,True,4,0,2,https://github.com/hydra,CF/BF - SPRACINGF4NEO stabilise ADC readings.,1,[],https://github.com/cleanflight/cleanflight/pull/2883,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2883#issuecomment-315605748,"The F4 NEO ADC readings fluctuate quite a lot, this fix helps, but at the cost of latency.

The graph above shows the filtered ADC output, the unfiltered output and the difference between the two, for comparison.  Low-noise bench power supply used for tests.
This fix works for now, but perhaps it's working making the ADC frequency configurable?","The SPRACINGF4EVO doesn't exhibit the issue, I've not tested other boards.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2884,2017-07-09T23:23:28Z,2017-08-30T07:57:40Z,2017-08-30T07:57:40Z,CLOSED,False,968502,35917,1797,https://github.com/Buzzliteyear,BiCopter Surport,2694,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2884,https://github.com/Buzzliteyear,1,https://github.com/cleanflight/cleanflight/pull/2884,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2884,2017-07-09T23:23:28Z,2017-08-30T07:57:40Z,2017-08-30T07:57:40Z,CLOSED,False,968502,35917,1797,https://github.com/Buzzliteyear,BiCopter Surport,2694,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2884,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2884#issuecomment-313973135,,"The place is right, but something with your pull request seems to have gone wrong. Try rebasing your branch on current master first, so that it only includes the changeset that contains your changes.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2884,2017-07-09T23:23:28Z,2017-08-30T07:57:40Z,2017-08-30T07:57:40Z,CLOSED,False,968502,35917,1797,https://github.com/Buzzliteyear,BiCopter Surport,2694,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2884,https://github.com/Buzzliteyear,3,https://github.com/cleanflight/cleanflight/pull/2884#issuecomment-313977882,,ok I need help to do this please i dont know how to do that,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2884,2017-07-09T23:23:28Z,2017-08-30T07:57:40Z,2017-08-30T07:57:40Z,CLOSED,False,968502,35917,1797,https://github.com/Buzzliteyear,BiCopter Surport,2694,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2884,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2884#issuecomment-313983046,,What exactly do you want to do?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2884,2017-07-09T23:23:28Z,2017-08-30T07:57:40Z,2017-08-30T07:57:40Z,CLOSED,False,968502,35917,1797,https://github.com/Buzzliteyear,BiCopter Surport,2694,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2884,https://github.com/Buzzliteyear,5,https://github.com/cleanflight/cleanflight/pull/2884#issuecomment-313993148,,"can you share the code via a pull request like you suggested please
https://www.rcgroups.com/forums/showpost.php?p=37879368&postcount=4",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2884,2017-07-09T23:23:28Z,2017-08-30T07:57:40Z,2017-08-30T07:57:40Z,CLOSED,False,968502,35917,1797,https://github.com/Buzzliteyear,BiCopter Surport,2694,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2884,https://github.com/mikeller,6,https://github.com/cleanflight/cleanflight/pull/2884#issuecomment-314004769,,"I didn't suggest anything. The firmware hex in the post is for iNav, which is different to cleanflight. Maybe you should talk to the guys at https://github.com/iNavFlight/inav ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2884,2017-07-09T23:23:28Z,2017-08-30T07:57:40Z,2017-08-30T07:57:40Z,CLOSED,False,968502,35917,1797,https://github.com/Buzzliteyear,BiCopter Surport,2694,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2884,https://github.com/Buzzliteyear,7,https://github.com/cleanflight/cleanflight/pull/2884#issuecomment-314007387,,"Arh  every inav link i click on brings me to cleanflight pull request tab, never mind I asked",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2884,2017-07-09T23:23:28Z,2017-08-30T07:57:40Z,2017-08-30T07:57:40Z,CLOSED,False,968502,35917,1797,https://github.com/Buzzliteyear,BiCopter Surport,2694,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2884,https://github.com/mikeller,8,https://github.com/cleanflight/cleanflight/pull/2884#issuecomment-314056444,,Can I suggest you ask for help on the iNav Gitter: https://gitter.im/iNavFlight/inav,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2887,2017-07-12T22:57:16Z,2017-07-12T22:57:51Z,2017-07-12T22:57:51Z,MERGED,True,1,1,1,https://github.com/4712,Fix BLHeli32 device id,1,[],https://github.com/cleanflight/cleanflight/pull/2887,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2887,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2894,2017-07-16T11:54:16Z,2017-07-16T12:10:32Z,2018-03-02T20:01:33Z,MERGED,True,135,136,18,https://github.com/hydra,Betaflight fixes,13,[],https://github.com/cleanflight/cleanflight/pull/2894,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2894,Selective fixes from betaflight for CF 2.1-RC2,Selective fixes from betaflight for CF 2.1-RC2,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2896,2017-07-16T23:50:22Z,2017-07-30T11:36:24Z,2017-07-30T11:36:33Z,CLOSED,False,477,61,21,https://github.com/matty17,Cf patch v2.0.5,18,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2896,https://github.com/matty17,1,https://github.com/cleanflight/cleanflight/pull/2896,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2896,2017-07-16T23:50:22Z,2017-07-30T11:36:24Z,2017-07-30T11:36:33Z,CLOSED,False,477,61,21,https://github.com/matty17,Cf patch v2.0.5,18,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2896,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2896#issuecomment-318895929,,invalid PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2897,2017-07-18T08:43:31Z,2019-01-10T11:20:54Z,2019-01-10T11:20:55Z,CLOSED,False,20,17,1,https://github.com/hydra,Initial commit to build docs using markdown-pdf,1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2897,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2897,gimli and support tools seem to be unmaintained and don't work on latest OSX.,gimli and support tools seem to be unmaintained and don't work on latest OSX.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2897,2017-07-18T08:43:31Z,2019-01-10T11:20:54Z,2019-01-10T11:20:55Z,CLOSED,False,20,17,1,https://github.com/hydra,Initial commit to build docs using markdown-pdf,1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2897,https://github.com/salloom777,2,https://github.com/cleanflight/cleanflight/pull/2897#issuecomment-423828858,gimli and support tools seem to be unmaintained and don't work on latest OSX.,انةف,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2897,2017-07-18T08:43:31Z,2019-01-10T11:20:54Z,2019-01-10T11:20:55Z,CLOSED,False,20,17,1,https://github.com/hydra,Initial commit to build docs using markdown-pdf,1,['Experimental'],https://github.com/cleanflight/cleanflight/pull/2897,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2897#issuecomment-453061643,gimli and support tools seem to be unmaintained and don't work on latest OSX.,closing as stale.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2904,2017-07-25T22:17:35Z,2017-07-28T16:58:41Z,2017-07-28T16:58:41Z,MERGED,True,19,0,1,https://github.com/hydra,CF/BF - Fix OSD SLAVE SPI initialisation.,1,[],https://github.com/cleanflight/cleanflight/pull/2904,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2904,Note: It was broken by 7a52f91 - @jflyper,Note: It was broken by 7a52f91 - @jflyper,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2904,2017-07-25T22:17:35Z,2017-07-28T16:58:41Z,2017-07-28T16:58:41Z,MERGED,True,19,0,1,https://github.com/hydra,CF/BF - Fix OSD SLAVE SPI initialisation.,1,[],https://github.com/cleanflight/cleanflight/pull/2904,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2904#issuecomment-317890237,Note: It was broken by 7a52f91 - @jflyper,"@Mmarsian Please test this binary and report back when you have a chance.
cleanflight_2.1.0_SPRACINGF3OSD-20170725-2319.zip",True,{'THUMBS_UP': ['https://github.com/Mmarsian']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2904,2017-07-25T22:17:35Z,2017-07-28T16:58:41Z,2017-07-28T16:58:41Z,MERGED,True,19,0,1,https://github.com/hydra,CF/BF - Fix OSD SLAVE SPI initialisation.,1,[],https://github.com/cleanflight/cleanflight/pull/2904,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/2904#issuecomment-317896589,Note: It was broken by 7a52f91 - @jflyper,My bad.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2904,2017-07-25T22:17:35Z,2017-07-28T16:58:41Z,2017-07-28T16:58:41Z,MERGED,True,19,0,1,https://github.com/hydra,CF/BF - Fix OSD SLAVE SPI initialisation.,1,[],https://github.com/cleanflight/cleanflight/pull/2904,https://github.com/Mmarsian,4,https://github.com/cleanflight/cleanflight/pull/2904#issuecomment-318132023,Note: It was broken by 7a52f91 - @jflyper,@hydra I can make it short: it works! Thank you very much.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2905,2017-07-26T18:05:42Z,2017-08-15T17:03:25Z,2017-08-15T17:03:26Z,MERGED,True,61,50,5,https://github.com/cs8425,Use variable for eeprom emulation in SITL,1,[],https://github.com/cleanflight/cleanflight/pull/2905,https://github.com/cs8425,1,https://github.com/cleanflight/cleanflight/pull/2905,fix EEPROM problem in SITL by merge ledvinap's EEPROM in RAM.,fix EEPROM problem in SITL by merge ledvinap's EEPROM in RAM.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2905,2017-07-26T18:05:42Z,2017-08-15T17:03:25Z,2017-08-15T17:03:26Z,MERGED,True,61,50,5,https://github.com/cs8425,Use variable for eeprom emulation in SITL,1,[],https://github.com/cleanflight/cleanflight/pull/2905,https://github.com/ledvinap,2,https://github.com/cleanflight/cleanflight/pull/2905#issuecomment-318136752,fix EEPROM problem in SITL by merge ledvinap's EEPROM in RAM.,@cs8425  Thanks a lot!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2907,2017-07-27T11:47:31Z,2017-07-28T12:35:02Z,2018-02-23T12:30:02Z,CLOSED,False,4,4,1,https://github.com/McGiverGim,"Revert ""Update Battery.md""",1,[],https://github.com/cleanflight/cleanflight/pull/2907,https://github.com/McGiverGim,1,https://github.com/cleanflight/cleanflight/pull/2907,"This reverts commit 155f98a.
I think the formula is wrong, and it was ok before this commit. It has been talked here: #2899","This reverts commit 155f98a.
I think the formula is wrong, and it was ok before this commit. It has been talked here: #2899",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2907,2017-07-27T11:47:31Z,2017-07-28T12:35:02Z,2018-02-23T12:30:02Z,CLOSED,False,4,4,1,https://github.com/McGiverGim,"Revert ""Update Battery.md""",1,[],https://github.com/cleanflight/cleanflight/pull/2907,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2907#issuecomment-318640463,"This reverts commit 155f98a.
I think the formula is wrong, and it was ok before this commit. It has been talked here: #2899","The virtual is a multiplier, the real is a divider. I close this by the moment.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2908,2017-07-30T11:37:39Z,2017-07-31T21:55:47Z,2017-07-31T21:55:47Z,CLOSED,False,1046140,217190,3162,https://github.com/hydra,merge recent BF changes,338,[],https://github.com/cleanflight/cleanflight/pull/2908,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2908,,,True,{'HEART': ['https://github.com/brucesdad13']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2908,2017-07-30T11:37:39Z,2017-07-31T21:55:47Z,2017-07-31T21:55:47Z,CLOSED,False,1046140,217190,3162,https://github.com/hydra,merge recent BF changes,338,[],https://github.com/cleanflight/cleanflight/pull/2908,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2908#issuecomment-319208089,,replaced by #2912,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2912,2017-07-31T20:11:05Z,2017-07-31T21:50:09Z,2017-07-31T21:50:09Z,MERGED,True,1045717,216483,3149,https://github.com/hydra,Merge recent bf changes,310,[],https://github.com/cleanflight/cleanflight/pull/2912,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2912,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2913,2017-07-31T21:56:29Z,2017-08-02T00:19:28Z,2017-08-02T00:19:28Z,MERGED,True,387,675,46,https://github.com/hydra,merge recent bf changes,49,[],https://github.com/cleanflight/cleanflight/pull/2913,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2913,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2917,2017-08-09T16:17:15Z,2017-08-15T17:01:37Z,2017-08-15T17:01:44Z,CLOSED,False,2860,290,82,https://github.com/Bonemyster,Runcam split accessing OSD to change settings,93,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2917,https://github.com/Bonemyster,1,https://github.com/cleanflight/cleanflight/pull/2917,"Ive setup the switches and modes to change the splits settings from my taranis but one switch only lets me go back and the other lets me scroll. Can you make it so that flipping back switch on and off quick selects and if you leave it on it goes back?
This way I can change settings in the OSD.","Ive setup the switches and modes to change the splits settings from my taranis but one switch only lets me go back and the other lets me scroll. Can you make it so that flipping back switch on and off quick selects and if you leave it on it goes back?
This way I can change settings in the OSD.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2917,2017-08-09T16:17:15Z,2017-08-15T17:01:37Z,2017-08-15T17:01:44Z,CLOSED,False,2860,290,82,https://github.com/Bonemyster,Runcam split accessing OSD to change settings,93,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2917,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2917#issuecomment-321424750,"Ive setup the switches and modes to change the splits settings from my taranis but one switch only lets me go back and the other lets me scroll. Can you make it so that flipping back switch on and off quick selects and if you leave it on it goes back?
This way I can change settings in the OSD.","Something went wrong when you created this pull request: It includes more than just your changeset, and more than just your changes. Can you please rebase your branch on current master and eliminate the extra changesets?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2917,2017-08-09T16:17:15Z,2017-08-15T17:01:37Z,2017-08-15T17:01:44Z,CLOSED,False,2860,290,82,https://github.com/Bonemyster,Runcam split accessing OSD to change settings,93,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2917,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2917#issuecomment-322526097,"Ive setup the switches and modes to change the splits settings from my taranis but one switch only lets me go back and the other lets me scroll. Can you make it so that flipping back switch on and off quick selects and if you leave it on it goes back?
This way I can change settings in the OSD.",invalid PR. closing.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2922,2017-08-15T16:59:49Z,2017-08-15T20:22:26Z,2017-08-15T20:22:26Z,MERGED,True,3023,453,82,https://github.com/hydra,merge recent bf changes,94,[],https://github.com/cleanflight/cleanflight/pull/2922,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2922,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2923,2017-08-16T14:58:29Z,2017-08-17T11:47:16Z,2017-08-24T02:29:49Z,CLOSED,False,461,386,78,https://github.com/KenImhof,Fix 3D Mode #3696,36,[],https://github.com/cleanflight/cleanflight/pull/2923,https://github.com/KenImhof,1,https://github.com/cleanflight/cleanflight/pull/2923,"Added two missing lines of code to 3.2.0-RC3 [mixer.c].  Addresses a problem with 3D mode not being able to control the motor throttle output. Throttle would immediately go to full reverse throttle during positive to negative transition.
mixer.zip","Added two missing lines of code to 3.2.0-RC3 [mixer.c].  Addresses a problem with 3D mode not being able to control the motor throttle output. Throttle would immediately go to full reverse throttle during positive to negative transition.
mixer.zip",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2923,2017-08-16T14:58:29Z,2017-08-17T11:47:16Z,2017-08-24T02:29:49Z,CLOSED,False,461,386,78,https://github.com/KenImhof,Fix 3D Mode #3696,36,[],https://github.com/cleanflight/cleanflight/pull/2923,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2923#issuecomment-322991257,"Added two missing lines of code to 3.2.0-RC3 [mixer.c].  Addresses a problem with 3D mode not being able to control the motor throttle output. Throttle would immediately go to full reverse throttle during positive to negative transition.
mixer.zip","@KenImhof: Can you please close this one? betaflight/betaflight#3870 has been merged, so this is unneeded.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2923,2017-08-16T14:58:29Z,2017-08-17T11:47:16Z,2017-08-24T02:29:49Z,CLOSED,False,461,386,78,https://github.com/KenImhof,Fix 3D Mode #3696,36,[],https://github.com/cleanflight/cleanflight/pull/2923,https://github.com/KenImhof,3,https://github.com/cleanflight/cleanflight/pull/2923#issuecomment-323057672,"Added two missing lines of code to 3.2.0-RC3 [mixer.c].  Addresses a problem with 3D mode not being able to control the motor throttle output. Throttle would immediately go to full reverse throttle during positive to negative transition.
mixer.zip","I am so sorry, but I want to make sure I do it right.  The option I have is to delete the branch as listed below. Is this what I should do?









From: Michael Keller [mailto:notifications@github.com]
Sent: Thursday, August 17, 2017 12:28 AM
To: cleanflight/cleanflight <cleanflight@noreply.github.com>
Cc: Ken Imhof <KenImhof@roadrunner.com>; Mention <mention@noreply.github.com>
Subject: Re: [cleanflight/cleanflight] Fix 3D Mode #3696 (#2923)



@KenImhof <https://github.com/kenimhof> : Can you please close this one? betaflight/betaflight#3870 <betaflight/betaflight#3870>  has been merged, so this is unneeded.

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub <#2923 (comment)> , or mute the thread <https://github.com/notifications/unsubscribe-auth/AcdLc7sc4GcXjWAj6jFddFSpo6x2yB4jks5sY-tqgaJpZM4O5C5l> .  <https://github.com/notifications/beacon/AcdLc2HcsXnQua6n7wlTIAKYbRdNh44xks5sY-tqgaJpZM4O5C5l.gif>",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2923,2017-08-16T14:58:29Z,2017-08-17T11:47:16Z,2017-08-24T02:29:49Z,CLOSED,False,461,386,78,https://github.com/KenImhof,Fix 3D Mode #3696,36,[],https://github.com/cleanflight/cleanflight/pull/2923,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2923#issuecomment-323059103,"Added two missing lines of code to 3.2.0-RC3 [mixer.c].  Addresses a problem with 3D mode not being able to control the motor throttle output. Throttle would immediately go to full reverse throttle during positive to negative transition.
mixer.zip","All good, I've closed the pull request already (it had some urgency because it kept sending notifications for all merges into master). It is up to you if you want to delete the branch or not (you can always restore it).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2923,2017-08-16T14:58:29Z,2017-08-17T11:47:16Z,2017-08-24T02:29:49Z,CLOSED,False,461,386,78,https://github.com/KenImhof,Fix 3D Mode #3696,36,[],https://github.com/cleanflight/cleanflight/pull/2923,https://github.com/KenImhof,5,https://github.com/cleanflight/cleanflight/pull/2923#issuecomment-324496482,"Added two missing lines of code to 3.2.0-RC3 [mixer.c].  Addresses a problem with 3D mode not being able to control the motor throttle output. Throttle would immediately go to full reverse throttle during positive to negative transition.
mixer.zip","Hi Michael,



Sorry to ask as I know you are very busy with mission critical work. I am hoping you can give me a little direction.  I received my STM32F3DISCOVERY kit so I can better debug my code.  I have been struggling for many days to compile BetaFlight under Eclipse.  I have tried the CleanFlight documentation for Eclipse Luna with both Cygwin and MinGW MSYS, but I always get errors when trying to build the project.



I have also tried both Eclipse-Luna and Oxygen using the BetaSite documentation (https://github.com/martinbudden/betaflight/blob/master/docs/development/Building%20in%20Eclipse.md) but, the GNU MCU will not load and says solutions not available.



Am I going down the right path or is there another approach I should take.



Thanks,







From: Michael Keller [mailto:notifications@github.com]
Sent: Thursday, August 17, 2017 5:33 AM
To: cleanflight/cleanflight <cleanflight@noreply.github.com>
Cc: Ken Imhof <KenImhof@roadrunner.com>; Mention <mention@noreply.github.com>
Subject: Re: [cleanflight/cleanflight] Fix 3D Mode #3696 (#2923)



All good, I've closed the pull request already (it had some urgency because it kept sending notifications for all merges into master). It is up to you if you want to delete the branch or not (you can always restore it).

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub <#2923 (comment)> , or mute the thread <https://github.com/notifications/unsubscribe-auth/AcdLc8B4wWjcCObIJpCSkoKRC0WGRxtrks5sZDL4gaJpZM4O5C5l> .  <https://github.com/notifications/beacon/AcdLc8ZavL3X_1ib_42eoOTw5I2e64QEks5sZDL4gaJpZM4O5C5l.gif>",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2923,2017-08-16T14:58:29Z,2017-08-17T11:47:16Z,2017-08-24T02:29:49Z,CLOSED,False,461,386,78,https://github.com/KenImhof,Fix 3D Mode #3696,36,[],https://github.com/cleanflight/cleanflight/pull/2923,https://github.com/mikeller,6,https://github.com/cleanflight/cleanflight/pull/2923#issuecomment-324507430,"Added two missing lines of code to 3.2.0-RC3 [mixer.c].  Addresses a problem with 3D mode not being able to control the motor throttle output. Throttle would immediately go to full reverse throttle during positive to negative transition.
mixer.zip","Hi @KenImhof. I am not the right person to ask about setting up a dev environment under Windows, I am a  linux user. To ask for development related advice on Betaflight, I would recommend you join the Betaflight slack at http://www.betaflight.ch/ .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2923,2017-08-16T14:58:29Z,2017-08-17T11:47:16Z,2017-08-24T02:29:49Z,CLOSED,False,461,386,78,https://github.com/KenImhof,Fix 3D Mode #3696,36,[],https://github.com/cleanflight/cleanflight/pull/2923,https://github.com/KenImhof,7,https://github.com/cleanflight/cleanflight/pull/2923#issuecomment-324515180,"Added two missing lines of code to 3.2.0-RC3 [mixer.c].  Addresses a problem with 3D mode not being able to control the motor throttle output. Throttle would immediately go to full reverse throttle during positive to negative transition.
mixer.zip","Thanks Michael!!!



From: Michael Keller [mailto:notifications@github.com]
Sent: Wednesday, August 23, 2017 6:34 PM
To: cleanflight/cleanflight <cleanflight@noreply.github.com>
Cc: Ken Imhof <KenImhof@roadrunner.com>; Mention <mention@noreply.github.com>
Subject: Re: [cleanflight/cleanflight] Fix 3D Mode #3696 (#2923)



Hi @KenImhof <https://github.com/kenimhof> . I am not the right person to ask about setting up a dev environment under Windows, I am a linux user. To ask for development related advice on Betaflight, I would recommend you join the Betaflight slack at http://www.betaflight.ch/ .

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub <#2923 (comment)> , or mute the thread <https://github.com/notifications/unsubscribe-auth/AcdLc7RFS9u4TNj-6R3TQnLbmQE6KAhHks5sbNLxgaJpZM4O5C5l> .  <https://github.com/notifications/beacon/AcdLc-QW1o634Q42sVSZCEjW4wrdaUTNks5sbNLxgaJpZM4O5C5l.gif>",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2924,2017-08-17T08:16:16Z,2017-08-17T18:47:09Z,2017-08-17T18:47:09Z,MERGED,True,130,67,27,https://github.com/hydra,merge recent BF changes,29,[],https://github.com/cleanflight/cleanflight/pull/2924,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2924,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2925,2017-08-18T03:07:54Z,2017-08-18T03:21:24Z,2017-08-18T03:21:24Z,MERGED,True,1,1,1,https://github.com/jaxxzer,typo,1,[],https://github.com/cleanflight/cleanflight/pull/2925,https://github.com/jaxxzer,1,https://github.com/cleanflight/cleanflight/pull/2925,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2926,2017-08-18T15:14:28Z,2017-08-19T14:07:16Z,2017-08-19T14:28:10Z,CLOSED,False,1533,1314,77,https://github.com/WesBur13,Add quick start up for initial setup,29,[],https://github.com/cleanflight/cleanflight/pull/2926,https://github.com/WesBur13,1,https://github.com/cleanflight/cleanflight/pull/2926,"I've seen this done to both RF and on the Immersion quads. It would be a great feature for allowing new quads in the air in less time.
Possible features:
Board orientation detection(tilt the quad in 2 or 3 axis)
Motor order/ motor assignment
motor reversing(Dshot?)
Rxrange setup along with channel reversing
Uart setup+serial rx setup
quick setup for modes/arming
I think this would not be bad to implement and could help with some new user errors and just speed up the process quicker.","I've seen this done to both RF and on the Immersion quads. It would be a great feature for allowing new quads in the air in less time.
Possible features:
Board orientation detection(tilt the quad in 2 or 3 axis)
Motor order/ motor assignment
motor reversing(Dshot?)
Rxrange setup along with channel reversing
Uart setup+serial rx setup
quick setup for modes/arming
I think this would not be bad to implement and could help with some new user errors and just speed up the process quicker.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2926,2017-08-18T15:14:28Z,2017-08-19T14:07:16Z,2017-08-19T14:28:10Z,CLOSED,False,1533,1314,77,https://github.com/WesBur13,Add quick start up for initial setup,29,[],https://github.com/cleanflight/cleanflight/pull/2926,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2926#issuecomment-323524559,"I've seen this done to both RF and on the Immersion quads. It would be a great feature for allowing new quads in the air in less time.
Possible features:
Board orientation detection(tilt the quad in 2 or 3 axis)
Motor order/ motor assignment
motor reversing(Dshot?)
Rxrange setup along with channel reversing
Uart setup+serial rx setup
quick setup for modes/arming
I think this would not be bad to implement and could help with some new user errors and just speed up the process quicker.","@WesBur13: Is what you are trying to do actually a pull request, or are you just trying to raise and discuss this issue? If it's not a pull request, please close this, and re-open it as an issue.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2926,2017-08-18T15:14:28Z,2017-08-19T14:07:16Z,2017-08-19T14:28:10Z,CLOSED,False,1533,1314,77,https://github.com/WesBur13,Add quick start up for initial setup,29,[],https://github.com/cleanflight/cleanflight/pull/2926,https://github.com/WesBur13,3,https://github.com/cleanflight/cleanflight/pull/2926#issuecomment-323525231,"I've seen this done to both RF and on the Immersion quads. It would be a great feature for allowing new quads in the air in less time.
Possible features:
Board orientation detection(tilt the quad in 2 or 3 axis)
Motor order/ motor assignment
motor reversing(Dshot?)
Rxrange setup along with channel reversing
Uart setup+serial rx setup
quick setup for modes/arming
I think this would not be bad to implement and could help with some new user errors and just speed up the process quicker.",My bad I was told to reopen my issue as a pull request. Will close now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2926,2017-08-18T15:14:28Z,2017-08-19T14:07:16Z,2017-08-19T14:28:10Z,CLOSED,False,1533,1314,77,https://github.com/WesBur13,Add quick start up for initial setup,29,[],https://github.com/cleanflight/cleanflight/pull/2926,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2926#issuecomment-323526372,"I've seen this done to both RF and on the Immersion quads. It would be a great feature for allowing new quads in the air in less time.
Possible features:
Board orientation detection(tilt the quad in 2 or 3 axis)
Motor order/ motor assignment
motor reversing(Dshot?)
Rxrange setup along with channel reversing
Uart setup+serial rx setup
quick setup for modes/arming
I think this would not be bad to implement and could help with some new user errors and just speed up the process quicker.","Well, I guess the idea was for you to implement the functionality, and then open a pull request for the changes. 😉",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2927,2017-08-21T12:26:07Z,2017-08-21T13:25:16Z,2017-08-21T13:25:16Z,CLOSED,False,1950,1662,99,https://github.com/oyvinla,More TPA adjustments,35,[],https://github.com/cleanflight/cleanflight/pull/2927,https://github.com/oyvinla,1,https://github.com/cleanflight/cleanflight/pull/2927,Would it be possible to implement custom TPA adjustment curves similar to kiss or raceflight?,Would it be possible to implement custom TPA adjustment curves similar to kiss or raceflight?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2927,2017-08-21T12:26:07Z,2017-08-21T13:25:16Z,2017-08-21T13:25:16Z,CLOSED,False,1950,1662,99,https://github.com/oyvinla,More TPA adjustments,35,[],https://github.com/cleanflight/cleanflight/pull/2927,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2927#issuecomment-323736570,Would it be possible to implement custom TPA adjustment curves similar to kiss or raceflight?,"@oyvinla: I think what you wanted to do is open an issue, and not open a pull request. If this is the case, please close this pull request and open an issue.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2928,2017-08-22T17:07:55Z,2017-08-23T02:34:12Z,2017-08-23T02:34:12Z,CLOSED,False,2044,1818,104,https://github.com/divenet,Jeti Telemetry for ESC like kiss or BlHeli 32,51,[],https://github.com/cleanflight/cleanflight/pull/2928,https://github.com/divenet,1,https://github.com/cleanflight/cleanflight/pull/2928,"could we have esc telemetry sent over the EX bus and complete the jeti telemetry completed like GPS.
the work so fare to get exbus telemetry works great, just esc to be added please","could we have esc telemetry sent over the EX bus and complete the jeti telemetry completed like GPS.
the work so fare to get exbus telemetry works great, just esc to be added please",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2928,2017-08-22T17:07:55Z,2017-08-23T02:34:12Z,2017-08-23T02:34:12Z,CLOSED,False,2044,1818,104,https://github.com/divenet,Jeti Telemetry for ESC like kiss or BlHeli 32,51,[],https://github.com/cleanflight/cleanflight/pull/2928,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2928#issuecomment-324183842,"could we have esc telemetry sent over the EX bus and complete the jeti telemetry completed like GPS.
the work so fare to get exbus telemetry works great, just esc to be added please","@divenet: I think what you want to open is an issue with a feature request, and not a pulll request. Please close this pull request, and open it again as an issue.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2930,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET","This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2930#issuecomment-325306738,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET","I think you are missing some #ifdefs, which causes the build to fail for F1 targets, see failing checks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/ethomas997,3,https://github.com/cleanflight/cleanflight/pull/2930#issuecomment-325478502,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET","@mikeller Thanks for checking out the PR.  Yes, it needed a couple more #ifdefs; I've added them.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2930#issuecomment-325915832,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET",can you rebase this against master please @ethomas997,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/ethomas997,5,https://github.com/cleanflight/cleanflight/pull/2930#issuecomment-326132449,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET",@hydra Rebased to master 2017-08-30.  I've retested with SmartAudio and Tramp; all looks good.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/ethomas997,6,https://github.com/cleanflight/cleanflight/pull/2930#issuecomment-326793722,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET",I've posted a PR that adds a 'vtx_freq' setting.  #2936,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/ethomas997,7,https://github.com/cleanflight/cleanflight/pull/2930#issuecomment-328322654,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET","@hydra I've updated it so each vtx module has its own band, channel and power defines.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/ethomas997,8,https://github.com/cleanflight/cleanflight/pull/2930#issuecomment-329947953,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET",@hydra I think the version I posted on Sept 10 should address the issues you raised.  Please let me know if this needs further changes.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2930,2017-08-28T09:06:11Z,2017-10-02T23:10:36Z,2017-10-02T23:10:36Z,CLOSED,False,390,80,15,https://github.com/ethomas997,Implement 'vtx_' settings for SmartAudio and Tramp,1,[],https://github.com/cleanflight/cleanflight/pull/2930,https://github.com/hydra,9,https://github.com/cleanflight/cleanflight/pull/2930#issuecomment-333690699,"This takes the 'vtx_' settings that @hydra created (vtx_band / vtx_channel / vtx_power) for RTC6705 and also implements them for TBS-SmartAudio and IRC-Tramp video transmitters.  At startup the settings are applied to the transmitter.  If the video setup is modified via the CMS OSD menu or via MSP (Taranis/OpenTX smartport), the settings are updated.
One nice thing the settings can provide is a way to configure a frequency (via USB / CLI) while the video transmitter is not powered up.  Afer a save and power cycle, the system will startup at the new frequency.
The 'vtx_rtc6705' code is mostly unchanged (I don't have an SPRacing NEO board to test with); I've tested with TBS-SmartAudio and IRC-TrampHV transmitters.  For 'vtx_band' the values are:  1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband.
What I want to do next is a 'vtx_freq' setting for the option of setting the frequency in MHz.  If 'vtx_band' is zero then 'vtx_freq' would configure the frequency.  Currently the CMS OSD menu on SmartAudio can configure a ""user"" frequency in MHz, in which case 'vtx_band' is set to zero (and the band/channel are not applied to the vtx at startup).
The other thing I want is to get is frequency setting in MHz supported in MSP (vtxCommon) so it can be set that way via Taranis/OpenTX smartport.
I can do a version of this over on Betaflight at well.  Does it need to be merged there first?
--ET","approved in general, a few comments added on the new PR here:
betaflight/betaflight#4265",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2932,2017-08-29T04:42:03Z,2017-08-30T07:55:05Z,2017-08-30T07:55:12Z,CLOSED,False,456,51,17,https://github.com/teradactyal,Support for DMSS receivers,15,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2932,https://github.com/teradactyal,1,https://github.com/cleanflight/cleanflight/pull/2932,Any chance we can get support for binding to JR DMSS receivers?,Any chance we can get support for binding to JR DMSS receivers?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2932,2017-08-29T04:42:03Z,2017-08-30T07:55:05Z,2017-08-30T07:55:12Z,CLOSED,False,456,51,17,https://github.com/teradactyal,Support for DMSS receivers,15,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2932,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2932#issuecomment-325553845,Any chance we can get support for binding to JR DMSS receivers?,"@teradactyal: From the look of it, what you want to do is open a feature request. What you have done is to open a pull request, without any meaningful changes to be merged. Please close this pull request, and submit a feature request at https://github.com/cleanflight/cleanflight/issues.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2932,2017-08-29T04:42:03Z,2017-08-30T07:55:05Z,2017-08-30T07:55:12Z,CLOSED,False,456,51,17,https://github.com/teradactyal,Support for DMSS receivers,15,['Invalid'],https://github.com/cleanflight/cleanflight/pull/2932,https://github.com/teradactyal,3,https://github.com/cleanflight/cleanflight/pull/2932#issuecomment-325562591,Any chance we can get support for binding to JR DMSS receivers?,"Ahh sorry 


Sent from my SAMSUNG Galaxy S7 on the Telstra Mobile Network
-------- Original message --------From: Michael Keller <notifications@github.com> Date: 29/8/17  14:45  (GMT+10:00) To: cleanflight/cleanflight <cleanflight@noreply.github.com> Cc: teradactyal <stephenlbarrow@gmail.com>, Mention <mention@noreply.github.com> Subject: Re: [cleanflight/cleanflight] Support for DMSS receivers (#2932) 
@teradactyal: From the look of it, what you want to do is open a feature request. What you have done is to open a pull request, without any meaningful changes to be merged. Please close this pull request, and submit a feature request at https://github.com/cleanflight/cleanflight/issues.

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.








{""api_version"":""1.0"",""publisher"":{""api_key"":""05dde50f1d1a384dd78767c55493e4bb"",""name"":""GitHub""},""entity"":{""external_key"":""github/cleanflight/cleanflight"",""title"":""cleanflight/cleanflight"",""subtitle"":""GitHub repository"",""main_image_url"":""https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png"",""avatar_image_url"":""https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png"",""action"":{""name"":""Open in GitHub"",""url"":""https://github.com/cleanflight/cleanflight""}},""updates"":{""snippets"":[{""icon"":""PERSON"",""message"":""@mikeller in #2932: @teradactyal: From the look of it, what you want to do is open a feature request. What you have done is to open a pull request, without any meaningful changes to be merged. Please close this pull request, and submit a feature request at https://github.com/cleanflight/cleanflight/issues.""}],""action"":{""name"":""View Pull Request"",""url"":""#2932 (comment)""}}}",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2933,2017-08-29T22:52:05Z,2017-08-29T23:26:30Z,2017-08-30T07:54:31Z,MERGED,True,2854,2346,316,https://github.com/hydra,merge recent bf changes,126,[],https://github.com/cleanflight/cleanflight/pull/2933,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2933,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2934,2017-08-31T21:32:00Z,2017-09-01T09:52:45Z,2017-09-03T12:52:39Z,MERGED,True,3,0,1,https://github.com/mikeller,Use only first non-VCP MSP port for OSD over MSP.,2,[],https://github.com/cleanflight/cleanflight/pull/2934,https://github.com/mikeller,1,https://github.com/cleanflight/cleanflight/pull/2934,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2934,2017-08-31T21:32:00Z,2017-09-01T09:52:45Z,2017-09-03T12:52:39Z,MERGED,True,3,0,1,https://github.com/mikeller,Use only first non-VCP MSP port for OSD over MSP.,2,[],https://github.com/cleanflight/cleanflight/pull/2934,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2934#issuecomment-326427044,,"this doesn't fix the problem properly and requires the user to wire up his ports in the right order if they want to use this specific configuration.
it will work for the SPRACINGF3EVO and SPRACINGF4EVO + F3OSD + 1 additional MSP port but only because the stacking pins on both boards are for UART1 which is where the F3OSD connects.  But that is just co-incidence.
As such this is quite a hack and would not be well understood by anyone reading just the code alone.
👎",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2934,2017-08-31T21:32:00Z,2017-09-01T09:52:45Z,2017-09-03T12:52:39Z,MERGED,True,3,0,1,https://github.com/mikeller,Use only first non-VCP MSP port for OSD over MSP.,2,[],https://github.com/cleanflight/cleanflight/pull/2934,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2934#issuecomment-326427605,,Made it clearer.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2934,2017-08-31T21:32:00Z,2017-09-01T09:52:45Z,2017-09-03T12:52:39Z,MERGED,True,3,0,1,https://github.com/mikeller,Use only first non-VCP MSP port for OSD over MSP.,2,[],https://github.com/cleanflight/cleanflight/pull/2934,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2934#issuecomment-326427741,,better now a comment has been added.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2935,2017-09-03T07:00:29Z,2017-09-03T19:13:33Z,2017-09-03T19:13:33Z,CLOSED,False,1072,373,55,https://github.com/gke,Ignore,54,[],https://github.com/cleanflight/cleanflight/pull/2935,https://github.com/gke,1,https://github.com/cleanflight/cleanflight/pull/2935,ignore - need to learn how to drive the pull process first.,ignore - need to learn how to drive the pull process first.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2935,2017-09-03T07:00:29Z,2017-09-03T19:13:33Z,2017-09-03T19:13:33Z,CLOSED,False,1072,373,55,https://github.com/gke,Ignore,54,[],https://github.com/cleanflight/cleanflight/pull/2935,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2935#issuecomment-326801510,ignore - need to learn how to drive the pull process first.,"@gke: Are you still going to do something with this pull request? If not, please close it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2936,2017-09-03T09:17:47Z,2017-10-02T23:11:02Z,2017-10-02T23:11:02Z,CLOSED,False,547,87,17,https://github.com/ethomas997,Add 'vtx_freq' setting for SmartAudio and Tramp,2,[],https://github.com/cleanflight/cleanflight/pull/2936,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2936,"This builds on PR #2930, adding a 'vtx_freq' setting for TBS-SmartAudio and IRC-Tramp video transmitters ((I don't have an RTC6705 / SPRacing NEO board to test with.)  If vtx_band=0 and vtx_freq!=0 then the 'vtx_freq' value (in MHz) will be configured on the transmitter at startup.  If both are zero then the settings will be ignored.  If vtx_band!=0 and a video transmitter is connected then 'vtx_freq' will be set to the current frequency value (in MHz) at startup.
--ET","This builds on PR #2930, adding a 'vtx_freq' setting for TBS-SmartAudio and IRC-Tramp video transmitters ((I don't have an RTC6705 / SPRacing NEO board to test with.)  If vtx_band=0 and vtx_freq!=0 then the 'vtx_freq' value (in MHz) will be configured on the transmitter at startup.  If both are zero then the settings will be ignored.  If vtx_band!=0 and a video transmitter is connected then 'vtx_freq' will be set to the current frequency value (in MHz) at startup.
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2936,2017-09-03T09:17:47Z,2017-10-02T23:11:02Z,2017-10-02T23:11:02Z,CLOSED,False,547,87,17,https://github.com/ethomas997,Add 'vtx_freq' setting for SmartAudio and Tramp,2,[],https://github.com/cleanflight/cleanflight/pull/2936,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2936#issuecomment-326799182,"This builds on PR #2930, adding a 'vtx_freq' setting for TBS-SmartAudio and IRC-Tramp video transmitters ((I don't have an RTC6705 / SPRacing NEO board to test with.)  If vtx_band=0 and vtx_freq!=0 then the 'vtx_freq' value (in MHz) will be configured on the transmitter at startup.  If both are zero then the settings will be ignored.  If vtx_band!=0 and a video transmitter is connected then 'vtx_freq' will be set to the current frequency value (in MHz) at startup.
--ET",I think #2930 should go in first. @hydra is there anything holding up #2930?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2936,2017-09-03T09:17:47Z,2017-10-02T23:11:02Z,2017-10-02T23:11:02Z,CLOSED,False,547,87,17,https://github.com/ethomas997,Add 'vtx_freq' setting for SmartAudio and Tramp,2,[],https://github.com/cleanflight/cleanflight/pull/2936,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2936#issuecomment-327177756,"This builds on PR #2930, adding a 'vtx_freq' setting for TBS-SmartAudio and IRC-Tramp video transmitters ((I don't have an RTC6705 / SPRacing NEO board to test with.)  If vtx_band=0 and vtx_freq!=0 then the 'vtx_freq' value (in MHz) will be configured on the transmitter at startup.  If both are zero then the settings will be ignored.  If vtx_band!=0 and a video transmitter is connected then 'vtx_freq' will be set to the current frequency value (in MHz) at startup.
--ET","yes, there's a problem in #2930 which needs to be resolved first with regards to the replacement of channel/band/power numbers with shared #defines which are wrong.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2936,2017-09-03T09:17:47Z,2017-10-02T23:11:02Z,2017-10-02T23:11:02Z,CLOSED,False,547,87,17,https://github.com/ethomas997,Add 'vtx_freq' setting for SmartAudio and Tramp,2,[],https://github.com/cleanflight/cleanflight/pull/2936,https://github.com/JRSHobby,4,https://github.com/cleanflight/cleanflight/pull/2936#issuecomment-328471857,"This builds on PR #2930, adding a 'vtx_freq' setting for TBS-SmartAudio and IRC-Tramp video transmitters ((I don't have an RTC6705 / SPRacing NEO board to test with.)  If vtx_band=0 and vtx_freq!=0 then the 'vtx_freq' value (in MHz) will be configured on the transmitter at startup.  If both are zero then the settings will be ignored.  If vtx_band!=0 and a video transmitter is connected then 'vtx_freq' will be set to the current frequency value (in MHz) at startup.
--ET",this was a bind to fly 220x  itworked and set very well thanks I also plugged In a RTF V Tail but I Did not want to mess it up so I unplugged It Manual said to erase it to set up It just needs to be tuned up,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2936,2017-09-03T09:17:47Z,2017-10-02T23:11:02Z,2017-10-02T23:11:02Z,CLOSED,False,547,87,17,https://github.com/ethomas997,Add 'vtx_freq' setting for SmartAudio and Tramp,2,[],https://github.com/cleanflight/cleanflight/pull/2936,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2936#issuecomment-333691064,"This builds on PR #2930, adding a 'vtx_freq' setting for TBS-SmartAudio and IRC-Tramp video transmitters ((I don't have an RTC6705 / SPRacing NEO board to test with.)  If vtx_band=0 and vtx_freq!=0 then the 'vtx_freq' value (in MHz) will be configured on the transmitter at startup.  If both are zero then the settings will be ignored.  If vtx_band!=0 and a video transmitter is connected then 'vtx_freq' will be set to the current frequency value (in MHz) at startup.
--ET","continued here:
betaflight/betaflight#4265",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2937,2017-09-07T17:40:30Z,2017-09-09T13:09:11Z,2017-09-09T13:09:11Z,CLOSED,False,1440,491,89,https://github.com/hattrickmwf,CL F4 target.  Motor stop causes throttle to not respond above idle,103,[],https://github.com/cleanflight/cleanflight/pull/2937,https://github.com/hattrickmwf,1,https://github.com/cleanflight/cleanflight/pull/2937,"On 3.2 RC 4 CL F4 board.  I set up the quad with the minimum amount of stuff to make it flyable.  Airmode on a switch and with motor stop on.  No throttle.  Motors will spin when armed and airmode turned on, but no higher than idle.  Turned motor stop off.  Still no throttle.  Reflashed and set up the minimum with airmode as a feature and motor stop off.  Throttle works!  Made the rest of the changes I normally make.  Throttle not working again.  Reflashed,  set up the minimum required, airmode as a feature and motor stop off,  throttle works again.  Made the changes I normally make one at a time and checked if throttle worked after each one and it stayed working with every change.  Very strange.  It seems that making more than one change at a time somehow made the throttle stop working.  While making them one at a time kept the throttle working.
All works as normal on 3.17","On 3.2 RC 4 CL F4 board.  I set up the quad with the minimum amount of stuff to make it flyable.  Airmode on a switch and with motor stop on.  No throttle.  Motors will spin when armed and airmode turned on, but no higher than idle.  Turned motor stop off.  Still no throttle.  Reflashed and set up the minimum with airmode as a feature and motor stop off.  Throttle works!  Made the rest of the changes I normally make.  Throttle not working again.  Reflashed,  set up the minimum required, airmode as a feature and motor stop off,  throttle works again.  Made the changes I normally make one at a time and checked if throttle worked after each one and it stayed working with every change.  Very strange.  It seems that making more than one change at a time somehow made the throttle stop working.  While making them one at a time kept the throttle working.
All works as normal on 3.17",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2937,2017-09-07T17:40:30Z,2017-09-09T13:09:11Z,2017-09-09T13:09:11Z,CLOSED,False,1440,491,89,https://github.com/hattrickmwf,CL F4 target.  Motor stop causes throttle to not respond above idle,103,[],https://github.com/cleanflight/cleanflight/pull/2937,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2937#issuecomment-328008387,"On 3.2 RC 4 CL F4 board.  I set up the quad with the minimum amount of stuff to make it flyable.  Airmode on a switch and with motor stop on.  No throttle.  Motors will spin when armed and airmode turned on, but no higher than idle.  Turned motor stop off.  Still no throttle.  Reflashed and set up the minimum with airmode as a feature and motor stop off.  Throttle works!  Made the rest of the changes I normally make.  Throttle not working again.  Reflashed,  set up the minimum required, airmode as a feature and motor stop off,  throttle works again.  Made the changes I normally make one at a time and checked if throttle worked after each one and it stayed working with every change.  Very strange.  It seems that making more than one change at a time somehow made the throttle stop working.  While making them one at a time kept the throttle working.
All works as normal on 3.17","@hattrickmwf: I think what you wanted to do is to open an issue. What you have done is opening a pull request, with no code attached to it. Please close this and open an issue here: https://github.com/cleanflight/cleanflight/issues",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2937,2017-09-07T17:40:30Z,2017-09-09T13:09:11Z,2017-09-09T13:09:11Z,CLOSED,False,1440,491,89,https://github.com/hattrickmwf,CL F4 target.  Motor stop causes throttle to not respond above idle,103,[],https://github.com/cleanflight/cleanflight/pull/2937,https://github.com/hattrickmwf,3,https://github.com/cleanflight/cleanflight/pull/2937#issuecomment-328276227,"On 3.2 RC 4 CL F4 board.  I set up the quad with the minimum amount of stuff to make it flyable.  Airmode on a switch and with motor stop on.  No throttle.  Motors will spin when armed and airmode turned on, but no higher than idle.  Turned motor stop off.  Still no throttle.  Reflashed and set up the minimum with airmode as a feature and motor stop off.  Throttle works!  Made the rest of the changes I normally make.  Throttle not working again.  Reflashed,  set up the minimum required, airmode as a feature and motor stop off,  throttle works again.  Made the changes I normally make one at a time and checked if throttle worked after each one and it stayed working with every change.  Very strange.  It seems that making more than one change at a time somehow made the throttle stop working.  While making them one at a time kept the throttle working.
All works as normal on 3.17","Thank you.  New to github.  Really don’t know what I’m doing!



Mike Fredricks



From: Michael Keller [mailto:notifications@github.com]
Sent: Friday, September 08, 2017 1:11 AM
To: cleanflight/cleanflight
Cc: hattrickmwf; Mention
Subject: Re: [cleanflight/cleanflight] CL F4 target. Motor stop causes throttle to not respond above idle (#2937)



@hattrickmwf <https://github.com/hattrickmwf> : I think what you wanted to do is to open an issue. What you have done is opening a pull request, with no code attached to it. Please close this and open an issue here: https://github.com/cleanflight/cleanflight/issues

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub <#2937 (comment)> , or mute the thread <https://github.com/notifications/unsubscribe-auth/Ad7qw0733K1aycjCCV-Fpme1IwNFDNHvks5sgNpzgaJpZM4PQKKW> .  <https://github.com/notifications/beacon/Ad7qwydmfBvscHuaFycdMUR4GdYHwBFFks5sgNpzgaJpZM4PQKKW.gif>",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2939,2017-09-10T04:46:46Z,2017-09-21T23:51:29Z,2017-09-21T23:51:29Z,MERGED,True,2,2,1,https://github.com/jaxxzer,Formatting,1,[],https://github.com/cleanflight/cleanflight/pull/2939,https://github.com/jaxxzer,1,https://github.com/cleanflight/cleanflight/pull/2939,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2941,2017-09-11T04:46:19Z,2017-10-02T23:11:36Z,2017-10-02T23:11:36Z,CLOSED,False,591,116,18,https://github.com/ethomas997,SmartAudio-CMS fixes and improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2941,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2941,"This builds on PR #2930 and #2936, implementing some fixes and improvements to the SmartAudio part of the CMS OSD menus:
CMS set of USER frequency would fail if frequency was same as previous USER frequency
CMS would set vtx freq immediately when going from USER to CHAN freq mode
(should wait until SET performed)
After changing CHAN/USER freq mode but before SET, the CMS status line
would show wrong band-channel / U-F display
(needed new 'saCmsFselModeNew' variable)
CMS will now update when saDevice settings change
(if race opmodel via CMS and then user freq set via CLI ""set vtx_freq"",
freq is set but CMS would report race opmodel and old band/channel)
Modified SA CMS to use 'saSetPitFreq()' function
Moved 'saCmsUpdate()' declaration to 'cms_menu_vtx_smartaudio.h'
--ET","This builds on PR #2930 and #2936, implementing some fixes and improvements to the SmartAudio part of the CMS OSD menus:
CMS set of USER frequency would fail if frequency was same as previous USER frequency
CMS would set vtx freq immediately when going from USER to CHAN freq mode
(should wait until SET performed)
After changing CHAN/USER freq mode but before SET, the CMS status line
would show wrong band-channel / U-F display
(needed new 'saCmsFselModeNew' variable)
CMS will now update when saDevice settings change
(if race opmodel via CMS and then user freq set via CLI ""set vtx_freq"",
freq is set but CMS would report race opmodel and old band/channel)
Modified SA CMS to use 'saSetPitFreq()' function
Moved 'saCmsUpdate()' declaration to 'cms_menu_vtx_smartaudio.h'
--ET",True,{'THUMBS_UP': ['https://github.com/brucesdad13']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2941,2017-09-11T04:46:19Z,2017-10-02T23:11:36Z,2017-10-02T23:11:36Z,CLOSED,False,591,116,18,https://github.com/ethomas997,SmartAudio-CMS fixes and improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2941,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2941#issuecomment-330484289,"This builds on PR #2930 and #2936, implementing some fixes and improvements to the SmartAudio part of the CMS OSD menus:
CMS set of USER frequency would fail if frequency was same as previous USER frequency
CMS would set vtx freq immediately when going from USER to CHAN freq mode
(should wait until SET performed)
After changing CHAN/USER freq mode but before SET, the CMS status line
would show wrong band-channel / U-F display
(needed new 'saCmsFselModeNew' variable)
CMS will now update when saDevice settings change
(if race opmodel via CMS and then user freq set via CLI ""set vtx_freq"",
freq is set but CMS would report race opmodel and old band/channel)
Modified SA CMS to use 'saSetPitFreq()' function
Moved 'saCmsUpdate()' declaration to 'cms_menu_vtx_smartaudio.h'
--ET","@ethomas997 great, i'll have a look through the changes ASAP, I've been away from the code for a couple of weeks.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2941,2017-09-11T04:46:19Z,2017-10-02T23:11:36Z,2017-10-02T23:11:36Z,CLOSED,False,591,116,18,https://github.com/ethomas997,SmartAudio-CMS fixes and improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2941,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/2941#issuecomment-331312292,"This builds on PR #2930 and #2936, implementing some fixes and improvements to the SmartAudio part of the CMS OSD menus:
CMS set of USER frequency would fail if frequency was same as previous USER frequency
CMS would set vtx freq immediately when going from USER to CHAN freq mode
(should wait until SET performed)
After changing CHAN/USER freq mode but before SET, the CMS status line
would show wrong band-channel / U-F display
(needed new 'saCmsFselModeNew' variable)
CMS will now update when saDevice settings change
(if race opmodel via CMS and then user freq set via CLI ""set vtx_freq"",
freq is set but CMS would report race opmodel and old band/channel)
Modified SA CMS to use 'saSetPitFreq()' function
Moved 'saCmsUpdate()' declaration to 'cms_menu_vtx_smartaudio.h'
--ET",can you do a rebase?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2941,2017-09-11T04:46:19Z,2017-10-02T23:11:36Z,2017-10-02T23:11:36Z,CLOSED,False,591,116,18,https://github.com/ethomas997,SmartAudio-CMS fixes and improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2941,https://github.com/ethomas997,4,https://github.com/cleanflight/cleanflight/pull/2941#issuecomment-331324456,"This builds on PR #2930 and #2936, implementing some fixes and improvements to the SmartAudio part of the CMS OSD menus:
CMS set of USER frequency would fail if frequency was same as previous USER frequency
CMS would set vtx freq immediately when going from USER to CHAN freq mode
(should wait until SET performed)
After changing CHAN/USER freq mode but before SET, the CMS status line
would show wrong band-channel / U-F display
(needed new 'saCmsFselModeNew' variable)
CMS will now update when saDevice settings change
(if race opmodel via CMS and then user freq set via CLI ""set vtx_freq"",
freq is set but CMS would report race opmodel and old band/channel)
Modified SA CMS to use 'saSetPitFreq()' function
Moved 'saCmsUpdate()' declaration to 'cms_menu_vtx_smartaudio.h'
--ET","@hydra Rebased to master 2017-09-21
I've got mods I'll be posting soon for adding set-by-freq-in-MHz support to the vtxCommon API and the MSP-VTX protocol (and I've got Taranis/OpenTX/LUA script mods for using it in the works).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2941,2017-09-11T04:46:19Z,2017-10-02T23:11:36Z,2017-10-02T23:11:36Z,CLOSED,False,591,116,18,https://github.com/ethomas997,SmartAudio-CMS fixes and improvements,3,[],https://github.com/cleanflight/cleanflight/pull/2941,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2941#issuecomment-333691155,"This builds on PR #2930 and #2936, implementing some fixes and improvements to the SmartAudio part of the CMS OSD menus:
CMS set of USER frequency would fail if frequency was same as previous USER frequency
CMS would set vtx freq immediately when going from USER to CHAN freq mode
(should wait until SET performed)
After changing CHAN/USER freq mode but before SET, the CMS status line
would show wrong band-channel / U-F display
(needed new 'saCmsFselModeNew' variable)
CMS will now update when saDevice settings change
(if race opmodel via CMS and then user freq set via CLI ""set vtx_freq"",
freq is set but CMS would report race opmodel and old band/channel)
Modified SA CMS to use 'saSetPitFreq()' function
Moved 'saCmsUpdate()' declaration to 'cms_menu_vtx_smartaudio.h'
--ET","continued here:
betaflight/betaflight#4265",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2942,2017-09-17T19:34:04Z,2017-09-17T19:40:28Z,2017-09-17T20:58:10Z,CLOSED,False,975740,36195,1830,https://github.com/KenImhof,Activating AltHold While Inverted Issue #1793 and 3D Neutral Not Symmetrical Issue #1879,2913,[],https://github.com/cleanflight/cleanflight/pull/2942,https://github.com/KenImhof,1,https://github.com/cleanflight/cleanflight/pull/2942,"Issue #1793 Activating AltHold While Inverted:
If Inverted when activating ALT-Hold, reverse motors then at the top of the flip change motors to the normal direction and reset the hold position to the current position. This is a big improvement (see video link under issue #1793) and I have made some more progress since the video was made.  More work such as  first level-out, punch-out, then flip would be beneficial.  Event just leveling the pitch before the flip would smooth out the transition.  After this is perfected, it would be great to add other exciting features such as hard-deck to automatically activate this feature when a certain altitude is reached making it nearly impossible to crash.  This would be a revolutionary improvement to our hobby that would re-establish 3D Quads/Helicopter-modes that would attract and bring back many people to this exciting hobby.
Issue #10879 3D Not Symmetrical Issued:
As a work-around, I changed the 3D Neutral variable to use the Configurator-[3D Neutral] value to adjust the center stick transition point.
I also changed the [Deadband Low] and [Deadband High] defaults as the existing values are too close to each other and do not work well.  These values keep the motors spinning faster in the Deadband zone, which make the quad much smoother and prevents the severe jitters when the throttle is reapplied.
ModifiedFiles.zip","Issue #1793 Activating AltHold While Inverted:
If Inverted when activating ALT-Hold, reverse motors then at the top of the flip change motors to the normal direction and reset the hold position to the current position. This is a big improvement (see video link under issue #1793) and I have made some more progress since the video was made.  More work such as  first level-out, punch-out, then flip would be beneficial.  Event just leveling the pitch before the flip would smooth out the transition.  After this is perfected, it would be great to add other exciting features such as hard-deck to automatically activate this feature when a certain altitude is reached making it nearly impossible to crash.  This would be a revolutionary improvement to our hobby that would re-establish 3D Quads/Helicopter-modes that would attract and bring back many people to this exciting hobby.
Issue #10879 3D Not Symmetrical Issued:
As a work-around, I changed the 3D Neutral variable to use the Configurator-[3D Neutral] value to adjust the center stick transition point.
I also changed the [Deadband Low] and [Deadband High] defaults as the existing values are too close to each other and do not work well.  These values keep the motors spinning faster in the Deadband zone, which make the quad much smoother and prevents the severe jitters when the throttle is reapplied.
ModifiedFiles.zip",True,{'THUMBS_UP': ['https://github.com/junwoo091400']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2942,2017-09-17T19:34:04Z,2017-09-17T19:40:28Z,2017-09-17T20:58:10Z,CLOSED,False,975740,36195,1830,https://github.com/KenImhof,Activating AltHold While Inverted Issue #1793 and 3D Neutral Not Symmetrical Issue #1879,2913,[],https://github.com/cleanflight/cleanflight/pull/2942,https://github.com/KenImhof,2,https://github.com/cleanflight/cleanflight/pull/2942#issuecomment-330078048,"Issue #1793 Activating AltHold While Inverted:
If Inverted when activating ALT-Hold, reverse motors then at the top of the flip change motors to the normal direction and reset the hold position to the current position. This is a big improvement (see video link under issue #1793) and I have made some more progress since the video was made.  More work such as  first level-out, punch-out, then flip would be beneficial.  Event just leveling the pitch before the flip would smooth out the transition.  After this is perfected, it would be great to add other exciting features such as hard-deck to automatically activate this feature when a certain altitude is reached making it nearly impossible to crash.  This would be a revolutionary improvement to our hobby that would re-establish 3D Quads/Helicopter-modes that would attract and bring back many people to this exciting hobby.
Issue #10879 3D Not Symmetrical Issued:
As a work-around, I changed the 3D Neutral variable to use the Configurator-[3D Neutral] value to adjust the center stick transition point.
I also changed the [Deadband Low] and [Deadband High] defaults as the existing values are too close to each other and do not work well.  These values keep the motors spinning faster in the Deadband zone, which make the quad much smoother and prevents the severe jitters when the throttle is reapplied.
ModifiedFiles.zip",Something went wrong.  Will close and try again.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2942,2017-09-17T19:34:04Z,2017-09-17T19:40:28Z,2017-09-17T20:58:10Z,CLOSED,False,975740,36195,1830,https://github.com/KenImhof,Activating AltHold While Inverted Issue #1793 and 3D Neutral Not Symmetrical Issue #1879,2913,[],https://github.com/cleanflight/cleanflight/pull/2942,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2942#issuecomment-330085895,"Issue #1793 Activating AltHold While Inverted:
If Inverted when activating ALT-Hold, reverse motors then at the top of the flip change motors to the normal direction and reset the hold position to the current position. This is a big improvement (see video link under issue #1793) and I have made some more progress since the video was made.  More work such as  first level-out, punch-out, then flip would be beneficial.  Event just leveling the pitch before the flip would smooth out the transition.  After this is perfected, it would be great to add other exciting features such as hard-deck to automatically activate this feature when a certain altitude is reached making it nearly impossible to crash.  This would be a revolutionary improvement to our hobby that would re-establish 3D Quads/Helicopter-modes that would attract and bring back many people to this exciting hobby.
Issue #10879 3D Not Symmetrical Issued:
As a work-around, I changed the 3D Neutral variable to use the Configurator-[3D Neutral] value to adjust the center stick transition point.
I also changed the [Deadband Low] and [Deadband High] defaults as the existing values are too close to each other and do not work well.  These values keep the motors spinning faster in the Deadband zone, which make the quad much smoother and prevents the severe jitters when the throttle is reapplied.
ModifiedFiles.zip","@KenImhof: I suspect you will have to graft across from iNav, instead of cherry-picking. The two source trees have diverged quite a bit.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2943,2017-09-18T13:25:23Z,2017-09-19T02:15:21Z,2017-09-19T02:15:21Z,CLOSED,False,2438,777,114,https://github.com/Dessection,Ment to open a Request. My bad.,159,[],https://github.com/cleanflight/cleanflight/pull/2943,https://github.com/Dessection,1,https://github.com/cleanflight/cleanflight/pull/2943,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2943,2017-09-18T13:25:23Z,2017-09-19T02:15:21Z,2017-09-19T02:15:21Z,CLOSED,False,2438,777,114,https://github.com/Dessection,Ment to open a Request. My bad.,159,[],https://github.com/cleanflight/cleanflight/pull/2943,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2943#issuecomment-330234602,,"@Dessection: I think what you intended to do is open a feature request. You can do this here: https://github.com/cleanflight/cleanflight/issues
What you have done is opened a pull request. Please close this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2944,2017-09-20T20:31:03Z,2017-09-20T21:48:55Z,2017-09-20T21:48:55Z,CLOSED,False,2763,844,129,https://github.com/stunter1,vlr,189,[],https://github.com/cleanflight/cleanflight/pull/2944,https://github.com/stunter1,1,https://github.com/cleanflight/cleanflight/pull/2944,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2944,2017-09-20T20:31:03Z,2017-09-20T21:48:55Z,2017-09-20T21:48:55Z,CLOSED,False,2763,844,129,https://github.com/stunter1,vlr,189,[],https://github.com/cleanflight/cleanflight/pull/2944,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2944#issuecomment-330990913,,"Hi @stunter1. I don't know what you are trying to do, but this is most likely not it. If you want to report a bug, or propose a change, please go to https://github.com/cleanflight/cleanflight/issues, read and follow the text in the issue template, and submit there. Closing this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2945,2017-09-21T16:47:28Z,2017-09-21T23:35:24Z,2017-09-21T23:35:24Z,MERGED,True,2886,948,132,https://github.com/hydra,merge recent bf changes,200,[],https://github.com/cleanflight/cleanflight/pull/2945,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2945,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2947,2017-09-25T07:03:15Z,2017-10-02T22:56:47Z,2017-10-02T22:56:47Z,CLOSED,False,704,124,21,https://github.com/ethomas997,Add SetFreqByMHzMsp support,4,[],https://github.com/cleanflight/cleanflight/pull/2947,https://github.com/ethomas997,1,https://github.com/cleanflight/cleanflight/pull/2947,"This builds on PR #2941, adding support for setting the VTX frequency in MHz via MSP for TBS-SmartAudio and IRC-Tramp video transmitters.
I've posted a modified 'betaflight-tx-lua-scripts' that utilize this new functionality, here:  https://github.com/ethomas997/betaflight-tx-lua-scripts/tree/etVtxFreqEditable
--ET","This builds on PR #2941, adding support for setting the VTX frequency in MHz via MSP for TBS-SmartAudio and IRC-Tramp video transmitters.
I've posted a modified 'betaflight-tx-lua-scripts' that utilize this new functionality, here:  https://github.com/ethomas997/betaflight-tx-lua-scripts/tree/etVtxFreqEditable
--ET",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2947,2017-09-25T07:03:15Z,2017-10-02T22:56:47Z,2017-10-02T22:56:47Z,CLOSED,False,704,124,21,https://github.com/ethomas997,Add SetFreqByMHzMsp support,4,[],https://github.com/cleanflight/cleanflight/pull/2947,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2947#issuecomment-333688604,"This builds on PR #2941, adding support for setting the VTX frequency in MHz via MSP for TBS-SmartAudio and IRC-Tramp video transmitters.
I've posted a modified 'betaflight-tx-lua-scripts' that utilize this new functionality, here:  https://github.com/ethomas997/betaflight-tx-lua-scripts/tree/etVtxFreqEditable
--ET","@ethomas997 hiya.  thanks again for this PR, yes you guessed it I've still not had time to try it out, I've been plagued with other issues recently...
I see you also opened betaflight/betaflight#4265
The CF/BF developers are in feature freeze right now while the code is stabilised for BF 3.2/CF 2.2.
Since this PR needs rebasing and the BF one doesn't I'll close this and we can continue with the review/changes on the BF PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2948,2017-09-25T20:08:36Z,2017-10-02T23:27:37Z,2017-10-03T14:27:39Z,MERGED,True,3,3,1,https://github.com/grizewald,Doc update for current sensor ,2,[],https://github.com/cleanflight/cleanflight/pull/2948,https://github.com/grizewald,1,https://github.com/cleanflight/cleanflight/pull/2948,"The formula for changing the current sensor scale based on consumed and replaced battery power is incorrect. It increases the scale value when it should decrease it and vice versa.
This pull request corrects that.","The formula for changing the current sensor scale based on consumed and replaced battery power is incorrect. It increases the scale value when it should decrease it and vice versa.
This pull request corrects that.",True,{'LAUGH': ['https://github.com/fiveangle']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2948,2017-09-25T20:08:36Z,2017-10-02T23:27:37Z,2017-10-03T14:27:39Z,MERGED,True,3,3,1,https://github.com/grizewald,Doc update for current sensor ,2,[],https://github.com/cleanflight/cleanflight/pull/2948,https://github.com/fiveangle,2,https://github.com/cleanflight/cleanflight/pull/2948#issuecomment-333859523,"The formula for changing the current sensor scale based on consumed and replaced battery power is incorrect. It increases the scale value when it should decrease it and vice versa.
This pull request corrects that.","I thought this was all settled, but you unfixed it again (and missed a spot at line 161 ;)
#2956 for your consideration",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2952,2017-10-02T07:07:06Z,2017-10-02T20:03:49Z,2017-10-02T20:23:53Z,MERGED,True,4,6,3,https://github.com/balrog-kun,Fix Mavlink port sharing with MSP,1,[],https://github.com/cleanflight/cleanflight/pull/2952,https://github.com/balrog-kun,1,https://github.com/cleanflight/cleanflight/pull/2952,"Mavlink shared ports were not being released by MSP on arming.  Rather than add the mavlink bit to TELEMETRY_FUNCTION_MASK in telemetry.c, move that #define to telemetry.h so the same macro can be used in serial.c and telemetry.c (no duplication)
Note, while there, findNextSharedSerialPort could be simplified by storing parameters in findSharedSerialPortState_t instead of passing on each call, not sure if cleanflight has a convention related to this.","Mavlink shared ports were not being released by MSP on arming.  Rather than add the mavlink bit to TELEMETRY_FUNCTION_MASK in telemetry.c, move that #define to telemetry.h so the same macro can be used in serial.c and telemetry.c (no duplication)
Note, while there, findNextSharedSerialPort could be simplified by storing parameters in findSharedSerialPortState_t instead of passing on each call, not sure if cleanflight has a convention related to this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2952,2017-10-02T07:07:06Z,2017-10-02T20:03:49Z,2017-10-02T20:23:53Z,MERGED,True,4,6,3,https://github.com/balrog-kun,Fix Mavlink port sharing with MSP,1,[],https://github.com/cleanflight/cleanflight/pull/2952,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2952#issuecomment-333653840,"Mavlink shared ports were not being released by MSP on arming.  Rather than add the mavlink bit to TELEMETRY_FUNCTION_MASK in telemetry.c, move that #define to telemetry.h so the same macro can be used in serial.c and telemetry.c (no duplication)
Note, while there, findNextSharedSerialPort could be simplified by storing parameters in findSharedSerialPortState_t instead of passing on each call, not sure if cleanflight has a convention related to this.",great thanks!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2953,2017-10-02T09:46:24Z,2017-10-02T10:22:00Z,2017-10-02T10:22:03Z,MERGED,True,806,442,76,https://github.com/hydra,merge recent BF changes,35,[],https://github.com/cleanflight/cleanflight/pull/2953,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2953,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2954,2017-10-02T10:25:43Z,2017-10-02T11:17:45Z,2017-10-02T11:17:45Z,MERGED,True,4,5,1,https://github.com/hydra,CF/BF - De-duplicate OS detection in test Makefile.,1,[],https://github.com/cleanflight/cleanflight/pull/2954,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2954,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2956,2017-10-03T14:18:50Z,2017-10-13T00:56:41Z,2017-10-13T04:16:57Z,MERGED,True,10,10,1,https://github.com/fiveangle,Fix and clarify Virtual Current Sensor docs,2,[],https://github.com/cleanflight/cleanflight/pull/2956,https://github.com/fiveangle,1,https://github.com/cleanflight/cleanflight/pull/2956,"-Fix incorrect formula in example section of Battery Charger method calibration
-Fix incorrect tense from ""mAh draw"" to ""mAh drawn""
-Simplify instruction steps to be more direct and concise
-Replace abstract example calculation values with rounded numbers to make formula translation more obvious
-Make formula placeholder names match those used in Configurator
-Cross fingers that is it so clear now that not even a grandmother would try to change it again ;)","-Fix incorrect formula in example section of Battery Charger method calibration
-Fix incorrect tense from ""mAh draw"" to ""mAh drawn""
-Simplify instruction steps to be more direct and concise
-Replace abstract example calculation values with rounded numbers to make formula translation more obvious
-Make formula placeholder names match those used in Configurator
-Cross fingers that is it so clear now that not even a grandmother would try to change it again ;)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2956,2017-10-03T14:18:50Z,2017-10-13T00:56:41Z,2017-10-13T04:16:57Z,MERGED,True,10,10,1,https://github.com/fiveangle,Fix and clarify Virtual Current Sensor docs,2,[],https://github.com/cleanflight/cleanflight/pull/2956,https://github.com/fiveangle,2,https://github.com/cleanflight/cleanflight/pull/2956#issuecomment-333866551,"-Fix incorrect formula in example section of Battery Charger method calibration
-Fix incorrect tense from ""mAh draw"" to ""mAh drawn""
-Simplify instruction steps to be more direct and concise
-Replace abstract example calculation values with rounded numbers to make formula translation more obvious
-Make formula placeholder names match those used in Configurator
-Cross fingers that is it so clear now that not even a grandmother would try to change it again ;)","For all posterity, I even tested the calculation with BF 3.2 RC6 (which I presume is same as CF in this area):
On 95mm quad with 500mAh 2S and actual calibrated amperage_meter_scale of 145, arbitrarily set amperage_meter_scale to double the correct value (to simulate uncalibrated quad) and performed calibration…
old_amperage_meter_scale (uncalibrated):

Cleanflight_reported_mAh_drawn:

mAh_recharged:

amperage_meter_scale = old_amperage_meter_scale * (mAh_recharged / Cleanflight_reported_current_drawn) =>
amperage_meter_scale = 290 * (499 / 893) =>
amperage_meter_scale = 162

162 - 145 = 17 = just +12% off from actual in one iteration",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2957,2017-10-06T16:09:40Z,2017-10-06T22:37:17Z,2017-10-07T07:26:54Z,CLOSED,False,975740,36195,1830,https://github.com/madoboy,RTH mode,2913,[],https://github.com/cleanflight/cleanflight/pull/2957,https://github.com/madoboy,1,https://github.com/cleanflight/cleanflight/pull/2957,Hi. Can we have option in RTH to when plane comes near to launch point to lower the flying altitude? Like if if is in 200m range to change from 500m to 100m. And also analog airspeed sensor when it's gonna be implemented to maintain planes speed? Now on RTH throttle  is fluctuating.,Hi. Can we have option in RTH to when plane comes near to launch point to lower the flying altitude? Like if if is in 200m range to change from 500m to 100m. And also analog airspeed sensor when it's gonna be implemented to maintain planes speed? Now on RTH throttle  is fluctuating.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2957,2017-10-06T16:09:40Z,2017-10-06T22:37:17Z,2017-10-07T07:26:54Z,CLOSED,False,975740,36195,1830,https://github.com/madoboy,RTH mode,2913,[],https://github.com/cleanflight/cleanflight/pull/2957,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2957#issuecomment-334886177,Hi. Can we have option in RTH to when plane comes near to launch point to lower the flying altitude? Like if if is in 200m range to change from 500m to 100m. And also analog airspeed sensor when it's gonna be implemented to maintain planes speed? Now on RTH throttle  is fluctuating.,"@madoboy: I am assuming that what you wanted to do is open a feature request. What you have done is opening a pull request, with no meaningful changes to actually be pulled in.
In general, if you want advanced navigation features like return to home, you should have a look at iNav: http://inavflight.com/ . Cleanflight and Betaflight's focus is on high performance / racing / acrobatics, not advanced navigation.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2957,2017-10-06T16:09:40Z,2017-10-06T22:37:17Z,2017-10-07T07:26:54Z,CLOSED,False,975740,36195,1830,https://github.com/madoboy,RTH mode,2913,[],https://github.com/cleanflight/cleanflight/pull/2957,https://github.com/madoboy,3,https://github.com/cleanflight/cleanflight/pull/2957#issuecomment-334916399,Hi. Can we have option in RTH to when plane comes near to launch point to lower the flying altitude? Like if if is in 200m range to change from 500m to 100m. And also analog airspeed sensor when it's gonna be implemented to maintain planes speed? Now on RTH throttle  is fluctuating.,"Hi sorry. Something is wrong then in github pull requests tab because it's
sure that i was on INav site then re directed to cleanflight.

2017. okt. 6. 23:37 ezt írta (""Michael Keller"" <notifications@github.com>):
…
 Closed #2957 <#2957>.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#2957 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AcdXH2omaxVDUQpHpPV_UMUmUuZPW84Rks5spqutgaJpZM4PwtO1>
 .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2958,2017-10-09T07:46:03Z,2017-10-09T08:31:41Z,2017-10-09T08:31:41Z,CLOSED,False,6,6,5,https://github.com/IvaAlex,HOTT telemetry fix,6,[],https://github.com/cleanflight/cleanflight/pull/2958,https://github.com/IvaAlex,1,https://github.com/cleanflight/cleanflight/pull/2958,"Hello guys,
I took hott.c file from build 1207 (Build 1207 (24-Apr-2017 10:09:06), and with few changes, the telemetry now works !
hott.OK.txt","Hello guys,
I took hott.c file from build 1207 (Build 1207 (24-Apr-2017 10:09:06), and with few changes, the telemetry now works !
hott.OK.txt",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2958,2017-10-09T07:46:03Z,2017-10-09T08:31:41Z,2017-10-09T08:31:41Z,CLOSED,False,6,6,5,https://github.com/IvaAlex,HOTT telemetry fix,6,[],https://github.com/cleanflight/cleanflight/pull/2958,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2958#issuecomment-335086262,"Hello guys,
I took hott.c file from build 1207 (Build 1207 (24-Apr-2017 10:09:06), and with few changes, the telemetry now works !
hott.OK.txt","Maybe your base is BetaFligth and not CleanFlight? If that's true, then your PR has been made to the incorrect respository ;)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2958,2017-10-09T07:46:03Z,2017-10-09T08:31:41Z,2017-10-09T08:31:41Z,CLOSED,False,6,6,5,https://github.com/IvaAlex,HOTT telemetry fix,6,[],https://github.com/cleanflight/cleanflight/pull/2958,https://github.com/McGiverGim,3,https://github.com/cleanflight/cleanflight/pull/2958#issuecomment-335086522,"Hello guys,
I took hott.c file from build 1207 (Build 1207 (24-Apr-2017 10:09:06), and with few changes, the telemetry now works !
hott.OK.txt","Seeing again your message, it seems an ""issue"" with attached file, not a PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2958,2017-10-09T07:46:03Z,2017-10-09T08:31:41Z,2017-10-09T08:31:41Z,CLOSED,False,6,6,5,https://github.com/IvaAlex,HOTT telemetry fix,6,[],https://github.com/cleanflight/cleanflight/pull/2958,https://github.com/IvaAlex,4,https://github.com/cleanflight/cleanflight/pull/2958#issuecomment-335088006,"Hello guys,
I took hott.c file from build 1207 (Build 1207 (24-Apr-2017 10:09:06), and with few changes, the telemetry now works !
hott.OK.txt","hmm, i think i selected something wrong, i wanted to post the fix for Graupner HOTT Telemetry in betaflight 3.2.0....",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2959,2017-10-10T10:00:53Z,2017-10-10T10:01:22Z,2017-10-10T10:01:22Z,CLOSED,False,898,896,76,https://github.com/IvaAlex,HOTT telemetry fix,51,[],https://github.com/cleanflight/cleanflight/pull/2959,https://github.com/IvaAlex,1,https://github.com/cleanflight/cleanflight/pull/2959,"attached is the modified hott.c file for Graupner HOTT Telemetry
hott.txt","attached is the modified hott.c file for Graupner HOTT Telemetry
hott.txt",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2961,2017-10-11T19:41:34Z,2017-10-11T19:41:49Z,2017-10-12T19:43:31Z,MERGED,True,2,2,1,https://github.com/4712,Add GD32F350x6 support,1,[],https://github.com/cleanflight/cleanflight/pull/2961,https://github.com/4712,1,https://github.com/cleanflight/cleanflight/pull/2961,updated 4way-if version number to indicate latest changes,updated 4way-if version number to indicate latest changes,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2961,2017-10-11T19:41:34Z,2017-10-11T19:41:49Z,2017-10-12T19:43:31Z,MERGED,True,2,2,1,https://github.com/4712,Add GD32F350x6 support,1,[],https://github.com/cleanflight/cleanflight/pull/2961,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2961#issuecomment-335943152,updated 4way-if version number to indicate latest changes,"This will create a merge conflict when changes from Betaflight are merged into cleanflight. Can you please open pull requests either for Betaflight, or cleanflight, but not for both (for the same change)?
If something needs to be in Betaflight and cleanflight, it's easy to cherry-pick the changeset across once the PR has been merged on one side.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2961,2017-10-11T19:41:34Z,2017-10-11T19:41:49Z,2017-10-12T19:43:31Z,MERGED,True,2,2,1,https://github.com/4712,Add GD32F350x6 support,1,[],https://github.com/cleanflight/cleanflight/pull/2961,https://github.com/4712,3,https://github.com/cleanflight/cleanflight/pull/2961#issuecomment-335945276,updated 4way-if version number to indicate latest changes,"Ahh.. I have so far troublesome set up 2 different repositories. One for BF one for CF with two accounts.
Need to learn more git details...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2961,2017-10-11T19:41:34Z,2017-10-11T19:41:49Z,2017-10-12T19:43:31Z,MERGED,True,2,2,1,https://github.com/4712,Add GD32F350x6 support,1,[],https://github.com/cleanflight/cleanflight/pull/2961,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/2961#issuecomment-335953106,updated 4way-if version number to indicate latest changes,"No problem, we all live to learn. ;-)
See betaflight/betaflight#4343.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2961,2017-10-11T19:41:34Z,2017-10-11T19:41:49Z,2017-10-12T19:43:31Z,MERGED,True,2,2,1,https://github.com/4712,Add GD32F350x6 support,1,[],https://github.com/cleanflight/cleanflight/pull/2961,https://github.com/4712,5,https://github.com/cleanflight/cleanflight/pull/2961#issuecomment-336244921,updated 4way-if version number to indicate latest changes,Thanks a lot!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2962,2017-10-13T19:59:53Z,2017-10-13T22:42:42Z,2017-10-13T22:42:42Z,CLOSED,False,2679,1388,121,https://github.com/grhookgr,option to set maximum throttle for recover (anti turtle mode) ,108,[],https://github.com/cleanflight/cleanflight/pull/2962,https://github.com/grhookgr,1,https://github.com/cleanflight/cleanflight/pull/2962,"sometimes we push the stick too much making the copter to recover way to much, = roll 360
so it will be nice if we may limit the maximum throttle of anti-turtle.","sometimes we push the stick too much making the copter to recover way to much, = roll 360
so it will be nice if we may limit the maximum throttle of anti-turtle.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2962,2017-10-13T19:59:53Z,2017-10-13T22:42:42Z,2017-10-13T22:42:42Z,CLOSED,False,2679,1388,121,https://github.com/grhookgr,option to set maximum throttle for recover (anti turtle mode) ,108,[],https://github.com/cleanflight/cleanflight/pull/2962,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2962#issuecomment-336575834,"sometimes we push the stick too much making the copter to recover way to much, = roll 360
so it will be nice if we may limit the maximum throttle of anti-turtle.","@grhookgr: I think what you tried to do is open an issue with a feature request. You can do this here: https://github.com/cleanflight/cleanflight/issues What you have done is open a pull request, with no changes to be pulled. Please close this.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2965,2017-10-17T23:57:08Z,2017-10-18T07:27:11Z,2017-10-18T07:27:19Z,MERGED,True,3935,2314,153,https://github.com/hydra,merge recent bf changes,140,[],https://github.com/cleanflight/cleanflight/pull/2965,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2965,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2967,2017-10-21T12:32:40Z,2017-10-21T13:19:23Z,2017-10-21T13:19:23Z,MERGED,True,4,0,2,https://github.com/hydra,CF/BF - Add BMP085/BMP280 baro support to REVO targets.,1,['Low priority'],https://github.com/cleanflight/cleanflight/pull/2967,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2967,From #2871,From #2871,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2968,2017-10-25T10:44:37Z,2017-10-26T10:34:01Z,2017-10-27T11:15:51Z,CLOSED,False,694,104,10,https://github.com/hali9,IBUS new sensors,49,[],https://github.com/cleanflight/cleanflight/pull/2968,https://github.com/hali9,1,https://github.com/cleanflight/cleanflight/pull/2968,This is PR for #2833,This is PR for #2833,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2968,2017-10-25T10:44:37Z,2017-10-26T10:34:01Z,2017-10-27T11:15:51Z,CLOSED,False,694,104,10,https://github.com/hali9,IBUS new sensors,49,[],https://github.com/cleanflight/cleanflight/pull/2968,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2968#issuecomment-339318548,This is PR for #2833,"Also, when you are rebasing / squashing, can you please change the commit message to one that is indicative of what is changed in the changeset?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2968,2017-10-25T10:44:37Z,2017-10-26T10:34:01Z,2017-10-27T11:15:51Z,CLOSED,False,694,104,10,https://github.com/hali9,IBUS new sensors,49,[],https://github.com/cleanflight/cleanflight/pull/2968,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2968#issuecomment-339434417,This is PR for #2833,"@hali9: Thanks for your amendments, it looks a lot better now. See my comment on how to make the configuration more user friendly.
Also, your changes break some tests, run make test and fix the errors that this produces please.
Finally, to rebase / squash the commits in your branch / pull request into one with git on the command line you proceed as follows:

in your branch, do a git rebase -i master;
in the editor that opens, select pick for the first of your commits, squash for the rest of your commits, save & close;
push your changes with `git push --force-with-lease;
done. :-)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2968,2017-10-25T10:44:37Z,2017-10-26T10:34:01Z,2017-10-27T11:15:51Z,CLOSED,False,694,104,10,https://github.com/hali9,IBUS new sensors,49,[],https://github.com/cleanflight/cleanflight/pull/2968,https://github.com/hydra,4,https://github.com/cleanflight/cleanflight/pull/2968#issuecomment-339617889,This is PR for #2833,can you please fix the unit tests as they are causing the travis builds to fail.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2968,2017-10-25T10:44:37Z,2017-10-26T10:34:01Z,2017-10-27T11:15:51Z,CLOSED,False,694,104,10,https://github.com/hali9,IBUS new sensors,49,[],https://github.com/cleanflight/cleanflight/pull/2968,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/2968#issuecomment-339623792,This is PR for #2833,"@hali9 please be aware that each time you add a commit to a PR branch a new travis build is started.  you can see them all here:
https://travis-ci.org/cleanflight/cleanflight/pull_requests
this is causing unnecessary noise in the build server logs and prevents other builds from running.  I had to cancel quite a few builds for this PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2968,2017-10-25T10:44:37Z,2017-10-26T10:34:01Z,2017-10-27T11:15:51Z,CLOSED,False,694,104,10,https://github.com/hali9,IBUS new sensors,49,[],https://github.com/cleanflight/cleanflight/pull/2968,https://github.com/mikeller,6,https://github.com/cleanflight/cleanflight/pull/2968#issuecomment-339639494,This is PR for #2833,"@hali9: This is starting to look good now. Now what's left is to fix the tests, and to rebase / squash into one commit.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2968,2017-10-25T10:44:37Z,2017-10-26T10:34:01Z,2017-10-27T11:15:51Z,CLOSED,False,694,104,10,https://github.com/hali9,IBUS new sensors,49,[],https://github.com/cleanflight/cleanflight/pull/2968,https://github.com/McGiverGim,7,https://github.com/cleanflight/cleanflight/pull/2968#issuecomment-339926427,This is PR for #2833,@hali9 I don't know if you closed this by error. I was very interested in this PR. Are you going to reopen it again?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2968,2017-10-25T10:44:37Z,2017-10-26T10:34:01Z,2017-10-27T11:15:51Z,CLOSED,False,694,104,10,https://github.com/hali9,IBUS new sensors,49,[],https://github.com/cleanflight/cleanflight/pull/2968,https://github.com/hali9,8,https://github.com/cleanflight/cleanflight/pull/2968#issuecomment-339943935,This is PR for #2833,@McGiverGim Rebased in #2973,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2969,2017-10-25T18:11:59Z,2017-10-26T18:24:23Z,2017-10-26T18:24:23Z,CLOSED,False,976050,36470,1830,https://github.com/jaymal66,Revised version of smartport.c for flight modes states,2916,[],https://github.com/cleanflight/cleanflight/pull/2969,https://github.com/jaymal66,1,https://github.com/cleanflight/cleanflight/pull/2969,modifications in this version are restrict to  tmp1 previous changes  to tmp2 have been restored so as not to lose the focus,modifications in this version are restrict to  tmp1 previous changes  to tmp2 have been restored so as not to lose the focus,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2969,2017-10-25T18:11:59Z,2017-10-26T18:24:23Z,2017-10-26T18:24:23Z,CLOSED,False,976050,36470,1830,https://github.com/jaymal66,Revised version of smartport.c for flight modes states,2916,[],https://github.com/cleanflight/cleanflight/pull/2969,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2969#issuecomment-339423666,modifications in this version are restrict to  tmp1 previous changes  to tmp2 have been restored so as not to lose the focus,"@jaymal66: Looks like something went wrong with your pull request, it includes > 250 changesets that are not yours. Also, your changeset tries to replace the entire smartport.c file, instead of just applying changes:
fd27b86
Can you please fix this?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2969,2017-10-25T18:11:59Z,2017-10-26T18:24:23Z,2017-10-26T18:24:23Z,CLOSED,False,976050,36470,1830,https://github.com/jaymal66,Revised version of smartport.c for flight modes states,2916,[],https://github.com/cleanflight/cleanflight/pull/2969,https://github.com/jaymal66,3,https://github.com/cleanflight/cleanflight/pull/2969#issuecomment-339755596,modifications in this version are restrict to  tmp1 previous changes  to tmp2 have been restored so as not to lose the focus,"#mikeller
The PR was indeed  wrongly submitted   to your repository .
Sorry for that .I've cancelled it",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2970,2017-10-25T23:04:32Z,2017-10-25T23:17:01Z,2017-10-26T01:15:53Z,CLOSED,False,975741,36196,1830,https://github.com/jaymal66,SmartPort flight mode monitoring changes by @jaymal66 2394,2915,[],https://github.com/cleanflight/cleanflight/pull/2970,https://github.com/jaymal66,1,https://github.com/cleanflight/cleanflight/pull/2970,"Revised new
smartport.c version","Revised new
smartport.c version",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2970,2017-10-25T23:04:32Z,2017-10-25T23:17:01Z,2017-10-26T01:15:53Z,CLOSED,False,975741,36196,1830,https://github.com/jaymal66,SmartPort flight mode monitoring changes by @jaymal66 2394,2915,[],https://github.com/cleanflight/cleanflight/pull/2970,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2970#issuecomment-339502653,"Revised new
smartport.c version","@jaymal66:

jaymal66  wants to merge 2,915 commits into cleanflight:master from iNavFlight:master

No, this won't work. If you want to make a change in iNav, open a pull request for iNav. Also, please fix #2969 before you open more pull requests.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2970,2017-10-25T23:04:32Z,2017-10-25T23:17:01Z,2017-10-26T01:15:53Z,CLOSED,False,975741,36196,1830,https://github.com/jaymal66,SmartPort flight mode monitoring changes by @jaymal66 2394,2915,[],https://github.com/cleanflight/cleanflight/pull/2970,https://github.com/jaymal66,3,https://github.com/cleanflight/cleanflight/pull/2970#issuecomment-339520575,"Revised new
smartport.c version","yes i realized immediately  that something was going south   and cancelled the PR  , something which
obviously   also went wrong
so yes it's my bad and I'm  sorry for the inconvenience caused",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2971,2017-10-26T09:27:45Z,2017-10-26T13:54:26Z,2017-10-26T13:54:26Z,MERGED,True,4644,902,81,https://github.com/hydra,merge recent Betaflight changes,59,[],https://github.com/cleanflight/cleanflight/pull/2971,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/2971,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2973,2017-10-27T11:13:30Z,2018-01-23T19:04:11Z,2018-01-23T19:04:11Z,CLOSED,False,587,85,10,https://github.com/hali9,IBUS new sensor 2,7,[],https://github.com/cleanflight/cleanflight/pull/2973,https://github.com/hali9,1,https://github.com/cleanflight/cleanflight/pull/2973,This is PR for #2833 (second try).,This is PR for #2833 (second try).,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2973,2017-10-27T11:13:30Z,2018-01-23T19:04:11Z,2018-01-23T19:04:11Z,CLOSED,False,587,85,10,https://github.com/hali9,IBUS new sensor 2,7,[],https://github.com/cleanflight/cleanflight/pull/2973,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2973#issuecomment-340039608,This is PR for #2833 (second try).,"Please, don't make a push every time that you make a commit. Work only with your local repo.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2973,2017-10-27T11:13:30Z,2018-01-23T19:04:11Z,2018-01-23T19:04:11Z,CLOSED,False,587,85,10,https://github.com/hali9,IBUS new sensor 2,7,[],https://github.com/cleanflight/cleanflight/pull/2973,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/2973#issuecomment-340132894,This is PR for #2833 (second try).,"@hali9: Why did you close your first pull request, instead of just fixing it like you were instructed?
This needs some more fixes:

tests are still failing;
some F3 targets are overflowing I suggest you move https://github.com/cleanflight/cleanflight/blob/master/src/main/target/common_fc_pre.h#L111 to below https://github.com/cleanflight/cleanflight/blob/master/src/main/target/common_fc_pre.h#L141

(Also, please remove the other occurrences of #define TELEMETRY_IBUS in this file.)
Once this is done and all tests pass, please rebase and squash the commits into one.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2973,2017-10-27T11:13:30Z,2018-01-23T19:04:11Z,2018-01-23T19:04:11Z,CLOSED,False,587,85,10,https://github.com/hali9,IBUS new sensor 2,7,[],https://github.com/cleanflight/cleanflight/pull/2973,https://github.com/McGiverGim,4,https://github.com/cleanflight/cleanflight/pull/2973#issuecomment-354420817,This is PR for #2833 (second try).,@hali9 Some news about this PR? I'm very interested in.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2973,2017-10-27T11:13:30Z,2018-01-23T19:04:11Z,2018-01-23T19:04:11Z,CLOSED,False,587,85,10,https://github.com/hali9,IBUS new sensor 2,7,[],https://github.com/cleanflight/cleanflight/pull/2973,https://github.com/qba667,5,https://github.com/cleanflight/cleanflight/pull/2973#issuecomment-358244304,This is PR for #2833 (second try).,Improved version introduced in #3000,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2973,2017-10-27T11:13:30Z,2018-01-23T19:04:11Z,2018-01-23T19:04:11Z,CLOSED,False,587,85,10,https://github.com/hali9,IBUS new sensor 2,7,[],https://github.com/cleanflight/cleanflight/pull/2973,https://github.com/mikeller,6,https://github.com/cleanflight/cleanflight/pull/2973#issuecomment-359764102,This is PR for #2833 (second try).,"@qba667: I think this has been superseded by betaflight/betaflight#4978? If so, can you close please?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2973,2017-10-27T11:13:30Z,2018-01-23T19:04:11Z,2018-01-23T19:04:11Z,CLOSED,False,587,85,10,https://github.com/hali9,IBUS new sensor 2,7,[],https://github.com/cleanflight/cleanflight/pull/2973,https://github.com/qba667,7,https://github.com/cleanflight/cleanflight/pull/2973#issuecomment-359873942,This is PR for #2833 (second try).,"@mikeller this PR should closed because it implements same functionality - please see
#3000
But this is not my PR so I am not able to close it.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2976,2017-10-29T22:56:49Z,2018-01-23T11:36:48Z,2018-01-23T11:36:48Z,MERGED,True,272,8,2,https://github.com/Lecostarius,Leco doc update2,3,['Documentation'],https://github.com/cleanflight/cleanflight/pull/2976,https://github.com/Lecostarius,1,https://github.com/cleanflight/cleanflight/pull/2976,"Updates to the documentation (Building in Ubuntu.md, and USB flashing.md).
Building in Ubuntu was very outdated. USB flashing did not explain the underlying concepts enough
so a section containing some background information for troubleshooting was added.","Updates to the documentation (Building in Ubuntu.md, and USB flashing.md).
Building in Ubuntu was very outdated. USB flashing did not explain the underlying concepts enough
so a section containing some background information for troubleshooting was added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2977,2017-10-30T11:56:32Z,2017-11-03T17:39:21Z,2017-11-04T02:17:35Z,MERGED,True,1,1,1,https://github.com/mikeller,From Betaflight: Added missing 'MSP' entry to current meter source list for CLI.,1,[],https://github.com/cleanflight/cleanflight/pull/2977,https://github.com/mikeller,1,https://github.com/cleanflight/cleanflight/pull/2977,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2978,2017-11-01T14:56:41Z,2017-11-03T17:42:21Z,2017-11-04T02:17:42Z,MERGED,True,11,12,2,https://github.com/mikeller,From Betaflight: fix Segmentation fault in SITL (maybe other without define USE_OSD_SLAVE),1,[],https://github.com/cleanflight/cleanflight/pull/2978,https://github.com/mikeller,1,https://github.com/cleanflight/cleanflight/pull/2978,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2980,2017-11-08T11:05:10Z,2017-11-08T13:36:46Z,2017-11-08T13:37:08Z,CLOSED,False,5046,3626,354,https://github.com/Dave50W,3D is now super hard to arm,89,[],https://github.com/cleanflight/cleanflight/pull/2980,https://github.com/Dave50W,1,https://github.com/cleanflight/cleanflight/pull/2980,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2980,2017-11-08T11:05:10Z,2017-11-08T13:36:46Z,2017-11-08T13:37:08Z,CLOSED,False,5046,3626,354,https://github.com/Dave50W,3D is now super hard to arm,89,[],https://github.com/cleanflight/cleanflight/pull/2980,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2980#issuecomment-342809840,,"@Dave50W: From what this looks like, what you wanted to do was to open a feature request. What you have done is opening a pull request, with no relevant changes to actually be pulled. Can you please close this, and open a feature request under 'Issues'?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2980,2017-11-08T11:05:10Z,2017-11-08T13:36:46Z,2017-11-08T13:37:08Z,CLOSED,False,5046,3626,354,https://github.com/Dave50W,3D is now super hard to arm,89,[],https://github.com/cleanflight/cleanflight/pull/2980,https://github.com/Dave50W,3,https://github.com/cleanflight/cleanflight/pull/2980#issuecomment-342811993,,"No worries my first request not sure how to go about it

Thanks

Dave
…
 On 8 Nov 2017, at 10:57 pm, Michael Keller ***@***.***> wrote:

 @Dave50W: From what this looks like, what you wanted to do was to open a feature request. What you have done is opening a pull request, with no relevant changes to actually be pulled. Can you please close this, and open a feature request under 'Issues'?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2982,2017-11-19T18:00:47Z,2017-11-19T18:02:57Z,2017-11-19T18:32:35Z,CLOSED,False,7525,5062,403,https://github.com/AirBreak69,GPS altitude/course instead of baro/mag in OSD,203,[],https://github.com/cleanflight/cleanflight/pull/2982,https://github.com/AirBreak69,1,https://github.com/cleanflight/cleanflight/pull/2982,"Sorry, i misplaced this PR. Should be in betaflight...
This PR is for those who like to have altitude/course via GPS information in OSD without having baro and mag.
Features (osd.c):

If baro and mag aren't actually used, but GPS is running, the OSD can display corresponding data from the GPS receiver.
Absolute GPS altitude in [0.1m] instead of baro driven relative altitude.
GPS heading from trajectory instead of mag direction in compass bar.
Direction to home from GPS course over ground vs. home position.

Features (gps.c):

Adding an optional Airborne 2G setting as a compromise between the 4G (fast, less stable) and 1G (slow, stable) for custom builds.
Adding ublox command to disable BeidDou and enable European Galileo satellites. This works on ublox M8M and M8N receivers.
Note: Most of the chineese ""M8N""s are faked M8Ms without flash memory which cannot be permanently configured to Galileo reception. So this reconfiguration has to be done on each power up.
Result: Up to 26(!) satellites on free field are used after 15+ minutes of operation (including short power losses on LiPo change).
GPS altitude is delivered with 0.1m (the native receiver) resolution. Note: The actual precision and stability is much worse (but why to cut the information?).

To be reviewed:

Does the scaling change of the GPS altitude harm the navigation? My experience is that the ""GPS Hold"" and ""Return to Home"" functions do not work properly anymore. Strange things happen if you activate them during flight (fast drifts, dive towards ground). So I think no one uses them anymore (or have switched to INAV).
GPS PIDs have some influence but i couldn't find a working set - even without my changes.
Does ""enabling Galileo"" harm old ublox 6 or 5 generation receivers? I don't think so as unknown commands are ignored by the receiver.","Sorry, i misplaced this PR. Should be in betaflight...
This PR is for those who like to have altitude/course via GPS information in OSD without having baro and mag.
Features (osd.c):

If baro and mag aren't actually used, but GPS is running, the OSD can display corresponding data from the GPS receiver.
Absolute GPS altitude in [0.1m] instead of baro driven relative altitude.
GPS heading from trajectory instead of mag direction in compass bar.
Direction to home from GPS course over ground vs. home position.

Features (gps.c):

Adding an optional Airborne 2G setting as a compromise between the 4G (fast, less stable) and 1G (slow, stable) for custom builds.
Adding ublox command to disable BeidDou and enable European Galileo satellites. This works on ublox M8M and M8N receivers.
Note: Most of the chineese ""M8N""s are faked M8Ms without flash memory which cannot be permanently configured to Galileo reception. So this reconfiguration has to be done on each power up.
Result: Up to 26(!) satellites on free field are used after 15+ minutes of operation (including short power losses on LiPo change).
GPS altitude is delivered with 0.1m (the native receiver) resolution. Note: The actual precision and stability is much worse (but why to cut the information?).

To be reviewed:

Does the scaling change of the GPS altitude harm the navigation? My experience is that the ""GPS Hold"" and ""Return to Home"" functions do not work properly anymore. Strange things happen if you activate them during flight (fast drifts, dive towards ground). So I think no one uses them anymore (or have switched to INAV).
GPS PIDs have some influence but i couldn't find a working set - even without my changes.
Does ""enabling Galileo"" harm old ublox 6 or 5 generation receivers? I don't think so as unknown commands are ignored by the receiver.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2983,2017-11-27T01:25:37Z,2017-11-27T06:02:04Z,2017-11-27T06:02:04Z,CLOSED,False,399,17,17,https://github.com/Vincent-VG,Osd slave msp current meter,3,[],https://github.com/cleanflight/cleanflight/pull/2983,https://github.com/Vincent-VG,1,https://github.com/cleanflight/cleanflight/pull/2983,"Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).","Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2983,2017-11-27T01:25:37Z,2017-11-27T06:02:04Z,2017-11-27T06:02:04Z,CLOSED,False,399,17,17,https://github.com/Vincent-VG,Osd slave msp current meter,3,[],https://github.com/cleanflight/cleanflight/pull/2983,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2983#issuecomment-347086790,"Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).","@Vincent-VG: From what this looks like, what you wanted to do was to open a feature request. What you have done is opening a pull request, with no relevant changes to actually be pulled. Can you please close this, and open a feature request under 'Issues'?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2985,2017-12-07T08:29:31Z,2017-12-07T08:59:32Z,2017-12-07T08:59:32Z,CLOSED,False,3588549,50427,4541,https://github.com/Christiangrau,Add BETAFLIGHTF4 target support,3362,[],https://github.com/cleanflight/cleanflight/pull/2985,https://github.com/Christiangrau,1,https://github.com/cleanflight/cleanflight/pull/2985,Wrong section sorry..,Wrong section sorry..,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2985,2017-12-07T08:29:31Z,2017-12-07T08:59:32Z,2017-12-07T08:59:32Z,CLOSED,False,3588549,50427,4541,https://github.com/Christiangrau,Add BETAFLIGHTF4 target support,3362,[],https://github.com/cleanflight/cleanflight/pull/2985,https://github.com/McGiverGim,2,https://github.com/cleanflight/cleanflight/pull/2985#issuecomment-349899485,Wrong section sorry..,"@Christiangrau I think this Pull Request is wrong, you have made it to Cleanflight and not to iNav.
Please close it and open again in iNav project if this is what you wanted to do. But I'm pretty sure that you want to open an issue (with a feature request) and not a pull request.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2987,2017-12-14T21:10:29Z,2017-12-15T22:57:36Z,2017-12-15T22:57:36Z,CLOSED,False,10741,6865,678,https://github.com/moiakaefer,Need help in creating Addon for FPV Lasertag on Planes & Betaflight,326,[],https://github.com/cleanflight/cleanflight/pull/2987,https://github.com/moiakaefer,1,https://github.com/cleanflight/cleanflight/pull/2987,"Hi guys,
thank you for developing betaflight. It's just awesome to use it with my racecopters.
As there are fixed wing models available in BF setup, I thought about adding a FC to a fixed wing for stabilization. During the last week, I've heard about ""dogfights"" with lasertag systems on rc planes in a video by FliteTest and thought about better solutions. In their edition, after being hit the motor shut off for some seconds. They used FPV, but without any information about the lasertag (ammo, live points etc) Nice would be if it could be integrated into a FC (to make it easier and save weight for extra controllers). Displaying hits, ammo left and live points in the OSD would be awesome.
Furthermore, you could switch off (after being hit) not only the motor but randomly any servo of the plane for some seconds and even integrate a safety switch to prevent crashes into the ground (to prevent endangering people nearby) but for that loosing live points.
Unfortunately, I haven't got enough programming skills (just some basic knowledge in Java and Arduino programming).
Could you please help me?
Thanks, moiakaefer","Hi guys,
thank you for developing betaflight. It's just awesome to use it with my racecopters.
As there are fixed wing models available in BF setup, I thought about adding a FC to a fixed wing for stabilization. During the last week, I've heard about ""dogfights"" with lasertag systems on rc planes in a video by FliteTest and thought about better solutions. In their edition, after being hit the motor shut off for some seconds. They used FPV, but without any information about the lasertag (ammo, live points etc) Nice would be if it could be integrated into a FC (to make it easier and save weight for extra controllers). Displaying hits, ammo left and live points in the OSD would be awesome.
Furthermore, you could switch off (after being hit) not only the motor but randomly any servo of the plane for some seconds and even integrate a safety switch to prevent crashes into the ground (to prevent endangering people nearby) but for that loosing live points.
Unfortunately, I haven't got enough programming skills (just some basic knowledge in Java and Arduino programming).
Could you please help me?
Thanks, moiakaefer",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2987,2017-12-14T21:10:29Z,2017-12-15T22:57:36Z,2017-12-15T22:57:36Z,CLOSED,False,10741,6865,678,https://github.com/moiakaefer,Need help in creating Addon for FPV Lasertag on Planes & Betaflight,326,[],https://github.com/cleanflight/cleanflight/pull/2987,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2987#issuecomment-351905342,"Hi guys,
thank you for developing betaflight. It's just awesome to use it with my racecopters.
As there are fixed wing models available in BF setup, I thought about adding a FC to a fixed wing for stabilization. During the last week, I've heard about ""dogfights"" with lasertag systems on rc planes in a video by FliteTest and thought about better solutions. In their edition, after being hit the motor shut off for some seconds. They used FPV, but without any information about the lasertag (ammo, live points etc) Nice would be if it could be integrated into a FC (to make it easier and save weight for extra controllers). Displaying hits, ammo left and live points in the OSD would be awesome.
Furthermore, you could switch off (after being hit) not only the motor but randomly any servo of the plane for some seconds and even integrate a safety switch to prevent crashes into the ground (to prevent endangering people nearby) but for that loosing live points.
Unfortunately, I haven't got enough programming skills (just some basic knowledge in Java and Arduino programming).
Could you please help me?
Thanks, moiakaefer","@moiakaefer: This looks like what you are trying to do is adding a feature request. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.
Please close this.
To open a feature request, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions and making a case for the feature you would like to have added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2989,2017-12-16T00:17:32Z,2017-12-17T18:40:08Z,2017-12-17T18:40:08Z,CLOSED,False,11365,6970,706,https://github.com/Kai-ber,:close,336,[],https://github.com/cleanflight/cleanflight/pull/2989,https://github.com/Kai-ber,1,https://github.com/cleanflight/cleanflight/pull/2989,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2989,2017-12-16T00:17:32Z,2017-12-17T18:40:08Z,2017-12-17T18:40:08Z,CLOSED,False,11365,6970,706,https://github.com/Kai-ber,:close,336,[],https://github.com/cleanflight/cleanflight/pull/2989,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2989#issuecomment-352226280,,"@Kai-ber: From what this looks like, what you wanted to do was to open a feature request. What you have done is opening a pull request, with no relevant changes to actually be pulled. Can you please close this, and open a feature request under 'Issues'?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2991,2017-12-21T14:47:44Z,2017-12-21T15:18:49Z,2017-12-21T15:19:04Z,CLOSED,False,13183,7946,766,https://github.com/wx4cb,Change OSD to show gps alt and less lat/long precision in OSD,366,[],https://github.com/cleanflight/cleanflight/pull/2991,https://github.com/wx4cb,1,https://github.com/cleanflight/cleanflight/pull/2991,opened in error,opened in error,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2994,2018-01-03T11:59:22Z,2018-01-05T22:40:32Z,2018-01-05T22:40:32Z,CLOSED,False,134851,9547,663,https://github.com/petrik8866,Gps,1080,[],https://github.com/cleanflight/cleanflight/pull/2994,https://github.com/petrik8866,1,https://github.com/cleanflight/cleanflight/pull/2994,"Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).","Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2994,2018-01-03T11:59:22Z,2018-01-05T22:40:32Z,2018-01-05T22:40:32Z,CLOSED,False,134851,9547,663,https://github.com/petrik8866,Gps,1080,[],https://github.com/cleanflight/cleanflight/pull/2994,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/2994#issuecomment-355685111,"Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).","invalid pr, probably rasied against the wrong project, closing,",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2996,2018-01-07T13:08:55Z,2018-01-07T13:26:07Z,2018-01-07T13:26:07Z,CLOSED,False,3588549,50427,4541,https://github.com/lossUAVes,d,3362,[],https://github.com/cleanflight/cleanflight/pull/2996,https://github.com/lossUAVes,1,https://github.com/cleanflight/cleanflight/pull/2996,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2999,2018-01-09T21:25:26Z,2018-01-10T20:44:36Z,2018-01-10T20:44:36Z,CLOSED,False,30545,9320,990,https://github.com/JesseDFBlue,Prevent a possible division by zero from setpoint transition.,536,[],https://github.com/cleanflight/cleanflight/pull/2999,https://github.com/JesseDFBlue,1,https://github.com/cleanflight/cleanflight/pull/2999,"Please change the range for pidProfile->setpointRelaxRatio to [1, 100] to prevent a division by zero.","Please change the range for pidProfile->setpointRelaxRatio to [1, 100] to prevent a division by zero.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,2999,2018-01-09T21:25:26Z,2018-01-10T20:44:36Z,2018-01-10T20:44:36Z,CLOSED,False,30545,9320,990,https://github.com/JesseDFBlue,Prevent a possible division by zero from setpoint transition.,536,[],https://github.com/cleanflight/cleanflight/pull/2999,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/2999#issuecomment-356426528,"Please change the range for pidProfile->setpointRelaxRatio to [1, 100] to prevent a division by zero.","@JesseDFBlue: Looks like you opened this pull request for a merge from the cleanflight repository into the Betaflight repository. This won't work. Please close this and open a pull request from the branch (on your fork of Betaflight) that contains your fix, into master in Betaflight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/qba667,1,https://github.com/cleanflight/cleanflight/pull/3000,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833","Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/unitware,2,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-357753251,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833","Looks good, but I'd wait with the merge until some or all features has been implemented - to avoid merging changes that needs change later on that does not add test coverage or features.
Kudos for working with the tests!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/qba667,3,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-357753856,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833","@unitware but it must be merged before I create next pull request, because it will be rejected by Travis check automatically - because of failing tests. Is it correct?
I have seen first issue - missing reference to flysky_sensors. It is already part of my other change. I will update the current PR.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/unitware,4,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-357754931,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833","You can continue to work in this pull request, or create a branch from your PR branch and do a new PR from that.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/qba667,5,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-357774459,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833",It looks that there is no more space on some targets. Should I exclude them by name?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/qba667,6,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-358223513,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833","@mikeller
The only target where new implementation doesn't fit is SPRACINGF3NEO - I have undefined TELEMETRY_IBUS for this target.
I have limited number of sensors depending on preprocessor directives. So different targets are getting different sets of telemetry.
That is the common set:
IBUS_SENSOR_TYPE_EXTERNAL_VOLTAGE
IBUS_SENSOR_TYPE_TEMPERATURE
IBUS_SENSOR_TYPE_RPM_FLYSKY
IBUS_SENSOR_TYPE_FUEL
IBUS_SENSOR_TYPE_RPM
 IBUS_SENSOR_TYPE_FLIGHT_MODE
 IBUS_SENSOR_TYPE_CELL
IBUS_SENSOR_TYPE_BAT_CURR
BUS_SENSOR_TYPE_ACC_X
IBUS_SENSOR_TYPE_ACC_Y
IBUS_SENSOR_TYPE_ACC_Z
IBUS_SENSOR_TYPE_ROLL
IBUS_SENSOR_TYPE_PITCH
IBUS_SENSOR_TYPE_YAW
IBUS_SENSOR_TYPE_ARMED

Selected sensors can be configured using CLI by setting array ""ibus_sensor""
If sensor id assigned to this array equals 255 it means sensor is not configured. First occurrence of 255 is preventing further sensors usage.
Initialization of sensors array (default values) is not preset - saving flash was the target here.
In telemetry handling I am using predefined buffer - instead of stack allocation on every IBUS frame.
There is few combined sensors defined like:
IBUS_SENSOR_TYPE_GPS_FULL
IBUS_SENSOR_TYPE_VOLT_FULL
IBUS_SENSOR_TYPE_ACC_FULL
After updating receiver with modified firmware we can push up to 28 bytes in single IBUS frame - the hack allows usage of more than 15 sensors.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/mikeller,7,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-358247126,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833","If sensor id assigned to this array equals 255 it means sensor is not configured. First occurrence of 255 is preventing further sensors usage.

The more common way to do this in this project would be to use 0 to indicate 'not configured'. Is there a reason to not use 0 for this.
Also note that without explicitly resetting the array to a value, it will be initialised to all zeros on a configuration reset.
One more thing: In most cases, new functionality gets first added into Betaflight (which has an upcoming release on 01/03, with the feature freeze starting 01/02), and then cherry-picked into cleanflight when it's stable enough. I think the faster way to get this to users will be to open a pull request for these changes against Betaflight, and get it in there, and wait for it to be cherry-picked into cleanflight.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/qba667,8,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-358425357,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833","@mikeller
I have reconsidered using 0 value as disabled value for the sensor.  Value 255 is used in all transmitters as not defined sensor and value 0 is used for internal voltage. Because we are not allowed to send out internal voltage initialization with 0s is absolutely fine.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/mikeller,9,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-358495655,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833",My comments for this review are in betaflight/betaflight#4978.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3000,2018-01-15T17:47:04Z,2018-01-23T11:36:13Z,2018-01-23T11:36:13Z,CLOSED,False,509,62,9,https://github.com/qba667,IBUS telemetry tests improved - added stubs for future telemetry implementation,15,['Work in progress'],https://github.com/cleanflight/cleanflight/pull/3000,https://github.com/mikeller,10,https://github.com/cleanflight/cleanflight/pull/3000#issuecomment-359763706,"Because new IBUS telemetry implementation requires access to few components like:

GPS
Barometer
Accelerometer
IMU

existing test has been extended with stub methods and data structures allowing feature implementation.
@unitware this is first step to add IBUS telemetry - letter I will commit another PR with telemetry handling.
The PR fixed the issue #2833","Closing this, since changes have been implemented in betaflight/betaflight#4978.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3001,2018-01-17T18:45:06Z,2018-01-18T07:56:08Z,2018-01-18T07:56:08Z,CLOSED,False,3588549,50427,4541,https://github.com/glatorg,Clear documentation about MavLink integration,3362,[],https://github.com/cleanflight/cleanflight/pull/3001,https://github.com/glatorg,1,https://github.com/cleanflight/cleanflight/pull/3001,"I've been messing around for a month trying to get it work but without success :-(
I would like to add SCALED_IMU values (xacc, yacc, zacc, xgyro, ygyro, zgyro) to the MavLink messages sent on the ground.
I understand that I have to build my own iNav image with Cygwin
I understand that I have to modify main/telemetry/mavlink.c file
But can't understand how the file works, I asked to RcGroups forum and Facebook iNav group without answer. They suggest me to post here.
I have written something like but without success:
void mavlinkSendImu(void) { mavlink_msg_imu_pack(mavSystemId, mavComponentId, &mavSendMsg, millis(), SCALED_IMU(xacc), SCALED_IMU(yacc), SCALED_IMU(zacc), SCALED_IMU(xgyro), SCALED_IMU(ygyro), SCALED_IMU(zgyro); mavlinkSendMessage(); }
Please can someone explain me how to complete my need? Or maybe someone can build the image for me?
If someone accepts donations, come forward!","I've been messing around for a month trying to get it work but without success :-(
I would like to add SCALED_IMU values (xacc, yacc, zacc, xgyro, ygyro, zgyro) to the MavLink messages sent on the ground.
I understand that I have to build my own iNav image with Cygwin
I understand that I have to modify main/telemetry/mavlink.c file
But can't understand how the file works, I asked to RcGroups forum and Facebook iNav group without answer. They suggest me to post here.
I have written something like but without success:
void mavlinkSendImu(void) { mavlink_msg_imu_pack(mavSystemId, mavComponentId, &mavSendMsg, millis(), SCALED_IMU(xacc), SCALED_IMU(yacc), SCALED_IMU(zacc), SCALED_IMU(xgyro), SCALED_IMU(ygyro), SCALED_IMU(zgyro); mavlinkSendMessage(); }
Please can someone explain me how to complete my need? Or maybe someone can build the image for me?
If someone accepts donations, come forward!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3001,2018-01-17T18:45:06Z,2018-01-18T07:56:08Z,2018-01-18T07:56:08Z,CLOSED,False,3588549,50427,4541,https://github.com/glatorg,Clear documentation about MavLink integration,3362,[],https://github.com/cleanflight/cleanflight/pull/3001,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3001#issuecomment-358469243,"I've been messing around for a month trying to get it work but without success :-(
I would like to add SCALED_IMU values (xacc, yacc, zacc, xgyro, ygyro, zgyro) to the MavLink messages sent on the ground.
I understand that I have to build my own iNav image with Cygwin
I understand that I have to modify main/telemetry/mavlink.c file
But can't understand how the file works, I asked to RcGroups forum and Facebook iNav group without answer. They suggest me to post here.
I have written something like but without success:
void mavlinkSendImu(void) { mavlink_msg_imu_pack(mavSystemId, mavComponentId, &mavSendMsg, millis(), SCALED_IMU(xacc), SCALED_IMU(yacc), SCALED_IMU(zacc), SCALED_IMU(xgyro), SCALED_IMU(ygyro), SCALED_IMU(zgyro); mavlinkSendMessage(); }
Please can someone explain me how to complete my need? Or maybe someone can build the image for me?
If someone accepts donations, come forward!","@glatorg: This looks like what you are trying to do is adding an issue ticket. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.
Please close this.
To open an issue, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3002,2018-01-19T05:42:17Z,2018-01-20T05:28:30Z,2018-01-20T05:28:44Z,CLOSED,False,3588549,50427,4541,https://github.com/madoboy,Higher roll pids for autolaunch ,3362,[],https://github.com/cleanflight/cleanflight/pull/3002,https://github.com/madoboy,1,https://github.com/cleanflight/cleanflight/pull/3002,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3002,2018-01-19T05:42:17Z,2018-01-20T05:28:30Z,2018-01-20T05:28:44Z,CLOSED,False,3588549,50427,4541,https://github.com/madoboy,Higher roll pids for autolaunch ,3362,[],https://github.com/cleanflight/cleanflight/pull/3002,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3002#issuecomment-358911706,,"@madoboy: This looks like what you are trying to do is adding a feature request. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.
Please close this.
To open a feature request, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions and making a case for the feature you would like to have added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3002,2018-01-19T05:42:17Z,2018-01-20T05:28:30Z,2018-01-20T05:28:44Z,CLOSED,False,3588549,50427,4541,https://github.com/madoboy,Higher roll pids for autolaunch ,3362,[],https://github.com/cleanflight/cleanflight/pull/3002,https://github.com/madoboy,3,https://github.com/cleanflight/cleanflight/pull/3002#issuecomment-359146817,,"Sorry. It seems something is wrong with INav mobil site. Have nice day

2018. jan. 19. 9:27 ezt írta (""Michael Keller"" <notifications@github.com>):
…
 @madoboy <https://github.com/madoboy>: This looks like what you are
 trying to do is adding a *feature* request. What you have done instead is
 opening a *pull* request, without any meaningful changes to be pulled
 into the source.

 Please close this.

 To open a feature request, go to the 'Issues' tab at the top of the page,
 and enter a new issue there, following the instructions and making a case
 for the feature you would like to have added.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#3002 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AcdXH1rAEGjscTW-5IQS1yYZ_bl6ESFPks5tMGAAgaJpZM4RkAvC>
 .",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3002,2018-01-19T05:42:17Z,2018-01-20T05:28:30Z,2018-01-20T05:28:44Z,CLOSED,False,3588549,50427,4541,https://github.com/madoboy,Higher roll pids for autolaunch ,3362,[],https://github.com/cleanflight/cleanflight/pull/3002,https://github.com/madoboy,4,https://github.com/cleanflight/cleanflight/pull/3002#issuecomment-359147098,,Sorry,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/cpsw,1,https://github.com/cleanflight/cleanflight/pull/3005,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-359201414,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","Thanks for suggesting this, @cpsw. I fully agree with the first two statements.
About the third one I am not sure. My preferred rule for this is use only the parentheses that are required. The reason for this is that it eliminates judgement calls ('is the precedence here obvious or does it need parentheses'), and the flip-flop churn that is associated with judgement calls, people falling on both sides of the answer, and large development teams.
The alternative way to eliminate judgement calls, 'use parentheses for every operator', becomes unwieldy very quickly.
Thoughts?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/martinbudden,3,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-359202047,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","I agree with the first two, but not the third. Non-required parenthesis make the code less readable and in fact are distracting. If you see a parenthesis then the thought ""ah something unusual is going on here"" occurs and you then have to spend cognitive energy to figure out that nothing unusual is actually happening.
However, I think that parenthesis should be used for bitwise & and | operators since the precedence of these is problematic - however the compiler warns for those cases.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/McGiverGim,4,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-359202342,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","I prefer to have parenthesis always, to me it makes simpler to read. But I think I'm alone with this 🤗",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/cpsw,5,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-359207351,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","Thanks for the answers!
The reason for suggesting the third rule is that by adding parentheses to the && expression, you make it explicit that the second part of the expression is going to be evaluated first. In cases that we have expressions with side effects, we might have problems with that.. For experienced developers, it is not a big issue, but it is easy to go unnoticed and cause runtime errors..
@martinbudden, what do you mean by saying that bitwise & and | operators are problematic?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/martinbudden,6,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-359207738,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","The bitwise operators have lower precedence than the comparison operators, so if you do:
if (a & 1 ==0) {
...

you will get a warning warning: suggest parentheses around comparison in operand of '&' [-Wparentheses]",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/martinbudden,7,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-359207910,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","@cpsw wrt && and || I don't think parenthesis are any more required than they are for * and +.
and I certainly would be against the following parentheses:
if ( var1 + (var2 * var3) ) {
	someMethod( var1 );
}

and the argument about side effects is the same.
Brackets are there to alter the normal operator precedence, and when seeing a bracket you should be able to assume that the operator precedence has been altered. Extra brackets make the code less readable and less understandable.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/cpsw,8,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-359213461,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","Thanks, @martinbudden! That's make totally sense.
And what about the place to put this information, rules number 1 and 2. I will remove rule number 3. Is this file (CodingStyle.md) the right place for that? Are you all okay to include this information in the project?
Please let me know. Thanks",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/cpsw,9,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-359213602,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","I also would like to bring more patterns like these ones for discussion in subsequent pull requests, if you are interested. Regards!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/hydra,10,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-370973281,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.",can we get an updated PR based on the feedback please?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3005,2018-01-20T18:44:47Z,2018-03-30T18:34:38Z,2018-03-30T18:34:38Z,CLOSED,False,31,0,1,https://github.com/cpsw,Suggesting changes to CodingStyle.md,1,['Needs additional work'],https://github.com/cleanflight/cleanflight/pull/3005,https://github.com/hydra,11,https://github.com/cleanflight/cleanflight/pull/3005#issuecomment-377591797,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion. At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","closing, stale, no activity.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3006,2018-01-29T17:40:17Z,2018-01-30T07:22:34Z,2018-01-30T07:25:41Z,CLOSED,False,34645,10335,1040,https://github.com/jflyper,Fix non dshot motor outputs for hal,672,[],https://github.com/cleanflight/cleanflight/pull/3006,https://github.com/jflyper,1,https://github.com/cleanflight/cleanflight/pull/3006,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3006,2018-01-29T17:40:17Z,2018-01-30T07:22:34Z,2018-01-30T07:25:41Z,CLOSED,False,34645,10335,1040,https://github.com/jflyper,Fix non dshot motor outputs for hal,672,[],https://github.com/cleanflight/cleanflight/pull/3006,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3006#issuecomment-361382252,,"@jflyper: Erm, should this go into betaflight, not cleanflight?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3006,2018-01-29T17:40:17Z,2018-01-30T07:22:34Z,2018-01-30T07:25:41Z,CLOSED,False,34645,10335,1040,https://github.com/jflyper,Fix non dshot motor outputs for hal,672,[],https://github.com/cleanflight/cleanflight/pull/3006,https://github.com/jflyper,3,https://github.com/cleanflight/cleanflight/pull/3006#issuecomment-361499286,,"Ouch!
I knew I did something wrong last night, but couldn't find it 😬",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3006,2018-01-29T17:40:17Z,2018-01-30T07:22:34Z,2018-01-30T07:25:41Z,CLOSED,False,34645,10335,1040,https://github.com/jflyper,Fix non dshot motor outputs for hal,672,[],https://github.com/cleanflight/cleanflight/pull/3006,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/3006#issuecomment-361499857,,The joys of late night coding...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3009,2018-02-07T17:44:06Z,2018-02-11T23:31:14Z,2018-02-11T23:31:14Z,CLOSED,False,35374,10805,1050,https://github.com/BlinkFPVita,New OSD Font - TBS Style,766,[],https://github.com/cleanflight/cleanflight/pull/3009,https://github.com/BlinkFPVita,1,https://github.com/cleanflight/cleanflight/pull/3009,"It's possible add a font like the TBS one?
It's pretty nice and a mid-way between the all present right now on the GUI.
Also the ""Home arrow"" is more clear.
*Also maybe an ""inverted"" color scheme? Like black font with white outline.
Thanks :)","It's possible add a font like the TBS one?
It's pretty nice and a mid-way between the all present right now on the GUI.
Also the ""Home arrow"" is more clear.
*Also maybe an ""inverted"" color scheme? Like black font with white outline.
Thanks :)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3009,2018-02-07T17:44:06Z,2018-02-11T23:31:14Z,2018-02-11T23:31:14Z,CLOSED,False,35374,10805,1050,https://github.com/BlinkFPVita,New OSD Font - TBS Style,766,[],https://github.com/cleanflight/cleanflight/pull/3009,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3009#issuecomment-364079270,"It's possible add a font like the TBS one?
It's pretty nice and a mid-way between the all present right now on the GUI.
Also the ""Home arrow"" is more clear.
*Also maybe an ""inverted"" color scheme? Like black font with white outline.
Thanks :)","@BlinkFPVita: This looks like what you are trying to do is adding a feature request. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.
Please close this.
To open a feature request, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions and making a case for the feature you would like to have added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3010,2018-02-07T23:24:31Z,2018-02-09T21:58:38Z,2018-02-09T22:00:20Z,CLOSED,False,225,0,1,https://github.com/organism-46b,add GPS & IBUS_TELEMETRY,1,[],https://github.com/cleanflight/cleanflight/pull/3010,https://github.com/organism-46b,1,https://github.com/cleanflight/cleanflight/pull/3010,"Add GPS & IBUS_TELEMETRY for SPRF3
cleanflight-CLFL_v2.2.0-RC1\src\main\target\SPRACINGF3\target.h
Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).","Add GPS & IBUS_TELEMETRY for SPRF3
cleanflight-CLFL_v2.2.0-RC1\src\main\target\SPRACINGF3\target.h
Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3010,2018-02-07T23:24:31Z,2018-02-09T21:58:38Z,2018-02-09T22:00:20Z,CLOSED,False,225,0,1,https://github.com/organism-46b,add GPS & IBUS_TELEMETRY,1,[],https://github.com/cleanflight/cleanflight/pull/3010,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3010#issuecomment-364078770,"Add GPS & IBUS_TELEMETRY for SPRF3
cleanflight-CLFL_v2.2.0-RC1\src\main\target\SPRACINGF3\target.h
Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).",@organism-46b: Your pull request does not make much sense. Can you please explain what you want to achieve with this?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3010,2018-02-07T23:24:31Z,2018-02-09T21:58:38Z,2018-02-09T22:00:20Z,CLOSED,False,225,0,1,https://github.com/organism-46b,add GPS & IBUS_TELEMETRY,1,[],https://github.com/cleanflight/cleanflight/pull/3010,https://github.com/organism-46b,3,https://github.com/cleanflight/cleanflight/pull/3010#issuecomment-364581211,"Add GPS & IBUS_TELEMETRY for SPRF3
cleanflight-CLFL_v2.2.0-RC1\src\main\target\SPRACINGF3\target.h
Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).","it was to modify for GPS due to size limit of F3 to work with ibus telemetry version of CF that was made by @qba667  and his FS-i6 Flyplus mod,
but i realized  i had clicked on CF main and not the branch  he made   duh..
sorry ,,but as you know all CF branches and the main pages all look the same
and basically i clicked on the wrong one.
so lets dump it sorry for the trouble",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3015,2018-02-17T11:02:18Z,2018-02-18T17:40:55Z,2018-03-02T20:00:25Z,MERGED,True,4033,1143,120,https://github.com/hydra,Merge betaflight v3.2.x maintenance changes into v2.2.x branch.,118,[],https://github.com/cleanflight/cleanflight/pull/3015,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3015,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3015,2018-02-17T11:02:18Z,2018-02-18T17:40:55Z,2018-03-02T20:00:25Z,MERGED,True,4033,1143,120,https://github.com/hydra,Merge betaflight v3.2.x maintenance changes into v2.2.x branch.,118,[],https://github.com/cleanflight/cleanflight/pull/3015,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3015#issuecomment-366435520,,"@mikeller  thanks, i'll check a few more things, run some manual tests, fly it and get it merged ASAP.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3016,2018-02-19T15:49:15Z,2018-03-02T13:21:13Z,2018-03-02T20:00:22Z,MERGED,True,1000,115,40,https://github.com/hydra,Add support for SPRacingF7DUAL,1,[],https://github.com/cleanflight/cleanflight/pull/3016,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3016,"Adds SPRacingF7DUAL target including various F7 tweaks, dual gyro support.
Note: The code has been continually rebased since around May 2017 and as such the commits probably need squashing before the merge.","Adds SPRacingF7DUAL target including various F7 tweaks, dual gyro support.
Note: The code has been continually rebased since around May 2017 and as such the commits probably need squashing before the merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3016,2018-02-19T15:49:15Z,2018-03-02T13:21:13Z,2018-03-02T20:00:22Z,MERGED,True,1000,115,40,https://github.com/hydra,Add support for SPRacingF7DUAL,1,[],https://github.com/cleanflight/cleanflight/pull/3016,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3016#issuecomment-369919016,"Adds SPRacingF7DUAL target including various F7 tweaks, dual gyro support.
Note: The code has been continually rebased since around May 2017 and as such the commits probably need squashing before the merge.",merging into 2.2.x branch,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3017,2018-02-20T13:27:39Z,2018-02-20T21:22:47Z,2018-02-20T21:22:47Z,CLOSED,False,36569,11033,1063,https://github.com/ResinSmoker,Please add function to reduce Tricopter Tail-Wag,838,[],https://github.com/cleanflight/cleanflight/pull/3017,https://github.com/ResinSmoker,1,https://github.com/cleanflight/cleanflight/pull/3017,"Tailwag and Yaw oscillations have been ongoing issue for Tricopters.
Would it be possible to add some sort of Servo ""smoothing"" so that the Tailwag wouldn't be so intense.
Typically high frequency Wag is seen just after first arming, before throttle up. After which the Wag dissipates while the throttle is being held above idle. Later low frequency Wag often show up during sharp turns and fast straits.
Other thoughts: Conversely, it would also work to drop the Yaw P-term to near Zero under a no throttle situations such as after arming on the ground.
Examples:
Stationary wag  https://www.youtube.com/watch?v=SeXPp4LuZms
Under Throttle https://www.youtube.com/watch?v=f6tYqGBGsXg
Thank you in advance!","Tailwag and Yaw oscillations have been ongoing issue for Tricopters.
Would it be possible to add some sort of Servo ""smoothing"" so that the Tailwag wouldn't be so intense.
Typically high frequency Wag is seen just after first arming, before throttle up. After which the Wag dissipates while the throttle is being held above idle. Later low frequency Wag often show up during sharp turns and fast straits.
Other thoughts: Conversely, it would also work to drop the Yaw P-term to near Zero under a no throttle situations such as after arming on the ground.
Examples:
Stationary wag  https://www.youtube.com/watch?v=SeXPp4LuZms
Under Throttle https://www.youtube.com/watch?v=f6tYqGBGsXg
Thank you in advance!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3017,2018-02-20T13:27:39Z,2018-02-20T21:22:47Z,2018-02-20T21:22:47Z,CLOSED,False,36569,11033,1063,https://github.com/ResinSmoker,Please add function to reduce Tricopter Tail-Wag,838,[],https://github.com/cleanflight/cleanflight/pull/3017,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3017#issuecomment-367095340,"Tailwag and Yaw oscillations have been ongoing issue for Tricopters.
Would it be possible to add some sort of Servo ""smoothing"" so that the Tailwag wouldn't be so intense.
Typically high frequency Wag is seen just after first arming, before throttle up. After which the Wag dissipates while the throttle is being held above idle. Later low frequency Wag often show up during sharp turns and fast straits.
Other thoughts: Conversely, it would also work to drop the Yaw P-term to near Zero under a no throttle situations such as after arming on the ground.
Examples:
Stationary wag  https://www.youtube.com/watch?v=SeXPp4LuZms
Under Throttle https://www.youtube.com/watch?v=f6tYqGBGsXg
Thank you in advance!","@ResinSmoker: This looks like what you are trying to do is adding a feature request. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.
Please close this.
To open a feature request, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions and making a case for the feature you would like to have added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3017,2018-02-20T13:27:39Z,2018-02-20T21:22:47Z,2018-02-20T21:22:47Z,CLOSED,False,36569,11033,1063,https://github.com/ResinSmoker,Please add function to reduce Tricopter Tail-Wag,838,[],https://github.com/cleanflight/cleanflight/pull/3017,https://github.com/ResinSmoker,3,https://github.com/cleanflight/cleanflight/pull/3017#issuecomment-367105357,"Tailwag and Yaw oscillations have been ongoing issue for Tricopters.
Would it be possible to add some sort of Servo ""smoothing"" so that the Tailwag wouldn't be so intense.
Typically high frequency Wag is seen just after first arming, before throttle up. After which the Wag dissipates while the throttle is being held above idle. Later low frequency Wag often show up during sharp turns and fast straits.
Other thoughts: Conversely, it would also work to drop the Yaw P-term to near Zero under a no throttle situations such as after arming on the ground.
Examples:
Stationary wag  https://www.youtube.com/watch?v=SeXPp4LuZms
Under Throttle https://www.youtube.com/watch?v=f6tYqGBGsXg
Thank you in advance!","Rodger that... been a long while since i last scripted anything or been in github so quite a bit has changed.
…
 On Feb 20, 2018, at 8:55 PM, Michael Keller ***@***.***> wrote:

 @ResinSmoker: This looks like what you are trying to do is adding a feature request. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.

 Please close this.

 To open a feature request, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions and making a case for the feature you would like to have added.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3017,2018-02-20T13:27:39Z,2018-02-20T21:22:47Z,2018-02-20T21:22:47Z,CLOSED,False,36569,11033,1063,https://github.com/ResinSmoker,Please add function to reduce Tricopter Tail-Wag,838,[],https://github.com/cleanflight/cleanflight/pull/3017,https://github.com/ResinSmoker,4,https://github.com/cleanflight/cleanflight/pull/3017#issuecomment-367124111,"Tailwag and Yaw oscillations have been ongoing issue for Tricopters.
Would it be possible to add some sort of Servo ""smoothing"" so that the Tailwag wouldn't be so intense.
Typically high frequency Wag is seen just after first arming, before throttle up. After which the Wag dissipates while the throttle is being held above idle. Later low frequency Wag often show up during sharp turns and fast straits.
Other thoughts: Conversely, it would also work to drop the Yaw P-term to near Zero under a no throttle situations such as after arming on the ground.
Examples:
Stationary wag  https://www.youtube.com/watch?v=SeXPp4LuZms
Under Throttle https://www.youtube.com/watch?v=f6tYqGBGsXg
Thank you in advance!","Moved to issues, as feature request.
Big thank you to mikeller for the heads up!",True,{'THUMBS_UP': ['https://github.com/mikeller']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3019,2018-02-21T06:04:05Z,2018-02-21T11:51:40Z,2018-02-21T11:51:51Z,CLOSED,False,36604,11041,1063,https://github.com/theSkonk,adding gps to debug mode ,849,[],https://github.com/cleanflight/cleanflight/pull/3019,https://github.com/theSkonk,1,https://github.com/cleanflight/cleanflight/pull/3019,would be nice to add gps data to the debug mode so an on board gps unit can logged ( personally for speed data ),would be nice to add gps data to the debug mode so an on board gps unit can logged ( personally for speed data ),True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3019,2018-02-21T06:04:05Z,2018-02-21T11:51:40Z,2018-02-21T11:51:51Z,CLOSED,False,36604,11041,1063,https://github.com/theSkonk,adding gps to debug mode ,849,[],https://github.com/cleanflight/cleanflight/pull/3019,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3019#issuecomment-367296850,would be nice to add gps data to the debug mode so an on board gps unit can logged ( personally for speed data ),"@theSkonk: This looks like what you are trying to do is adding a feature request. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.
Please close this.
To open a feature request, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions and making a case for the feature you would like to have added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3019,2018-02-21T06:04:05Z,2018-02-21T11:51:40Z,2018-02-21T11:51:51Z,CLOSED,False,36604,11041,1063,https://github.com/theSkonk,adding gps to debug mode ,849,[],https://github.com/cleanflight/cleanflight/pull/3019,https://github.com/theSkonk,3,https://github.com/cleanflight/cleanflight/pull/3019#issuecomment-367302577,would be nice to add gps data to the debug mode so an on board gps unit can logged ( personally for speed data ),opps sorry man,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3021,2018-02-23T11:02:20Z,2018-02-23T11:09:00Z,2018-02-23T11:09:00Z,CLOSED,False,36684,11056,1063,https://github.com/si-gr,remove,869,[],https://github.com/cleanflight/cleanflight/pull/3021,https://github.com/si-gr,1,https://github.com/cleanflight/cleanflight/pull/3021,"made a mistake, sorry","made a mistake, sorry",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3022,2018-02-24T00:32:28Z,2018-03-06T23:59:29Z,2018-03-06T23:59:29Z,CLOSED,False,38352,11425,1093,https://github.com/peterden,PIDs and Rates profiles naming,949,['Invalid'],https://github.com/cleanflight/cleanflight/pull/3022,https://github.com/peterden,1,https://github.com/cleanflight/cleanflight/pull/3022,"We should be able to give names to PIDs and Rates profiles. We should be able to see these names as we select it with stick commands or switches as warning, and adding the possibility to show the selected profile name in the OSD.","We should be able to give names to PIDs and Rates profiles. We should be able to see these names as we select it with stick commands or switches as warning, and adding the possibility to show the selected profile name in the OSD.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3022,2018-02-24T00:32:28Z,2018-03-06T23:59:29Z,2018-03-06T23:59:29Z,CLOSED,False,38352,11425,1093,https://github.com/peterden,PIDs and Rates profiles naming,949,['Invalid'],https://github.com/cleanflight/cleanflight/pull/3022,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3022#issuecomment-370145595,"We should be able to give names to PIDs and Rates profiles. We should be able to see these names as we select it with stick commands or switches as warning, and adding the possibility to show the selected profile name in the OSD.","@peterden: This looks like what you are trying to do is adding a feature request. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.
Please close this.
To open a feature request, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions and making a case for the feature you would like to have added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3024,2018-02-25T01:31:09Z,2018-03-02T13:20:42Z,2018-03-02T20:00:22Z,CLOSED,False,5157,1304,163,https://github.com/joemejia66,Clfl v2.2.x spracingf7dual,131,['Invalid'],https://github.com/cleanflight/cleanflight/pull/3024,https://github.com/joemejia66,1,https://github.com/cleanflight/cleanflight/pull/3024,"Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).","Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3024,2018-02-25T01:31:09Z,2018-03-02T13:20:42Z,2018-03-02T20:00:22Z,CLOSED,False,5157,1304,163,https://github.com/joemejia66,Clfl v2.2.x spracingf7dual,131,['Invalid'],https://github.com/cleanflight/cleanflight/pull/3024,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3024#issuecomment-368307549,"Important considerations when opening a pull request:
1.) Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;
2.) Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md
3.) If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;
4.) Remove this Text :).","@joemejia66: This looks like what you are trying to do is adding a feature request. What you have done instead is opening a pull request, without any meaningful changes to be pulled into the source.
Please close this.
To open a feature request, go to the 'Issues' tab at the top of the page, and enter a new issue there, following the instructions and making a case for the feature you would like to have added.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3026,2018-03-02T16:54:05Z,2018-03-03T01:11:56Z,2018-03-03T01:11:56Z,MERGED,True,27018,10963,936,https://github.com/hydra,Merge Betaflight 3.3.0 master into CF master,908,[],https://github.com/cleanflight/cleanflight/pull/3026,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3026,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3026,2018-03-02T16:54:05Z,2018-03-03T01:11:56Z,2018-03-03T01:11:56Z,MERGED,True,27018,10963,936,https://github.com/hydra,Merge Betaflight 3.3.0 master into CF master,908,[],https://github.com/cleanflight/cleanflight/pull/3026,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3026#issuecomment-369983883,,more commits to add still...,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3027,2018-03-03T13:06:25Z,2018-03-04T10:07:34Z,2018-03-04T10:07:40Z,MERGED,True,1550,492,106,https://github.com/hydra,Merge recent BF changes,47,[],https://github.com/cleanflight/cleanflight/pull/3027,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3027,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3028,2018-03-03T15:06:08Z,2018-03-06T23:57:22Z,2018-03-07T05:23:18Z,MERGED,True,138,57,12,https://github.com/hydra,Improve OSD slave timeout/disconnect/reconnect handling.,1,[],https://github.com/cleanflight/cleanflight/pull/3028,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3028,"fixes continual screen flickering issue that can sometimes be experienced after powering off/on either the FC or the OSD while the other board is still on.
key points:

max7456ReInitIfRequired extracted from max7456DrawScreen
max7456ReInitIfRequired now also called by max7456RefreshAll
max7456BuffersSynced added
displayPort api updated with isSynced
OSD slave can now use isSynced to ensured the display is synced because displayDrawScreen() may return WITHOUT having fully updated the screen.
When OSD slave boots, the logo and text is now displayed after the first call to displayResync(), rather than it being eventually called by a random amount of calls to displayDrawScreen via the OSD_SLAVE_TASK.
displayPort MSP displayResync now sends the MSP_DISPLAYPORT command, it was missing.  The current OSD init code did not correctly send the MSP_DISPLAYPORT which meant the OSD slave could not detect when to display the logo - previously the logo was drawn due to timeout handling which was sub-optimal and part of the reason why the screen flashed...","fixes continual screen flickering issue that can sometimes be experienced after powering off/on either the FC or the OSD while the other board is still on.
key points:

max7456ReInitIfRequired extracted from max7456DrawScreen
max7456ReInitIfRequired now also called by max7456RefreshAll
max7456BuffersSynced added
displayPort api updated with isSynced
OSD slave can now use isSynced to ensured the display is synced because displayDrawScreen() may return WITHOUT having fully updated the screen.
When OSD slave boots, the logo and text is now displayed after the first call to displayResync(), rather than it being eventually called by a random amount of calls to displayDrawScreen via the OSD_SLAVE_TASK.
displayPort MSP displayResync now sends the MSP_DISPLAYPORT command, it was missing.  The current OSD init code did not correctly send the MSP_DISPLAYPORT which meant the OSD slave could not detect when to display the logo - previously the logo was drawn due to timeout handling which was sub-optimal and part of the reason why the screen flashed...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3029,2018-03-05T04:34:38Z,2018-03-05T04:35:24Z,2018-03-05T04:35:24Z,CLOSED,False,25,1,4,https://github.com/azolyoung,Let cli which compatible with ble module,2,[],https://github.com/cleanflight/cleanflight/pull/3029,https://github.com/azolyoung,1,https://github.com/cleanflight/cleanflight/pull/3029,"Hi there,
This PR is used to improve the stable of MSP commands through BLE module,, and we found, if we using the bluetooth module which has cc2541 chip, in the CLI tab, no matter what commands we sent, we can't get the response correctly, sometime it will lost a bit of bytes in the header or tail.
So we submit this PR to solved that problem. And we also test this PR in the CLI tab on PC/MAC, and it seems work fine as well.
PS: I've no idea why this PR will contain #5370 commit, I've pull the newest code from bf master and create new branch to do it twice ,still same result.. Is there any idea about that?","Hi there,
This PR is used to improve the stable of MSP commands through BLE module,, and we found, if we using the bluetooth module which has cc2541 chip, in the CLI tab, no matter what commands we sent, we can't get the response correctly, sometime it will lost a bit of bytes in the header or tail.
So we submit this PR to solved that problem. And we also test this PR in the CLI tab on PC/MAC, and it seems work fine as well.
PS: I've no idea why this PR will contain #5370 commit, I've pull the newest code from bf master and create new branch to do it twice ,still same result.. Is there any idea about that?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3030,2018-03-06T23:51:41Z,2018-03-08T17:19:56Z,2018-03-08T17:22:35Z,MERGED,True,1,1,1,https://github.com/hydra,Fix OSD VTX power display.  Only one character for the power is needed.,1,[],https://github.com/cleanflight/cleanflight/pull/3030,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3030,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3031,2018-03-06T23:51:57Z,2018-03-08T17:20:04Z,2018-03-08T17:22:54Z,MERGED,True,15,1,1,https://github.com/hydra,CF/BF - Fix OSD slave settings not being saved/reset.,1,[],https://github.com/cleanflight/cleanflight/pull/3031,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3031,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3032,2018-03-08T17:21:33Z,2018-03-08T19:07:06Z,2018-03-29T20:39:31Z,MERGED,True,28,21,3,https://github.com/hydra,Betaflight changes,3,[],https://github.com/cleanflight/cleanflight/pull/3032,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3032,cherry-picked some recent fixes.,cherry-picked some recent fixes.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3033,2018-03-08T19:30:37Z,2018-03-08T20:24:56Z,2018-03-29T20:39:35Z,MERGED,True,157,161,4,https://github.com/hydra,"Revert ""Rewritten F7 dshot to LL (draft)""",1,[],https://github.com/cleanflight/cleanflight/pull/3033,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3033,"This reverts commit fa3c7e0.
Broken, see comments on betaflight/betaflight#5237","This reverts commit fa3c7e0.
Broken, see comments on betaflight/betaflight#5237",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3036,2018-03-29T20:35:49Z,2018-03-30T20:03:56Z,2018-03-30T20:03:56Z,MERGED,True,304,1,13,https://github.com/hydra,PID-Audio feature,8,[],https://github.com/cleanflight/cleanflight/pull/3036,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3036,Allows you to HEAR the PID controller working by generating an audio signal using the DAC.,Allows you to HEAR the PID controller working by generating an audio signal using the DAC.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3037,2018-03-29T20:40:25Z,2018-03-29T23:05:53Z,2018-03-30T22:48:06Z,MERGED,True,172460,1605613,2201,https://github.com/hydra,CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0. (#5431),1,[],https://github.com/cleanflight/cleanflight/pull/3037,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3037,"CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0.

CMSIS 5.3.0 - https://github.com/ARM-software/CMSIS_5/releases/tag/5.3.0


relocate driver files from lib/main/CMSIS/CM* to lib/main/STM32xx
folders


Move DSP folder inside CM5.


It came from the same source as the other files inside CM5

Remove the CM5 folder and move the files in it one level up.","CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0.

CMSIS 5.3.0 - https://github.com/ARM-software/CMSIS_5/releases/tag/5.3.0


relocate driver files from lib/main/CMSIS/CM* to lib/main/STM32xx
folders


Move DSP folder inside CM5.


It came from the same source as the other files inside CM5

Remove the CM5 folder and move the files in it one level up.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3037,2018-03-29T20:40:25Z,2018-03-29T23:05:53Z,2018-03-30T22:48:06Z,MERGED,True,172460,1605613,2201,https://github.com/hydra,CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0. (#5431),1,[],https://github.com/cleanflight/cleanflight/pull/3037,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3037#issuecomment-377442064,"CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0.

CMSIS 5.3.0 - https://github.com/ARM-software/CMSIS_5/releases/tag/5.3.0


relocate driver files from lib/main/CMSIS/CM* to lib/main/STM32xx
folders


Move DSP folder inside CM5.


It came from the same source as the other files inside CM5

Remove the CM5 folder and move the files in it one level up.","@hydra: Is this entirely a cherry-pick from Betaflight, or are there other changes (that should be cherry-picked back into Betaflight)?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3037,2018-03-29T20:40:25Z,2018-03-29T23:05:53Z,2018-03-30T22:48:06Z,MERGED,True,172460,1605613,2201,https://github.com/hydra,CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0. (#5431),1,[],https://github.com/cleanflight/cleanflight/pull/3037,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/3037#issuecomment-377591637,"CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0.

CMSIS 5.3.0 - https://github.com/ARM-software/CMSIS_5/releases/tag/5.3.0


relocate driver files from lib/main/CMSIS/CM* to lib/main/STM32xx
folders


Move DSP folder inside CM5.


It came from the same source as the other files inside CM5

Remove the CM5 folder and move the files in it one level up.","it's a cherry pick from BF that I originally did on CF 😄
nothing new to merge.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3037,2018-03-29T20:40:25Z,2018-03-29T23:05:53Z,2018-03-30T22:48:06Z,MERGED,True,172460,1605613,2201,https://github.com/hydra,CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0. (#5431),1,[],https://github.com/cleanflight/cleanflight/pull/3037,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/3037#issuecomment-377640341,"CF/BF - Update DSP_Lib and STM32F7/Drivers/CMSIS to CMSIS 5.3.0.

CMSIS 5.3.0 - https://github.com/ARM-software/CMSIS_5/releases/tag/5.3.0


relocate driver files from lib/main/CMSIS/CM* to lib/main/STM32xx
folders


Move DSP folder inside CM5.


It came from the same source as the other files inside CM5

Remove the CM5 folder and move the files in it one level up.",Phewww. ;-P,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3039,2018-04-03T18:00:54Z,2018-04-03T19:36:44Z,2018-04-03T19:36:44Z,MERGED,True,275,14,13,https://github.com/hydra,CF/BF - Add support for IR Transponder on STM32F7 boards.,2,[],https://github.com/cleanflight/cleanflight/pull/3039,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3039,"Tested on SPRacingF7DUAL with an iLAP receiver.
Note, most IO initialisation code ported from the ws281x hal led strip driver just like the original transponder driver for standard peripheral library was based on the ws281x code.","Tested on SPRacingF7DUAL with an iLAP receiver.
Note, most IO initialisation code ported from the ws281x hal led strip driver just like the original transponder driver for standard peripheral library was based on the ws281x code.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3041,2018-04-03T20:18:59Z,2018-04-03T21:13:05Z,2018-04-03T21:13:05Z,CLOSED,False,1,1,1,https://github.com/haloweenhamster,Update ibus_shared.c,1,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/3041,https://github.com/haloweenhamster,1,https://github.com/cleanflight/cleanflight/pull/3041,update to IBus armed telemetry which was inverted,update to IBus armed telemetry which was inverted,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3041,2018-04-03T20:18:59Z,2018-04-03T21:13:05Z,2018-04-03T21:13:05Z,CLOSED,False,1,1,1,https://github.com/haloweenhamster,Update ibus_shared.c,1,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/3041,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3041#issuecomment-378400463,update to IBus armed telemetry which was inverted,"Hi @haloweenhamster. There is no need to open this pull request for cleanflight, since cleanflight periodically pulls in updates from Betaflight, and this fix will be pulled in from there soon. Mergeing this will cause a a merge conflict during this process, so please close.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3041,2018-04-03T20:18:59Z,2018-04-03T21:13:05Z,2018-04-03T21:13:05Z,CLOSED,False,1,1,1,https://github.com/haloweenhamster,Update ibus_shared.c,1,['Do not merge'],https://github.com/cleanflight/cleanflight/pull/3041,https://github.com/haloweenhamster,3,https://github.com/cleanflight/cleanflight/pull/3041#issuecomment-378401244,update to IBus armed telemetry which was inverted,Sorry didn't know,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3043,2018-04-18T10:20:20Z,2018-04-18T11:08:21Z,2018-04-22T21:44:18Z,MERGED,True,0,1,1,https://github.com/hydra,Fix PWM rx 100% CPU load (#5598) (#5606),1,[],https://github.com/cleanflight/cleanflight/pull/3043,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3043,Previous logic changes were causing the RX task to run every loop for PWM rx leading to 100% CPU load. Reverted PWM processing to be based on a time interval rather than whether new data is available. With PWM we can't differentiate when new data is available as it's a continuous stream.,Previous logic changes were causing the RX task to run every loop for PWM rx leading to 100% CPU load. Reverted PWM processing to be based on a time interval rather than whether new data is available. With PWM we can't differentiate when new data is available as it's a continuous stream.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3048,2018-05-05T06:16:49Z,2018-09-28T21:42:50Z,2018-09-28T21:42:50Z,CLOSED,False,358,0,5,https://github.com/allenfor2017,add new target SPEEDYBEEF4,1,[],https://github.com/cleanflight/cleanflight/pull/3048,https://github.com/allenfor2017,1,https://github.com/cleanflight/cleanflight/pull/3048,"Hi~
I added a new target for SPEEDYBEEF4, please review! Thank you!","Hi~
I added a new target for SPEEDYBEEF4, please review! Thank you!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3048,2018-05-05T06:16:49Z,2018-09-28T21:42:50Z,2018-09-28T21:42:50Z,CLOSED,False,358,0,5,https://github.com/allenfor2017,add new target SPEEDYBEEF4,1,[],https://github.com/cleanflight/cleanflight/pull/3048,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3048#issuecomment-386783149,"Hi~
I added a new target for SPEEDYBEEF4, please review! Thank you!","You don't need to open a separate pull request for cleanflight - cleanflight periodically pulls in changes from Betaflight, and the SPEEDYBEEF4 target that has been added to Betaflight will be pulled in before the next cleanflight release.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3048,2018-05-05T06:16:49Z,2018-09-28T21:42:50Z,2018-09-28T21:42:50Z,CLOSED,False,358,0,5,https://github.com/allenfor2017,add new target SPEEDYBEEF4,1,[],https://github.com/cleanflight/cleanflight/pull/3048,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/3048#issuecomment-425574307,"Hi~
I added a new target for SPEEDYBEEF4, please review! Thank you!","not needed, we'll grab the changes from BF soon.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3053,2018-05-29T22:02:51Z,2018-05-30T08:00:00Z,2018-05-30T08:00:00Z,CLOSED,False,0,2,1,https://github.com/jezmck,rm two broken links,1,[],https://github.com/cleanflight/cleanflight/pull/3053,https://github.com/jezmck,1,https://github.com/cleanflight/cleanflight/pull/3053,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


Remove this Text :).","Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3054,2018-05-30T08:04:09Z,2019-01-10T11:20:35Z,2019-01-10T11:20:35Z,CLOSED,False,1,2,1,https://github.com/jezmck,Fix broken link,1,[],https://github.com/cleanflight/cleanflight/pull/3054,https://github.com/jezmck,1,https://github.com/cleanflight/cleanflight/pull/3054,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3054,2018-05-30T08:04:09Z,2019-01-10T11:20:35Z,2019-01-10T11:20:35Z,CLOSED,False,1,2,1,https://github.com/jezmck,Fix broken link,1,[],https://github.com/cleanflight/cleanflight/pull/3054,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3054#issuecomment-453061568,,replaced by #3074.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3058,2018-07-16T12:19:05Z,2018-07-16T17:55:16Z,2018-07-16T17:55:16Z,MERGED,True,42567,20807,1073,https://github.com/hydra,Merge BF 3.4.0,932,[],https://github.com/cleanflight/cleanflight/pull/3058,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3058,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3062,2018-08-07T15:39:58Z,2018-08-07T18:46:58Z,2018-08-07T18:46:58Z,MERGED,True,28,18,1,https://github.com/hydra,Fix MSP displayport command processing on OSD slaves.,2,[],https://github.com/cleanflight/cleanflight/pull/3062,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3062,"Prior to the the OSD slave always said 'waiting for FC'
@digitalentity It was broken by commit eb70859","Prior to the the OSD slave always said 'waiting for FC'
@digitalentity It was broken by commit eb70859",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3062,2018-08-07T15:39:58Z,2018-08-07T18:46:58Z,2018-08-07T18:46:58Z,MERGED,True,28,18,1,https://github.com/hydra,Fix MSP displayport command processing on OSD slaves.,2,[],https://github.com/cleanflight/cleanflight/pull/3062,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3062#issuecomment-411110106,"Prior to the the OSD slave always said 'waiting for FC'
@digitalentity It was broken by commit eb70859","Binary attached for testing, prior to 2.4.1 being released with this fix.
cleanflight_2.4.1_SPRACINGF3OSD.zip",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3064,2018-08-23T07:38:40Z,2018-10-02T12:45:25Z,2018-10-02T12:45:25Z,CLOSED,False,5,1,1,https://github.com/thomasbridi,feat:add average cell voltage in CRSF telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/3064,https://github.com/thomasbridi,1,https://github.com/cleanflight/cleanflight/pull/3064,"add the possibility to switch between main battery voltage to average cell voltage in CRSF telemetry just setting in the CLI report_cell_voltage = OFF, ON","add the possibility to switch between main battery voltage to average cell voltage in CRSF telemetry just setting in the CLI report_cell_voltage = OFF, ON",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3064,2018-08-23T07:38:40Z,2018-10-02T12:45:25Z,2018-10-02T12:45:25Z,CLOSED,False,5,1,1,https://github.com/thomasbridi,feat:add average cell voltage in CRSF telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/3064,https://github.com/thomasbridi,2,https://github.com/cleanflight/cleanflight/pull/3064#issuecomment-415346837,"add the possibility to switch between main battery voltage to average cell voltage in CRSF telemetry just setting in the CLI report_cell_voltage = OFF, ON",ok I checked out the last commit on master (I removed my changes) and found out that it was not my code to create the problem on the IMPULSERCF3. Is it possible that the problem was there before?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3064,2018-08-23T07:38:40Z,2018-10-02T12:45:25Z,2018-10-02T12:45:25Z,CLOSED,False,5,1,1,https://github.com/thomasbridi,feat:add average cell voltage in CRSF telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/3064,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/3064#issuecomment-425574143,"add the possibility to switch between main battery voltage to average cell voltage in CRSF telemetry just setting in the CLI report_cell_voltage = OFF, ON",@mikeller has this been added to BF yet?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3064,2018-08-23T07:38:40Z,2018-10-02T12:45:25Z,2018-10-02T12:45:25Z,CLOSED,False,5,1,1,https://github.com/thomasbridi,feat:add average cell voltage in CRSF telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/3064,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/3064#issuecomment-426248575,"add the possibility to switch between main battery voltage to average cell voltage in CRSF telemetry just setting in the CLI report_cell_voltage = OFF, ON",@hydra: Yes: betaflight/betaflight#6624.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3064,2018-08-23T07:38:40Z,2018-10-02T12:45:25Z,2018-10-02T12:45:25Z,CLOSED,False,5,1,1,https://github.com/thomasbridi,feat:add average cell voltage in CRSF telemetry,1,[],https://github.com/cleanflight/cleanflight/pull/3064,https://github.com/hydra,5,https://github.com/cleanflight/cleanflight/pull/3064#issuecomment-426259551,"add the possibility to switch between main battery voltage to average cell voltage in CRSF telemetry just setting in the CLI report_cell_voltage = OFF, ON","@mikeller thanks for confirmation.
@thomasbridi this will bf in CF when the corresponding BF commit has been merged.  No need for this PR.  Thanks for your contribution!",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3065,2018-09-01T11:45:26Z,2018-09-28T21:40:56Z,2018-09-28T21:40:56Z,CLOSED,False,17,7,3,None,add way to manually override battery cell count,1,[],https://github.com/cleanflight/cleanflight/pull/3065,None,1,https://github.com/cleanflight/cleanflight/pull/3065,"This add merged commit betaflight/betaflight#6648 from betaflight to cleanflight.
On higher cells voltages overlap, which is why this command is necessary and also in demand.","This add merged commit betaflight/betaflight#6648 from betaflight to cleanflight.
On higher cells voltages overlap, which is why this command is necessary and also in demand.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3065,2018-09-01T11:45:26Z,2018-09-28T21:40:56Z,2018-09-28T21:40:56Z,CLOSED,False,17,7,3,None,add way to manually override battery cell count,1,[],https://github.com/cleanflight/cleanflight/pull/3065,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3065#issuecomment-425573991,"This add merged commit betaflight/betaflight#6648 from betaflight to cleanflight.
On higher cells voltages overlap, which is why this command is necessary and also in demand.","no need for this PR, we'll grab the changes from BF soon.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3066,2018-09-01T11:55:17Z,2018-09-28T21:40:36Z,2018-09-28T21:40:36Z,CLOSED,False,31,1,5,None,add flip arrow in turtle mode,2,[],https://github.com/cleanflight/cleanflight/pull/3066,None,1,https://github.com/cleanflight/cleanflight/pull/3066,Implements bf merged feature betaflight/betaflight#6467,Implements bf merged feature betaflight/betaflight#6467,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3066,2018-09-01T11:55:17Z,2018-09-28T21:40:36Z,2018-09-28T21:40:36Z,CLOSED,False,31,1,5,None,add flip arrow in turtle mode,2,[],https://github.com/cleanflight/cleanflight/pull/3066,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3066#issuecomment-425573923,Implements bf merged feature betaflight/betaflight#6467,"no need for this PR, we'll grab the changes from BF soon.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3069,2018-09-28T22:50:26Z,2018-09-29T16:56:38Z,2018-09-29T16:56:38Z,MERGED,True,2789,1371,174,https://github.com/hydra,Merge BF 3.5.0 changes.,245,[],https://github.com/cleanflight/cleanflight/pull/3069,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3069,Note: This backs out the removal of the SPRacingF3OSD target from BF 3.5.x,Note: This backs out the removal of the SPRacingF3OSD target from BF 3.5.x,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3070,2018-10-22T12:30:57Z,2019-01-10T11:01:41Z,2019-01-10T11:01:41Z,CLOSED,False,3,2,3,https://github.com/LVGRAPE,Clfl v2.3.x maintenance,4,['Invalid'],https://github.com/cleanflight/cleanflight/pull/3070,https://github.com/LVGRAPE,1,https://github.com/cleanflight/cleanflight/pull/3070,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).","Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3071,2018-11-21T06:53:56Z,2018-11-21T06:56:40Z,2018-11-21T06:58:17Z,CLOSED,False,1,0,1,https://github.com/learningbug123,Create learning the code,1,[],https://github.com/cleanflight/cleanflight/pull/3071,https://github.com/learningbug123,1,https://github.com/cleanflight/cleanflight/pull/3071,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).","Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3071,2018-11-21T06:53:56Z,2018-11-21T06:56:40Z,2018-11-21T06:58:17Z,CLOSED,False,1,0,1,https://github.com/learningbug123,Create learning the code,1,[],https://github.com/cleanflight/cleanflight/pull/3071,https://github.com/mikeller,2,https://github.com/cleanflight/cleanflight/pull/3071#issuecomment-440558155,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",@learningbug123: Please do not create frivulous pull requests with no useful content on other people's repositories. This will only get you blocked and reported for abuse.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3071,2018-11-21T06:53:56Z,2018-11-21T06:56:40Z,2018-11-21T06:58:17Z,CLOSED,False,1,0,1,https://github.com/learningbug123,Create learning the code,1,[],https://github.com/cleanflight/cleanflight/pull/3071,https://github.com/learningbug123,3,https://github.com/cleanflight/cleanflight/pull/3071#issuecomment-440558249,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",Anybody can tell me how can I get the cleanflight code ?thanks,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3071,2018-11-21T06:53:56Z,2018-11-21T06:56:40Z,2018-11-21T06:58:17Z,CLOSED,False,1,0,1,https://github.com/learningbug123,Create learning the code,1,[],https://github.com/cleanflight/cleanflight/pull/3071,https://github.com/mikeller,4,https://github.com/cleanflight/cleanflight/pull/3071#issuecomment-440558430,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",Get it here: https://github.com/cleanflight/cleanflight/archive/master.zip,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3074,2019-01-10T11:18:33Z,2019-01-10T11:22:34Z,2019-01-10T11:22:34Z,MERGED,True,8,2,1,https://github.com/hydra,Fix broken stick configuration documentation links.,1,[],https://github.com/cleanflight/cleanflight/pull/3074,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3074,Replaces #3054,Replaces #3054,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3079,2019-02-05T08:25:39Z,2020-05-17T11:36:50Z,2020-05-17T11:37:00Z,CLOSED,False,113584,17652,666,https://github.com/yangyh75,auto_yyh,1909,"['Invalid', 'Inactive']",https://github.com/cleanflight/cleanflight/pull/3079,https://github.com/yangyh75,1,https://github.com/cleanflight/cleanflight/pull/3079,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).","Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3079,2019-02-05T08:25:39Z,2020-05-17T11:36:50Z,2020-05-17T11:37:00Z,CLOSED,False,113584,17652,666,https://github.com/yangyh75,auto_yyh,1909,"['Invalid', 'Inactive']",https://github.com/cleanflight/cleanflight/pull/3079,https://github.com/yangyh75,2,https://github.com/cleanflight/cleanflight/pull/3079#issuecomment-460552056,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",yyh,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3079,2019-02-05T08:25:39Z,2020-05-17T11:36:50Z,2020-05-17T11:37:00Z,CLOSED,False,113584,17652,666,https://github.com/yangyh75,auto_yyh,1909,"['Invalid', 'Inactive']",https://github.com/cleanflight/cleanflight/pull/3079,https://github.com/mikeller,3,https://github.com/cleanflight/cleanflight/pull/3079#issuecomment-460566037,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).","@yangyh75: I don't know what you are trying to do, but this pull request does not make any sense. Please close it and open an issue instead if you have got a question / bug report.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3079,2019-02-05T08:25:39Z,2020-05-17T11:36:50Z,2020-05-17T11:37:00Z,CLOSED,False,113584,17652,666,https://github.com/yangyh75,auto_yyh,1909,"['Invalid', 'Inactive']",https://github.com/cleanflight/cleanflight/pull/3079,https://github.com/apps/stale,4,https://github.com/cleanflight/cleanflight/pull/3079#issuecomment-629782066,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",This issue / pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs within a week.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3081,2019-03-10T08:15:27Z,2020-05-17T11:36:18Z,2020-05-17T11:36:27Z,CLOSED,False,7,1,1,https://github.com/Coyotepv1,target.h,1,"['Invalid', 'Inactive']",https://github.com/cleanflight/cleanflight/pull/3081,https://github.com/Coyotepv1,1,https://github.com/cleanflight/cleanflight/pull/3081,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).","Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3081,2019-03-10T08:15:27Z,2020-05-17T11:36:18Z,2020-05-17T11:36:27Z,CLOSED,False,7,1,1,https://github.com/Coyotepv1,target.h,1,"['Invalid', 'Inactive']",https://github.com/cleanflight/cleanflight/pull/3081,https://github.com/apps/stale,2,https://github.com/cleanflight/cleanflight/pull/3081#issuecomment-629782064,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",This issue / pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs within a week.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3081,2019-03-10T08:15:27Z,2020-05-17T11:36:18Z,2020-05-17T11:36:27Z,CLOSED,False,7,1,1,https://github.com/Coyotepv1,target.h,1,"['Invalid', 'Inactive']",https://github.com/cleanflight/cleanflight/pull/3081,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/3081#issuecomment-629782856,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",Invalid PR.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3087,2019-11-05T20:56:54Z,2020-05-17T11:35:51Z,2020-05-17T11:49:49Z,CLOSED,False,17,12,2,https://github.com/qba667,Fixed IBUS protocol for AFHDS 3 and latest AFHDS 2a receivers.,1,['Inactive'],https://github.com/cleanflight/cleanflight/pull/3087,https://github.com/qba667,1,https://github.com/cleanflight/cleanflight/pull/3087,"Backport of IBUS protocol changes already implemented in BF.
The PR created on request of FlySky - they want to have receivers compatible.
New FlySky receivers (AFHDS 3 and latest AFHDS 2a) are using 4 bits free bits in every channel to pass additional data, thus increase total passed channels to 18.
Missing logic has been implemented - it is still compatible with 14 channels receivers.
The fix is critical because if new channels are being send in the frame they are causing invalid value recognition.
Information about change I got from first hand - talked directly to FlySky.","Backport of IBUS protocol changes already implemented in BF.
The PR created on request of FlySky - they want to have receivers compatible.
New FlySky receivers (AFHDS 3 and latest AFHDS 2a) are using 4 bits free bits in every channel to pass additional data, thus increase total passed channels to 18.
Missing logic has been implemented - it is still compatible with 14 channels receivers.
The fix is critical because if new channels are being send in the frame they are causing invalid value recognition.
Information about change I got from first hand - talked directly to FlySky.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3087,2019-11-05T20:56:54Z,2020-05-17T11:35:51Z,2020-05-17T11:49:49Z,CLOSED,False,17,12,2,https://github.com/qba667,Fixed IBUS protocol for AFHDS 3 and latest AFHDS 2a receivers.,1,['Inactive'],https://github.com/cleanflight/cleanflight/pull/3087,https://github.com/apps/stale,2,https://github.com/cleanflight/cleanflight/pull/3087#issuecomment-629782060,"Backport of IBUS protocol changes already implemented in BF.
The PR created on request of FlySky - they want to have receivers compatible.
New FlySky receivers (AFHDS 3 and latest AFHDS 2a) are using 4 bits free bits in every channel to pass additional data, thus increase total passed channels to 18.
Missing logic has been implemented - it is still compatible with 14 channels receivers.
The fix is critical because if new channels are being send in the frame they are causing invalid value recognition.
Information about change I got from first hand - talked directly to FlySky.",This issue / pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs within a week.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3087,2019-11-05T20:56:54Z,2020-05-17T11:35:51Z,2020-05-17T11:49:49Z,CLOSED,False,17,12,2,https://github.com/qba667,Fixed IBUS protocol for AFHDS 3 and latest AFHDS 2a receivers.,1,['Inactive'],https://github.com/cleanflight/cleanflight/pull/3087,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/3087#issuecomment-629782818,"Backport of IBUS protocol changes already implemented in BF.
The PR created on request of FlySky - they want to have receivers compatible.
New FlySky receivers (AFHDS 3 and latest AFHDS 2a) are using 4 bits free bits in every channel to pass additional data, thus increase total passed channels to 18.
Missing logic has been implemented - it is still compatible with 14 channels receivers.
The fix is critical because if new channels are being send in the frame they are causing invalid value recognition.
Information about change I got from first hand - talked directly to FlySky.",Merged from BF into master yesterday 😄,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3087,2019-11-05T20:56:54Z,2020-05-17T11:35:51Z,2020-05-17T11:49:49Z,CLOSED,False,17,12,2,https://github.com/qba667,Fixed IBUS protocol for AFHDS 3 and latest AFHDS 2a receivers.,1,['Inactive'],https://github.com/cleanflight/cleanflight/pull/3087,https://github.com/qba667,4,https://github.com/cleanflight/cleanflight/pull/3087#issuecomment-629784413,"Backport of IBUS protocol changes already implemented in BF.
The PR created on request of FlySky - they want to have receivers compatible.
New FlySky receivers (AFHDS 3 and latest AFHDS 2a) are using 4 bits free bits in every channel to pass additional data, thus increase total passed channels to 18.
Missing logic has been implemented - it is still compatible with 14 channels receivers.
The fix is critical because if new channels are being send in the frame they are causing invalid value recognition.
Information about change I got from first hand - talked directly to FlySky.",@hydra can you contact me via Email? You should see it in my commits. There is some more actions to be done and FlySky want to contribute  to the project as well.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3088,2020-01-06T06:25:20Z,2020-02-29T05:13:15Z,2020-02-29T05:13:15Z,CLOSED,False,2622,0,64,https://github.com/nnikolov3,created files and updated the meeting notes,70,[],https://github.com/cleanflight/cleanflight/pull/3088,https://github.com/nnikolov3,1,https://github.com/cleanflight/cleanflight/pull/3088,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).","Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3088,2020-01-06T06:25:20Z,2020-02-29T05:13:15Z,2020-02-29T05:13:15Z,CLOSED,False,2622,0,64,https://github.com/nnikolov3,created files and updated the meeting notes,70,[],https://github.com/cleanflight/cleanflight/pull/3088,https://github.com/podhrmic,2,https://github.com/cleanflight/cleanflight/pull/3088#issuecomment-592708401,"Important considerations when opening a pull request:


Pull requests will only be accepted if they are opened against the master branch. Pull requests opened against other branches without prior consent from the maintainers will be closed;


Please follow the coding style guidlines: https://github.com/cleanflight/cleanflight/blob/master/docs/development/CodingStyle.md


Keep your pull requests as small and concise as possible. One pull request should only ever add / update one feature. If the change that you are proposing has a wider scope, consider splitting it over multiple pull requests. In particular, pull requests that combine changes to features and one or more new targets are not acceptable.


Ideally, a pull request should contain only one commit, with a descriptive message. If your changes use more than one commit, rebase / squash them into one commit before submitting a pull request. If you need to amend your pull request, make sure that the additional commit has a descriptive message, or - even better - use git commit --amend to amend your original commit.


All pull requests are reviewed. Be ready to receive constructive criticism, and to learn and improve your coding style. Also, be ready to clarify anything that isn't already sufficiently explained in the code and text of the pull request, and to defend your ideas.


If your pull request is a fix for one or more issues that are open in GitHub, add a comment to your pull request, and add the issue numbers of the issues that are fixed in the form Fixes #<issue number>. This will cause the issues to be closed when the pull request is merged;


If you have already had your PR merged in BF then no need to currently create a new PR here.


Remove this Text :).","@nnikolov3 you probably don't need to open a pull request quite yet - also the non-cleanflight related files such as meeting notes should not be a part of the pull request. I suggest you work on your Capstone branch, and when the work is finished, create a new branch that contains only the relevant code and then open a pull request from that branch.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3092,2020-05-15T16:01:58Z,2020-05-16T14:57:57Z,2020-05-16T14:57:57Z,MERGED,True,1452003,166293,2916,https://github.com/hydra,Betaflight merge 20200515,3931,[],https://github.com/cleanflight/cleanflight/pull/3092,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3092,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3093,2020-05-17T00:38:15Z,2020-05-17T10:58:02Z,2020-05-17T10:58:02Z,MERGED,True,1,1,1,https://github.com/hydra,azure pipeline updates,1,[],https://github.com/cleanflight/cleanflight/pull/3093,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3093,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3094,2020-05-17T11:09:15Z,2020-05-17T11:35:14Z,2020-05-17T11:35:14Z,MERGED,True,1,0,1,https://github.com/hydra,Add azure pipeline badge,1,[],https://github.com/cleanflight/cleanflight/pull/3094,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3094,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3095,2020-05-21T15:05:04Z,2020-05-23T11:44:46Z,2020-05-23T11:44:46Z,MERGED,True,1,0,1,https://github.com/hydra,Add hydra to github sponsor list.,1,[],https://github.com/cleanflight/cleanflight/pull/3095,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3095,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3096,2020-05-25T19:04:16Z,2020-05-25T19:33:36Z,2020-05-25T19:33:37Z,MERGED,True,6,7,3,https://github.com/hydra,BF merges 20200525 1,7,[],https://github.com/cleanflight/cleanflight/pull/3096,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3096,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3097,2020-05-31T17:16:48Z,2020-05-31T17:22:54Z,2020-05-31T17:22:57Z,MERGED,True,117,47,13,https://github.com/hydra,Bf merges 20200531,13,[],https://github.com/cleanflight/cleanflight/pull/3097,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3097,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3098,2020-06-03T19:42:18Z,2020-06-03T20:09:43Z,2020-06-03T20:09:46Z,MERGED,True,183,120,19,https://github.com/hydra,Bf merges 20200603,19,[],https://github.com/cleanflight/cleanflight/pull/3098,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3098,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3099,2020-06-05T16:56:22Z,2020-06-05T18:17:40Z,2020-06-10T12:54:28Z,MERGED,True,1,1,1,https://github.com/hydra,Fix SREC creation.,1,[],https://github.com/cleanflight/cleanflight/pull/3099,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3099,Looks like it's been broken for a while now.,Looks like it's been broken for a while now.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3099,2020-06-05T16:56:22Z,2020-06-05T18:17:40Z,2020-06-10T12:54:28Z,MERGED,True,1,1,1,https://github.com/hydra,Fix SREC creation.,1,[],https://github.com/cleanflight/cleanflight/pull/3099,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3099#issuecomment-639635164,Looks like it's been broken for a while now.,@mikeller @etracer65 You may want to pull this into BF.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3099,2020-06-05T16:56:22Z,2020-06-05T18:17:40Z,2020-06-10T12:54:28Z,MERGED,True,1,1,1,https://github.com/hydra,Fix SREC creation.,1,[],https://github.com/cleanflight/cleanflight/pull/3099,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/3099#issuecomment-641987155,Looks like it's been broken for a while now.,"Note: BF removed SREC creation entirely instead, see betaflight/betaflight#9890",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3100,2020-06-05T17:03:33Z,2020-06-05T18:18:05Z,2020-06-05T18:18:10Z,MERGED,True,43,9,1,https://github.com/hydra,Create variably named files as an additional make step.,1,[],https://github.com/cleanflight/cleanflight/pull/3100,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3100,"Some developers use external tools that require fixed filenames, e.g. obj/some-file.bin.
Recently the git commit revision, or _norevision is added to the filenames, so they become e.g. obj/some-file_revision.bin.  This means that the external tools either fail to find the files, or the tools must also be changed and passed the revision number as an argument, this is infeasible, impractical and sometimes impossible.
The reason that the git commit revision or _norevision was added to the filenames was so that users know what commit the firmware is built from, this is especially handy for testers and users giving early feedback of test builds.
This PR keeps both developers and users happy, since now when doing a normal build both sets of files are created.  e.g.  obj/some-file.bin and obj/some-file_revision.bin.
It might be an idea to move the files with the revision number into a dist or release folder, as the norm these days when packaging/releasing files.  This can be done as a separate PR if-required.","Some developers use external tools that require fixed filenames, e.g. obj/some-file.bin.
Recently the git commit revision, or _norevision is added to the filenames, so they become e.g. obj/some-file_revision.bin.  This means that the external tools either fail to find the files, or the tools must also be changed and passed the revision number as an argument, this is infeasible, impractical and sometimes impossible.
The reason that the git commit revision or _norevision was added to the filenames was so that users know what commit the firmware is built from, this is especially handy for testers and users giving early feedback of test builds.
This PR keeps both developers and users happy, since now when doing a normal build both sets of files are created.  e.g.  obj/some-file.bin and obj/some-file_revision.bin.
It might be an idea to move the files with the revision number into a dist or release folder, as the norm these days when packaging/releasing files.  This can be done as a separate PR if-required.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3100,2020-06-05T17:03:33Z,2020-06-05T18:18:05Z,2020-06-05T18:18:10Z,MERGED,True,43,9,1,https://github.com/hydra,Create variably named files as an additional make step.,1,[],https://github.com/cleanflight/cleanflight/pull/3100,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3100#issuecomment-639635289,"Some developers use external tools that require fixed filenames, e.g. obj/some-file.bin.
Recently the git commit revision, or _norevision is added to the filenames, so they become e.g. obj/some-file_revision.bin.  This means that the external tools either fail to find the files, or the tools must also be changed and passed the revision number as an argument, this is infeasible, impractical and sometimes impossible.
The reason that the git commit revision or _norevision was added to the filenames was so that users know what commit the firmware is built from, this is especially handy for testers and users giving early feedback of test builds.
This PR keeps both developers and users happy, since now when doing a normal build both sets of files are created.  e.g.  obj/some-file.bin and obj/some-file_revision.bin.
It might be an idea to move the files with the revision number into a dist or release folder, as the norm these days when packaging/releasing files.  This can be done as a separate PR if-required.",@mikeller @etracer65 You may want to pull this into BF.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3101,2020-06-10T12:40:26Z,2020-06-28T11:29:36Z,2020-06-28T11:29:36Z,MERGED,True,65,0,5,https://github.com/hydra,Add missing stack watermarking code to F7 and H7 targets.,1,[],https://github.com/cleanflight/cleanflight/pull/3101,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3101,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3101,2020-06-10T12:40:26Z,2020-06-28T11:29:36Z,2020-06-28T11:29:36Z,MERGED,True,65,0,5,https://github.com/hydra,Add missing stack watermarking code to F7 and H7 targets.,1,[],https://github.com/cleanflight/cleanflight/pull/3101,https://github.com/hydra,2,https://github.com/cleanflight/cleanflight/pull/3101#issuecomment-641987531,,@mikeller You may want to pull this into BF.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3101,2020-06-10T12:40:26Z,2020-06-28T11:29:36Z,2020-06-28T11:29:36Z,MERGED,True,65,0,5,https://github.com/hydra,Add missing stack watermarking code to F7 and H7 targets.,1,[],https://github.com/cleanflight/cleanflight/pull/3101,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/3101#issuecomment-641987988,,@digitalentity Thanks for spotting this in the recent iNAV H7 work.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3101,2020-06-10T12:40:26Z,2020-06-28T11:29:36Z,2020-06-28T11:29:36Z,MERGED,True,65,0,5,https://github.com/hydra,Add missing stack watermarking code to F7 and H7 targets.,1,[],https://github.com/cleanflight/cleanflight/pull/3101,https://github.com/Quick-Flash,4,https://github.com/cleanflight/cleanflight/pull/3101#issuecomment-650630246,,I'll want to remember this for the future if BF never merges it in. Thanks for your work Dominic!,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3103,2020-06-16T12:13:52Z,2020-06-16T18:22:51Z,2020-06-16T18:22:57Z,MERGED,True,2,1,2,https://github.com/hydra,Bf merges 20200616,9,[],https://github.com/cleanflight/cleanflight/pull/3103,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3103,,,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3105,2020-06-26T19:24:01Z,2020-06-30T16:06:53Z,2020-07-09T19:43:19Z,CLOSED,False,54,6,5,https://github.com/robert-b,a left over from the 8-bit world.,7,[],https://github.com/cleanflight/cleanflight/pull/3105,https://github.com/robert-b,1,https://github.com/cleanflight/cleanflight/pull/3105,now the reference vector is closer to where it should be.,now the reference vector is closer to where it should be.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3105,2020-06-26T19:24:01Z,2020-06-30T16:06:53Z,2020-07-09T19:43:19Z,CLOSED,False,54,6,5,https://github.com/robert-b,a left over from the 8-bit world.,7,[],https://github.com/cleanflight/cleanflight/pull/3105,https://github.com/Quick-Flash,2,https://github.com/cleanflight/cleanflight/pull/3105#issuecomment-650630083,now the reference vector is closer to where it should be.,"Intersting, emuboost but only having effect near center stick and that effect slows down as you move your stick. If this is the effect you are going for you might want to try setpoint instead of stick deflection as that will have a more uniform feel and tune across different rates.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3105,2020-06-26T19:24:01Z,2020-06-30T16:06:53Z,2020-07-09T19:43:19Z,CLOSED,False,54,6,5,https://github.com/robert-b,a left over from the 8-bit world.,7,[],https://github.com/cleanflight/cleanflight/pull/3105,https://github.com/hydra,3,https://github.com/cleanflight/cleanflight/pull/3105#issuecomment-650737786,now the reference vector is closer to where it should be.,@robert-b Can you update the title and description with more details on the proposed change please.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3105,2020-06-26T19:24:01Z,2020-06-30T16:06:53Z,2020-07-09T19:43:19Z,CLOSED,False,54,6,5,https://github.com/robert-b,a left over from the 8-bit world.,7,[],https://github.com/cleanflight/cleanflight/pull/3105,https://github.com/robert-b,4,https://github.com/cleanflight/cleanflight/pull/3105#issuecomment-650746379,now the reference vector is closer to where it should be.,"the title is correct.
in the 8bit world, aka multiwii, float's where expensive.
nowadays summing up float's using an int is bad practice.
not clean at all.
and when looking at the gaussian noise distribution, the reference vector for the sensor fusion might get screwed up.
https://github.com/multiwii/baseflight/blob/e582e0ce6321b7dd2293a60264e1040d0cbac5a4/src/sensors.c#L276
https://github.com/multiwii/multiwii-firmware/blob/e957a701844a9ecf0d19ac6a7e3ea1e8d81cc43b/Sensors.cpp#L232
those converting the sources it made a bad job ;-)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3105,2020-06-26T19:24:01Z,2020-06-30T16:06:53Z,2020-07-09T19:43:19Z,CLOSED,False,54,6,5,https://github.com/robert-b,a left over from the 8-bit world.,7,[],https://github.com/cleanflight/cleanflight/pull/3105,https://github.com/robert-b,5,https://github.com/cleanflight/cleanflight/pull/3105#issuecomment-650761532,now the reference vector is closer to where it should be.,"the scope of the pr should only be:
bcd22df
i overlooked the dynamic view of github.
the changes beyond can be added on request.
as well as rest of my work on propwash detection.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3105,2020-06-26T19:24:01Z,2020-06-30T16:06:53Z,2020-07-09T19:43:19Z,CLOSED,False,54,6,5,https://github.com/robert-b,a left over from the 8-bit world.,7,[],https://github.com/cleanflight/cleanflight/pull/3105,https://github.com/hydra,6,https://github.com/cleanflight/cleanflight/pull/3105#issuecomment-652425343,now the reference vector is closer to where it should be.,"@robert-b ahh, so the original port from Multiwii (8-bit) to the F1 (32-bit) didn't use floats because the F1 doesn't have an FPU, so it's not so much a left-over as you might think.  Only since the F3 have we had an FPU.  It's more of a left-over from the F1 days 😄
A better title, so that others can follow better, might have been 'Use floats for accelerometer calibration for better precision'.  Can you create a new PR or update this PR's branch with just bcd22df please?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3105,2020-06-26T19:24:01Z,2020-06-30T16:06:53Z,2020-07-09T19:43:19Z,CLOSED,False,54,6,5,https://github.com/robert-b,a left over from the 8-bit world.,7,[],https://github.com/cleanflight/cleanflight/pull/3105,https://github.com/robert-b,7,https://github.com/cleanflight/cleanflight/pull/3105#issuecomment-653073829,now the reference vector is closer to where it should be.,"hmm, the availabilty of floats is not fpu dependent.
with an fpu the code is executed slightly faster.
even on an stm32f1 the code is wrong.
i am off for the next few days ...",True,{'THUMBS_UP': ['https://github.com/haslinghuis']}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3105,2020-06-26T19:24:01Z,2020-06-30T16:06:53Z,2020-07-09T19:43:19Z,CLOSED,False,54,6,5,https://github.com/robert-b,a left over from the 8-bit world.,7,[],https://github.com/cleanflight/cleanflight/pull/3105,https://github.com/hydra,8,https://github.com/cleanflight/cleanflight/pull/3105#issuecomment-656128111,now the reference vector is closer to where it should be.,"@robert-b yes, it was partly that, and partly that using floats means you have to include math libraries, which has an impact on the flash size.
Please make the PR to fix when you can.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3106,2020-06-28T11:27:28Z,2020-07-01T13:43:33Z,2020-07-01T13:44:11Z,MERGED,True,20,1,1,https://github.com/hydra,Support SPRACINGF3NEO Rev D and later.,1,[],https://github.com/cleanflight/cleanflight/pull/3106,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3106,"Rev A through C = 1-3, Prototypes Only.
Rev D = 4, Limited distribution. (Gyro on SPI 1, OSD on SPI 3)
Rev E = 5, Retail sales. (Gyro on SPI 3, OSD on SPI 1)","Rev A through C = 1-3, Prototypes Only.
Rev D = 4, Limited distribution. (Gyro on SPI 1, OSD on SPI 3)
Rev E = 5, Retail sales. (Gyro on SPI 3, OSD on SPI 1)",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3107,2020-06-28T11:33:57Z,2020-07-01T13:43:56Z,2020-07-01T13:43:59Z,MERGED,True,11,1,2,https://github.com/hydra,Provide a way for users to easily create custom target headers.,1,[],https://github.com/cleanflight/cleanflight/pull/3107,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3107,"To build a custom target:

create YOUR_TARGET.mk file, empty.
create YOUR_TARGET.h file, empty.
in YOUR_TARGET.h file, add '#include ""target.h""` as required.
in YOUR_TARGET.h file, #undef/#define whatever you like.
Compile with make TARGET=YOUR_TARGET.
Flash the generated obj\cleanflight_x.x.x_YOUR_TARGET.hex
e.g.

SPRACINGF3NEO_CUSTOM1.h
SPRACINGF3NEO_CUSTOM1.mk
make TARGET=SPRACINGF3NEO_CUSTOM1

For a more complete example, see this commit:
hydra@9b16fc0

Handy when the code compiles, but no longer fits in flash due to all the
different hardware support compiled in by default.
Useful when you need custom binaries, but don't want your changes interfering with the base target files.","To build a custom target:

create YOUR_TARGET.mk file, empty.
create YOUR_TARGET.h file, empty.
in YOUR_TARGET.h file, add '#include ""target.h""` as required.
in YOUR_TARGET.h file, #undef/#define whatever you like.
Compile with make TARGET=YOUR_TARGET.
Flash the generated obj\cleanflight_x.x.x_YOUR_TARGET.hex
e.g.

SPRACINGF3NEO_CUSTOM1.h
SPRACINGF3NEO_CUSTOM1.mk
make TARGET=SPRACINGF3NEO_CUSTOM1

For a more complete example, see this commit:
hydra@9b16fc0

Handy when the code compiles, but no longer fits in flash due to all the
different hardware support compiled in by default.
Useful when you need custom binaries, but don't want your changes interfering with the base target files.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,1,https://github.com/cleanflight/cleanflight/pull/3111,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,2,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672846565,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra",If it help we can do it same for the other I2C Ports,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/ledvinap,3,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672894713,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L226 refers to

  
    
      cleanflight/src/main/drivers/bus_i2c_hal_init.c
    
    
         Line 215
      in
      7cd4179
    
  
  
    

        
          
           static void i2cClockComputeRaw(uint32_t pclkFreq, int i2cFreqKhz, int presc, int dfcoeff, 
        
    
  


You are simply overclocking I2C (4 times), with wrong timing (see reference manual). The results are unpredictable at best.
IIRC I2C runs in blocking mode in CF/BF, so I2C transaction will block CPU/waste CPU time. Simply don't use I2C for anything data intensive (like Gyro),, SPI is considerably faster...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,4,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672899408,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","So We cannot use 216Mhz for I2C ?. We can only use 54Mhz ?
For stm32f7  clock 216mhz",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,5,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672902615,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra",As far as CPU usage is lower and we are getting more time to compute other things. So may be overclocking was good. But we are just changing the source right? Since the i2c clock is same at 800k,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/ledvinap,6,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672908667,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","It is possible to use 216Mhz for I2C (there may be clock limit for I2C block, but I didn't find it), but you must update I2C timing accordingly (to adjust I2C clock speed). The gain will be zero or negligible (you can gain few cycles on clock synchronization, probably less than 3 cycles per i2c byte transferred - far less  than 1%).
It is possible to overclock I2C (
  
    
      cleanflight/src/main/drivers/bus_i2c_hal_init.c
    
    
         Line 347
      in
      7cd4179
    
  
  
    

        
          
           pHandle->Init.Timing = i2cClockTIMINGR(i2cPclk, pDev->overClock ? 800 : 400, 0); 
        
    
  

), with possible consequences.
You overclocked I2C to 2400kHz ..",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,7,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672910966,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra",Does cleanflight stm32 codes are generated from stm32cubemx ? Since i have experimented these changes from changing and confirming from stm32cubemx. And it haven't gave me any errors. Since there is a feature in stm32cubemx that if anything is wrong than it is shows red color.,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,8,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672914294,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","See the PCLK1 IS AT 54MHZ By default.

But if i change the source of the clock than

so there is no error from stm32cubemx
Look at the i2c1 clock mux section",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/ledvinap,9,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672924107,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","That means that I2C core can run on 216 MHz clock. There is minimum I2C core clock frequency for given I2C bus speed (see datasheet/reference manual). There is negligible (if any) gain from using higher core clock (and IIRC 16MHz is enough for 1000kbps I2C bus).
As I stated above, you can overclock I2C bus (changing 800 to higher value), without changing core core clock (there is limit mentioned in datasheet).
All bus devices must handle this overclocking correctly (it will in most cases violate operation conditions, but it may still work).
It is very bad idea overclock by default in project like CF/BF, with different HW boards (overclock to 800kHz is supported as configuration option) ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,10,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672934221,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra",Ok understood. bdw Does bf/cf uses stm32cubemx to generate hardware peripherals codes ?,True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/ledvinap,11,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672951708,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","Othres will probably know better.
IMO only stdperiph/HAL libraries are used, BF uses own (sometimes optimized) abstraction layer. You can probably generate config  from Cube, compare it against source and pick changes ...",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,12,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-672953566,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","Thank you. I am asking these question since i have made some changes to my stm32cubemx example to exactly cleanflight but cleanflight is getting output at 88us. and mine is getting output at 96us so there is this gape. and everything is just copy and paste from cleanflight. So may there is one minor optimization which have been done in cleanflight. And i haven't found it yet.
PS: And what about clock configuration is this generated from stm32cubemx ?",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/Robokishan,13,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-673313701,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","Reading at the comment cleanflight also doing overclocking to stm32f7  to 240mhz normaly it is at 216mhz

  
    
      cleanflight/src/main/startup/system_stm32f7xx.c
    
    
         Line 265
      in
      7cd4179
    
  
  
    

        
          
           { 480, RCC_PLLP_DIV2, 10 }, // 240 MHz",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3111,2020-08-12T12:38:28Z,2020-09-09T08:13:15Z,2020-09-09T08:13:15Z,CLOSED,False,1,1,1,https://github.com/Robokishan,CLOCK SOURCE MODIFIED FOR I2C1,1,[],https://github.com/cleanflight/cleanflight/pull/3111,https://github.com/hydra,14,https://github.com/cleanflight/cleanflight/pull/3111#issuecomment-689404469,"Hello so i was learning the code for cleanflight and i have improvement for the i2c. I have NUCLEO-F7 and mpu6050 and hmc5883l. i was having 88us avg in gyro reading. which is fine. by seeing the code in here https://github.com/cleanflight/cleanflight/blob/master/src/main/startup/system_stm32f7xx.c#L228
the clock for i2c is set from pclk1.
and i have attached the screen shot here i am having cpu time almost 50% and gyro avg is at 88us. THIS IS DEFAULT CLEANFLIGHT FIRMWARE

Now I Changed that line ofcourse i2c source clock to sysclock since the board has 216Mhz and pclk1 is at 54mhz so i think it is a good to take advantage of that. and changed lines to this

and then the results are signficance change in cpu time its dropped to 2% I exactly do not know how did it happened but i think i2c clock source is having bad time with cpu usage. Please confirm if any other stm32f7 board has same thing happening Since i do not have any other stm32f7 board other than nucleo-f7. THIS IS MODIFIED CLEANFLIGHT FIRMWARE FOR I2C CLOCK

Sensor readings of acc, gyro and mags are perfect board is giving perfect orientation
@hydra","As noted by @ledvinap the approach in this PR is incorrect. While overclocking some cpus and gyros may work, the components are not rated for those speeds by their manufacturers so it's probably not a good idea.
On a hardware level when over-clocking you're also using more power and stressing components beyond their specifications which may also cause early component failure which in turn can have an adverse perception of reliability/durability/stability.
I agree with @jflyper - ultimately using DMA for the transactions will be better and also frees up the CPU while the data transfer is in progress.",True,{}
cleanflight/cleanflight,https://github.com/cleanflight/cleanflight,3112,2020-09-07T19:10:02Z,2020-09-08T19:39:10Z,2020-09-08T19:39:15Z,MERGED,True,33,16,15,https://github.com/hydra,Bf merge 20200907,15,[],https://github.com/cleanflight/cleanflight/pull/3112,https://github.com/hydra,1,https://github.com/cleanflight/cleanflight/pull/3112,,,True,{}
