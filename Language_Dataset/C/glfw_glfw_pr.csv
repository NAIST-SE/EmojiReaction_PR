glfw/glfw,https://github.com/glfw/glfw,723,2016-03-06T04:26:29Z,2016-03-06T08:01:19Z,2016-07-07T13:37:50Z,MERGED,True,147,4,5,https://github.com/chp-io,Add support for wgl window transparency (Vista and later),6,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/723,https://github.com/chp-io,1,https://github.com/glfw/glfw/pull/723,"This method uses desktop composition for efficient window transparency.
Since windows 8, composition is always on. If composition is disabled on vista or 7, transparency is simply ignored. Also, since it requires a pixel format supporting compositing, if we can't find it (e.g. windows xp) we ignore transparency similarly to how @datenwolf is doing it for glx's frame buffer configs.
This shouldn't be tested in a virtual machine.
On a side note, desktop composition can be enabled in the ""Performance Options"" dialog (win+r systempropertiesperformance). It is on by default but won't work unless the Aero score index has been refreshed after installing gpu drivers (Control Panel\All Control Panel Items\Performance Information and Tools).","This method uses desktop composition for efficient window transparency.
Since windows 8, composition is always on. If composition is disabled on vista or 7, transparency is simply ignored. Also, since it requires a pixel format supporting compositing, if we can't find it (e.g. windows xp) we ignore transparency similarly to how @datenwolf is doing it for glx's frame buffer configs.
This shouldn't be tested in a virtual machine.
On a side note, desktop composition can be enabled in the ""Performance Options"" dialog (win+r systempropertiesperformance). It is on by default but won't work unless the Aero score index has been refreshed after installing gpu drivers (Control Panel\All Control Panel Items\Performance Information and Tools).",True,{}
glfw/glfw,https://github.com/glfw/glfw,723,2016-03-06T04:26:29Z,2016-03-06T08:01:19Z,2016-07-07T13:37:50Z,MERGED,True,147,4,5,https://github.com/chp-io,Add support for wgl window transparency (Vista and later),6,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/723,https://github.com/chp-io,2,https://github.com/glfw/glfw/pull/723#issuecomment-192813030,"This method uses desktop composition for efficient window transparency.
Since windows 8, composition is always on. If composition is disabled on vista or 7, transparency is simply ignored. Also, since it requires a pixel format supporting compositing, if we can't find it (e.g. windows xp) we ignore transparency similarly to how @datenwolf is doing it for glx's frame buffer configs.
This shouldn't be tested in a virtual machine.
On a side note, desktop composition can be enabled in the ""Performance Options"" dialog (win+r systempropertiesperformance). It is on by default but won't work unless the Aero score index has been refreshed after installing gpu drivers (Control Panel\All Control Panel Items\Performance Information and Tools).","I tested it on Windows Vista, 7, 8, 8.1 and 10.
It ins't so straight forward to achieve transparency with opengl on Windows but I hope that you will find that this is heading to the right direction. This method has quirks which can all be resolved with hacks but by comparison to other methods, this method is the fastest. The glReadPixels or BitBlt methods to achieve transparency use a lot of cpu when fullscreen vs almost idle with Dwm (bellow 1%).
It is worth also noting that there is a color key method on layered windows. This would require a different type of glfw hint because all pixels painted by the window in this color will be transparent and forces the user to not use that color in his rendering.",True,{}
glfw/glfw,https://github.com/glfw/glfw,723,2016-03-06T04:26:29Z,2016-03-06T08:01:19Z,2016-07-07T13:37:50Z,MERGED,True,147,4,5,https://github.com/chp-io,Add support for wgl window transparency (Vista and later),6,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/723,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/723#issuecomment-192825429,"This method uses desktop composition for efficient window transparency.
Since windows 8, composition is always on. If composition is disabled on vista or 7, transparency is simply ignored. Also, since it requires a pixel format supporting compositing, if we can't find it (e.g. windows xp) we ignore transparency similarly to how @datenwolf is doing it for glx's frame buffer configs.
This shouldn't be tested in a virtual machine.
On a side note, desktop composition can be enabled in the ""Performance Options"" dialog (win+r systempropertiesperformance). It is on by default but won't work unless the Aero score index has been refreshed after installing gpu drivers (Control Panel\All Control Panel Items\Performance Information and Tools).",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,723,2016-03-06T04:26:29Z,2016-03-06T08:01:19Z,2016-07-07T13:37:50Z,MERGED,True,147,4,5,https://github.com/chp-io,Add support for wgl window transparency (Vista and later),6,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/723,https://github.com/thomthom,4,https://github.com/glfw/glfw/pull/723#issuecomment-195742200,"This method uses desktop composition for efficient window transparency.
Since windows 8, composition is always on. If composition is disabled on vista or 7, transparency is simply ignored. Also, since it requires a pixel format supporting compositing, if we can't find it (e.g. windows xp) we ignore transparency similarly to how @datenwolf is doing it for glx's frame buffer configs.
This shouldn't be tested in a virtual machine.
On a side note, desktop composition can be enabled in the ""Performance Options"" dialog (win+r systempropertiesperformance). It is on by default but won't work unless the Aero score index has been refreshed after installing gpu drivers (Control Panel\All Control Panel Items\Performance Information and Tools).","I checked out 43f116f and used cmake -G ""Visual Studio 12 2013 Win64"" .. to create the solution and then tried to build with VS2013 - got these errors:

Anyone else sees this? Or have I borked my build?",True,{}
glfw/glfw,https://github.com/glfw/glfw,723,2016-03-06T04:26:29Z,2016-03-06T08:01:19Z,2016-07-07T13:37:50Z,MERGED,True,147,4,5,https://github.com/chp-io,Add support for wgl window transparency (Vista and later),6,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/723,https://github.com/thomthom,5,https://github.com/glfw/glfw/pull/723#issuecomment-195743096,"This method uses desktop composition for efficient window transparency.
Since windows 8, composition is always on. If composition is disabled on vista or 7, transparency is simply ignored. Also, since it requires a pixel format supporting compositing, if we can't find it (e.g. windows xp) we ignore transparency similarly to how @datenwolf is doing it for glx's frame buffer configs.
This shouldn't be tested in a virtual machine.
On a side note, desktop composition can be enabled in the ""Performance Options"" dialog (win+r systempropertiesperformance). It is on by default but won't work unless the Aero score index has been refreshed after installing gpu drivers (Control Panel\All Control Panel Items\Performance Information and Tools).","I removed the inline keyword of isWindowsVersionOrGreater and then it built fine. I removed it based on a hint from ReSharper++.

Once built it's working fine on my Win10 machine: (nVidia GeForce GTX 750)

I'll try on Win7 later.",True,"{'HEART': ['https://github.com/andsveking', 'https://github.com/kritzikratzi', 'https://github.com/raysan5']}"
glfw/glfw,https://github.com/glfw/glfw,728,2016-03-23T22:03:14Z,2016-03-23T22:06:15Z,2016-07-07T13:38:07Z,CLOSED,False,32,21,1,https://github.com/IntellectualKitty,Remove unnecessary and redundant joystick event polling for OS X,2,[],https://github.com/glfw/glfw/pull/728,https://github.com/IntellectualKitty,1,https://github.com/glfw/glfw/pull/728,"Removed unnecessary joystick event polling when checking for the presence of a joystick or when getting its name.  Removed redundant joystick event polling by splitting pollJoystickEvents into two functions, pollJoystickAxisEvents and pollJoystickButtonEvents, since both axis and button events were polled each time pollJoystickEvents was called.","Removed unnecessary joystick event polling when checking for the presence of a joystick or when getting its name.  Removed redundant joystick event polling by splitting pollJoystickEvents into two functions, pollJoystickAxisEvents and pollJoystickButtonEvents, since both axis and button events were polled each time pollJoystickEvents was called.",True,{}
glfw/glfw,https://github.com/glfw/glfw,728,2016-03-23T22:03:14Z,2016-03-23T22:06:15Z,2016-07-07T13:38:07Z,CLOSED,False,32,21,1,https://github.com/IntellectualKitty,Remove unnecessary and redundant joystick event polling for OS X,2,[],https://github.com/glfw/glfw/pull/728,https://github.com/IntellectualKitty,2,https://github.com/glfw/glfw/pull/728#issuecomment-200563118,"Removed unnecessary joystick event polling when checking for the presence of a joystick or when getting its name.  Removed redundant joystick event polling by splitting pollJoystickEvents into two functions, pollJoystickAxisEvents and pollJoystickButtonEvents, since both axis and button events were polled each time pollJoystickEvents was called.","This is my first attempt at working on GitHub, and I'm having some difficulty.  So, if this doesn't work properly, please let me know and I'll be glad to try and fix it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,729,2016-03-23T22:13:58Z,2016-03-29T12:01:32Z,2016-03-29T12:02:02Z,CLOSED,False,32,20,1,https://github.com/IntellectualKitty,Remove unnecessary joystick polling,1,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/729,https://github.com/IntellectualKitty,1,https://github.com/glfw/glfw/pull/729,"Removed unnecessary joystick event polling on OS X.  Specifically, polling was unnecessary when getting the joystick name or when determining if a joystick is present.  And the pollJoystickEvents function was split into pollJoystickAxisEvents and pollJoystickButtonEvents to prevent unnecessary polling for the opposite element type.","Removed unnecessary joystick event polling on OS X.  Specifically, polling was unnecessary when getting the joystick name or when determining if a joystick is present.  And the pollJoystickEvents function was split into pollJoystickAxisEvents and pollJoystickButtonEvents to prevent unnecessary polling for the opposite element type.",True,{}
glfw/glfw,https://github.com/glfw/glfw,729,2016-03-23T22:13:58Z,2016-03-29T12:01:32Z,2016-03-29T12:02:02Z,CLOSED,False,32,20,1,https://github.com/IntellectualKitty,Remove unnecessary joystick polling,1,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/729,https://github.com/IntellectualKitty,2,https://github.com/glfw/glfw/pull/729#issuecomment-201000495,"Removed unnecessary joystick event polling on OS X.  Specifically, polling was unnecessary when getting the joystick name or when determining if a joystick is present.  And the pollJoystickEvents function was split into pollJoystickAxisEvents and pollJoystickButtonEvents to prevent unnecessary polling for the opposite element type.","I hope that this was helpful.  Also, this was my first attempt at doing anything more than simple commenting on GitHub, so I hope that I did the pull request correctly.
I thought it would more helpful to write the code and make a pull request rather than just raising it as an issue, but if you have a preference please let me know.",True,"{'HEART': ['https://github.com/dmitshur'], 'THUMBS_UP': ['https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,729,2016-03-23T22:13:58Z,2016-03-29T12:01:32Z,2016-03-29T12:02:02Z,CLOSED,False,32,20,1,https://github.com/IntellectualKitty,Remove unnecessary joystick polling,1,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/729,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/729#issuecomment-201191487,"Removed unnecessary joystick event polling on OS X.  Specifically, polling was unnecessary when getting the joystick name or when determining if a joystick is present.  And the pollJoystickEvents function was split into pollJoystickAxisEvents and pollJoystickButtonEvents to prevent unnecessary polling for the opposite element type.","It definitely was! I've commented on two minor issues, but everything related to GitHub looks good.
Don't really have a preference. Either way is fine.",True,{}
glfw/glfw,https://github.com/glfw/glfw,729,2016-03-23T22:13:58Z,2016-03-29T12:01:32Z,2016-03-29T12:02:02Z,CLOSED,False,32,20,1,https://github.com/IntellectualKitty,Remove unnecessary joystick polling,1,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/729,https://github.com/IntellectualKitty,4,https://github.com/glfw/glfw/pull/729#issuecomment-201529248,"Removed unnecessary joystick event polling on OS X.  Specifically, polling was unnecessary when getting the joystick name or when determining if a joystick is present.  And the pollJoystickEvents function was split into pollJoystickAxisEvents and pollJoystickButtonEvents to prevent unnecessary polling for the opposite element type.",I'm glad this was helpful.,True,{}
glfw/glfw,https://github.com/glfw/glfw,729,2016-03-23T22:13:58Z,2016-03-29T12:01:32Z,2016-03-29T12:02:02Z,CLOSED,False,32,20,1,https://github.com/IntellectualKitty,Remove unnecessary joystick polling,1,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/729,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/729#issuecomment-202855349,"Removed unnecessary joystick event polling on OS X.  Specifically, polling was unnecessary when getting the joystick name or when determining if a joystick is present.  And the pollJoystickEvents function was split into pollJoystickAxisEvents and pollJoystickButtonEvents to prevent unnecessary polling for the opposite element type.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,735,2016-04-09T00:03:14Z,2016-05-02T19:56:48Z,2016-11-04T10:08:03Z,CLOSED,False,143,47,4,https://github.com/linkmauve,Misc Wayland fixes,6,['Wayland'],https://github.com/glfw/glfw/pull/735,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/735,"This implements mostly everything still missing and implementable in the Wayland backend from 3.2.
The last remaining implementable item is clipboard support, but I don’t know much about this.","This implements mostly everything still missing and implementable in the Wayland backend from 3.2.
The last remaining implementable item is clipboard support, but I don’t know much about this.",True,{}
glfw/glfw,https://github.com/glfw/glfw,735,2016-04-09T00:03:14Z,2016-05-02T19:56:48Z,2016-11-04T10:08:03Z,CLOSED,False,143,47,4,https://github.com/linkmauve,Misc Wayland fixes,6,['Wayland'],https://github.com/glfw/glfw/pull/735,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/735#issuecomment-216344144,"This implements mostly everything still missing and implementable in the Wayland backend from 3.2.
The last remaining implementable item is clipboard support, but I don’t know much about this.",Looks good. I updated the commit messages to fit within 50/72 characters. Edit: ...and merged this.,True,{}
glfw/glfw,https://github.com/glfw/glfw,739,2016-04-16T23:30:13Z,2016-05-02T20:01:42Z,2016-05-02T20:01:42Z,CLOSED,False,15,8,1,https://github.com/BrandonSchaefer,Need to create the native window before creating the context. Fixes button states,2,"['bug', 'Mir']",https://github.com/glfw/glfw/pull/739,https://github.com/BrandonSchaefer,1,https://github.com/glfw/glfw/pull/739,As creating the context creates the egl surface.,As creating the context creates the egl surface.,True,{}
glfw/glfw,https://github.com/glfw/glfw,739,2016-04-16T23:30:13Z,2016-05-02T20:01:42Z,2016-05-02T20:01:42Z,CLOSED,False,15,8,1,https://github.com/BrandonSchaefer,Need to create the native window before creating the context. Fixes button states,2,"['bug', 'Mir']",https://github.com/glfw/glfw/pull/739,https://github.com/BrandonSchaefer,2,https://github.com/glfw/glfw/pull/739#issuecomment-211109457,As creating the context creates the egl surface.,"Also this is fairly critical since you cant run any apps on mir because of it. Im not sure what changed, but now it just creates the mir needed things such as the NATIVE WINDOW before creating to the egl context which requires the NATIVE WINDOW :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,739,2016-04-16T23:30:13Z,2016-05-02T20:01:42Z,2016-05-02T20:01:42Z,CLOSED,False,15,8,1,https://github.com/BrandonSchaefer,Need to create the native window before creating the context. Fixes button states,2,"['bug', 'Mir']",https://github.com/glfw/glfw/pull/739,https://github.com/BrandonSchaefer,3,https://github.com/glfw/glfw/pull/739#issuecomment-211109937,As creating the context creates the egl surface.,I've another bug ... that Ill push to this pull. Fixes button states not being correct (ie. right left right left would fail to get the current button state). Now it works!,True,{}
glfw/glfw,https://github.com/glfw/glfw,739,2016-04-16T23:30:13Z,2016-05-02T20:01:42Z,2016-05-02T20:01:42Z,CLOSED,False,15,8,1,https://github.com/BrandonSchaefer,Need to create the native window before creating the context. Fixes button states,2,"['bug', 'Mir']",https://github.com/glfw/glfw/pull/739,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/739#issuecomment-212560723,As creating the context creates the egl surface.,Will review and merge asap. Thanks!,True,{}
glfw/glfw,https://github.com/glfw/glfw,739,2016-04-16T23:30:13Z,2016-05-02T20:01:42Z,2016-05-02T20:01:42Z,CLOSED,False,15,8,1,https://github.com/BrandonSchaefer,Need to create the native window before creating the context. Fixes button states,2,"['bug', 'Mir']",https://github.com/glfw/glfw/pull/739,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/739#issuecomment-216345724,As creating the context creates the egl surface.,Thank you! Merged with updated commit messages.,True,{}
glfw/glfw,https://github.com/glfw/glfw,741,2016-04-18T11:22:07Z,2016-05-04T14:27:48Z,2016-07-07T13:38:14Z,CLOSED,False,11,2,1,https://github.com/dougbinks,Fixes  #740 - size callbacks incorrect on monitor orientation change,1,"['bug', 'Windows']",https://github.com/glfw/glfw/pull/741,https://github.com/dougbinks,1,https://github.com/glfw/glfw/pull/741,"The WM_SIZE callback  of a fullscreen window appears incorrectly inverts the width & height when the monitor orientation is changed from landscape to portrait or visa versa.
This fix uses the glfwGet*Size functions to get the correct size via the client area. Although the functions for window and framebuffer size are currently the same on windows I've use both here in case future window scaling changes cause these to differ - but this may be over engineering things and a single get size call may be preferable.","The WM_SIZE callback  of a fullscreen window appears incorrectly inverts the width & height when the monitor orientation is changed from landscape to portrait or visa versa.
This fix uses the glfwGet*Size functions to get the correct size via the client area. Although the functions for window and framebuffer size are currently the same on windows I've use both here in case future window scaling changes cause these to differ - but this may be over engineering things and a single get size call may be preferable.",True,{}
glfw/glfw,https://github.com/glfw/glfw,743,2016-04-20T10:42:02Z,2016-04-20T11:05:50Z,2016-07-07T13:38:01Z,CLOSED,False,1,1,1,https://github.com/erlend-sh,Replaced old Sourceforge link with new link to Discourse forum,1,"['bug', 'documentation']",https://github.com/glfw/glfw/pull/743,https://github.com/erlend-sh,1,https://github.com/glfw/glfw/pull/743,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,743,2016-04-20T10:42:02Z,2016-04-20T11:05:50Z,2016-07-07T13:38:01Z,CLOSED,False,1,1,1,https://github.com/erlend-sh,Replaced old Sourceforge link with new link to Discourse forum,1,"['bug', 'documentation']",https://github.com/glfw/glfw/pull/743,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/743#issuecomment-212411848,,Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,753,2016-04-27T12:05:51Z,2016-04-27T13:45:08Z,2016-04-27T22:47:53Z,CLOSED,False,1,1,1,https://github.com/IntellectualKitty,Problem checking for pre-existing joystick in matchCallback in cocoa_jo…,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/753,https://github.com/IntellectualKitty,1,https://github.com/glfw/glfw/pull/753,"…ystick.m
The matchCallback function has an initial loop to filter out redundant joystick additions based on matching deviceRef values.  However, the if statement incorrectly combines this test with the condition that the joystick is not present, which is obviously incorrect.","…ystick.m
The matchCallback function has an initial loop to filter out redundant joystick additions based on matching deviceRef values.  However, the if statement incorrectly combines this test with the condition that the joystick is not present, which is obviously incorrect.",True,{}
glfw/glfw,https://github.com/glfw/glfw,753,2016-04-27T12:05:51Z,2016-04-27T13:45:08Z,2016-04-27T22:47:53Z,CLOSED,False,1,1,1,https://github.com/IntellectualKitty,Problem checking for pre-existing joystick in matchCallback in cocoa_jo…,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/753,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/753#issuecomment-215087842,"…ystick.m
The matchCallback function has an initial loop to filter out redundant joystick additions based on matching deviceRef values.  However, the if statement incorrectly combines this test with the condition that the joystick is not present, which is obviously incorrect.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,753,2016-04-27T12:05:51Z,2016-04-27T13:45:08Z,2016-04-27T22:47:53Z,CLOSED,False,1,1,1,https://github.com/IntellectualKitty,Problem checking for pre-existing joystick in matchCallback in cocoa_jo…,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/753,https://github.com/IntellectualKitty,3,https://github.com/glfw/glfw/pull/753#issuecomment-215254529,"…ystick.m
The matchCallback function has an initial loop to filter out redundant joystick additions based on matching deviceRef values.  However, the if statement incorrectly combines this test with the condition that the joystick is not present, which is obviously incorrect.",You're welcome!,True,{}
glfw/glfw,https://github.com/glfw/glfw,754,2016-04-27T12:29:51Z,2016-04-27T13:36:28Z,2021-10-24T16:22:54Z,CLOSED,False,1,1,1,https://github.com/IntellectualKitty,calloc error in cocoa_joystick.m,1,['wontfix'],https://github.com/glfw/glfw/pull/754,https://github.com/IntellectualKitty,1,https://github.com/glfw/glfw/pull/754,The calloc call for js->buttons uses 1 instead of sizeof(unsigned char) for the element size.,The calloc call for js->buttons uses 1 instead of sizeof(unsigned char) for the element size.,True,{}
glfw/glfw,https://github.com/glfw/glfw,754,2016-04-27T12:29:51Z,2016-04-27T13:36:28Z,2021-10-24T16:22:54Z,CLOSED,False,1,1,1,https://github.com/IntellectualKitty,calloc error in cocoa_joystick.m,1,['wontfix'],https://github.com/glfw/glfw/pull/754,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/754#issuecomment-215076030,The calloc call for js->buttons uses 1 instead of sizeof(unsigned char) for the element size.,I believe sizeof char is guaranteed to be 1 by the C standard. Have you come across a counter-example?,True,{}
glfw/glfw,https://github.com/glfw/glfw,754,2016-04-27T12:29:51Z,2016-04-27T13:36:28Z,2021-10-24T16:22:54Z,CLOSED,False,1,1,1,https://github.com/IntellectualKitty,calloc error in cocoa_joystick.m,1,['wontfix'],https://github.com/glfw/glfw/pull/754,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/754#issuecomment-215084914,The calloc call for js->buttons uses 1 instead of sizeof(unsigned char) for the element size.,What @tombsar said.,True,{}
glfw/glfw,https://github.com/glfw/glfw,754,2016-04-27T12:29:51Z,2016-04-27T13:36:28Z,2021-10-24T16:22:54Z,CLOSED,False,1,1,1,https://github.com/IntellectualKitty,calloc error in cocoa_joystick.m,1,['wontfix'],https://github.com/glfw/glfw/pull/754,https://github.com/dmitshur,4,https://github.com/glfw/glfw/pull/754#issuecomment-215263339,The calloc call for js->buttons uses 1 instead of sizeof(unsigned char) for the element size.,"Question, does sizeof(unsigned char) have the same runtime performance as the constant 1?",True,{}
glfw/glfw,https://github.com/glfw/glfw,754,2016-04-27T12:29:51Z,2016-04-27T13:36:28Z,2021-10-24T16:22:54Z,CLOSED,False,1,1,1,https://github.com/IntellectualKitty,calloc error in cocoa_joystick.m,1,['wontfix'],https://github.com/glfw/glfw/pull/754,https://github.com/IntellectualKitty,5,https://github.com/glfw/glfw/pull/754#issuecomment-215265393,The calloc call for js->buttons uses 1 instead of sizeof(unsigned char) for the element size.,"The sizeof operator is evaluated at compilation time, so it has no effect on runtime performance.",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,755,2016-04-28T00:25:36Z,2016-05-02T21:05:05Z,2016-11-04T10:04:05Z,CLOSED,False,1,1,1,https://github.com/linkmauve,Use VK_API_VERSION_1_0 to make the Vulkan example build again,1,"['bug', 'Vulkan']",https://github.com/glfw/glfw/pull/755,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/755,The previous VK_API_VERSION define has been removed from recent headers.,The previous VK_API_VERSION define has been removed from recent headers.,True,{}
glfw/glfw,https://github.com/glfw/glfw,755,2016-04-28T00:25:36Z,2016-05-02T21:05:05Z,2016-11-04T10:04:05Z,CLOSED,False,1,1,1,https://github.com/linkmauve,Use VK_API_VERSION_1_0 to make the Vulkan example build again,1,"['bug', 'Vulkan']",https://github.com/glfw/glfw/pull/755,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/755#issuecomment-216363468,The previous VK_API_VERSION define has been removed from recent headers.,Fixed with 3f25610. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,756,2016-05-04T20:22:44Z,2016-05-05T12:22:57Z,2016-05-05T12:23:00Z,MERGED,True,0,5,1,https://github.com/BrandonSchaefer,"LP:1477285 Bug fixed, remove FIXME",1,['Mir'],https://github.com/glfw/glfw/pull/756,https://github.com/BrandonSchaefer,1,https://github.com/glfw/glfw/pull/756,"https://bugs.launchpad.net/ubuntu/+source/unity8-desktop-session/+bug/1308133
Was fixed (which what bug 1477285 was!)
Remove unneeded buffer swaps for the cursor.
(Hopefully the commit message is better this time... dont really use git very often!)","https://bugs.launchpad.net/ubuntu/+source/unity8-desktop-session/+bug/1308133
Was fixed (which what bug 1477285 was!)
Remove unneeded buffer swaps for the cursor.
(Hopefully the commit message is better this time... dont really use git very often!)",True,{}
glfw/glfw,https://github.com/glfw/glfw,757,2016-05-05T00:15:34Z,2016-05-05T12:15:44Z,2016-05-06T00:29:12Z,MERGED,True,19,0,1,https://github.com/linkmauve,Always make the window surface opaque,1,['Wayland'],https://github.com/glfw/glfw/pull/757,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/757,"This makes the examples and tests render as they do on other platforms,
with a black background instead of a transparent or semi-transparent
one.
Too bad, it made some examples look way better, but consistency is a good thing. Also waiting on #157 to provide the API to re-enable transparency.","This makes the examples and tests render as they do on other platforms,
with a black background instead of a transparent or semi-transparent
one.
Too bad, it made some examples look way better, but consistency is a good thing. Also waiting on #157 to provide the API to re-enable transparency.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,757,2016-05-05T00:15:34Z,2016-05-05T12:15:44Z,2016-05-06T00:29:12Z,MERGED,True,19,0,1,https://github.com/linkmauve,Always make the window surface opaque,1,['Wayland'],https://github.com/glfw/glfw/pull/757,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/757#issuecomment-217138867,"This makes the examples and tests render as they do on other platforms,
with a black background instead of a transparent or semi-transparent
one.
Too bad, it made some examples look way better, but consistency is a good thing. Also waiting on #157 to provide the API to re-enable transparency.","Hmm, I see I have more to learn about the new merge options. Sorry about losing your commit description.",True,{}
glfw/glfw,https://github.com/glfw/glfw,757,2016-05-05T00:15:34Z,2016-05-05T12:15:44Z,2016-05-06T00:29:12Z,MERGED,True,19,0,1,https://github.com/linkmauve,Always make the window surface opaque,1,['Wayland'],https://github.com/glfw/glfw/pull/757,https://github.com/jadahl,3,https://github.com/glfw/glfw/pull/757#issuecomment-217140252,"This makes the examples and tests render as they do on other platforms,
with a black background instead of a transparent or semi-transparent
one.
Too bad, it made some examples look way better, but consistency is a good thing. Also waiting on #157 to provide the API to re-enable transparency.","@elmindreda I don't think the patch is correct. What wl_surface_set_opaque_region() does is to notify what part of the surface is opaque. GLFW has no clue about the content of the frames it passes along, but as far as I can see (at least when using mesa) the buffers are still ARGB8888, not XRGB8888.
Only if we always glClear() with black, or request an XRGB framebuffer configuration would it be Ok to set the opaque region to the whole surface.",True,{}
glfw/glfw,https://github.com/glfw/glfw,757,2016-05-05T00:15:34Z,2016-05-05T12:15:44Z,2016-05-06T00:29:12Z,MERGED,True,19,0,1,https://github.com/linkmauve,Always make the window surface opaque,1,['Wayland'],https://github.com/glfw/glfw/pull/757,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/757#issuecomment-217142437,"This makes the examples and tests render as they do on other platforms,
with a black background instead of a transparent or semi-transparent
one.
Too bad, it made some examples look way better, but consistency is a good thing. Also waiting on #157 to provide the API to re-enable transparency.",@jadahl Noted. Will look into it.,True,{}
glfw/glfw,https://github.com/glfw/glfw,757,2016-05-05T00:15:34Z,2016-05-05T12:15:44Z,2016-05-06T00:29:12Z,MERGED,True,19,0,1,https://github.com/linkmauve,Always make the window surface opaque,1,['Wayland'],https://github.com/glfw/glfw/pull/757,https://github.com/linkmauve,5,https://github.com/glfw/glfw/pull/757#issuecomment-217226422,"This makes the examples and tests render as they do on other platforms,
with a black background instead of a transparent or semi-transparent
one.
Too bad, it made some examples look way better, but consistency is a good thing. Also waiting on #157 to provide the API to re-enable transparency.","jadahl, what XRGB8888 means is that the buffer has eight bits of padding where an ARGB8888 would have its alpha channel.  The representation is the same, only the way the compositor composites (or scanout) the buffer will change.",True,{}
glfw/glfw,https://github.com/glfw/glfw,757,2016-05-05T00:15:34Z,2016-05-05T12:15:44Z,2016-05-06T00:29:12Z,MERGED,True,19,0,1,https://github.com/linkmauve,Always make the window surface opaque,1,['Wayland'],https://github.com/glfw/glfw/pull/757,https://github.com/jadahl,6,https://github.com/glfw/glfw/pull/757#issuecomment-217317639,"This makes the examples and tests render as they do on other platforms,
with a black background instead of a transparent or semi-transparent
one.
Too bad, it made some examples look way better, but consistency is a good thing. Also waiting on #157 to provide the API to re-enable transparency.","It's probably often harmless yes, but for example a compositor that may still just use the full buffer to do a complete composition including alpha blending while only using the opaque region to determine whether a surface that would be hidden should be painted or not the compositor may end up not painting/replying to frame callbacks that surface while it still is actually visible.",True,{}
glfw/glfw,https://github.com/glfw/glfw,774,2016-06-06T15:00:48Z,2016-06-06T19:23:30Z,2016-07-12T20:27:49Z,MERGED,True,1,1,1,https://github.com/tombsar,Correct program name printed by tearing test,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/774,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/774,"The tearing test incorrectly calls itself ""iconify"" when printing usage information; probably just a copy-paste error.","The tearing test incorrectly calls itself ""iconify"" when printing usage information; probably just a copy-paste error.",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,774,2016-06-06T15:00:48Z,2016-06-06T19:23:30Z,2016-07-12T20:27:49Z,MERGED,True,1,1,1,https://github.com/tombsar,Correct program name printed by tearing test,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/774,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/774#issuecomment-224060994,"The tearing test incorrectly calls itself ""iconify"" when printing usage information; probably just a copy-paste error.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,775,2016-06-06T15:13:21Z,2016-06-06T19:25:14Z,2016-07-12T20:27:49Z,MERGED,True,3,0,1,https://github.com/tombsar,Add explanation of parameters to gamma test,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/775,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/775,"Unlike similar test programs (e.g. tearing.c), the gamma test does not explain the meanings of the optional parameters h and f. This patch adds these explanations to the usage text.","Unlike similar test programs (e.g. tearing.c), the gamma test does not explain the meanings of the optional parameters h and f. This patch adds these explanations to the usage text.",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,775,2016-06-06T15:13:21Z,2016-06-06T19:25:14Z,2016-07-12T20:27:49Z,MERGED,True,3,0,1,https://github.com/tombsar,Add explanation of parameters to gamma test,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/775,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/775#issuecomment-224061356,"Unlike similar test programs (e.g. tearing.c), the gamma test does not explain the meanings of the optional parameters h and f. This patch adds these explanations to the usage text.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,777,2016-06-08T12:32:34Z,2016-07-20T19:44:48Z,2016-07-20T19:44:50Z,CLOSED,False,2,0,1,https://github.com/gitter-badger,Add a Gitter chat badge to README.md,1,"['enhancement', 'wontfix', 'documentation']",https://github.com/glfw/glfw/pull/777,https://github.com/gitter-badger,1,https://github.com/glfw/glfw/pull/777,"glfw/glfw now has a Chat Room on Gitter
@elmindreda has just created a chat room. You can visit it here: https://gitter.im/glfw/glfw.
This pull-request adds this badge to your README.md:

If my aim is a little off, please let me know.
Happy chatting.
PS: Click here if you would prefer not to receive automatic pull-requests from Gitter in future.","glfw/glfw now has a Chat Room on Gitter
@elmindreda has just created a chat room. You can visit it here: https://gitter.im/glfw/glfw.
This pull-request adds this badge to your README.md:

If my aim is a little off, please let me know.
Happy chatting.
PS: Click here if you would prefer not to receive automatic pull-requests from Gitter in future.",True,{}
glfw/glfw,https://github.com/glfw/glfw,785,2016-06-14T04:30:37Z,2016-07-11T23:05:45Z,2017-01-28T22:26:14Z,CLOSED,False,14,12,1,https://github.com/ndogxj,Fix example build errors on VS 2010,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/785,https://github.com/ndogxj,1,https://github.com/glfw/glfw/pull/785,"According to C89, all block-local variables need to be declared at the beginning of the block. MSVC2013 relaxes this restriction.","According to C89, all block-local variables need to be declared at the beginning of the block. MSVC2013 relaxes this restriction.",True,{}
glfw/glfw,https://github.com/glfw/glfw,785,2016-06-14T04:30:37Z,2016-07-11T23:05:45Z,2017-01-28T22:26:14Z,CLOSED,False,14,12,1,https://github.com/ndogxj,Fix example build errors on VS 2010,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/785,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/785#issuecomment-225796566,"According to C89, all block-local variables need to be declared at the beginning of the block. MSVC2013 relaxes this restriction.","I do not think this patch is correct. You seem to have moved lines where variables are modified to before/after they are used by other code. i.e. vec3_norm(u,u) needs to be before the definition of S, and the definition of idet should come after the lines where s and c are modified given values, not before.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,785,2016-06-14T04:30:37Z,2016-07-11T23:05:45Z,2017-01-28T22:26:14Z,CLOSED,False,14,12,1,https://github.com/ndogxj,Fix example build errors on VS 2010,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/785,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/785#issuecomment-231745989,"According to C89, all block-local variables need to be declared at the beginning of the block. MSVC2013 relaxes this restriction.",What @tombsar said. This is a real bug but the fix is broken.,True,{}
glfw/glfw,https://github.com/glfw/glfw,785,2016-06-14T04:30:37Z,2016-07-11T23:05:45Z,2017-01-28T22:26:14Z,CLOSED,False,14,12,1,https://github.com/ndogxj,Fix example build errors on VS 2010,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/785,https://github.com/tombsar,4,https://github.com/glfw/glfw/pull/785#issuecomment-231962059,"According to C89, all block-local variables need to be declared at the beginning of the block. MSVC2013 relaxes this restriction.","-1 the merged commit does not address all of my concerns about changing code behaviour. The line vec3_norm(u, u); now comes after the vector u is used in the definition of matrix S.
Unless, of course, the existing behaviour was broken?",True,{}
glfw/glfw,https://github.com/glfw/glfw,785,2016-06-14T04:30:37Z,2016-07-11T23:05:45Z,2017-01-28T22:26:14Z,CLOSED,False,14,12,1,https://github.com/ndogxj,Fix example build errors on VS 2010,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/785,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/785#issuecomment-232025008,"According to C89, all block-local variables need to be declared at the beginning of the block. MSVC2013 relaxes this restriction.","@tombsar No, you're right. 🦉",True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/kchandra22134,1,https://github.com/glfw/glfw/pull/786,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt",True,"{'THUMBS_UP': ['https://github.com/andrewfb', 'https://github.com/kivutar', 'https://github.com/paperManu', 'https://github.com/Thesola10', 'https://github.com/kgreenek', 'https://github.com/EriKWDev', 'https://github.com/r00tman', 'https://github.com/bunder']}"
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/786#issuecomment-231742310,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","This is an odd platform, but the impact on existing code is nicely small.
Are there any plans for input support? I won't reject it if there isn't, but it'd be good to know.
Is there any publicly available system where I could test this?
Do you know if you (personally or Nvidia) will be submitting updates as needed or if this is a one-time code drop? Again, I won't reject based on the answer but I need to know.",True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/kchandra22134,3,https://github.com/glfw/glfw/pull/786#issuecomment-238821765,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","For testing this backend you can:
Use NVIDIA Linux GPU driver release 364.12 or later.
Use a Linux 4.1 or later kernel with DRM support enabled.
Stop the X server, or any other potential DRM client. This backend requires the ability to become DRM master in order to do modesets.

You can also refer to this: https://github.com/aritger/eglstreams-kms-example
where EGLDevice backend is demonstrated.
We have plans to  submit more updates in this, as this is only the minimal functionality required to run the application.",True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/786#issuecomment-238836955,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","@kchandra22134 Great, thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/alecjacobson,5,https://github.com/glfw/glfw/pull/786#issuecomment-457745455,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt",Is there any plan to integrate this?,True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/kivutar,6,https://github.com/glfw/glfw/pull/786#issuecomment-469681435,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","Supporting this would have a very positive effect for Raspberry Pi users. Linux distributions like Lakka, Retropie, LudOS and Recallbox could use GLFW and not have to package X11 or weston.
I case you decide to merge it for 3.3, I can participate in testing and maybe help maintaining this platform.",True,{'HEART': ['https://github.com/jvcleave']}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/786#issuecomment-469757620,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt",@kivutar I would gladly add this platform if it comes with a maintainer. I did some work with the original PR but it didn't seem to work on the machine I had available. Have you been able to get this PR to run on a current system?,True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/kivutar,8,https://github.com/glfw/glfw/pull/786#issuecomment-469943167,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","Not yet, I will try it today and tell you the results. We've been using a similar approach in RetroArch for a few years in some of the contexts here https://github.com/libretro/RetroArch/tree/master/gfx/drivers_context
and I've always thought that this abstraction layer shouldn't be kept in our software where it can't benefit other projects. I like to see GLFW going this way.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/kivutar,9,https://github.com/glfw/glfw/pull/786#issuecomment-470124362,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","I had to add the include path for libdrm.
Now I'm stuck on a missing declaration for PFNEGLSTREAMCONSUMERACQUIREATTRIBEXTPROC.
Except this last issue, the rest of GLFW compiles fine. Any idea of where is this supposed to be defined?
In case you manage to fix the PFNEGLSTREAMCONSUMERACQUIREATTRIBEXTPROC issue on your side, you will have to launch the examples from one of the TTY, not a terminal emulator.",True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/786#issuecomment-470165848,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","I ran it from the console of a machine with no X server running. If I recall it failed to initialize or possibly there was a black screen. Tried some unrelated EGLDevice examples and they ran without issue.
See the egldevice branch for my initial attempt. It should have the declarations you need. I don't remember exactly what extension document I got them from.",True,{'THUMBS_UP': ['https://github.com/kivutar']}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/kivutar,11,https://github.com/glfw/glfw/pull/786#issuecomment-470458388,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","I'm also getting either Failed to initialize GLFW or Error: EGLDevice: Failed to find required extensions functions on either https://github.com/glfw/glfw/tree/egldevice or this current PR branch.
I have no issues launching other egldevice programs like retroarch.
So I will compare our implementation with this one.
But it looks quite different, as we're using EGL_PLATFORM_GBM_KHR or EGL_PLATFORM_X11_KHR and this PR is targeting EGL_PLATFORM_DEVICE_EXT.",True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/MadcowD,12,https://github.com/glfw/glfw/pull/786#issuecomment-548530585,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","I am desperate to have this branch merge into master (it affects a down-stream project greatly!)
Is there anyway I can help get it in a good position?
What are the current blockers in pushing this forward?",True,{}
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/gsibley,13,https://github.com/glfw/glfw/pull/786#issuecomment-659203562,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt",Just wanted to vote for this.  Would love to see headless rendering without a windowing system.,True,"{'THUMBS_UP': ['https://github.com/gedoensmax', 'https://github.com/Thesola10', 'https://github.com/IvoBCD', 'https://github.com/yurivish', 'https://github.com/cy20lin', 'https://github.com/EriKWDev', 'https://github.com/whateverforever', 'https://github.com/r00tman', 'https://github.com/RyanHir', 'https://github.com/Fredrum', 'https://github.com/alecjacobson', 'https://github.com/lauramazzuca21', 'https://github.com/kahuz', 'https://github.com/AndreRenaud', 'https://github.com/akaltar', 'https://github.com/dzhura', 'https://github.com/mesarosm']}"
glfw/glfw,https://github.com/glfw/glfw,786,2016-06-15T10:32:21Z,,2021-09-20T03:09:13Z,OPEN,False,1034,0,10,https://github.com/kchandra22134,Add EGLDevice backend,1,"['enhancement', 'Nvidia', 'Linux', 'EGL']",https://github.com/glfw/glfw/pull/786,https://github.com/Fredrum,14,https://github.com/glfw/glfw/pull/786#issuecomment-922608971,"This adds interface to graphics application to create EGLDisplay
directly over GPU device as enabled by EGLDevice extensions
Modifies in GLFW library to add egldevice-drm backend.
This includes modifying a few existing files and creating four new files which are
specific to the backend that we are adding. For eg. in our case these are
egldevice_platform.h, egldevice_init.c, egldevice_window.c, egldevice_monitor.c .
In the file ""egl_context.c"" change selects the EGL_SURFACE_TYPE config attribute value to
EGL_STREAM_BIT_KHR instead of EGL_WINDOW_BIT  and specify the window surface to the surface which we created using EGLStreams.
Other files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Links to the EGL extensions used:

EGL_EXT_device_drm
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_device_drm.txt
EGL_KHR_stream
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream.txt
EGL_EXT_stream_consumer_egloutput
https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_stream_consumer_egloutput.txt
EGL_KHR_stream_producer_eglsurface
https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt","+1 for this!
(If I understand correctly and it allows drm rendering without X11?)",True,{}
glfw/glfw,https://github.com/glfw/glfw,788,2016-06-17T15:51:58Z,2017-10-01T15:17:34Z,2017-10-26T03:11:29Z,CLOSED,False,7,1,2,https://github.com/jadahl,Opaque vs transparent buffers,2,['Wayland'],https://github.com/glfw/glfw/pull/788,https://github.com/jadahl,1,https://github.com/glfw/glfw/pull/788,"Hi,
I'm not sure this is the right approach, since it changes the default value for all platforms. Anyhow, if I'm not misunderstanding, GLFW at the current state (not counting the wip branch which adds support for it) doesn't support transparent windows, but still asks for transparent window framebuffers by default. The first commit changes the default behaviour to simply ask for a non-transparent buffer. The reason for doing this is that if we default to a transparent buffer configs, we'll get transparent buffers meaning.. well.. they'll be transparent, which seems to go against what is supported.
The other solution I had to this was simply to override the framebuffer configuration when creating the Wayland window EGL context by copying the fbconfig and overriding the alphaBits field, but it seemed off as well.
Both these solutions feels a bit awkward really, since we still have the GLFW_ALPHA_BITS hint. The patch in this PR allows the application to override it and get a transparent window, while the mentioned alternative approach would always override that hint. What is the point of that hint if not to cause the window to be transparent?
The second patch simply checks what type of framebuffer configuration we got, and does the right thing accordingly.","Hi,
I'm not sure this is the right approach, since it changes the default value for all platforms. Anyhow, if I'm not misunderstanding, GLFW at the current state (not counting the wip branch which adds support for it) doesn't support transparent windows, but still asks for transparent window framebuffers by default. The first commit changes the default behaviour to simply ask for a non-transparent buffer. The reason for doing this is that if we default to a transparent buffer configs, we'll get transparent buffers meaning.. well.. they'll be transparent, which seems to go against what is supported.
The other solution I had to this was simply to override the framebuffer configuration when creating the Wayland window EGL context by copying the fbconfig and overriding the alphaBits field, but it seemed off as well.
Both these solutions feels a bit awkward really, since we still have the GLFW_ALPHA_BITS hint. The patch in this PR allows the application to override it and get a transparent window, while the mentioned alternative approach would always override that hint. What is the point of that hint if not to cause the window to be transparent?
The second patch simply checks what type of framebuffer configuration we got, and does the right thing accordingly.",True,{}
glfw/glfw,https://github.com/glfw/glfw,788,2016-06-17T15:51:58Z,2017-10-01T15:17:34Z,2017-10-26T03:11:29Z,CLOSED,False,7,1,2,https://github.com/jadahl,Opaque vs transparent buffers,2,['Wayland'],https://github.com/glfw/glfw/pull/788,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/788#issuecomment-241010779,"Hi,
I'm not sure this is the right approach, since it changes the default value for all platforms. Anyhow, if I'm not misunderstanding, GLFW at the current state (not counting the wip branch which adds support for it) doesn't support transparent windows, but still asks for transparent window framebuffers by default. The first commit changes the default behaviour to simply ask for a non-transparent buffer. The reason for doing this is that if we default to a transparent buffer configs, we'll get transparent buffers meaning.. well.. they'll be transparent, which seems to go against what is supported.
The other solution I had to this was simply to override the framebuffer configuration when creating the Wayland window EGL context by copying the fbconfig and overriding the alphaBits field, but it seemed off as well.
Both these solutions feels a bit awkward really, since we still have the GLFW_ALPHA_BITS hint. The patch in this PR allows the application to override it and get a transparent window, while the mentioned alternative approach would always override that hint. What is the point of that hint if not to cause the window to be transparent?
The second patch simply checks what type of framebuffer configuration we got, and does the right thing accordingly.","This is known to fix some programs as reported above, and is a useful stop-gap until #197 is finished, I think it should be merged. Maybe doing the same fix on other context creation APIs would make it more uniform (so we don’t end up with an unused alpha channel on GLX or WGL).",True,{}
glfw/glfw,https://github.com/glfw/glfw,790,2016-06-20T03:05:36Z,2016-06-20T03:07:10Z,2016-06-20T11:28:57Z,CLOSED,False,97,7,5,https://github.com/sdweiyu,+Win32 PointerInput API.,1,['Windows'],https://github.com/glfw/glfw/pull/790,https://github.com/sdweiyu,1,https://github.com/glfw/glfw/pull/790,+events example upgrade.,+events example upgrade.,True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/halx99,1,https://github.com/glfw/glfw/pull/795,solve dead block problem when glfw-window is a cross-thread child window.,solve dead block problem when glfw-window is a cross-thread child window.,True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/795#issuecomment-228414224,solve dead block problem when glfw-window is a cross-thread child window.,That's an unusual setup. Why create the child window in another thread?,True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/halx99,3,https://github.com/glfw/glfw/pull/795#issuecomment-228421494,solve dead block problem when glfw-window is a cross-thread child window.,"Well, this problem confuse me long time, I write a game develop tool: https://en.x-studio.net/, in this case, I need create the glfw window as child of MFC MainFrame in a unique thread.
For detail, please see the reference question: https://social.msdn.microsoft.com/Forums/Windowsdesktop/zh-CN/373bd320-112a-4e55-bab5-74b19fe46bf3/my-mfc-application-will-blocking-when-alt-released-windows-10-rs1-14367-who-can-help-me?forum=vcgeneral",True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/795#issuecomment-231744414,solve dead block problem when glfw-window is a cross-thread child window.,This might be a good candidate for the upcoming platform-specific window hints.,True,{'THUMBS_UP': ['https://github.com/halx99']}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/795#issuecomment-265784850,solve dead block problem when glfw-window is a cross-thread child window.,There are now platform-specific window hints.,True,{'THUMBS_UP': ['https://github.com/halx99']}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/halx99,6,https://github.com/glfw/glfw/pull/795#issuecomment-296342797,solve dead block problem when glfw-window is a cross-thread child window.,The F10 also should be disabled.,True,{'THUMBS_UP': ['https://github.com/halx99']}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/795#issuecomment-637696332,solve dead block problem when glfw-window is a cross-thread child window.,"This can now be controlled by the GLFW_WIN32_KEYBOARD_MENU window hint, which will be included in version 3.4.",True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/halx99,8,https://github.com/glfw/glfw/pull/795#issuecomment-653760802,solve dead block problem when glfw-window is a cross-thread child window.,"well, it doesn't works for me, I think also should add check at WM_SYSKEYDOWN/WM_SYSKEYUP just like follow:
if ((wParam == VK_MENU || wParam == VK_F10) && !window->win32.keymenu) {
    // #Fix: disable system default ALT process, solve dead block problem when glfw-window is a cross-thread child window.
    // if user don't care.
    return 0;
}",True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/795#issuecomment-656381505,solve dead block problem when glfw-window is a cross-thread child window.,"Oh, right, you use a child window. GLFW doesn't officially support having child windows, but I will look into whether this addition has any side-effects.",True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/795#issuecomment-656381934,solve dead block problem when glfw-window is a cross-thread child window.,"This ties in somewhat with native window handle attachment, when GLFW will need to handle some level of this anyway.",True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/halx99,11,https://github.com/glfw/glfw/pull/795#issuecomment-656436158,solve dead block problem when glfw-window is a cross-thread child window.,"Yeah, glfw child window is works well for me, and I  use parent window to process alt key for shortcuts",True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/halx99,12,https://github.com/glfw/glfw/pull/795#issuecomment-667559663,solve dead block problem when glfw-window is a cross-thread child window.,"I think, it's time to glfw official support child window, if you agree, I will send PR to support the feature",True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/elmindreda,13,https://github.com/glfw/glfw/pull/795#issuecomment-673669799,solve dead block problem when glfw-window is a cross-thread child window.,@halx99 That sounds potentially interesting. What kind of support for child windows did you have in mind?,True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/halx99,14,https://github.com/glfw/glfw/pull/795#issuecomment-673776339,solve dead block problem when glfw-window is a cross-thread child window.,"At my project, I add a function glfwSetParent before call glfwCreateWindow",True,{}
glfw/glfw,https://github.com/glfw/glfw,795,2016-06-24T17:41:27Z,2020-06-02T17:28:44Z,2020-08-14T00:39:14Z,CLOSED,False,4,1,1,https://github.com/halx99,Disable default Alt key processing,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/795,https://github.com/halx99,15,https://github.com/glfw/glfw/pull/795#issuecomment-673777050,solve dead block problem when glfw-window is a cross-thread child window.,"I have another mind, change the 2nd parameter of glfwWindowHint to uintpr_t, then add a hint enum: GLFW_HINT_PARENT to store parent handle",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/CaffeineViking,1,https://github.com/glfw/glfw/pull/798,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/CaffeineViking,2,https://github.com/glfw/glfw/pull/798#issuecomment-229357633,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","Described bug succinctly in the changelog, as per the contribution guidelines. Also, please note that I haven't submitted a pull request before, and might be doing something stupid, notify if you need any additional fixes to be made regarding this and I'll get to work. Also, now testing additional WM setup.",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/CaffeineViking,3,https://github.com/glfw/glfw/pull/798#issuecomment-229615020,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","Quick update, I have confirmed that the X11 bug #789 is also present in ratpoison 1.4.8, another WM that is non-reparenting. Based on this, I surmise this is true for all of them, so xmonad, cwm, uwm, and PLWM [1]; it would be great if someone else with such a setup could confirm the validity of this. Applying patch #798 (that is, this one), seems to resolve the issue on the tested window managers. Also, I have tested with twm 1.0.9-1, a normal re-parenting window manager, and both versions, with and without this patch, seem to work. Also, I have no idea why Travis failed, it seems it couldn't fetch the repository.
UPDATE: Running this patch on XUbuntu 16.04 LTS with XFCE 4.12 & XFWM 4.12 seems to still work.
UPDATE: Doesn't seem to break anything on Fedora 24 Workstation with GNOME 3.20 & Mutter 3.20, also tried some examples/tests on: Linux Mint 18 with the Cinnamon 3.0 DE and the Muffin 3.0.5 WM.",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/tgfrerer,4,https://github.com/glfw/glfw/pull/798#issuecomment-230421309,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",Checked out this patch on ubuntu xenial (16.04) / dwm 6.1 and I can confirm that it fixes the crash on init issue on my setup.,True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/sdemos,5,https://github.com/glfw/glfw/pull/798#issuecomment-234743285,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",Tried out this patch on archlinux using xmonad-0.12 and it fixed the issue for me. Any idea when this will get pulled into the main repository?,True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/798#issuecomment-234775167,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",@sdemos Looking into it now.,True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/798#issuecomment-234783624,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",It seems from reading dwm (which is super-readable 😍) that all we need to do is wait for the regular MapNotify (and should have been doing that all along).,True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/sdemos,8,https://github.com/glfw/glfw/pull/798#issuecomment-235059831,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","Awesome, thanks for looking into it. Is that approach different than the fix that is already in this pr? If it is, I would be totally willing to test out that patch to confirm for xmonad as well.",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/798#issuecomment-235391660,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","@sdemos It is, although this approach resolves it as well. Thank you! Will update when I have a branch.",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/CaffeineViking,10,https://github.com/glfw/glfw/pull/798#issuecomment-235876275,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","Same here @elmindreda, just call me over if you need further help in getting your branch tested. Also, I'd like to note that it might be better to trigger on VisibilityNotify instead of MapNotify, according towards some documentation I have read. e.g. XSetInputFocus requires given window to be mapped and also visible. Most window managers seem to become visible when mapped, but unfortunately this isn't true for all of them (e.g. awesomewm), at least based on the observations given over here: SFML and also in the Xlib documentation XSetInputFocus. But this might not really apply here, let's try with a MapNotify first as you said, since that is usually how it works, we can always verify these issues later.
Side note: yea, the dwm code is a complete joy to look at ❤️, everything by Suckless is usually gold.",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/derhass,11,https://github.com/glfw/glfw/pull/798#issuecomment-238220987,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","I can confirm that this issue was present with ctwm, too, and that this fix resolves it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/elmindreda,12,https://github.com/glfw/glfw/pull/798#issuecomment-238645144,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","I can reproduce this consistently on dwm and have a fix following what is outlined in the ICCCM, but I cannot reproduce it on awesome. Has anyone here encountered this issue on awesome?",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/CaffeineViking,13,https://github.com/glfw/glfw/pull/798#issuecomment-238693970,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","Sorry @elmindreda, I've made a mistake. Seems Awesome WM isn't non-reparenting, so issue #789 shouldn't affect it directly, therefore, my argument that VisibilityNotify is needed in this case is not true. Also testing said awesome on my setup without this patch, and it seems to be working just fine for me too, so needless to say, it's unaffected. Also, you mentioned a solution based the ICCCM? The bugfix proposed in this PR is very hacky, so it would be great with a proper standard compliant fix. Please do message me if you need additional help in testing your fix, I have a couple of machines which use the affected window managers (dwm, ratpoison and xmonad), so it should be no sweat if you need it 👍",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/elmindreda,14,https://github.com/glfw/glfw/pull/798#issuecomment-239318930,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","@CaffeineViking The ICCCM agrees with you; VisibilityNotify is (part of) the correct solution, most clearly described in section 4.2.2. I probably wouldn't have looked further than MapNotify if you hadn't pointed that out, so thank you, and again for the offer to help with testing!",True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/elmindreda,15,https://github.com/glfw/glfw/pull/798#issuecomment-239327202,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",Please see if the xsetinputfocus-sync branch fixes this issue for you.,True,{'HEART': ['https://github.com/CaffeineViking']}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/sdemos,16,https://github.com/glfw/glfw/pull/798#issuecomment-239328203,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",confirmed for xmonad-0.12 on archlinux. Thanks!,True,{'THUMBS_UP': ['https://github.com/CaffeineViking']}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/CaffeineViking,17,https://github.com/glfw/glfw/pull/798#issuecomment-239483100,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",@elmindreda verified that the issues present on dwm 6.1 and ratpoison 1.4.8 are indeed fixed 🎉!,True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/derhass,18,https://github.com/glfw/glfw/pull/798#issuecomment-239493578,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!",@elmindreda verified that xsetinputfocus-sync fixes the issue on ctwm 3.7 and 3.8.,True,{}
glfw/glfw,https://github.com/glfw/glfw,798,2016-06-27T17:30:26Z,2016-08-09T21:15:13Z,2016-08-14T19:47:05Z,CLOSED,False,31,0,3,https://github.com/CaffeineViking,Fixed XSetInputFocus before VisibilityNotify,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/798,https://github.com/elmindreda,19,https://github.com/glfw/glfw/pull/798#issuecomment-239692804,"Should resolve #789. Calling glfwCreateWindow might fail on non-reparenting window managers (like dwm or xmonad), since they don't set their visibility flag right after being mapped with XMapWindow. Attempting to print map_state (retrieved with XGetWindowAttributes) results in either IsUnmapped or IsUnviewable on the tested window manager (which is dwm 6.1-3) right before calling XSetInputFocus. Doing this gives BadMatch errors when actually calling XSetInputFocus, which should be expected given that the documentation in XLib says that this happens if a window isn't viewable when called. References to these follow below to make it easier to double check and test the changes I have made for this.
XMapWindow: https://tronche.com/gui/x/xlib/window/XMapWindow.html
XSetInputFocus: https://tronche.com/gui/x/xlib/input/XSetInputFocus.html
VisibilityNotify: https://tronche.com/gui/x/xlib/events/window-state-change/visibility.html
XGetWindowAttributes: https://tronche.com/gui/x/xlib/window-information/XGetWindowAttributes.html
I haven't programmed with Xlib before, so take everything I have said with a huge grain of salt. It does seem to fix the problem for me, with my window manager. However, I don't know if this patch works or breaks for everyone else involved. If you have any spare time, could anyone check if this patch seems somewhat reasonable (doesn't break anything and conforms with the planned glfw architecture, also not messing up too much of the code)? If it  doesn't indeed seem to break for anyone else, and fixes these issues for other similar WMs, could you consider merging these changes into mainline glfw for others?
Any feedback/improvements are welcome.
Thanks for your help and time!","Thank you @CaffeineViking, @sdemos, @derhass and @tgfrerer for the thorough testing! This concludes the next to last issue for 3.2.1 and then it's time for 3.3.",True,"{'HOORAY': ['https://github.com/dmitshur', 'https://github.com/CaffeineViking'], 'HEART': ['https://github.com/CaffeineViking', 'https://github.com/tgfrerer']}"
glfw/glfw,https://github.com/glfw/glfw,805,2016-07-13T21:57:47Z,2016-08-02T09:27:01Z,2016-08-02T09:27:01Z,CLOSED,False,19,0,2,https://github.com/keringar,Corrected glfwSetWindowSizeLimits to correctly limit size,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/805,https://github.com/keringar,1,https://github.com/glfw/glfw/pull/805,"Minimal example showing issue on Ubuntu 16.04 running X11:
#include <GLFW/glfw3.h>

int main() {
    glfwInit();

    GLFWwindow* window = glfwCreateWindow(800, 600, ""Resize me"", nullptr, nullptr);

    glfwSetWindowSizeLimits(window, 800, 600, GLFW_DONT_CARE, GLFW_DONT_CARE);

    while(!glfwWindowShouldClose(window)){
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}
You can resize the window below 800 by 600 even though the limit was set. Also didn't work if the order was reversed i.e. glfwSetWindowSize(window, GLFW_DONT_CARE, GLFW_DONT_CARE, 800, 600)","Minimal example showing issue on Ubuntu 16.04 running X11:
#include <GLFW/glfw3.h>

int main() {
    glfwInit();

    GLFWwindow* window = glfwCreateWindow(800, 600, ""Resize me"", nullptr, nullptr);

    glfwSetWindowSizeLimits(window, 800, 600, GLFW_DONT_CARE, GLFW_DONT_CARE);

    while(!glfwWindowShouldClose(window)){
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}
You can resize the window below 800 by 600 even though the limit was set. Also didn't work if the order was reversed i.e. glfwSetWindowSize(window, GLFW_DONT_CARE, GLFW_DONT_CARE, 800, 600)",True,{}
glfw/glfw,https://github.com/glfw/glfw,807,2016-07-14T10:30:55Z,2016-07-14T10:49:46Z,2016-07-14T15:55:59Z,MERGED,True,1,1,1,https://github.com/tombsar,Change name in acknowledgements list,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/807,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/807,"I recently noticed that I was added to the glfw acknowledgements list a while back (not sure my contributions have been worth that much to the project, so I'm hugely flattered!). Would it be okay to use my full name, rather than first initial?","I recently noticed that I was added to the glfw acknowledgements list a while back (not sure my contributions have been worth that much to the project, so I'm hugely flattered!). Would it be okay to use my full name, rather than first initial?",True,{'HEART': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,807,2016-07-14T10:30:55Z,2016-07-14T10:49:46Z,2016-07-14T15:55:59Z,MERGED,True,1,1,1,https://github.com/tombsar,Change name in acknowledgements list,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/807,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/807#issuecomment-232630962,"I recently noticed that I was added to the glfw acknowledgements list a while back (not sure my contributions have been worth that much to the project, so I'm hugely flattered!). Would it be okay to use my full name, rather than first initial?","Absolutely, I just didn't find your full name at the time.",True,{}
glfw/glfw,https://github.com/glfw/glfw,807,2016-07-14T10:30:55Z,2016-07-14T10:49:46Z,2016-07-14T15:55:59Z,MERGED,True,1,1,1,https://github.com/tombsar,Change name in acknowledgements list,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/807,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/807#issuecomment-232702888,"I recently noticed that I was added to the glfw acknowledgements list a while back (not sure my contributions have been worth that much to the project, so I'm hugely flattered!). Would it be okay to use my full name, rather than first initial?","As for why, you have a very good eye for catching my more embarrassing mistakes. That's a Good Thing.",True,{'LAUGH': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,813,2016-07-26T02:00:42Z,2016-07-26T02:00:55Z,2021-10-24T16:22:09Z,CLOSED,False,0,0,0,https://github.com/AlwaysGeeky,Merge pull request #1 from glfw/master,1,['wontfix'],https://github.com/glfw/glfw/pull/813,https://github.com/AlwaysGeeky,1,https://github.com/glfw/glfw/pull/813,pull latest to branch,pull latest to branch,True,{}
glfw/glfw,https://github.com/glfw/glfw,820,2016-08-03T18:21:46Z,2016-08-04T23:36:53Z,2016-08-04T23:40:49Z,CLOSED,False,17,6,2,https://github.com/prideout,Add _GLFW_VULKAN_STATIC build flag,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/820,https://github.com/prideout,1,https://github.com/glfw/glfw/pull/820,"This allows clients to link GLFW with a staticly-built loader library.
This is useful in hermetic build systems that build the Khronos loader
from source, rather than depending on the LunarG SDK binaries.","This allows clients to link GLFW with a staticly-built loader library.
This is useful in hermetic build systems that build the Khronos loader
from source, rather than depending on the LunarG SDK binaries.",True,{}
glfw/glfw,https://github.com/glfw/glfw,820,2016-08-03T18:21:46Z,2016-08-04T23:36:53Z,2016-08-04T23:40:49Z,CLOSED,False,17,6,2,https://github.com/prideout,Add _GLFW_VULKAN_STATIC build flag,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/820,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/820#issuecomment-237357909,"This allows clients to link GLFW with a staticly-built loader library.
This is useful in hermetic build systems that build the Khronos loader
from source, rather than depending on the LunarG SDK binaries.","Argh, that's right,  I forgot to add this. Thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,820,2016-08-03T18:21:46Z,2016-08-04T23:36:53Z,2016-08-04T23:40:49Z,CLOSED,False,17,6,2,https://github.com/prideout,Add _GLFW_VULKAN_STATIC build flag,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/820,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/820#issuecomment-237718078,"This allows clients to link GLFW with a staticly-built loader library.
This is useful in hermetic build systems that build the Khronos loader
from source, rather than depending on the LunarG SDK binaries.",Thank you again! It has been merged as 8bdb105 and additional cleanup was added with 7c37067.,True,{}
glfw/glfw,https://github.com/glfw/glfw,822,2016-08-04T04:14:00Z,2016-08-04T23:36:53Z,2017-10-01T14:08:38Z,CLOSED,False,2,2,1,https://github.com/pretyman,CMake: do not override CMAKE_MODULE_PATH,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/822,https://github.com/pretyman,1,https://github.com/glfw/glfw/pull/822,Please play nice and not overwrite CMAKE_MODULE_PATH: http://cgold.readthedocs.io/en/latest/tutorials/cmake-sources.html#modify-correct,Please play nice and not overwrite CMAKE_MODULE_PATH: http://cgold.readthedocs.io/en/latest/tutorials/cmake-sources.html#modify-correct,True,{}
glfw/glfw,https://github.com/glfw/glfw,822,2016-08-04T04:14:00Z,2016-08-04T23:36:53Z,2017-10-01T14:08:38Z,CLOSED,False,2,2,1,https://github.com/pretyman,CMake: do not override CMAKE_MODULE_PATH,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/822,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/822#issuecomment-237717926,Please play nice and not overwrite CMAKE_MODULE_PATH: http://cgold.readthedocs.io/en/latest/tutorials/cmake-sources.html#modify-correct,Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,822,2016-08-04T04:14:00Z,2016-08-04T23:36:53Z,2017-10-01T14:08:38Z,CLOSED,False,2,2,1,https://github.com/pretyman,CMake: do not override CMAKE_MODULE_PATH,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/822,https://github.com/pretyman,3,https://github.com/glfw/glfw/pull/822#issuecomment-237729425,Please play nice and not overwrite CMAKE_MODULE_PATH: http://cgold.readthedocs.io/en/latest/tutorials/cmake-sources.html#modify-correct,"No, thank you for such awesome framework!",True,{}
glfw/glfw,https://github.com/glfw/glfw,823,2016-08-04T21:36:52Z,2016-08-04T23:36:53Z,2016-08-04T23:50:55Z,CLOSED,False,3,0,1,https://github.com/vazgriz,Added preproccessor directive to build Vulkan DLL,1,"['bug', 'verified', 'Vulkan']",https://github.com/glfw/glfw/pull/823,https://github.com/vazgriz,1,https://github.com/glfw/glfw/pull/823,"If vulkan.h was included or if GLFW_INCLUDE_VULKAN was defined in glfw_config.h, then attempting to build GLFW as a DLL would cause compilation errors, since internal.h redefines a few vulkan types.","If vulkan.h was included or if GLFW_INCLUDE_VULKAN was defined in glfw_config.h, then attempting to build GLFW as a DLL would cause compilation errors, since internal.h redefines a few vulkan types.",True,{}
glfw/glfw,https://github.com/glfw/glfw,823,2016-08-04T21:36:52Z,2016-08-04T23:36:53Z,2016-08-04T23:50:55Z,CLOSED,False,3,0,1,https://github.com/vazgriz,Added preproccessor directive to build Vulkan DLL,1,"['bug', 'verified', 'Vulkan']",https://github.com/glfw/glfw/pull/823,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/823#issuecomment-237717272,"If vulkan.h was included or if GLFW_INCLUDE_VULKAN was defined in glfw_config.h, then attempting to build GLFW as a DLL would cause compilation errors, since internal.h redefines a few vulkan types.","You must not define public header macros when compiling GLFW. There is a note to that effect at the end of the section on manual compilation. That's not the most easily found documentation, so there's also a test in internal.h that should fail compilation, but I had forgotten to add GLFW_INCLUDE_VULKAN to it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,823,2016-08-04T21:36:52Z,2016-08-04T23:36:53Z,2016-08-04T23:50:55Z,CLOSED,False,3,0,1,https://github.com/vazgriz,Added preproccessor directive to build Vulkan DLL,1,"['bug', 'verified', 'Vulkan']",https://github.com/glfw/glfw/pull/823,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/823#issuecomment-237717586,"If vulkan.h was included or if GLFW_INCLUDE_VULKAN was defined in glfw_config.h, then attempting to build GLFW as a DLL would cause compilation errors, since internal.h redefines a few vulkan types.",Thank you for reporting this!,True,{}
glfw/glfw,https://github.com/glfw/glfw,826,2016-08-08T10:39:05Z,2016-08-08T15:36:35Z,2016-08-08T15:56:35Z,CLOSED,False,2,0,1,https://github.com/patricksnape,Fixes Issue 817 on OSX: Missing call to removeObserver,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/826,https://github.com/patricksnape,1,https://github.com/glfw/glfw/pull/826,"Fixes #817.
As noted in the documentation for nsdistributednotificationcenter,
(under the Discussion heading) before an observer is deallocated
a call should be made to removeObserver: in order to ensure
that the listener is unbound from all observation pools
correctly. I can confirm that this fixes #817 for me.","Fixes #817.
As noted in the documentation for nsdistributednotificationcenter,
(under the Discussion heading) before an observer is deallocated
a call should be made to removeObserver: in order to ensure
that the listener is unbound from all observation pools
correctly. I can confirm that this fixes #817 for me.",True,{'THUMBS_UP': ['https://github.com/jabooth']}
glfw/glfw,https://github.com/glfw/glfw,826,2016-08-08T10:39:05Z,2016-08-08T15:36:35Z,2016-08-08T15:56:35Z,CLOSED,False,2,0,1,https://github.com/patricksnape,Fixes Issue 817 on OSX: Missing call to removeObserver,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/826,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/826#issuecomment-238208941,"Fixes #817.
As noted in the documentation for nsdistributednotificationcenter,
(under the Discussion heading) before an observer is deallocated
a call should be made to removeObserver: in order to ensure
that the listener is unbound from all observation pools
correctly. I can confirm that this fixes #817 for me.",Good catch! Thank you!,True,"{'THUMBS_UP': ['https://github.com/patricksnape', 'https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,826,2016-08-08T10:39:05Z,2016-08-08T15:36:35Z,2016-08-08T15:56:35Z,CLOSED,False,2,0,1,https://github.com/patricksnape,Fixes Issue 817 on OSX: Missing call to removeObserver,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/826,https://github.com/patricksnape,3,https://github.com/glfw/glfw/pull/826#issuecomment-238212801,"Fixes #817.
As noted in the documentation for nsdistributednotificationcenter,
(under the Discussion heading) before an observer is deallocated
a call should be made to removeObserver: in order to ensure
that the listener is unbound from all observation pools
correctly. I can confirm that this fixes #817 for me.",Would obviously be great if @durswd could confirm this also fixes the issue he was seeing?,True,{}
glfw/glfw,https://github.com/glfw/glfw,826,2016-08-08T10:39:05Z,2016-08-08T15:36:35Z,2016-08-08T15:56:35Z,CLOSED,False,2,0,1,https://github.com/patricksnape,Fixes Issue 817 on OSX: Missing call to removeObserver,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/826,https://github.com/durswd,4,https://github.com/glfw/glfw/pull/826#issuecomment-238248993,"Fixes #817.
As noted in the documentation for nsdistributednotificationcenter,
(under the Discussion heading) before an observer is deallocated
a call should be made to removeObserver: in order to ensure
that the listener is unbound from all observation pools
correctly. I can confirm that this fixes #817 for me.","Thank you.
This bug is fixed.",True,"{'HOORAY': ['https://github.com/elmindreda', 'https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,826,2016-08-08T10:39:05Z,2016-08-08T15:36:35Z,2016-08-08T15:56:35Z,CLOSED,False,2,0,1,https://github.com/patricksnape,Fixes Issue 817 on OSX: Missing call to removeObserver,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/826,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/826#issuecomment-238276989,"Fixes #817.
As noted in the documentation for nsdistributednotificationcenter,
(under the Discussion heading) before an observer is deallocated
a call should be made to removeObserver: in order to ensure
that the listener is unbound from all observation pools
correctly. I can confirm that this fixes #817 for me.","This has been merged as 74ed357, with additional cleanup in 51e59f4.",True,{}
glfw/glfw,https://github.com/glfw/glfw,830,2016-08-11T17:26:04Z,2016-09-07T14:52:22Z,2016-09-07T16:36:33Z,CLOSED,False,104,0,11,https://github.com/dotSp0T,added `glfwGetKeyScancode` function,2,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/830,https://github.com/dotSp0T,1,https://github.com/glfw/glfw/pull/830,"allows retrieval of platform scancode from GLFW_KEY
impls for: win32, cocoa, x11
stubs for: mir, wayland


I followed the contribution guide to my understanding.
I have no experience with doxygen and have not before contributed to a big project, thus would be happy for review and pointing out of mistakes.
I did and do not have the means to compile the GLFW code locally at this time thus would be glad for someone else to help me out, IF the CI builds are not enough.","allows retrieval of platform scancode from GLFW_KEY
impls for: win32, cocoa, x11
stubs for: mir, wayland


I followed the contribution guide to my understanding.
I have no experience with doxygen and have not before contributed to a big project, thus would be happy for review and pointing out of mistakes.
I did and do not have the means to compile the GLFW code locally at this time thus would be glad for someone else to help me out, IF the CI builds are not enough.",True,{}
glfw/glfw,https://github.com/glfw/glfw,830,2016-08-11T17:26:04Z,2016-09-07T14:52:22Z,2016-09-07T16:36:33Z,CLOSED,False,104,0,11,https://github.com/dotSp0T,added `glfwGetKeyScancode` function,2,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/830,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/830#issuecomment-239668286,"allows retrieval of platform scancode from GLFW_KEY
impls for: win32, cocoa, x11
stubs for: mir, wayland


I followed the contribution guide to my understanding.
I have no experience with doxygen and have not before contributed to a big project, thus would be happy for review and pointing out of mistakes.
I did and do not have the means to compile the GLFW code locally at this time thus would be glad for someone else to help me out, IF the CI builds are not enough.",Great work! This will be included in 3.3.,True,{}
glfw/glfw,https://github.com/glfw/glfw,830,2016-08-11T17:26:04Z,2016-09-07T14:52:22Z,2016-09-07T16:36:33Z,CLOSED,False,104,0,11,https://github.com/dotSp0T,added `glfwGetKeyScancode` function,2,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/830,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/830#issuecomment-239668529,"allows retrieval of platform scancode from GLFW_KEY
impls for: win32, cocoa, x11
stubs for: mir, wayland


I followed the contribution guide to my understanding.
I have no experience with doxygen and have not before contributed to a big project, thus would be happy for review and pointing out of mistakes.
I did and do not have the means to compile the GLFW code locally at this time thus would be glad for someone else to help me out, IF the CI builds are not enough.","I did and do not have the means to compile the GLFW code locally at this time thus would be glad for someone else to help me out, IF the CI builds are not enough.

Seems like CI already caught a bug for you. I will test the remaining platforms when it's time to merge, but it looks good.",True,{}
glfw/glfw,https://github.com/glfw/glfw,830,2016-08-11T17:26:04Z,2016-09-07T14:52:22Z,2016-09-07T16:36:33Z,CLOSED,False,104,0,11,https://github.com/dotSp0T,added `glfwGetKeyScancode` function,2,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/830,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/830#issuecomment-245340934,"allows retrieval of platform scancode from GLFW_KEY
impls for: win32, cocoa, x11
stubs for: mir, wayland


I followed the contribution guide to my understanding.
I have no experience with doxygen and have not before contributed to a big project, thus would be happy for review and pointing out of mistakes.
I did and do not have the means to compile the GLFW code locally at this time thus would be glad for someone else to help me out, IF the CI builds are not enough.","This has been merged, with additional cleanup in bb3cb8f. Thank you!",True,{'THUMBS_UP': ['https://github.com/dotSp0T']}
glfw/glfw,https://github.com/glfw/glfw,834,2016-08-13T19:01:50Z,2019-03-05T19:35:49Z,2019-03-05T19:36:02Z,CLOSED,False,2,1,1,https://github.com/ithron,Treat occluded windows as hidden,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/834,https://github.com/ithron,1,https://github.com/glfw/glfw/pull/834,"If a window is not hidden but occluded, e.g. by another window or the
window is on another screen/desktop that is currently not shown,
_glfwPlatformWindowVisible() returns 1 although the window is physically
not visible. This commit fixes this issue by treating occluded windows
as hidden, i.e. non visible.
Usage example:
When the render loop is limited by v-sync, glfwSwapBuffers() does not
block on OS X when AppNap is enabled and the window is occluded.
Therefore the application starts to burn CPU cycles althoug nothing is
displayed. With the fix in this commit the application could check if
the window is visible using glfwGetWindowAttrib(window, GLFW_VISIBLE)
and if the window is hidden (or occluded) it could pause the render
loop.
This is a workaround for issue #680","If a window is not hidden but occluded, e.g. by another window or the
window is on another screen/desktop that is currently not shown,
_glfwPlatformWindowVisible() returns 1 although the window is physically
not visible. This commit fixes this issue by treating occluded windows
as hidden, i.e. non visible.
Usage example:
When the render loop is limited by v-sync, glfwSwapBuffers() does not
block on OS X when AppNap is enabled and the window is occluded.
Therefore the application starts to burn CPU cycles althoug nothing is
displayed. With the fix in this commit the application could check if
the window is visible using glfwGetWindowAttrib(window, GLFW_VISIBLE)
and if the window is hidden (or occluded) it could pause the render
loop.
This is a workaround for issue #680",True,{}
glfw/glfw,https://github.com/glfw/glfw,834,2016-08-13T19:01:50Z,2019-03-05T19:35:49Z,2019-03-05T19:36:02Z,CLOSED,False,2,1,1,https://github.com/ithron,Treat occluded windows as hidden,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/834,https://github.com/dmitshur,2,https://github.com/glfw/glfw/pull/834#issuecomment-239637759,"If a window is not hidden but occluded, e.g. by another window or the
window is on another screen/desktop that is currently not shown,
_glfwPlatformWindowVisible() returns 1 although the window is physically
not visible. This commit fixes this issue by treating occluded windows
as hidden, i.e. non visible.
Usage example:
When the render loop is limited by v-sync, glfwSwapBuffers() does not
block on OS X when AppNap is enabled and the window is occluded.
Therefore the application starts to burn CPU cycles althoug nothing is
displayed. With the fix in this commit the application could check if
the window is visible using glfwGetWindowAttrib(window, GLFW_VISIBLE)
and if the window is hidden (or occluded) it could pause the render
loop.
This is a workaround for issue #680","As an observation, I think it's dangerous to conflate window visibility and occlusion into one.
An invisible window is one that can never be seen because it's kept invisible. A user may decide to call some API to make it visible, in order for the window to appear.
An occluded window isn't visible per se, but that's a temporary state that can't and shouldn't be controlled by the same APIs. To make it not occluded, the user could close/hide/move other windows, or bring the target window to top. But you shouldn't try to ""make it visible"" via some API, since it's already visible, just occluded.
Maybe this is obvious, but I wanted to point it out just in case.",True,"{'THUMBS_UP': ['https://github.com/intrigus', 'https://github.com/elmindreda', 'https://github.com/GreenLightning']}"
glfw/glfw,https://github.com/glfw/glfw,834,2016-08-13T19:01:50Z,2019-03-05T19:35:49Z,2019-03-05T19:36:02Z,CLOSED,False,2,1,1,https://github.com/ithron,Treat occluded windows as hidden,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/834,https://github.com/ithron,3,https://github.com/glfw/glfw/pull/834#issuecomment-239638006,"If a window is not hidden but occluded, e.g. by another window or the
window is on another screen/desktop that is currently not shown,
_glfwPlatformWindowVisible() returns 1 although the window is physically
not visible. This commit fixes this issue by treating occluded windows
as hidden, i.e. non visible.
Usage example:
When the render loop is limited by v-sync, glfwSwapBuffers() does not
block on OS X when AppNap is enabled and the window is occluded.
Therefore the application starts to burn CPU cycles althoug nothing is
displayed. With the fix in this commit the application could check if
the window is visible using glfwGetWindowAttrib(window, GLFW_VISIBLE)
and if the window is hidden (or occluded) it could pause the render
loop.
This is a workaround for issue #680","I totally agree. Maybe a better solution would be to add another state to the system, like GLFW_OCCLUDED. But I don't have any idea if this could be implemented for system other than macOS. An ideal solution would add a callback, so that the user can be notified about the window occlusion status.",True,"{'THUMBS_UP': ['https://github.com/dmitshur', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,834,2016-08-13T19:01:50Z,2019-03-05T19:35:49Z,2019-03-05T19:36:02Z,CLOSED,False,2,1,1,https://github.com/ithron,Treat occluded windows as hidden,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/834,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/834#issuecomment-469827606,"If a window is not hidden but occluded, e.g. by another window or the
window is on another screen/desktop that is currently not shown,
_glfwPlatformWindowVisible() returns 1 although the window is physically
not visible. This commit fixes this issue by treating occluded windows
as hidden, i.e. non visible.
Usage example:
When the render loop is limited by v-sync, glfwSwapBuffers() does not
block on OS X when AppNap is enabled and the window is occluded.
Therefore the application starts to burn CPU cycles althoug nothing is
displayed. With the fix in this commit the application could check if
the window is visible using glfwGetWindowAttrib(window, GLFW_VISIBLE)
and if the window is hidden (or occluded) it could pause the render
loop.
This is a workaround for issue #680","As a side-effect of fixing #1337, OpenGL vsync now uses a display link and is not affected by window occlusion.",True,{}
glfw/glfw,https://github.com/glfw/glfw,836,2016-08-15T15:29:37Z,2016-08-22T14:05:36Z,2016-08-22T17:37:26Z,CLOSED,False,12,2,1,https://github.com/Eliasvan,examples/particles: Fix periodic stutter: ensure that tv_nsec<1e9,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/836,https://github.com/Eliasvan,1,https://github.com/glfw/glfw/pull/836,"Each time when ""ts.tv_nsec"" became greater or equal than 1e9, the cnd_timedwait() function returned immediately, causing the thread to become a busy waiting loop (slowing the other thread, on which the current was waiting, down), until ""ts.tv_nsec"" became smaller than 1e9.
This caused noticeable stutter one 10th of a second, since the timeout was 100ms.","Each time when ""ts.tv_nsec"" became greater or equal than 1e9, the cnd_timedwait() function returned immediately, causing the thread to become a busy waiting loop (slowing the other thread, on which the current was waiting, down), until ""ts.tv_nsec"" became smaller than 1e9.
This caused noticeable stutter one 10th of a second, since the timeout was 100ms.",True,{}
glfw/glfw,https://github.com/glfw/glfw,836,2016-08-15T15:29:37Z,2016-08-22T14:05:36Z,2016-08-22T17:37:26Z,CLOSED,False,12,2,1,https://github.com/Eliasvan,examples/particles: Fix periodic stutter: ensure that tv_nsec<1e9,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/836,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/836#issuecomment-240430702,"Each time when ""ts.tv_nsec"" became greater or equal than 1e9, the cnd_timedwait() function returned immediately, causing the thread to become a busy waiting loop (slowing the other thread, on which the current was waiting, down), until ""ts.tv_nsec"" became smaller than 1e9.
This caused noticeable stutter one 10th of a second, since the timeout was 100ms.",Thank you for finding the cause of this very annoying issue! The fix should probably be upstreamed to TinyCThread.,True,{}
glfw/glfw,https://github.com/glfw/glfw,836,2016-08-15T15:29:37Z,2016-08-22T14:05:36Z,2016-08-22T17:37:26Z,CLOSED,False,12,2,1,https://github.com/Eliasvan,examples/particles: Fix periodic stutter: ensure that tv_nsec<1e9,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/836,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/836#issuecomment-241478848,"Each time when ""ts.tv_nsec"" became greater or equal than 1e9, the cnd_timedwait() function returned immediately, causing the thread to become a busy waiting loop (slowing the other thread, on which the current was waiting, down), until ""ts.tv_nsec"" became smaller than 1e9.
This caused noticeable stutter one 10th of a second, since the timeout was 100ms.","Fixed it without a conditional. I prefer avoiding them where possible.
Forgot to add credit for locating the bug in the closing commit (sorry) but added that with 2e6a110.",True,{}
glfw/glfw,https://github.com/glfw/glfw,836,2016-08-15T15:29:37Z,2016-08-22T14:05:36Z,2016-08-22T17:37:26Z,CLOSED,False,12,2,1,https://github.com/Eliasvan,examples/particles: Fix periodic stutter: ensure that tv_nsec<1e9,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/836,https://github.com/Eliasvan,4,https://github.com/glfw/glfw/pull/836#issuecomment-241489714,"Each time when ""ts.tv_nsec"" became greater or equal than 1e9, the cnd_timedwait() function returned immediately, causing the thread to become a busy waiting loop (slowing the other thread, on which the current was waiting, down), until ""ts.tv_nsec"" became smaller than 1e9.
This caused noticeable stutter one 10th of a second, since the timeout was 100ms.","Great. I suppose the compiler will be smart enough to optimize the ""/"" and ""%"" operators.",True,{}
glfw/glfw,https://github.com/glfw/glfw,839,2016-08-16T22:29:20Z,2016-09-07T14:52:22Z,2016-09-07T14:52:22Z,CLOSED,False,167,77,5,https://github.com/BrandonSchaefer,Add relative mouse support and the cursor modes,1,['Mir'],https://github.com/glfw/glfw/pull/839,https://github.com/BrandonSchaefer,1,https://github.com/glfw/glfw/pull/839,"Implements a few other missing functions. Cleaning up naming convention
as well.
Fix FindMir.cmake was not finding the correct mirclient.so when
you wanted something other then the system library.","Implements a few other missing functions. Cleaning up naming convention
as well.
Fix FindMir.cmake was not finding the correct mirclient.so when
you wanted something other then the system library.",True,{}
glfw/glfw,https://github.com/glfw/glfw,839,2016-08-16T22:29:20Z,2016-09-07T14:52:22Z,2016-09-07T14:52:22Z,CLOSED,False,167,77,5,https://github.com/BrandonSchaefer,Add relative mouse support and the cursor modes,1,['Mir'],https://github.com/glfw/glfw/pull/839,https://github.com/BrandonSchaefer,2,https://github.com/glfw/glfw/pull/839#issuecomment-240259771,"Implements a few other missing functions. Cleaning up naming convention
as well.
Fix FindMir.cmake was not finding the correct mirclient.so when
you wanted something other then the system library.",Note this depends on mir 0.24 (which has not been released quite yet!),True,{}
glfw/glfw,https://github.com/glfw/glfw,839,2016-08-16T22:29:20Z,2016-09-07T14:52:22Z,2016-09-07T14:52:22Z,CLOSED,False,167,77,5,https://github.com/BrandonSchaefer,Add relative mouse support and the cursor modes,1,['Mir'],https://github.com/glfw/glfw/pull/839,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/839#issuecomment-240262909,"Implements a few other missing functions. Cleaning up naming convention
as well.
Fix FindMir.cmake was not finding the correct mirclient.so when
you wanted something other then the system library.",So it would be a bad idea to merge this for a release that's going out this week?,True,{}
glfw/glfw,https://github.com/glfw/glfw,839,2016-08-16T22:29:20Z,2016-09-07T14:52:22Z,2016-09-07T14:52:22Z,CLOSED,False,167,77,5,https://github.com/BrandonSchaefer,Add relative mouse support and the cursor modes,1,['Mir'],https://github.com/glfw/glfw/pull/839,https://github.com/BrandonSchaefer,4,https://github.com/glfw/glfw/pull/839#issuecomment-240265379,"Implements a few other missing functions. Cleaning up naming convention
as well.
Fix FindMir.cmake was not finding the correct mirclient.so when
you wanted something other then the system library.",Hmm maybe. Not sure how many people are using the mir side of things atm :). So no rush. I can always fix conflicts that come in later if you want to sit on this for a bit!,True,{}
glfw/glfw,https://github.com/glfw/glfw,842,2016-08-18T22:57:49Z,2017-02-06T14:31:54Z,2017-02-06T14:31:54Z,CLOSED,False,22,5,8,https://github.com/liam-middlebrook,Add GLFW_CENTER_CURSOR window hint,1,['enhancement'],https://github.com/glfw/glfw/pull/842,https://github.com/liam-middlebrook,1,https://github.com/glfw/glfw/pull/842,"Implement a hint for positioning the cursor in the center of the window.
Fixes #749","Implement a hint for positioning the cursor in the center of the window.
Fixes #749",True,{}
glfw/glfw,https://github.com/glfw/glfw,842,2016-08-18T22:57:49Z,2017-02-06T14:31:54Z,2017-02-06T14:31:54Z,CLOSED,False,22,5,8,https://github.com/liam-middlebrook,Add GLFW_CENTER_CURSOR window hint,1,['enhancement'],https://github.com/glfw/glfw/pull/842,https://github.com/liam-middlebrook,2,https://github.com/glfw/glfw/pull/842#issuecomment-265562314,"Implement a hint for positioning the cursor in the center of the window.
Fixes #749",I rebased around a handful of changes. Let me know if there's anything else you need. I believe I've removed anything that related to disabled cursors.,True,{}
glfw/glfw,https://github.com/glfw/glfw,842,2016-08-18T22:57:49Z,2017-02-06T14:31:54Z,2017-02-06T14:31:54Z,CLOSED,False,22,5,8,https://github.com/liam-middlebrook,Add GLFW_CENTER_CURSOR window hint,1,['enhancement'],https://github.com/glfw/glfw/pull/842,https://github.com/liam-middlebrook,3,https://github.com/glfw/glfw/pull/842#issuecomment-276713282,"Implement a hint for positioning the cursor in the center of the window.
Fixes #749","@elmindreda forgot to ping back, do the changes look good now?",True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,1,https://github.com/glfw/glfw/pull/850,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.","This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",True,{'THUMBS_UP': ['https://github.com/andrewcorrigan']}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/850#issuecomment-243780950,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.","This is very nicely done, but why wouldn't one use OSMesa directly instead of this? It seems to add nothing beyond OSMesa except perhaps the timer.",True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/850#issuecomment-243783082,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",This is related to #281.,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,4,https://github.com/glfw/glfw/pull/850#issuecomment-243824540,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.","In our case, we'd like to use it as a replacement backend to run unit tests
on some glfw-based code.  The tests are run on a headless server, so normal
OpenGL implementations aren't available.
Having an OSMesa backend let's us simply swap out the glfw library for one
compiled to use OSMesa and test the code in place.
On Aug 31, 2016 7:47 AM, ""Camilla Berglund"" notifications@github.com
wrote:

This is very nicely done, but why wouldn't one use OSMesa directly instead
of this? It seems to add nothing beyond OSMesa except perhaps the timer.
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#850 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AA9VNslaECHGJ6lNdErTl7el8VP-3tR6ks5qlY7lgaJpZM4JxIgi
.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/850#issuecomment-243831247,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.","@lyceel I see, thank you! This is certainly low impact and nearly perfect for hooking up to CI to stave off bitrot. Will very likely merge.",True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,6,https://github.com/glfw/glfw/pull/850#issuecomment-243849309,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",Sounds good.  Thanks!,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/850#issuecomment-245357777,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",Will you be maintaining this code or is it a one-time drop?,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,8,https://github.com/glfw/glfw/pull/850#issuecomment-245360335,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.","Realistically, it'll probably be somewhere in between.  I'll maintain them as long as I'm using them (which should be for a decent while at least).  I also don't have the ability to test or fix issues on platforms other than Linux).",True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/850#issuecomment-245360650,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",@lyceel It's fine either way; it's just useful for me to know. Thanks!,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/850#issuecomment-253530765,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",With minimal changes this works as expected on Cygwin too. 👍,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,11,https://github.com/glfw/glfw/pull/850#issuecomment-253565082,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.","A heads-up to avoid duplicate work: I've made most of these changes and a bunch more, some trivial, others subtle. Will publish a counter-proposal branch for your approval as soon as I'm done, both because it involves copyrights and because you've expressed interest in maintainership.",True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,12,https://github.com/glfw/glfw/pull/850#issuecomment-253590301,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",Thanks for that.  I was just about to dive in and make changes :-),True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,13,https://github.com/glfw/glfw/pull/850#issuecomment-259129844,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",@lyceel Please have a look at the osmesa branch and see if it's acceptable.,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,14,https://github.com/glfw/glfw/pull/850#issuecomment-259230513,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.","Code changes look fine, but I'm getting ""Error: OSMesa: Failed to load
required entry points"" when running the new offscreen example.
Relevant strace lines:
kakariko:~/github/glfw/examples$ strace ./offscreen 2>&1  | grep -i osmesa
open(""/usr/local/google/home/dalyj/github/glfw/src/libOSMesa.so.6"",
O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open(""/usr/lib/x86_64-linux-gnu/libOSMesa.so.6"", O_RDONLY|O_CLOEXEC) = 3
write(2, ""Error: OSMesa: Failed to load re""..., 52Error: OSMesa:
Failed to load required entry points
So the library is getting loaded, checking the symbols:
kakariko:~/$ objdump -T /usr/lib/x86_64-linux-gnu/libOSMesa.so.6 | grep OSMesa
/usr/lib/x86_64-linux-gnu/libOSMesa.so.6:     file format elf64-x86-64
00000000000515f0 g    DF .text  0000000000000020  Base        OSMesaColorClamp
0000000000050be0 g    DF .text  00000000000003db  Base
OSMesaCreateContextExt
00000000000512c0 g    DF .text  0000000000000082  Base
OSMesaDestroyContext
0000000000051690 g    DF .text  00000000000000ec  Base        OSMesaGetIntegerv
0000000000050b80 g    DF .text  000000000000005c  Base
OSMesaGetColorBuffer
0000000000051780 g    DF .text  0000000000000072  Base
OSMesaGetProcAddress
00000000000515e0 g    DF .text  0000000000000005  Base
OSMesaGetCurrentContext
0000000000051610 g    DF .text  0000000000000074  Base        OSMesaPixelStore
0000000000052ce0 g    DF .text  0000000000000215  Base        OSMesaMakeCurrent
0000000000051800 g    DF .text  000000000000001d  Base        OSMesaPostprocess
0000000000050fc0 g    DF .text  0000000000000014  Base
OSMesaCreateContext
0000000000050b10 g    DF .text  000000000000006c  Base
OSMesaGetDepthBuffer
So my copy of the library doesn't have the OSMesaCreateContextAttribs entry
point that you added, which kinda puts
a damper on the nice context creation changes as well :-(
This was apparently added in Mesa 11.2 (April 2016), and my machine has:
kakariko:~/github/glfw/src$ dpkg-query --show libosmesa6-dev
libosmesa6-dev  10.1.3-0ubuntu0.6
Unfortunately, I don't control the development environment on my machine.
If you want to go ahead with the newer OSMesa version, that's OK with me,
but I'll have to revert those changes on my side and go back to the plain
vanilla OSMesaCreateContext.  On the other hand, it might be prudent to
avoid such a new (OK, not that new, but still...) feature as other users
might hit this issue as well.
I'm OK with whatever you decide.
On Tue, Nov 8, 2016 at 4:58 AM, Camilla Berglund notifications@github.com
wrote:

@lyceel https://github.com/lyceel Please have a look at the osmesa
branch and see if it's acceptable.
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#850 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AA9VNpVUwu7G-U1dLWRmD6b3064IxSSwks5q8HH7gaJpZM4JxIgi
.",True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,15,https://github.com/glfw/glfw/pull/850#issuecomment-259239927,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",I'll add OSMesaCreateContextExt as a fallback.,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,16,https://github.com/glfw/glfw/pull/850#issuecomment-259241975,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",Yes OSMesaCreatecontextExt is there in 10.1.3.,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,17,https://github.com/glfw/glfw/pull/850#issuecomment-259292604,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",@lyceel Fallback added.,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,18,https://github.com/glfw/glfw/pull/850#issuecomment-259294320,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",That did it.  Looks good to me 👍,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,19,https://github.com/glfw/glfw/pull/850#issuecomment-259302869,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.","Cool!
I may re-purpose some of these files to a generic null backend in the future, of course without compromising your use case.",True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/elmindreda,20,https://github.com/glfw/glfw/pull/850#issuecomment-259305985,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,850,2016-08-31T01:07:49Z,2016-11-09T00:47:56Z,2016-11-09T00:59:43Z,CLOSED,False,2101,0,16,https://github.com/lyceel,OSMesa backend,2,"['enhancement', 'macOS', 'Linux']",https://github.com/glfw/glfw/pull/850,https://github.com/lyceel,21,https://github.com/glfw/glfw/pull/850#issuecomment-259307762,"This adds basic support for using OSMesa to create an in-memory rendering surface and OpenGL context.  Many of the GLFW entry points (cursors, window positioning, etc) are no-ops or stubs since they don't make sense in this context.  Also, input events don't work at all, since there's not really a good way for an offscreen window to gain input focus.
Since none of the existing examples made it obvious that this was actually working, I created duplicate examples of the simple and particles examples that will run briefly, then dump the framebuffer to an image file and exit.  These examples are only compiled when OSMesa is enabled.",Thank you!  Looking forward to 3.3 :-),True,{}
glfw/glfw,https://github.com/glfw/glfw,852,2016-08-31T23:27:48Z,2016-10-13T23:07:29Z,2016-10-13T23:07:30Z,CLOSED,False,1,1,1,https://github.com/imkira,Fixed crash during maximize/restore,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/852,https://github.com/imkira,1,https://github.com/glfw/glfw/pull/852,"OS and version: MacOS X El Capitan (10.11.5)
Release or commit: 2e6a110
Error messages:
Call stack:
2016-09-01 00:30:48.873 main[80456:9371783] *** Assertion failure in -[_NSCGSWindow setFrame:], /Library/Caches/com.apple.xbs/Sources/AppKit/AppKit-1404.47/CGS.subproj/NSCGSWindow.m:621
2016-09-01 00:30:48.876 main[80456:9371783] An uncaught exception was raised
2016-09-01 00:30:48.876 main[80456:9371783] Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)
2016-09-01 00:30:48.876 main[80456:9371783] (
    0   CoreFoundation                      0x00007fff9ea314f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9ae37f7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff9ea361ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9267d856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   AppKit                              0x00007fff89674204 -[_NSCGSWindow setFrame:] + 250
    5   AppKit                              0x00007fff89767a23 _NSShapeRoundedWindowWithWeighting + 216
    6   AppKit                              0x00007fff8961b371 -[NSThemeFrame shapeWindow] + 265
    7   AppKit                              0x00007fff8961a291 -[NSThemeFrame setFrameSize:] + 440
    8   AppKit                              0x00007fff89600906 -[NSWindow _setFrame:updateBorderViewSize:] + 1088
    9   AppKit                              0x00007fff89619379 -[NSWindow _oldPlaceWindow:] + 1075
    10  AppKit                              0x00007fff8961874e -[NSWindow _setFrameCommon:display:stashSize:] + 2743
    11  AppKit                              0x00007fff89617c88 -[NSWindow _setFrame:display:allowImplicitAnimation:stashSize:] + 222
    12  AppKit                              0x00007fff89617ba3 -[NSWindow setFrame:display:] + 67
    13  AppKit                              0x00007fff897be43f __28-[NSMoveHelper _doAnimation]_block_invoke + 1084
    14  AppKit                              0x00007fff8972d2ea -[NSScreenDisplayLink _fire] + 439
    15  CoreFoundation                      0x00007fff9e9aeb94 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    16  CoreFoundation                      0x00007fff9e9ae823 __CFRunLoopDoTimer + 1075
    17  CoreFoundation                      0x00007fff9e9ae37a __CFRunLoopDoTimers + 298
    18  CoreFoundation                      0x00007fff9e9a5871 __CFRunLoopRun + 1841
    19  CoreFoundation                      0x00007fff9e9a4ed8 CFRunLoopRunSpecific + 296
    20  AppKit                              0x00007fff897bd6bc -[NSMoveHelper _doAnimation] + 1630
    21  AppKit                              0x00007fff897d6af9 -[NSMoveHelper _resizeWindow:toFrame:display:] + 419
    22  AppKit                              0x00007fff89738035 -[NSWindow setFrame:display:animate:] + 1472
    23  AppKit                              0x00007fff897d5bfc -[NSWindow zoom:] + 843
    24  main                                0x0000000004054170 runtime.asmcgocall + 112
)
2016-09-01 00:30:48.876 main[80456:9371783] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)'
*** First throw call stack:
(
    0   CoreFoundation                      0x00007fff9ea314f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9ae37f7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff9ea361ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9267d856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   AppKit                              0x00007fff89674204 -[_NSCGSWindow setFrame:] + 250
    5   AppKit                              0x00007fff89767a23 _NSShapeRoundedWindowWithWeighting + 216
    6   AppKit                              0x00007fff8961b371 -[NSThemeFrame shapeWindow] + 265
    7   AppKit                              0x00007fff8961a291 -[NSThemeFrame setFrameSize:] + 440
    8   AppKit                              0x00007fff89600906 -[NSWindow _setFrame:updateBorderViewSize:] + 1088
    9   AppKit                              0x00007fff89619379 -[NSWindow _oldPlaceWindow:] + 1075
    10  AppKit                              0x00007fff8961874e -[NSWindow _setFrameCommon:display:stashSize:] + 2743
    11  AppKit                              0x00007fff89617c88 -[NSWindow _setFrame:display:allowImplicitAnimation:stashSize:] + 222
    12  AppKit                              0x00007fff89617ba3 -[NSWindow setFrame:display:] + 67
    13  AppKit                              0x00007fff897be43f __28-[NSMoveHelper _doAnimation]_block_invoke + 1084
    14  AppKit                              0x00007fff8972d2ea -[NSScreenDisplayLink _fire] + 439
    15  CoreFoundation                      0x00007fff9e9aeb94 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    16  CoreFoundation                      0x00007fff9e9ae823 __CFRunLoopDoTimer + 1075
    17  CoreFoundation                      0x00007fff9e9ae37a __CFRunLoopDoTimers + 298
    18  CoreFoundation                      0x00007fff9e9a5871 __CFRunLoopRun + 1841
    19  CoreFoundation                      0x00007fff9e9a4ed8 CFRunLoopRunSpecific + 296
    20  AppKit                              0x00007fff897bd6bc -[NSMoveHelper _doAnimation] + 1630
    21  AppKit                              0x00007fff897d6af9 -[NSMoveHelper _resizeWindow:toFrame:display:] + 419
    22  AppKit                              0x00007fff89738035 -[NSWindow setFrame:display:animate:] + 1472
    23  AppKit                              0x00007fff897d5bfc -[NSWindow zoom:] + 843
    24  main                                0x0000000004054170 runtime.asmcgocall + 112
)
libc++abi.dylib: terminating with uncaught exception of type NSException
SIGABRT: abort
PC=0x7fff96595f06 m=0

A crash will happen on cocoa systems if you do the following code:
glfwSetWindowAspectRatio(w, GLFW_DONT_CARE, GLFW_DONT_CARE);
glfwMaximizeWindow(w);
The same is true for glfwRestoreWindow.","OS and version: MacOS X El Capitan (10.11.5)
Release or commit: 2e6a110
Error messages:
Call stack:
2016-09-01 00:30:48.873 main[80456:9371783] *** Assertion failure in -[_NSCGSWindow setFrame:], /Library/Caches/com.apple.xbs/Sources/AppKit/AppKit-1404.47/CGS.subproj/NSCGSWindow.m:621
2016-09-01 00:30:48.876 main[80456:9371783] An uncaught exception was raised
2016-09-01 00:30:48.876 main[80456:9371783] Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)
2016-09-01 00:30:48.876 main[80456:9371783] (
    0   CoreFoundation                      0x00007fff9ea314f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9ae37f7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff9ea361ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9267d856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   AppKit                              0x00007fff89674204 -[_NSCGSWindow setFrame:] + 250
    5   AppKit                              0x00007fff89767a23 _NSShapeRoundedWindowWithWeighting + 216
    6   AppKit                              0x00007fff8961b371 -[NSThemeFrame shapeWindow] + 265
    7   AppKit                              0x00007fff8961a291 -[NSThemeFrame setFrameSize:] + 440
    8   AppKit                              0x00007fff89600906 -[NSWindow _setFrame:updateBorderViewSize:] + 1088
    9   AppKit                              0x00007fff89619379 -[NSWindow _oldPlaceWindow:] + 1075
    10  AppKit                              0x00007fff8961874e -[NSWindow _setFrameCommon:display:stashSize:] + 2743
    11  AppKit                              0x00007fff89617c88 -[NSWindow _setFrame:display:allowImplicitAnimation:stashSize:] + 222
    12  AppKit                              0x00007fff89617ba3 -[NSWindow setFrame:display:] + 67
    13  AppKit                              0x00007fff897be43f __28-[NSMoveHelper _doAnimation]_block_invoke + 1084
    14  AppKit                              0x00007fff8972d2ea -[NSScreenDisplayLink _fire] + 439
    15  CoreFoundation                      0x00007fff9e9aeb94 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    16  CoreFoundation                      0x00007fff9e9ae823 __CFRunLoopDoTimer + 1075
    17  CoreFoundation                      0x00007fff9e9ae37a __CFRunLoopDoTimers + 298
    18  CoreFoundation                      0x00007fff9e9a5871 __CFRunLoopRun + 1841
    19  CoreFoundation                      0x00007fff9e9a4ed8 CFRunLoopRunSpecific + 296
    20  AppKit                              0x00007fff897bd6bc -[NSMoveHelper _doAnimation] + 1630
    21  AppKit                              0x00007fff897d6af9 -[NSMoveHelper _resizeWindow:toFrame:display:] + 419
    22  AppKit                              0x00007fff89738035 -[NSWindow setFrame:display:animate:] + 1472
    23  AppKit                              0x00007fff897d5bfc -[NSWindow zoom:] + 843
    24  main                                0x0000000004054170 runtime.asmcgocall + 112
)
2016-09-01 00:30:48.876 main[80456:9371783] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)'
*** First throw call stack:
(
    0   CoreFoundation                      0x00007fff9ea314f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9ae37f7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff9ea361ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9267d856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   AppKit                              0x00007fff89674204 -[_NSCGSWindow setFrame:] + 250
    5   AppKit                              0x00007fff89767a23 _NSShapeRoundedWindowWithWeighting + 216
    6   AppKit                              0x00007fff8961b371 -[NSThemeFrame shapeWindow] + 265
    7   AppKit                              0x00007fff8961a291 -[NSThemeFrame setFrameSize:] + 440
    8   AppKit                              0x00007fff89600906 -[NSWindow _setFrame:updateBorderViewSize:] + 1088
    9   AppKit                              0x00007fff89619379 -[NSWindow _oldPlaceWindow:] + 1075
    10  AppKit                              0x00007fff8961874e -[NSWindow _setFrameCommon:display:stashSize:] + 2743
    11  AppKit                              0x00007fff89617c88 -[NSWindow _setFrame:display:allowImplicitAnimation:stashSize:] + 222
    12  AppKit                              0x00007fff89617ba3 -[NSWindow setFrame:display:] + 67
    13  AppKit                              0x00007fff897be43f __28-[NSMoveHelper _doAnimation]_block_invoke + 1084
    14  AppKit                              0x00007fff8972d2ea -[NSScreenDisplayLink _fire] + 439
    15  CoreFoundation                      0x00007fff9e9aeb94 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    16  CoreFoundation                      0x00007fff9e9ae823 __CFRunLoopDoTimer + 1075
    17  CoreFoundation                      0x00007fff9e9ae37a __CFRunLoopDoTimers + 298
    18  CoreFoundation                      0x00007fff9e9a5871 __CFRunLoopRun + 1841
    19  CoreFoundation                      0x00007fff9e9a4ed8 CFRunLoopRunSpecific + 296
    20  AppKit                              0x00007fff897bd6bc -[NSMoveHelper _doAnimation] + 1630
    21  AppKit                              0x00007fff897d6af9 -[NSMoveHelper _resizeWindow:toFrame:display:] + 419
    22  AppKit                              0x00007fff89738035 -[NSWindow setFrame:display:animate:] + 1472
    23  AppKit                              0x00007fff897d5bfc -[NSWindow zoom:] + 843
    24  main                                0x0000000004054170 runtime.asmcgocall + 112
)
libc++abi.dylib: terminating with uncaught exception of type NSException
SIGABRT: abort
PC=0x7fff96595f06 m=0

A crash will happen on cocoa systems if you do the following code:
glfwSetWindowAspectRatio(w, GLFW_DONT_CARE, GLFW_DONT_CARE);
glfwMaximizeWindow(w);
The same is true for glfwRestoreWindow.",True,{}
glfw/glfw,https://github.com/glfw/glfw,852,2016-08-31T23:27:48Z,2016-10-13T23:07:29Z,2016-10-13T23:07:30Z,CLOSED,False,1,1,1,https://github.com/imkira,Fixed crash during maximize/restore,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/852,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/852#issuecomment-250194995,"OS and version: MacOS X El Capitan (10.11.5)
Release or commit: 2e6a110
Error messages:
Call stack:
2016-09-01 00:30:48.873 main[80456:9371783] *** Assertion failure in -[_NSCGSWindow setFrame:], /Library/Caches/com.apple.xbs/Sources/AppKit/AppKit-1404.47/CGS.subproj/NSCGSWindow.m:621
2016-09-01 00:30:48.876 main[80456:9371783] An uncaught exception was raised
2016-09-01 00:30:48.876 main[80456:9371783] Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)
2016-09-01 00:30:48.876 main[80456:9371783] (
    0   CoreFoundation                      0x00007fff9ea314f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9ae37f7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff9ea361ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9267d856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   AppKit                              0x00007fff89674204 -[_NSCGSWindow setFrame:] + 250
    5   AppKit                              0x00007fff89767a23 _NSShapeRoundedWindowWithWeighting + 216
    6   AppKit                              0x00007fff8961b371 -[NSThemeFrame shapeWindow] + 265
    7   AppKit                              0x00007fff8961a291 -[NSThemeFrame setFrameSize:] + 440
    8   AppKit                              0x00007fff89600906 -[NSWindow _setFrame:updateBorderViewSize:] + 1088
    9   AppKit                              0x00007fff89619379 -[NSWindow _oldPlaceWindow:] + 1075
    10  AppKit                              0x00007fff8961874e -[NSWindow _setFrameCommon:display:stashSize:] + 2743
    11  AppKit                              0x00007fff89617c88 -[NSWindow _setFrame:display:allowImplicitAnimation:stashSize:] + 222
    12  AppKit                              0x00007fff89617ba3 -[NSWindow setFrame:display:] + 67
    13  AppKit                              0x00007fff897be43f __28-[NSMoveHelper _doAnimation]_block_invoke + 1084
    14  AppKit                              0x00007fff8972d2ea -[NSScreenDisplayLink _fire] + 439
    15  CoreFoundation                      0x00007fff9e9aeb94 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    16  CoreFoundation                      0x00007fff9e9ae823 __CFRunLoopDoTimer + 1075
    17  CoreFoundation                      0x00007fff9e9ae37a __CFRunLoopDoTimers + 298
    18  CoreFoundation                      0x00007fff9e9a5871 __CFRunLoopRun + 1841
    19  CoreFoundation                      0x00007fff9e9a4ed8 CFRunLoopRunSpecific + 296
    20  AppKit                              0x00007fff897bd6bc -[NSMoveHelper _doAnimation] + 1630
    21  AppKit                              0x00007fff897d6af9 -[NSMoveHelper _resizeWindow:toFrame:display:] + 419
    22  AppKit                              0x00007fff89738035 -[NSWindow setFrame:display:animate:] + 1472
    23  AppKit                              0x00007fff897d5bfc -[NSWindow zoom:] + 843
    24  main                                0x0000000004054170 runtime.asmcgocall + 112
)
2016-09-01 00:30:48.876 main[80456:9371783] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)'
*** First throw call stack:
(
    0   CoreFoundation                      0x00007fff9ea314f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9ae37f7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff9ea361ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9267d856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   AppKit                              0x00007fff89674204 -[_NSCGSWindow setFrame:] + 250
    5   AppKit                              0x00007fff89767a23 _NSShapeRoundedWindowWithWeighting + 216
    6   AppKit                              0x00007fff8961b371 -[NSThemeFrame shapeWindow] + 265
    7   AppKit                              0x00007fff8961a291 -[NSThemeFrame setFrameSize:] + 440
    8   AppKit                              0x00007fff89600906 -[NSWindow _setFrame:updateBorderViewSize:] + 1088
    9   AppKit                              0x00007fff89619379 -[NSWindow _oldPlaceWindow:] + 1075
    10  AppKit                              0x00007fff8961874e -[NSWindow _setFrameCommon:display:stashSize:] + 2743
    11  AppKit                              0x00007fff89617c88 -[NSWindow _setFrame:display:allowImplicitAnimation:stashSize:] + 222
    12  AppKit                              0x00007fff89617ba3 -[NSWindow setFrame:display:] + 67
    13  AppKit                              0x00007fff897be43f __28-[NSMoveHelper _doAnimation]_block_invoke + 1084
    14  AppKit                              0x00007fff8972d2ea -[NSScreenDisplayLink _fire] + 439
    15  CoreFoundation                      0x00007fff9e9aeb94 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    16  CoreFoundation                      0x00007fff9e9ae823 __CFRunLoopDoTimer + 1075
    17  CoreFoundation                      0x00007fff9e9ae37a __CFRunLoopDoTimers + 298
    18  CoreFoundation                      0x00007fff9e9a5871 __CFRunLoopRun + 1841
    19  CoreFoundation                      0x00007fff9e9a4ed8 CFRunLoopRunSpecific + 296
    20  AppKit                              0x00007fff897bd6bc -[NSMoveHelper _doAnimation] + 1630
    21  AppKit                              0x00007fff897d6af9 -[NSMoveHelper _resizeWindow:toFrame:display:] + 419
    22  AppKit                              0x00007fff89738035 -[NSWindow setFrame:display:animate:] + 1472
    23  AppKit                              0x00007fff897d5bfc -[NSWindow zoom:] + 843
    24  main                                0x0000000004054170 runtime.asmcgocall + 112
)
libc++abi.dylib: terminating with uncaught exception of type NSException
SIGABRT: abort
PC=0x7fff96595f06 m=0

A crash will happen on cocoa systems if you do the following code:
glfwSetWindowAspectRatio(w, GLFW_DONT_CARE, GLFW_DONT_CARE);
glfwMaximizeWindow(w);
The same is true for glfwRestoreWindow.","With this change, the aspect ratio constraint isn't disabled.",True,{}
glfw/glfw,https://github.com/glfw/glfw,852,2016-08-31T23:27:48Z,2016-10-13T23:07:29Z,2016-10-13T23:07:30Z,CLOSED,False,1,1,1,https://github.com/imkira,Fixed crash during maximize/restore,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/852,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/852#issuecomment-252669575,"OS and version: MacOS X El Capitan (10.11.5)
Release or commit: 2e6a110
Error messages:
Call stack:
2016-09-01 00:30:48.873 main[80456:9371783] *** Assertion failure in -[_NSCGSWindow setFrame:], /Library/Caches/com.apple.xbs/Sources/AppKit/AppKit-1404.47/CGS.subproj/NSCGSWindow.m:621
2016-09-01 00:30:48.876 main[80456:9371783] An uncaught exception was raised
2016-09-01 00:30:48.876 main[80456:9371783] Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)
2016-09-01 00:30:48.876 main[80456:9371783] (
    0   CoreFoundation                      0x00007fff9ea314f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9ae37f7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff9ea361ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9267d856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   AppKit                              0x00007fff89674204 -[_NSCGSWindow setFrame:] + 250
    5   AppKit                              0x00007fff89767a23 _NSShapeRoundedWindowWithWeighting + 216
    6   AppKit                              0x00007fff8961b371 -[NSThemeFrame shapeWindow] + 265
    7   AppKit                              0x00007fff8961a291 -[NSThemeFrame setFrameSize:] + 440
    8   AppKit                              0x00007fff89600906 -[NSWindow _setFrame:updateBorderViewSize:] + 1088
    9   AppKit                              0x00007fff89619379 -[NSWindow _oldPlaceWindow:] + 1075
    10  AppKit                              0x00007fff8961874e -[NSWindow _setFrameCommon:display:stashSize:] + 2743
    11  AppKit                              0x00007fff89617c88 -[NSWindow _setFrame:display:allowImplicitAnimation:stashSize:] + 222
    12  AppKit                              0x00007fff89617ba3 -[NSWindow setFrame:display:] + 67
    13  AppKit                              0x00007fff897be43f __28-[NSMoveHelper _doAnimation]_block_invoke + 1084
    14  AppKit                              0x00007fff8972d2ea -[NSScreenDisplayLink _fire] + 439
    15  CoreFoundation                      0x00007fff9e9aeb94 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    16  CoreFoundation                      0x00007fff9e9ae823 __CFRunLoopDoTimer + 1075
    17  CoreFoundation                      0x00007fff9e9ae37a __CFRunLoopDoTimers + 298
    18  CoreFoundation                      0x00007fff9e9a5871 __CFRunLoopRun + 1841
    19  CoreFoundation                      0x00007fff9e9a4ed8 CFRunLoopRunSpecific + 296
    20  AppKit                              0x00007fff897bd6bc -[NSMoveHelper _doAnimation] + 1630
    21  AppKit                              0x00007fff897d6af9 -[NSMoveHelper _resizeWindow:toFrame:display:] + 419
    22  AppKit                              0x00007fff89738035 -[NSWindow setFrame:display:animate:] + 1472
    23  AppKit                              0x00007fff897d5bfc -[NSWindow zoom:] + 843
    24  main                                0x0000000004054170 runtime.asmcgocall + 112
)
2016-09-01 00:30:48.876 main[80456:9371783] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)'
*** First throw call stack:
(
    0   CoreFoundation                      0x00007fff9ea314f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9ae37f7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff9ea361ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9267d856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   AppKit                              0x00007fff89674204 -[_NSCGSWindow setFrame:] + 250
    5   AppKit                              0x00007fff89767a23 _NSShapeRoundedWindowWithWeighting + 216
    6   AppKit                              0x00007fff8961b371 -[NSThemeFrame shapeWindow] + 265
    7   AppKit                              0x00007fff8961a291 -[NSThemeFrame setFrameSize:] + 440
    8   AppKit                              0x00007fff89600906 -[NSWindow _setFrame:updateBorderViewSize:] + 1088
    9   AppKit                              0x00007fff89619379 -[NSWindow _oldPlaceWindow:] + 1075
    10  AppKit                              0x00007fff8961874e -[NSWindow _setFrameCommon:display:stashSize:] + 2743
    11  AppKit                              0x00007fff89617c88 -[NSWindow _setFrame:display:allowImplicitAnimation:stashSize:] + 222
    12  AppKit                              0x00007fff89617ba3 -[NSWindow setFrame:display:] + 67
    13  AppKit                              0x00007fff897be43f __28-[NSMoveHelper _doAnimation]_block_invoke + 1084
    14  AppKit                              0x00007fff8972d2ea -[NSScreenDisplayLink _fire] + 439
    15  CoreFoundation                      0x00007fff9e9aeb94 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    16  CoreFoundation                      0x00007fff9e9ae823 __CFRunLoopDoTimer + 1075
    17  CoreFoundation                      0x00007fff9e9ae37a __CFRunLoopDoTimers + 298
    18  CoreFoundation                      0x00007fff9e9a5871 __CFRunLoopRun + 1841
    19  CoreFoundation                      0x00007fff9e9a4ed8 CFRunLoopRunSpecific + 296
    20  AppKit                              0x00007fff897bd6bc -[NSMoveHelper _doAnimation] + 1630
    21  AppKit                              0x00007fff897d6af9 -[NSMoveHelper _resizeWindow:toFrame:display:] + 419
    22  AppKit                              0x00007fff89738035 -[NSWindow setFrame:display:animate:] + 1472
    23  AppKit                              0x00007fff897d5bfc -[NSWindow zoom:] + 843
    24  main                                0x0000000004054170 runtime.asmcgocall + 112
)
libc++abi.dylib: terminating with uncaught exception of type NSException
SIGABRT: abort
PC=0x7fff96595f06 m=0

A crash will happen on cocoa systems if you do the following code:
glfwSetWindowAspectRatio(w, GLFW_DONT_CARE, GLFW_DONT_CARE);
glfwMaximizeWindow(w);
The same is true for glfwRestoreWindow.",Never mind. You're right. Found where this was documented. Had expected it to be documented under NSWindow contentAspectRatio as well.,True,{}
glfw/glfw,https://github.com/glfw/glfw,856,2016-09-07T21:32:38Z,2016-12-04T02:56:11Z,2017-03-20T01:32:31Z,CLOSED,False,210,47,5,https://github.com/IntellectualKitty,Joystick event callbacks,5,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/856,https://github.com/IntellectualKitty,1,https://github.com/glfw/glfw/pull/856,"A complete structure for joystick axis and button event callbacks has been provided in glfw3.h, internal.h, and input.h.  Also, testing has been included in events.c.
Implementation has been provided only for OS X, in cocoa_joystick.m (see the notes with that file for more details).
I am not particularly familiar with Windows or Linux programming, nor do I have the setup to compile and test code on those platforms.  However, if it would be helpful in the meantime, I think it would be relatively easy to simulate joystick events on those platforms by performing polling in the _glfwPlatformPollEvents() functions and calling the joystick button and axis callback functions when the polled values have changed.  Doing the same thing for _glfwPlatformWaitEvents() and _glfwPlatformWaitEventsTimeout() should also be relatively straightforward by repeatedly waiting for regular events, perhaps with a 0.1 second wait time, and then polling for joystick events, until an event occurs (or the timeout elapses).","A complete structure for joystick axis and button event callbacks has been provided in glfw3.h, internal.h, and input.h.  Also, testing has been included in events.c.
Implementation has been provided only for OS X, in cocoa_joystick.m (see the notes with that file for more details).
I am not particularly familiar with Windows or Linux programming, nor do I have the setup to compile and test code on those platforms.  However, if it would be helpful in the meantime, I think it would be relatively easy to simulate joystick events on those platforms by performing polling in the _glfwPlatformPollEvents() functions and calling the joystick button and axis callback functions when the polled values have changed.  Doing the same thing for _glfwPlatformWaitEvents() and _glfwPlatformWaitEventsTimeout() should also be relatively straightforward by repeatedly waiting for regular events, perhaps with a 0.1 second wait time, and then polling for joystick events, until an event occurs (or the timeout elapses).",True,{}
glfw/glfw,https://github.com/glfw/glfw,856,2016-09-07T21:32:38Z,2016-12-04T02:56:11Z,2017-03-20T01:32:31Z,CLOSED,False,210,47,5,https://github.com/IntellectualKitty,Joystick event callbacks,5,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/856,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/856#issuecomment-247145022,"A complete structure for joystick axis and button event callbacks has been provided in glfw3.h, internal.h, and input.h.  Also, testing has been included in events.c.
Implementation has been provided only for OS X, in cocoa_joystick.m (see the notes with that file for more details).
I am not particularly familiar with Windows or Linux programming, nor do I have the setup to compile and test code on those platforms.  However, if it would be helpful in the meantime, I think it would be relatively easy to simulate joystick events on those platforms by performing polling in the _glfwPlatformPollEvents() functions and calling the joystick button and axis callback functions when the polled values have changed.  Doing the same thing for _glfwPlatformWaitEvents() and _glfwPlatformWaitEventsTimeout() should also be relatively straightforward by repeatedly waiting for regular events, perhaps with a 0.1 second wait time, and then polling for joystick events, until an event occurs (or the timeout elapses).",Will review. This intersects with at least #341 and #601.,True,{}
glfw/glfw,https://github.com/glfw/glfw,856,2016-09-07T21:32:38Z,2016-12-04T02:56:11Z,2017-03-20T01:32:31Z,CLOSED,False,210,47,5,https://github.com/IntellectualKitty,Joystick event callbacks,5,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/856,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/856#issuecomment-272697065,"A complete structure for joystick axis and button event callbacks has been provided in glfw3.h, internal.h, and input.h.  Also, testing has been included in events.c.
Implementation has been provided only for OS X, in cocoa_joystick.m (see the notes with that file for more details).
I am not particularly familiar with Windows or Linux programming, nor do I have the setup to compile and test code on those platforms.  However, if it would be helpful in the meantime, I think it would be relatively easy to simulate joystick events on those platforms by performing polling in the _glfwPlatformPollEvents() functions and calling the joystick button and axis callback functions when the polled values have changed.  Doing the same thing for _glfwPlatformWaitEvents() and _glfwPlatformWaitEventsTimeout() should also be relatively straightforward by repeatedly waiting for regular events, perhaps with a 0.1 second wait time, and then polling for joystick events, until an event occurs (or the timeout elapses).",This would fit even better than before on top of the work in the gamecontrollerdb branch.,True,{}
glfw/glfw,https://github.com/glfw/glfw,856,2016-09-07T21:32:38Z,2016-12-04T02:56:11Z,2017-03-20T01:32:31Z,CLOSED,False,210,47,5,https://github.com/IntellectualKitty,Joystick event callbacks,5,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/856,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/856#issuecomment-272996613,"A complete structure for joystick axis and button event callbacks has been provided in glfw3.h, internal.h, and input.h.  Also, testing has been included in events.c.
Implementation has been provided only for OS X, in cocoa_joystick.m (see the notes with that file for more details).
I am not particularly familiar with Windows or Linux programming, nor do I have the setup to compile and test code on those platforms.  However, if it would be helpful in the meantime, I think it would be relatively easy to simulate joystick events on those platforms by performing polling in the _glfwPlatformPollEvents() functions and calling the joystick button and axis callback functions when the polled values have changed.  Doing the same thing for _glfwPlatformWaitEvents() and _glfwPlatformWaitEventsTimeout() should also be relatively straightforward by repeatedly waiting for regular events, perhaps with a 0.1 second wait time, and then polling for joystick events, until an event occurs (or the timeout elapses).",It's annoying to work with a closed issue. Letting this be replaced by #601.,True,{}
glfw/glfw,https://github.com/glfw/glfw,856,2016-09-07T21:32:38Z,2016-12-04T02:56:11Z,2017-03-20T01:32:31Z,CLOSED,False,210,47,5,https://github.com/IntellectualKitty,Joystick event callbacks,5,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/856,https://github.com/IntellectualKitty,5,https://github.com/glfw/glfw/pull/856#issuecomment-287627170,"A complete structure for joystick axis and button event callbacks has been provided in glfw3.h, internal.h, and input.h.  Also, testing has been included in events.c.
Implementation has been provided only for OS X, in cocoa_joystick.m (see the notes with that file for more details).
I am not particularly familiar with Windows or Linux programming, nor do I have the setup to compile and test code on those platforms.  However, if it would be helpful in the meantime, I think it would be relatively easy to simulate joystick events on those platforms by performing polling in the _glfwPlatformPollEvents() functions and calling the joystick button and axis callback functions when the polled values have changed.  Doing the same thing for _glfwPlatformWaitEvents() and _glfwPlatformWaitEventsTimeout() should also be relatively straightforward by repeatedly waiting for regular events, perhaps with a 0.1 second wait time, and then polling for joystick events, until an event occurs (or the timeout elapses).","@elmindreda I thought you might be interested in Alex Diener's gamepad library.  It handles gamepad events for Windows, macOS, and Linux.   It is a callback-only library with an interface that is very similar to GLFW's (at least pre-hat switch support).",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,856,2016-09-07T21:32:38Z,2016-12-04T02:56:11Z,2017-03-20T01:32:31Z,CLOSED,False,210,47,5,https://github.com/IntellectualKitty,Joystick event callbacks,5,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/856,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/856#issuecomment-287663040,"A complete structure for joystick axis and button event callbacks has been provided in glfw3.h, internal.h, and input.h.  Also, testing has been included in events.c.
Implementation has been provided only for OS X, in cocoa_joystick.m (see the notes with that file for more details).
I am not particularly familiar with Windows or Linux programming, nor do I have the setup to compile and test code on those platforms.  However, if it would be helpful in the meantime, I think it would be relatively easy to simulate joystick events on those platforms by performing polling in the _glfwPlatformPollEvents() functions and calling the joystick button and axis callback functions when the polled values have changed.  Doing the same thing for _glfwPlatformWaitEvents() and _glfwPlatformWaitEventsTimeout() should also be relatively straightforward by repeatedly waiting for regular events, perhaps with a 0.1 second wait time, and then polling for joystick events, until an event occurs (or the timeout elapses).",@IntellectualKitty Seems I'd starred it at some point but forgotten all about it. Looks like it'll be really useful for the work ahead. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,856,2016-09-07T21:32:38Z,2016-12-04T02:56:11Z,2017-03-20T01:32:31Z,CLOSED,False,210,47,5,https://github.com/IntellectualKitty,Joystick event callbacks,5,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/856,https://github.com/IntellectualKitty,7,https://github.com/glfw/glfw/pull/856#issuecomment-287664410,"A complete structure for joystick axis and button event callbacks has been provided in glfw3.h, internal.h, and input.h.  Also, testing has been included in events.c.
Implementation has been provided only for OS X, in cocoa_joystick.m (see the notes with that file for more details).
I am not particularly familiar with Windows or Linux programming, nor do I have the setup to compile and test code on those platforms.  However, if it would be helpful in the meantime, I think it would be relatively easy to simulate joystick events on those platforms by performing polling in the _glfwPlatformPollEvents() functions and calling the joystick button and axis callback functions when the polled values have changed.  Doing the same thing for _glfwPlatformWaitEvents() and _glfwPlatformWaitEventsTimeout() should also be relatively straightforward by repeatedly waiting for regular events, perhaps with a 0.1 second wait time, and then polling for joystick events, until an event occurs (or the timeout elapses).","@elmindreda You're welcome!  I don't have a lot of free time right now, but if I am available when you start doing this, I'd be glad to help with the high level interface or the macOS implementation.",True,{}
glfw/glfw,https://github.com/glfw/glfw,858,2016-09-10T15:47:23Z,2016-09-14T21:04:04Z,2017-04-25T13:36:20Z,CLOSED,False,59,13,1,https://github.com/PDirSG,Update vulkan.c,1,"['wontfix', 'Vulkan']",https://github.com/glfw/glfw/pull/858,https://github.com/PDirSG,1,https://github.com/glfw/glfw/pull/858,"I know it is overkill but in first OpenGL releases, there is have only two or three Extensions. I think it is same for Vulkan. More futuristic...","I know it is overkill but in first OpenGL releases, there is have only two or three Extensions. I think it is same for Vulkan. More futuristic...",True,{}
glfw/glfw,https://github.com/glfw/glfw,858,2016-09-10T15:47:23Z,2016-09-14T21:04:04Z,2017-04-25T13:36:20Z,CLOSED,False,59,13,1,https://github.com/PDirSG,Update vulkan.c,1,"['wontfix', 'Vulkan']",https://github.com/glfw/glfw/pull/858,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/858#issuecomment-246177610,"I know it is overkill but in first OpenGL releases, there is have only two or three Extensions. I think it is same for Vulkan. More futuristic...","Please post the measurements you based this on. You are complicating the code massively, so there needs to be an equal gain. Can you show that it will be that much of a hotspot if n approaches the number of OpenGL extensions? All OpenGL extension loaders I'm aware of do it the way this is currently implemented, that doesn't appear to be an issue for anyone.",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,858,2016-09-10T15:47:23Z,2016-09-14T21:04:04Z,2017-04-25T13:36:20Z,CLOSED,False,59,13,1,https://github.com/PDirSG,Update vulkan.c,1,"['wontfix', 'Vulkan']",https://github.com/glfw/glfw/pull/858,https://github.com/PDirSG,3,https://github.com/glfw/glfw/pull/858#issuecomment-246194179,"I know it is overkill but in first OpenGL releases, there is have only two or three Extensions. I think it is same for Vulkan. More futuristic...","Now, if we do not add ""continue;"" statement, it will continue to comparise the same extension string even if it is found. then performance--
Now, if we do not add ""if(!extensionName)""  statements, it will comparise a found extension. then performance--
if we do not  add 'if(_glfw.vk.KHR_surface && _glfw.vk.KHR_win32_surface)' statement, it will continue to search extensions even required extensions found. Then performance--
And the preprocessor statements: what is the mean of searching an Linux extension in a Windows machine? Then performance--
(Note: Vulkan only supports Windows and Linux, so it is have to fully portable)
I know it is overkill, but in OpenGL 1.0, there is only few extensions. How many now? More than 100... I think it is same for Vulkan.",True,{}
glfw/glfw,https://github.com/glfw/glfw,858,2016-09-10T15:47:23Z,2016-09-14T21:04:04Z,2017-04-25T13:36:20Z,CLOSED,False,59,13,1,https://github.com/PDirSG,Update vulkan.c,1,"['wontfix', 'Vulkan']",https://github.com/glfw/glfw/pull/858,https://github.com/dmitshur,4,https://github.com/glfw/glfw/pull/858#issuecomment-246196067,"I know it is overkill but in first OpenGL releases, there is have only two or three Extensions. I think it is same for Vulkan. More futuristic...","I know it is overkill, but in OpenGL 1.0, there is only few extensions. How many now? More than 100... I think it is same for Vulkan.

I think that's an argument for why this may become important to do in the future. It may or may not be worth the cost now.",True,{'THUMBS_DOWN': ['https://github.com/PDirSG']}
glfw/glfw,https://github.com/glfw/glfw,858,2016-09-10T15:47:23Z,2016-09-14T21:04:04Z,2017-04-25T13:36:20Z,CLOSED,False,59,13,1,https://github.com/PDirSG,Update vulkan.c,1,"['wontfix', 'Vulkan']",https://github.com/glfw/glfw/pull/858,https://github.com/PDirSG,5,https://github.com/glfw/glfw/pull/858#issuecomment-246200395,"I know it is overkill but in first OpenGL releases, there is have only two or three Extensions. I think it is same for Vulkan. More futuristic...","Then maybe we should do a performance test? Or whatever, we are talking about machines can calculate the result of an mathematical equation in less than nanoseconds. It is not a big problem.",True,{}
glfw/glfw,https://github.com/glfw/glfw,858,2016-09-10T15:47:23Z,2016-09-14T21:04:04Z,2017-04-25T13:36:20Z,CLOSED,False,59,13,1,https://github.com/PDirSG,Update vulkan.c,1,"['wontfix', 'Vulkan']",https://github.com/glfw/glfw/pull/858,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/858#issuecomment-247152781,"I know it is overkill but in first OpenGL releases, there is have only two or three Extensions. I think it is same for Vulkan. More futuristic...","@PDirSG I won't merge this. You are right, however, that there is unnecessary and easily avoided work being done. This has been resolved with 3e59b73 and 54930dd, more because of the clarity it adds than any performance concern. The EGL code will look similar once support for EGL 1.5 platform extensions is added.
This is still O(n³), but n is small and the data is hot.",True,{}
glfw/glfw,https://github.com/glfw/glfw,859,2016-09-11T05:19:45Z,2016-09-13T04:13:17Z,2016-09-13T10:40:13Z,CLOSED,False,23,16,1,https://github.com/linkmauve,Only input a character on GLFW_PRESS action,1,"['bug', 'Wayland', 'Linux']",https://github.com/glfw/glfw/pull/859,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/859,Fixes #804.,Fixes #804.,True,{}
glfw/glfw,https://github.com/glfw/glfw,859,2016-09-11T05:19:45Z,2016-09-13T04:13:17Z,2016-09-13T10:40:13Z,CLOSED,False,23,16,1,https://github.com/linkmauve,Only input a character on GLFW_PRESS action,1,"['bug', 'Wayland', 'Linux']",https://github.com/glfw/glfw/pull/859,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/859#issuecomment-246568719,Fixes #804.,Merged in 2eb1657.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,864,2016-09-20T15:32:36Z,2016-12-05T13:21:26Z,2016-12-05T17:03:11Z,CLOSED,False,4,0,2,https://github.com/tombsar,Add version directives to GLSL shaders,2,['enhancement'],https://github.com/glfw/glfw/pull/864,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/864,"Although not technically required, I believe it is best practice for shaders to specify which version of the GLSL spec they conform to. To quote the spec:

Shaders should declare the version of the language they are written to.

NB: I have presumed the version is 1.10, but it should be corrected if a later version was intended.","Although not technically required, I believe it is best practice for shaders to specify which version of the GLSL spec they conform to. To quote the spec:

Shaders should declare the version of the language they are written to.

NB: I have presumed the version is 1.10, but it should be corrected if a later version was intended.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,864,2016-09-20T15:32:36Z,2016-12-05T13:21:26Z,2016-12-05T17:03:11Z,CLOSED,False,4,0,2,https://github.com/tombsar,Add version directives to GLSL shaders,2,['enhancement'],https://github.com/glfw/glfw/pull/864,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/864#issuecomment-253488040,"Although not technically required, I believe it is best practice for shaders to specify which version of the GLSL spec they conform to. To quote the spec:

Shaders should declare the version of the language they are written to.

NB: I have presumed the version is 1.10, but it should be corrected if a later version was intended.",Thank you! Would you mind doing this for all tests and examples with GLSL (except heightmap.c)?,True,{}
glfw/glfw,https://github.com/glfw/glfw,864,2016-09-20T15:32:36Z,2016-12-05T13:21:26Z,2016-12-05T17:03:11Z,CLOSED,False,4,0,2,https://github.com/tombsar,Add version directives to GLSL shaders,2,['enhancement'],https://github.com/glfw/glfw/pull/864,https://github.com/tombsar,3,https://github.com/glfw/glfw/pull/864#issuecomment-264866840,"Although not technically required, I believe it is best practice for shaders to specify which version of the GLSL spec they conform to. To quote the spec:

Shaders should declare the version of the language they are written to.

NB: I have presumed the version is 1.10, but it should be corrected if a later version was intended.",Sorry I didn't make time to do this...,True,{}
glfw/glfw,https://github.com/glfw/glfw,864,2016-09-20T15:32:36Z,2016-12-05T13:21:26Z,2016-12-05T17:03:11Z,CLOSED,False,4,0,2,https://github.com/tombsar,Add version directives to GLSL shaders,2,['enhancement'],https://github.com/glfw/glfw/pull/864,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/864#issuecomment-264911717,"Although not technically required, I believe it is best practice for shaders to specify which version of the GLSL spec they conform to. To quote the spec:

Shaders should declare the version of the language they are written to.

NB: I have presumed the version is 1.10, but it should be corrected if a later version was intended.","@tombsar No worries, and thank you for getting the ball rolling on this.",True,{}
glfw/glfw,https://github.com/glfw/glfw,867,2016-09-22T19:01:11Z,2016-09-22T19:01:44Z,2021-10-24T16:21:51Z,CLOSED,False,1,1,1,https://github.com/tbodt,Stop github thinking this is Mathematica,1,['wontfix'],https://github.com/glfw/glfw/pull/867,https://github.com/tbodt,1,https://github.com/glfw/glfw/pull/867,"* has a higher precedence than ++, so this doesn't change the functionality. It does remove any occurrences of (*, which starts a Mathematica comment.","* has a higher precedence than ++, so this doesn't change the functionality. It does remove any occurrences of (*, which starts a Mathematica comment.",True,{}
glfw/glfw,https://github.com/glfw/glfw,867,2016-09-22T19:01:11Z,2016-09-22T19:01:44Z,2021-10-24T16:21:51Z,CLOSED,False,1,1,1,https://github.com/tbodt,Stop github thinking this is Mathematica,1,['wontfix'],https://github.com/glfw/glfw/pull/867,https://github.com/tbodt,2,https://github.com/glfw/glfw/pull/867#issuecomment-248997289,"* has a higher precedence than ++, so this doesn't change the functionality. It does remove any occurrences of (*, which starts a Mathematica comment.","Fuck, I'm wrong. ++ has higher precedence.",True,{}
glfw/glfw,https://github.com/glfw/glfw,871,2016-09-28T20:19:51Z,2016-09-28T22:20:22Z,2016-09-28T22:20:39Z,CLOSED,False,4,0,2,https://github.com/kbrenneman,Use EGL_KHR_get_all_proc_addresses if possible.,1,['enhancement'],https://github.com/glfw/glfw/pull/871,https://github.com/kbrenneman,1,https://github.com/glfw/glfw/pull/871,"On systems that support the EGL_KHR_get_all_proc_addresses extension, there's no need to load a client API library, since you can just load any OpenGL function through eglGetProcAddress.
This is especially useful for full OpenGL contexts (rather than GLES), because there isn't a client library to use with EGL. The libGLES*.so libraries are supposed to be for GLES, and libGL.so.1 is only for GLX.
The change itself is pretty simple. It just checks for whether EGL_KHR_get_all_proc_addresses is supported in _glfwInitEGL, and then in _glfwCreateContextEGL, it'll skip trying to load the client library.","On systems that support the EGL_KHR_get_all_proc_addresses extension, there's no need to load a client API library, since you can just load any OpenGL function through eglGetProcAddress.
This is especially useful for full OpenGL contexts (rather than GLES), because there isn't a client library to use with EGL. The libGLES*.so libraries are supposed to be for GLES, and libGL.so.1 is only for GLX.
The change itself is pretty simple. It just checks for whether EGL_KHR_get_all_proc_addresses is supported in _glfwInitEGL, and then in _glfwCreateContextEGL, it'll skip trying to load the client library.",True,{}
glfw/glfw,https://github.com/glfw/glfw,871,2016-09-28T20:19:51Z,2016-09-28T22:20:22Z,2016-09-28T22:20:39Z,CLOSED,False,4,0,2,https://github.com/kbrenneman,Use EGL_KHR_get_all_proc_addresses if possible.,1,['enhancement'],https://github.com/glfw/glfw/pull/871,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/871#issuecomment-250318750,"On systems that support the EGL_KHR_get_all_proc_addresses extension, there's no need to load a client API library, since you can just load any OpenGL function through eglGetProcAddress.
This is especially useful for full OpenGL contexts (rather than GLES), because there isn't a client library to use with EGL. The libGLES*.so libraries are supposed to be for GLES, and libGL.so.1 is only for GLX.
The change itself is pretty simple. It just checks for whether EGL_KHR_get_all_proc_addresses is supported in _glfwInitEGL, and then in _glfwCreateContextEGL, it'll skip trying to load the client library.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,874,2016-10-01T19:24:19Z,2016-10-11T00:49:23Z,2016-10-11T00:49:37Z,MERGED,True,36,13,1,https://github.com/linkmauve,Fix a bunch of memleaks,3,"['bug', 'Wayland']",https://github.com/glfw/glfw/pull/874,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/874,"This was partially inspired from #475, but some of the fixes were bogus (free()ing already-freed memory) and it was generally incomplete, so I preferred to restart from scratch using valgrind.
There is one remaining leak, due to the _GLFWmonitors being freed before _glfwPlatformTerminate() is executed, making everything allocated in _GLFWmonitorWayland impossible to free.","This was partially inspired from #475, but some of the fixes were bogus (free()ing already-freed memory) and it was generally incomplete, so I preferred to restart from scratch using valgrind.
There is one remaining leak, due to the _GLFWmonitors being freed before _glfwPlatformTerminate() is executed, making everything allocated in _GLFWmonitorWayland impossible to free.",True,{}
glfw/glfw,https://github.com/glfw/glfw,877,2016-10-07T15:14:58Z,2016-12-18T14:53:21Z,2016-12-18T14:53:22Z,CLOSED,False,20,9,3,https://github.com/atomsymbol,Optimize calls to XRRGetScreenResources,2,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/877,https://github.com/atomsymbol,1,https://github.com/glfw/glfw/pull/877,"This patch substantially improves the startup time of GLFW apps when using Mesa OpenGL.
Please merge. Thanks.","This patch substantially improves the startup time of GLFW apps when using Mesa OpenGL.
Please merge. Thanks.",True,{}
glfw/glfw,https://github.com/glfw/glfw,877,2016-10-07T15:14:58Z,2016-12-18T14:53:21Z,2016-12-18T14:53:22Z,CLOSED,False,20,9,3,https://github.com/atomsymbol,Optimize calls to XRRGetScreenResources,2,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/877,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/877#issuecomment-252285280,"This patch substantially improves the startup time of GLFW apps when using Mesa OpenGL.
Please merge. Thanks.","Thank you, will review.",True,{}
glfw/glfw,https://github.com/glfw/glfw,877,2016-10-07T15:14:58Z,2016-12-18T14:53:21Z,2016-12-18T14:53:22Z,CLOSED,False,20,9,3,https://github.com/atomsymbol,Optimize calls to XRRGetScreenResources,2,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/877,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/877#issuecomment-252653267,"This patch substantially improves the startup time of GLFW apps when using Mesa OpenGL.
Please merge. Thanks.",This is related to #347.,True,{}
glfw/glfw,https://github.com/glfw/glfw,877,2016-10-07T15:14:58Z,2016-12-18T14:53:21Z,2016-12-18T14:53:22Z,CLOSED,False,20,9,3,https://github.com/atomsymbol,Optimize calls to XRRGetScreenResources,2,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/877,https://github.com/atomsymbol,4,https://github.com/glfw/glfw/pull/877#issuecomment-254237159,"This patch substantially improves the startup time of GLFW apps when using Mesa OpenGL.
Please merge. Thanks.","Hello
Will this patch be part of release 3.2.2 or 3.3.0? I am just asking because I don't know what your plans about this patch are.
Thanks",True,{}
glfw/glfw,https://github.com/glfw/glfw,877,2016-10-07T15:14:58Z,2016-12-18T14:53:21Z,2016-12-18T14:53:22Z,CLOSED,False,20,9,3,https://github.com/atomsymbol,Optimize calls to XRRGetScreenResources,2,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/877,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/877#issuecomment-254567536,"This patch substantially improves the startup time of GLFW apps when using Mesa OpenGL.
Please merge. Thanks.",@atom-symbol There very likely won't be a 3.2.2 but it will very likely be included in 3.3.,True,{}
glfw/glfw,https://github.com/glfw/glfw,878,2016-10-10T23:09:05Z,2016-10-12T13:13:52Z,2016-10-12T13:13:55Z,MERGED,True,52,52,4,https://github.com/linkmauve,Rename snake_case identifiers to camelCase for consistency,1,['Wayland'],https://github.com/glfw/glfw/pull/878,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/878,This is a purely cosmetic patch.,This is a purely cosmetic patch.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,879,2016-10-11T01:01:14Z,2016-10-16T12:52:00Z,2016-10-16T12:52:03Z,MERGED,True,58,1,2,https://github.com/linkmauve,Implement compose key for character input,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/879,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/879,"This commit has been copied almost verbatim from Bryce Harrington’s patch against Weston’s toytoolkit:
https://patchwork.freedesktop.org/patch/114661/","This commit has been copied almost verbatim from Bryce Harrington’s patch against Weston’s toytoolkit:
https://patchwork.freedesktop.org/patch/114661/",True,{}
glfw/glfw,https://github.com/glfw/glfw,879,2016-10-11T01:01:14Z,2016-10-16T12:52:00Z,2016-10-16T12:52:03Z,MERGED,True,58,1,2,https://github.com/linkmauve,Implement compose key for character input,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/879,https://github.com/jadahl,2,https://github.com/glfw/glfw/pull/879#issuecomment-252842818,"This commit has been copied almost verbatim from Bryce Harrington’s patch against Weston’s toytoolkit:
https://patchwork.freedesktop.org/patch/114661/",lgtm.,True,{}
glfw/glfw,https://github.com/glfw/glfw,879,2016-10-11T01:01:14Z,2016-10-16T12:52:00Z,2016-10-16T12:52:03Z,MERGED,True,58,1,2,https://github.com/linkmauve,Implement compose key for character input,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/879,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/879#issuecomment-252887286,"This commit has been copied almost verbatim from Bryce Harrington’s patch against Weston’s toytoolkit:
https://patchwork.freedesktop.org/patch/114661/","This commit has been copied almost verbatim

process_key_press and getComposeSymbol are indeed very similar. What license was the code under originally?",True,{}
glfw/glfw,https://github.com/glfw/glfw,879,2016-10-11T01:01:14Z,2016-10-16T12:52:00Z,2016-10-16T12:52:03Z,MERGED,True,58,1,2,https://github.com/linkmauve,Implement compose key for character input,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/879,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/879#issuecomment-252901786,"This commit has been copied almost verbatim from Bryce Harrington’s patch against Weston’s toytoolkit:
https://patchwork.freedesktop.org/patch/114661/","Weston is licensed under MIT, which would require us to copy its header, it’s probably simpler to ask @bryceharrington to allow this code to be released under GLFW’s zlib.
It could also be possible that this code is considered trivial and thus usable without licensing restrictions, as it is the only way to use libxkbcommon, but I’m not absolutely sure about that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,879,2016-10-11T01:01:14Z,2016-10-16T12:52:00Z,2016-10-16T12:52:03Z,MERGED,True,58,1,2,https://github.com/linkmauve,Implement compose key for character input,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/879,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/879#issuecomment-252903386,"This commit has been copied almost verbatim from Bryce Harrington’s patch against Weston’s toytoolkit:
https://patchwork.freedesktop.org/patch/114661/","If you can get it re-licensed, that would be perfect.",True,{}
glfw/glfw,https://github.com/glfw/glfw,879,2016-10-11T01:01:14Z,2016-10-16T12:52:00Z,2016-10-16T12:52:03Z,MERGED,True,58,1,2,https://github.com/linkmauve,Implement compose key for character input,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/879,https://github.com/bryceharrington,6,https://github.com/glfw/glfw/pull/879#issuecomment-252988257,"This commit has been copied almost verbatim from Bryce Harrington’s patch against Weston’s toytoolkit:
https://patchwork.freedesktop.org/patch/114661/","I am the original author of the patch, and agree to its use under the zlib license.",True,"{'THUMBS_UP': ['https://github.com/kappaOne', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,879,2016-10-11T01:01:14Z,2016-10-16T12:52:00Z,2016-10-16T12:52:03Z,MERGED,True,58,1,2,https://github.com/linkmauve,Implement compose key for character input,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/879,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/879#issuecomment-253316153,"This commit has been copied almost verbatim from Bryce Harrington’s patch against Weston’s toytoolkit:
https://patchwork.freedesktop.org/patch/114661/","@bryceharrington Hello and thank you!
@linkmauve I have no objections to this patch. 👍",True,{}
glfw/glfw,https://github.com/glfw/glfw,880,2016-10-11T01:44:07Z,2016-11-04T10:35:31Z,2016-11-04T10:35:44Z,MERGED,True,15,6,2,https://github.com/linkmauve,Set a proper name for outputs,2,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/880,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/880,"glfwGetMonitorName()’s documentation says “this function returns a
human-readable name”, which “typically reflects the make and model of
the monitor”.  We get these two strings in the geometry event, so we
replace the default name at this point.","glfwGetMonitorName()’s documentation says “this function returns a
human-readable name”, which “typically reflects the make and model of
the monitor”.  We get these two strings in the geometry event, so we
replace the default name at this point.",True,{}
glfw/glfw,https://github.com/glfw/glfw,881,2016-10-11T03:07:13Z,2016-10-16T14:52:39Z,2016-10-16T14:55:12Z,MERGED,True,80,4,2,https://github.com/linkmauve,Add remarks to glfw3.h whenever the behaviour differs,1,"['enhancement', 'Wayland', 'documentation']",https://github.com/glfw/glfw/pull/881,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/881,"This should describe all of the Wayland-specific points, mostly in
three categories:

Missing GLFW features, for example window frame, screensaver
inhibition, clipboard or file drop.
Missing protocols, like setting gamma on a monitor or specifying a
window icon.
Fundamental incompatibilities with Wayland’s concepts, like trying to
handle global positioning of a window in a 2D space, trying to bring
a window to front, or trying to change the monitor’s mode.","This should describe all of the Wayland-specific points, mostly in
three categories:

Missing GLFW features, for example window frame, screensaver
inhibition, clipboard or file drop.
Missing protocols, like setting gamma on a monitor or specifying a
window icon.
Fundamental incompatibilities with Wayland’s concepts, like trying to
handle global positioning of a window in a 2D space, trying to bring
a window to front, or trying to change the monitor’s mode.",True,{}
glfw/glfw,https://github.com/glfw/glfw,881,2016-10-11T03:07:13Z,2016-10-16T14:52:39Z,2016-10-16T14:55:12Z,MERGED,True,80,4,2,https://github.com/linkmauve,Add remarks to glfw3.h whenever the behaviour differs,1,"['enhancement', 'Wayland', 'documentation']",https://github.com/glfw/glfw/pull/881,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/881#issuecomment-253360841,"This should describe all of the Wayland-specific points, mostly in
three categories:

Missing GLFW features, for example window frame, screensaver
inhibition, clipboard or file drop.
Missing protocols, like setting gamma on a monitor or specifying a
window icon.
Fundamental incompatibilities with Wayland’s concepts, like trying to
handle global positioning of a window in a 2D space, trying to bring
a window to front, or trying to change the monitor’s mode.","If you want and have the time, in this PR or another, there may also be Wayland-specific material to add to docs/compat.dox.",True,{}
glfw/glfw,https://github.com/glfw/glfw,881,2016-10-11T03:07:13Z,2016-10-16T14:52:39Z,2016-10-16T14:55:12Z,MERGED,True,80,4,2,https://github.com/linkmauve,Add remarks to glfw3.h whenever the behaviour differs,1,"['enhancement', 'Wayland', 'documentation']",https://github.com/glfw/glfw/pull/881,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/881#issuecomment-254045046,"This should describe all of the Wayland-specific points, mostly in
three categories:

Missing GLFW features, for example window frame, screensaver
inhibition, clipboard or file drop.
Missing protocols, like setting gamma on a monitor or specifying a
window icon.
Fundamental incompatibilities with Wayland’s concepts, like trying to
handle global positioning of a window in a 2D space, trying to bring
a window to front, or trying to change the monitor’s mode.","This commit was only about glfw3.h, I will handle the rest of the documentation at some point, and might as well open an issue so I don’t forget. :)",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,881,2016-10-11T03:07:13Z,2016-10-16T14:52:39Z,2016-10-16T14:55:12Z,MERGED,True,80,4,2,https://github.com/linkmauve,Add remarks to glfw3.h whenever the behaviour differs,1,"['enhancement', 'Wayland', 'documentation']",https://github.com/glfw/glfw/pull/881,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/881#issuecomment-254051596,"This should describe all of the Wayland-specific points, mostly in
three categories:

Missing GLFW features, for example window frame, screensaver
inhibition, clipboard or file drop.
Missing protocols, like setting gamma on a monitor or specifying a
window icon.
Fundamental incompatibilities with Wayland’s concepts, like trying to
handle global positioning of a window in a 2D space, trying to bring
a window to front, or trying to change the monitor’s mode.",Shortened the subject line to <= 50 characters.,True,{}
glfw/glfw,https://github.com/glfw/glfw,882,2016-10-14T15:15:33Z,2016-12-06T16:47:31Z,2017-07-29T20:23:20Z,CLOSED,False,5,13,2,https://github.com/tikhomirov,Fix issue with sandboxing,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/882,https://github.com/tikhomirov,1,https://github.com/glfw/glfw/pull/882,Fixes the issue described in #816 (tested with sample sample application attached to the original issue).,Fixes the issue described in #816 (tested with sample sample application attached to the original issue).,True,{}
glfw/glfw,https://github.com/glfw/glfw,882,2016-10-14T15:15:33Z,2016-12-06T16:47:31Z,2017-07-29T20:23:20Z,CLOSED,False,5,13,2,https://github.com/tikhomirov,Fix issue with sandboxing,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/882,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/882#issuecomment-265204932,Fixes the issue described in #816 (tested with sample sample application attached to the original issue).,Merged as 11a2413 with additional cleanup in 887e58b. Thank you!,True,{'HOORAY': ['https://github.com/tikhomirov']}
glfw/glfw,https://github.com/glfw/glfw,883,2016-10-15T12:43:36Z,2016-10-16T12:02:14Z,2016-10-19T18:22:11Z,CLOSED,False,1,1,1,https://github.com/tikhomirov,Fix 'first responder' error on 10.12,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/883,https://github.com/tikhomirov,1,https://github.com/glfw/glfw/pull/883,"Error message is displayed during the startup because Cocoa view is set as the first responder for window but this view isn't in this window (actually it is not in any window at all).
Fixes the issue described in #876. Tested only on macOS 10.12.","Error message is displayed during the startup because Cocoa view is set as the first responder for window but this view isn't in this window (actually it is not in any window at all).
Fixes the issue described in #876. Tested only on macOS 10.12.",True,{}
glfw/glfw,https://github.com/glfw/glfw,883,2016-10-15T12:43:36Z,2016-10-16T12:02:14Z,2016-10-19T18:22:11Z,CLOSED,False,1,1,1,https://github.com/tikhomirov,Fix 'first responder' error on 10.12,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/883,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/883#issuecomment-254022117,"Error message is displayed during the startup because Cocoa view is set as the first responder for window but this view isn't in this window (actually it is not in any window at all).
Fixes the issue described in #876. Tested only on macOS 10.12.","Instead of nested views, why not move the call to NSWindow setContentView to the top of the block?",True,{}
glfw/glfw,https://github.com/glfw/glfw,883,2016-10-15T12:43:36Z,2016-10-16T12:02:14Z,2016-10-19T18:22:11Z,CLOSED,False,1,1,1,https://github.com/tikhomirov,Fix 'first responder' error on 10.12,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/883,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/883#issuecomment-254022171,"Error message is displayed during the startup because Cocoa view is set as the first responder for window but this view isn't in this window (actually it is not in any window at all).
Fixes the issue described in #876. Tested only on macOS 10.12.","In either case, thank you for spotting the cause of the error!",True,{}
glfw/glfw,https://github.com/glfw/glfw,883,2016-10-15T12:43:36Z,2016-10-16T12:02:14Z,2016-10-19T18:22:11Z,CLOSED,False,1,1,1,https://github.com/tikhomirov,Fix 'first responder' error on 10.12,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/883,https://github.com/tikhomirov,4,https://github.com/glfw/glfw/pull/883#issuecomment-254027803,"Error message is displayed during the startup because Cocoa view is set as the first responder for window but this view isn't in this window (actually it is not in any window at all).
Fixes the issue described in #876. Tested only on macOS 10.12.","why not move the call to NSWindow setContentView

right, somehow I missed this option 😄 I've updated PR",True,{}
glfw/glfw,https://github.com/glfw/glfw,883,2016-10-15T12:43:36Z,2016-10-16T12:02:14Z,2016-10-19T18:22:11Z,CLOSED,False,1,1,1,https://github.com/tikhomirov,Fix 'first responder' error on 10.12,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/883,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/883#issuecomment-254042972,"Error message is displayed during the startup because Cocoa view is set as the first responder for window but this view isn't in this window (actually it is not in any window at all).
Fixes the issue described in #876. Tested only on macOS 10.12.","This has been merged as 967e837, with additional cleanup in 99c65bb. Thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/yerejm,1,https://github.com/glfw/glfw/pull/888,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.","Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.",True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/888#issuecomment-272947932,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.","Thank you, will review ASAP.",True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/888#issuecomment-281156794,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.",Cannot reproduce with a no-name 360 controller on 10.12.3 and other project I've checked interprets 0-8 in the same way as GLFW currently does. What hardware did you use?,True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/yerejm,4,https://github.com/glfw/glfw/pull/888#issuecomment-281178926,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.",Used Saitek Cyborg 3D USB (real) joystick. Unfortunately don't have a handheld controller.,True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/888#issuecomment-282917747,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.",Are you using a OEM or third-party driver for it?,True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/yerejm,6,https://github.com/glfw/glfw/pull/888#issuecomment-282973033,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.",I am using whatever OSX provides as the driver. No specific driver from Saitek is being used.,True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/888#issuecomment-283111315,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.","Sorry, I don't know what to do then, unless it's to hard-code a workaround for this specific device.",True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/yerejm,8,https://github.com/glfw/glfw/pull/888#issuecomment-283317615,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.",Hmm... it seems like more information (or hardware) is required. I don't have a handheld controller to compare against and it sounds like you don't have a joystick. I guess this issue is stuck.,True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/888#issuecomment-288528131,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.",@yerejm Please check if current master still has this problem.,True,{}
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/yerejm,10,https://github.com/glfw/glfw/pull/888#issuecomment-288686141,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.","Still has same problem although the code looks different. It works for me only if center position is the first in the states array. However, perhaps this code in getElementValue might be the real problem:
71             // Record min and max for auto calibration
72             if (value < element->minimum)
73                 element->minimum = value;

value for center using the joystick is 0, but the minimum is 1. However, this changes the meaning of value since it is assumed to correspond with the states array that provides the hat direction. (Maybe max handling is questionable also?)
If that auto-calibration of min was removed and if the code in _glfwPlatformPollJoystick was like this:
390             long state = getElementValue(js, hat) - hat->minimum;
391             if (state < 0 || state > 8)
392                 state = 8;

The state condition would move the center value to the correct state index.
But again, I have no handheld controller to see what its minimum value is reporting. Since it works for you, perhaps it returns 0, so everything works out?",True,"{'THUMBS_UP': ['https://github.com/elmindreda'], 'HOORAY': ['https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,888,2016-10-26T11:55:28Z,2017-03-23T15:28:50Z,2017-03-23T15:46:31Z,CLOSED,False,1,1,1,https://github.com/yerejm,Bad range handling of hat values,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/888,https://github.com/elmindreda,11,https://github.com/glfw/glfw/pull/888#issuecomment-288762484,"Joystick hat switch button in the up-left direction is always pressed in neutral position (at least on 10.11). It looks like on macOS the directions array should start with the neutral bitfield first rather than last like on Windows. This was tested using tests/joysticks.app. However, it has not been tested on other versions of macOS.","My controller reported the range [0,7] for the hat and sent 15 for the center position. Thank you for spotting this! It should be fixed now with 55d0560.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/IntellectualKitty,1,https://github.com/glfw/glfw/pull/895,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/IntellectualKitty,2,https://github.com/glfw/glfw/pull/895#issuecomment-264587250,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.",Closed due to lack of activity.,True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/Shimmen,3,https://github.com/glfw/glfw/pull/895#issuecomment-264632663,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.",I don't see how closing the pull request will help achieve anything. The owners of GLFW are busy and as long as it's an open pull request it's on a list of things to consider pulling in. The code you've added seem good to me so just keep it open and wait.,True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/intrigus', 'https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/895#issuecomment-264645045,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.",What @Shimmen said.,True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/IntellectualKitty,5,https://github.com/glfw/glfw/pull/895#issuecomment-264654591,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","@Shimmen I appreciate your thoughts.
While I really like the clean and easy to use interface that GLFW provides, at its current level of development it's not suitable for my projects.  So, in my work, I use SDL (www.libsdl.org).
SDL provides a superset of the functionality of GLFW.  In fact, you could easily implement GLFW as a thin layer on top of SDL and (1) you'd get lots of additional functionality such as joystick events, proper hat switch and joystick trackball support, game controller support, touch device and gesture support, message boxes, etc. and (2) it would work on more platforms including iOS and Android.
With the PRs that I've submitted to GLFW, I've tried to address some of these deficiencies such as hat switch support #906 and joystick axis and button event support #856.  However, even at a more complete level of development, GLFW still would not provide the same level of cross-platform support that SDL does.  So, I never expected to benefit from these changes personally.
So, my real intention in making these PRs was to try to contribute, to try to do something useful that would help others.  However, when weeks and months go by and my PRs receive no activity, they serve no purpose except as persistent reminders that my time and energy has been spent fruitlessly.
So, while I appreciate your perspective, there's really no benefit for me not to close inactive PRs.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/895#issuecomment-264660761,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","GLFW isn't a replacement for SDL2 and has never tried to be. I also can't in my spare time keep up with a project that has paid full-time developers and the backing of Valve and Epic. SDL2 is an excellent choice and I'm certainly not going to argue against it.
Thank you for your PRs; I'll get to them as soon as I can. Some of them are significant API additions and so require uninterrupted time for review in a way that I haven't had lately.",True,{'HEART': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/IntellectualKitty,7,https://github.com/glfw/glfw/pull/895#issuecomment-267511808,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","I love GLFW and its clean interface, and I would gladly use it exclusively if it did what I needed.  For instance, I can easily live without the PRs I submitted for joystick button and axis events and for hat switch support, but I need the fullscreen functionality on macOS that I submitted with this PR.  So, please don't misunderstand my comments comparing SDL and GLFW.  Again, I prefer GLFW but I use SDL because I have to.
You've done a great job shepherding GLFW and I understand how important that role is for the quality of GLFW.  Of course your time is limited for such a demanding task.  And, of course, there's no way that one person could compete against the resources that SDL has.  However, I don't think that you're taking full advantage of the power of the open source community.
There are people who are willing to help you.  That's the fundamental idea behind open source, namely that we can do more together than we can individually.  It's important for code quality to maintain strict control, but it also can be tremendously beneficial to use the resources that are available to you with the open source community.  For instance, you might consider taking on one or more partners to help you maintain GLFW.  Another idea might be to host one or more experimental branches that contain PRs with only preliminary approval and use feedback from the community to evaluate their effectiveness and quality.  I believe that the code that I submitted with this PR is correct, but it hasn't been tested on any other Macs; also, as you say, the code that I submitted with the other PRs made significant API changes.  If PRs like these were included into one or more experimental branches, you might be able to use the feedback regarding them to make evaluations -- rather than having to laboriously evaluate everything by yourself -- before incorporating them into releases or into the main branch.
These are just a couple of ideas off the top of my head.  And, of course, I am not yet an expert with GitHub, so they may not be as feasible as I think.  Nevertheless, I firmly believe in the value of the open source community and the idea that we can do more when we work together.  So, I would encourage you to try take more advantage of the help that is available to you.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/IntellectualKitty,8,https://github.com/glfw/glfw/pull/895#issuecomment-267797406,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","I've thought of another way that would make it easier to let people submit code, namely by bracketing their code changes with #ifdef / #endif directives.  For example, I could have easily bracketed the changes with this PR using #ifdef GLFW_COMMAND_TABBING_FIX so that the new code would be enabled only if GLFW_COMMAND_TABBING_FIX is defined in the main header file.  The code that I included with this PR was purely additional, so for changes that modify existing code you could have them keep the original code after an #else.  In the main header file, the #define statements for the macros could be commented out (with additional comments referring to the original PR) by default so that they are enabled only if people wish to use or test the new functionality leaving the original release functionality intact.
Using this type of approach, it should generally be relatively easy to confirm that changes are properly bracketed by #ifdef / #else / #endif directives when reviewing changed files on GitHub.  And when the time comes to integrate, modify, or remove the changed code, it should also be easy to accomplish with a global search.
Using this type of approach would make it easy to let people help and reduce your burden since your review would consist of a general understanding of the changes -- rather than having to make such a time-intensive review like you described above -- with a specific focus on confirming that new code is correctly bracketed by directives before you approve it.  You could clearly define the standards you want in documentation, and refuse to accept PRs until they meet those standards.  Then, like I mentioned in my previous comment, you can use feedback from people who do enable such changes to evaluate their merit and effectiveness.
I think this idea is better than the two ideas I mentioned previously since it should be very easy to accomplish this simply by (1) adding preliminary documentation regarding coding standards and how to properly bracket code changes and (2) taking advantage of the simplicity of GitHub's changed file viewer.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/895#issuecomment-267850052,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","For instance, you might consider taking on one or more partners to help you maintain GLFW.

Several backends (Wayland, Mir, OSMesa) already have a maintainer, as will the EGLDevice backend. When I see someone who I think could maintain one without hand-holding (follows coding style, understands and makes use of and does not duplicate existing facilities, writes working code that is neither clever nor paranoid, shows awareness of related issues and PRs), I typically offer them subsystem maintainership. Usually they turn it down. GLFW is a glorified wrapper and people have other, usually shinier projects. Rarely they accept commit bits on an unofficial basis.
There are almost certainly people I should have offered commit bits where I didn't, but I am looking.
Similarly, I've started offering collaborator status to people who frequently help out in the issue tracker by verifying bugs, answering FAQs and so on. The same thing goes for moderator status on the Discourse forum. Around a third of all issues and PRs are duplicate, invalid or similar, which is a huge time sink but also an unavoidable side-effect of open development, so people helping with this free up a lot of development time. There are still some I haven't approached, sorry about that, but most of this work can be done without any special bits.

Another idea might be to host one or more experimental branches that contain PRs with only preliminary approval and use feedback from the community to evaluate their effectiveness and quality.

There are currently twelve experimental branches in this repository, most of which have received little or no feedback. All major new features and many single- or multi-platform bug fixes live in experimental branches while I work on them and I make some effort to keep them testable in the hope of feedback. The reason there aren't hundreds of them is that I delete them after merging. I also make a point of mentioning these branches by name in the issues that generated them. Despite this, a well-formed pull request usually attracts far more feedback, so merging/closing PRs into branches would have the opposite effect of what you intend.
Even after work has been merged into master, no new bits of API are final until release and internals are never final. Feedback is not only welcome but meaningful until the release is made. Most features also have issues where they can be discussed, I will mention there if there is a branch to check out and once the code is getting close to being merged I will add a commit message tag so that every revision of the feature commit is listed in the issue thread.

I believe that the code that I submitted with this PR is correct, but it hasn't been tested on any other Macs;

It very well may be; I have no opinion yet. There are many issues and PRs that have waited far longer than this one and I'm currently working on some of those.

If PRs like these were included into one or more experimental branches, you might be able to use the feedback regarding them to make evaluations -- rather than having to laboriously evaluate everything by yourself -- before incorporating them into releases or into the main branch.

When code doesn't come with a maintainer, even if it's perfect, I still need to both go through it carefully and learn any new APIs and standards so I don't break it when working on or near it in the future.
Most PRs sadly save me no time over the same thing reported as an issue, because I still need to go through every line, possibly while refreshing my memory of the API or spec. in question, and then usually do one or or more of fixing bugs, adjusting the coding style, removing overly paranoid error checks, adding missing error checks, replacing code that duplicates parts of existing facilities, adding reference and guide documentation, fixing the commit message, etc. Lately I've started making GitHub reviews even of PRs I end up fixing myself in the hope that it will affect these things long-term, but of course that takes even more time.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/895#issuecomment-267851825,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","(Slip of the Comment button, part two follows)
There's often no way for a contributor to predict when a PR will save time without asking, so if you haven't already written a working fix, I recommend you ask. Open an issue and describe the problem, like you would for a PR. Of course, if you have already written the fix for your own immediate needs, make a PR of it.
Even PRs that don't save time are invaluable measured in egoboo, because someone cared enough about the project to take the time to develop and submit it, and I try to give egoboo back by keeping the original commit (possibly squashed) and adding credits even if large portions need rewriting. Others provide new knowledge, insights or even coding style changes that then spread throughout the project long after the submitter moved on to other ones. There are many examples of this.
So in summary, suggestions and feedback on existing and future features is great, both before and after they're merged. Helping people with common problems here or on the forum is great. Writing, discussing, testing and reviewing PRs is great. There is no ordering here. I'd put them all in first place if I could.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/elmindreda,11,https://github.com/glfw/glfw/pull/895#issuecomment-267853472,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","Then there's the elephant-in-the-room of me being pretty useless at interacting with people and giving them the recognition they deserve, which I know has cost the project both previous and potential contributors. Again, sorry about that. I'm working on it and may one day hand over the reins for that reason.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/IntellectualKitty,12,https://github.com/glfw/glfw/pull/895#issuecomment-268096662,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","@elmindreda, I want to apologize.  Clearly I have no idea what goes into maintaining a project like GLFW.  I thought about this only from my own perspective, namely that I tried to write the highest quality code that I could, and where I made API changes, that they matched existing GLFW standards, both for the code -- including coding style, function names and signatures, variables names, behavior, etc. -- and for the documentation comments.  My goal was to make my changes indistinguishable from original GLFW code and documentation.  So, without understanding the context of what actually goes into maintaining GLFW, I thought that what I had written would make a real contribution, and when it didn't go anywhere, I felt like I had wasted my time.
There is also the issue that I would really prefer to use GLFW rather than SDL, and when my PRs didn't go anywhere, particularly this one, it meant that I would have to maintain the additional code that I needed and manually re-integrate it every time I wanted to re-update to the master branch so that I could get the latest enhancements and bug fixes.
Another problem that I had was that every time I wanted to submit a new PR, I had to delete my existing repository and re-fork GLFW.  I just recently started to get a feel for branching (for a PR that I submitted to another project), but I am still not terribly proficient with GitHub.  So, if there is a way that I could have written new PRs against the master branch without having to re-fork -- or to merge GLFW's master branch back into a branch in my own fork so that I could keep up with changes that way -- I haven't yet found it.
I kept copies of all of the changed code on my hard drive.  So, if you can't merge these PRs into GLFW if and when you choose since I closed them (I can see that the commits and file changes are still here even though the original repositories have been deleted), please let me know and I will start over and resubmit them.
As for the experimental branches, I had no idea that you were already doing this.  The place that I would have looked for them is in the README on the front page (I know there are many branches under the branching tab, but I hadn't looked there because I thought they were just from other forks of GLFW rather than officially maintained branches, but I just took a look and found out that all 17 are yours).  Perhaps they would still get more traction if you had a section on actively developed branches in the README with the branch name and a brief description of its purpose along with a request for feedback.
Thank you for all the hard work that you do maintaining GLFW.  And, again, I apologize for my complete lack of understanding about how much work goes into it.",True,"{'THUMBS_UP': ['https://github.com/dmitshur', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/elmindreda,13,https://github.com/glfw/glfw/pull/895#issuecomment-268583262,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","I want to apologize.

There's no need to apologize and it was unfair of me to rant at you.

I tried to write the highest quality code that I could, and where I made API changes, that they matched existing GLFW standards, both for the code -- including coding style, function names and signatures, variables names, behavior, etc. -- and for the documentation comments. My goal was to make my changes indistinguishable from original GLFW code and documentation.

From what I can tell looking through them now, you succeeded. My rant wasn't directed at your pending code, which I haven't yet reviewed. I've also already merged two of your PRs, earlier this year, and both of them have been included in releases without causing complaints, so that shouldn't worry you.

So, without understanding the context of what actually goes into maintaining GLFW, I thought that what I had written would make a real contribution, and when it didn't go anywhere, I felt like I had wasted my time.

That is my fault and I apologize, to you and everyone else I've kept waiting. As a consequence of this thread I'll try setting aside some time (hopefully) each week to give initial feedback on at least one outstanding PR. That still won't be an instant response, but it shouldn't be months either.

[...] when my PRs didn't go anywhere, particularly this one, it meant that I would have to maintain the additional code that I needed and manually re-integrate it every time I wanted to re-update to the master branch so that I could get the latest enhancements and bug fixes.
Another problem that I had was that every time I wanted to submit a new PR, I had to delete my existing repository and re-fork GLFW. I just recently started to get a feel for branching (for a PR that I submitted to another project), but I am still not terribly proficient with GitHub. So, if there is a way that I could have written new PRs against the master branch without having to re-fork -- or to merge GLFW's master branch back into a branch in my own fork so that I could keep up with changes that way -- I haven't yet found it.

I don't know exactly what you know, so I'll probably explain things you know and leave out details you don't, but here goes...
One shouldn't ever have to re-fork. After you've forked this repo (or if you have a fork again, just keep it, it's fine and almost infinitely fixable), put all the changes for a given PR in a separate, non-master branch. Then open a PR from that branch. You may already have been doing that bit; I can't tell as GitHub lost that information when you deleted your fork. If your branch contains many commits that are really parts of the same change, squash them to a single commit before making the PR. It'll make it easier for everyone to work with.
Any changes you make to that branch (and only that branch) from then on will automatically update the PR, but if you don't need to update it for your own needs you can just leave it alone until I get to merging it. Once a PR has been reviewed and accepted, I'll start maintaining and periodically rebasing an experimental branch while it's being prepared for merging (current examples include preedit-ime and egldevice), but I won't do that for not-yet-accepted ones.
As for getting new changes, add a remote for this repo (let's call it upstream for now) to the local copy of your fork and fetch from it when you want new stuff. Then either rebase, merge or reset-and-merge your master branch (origin/master), which I'm guessing you want to contain the merged changes from one or more of your PRs, using the remote master (upstream/master). There are many possible models here.
If we switch places for a moment, I'd probably rebase each PR branch onto upstream/master, reset origin/master to upstream/master merge each refreshed PR branch into origin/master and then use that for my daily work until the PRs are merged. If the PR changes are isolated and uncomplicated like this one, I could probably skip the rebasing. That's just an example off the top of my head and there are probably better ways. It's been a while since I had to maintain simultaneous PRs for a single project.
The GitHub help has plenty of hands-on sections on every part of this and there are tons of tutorials out there that cater to different learning preferences.

I kept copies of all of the changed code on my hard drive. So, if you can't merge these PRs into GLFW if and when you choose since I closed them (I can see that the commits and file changes are still here even though the original repositories have been deleted), please let me know and I will start over and resubmit them.

You don't even need to do that. I have a line in my local .git/config that fetches and caches all PRs as remote branches. This used to be easier to find in the GitHub help, but for anyone curious, the line is:
fetch = +refs/pull/*/head:refs/remotes/origin/pr/*

This lets me work with any existing PR even when offline, or in cases like this when the source disappears.

As for the experimental branches, I had no idea that you were already doing this. The place that I would have looked for them is in the README on the front page (I know there are many branches under the branching tab, but I hadn't looked there because I thought they were just from other forks of GLFW rather than officially maintained branches

Branches created in forks won't ever appear in the branch list of this repo, even though you get all of the branches of this repo when you fork. Even when you make PRs of your own branches, they can only target branches that I or another maintainer has already created here.

Perhaps they would still get more traction if you had a section on actively developed branches in the README with the branch name and a brief description of its purpose along with a request for feedback.

That's useful feedback and definitely worth a try. Thank you. I don't think I want to maintain an actual list in the README (too much update noise and risk of stale information), but I'll mention their existence and describe some of the work flow around them. If anyone would like to maintain a branch list with descriptions in the wiki, let me know and I'll arrange write permission.",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/dmitshur,14,https://github.com/glfw/glfw/pull/895#issuecomment-268893211,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","This used to be easier to find in the GitHub help

Just checking, but is this it?

I am still not terribly proficient with GitHub

@IntellectualKitty, if you haven't already read it, I extremely highly recommend this article about how git can be seen as a purely functional data structure; I think it helps a ton with becoming comfortable doing advanced git-fu (and using GitHub is a natural extension of that).",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/elmindreda,15,https://github.com/glfw/glfw/pull/895#issuecomment-268918277,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","@shurcooL Yup, that's the page. Thanks!",True,{}
glfw/glfw,https://github.com/glfw/glfw,895,2016-11-05T23:26:58Z,2016-12-02T23:08:14Z,2017-01-15T14:01:06Z,CLOSED,False,53,3,1,https://github.com/IntellectualKitty,Command-tabbing fix,1,['macOS'],https://github.com/glfw/glfw/pull/895,https://github.com/IntellectualKitty,16,https://github.com/glfw/glfw/pull/895#issuecomment-268952629,"The new code uses presentation options to properly configure the application for fullscreen operation when appropriate.
Also, the window id is supplied as a parameter to the orderFront, makeKeyAndOrderFront, and orderOut calls instead of nil, which I believe is more correct.","@elmindreda and @shurcooL Thanks for all of your help.  I only just recently started branching like @elmindreda suggested, well after the PRs I submitted to GLFW however.  I'm afraid that much of @elmindreda 's comments are still a bit over my head (although the article on git as a purely functional data structure helped).
The main problem I've been having is that I've been using the web interface exclusively, thinking that it did everything.  I always try to be careful to avoid downloading malicious software, and I thought that the ""GitHub Desktop"" that shows up when I hit the ""Clone or download"" button was a toolbar that would install in my browser.  However, when I started researching how to get new changes back into my PRs after I last wrote, I finally found out that git is a command-line tool that does immensely more than the web interface.
@elmindreda I'll probably have to go back over your comments a few more times, but now that I know that there is a command-line interface, I think I'll be able to get up to speed fairly quickly.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,897,2016-11-14T22:19:18Z,2016-11-16T14:17:14Z,2016-11-16T16:54:12Z,CLOSED,False,1,1,1,https://github.com/bagobor,tipo fix: MAXOSX->MACOS,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/897,https://github.com/bagobor,1,https://github.com/glfw/glfw/pull/897,,,True,"{'THUMBS_UP': ['https://github.com/bagobor', 'https://github.com/elmindreda', 'https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,906,2016-11-26T04:18:45Z,2016-12-04T02:55:57Z,2017-06-15T18:10:39Z,CLOSED,False,255,28,11,https://github.com/IntellectualKitty,Joystick Hat Support,11,['enhancement'],https://github.com/glfw/glfw/pull/906,https://github.com/IntellectualKitty,1,https://github.com/glfw/glfw/pull/906,"This code implements joystick hat support per issue #889.
The API change is to add the following function (and #defines for each of the hat positions such as GLFW_HAT_RIGHT_UP):
GLFWAPI const unsigned char* glfwGetJoystickHats(int jid, int* count);

The events test (events.c) has been updated to reflect the number of hat switches when a joystick is connected.
The joystick test (joystick.c) has been updated to add a new row for hat switches that displays the position in human-readable text (e.g., ""right_up"").
Code for macOS has been provided and tested.
Code for Windows has been provided, but has not been compiled or tested since I do not have access to a Windows system.
Code for Linux has also been provided, but relevant portions are compiled out with the #defines JSIOCGHATS and JS_EVENT_HAT -- following the JSIOCGAXES / JSIOCGBUTTONS and JS_EVENT_AXIS / JS_EVENT_BUTTON syntax, respectively -- since <linux/joystick.h> does not currently provide support for hat switches; if such support is added to <linux/joystick.h>, the code should work however.  This code also has not been compiled or tested since I do not have access to a Linux system.
A remark about the lack of support for hat switches on Linux appears in the documentation for glfwGetJoystickHats in glfw3.h.","This code implements joystick hat support per issue #889.
The API change is to add the following function (and #defines for each of the hat positions such as GLFW_HAT_RIGHT_UP):
GLFWAPI const unsigned char* glfwGetJoystickHats(int jid, int* count);

The events test (events.c) has been updated to reflect the number of hat switches when a joystick is connected.
The joystick test (joystick.c) has been updated to add a new row for hat switches that displays the position in human-readable text (e.g., ""right_up"").
Code for macOS has been provided and tested.
Code for Windows has been provided, but has not been compiled or tested since I do not have access to a Windows system.
Code for Linux has also been provided, but relevant portions are compiled out with the #defines JSIOCGHATS and JS_EVENT_HAT -- following the JSIOCGAXES / JSIOCGBUTTONS and JS_EVENT_AXIS / JS_EVENT_BUTTON syntax, respectively -- since <linux/joystick.h> does not currently provide support for hat switches; if such support is added to <linux/joystick.h>, the code should work however.  This code also has not been compiled or tested since I do not have access to a Linux system.
A remark about the lack of support for hat switches on Linux appears in the documentation for glfwGetJoystickHats in glfw3.h.",True,{}
glfw/glfw,https://github.com/glfw/glfw,906,2016-11-26T04:18:45Z,2016-12-04T02:55:57Z,2017-06-15T18:10:39Z,CLOSED,False,255,28,11,https://github.com/IntellectualKitty,Joystick Hat Support,11,['enhancement'],https://github.com/glfw/glfw/pull/906,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/906#issuecomment-272172356,"This code implements joystick hat support per issue #889.
The API change is to add the following function (and #defines for each of the hat positions such as GLFW_HAT_RIGHT_UP):
GLFWAPI const unsigned char* glfwGetJoystickHats(int jid, int* count);

The events test (events.c) has been updated to reflect the number of hat switches when a joystick is connected.
The joystick test (joystick.c) has been updated to add a new row for hat switches that displays the position in human-readable text (e.g., ""right_up"").
Code for macOS has been provided and tested.
Code for Windows has been provided, but has not been compiled or tested since I do not have access to a Windows system.
Code for Linux has also been provided, but relevant portions are compiled out with the #defines JSIOCGHATS and JS_EVENT_HAT -- following the JSIOCGAXES / JSIOCGBUTTONS and JS_EVENT_AXIS / JS_EVENT_BUTTON syntax, respectively -- since <linux/joystick.h> does not currently provide support for hat switches; if such support is added to <linux/joystick.h>, the code should work however.  This code also has not been compiled or tested since I do not have access to a Linux system.
A remark about the lack of support for hat switches on Linux appears in the documentation for glfwGetJoystickHats in glfw3.h.","This should definitely be supported and I like the interface. The implementation will be somewhat different both due to the work being done in the gamecontrollerdb branch for #900 and because pulling hats out of the button array will break backward compatibility.
Instead I propose being able to query hat mappings, where each hat is four button indices. Every platform puts the hat buttons at the end of the array already, which should help people transition. Once it's time for GLFW 4, of course, this can be cleaned up.
Waiting for the Linux joystick API to change is probably futile, but have a look at evdev.",True,{}
glfw/glfw,https://github.com/glfw/glfw,906,2016-11-26T04:18:45Z,2016-12-04T02:55:57Z,2017-06-15T18:10:39Z,CLOSED,False,255,28,11,https://github.com/IntellectualKitty,Joystick Hat Support,11,['enhancement'],https://github.com/glfw/glfw/pull/906,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/906#issuecomment-272996449,"This code implements joystick hat support per issue #889.
The API change is to add the following function (and #defines for each of the hat positions such as GLFW_HAT_RIGHT_UP):
GLFWAPI const unsigned char* glfwGetJoystickHats(int jid, int* count);

The events test (events.c) has been updated to reflect the number of hat switches when a joystick is connected.
The joystick test (joystick.c) has been updated to add a new row for hat switches that displays the position in human-readable text (e.g., ""right_up"").
Code for macOS has been provided and tested.
Code for Windows has been provided, but has not been compiled or tested since I do not have access to a Windows system.
Code for Linux has also been provided, but relevant portions are compiled out with the #defines JSIOCGHATS and JS_EVENT_HAT -- following the JSIOCGAXES / JSIOCGBUTTONS and JS_EVENT_AXIS / JS_EVENT_BUTTON syntax, respectively -- since <linux/joystick.h> does not currently provide support for hat switches; if such support is added to <linux/joystick.h>, the code should work however.  This code also has not been compiled or tested since I do not have access to a Linux system.
A remark about the lack of support for hat switches on Linux appears in the documentation for glfwGetJoystickHats in glfw3.h.",It's annoying to work with a closed issue. I've opened a replacement (#934).,True,{}
glfw/glfw,https://github.com/glfw/glfw,906,2016-11-26T04:18:45Z,2016-12-04T02:55:57Z,2017-06-15T18:10:39Z,CLOSED,False,255,28,11,https://github.com/IntellectualKitty,Joystick Hat Support,11,['enhancement'],https://github.com/glfw/glfw/pull/906,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/906#issuecomment-300269384,"This code implements joystick hat support per issue #889.
The API change is to add the following function (and #defines for each of the hat positions such as GLFW_HAT_RIGHT_UP):
GLFWAPI const unsigned char* glfwGetJoystickHats(int jid, int* count);

The events test (events.c) has been updated to reflect the number of hat switches when a joystick is connected.
The joystick test (joystick.c) has been updated to add a new row for hat switches that displays the position in human-readable text (e.g., ""right_up"").
Code for macOS has been provided and tested.
Code for Windows has been provided, but has not been compiled or tested since I do not have access to a Windows system.
Code for Linux has also been provided, but relevant portions are compiled out with the #defines JSIOCGHATS and JS_EVENT_HAT -- following the JSIOCGAXES / JSIOCGBUTTONS and JS_EVENT_AXIS / JS_EVENT_BUTTON syntax, respectively -- since <linux/joystick.h> does not currently provide support for hat switches; if such support is added to <linux/joystick.h>, the code should work however.  This code also has not been compiled or tested since I do not have access to a Linux system.
A remark about the lack of support for hat switches on Linux appears in the documentation for glfwGetJoystickHats in glfw3.h.",Linux evdev joystick input is pending in #1005.,True,{}
glfw/glfw,https://github.com/glfw/glfw,906,2016-11-26T04:18:45Z,2016-12-04T02:55:57Z,2017-06-15T18:10:39Z,CLOSED,False,255,28,11,https://github.com/IntellectualKitty,Joystick Hat Support,11,['enhancement'],https://github.com/glfw/glfw/pull/906,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/906#issuecomment-308823916,"This code implements joystick hat support per issue #889.
The API change is to add the following function (and #defines for each of the hat positions such as GLFW_HAT_RIGHT_UP):
GLFWAPI const unsigned char* glfwGetJoystickHats(int jid, int* count);

The events test (events.c) has been updated to reflect the number of hat switches when a joystick is connected.
The joystick test (joystick.c) has been updated to add a new row for hat switches that displays the position in human-readable text (e.g., ""right_up"").
Code for macOS has been provided and tested.
Code for Windows has been provided, but has not been compiled or tested since I do not have access to a Windows system.
Code for Linux has also been provided, but relevant portions are compiled out with the #defines JSIOCGHATS and JS_EVENT_HAT -- following the JSIOCGAXES / JSIOCGBUTTONS and JS_EVENT_AXIS / JS_EVENT_BUTTON syntax, respectively -- since <linux/joystick.h> does not currently provide support for hat switches; if such support is added to <linux/joystick.h>, the code should work however.  This code also has not been compiled or tested since I do not have access to a Linux system.
A remark about the lack of support for hat switches on Linux appears in the documentation for glfwGetJoystickHats in glfw3.h.","Linux evdev joystick input has been merged. Hats are now properly supported on Linux (X11, Wayland and Mir).",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/paul4334,1,https://github.com/glfw/glfw/pull/912,Fix crash when glXGetClientString returns a null string,Fix crash when glXGetClientString returns a null string,True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/912#issuecomment-265327925,Fix crash when glXGetClientString returns a null string,Does everything else work as expected with this change?,True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/912#issuecomment-265328142,Fix crash when glXGetClientString returns a null string,Judging by #913 this is not the case.,True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/paul4334,4,https://github.com/glfw/glfw/pull/912#issuecomment-265471523,Fix crash when glXGetClientString returns a null string,"No, I am trying to track down whether it is a driver configuration issue causing GLX to not work correctly, but this change does allow the application to exit gracefully under these circumstances",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/912#issuecomment-265544967,Fix crash when glXGetClientString returns a null string,@paul4334 Is this a general problem with that version of Debian or is it specific to your machine?,True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/paul4334,6,https://github.com/glfw/glfw/pull/912#issuecomment-265563864,Fix crash when glXGetClientString returns a null string,"I tried to reproduce the problem on a normal HDD install of Debian 9 and did not have the issue, so I think it is limited to a live-boot ISO created with debian live with the newest packages. I think my submission #913 is superfluous, but regardless, the central problem, IMHO, is that glXGetClientString is returning a nullptr and it is being passed into strcmp.",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/912#issuecomment-265572194,Fix crash when glXGetClientString returns a null string,"I don't want to add (and maintain) a workaround for a driver bug in a pre-release live CD, especially when it doesn't even work around the problem.",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/drivehappy,8,https://github.com/glfw/glfw/pull/912#issuecomment-266589827,Fix crash when glXGetClientString returns a null string,"There might be some confusion here: #913 had been opened to make additional notes of the environment behavior when just running glxinfo (and not GLFW).
This change does solve the problem on our side where GLFW is causing our application to crash in this environment. I think it's safe to always check the return value of glXGetClientString in case it is NULL. The docs here seem to indicate there are conditions on when it would return NULL as a valid value: https://www.opengl.org/sdk/docs/man2/xhtml/glXGetClientString.xml",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/912#issuecomment-272940284,Fix crash when glXGetClientString returns a null string,"@drivehappy Every workaround like this adds cumulatively to the cost of maintaining the library. I need to weigh the cost against the benefit. The benefit here seems extremely small and specific, and the cost of testing whether the workaround is intact after future changes seems very high (even ignoring that I don't have a Pascal card). Since Debian 9 isn't out yet, I think it would be better to report this issue to the package maintainer and have everyone benefit from the fix in future revisions of the Debian 9 live CD.",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/zao,10,https://github.com/glfw/glfw/pull/912#issuecomment-272945614,Fix crash when glXGetClientString returns a null string,"FWIW, anything that tries to speculatively use glXGetClientString during most kinds of X forwarding will also trigger this problem. We had a case where plain boring emacs would crash as their X mode uses parts of GTK+ that uses a silly library that doesn't check the return of this function.
(there's two kinds of X forwarding, one where each client runs in its own little world and GLX isn't exposed, and one where pretty much every extension of the server is forwarded, regardless if they work or not)
glfwinfo too explodes in such a configuration, but I can't really envision an application that depends on GLFW that would work in such scenarios, I don't see too much point in patching it up on the GLFW side.
It's likely that the only thing you can do once you realize that GLX is non-functional is to quit gracefully.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,11,https://github.com/glfw/glfw/pull/912#issuecomment-272949079,Fix crash when glXGetClientString returns a null string,"@zao Yes, agreed.
@drivehappy @paul4334 If you are deploying your application on this specific CD or your users are running it, it shouldn't be a lot of work to maintain this one-line patch as you seem to have the setup for testing it already (although please correct me if I'm wrong). If the issue remains (or looks likely to remain) in the final release version, I'll gladly add a workaround for it. A stable Debian release is a sufficiently large and slow-to-update target to warrant a workaround. In the meantime, please report this issue to Debian so that won't happen.",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,12,https://github.com/glfw/glfw/pull/912#issuecomment-272994308,Fix crash when glXGetClientString returns a null string,"@zao I seem to remember someone at the X Developer's Conference a few years back mentioning that GLX over X forwarding had been broken for a while and no one had noticed so perhaps they didn't need to worry about breaking it with... DRI3, I think? Haven't tried myself for years. Did you have any luck getting anything else GLX-related running on that setup?",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/drivehappy,13,https://github.com/glfw/glfw/pull/912#issuecomment-273015123,Fix crash when glXGetClientString returns a null string,"@elmindreda We can apply the patch to our build, however it is a minor maintenance burden on our end if we need to update.
I'm bit surprised this patch is causing this much discussion. I don't consider this change a workaround, my view on the addition of the NULL check is that is defensive programming, and much less severe than the original workaround already in place that introduced the call. Additionally, the docs for the glXGetClientString have clearly stated that a NULL return value is valid - to purposefully leave a potential segfault around the existing Chromium workaround seems much more dangerous.",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,14,https://github.com/glfw/glfw/pull/912#issuecomment-273020803,Fix crash when glXGetClientString returns a null string,"the original workaround

@drivehappy Thank you for reminding me! I'd forgotten to check up on that one for a while. Seems it was fixed in VirtualBox 4.3 three years ago and has even made it into Debian stable, so it might be time to remove the original workaround.",True,"{'THUMBS_UP': ['https://github.com/dmitshur'], 'HOORAY': ['https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/zao,15,https://github.com/glfw/glfw/pull/912#issuecomment-273119816,Fix crash when glXGetClientString returns a null string,"@elmindreda None of the tests or examples from GLFW ran on that configuration (Ubuntu 16.04), and I believe we ended up advising the user to run their emacs in text mode. X forwarding at our site is just a if-it-works-it-works convenience, for actual graphical applications we run ThinLinc.
As a side note, everything runs fine on the previous cluster that has Ubuntu 12.04.",True,{}
glfw/glfw,https://github.com/glfw/glfw,912,2016-12-06T23:23:10Z,2017-01-19T03:56:48Z,2017-10-26T01:23:03Z,CLOSED,False,1,1,1,https://github.com/paul4334,Crash in Debian 9 on glfwCreateWindow,1,"['bug', 'X11', 'verified', 'Nvidia']",https://github.com/glfw/glfw/pull/912,https://github.com/elmindreda,16,https://github.com/glfw/glfw/pull/912#issuecomment-273666497,Fix crash when glXGetClientString returns a null string,"@drivehappy It turns out I was already doing the check on other similar strings, so I should have been doing it here as well all along. I'll merge the fix shortly. Thank you for your patience. 🦉
I may also later transform these checks into an earlier and explicit test with a more useful error message since it can apparently happen in other situations as well.",True,{}
glfw/glfw,https://github.com/glfw/glfw,915,2016-12-12T20:17:20Z,,2017-10-26T00:21:34Z,OPEN,False,4,1,2,https://github.com/hesiod,Pass last receieved event timestamp when required,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/915,https://github.com/hesiod,1,https://github.com/glfw/glfw/pull/915,"The EWMH specifications require that the timestamp of the last
user interaction should be sent to NET_ACTIVE_WINDOW.
Since GLFW send just 0 currently, the GNOME Shell would issue a warning
upon receiving a NET_ACTIVE_WINDOW message:

Window manager warning: Buggy client sent a _NET_ACTIVE_WINDOW message
with a timestamp of 0

This commit fixes this by sending lastKeyTime as the timestamp
which should be a reasonable approximation to the last user interaction.
I have not tested this patch extensively, but it silences the warning and it should not alter existent behaviour.
For further information about NET_ACTIVE_WINDOW/EWMH, consider the online reference","The EWMH specifications require that the timestamp of the last
user interaction should be sent to NET_ACTIVE_WINDOW.
Since GLFW send just 0 currently, the GNOME Shell would issue a warning
upon receiving a NET_ACTIVE_WINDOW message:

Window manager warning: Buggy client sent a _NET_ACTIVE_WINDOW message
with a timestamp of 0

This commit fixes this by sending lastKeyTime as the timestamp
which should be a reasonable approximation to the last user interaction.
I have not tested this patch extensively, but it silences the warning and it should not alter existent behaviour.
For further information about NET_ACTIVE_WINDOW/EWMH, consider the online reference",True,{}
glfw/glfw,https://github.com/glfw/glfw,915,2016-12-12T20:17:20Z,,2017-10-26T00:21:34Z,OPEN,False,4,1,2,https://github.com/hesiod,Pass last receieved event timestamp when required,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/915,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/915#issuecomment-266820508,"The EWMH specifications require that the timestamp of the last
user interaction should be sent to NET_ACTIVE_WINDOW.
Since GLFW send just 0 currently, the GNOME Shell would issue a warning
upon receiving a NET_ACTIVE_WINDOW message:

Window manager warning: Buggy client sent a _NET_ACTIVE_WINDOW message
with a timestamp of 0

This commit fixes this by sending lastKeyTime as the timestamp
which should be a reasonable approximation to the last user interaction.
I have not tested this patch extensively, but it silences the warning and it should not alter existent behaviour.
For further information about NET_ACTIVE_WINDOW/EWMH, consider the online reference",I started on a full implementation of this requirement a while back in the x11-event-time branch. Note that it is not complete.,True,{}
glfw/glfw,https://github.com/glfw/glfw,926,2016-12-28T04:47:31Z,2017-03-27T00:50:08Z,2017-03-27T00:50:14Z,CLOSED,False,52,1,2,https://github.com/IntellectualKitty,Command-tabbing fix for issue #848,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/926,https://github.com/IntellectualKitty,1,https://github.com/glfw/glfw/pull/926,"I'm re-submitting the command-tabbing fix.  The code for the presentation options is identical to what I submitted with PR #895, but I've returned to the original code that you had using nil for the sender id in the orderFront and makeKeyAndOrderFront calls.
I've found it difficult to get good information about the sender id, but my impression from what I have come across is that the sender id is most commonly used when coordinating with the Interface Builder (IB), which is not the case here.  Since most of the Cocoa code that I've seen in the past came from Apple, which seems to use IB exclusively, I mistakenly thought that it was necessary to provide the window as the sender id.  However, it seems that nil is clearly appropriate in this case.
I've also been having difficulty finding detailed information on presentation options, but here is Apple's documentation: https://developer.apple.com/reference/appkit/nsapplicationpresentationoptions?language=objc
The following presentation options are used in fullscreen mode (i.e., when there is a monitor attached to the window):
            NSApplicationPresentationHideDock
            NSApplicationPresentationHideMenuBar
            NSApplicationPresentationDisableProcessSwitching
            NSApplicationPresentationDisableHideApplication

There is a fullscreen option (NSApplicationPresentationFullScreen), which you would think should be ideal and even necessary for fullscreen support, but I did not include it because it caused buggy behavior (which was actually quite similar to the erroneous behavior that I reported in issue #848).  From the Googling that I did about the fullscreen option, it seems like other people are encountering buggy behavior with it as well.
When there is no monitor attached to the window, the option NSApplicationPresentationDefault is set explicitly to return to normal behavior.
This change occurs in the following three functions and is bracketed in an if/else statement based on the presence of window->monitor and kept separate from the existing code:
            _glfwPlatformShowWindow
            _glfwPlatformFocusWindow
            _glfwPlatformSetWindowMonitor

The only exception is in _glfwPlatformShowWindow, where makeKeyAndOrderFront is used instead of orderFront when the window is being shown in fullscreen mode.
Finally, while this change addresses the issues I mentioned in #848, I'm not sure if these changes match GLFW's behavior on other platforms nor if it is always the ideal behavior to disable command-tabbing in fullscreen mode.  I don't recall anything descriptive about this in the documentation, so if you can provide me with feedback, I'll be glad to update the code and resubmit, if necessary.  Otherwise, I've tried to follow the contributing guidelines and added a line about this bugfix in README.me, which I hope is helpful.  Also, per our recent discussions, I hope the additional detailed information about how this code works is helpful.","I'm re-submitting the command-tabbing fix.  The code for the presentation options is identical to what I submitted with PR #895, but I've returned to the original code that you had using nil for the sender id in the orderFront and makeKeyAndOrderFront calls.
I've found it difficult to get good information about the sender id, but my impression from what I have come across is that the sender id is most commonly used when coordinating with the Interface Builder (IB), which is not the case here.  Since most of the Cocoa code that I've seen in the past came from Apple, which seems to use IB exclusively, I mistakenly thought that it was necessary to provide the window as the sender id.  However, it seems that nil is clearly appropriate in this case.
I've also been having difficulty finding detailed information on presentation options, but here is Apple's documentation: https://developer.apple.com/reference/appkit/nsapplicationpresentationoptions?language=objc
The following presentation options are used in fullscreen mode (i.e., when there is a monitor attached to the window):
            NSApplicationPresentationHideDock
            NSApplicationPresentationHideMenuBar
            NSApplicationPresentationDisableProcessSwitching
            NSApplicationPresentationDisableHideApplication

There is a fullscreen option (NSApplicationPresentationFullScreen), which you would think should be ideal and even necessary for fullscreen support, but I did not include it because it caused buggy behavior (which was actually quite similar to the erroneous behavior that I reported in issue #848).  From the Googling that I did about the fullscreen option, it seems like other people are encountering buggy behavior with it as well.
When there is no monitor attached to the window, the option NSApplicationPresentationDefault is set explicitly to return to normal behavior.
This change occurs in the following three functions and is bracketed in an if/else statement based on the presence of window->monitor and kept separate from the existing code:
            _glfwPlatformShowWindow
            _glfwPlatformFocusWindow
            _glfwPlatformSetWindowMonitor

The only exception is in _glfwPlatformShowWindow, where makeKeyAndOrderFront is used instead of orderFront when the window is being shown in fullscreen mode.
Finally, while this change addresses the issues I mentioned in #848, I'm not sure if these changes match GLFW's behavior on other platforms nor if it is always the ideal behavior to disable command-tabbing in fullscreen mode.  I don't recall anything descriptive about this in the documentation, so if you can provide me with feedback, I'll be glad to update the code and resubmit, if necessary.  Otherwise, I've tried to follow the contributing guidelines and added a line about this bugfix in README.me, which I hope is helpful.  Also, per our recent discussions, I hope the additional detailed information about how this code works is helpful.",True,{}
glfw/glfw,https://github.com/glfw/glfw,926,2016-12-28T04:47:31Z,2017-03-27T00:50:08Z,2017-03-27T00:50:14Z,CLOSED,False,52,1,2,https://github.com/IntellectualKitty,Command-tabbing fix for issue #848,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/926,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/926#issuecomment-269653216,"I'm re-submitting the command-tabbing fix.  The code for the presentation options is identical to what I submitted with PR #895, but I've returned to the original code that you had using nil for the sender id in the orderFront and makeKeyAndOrderFront calls.
I've found it difficult to get good information about the sender id, but my impression from what I have come across is that the sender id is most commonly used when coordinating with the Interface Builder (IB), which is not the case here.  Since most of the Cocoa code that I've seen in the past came from Apple, which seems to use IB exclusively, I mistakenly thought that it was necessary to provide the window as the sender id.  However, it seems that nil is clearly appropriate in this case.
I've also been having difficulty finding detailed information on presentation options, but here is Apple's documentation: https://developer.apple.com/reference/appkit/nsapplicationpresentationoptions?language=objc
The following presentation options are used in fullscreen mode (i.e., when there is a monitor attached to the window):
            NSApplicationPresentationHideDock
            NSApplicationPresentationHideMenuBar
            NSApplicationPresentationDisableProcessSwitching
            NSApplicationPresentationDisableHideApplication

There is a fullscreen option (NSApplicationPresentationFullScreen), which you would think should be ideal and even necessary for fullscreen support, but I did not include it because it caused buggy behavior (which was actually quite similar to the erroneous behavior that I reported in issue #848).  From the Googling that I did about the fullscreen option, it seems like other people are encountering buggy behavior with it as well.
When there is no monitor attached to the window, the option NSApplicationPresentationDefault is set explicitly to return to normal behavior.
This change occurs in the following three functions and is bracketed in an if/else statement based on the presence of window->monitor and kept separate from the existing code:
            _glfwPlatformShowWindow
            _glfwPlatformFocusWindow
            _glfwPlatformSetWindowMonitor

The only exception is in _glfwPlatformShowWindow, where makeKeyAndOrderFront is used instead of orderFront when the window is being shown in fullscreen mode.
Finally, while this change addresses the issues I mentioned in #848, I'm not sure if these changes match GLFW's behavior on other platforms nor if it is always the ideal behavior to disable command-tabbing in fullscreen mode.  I don't recall anything descriptive about this in the documentation, so if you can provide me with feedback, I'll be glad to update the code and resubmit, if necessary.  Otherwise, I've tried to follow the contributing guidelines and added a line about this bugfix in README.me, which I hope is helpful.  Also, per our recent discussions, I hope the additional detailed information about how this code works is helpful.","I'm not sure if these changes match GLFW's behavior on other platforms nor if it is always the ideal behavior to disable command-tabbing in fullscreen mode.

Addressing just this bit: it should always be possible to switch away from full screen windows unless that isn't supported by the OS.",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,926,2016-12-28T04:47:31Z,2017-03-27T00:50:08Z,2017-03-27T00:50:14Z,CLOSED,False,52,1,2,https://github.com/IntellectualKitty,Command-tabbing fix for issue #848,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/926,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/926#issuecomment-270190302,"I'm re-submitting the command-tabbing fix.  The code for the presentation options is identical to what I submitted with PR #895, but I've returned to the original code that you had using nil for the sender id in the orderFront and makeKeyAndOrderFront calls.
I've found it difficult to get good information about the sender id, but my impression from what I have come across is that the sender id is most commonly used when coordinating with the Interface Builder (IB), which is not the case here.  Since most of the Cocoa code that I've seen in the past came from Apple, which seems to use IB exclusively, I mistakenly thought that it was necessary to provide the window as the sender id.  However, it seems that nil is clearly appropriate in this case.
I've also been having difficulty finding detailed information on presentation options, but here is Apple's documentation: https://developer.apple.com/reference/appkit/nsapplicationpresentationoptions?language=objc
The following presentation options are used in fullscreen mode (i.e., when there is a monitor attached to the window):
            NSApplicationPresentationHideDock
            NSApplicationPresentationHideMenuBar
            NSApplicationPresentationDisableProcessSwitching
            NSApplicationPresentationDisableHideApplication

There is a fullscreen option (NSApplicationPresentationFullScreen), which you would think should be ideal and even necessary for fullscreen support, but I did not include it because it caused buggy behavior (which was actually quite similar to the erroneous behavior that I reported in issue #848).  From the Googling that I did about the fullscreen option, it seems like other people are encountering buggy behavior with it as well.
When there is no monitor attached to the window, the option NSApplicationPresentationDefault is set explicitly to return to normal behavior.
This change occurs in the following three functions and is bracketed in an if/else statement based on the presence of window->monitor and kept separate from the existing code:
            _glfwPlatformShowWindow
            _glfwPlatformFocusWindow
            _glfwPlatformSetWindowMonitor

The only exception is in _glfwPlatformShowWindow, where makeKeyAndOrderFront is used instead of orderFront when the window is being shown in fullscreen mode.
Finally, while this change addresses the issues I mentioned in #848, I'm not sure if these changes match GLFW's behavior on other platforms nor if it is always the ideal behavior to disable command-tabbing in fullscreen mode.  I don't recall anything descriptive about this in the documentation, so if you can provide me with feedback, I'll be glad to update the code and resubmit, if necessary.  Otherwise, I've tried to follow the contributing guidelines and added a line about this bugfix in README.me, which I hope is helpful.  Also, per our recent discussions, I hope the additional detailed information about how this code works is helpful.","This patch builds, runs and solves the problem but does so by disabling expected functionality, i.e. Cmd+Tab, switching between spaces, etc. I will not merge it in its current state.",True,{}
glfw/glfw,https://github.com/glfw/glfw,926,2016-12-28T04:47:31Z,2017-03-27T00:50:08Z,2017-03-27T00:50:14Z,CLOSED,False,52,1,2,https://github.com/IntellectualKitty,Command-tabbing fix for issue #848,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/926,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/926#issuecomment-286608236,"I'm re-submitting the command-tabbing fix.  The code for the presentation options is identical to what I submitted with PR #895, but I've returned to the original code that you had using nil for the sender id in the orderFront and makeKeyAndOrderFront calls.
I've found it difficult to get good information about the sender id, but my impression from what I have come across is that the sender id is most commonly used when coordinating with the Interface Builder (IB), which is not the case here.  Since most of the Cocoa code that I've seen in the past came from Apple, which seems to use IB exclusively, I mistakenly thought that it was necessary to provide the window as the sender id.  However, it seems that nil is clearly appropriate in this case.
I've also been having difficulty finding detailed information on presentation options, but here is Apple's documentation: https://developer.apple.com/reference/appkit/nsapplicationpresentationoptions?language=objc
The following presentation options are used in fullscreen mode (i.e., when there is a monitor attached to the window):
            NSApplicationPresentationHideDock
            NSApplicationPresentationHideMenuBar
            NSApplicationPresentationDisableProcessSwitching
            NSApplicationPresentationDisableHideApplication

There is a fullscreen option (NSApplicationPresentationFullScreen), which you would think should be ideal and even necessary for fullscreen support, but I did not include it because it caused buggy behavior (which was actually quite similar to the erroneous behavior that I reported in issue #848).  From the Googling that I did about the fullscreen option, it seems like other people are encountering buggy behavior with it as well.
When there is no monitor attached to the window, the option NSApplicationPresentationDefault is set explicitly to return to normal behavior.
This change occurs in the following three functions and is bracketed in an if/else statement based on the presence of window->monitor and kept separate from the existing code:
            _glfwPlatformShowWindow
            _glfwPlatformFocusWindow
            _glfwPlatformSetWindowMonitor

The only exception is in _glfwPlatformShowWindow, where makeKeyAndOrderFront is used instead of orderFront when the window is being shown in fullscreen mode.
Finally, while this change addresses the issues I mentioned in #848, I'm not sure if these changes match GLFW's behavior on other platforms nor if it is always the ideal behavior to disable command-tabbing in fullscreen mode.  I don't recall anything descriptive about this in the documentation, so if you can provide me with feedback, I'll be glad to update the code and resubmit, if necessary.  Otherwise, I've tried to follow the contributing guidelines and added a line about this bugfix in README.me, which I hope is helpful.  Also, per our recent discussions, I hope the additional detailed information about how this code works is helpful.","I stumbled upon a solution in 3d8aa53. This doesn't improve the current and weird full screen behavior, but it does appear to make that behavior work as designed.
I would love to have a discussion about how full screen windows should behave on macOS, especially now that we have the additional tool of platform specific hints for behavior that just doesn't generalize to other systems.",True,{}
glfw/glfw,https://github.com/glfw/glfw,928,2017-01-04T21:06:22Z,2017-01-15T14:26:38Z,2017-10-01T13:59:27Z,CLOSED,False,3,1,2,https://github.com/srjek,MinGW builds will always use 32bit vulkan,1,"['bug', 'Windows', 'verified', 'Vulkan', 'build']",https://github.com/glfw/glfw/pull/928,https://github.com/srjek,1,https://github.com/glfw/glfw/pull/928,"CMAKE_CL_64 is a Visual Studio only define, CMAKE_SIZEOF_VOID_P EQUAL 8 should work for all compilers.","CMAKE_CL_64 is a Visual Studio only define, CMAKE_SIZEOF_VOID_P EQUAL 8 should work for all compilers.",True,{}
glfw/glfw,https://github.com/glfw/glfw,928,2017-01-04T21:06:22Z,2017-01-15T14:26:38Z,2017-10-01T13:59:27Z,CLOSED,False,3,1,2,https://github.com/srjek,MinGW builds will always use 32bit vulkan,1,"['bug', 'Windows', 'verified', 'Vulkan', 'build']",https://github.com/glfw/glfw/pull/928,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/928#issuecomment-272698441,"CMAKE_CL_64 is a Visual Studio only define, CMAKE_SIZEOF_VOID_P EQUAL 8 should work for all compilers.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,930,2017-01-07T21:18:07Z,2017-01-20T00:36:45Z,2017-10-01T14:00:27Z,CLOSED,False,7,5,1,https://github.com/akamch,Fix build on OpenBSD,1,"['bug', 'verified', 'OpenBSD', 'build']",https://github.com/glfw/glfw/pull/930,https://github.com/akamch,1,https://github.com/glfw/glfw/pull/930,"OpenBSD doesn't have librt, but provides all librt's functions in libc. Here's a shot for a fix.","OpenBSD doesn't have librt, but provides all librt's functions in libc. Here's a shot for a fix.",True,{}
glfw/glfw,https://github.com/glfw/glfw,930,2017-01-07T21:18:07Z,2017-01-20T00:36:45Z,2017-10-01T14:00:27Z,CLOSED,False,7,5,1,https://github.com/akamch,Fix build on OpenBSD,1,"['bug', 'verified', 'OpenBSD', 'build']",https://github.com/glfw/glfw/pull/930,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/930#issuecomment-271118238,"OpenBSD doesn't have librt, but provides all librt's functions in libc. Here's a shot for a fix.","I don't see the problem. If the stub librt isn't there, it won't be added as a dependency.",True,{}
glfw/glfw,https://github.com/glfw/glfw,930,2017-01-07T21:18:07Z,2017-01-20T00:36:45Z,2017-10-01T14:00:27Z,CLOSED,False,7,5,1,https://github.com/akamch,Fix build on OpenBSD,1,"['bug', 'verified', 'OpenBSD', 'build']",https://github.com/glfw/glfw/pull/930,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/930#issuecomment-271120092,"OpenBSD doesn't have librt, but provides all librt's functions in libc. Here's a shot for a fix.",How does the build fail? It would be useful to see your CMakeFiles/CMakeOutput.log.,True,{}
glfw/glfw,https://github.com/glfw/glfw,930,2017-01-07T21:18:07Z,2017-01-20T00:36:45Z,2017-10-01T14:00:27Z,CLOSED,False,7,5,1,https://github.com/akamch,Fix build on OpenBSD,1,"['bug', 'verified', 'OpenBSD', 'build']",https://github.com/glfw/glfw/pull/930,https://github.com/akamch,4,https://github.com/glfw/glfw/pull/930#issuecomment-271129202,"OpenBSD doesn't have librt, but provides all librt's functions in libc. Here's a shot for a fix.","The build fails with this error:
-- Looking for IceConnectionNumber in ICE
-- Looking for IceConnectionNumber in ICE - found
-- Found X11: /usr/X11R6/lib/libX11.so.16.1
CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
RT_LIBRARY (ADVANCED)
    linked by target ""particles"" in directory /home/rev/opengl/glfw/examples
    linked by target ""threads"" in directory /home/rev/opengl/glfw/tests
    linked by target ""empty"" in directory /home/rev/opengl/glfw/tests

-- Configuring incomplete, errors occurred!
See also ""/home/rev/opengl/glfw/build/CMakeFiles/CMakeOutput.log"".
See also ""/home/rev/opengl/glfw/build/CMakeFiles/CMakeError.log"".

CMakeOutput.log: http://pastebin.com/raw/bJ7v3Pr3",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,930,2017-01-07T21:18:07Z,2017-01-20T00:36:45Z,2017-10-01T14:00:27Z,CLOSED,False,7,5,1,https://github.com/akamch,Fix build on OpenBSD,1,"['bug', 'verified', 'OpenBSD', 'build']",https://github.com/glfw/glfw/pull/930,https://github.com/akamch,5,https://github.com/glfw/glfw/pull/930#issuecomment-271130433,"OpenBSD doesn't have librt, but provides all librt's functions in libc. Here's a shot for a fix.","OpenBSD currently packages glfw 3.1.2 and similarly patches out librt, though indeed, it may be better to fix checks for librt in {examples,tests}/CMakeLists.txt. I can file a new issue if you wish.",True,{}
glfw/glfw,https://github.com/glfw/glfw,930,2017-01-07T21:18:07Z,2017-01-20T00:36:45Z,2017-10-01T14:00:27Z,CLOSED,False,7,5,1,https://github.com/akamch,Fix build on OpenBSD,1,"['bug', 'verified', 'OpenBSD', 'build']",https://github.com/glfw/glfw/pull/930,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/930#issuecomment-272717350,"OpenBSD doesn't have librt, but provides all librt's functions in libc. Here's a shot for a fix.",I'll have a fix merged this week.,True,{'HOORAY': ['https://github.com/akamch']}
glfw/glfw,https://github.com/glfw/glfw,935,2017-01-25T11:17:51Z,2017-02-10T00:31:27Z,2017-02-10T00:31:27Z,CLOSED,False,46,23,5,https://github.com/kkaefer,Support for automatic graphics switching,2,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/935,https://github.com/kkaefer,1,https://github.com/glfw/glfw/pull/935,"Another attempt at #377:
There is a way to control graphics switching behavior on macOS without modifying the plist file (many GLFW apps are outside an app bundle): NSOpenGL is backed by CGL on macOS. Instead of adding NSOpenGLPFAAllowOfflineRenderers, and adding the plist setting, you can also add kCGLPFASupportsAutomaticGraphicsSwitching to the NSOpenGLPixelFormatAttribute array. Of course, once Apple decides to change the underlying implementation, this might fail in spectacular ways.
However, there seems to be an officially supported API to accomplish this: [NSOpenGLPixelFormat initWithCGLPixelFormatObj:] takes a CGLPixelFormatObj.
This pull request changes the initialization of the pixel format object from NS* to CGL* (it supports the same enums, just with a different prefix), then adds a flag GLFW_ALLOW_GRAPHICS_SWITCHING that allows opting in to graphics switching.","Another attempt at #377:
There is a way to control graphics switching behavior on macOS without modifying the plist file (many GLFW apps are outside an app bundle): NSOpenGL is backed by CGL on macOS. Instead of adding NSOpenGLPFAAllowOfflineRenderers, and adding the plist setting, you can also add kCGLPFASupportsAutomaticGraphicsSwitching to the NSOpenGLPixelFormatAttribute array. Of course, once Apple decides to change the underlying implementation, this might fail in spectacular ways.
However, there seems to be an officially supported API to accomplish this: [NSOpenGLPixelFormat initWithCGLPixelFormatObj:] takes a CGLPixelFormatObj.
This pull request changes the initialization of the pixel format object from NS* to CGL* (it supports the same enums, just with a different prefix), then adds a flag GLFW_ALLOW_GRAPHICS_SWITCHING that allows opting in to graphics switching.",True,{}
glfw/glfw,https://github.com/glfw/glfw,935,2017-01-25T11:17:51Z,2017-02-10T00:31:27Z,2017-02-10T00:31:27Z,CLOSED,False,46,23,5,https://github.com/kkaefer,Support for automatic graphics switching,2,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/935,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/935#issuecomment-275220528,"Another attempt at #377:
There is a way to control graphics switching behavior on macOS without modifying the plist file (many GLFW apps are outside an app bundle): NSOpenGL is backed by CGL on macOS. Instead of adding NSOpenGLPFAAllowOfflineRenderers, and adding the plist setting, you can also add kCGLPFASupportsAutomaticGraphicsSwitching to the NSOpenGLPixelFormatAttribute array. Of course, once Apple decides to change the underlying implementation, this might fail in spectacular ways.
However, there seems to be an officially supported API to accomplish this: [NSOpenGLPixelFormat initWithCGLPixelFormatObj:] takes a CGLPixelFormatObj.
This pull request changes the initialization of the pixel format object from NS* to CGL* (it supports the same enums, just with a different prefix), then adds a flag GLFW_ALLOW_GRAPHICS_SWITCHING that allows opting in to graphics switching.",Thank you. Will review.,True,{}
glfw/glfw,https://github.com/glfw/glfw,935,2017-01-25T11:17:51Z,2017-02-10T00:31:27Z,2017-02-10T00:31:27Z,CLOSED,False,46,23,5,https://github.com/kkaefer,Support for automatic graphics switching,2,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/935,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/935#issuecomment-275481257,"Another attempt at #377:
There is a way to control graphics switching behavior on macOS without modifying the plist file (many GLFW apps are outside an app bundle): NSOpenGL is backed by CGL on macOS. Instead of adding NSOpenGLPFAAllowOfflineRenderers, and adding the plist setting, you can also add kCGLPFASupportsAutomaticGraphicsSwitching to the NSOpenGLPixelFormatAttribute array. Of course, once Apple decides to change the underlying implementation, this might fail in spectacular ways.
However, there seems to be an officially supported API to accomplish this: [NSOpenGLPixelFormat initWithCGLPixelFormatObj:] takes a CGLPixelFormatObj.
This pull request changes the initialization of the pixel format object from NS* to CGL* (it supports the same enums, just with a different prefix), then adds a flag GLFW_ALLOW_GRAPHICS_SWITCHING that allows opting in to graphics switching.","Instead of adding NSOpenGLPFAAllowOfflineRenderers, and adding the plist setting, you can also add kCGLPFASupportsAutomaticGraphicsSwitching to the NSOpenGLPixelFormatAttribute array.

Seems that the UnrealEngine 4 standalone renderer already does it this way.
Edit: This was not the review. I'm just making notes.",True,{}
glfw/glfw,https://github.com/glfw/glfw,935,2017-01-25T11:17:51Z,2017-02-10T00:31:27Z,2017-02-10T00:31:27Z,CLOSED,False,46,23,5,https://github.com/kkaefer,Support for automatic graphics switching,2,"['enhancement', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/935,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/935#issuecomment-278820898,"Another attempt at #377:
There is a way to control graphics switching behavior on macOS without modifying the plist file (many GLFW apps are outside an app bundle): NSOpenGL is backed by CGL on macOS. Instead of adding NSOpenGLPFAAllowOfflineRenderers, and adding the plist setting, you can also add kCGLPFASupportsAutomaticGraphicsSwitching to the NSOpenGLPixelFormatAttribute array. Of course, once Apple decides to change the underlying implementation, this might fail in spectacular ways.
However, there seems to be an officially supported API to accomplish this: [NSOpenGLPixelFormat initWithCGLPixelFormatObj:] takes a CGLPixelFormatObj.
This pull request changes the initialization of the pixel format object from NS* to CGL* (it supports the same enums, just with a different prefix), then adds a flag GLFW_ALLOW_GRAPHICS_SWITCHING that allows opting in to graphics switching.","Thank you so much for finding the missing piece for making this a reliable window hint!
I (now) have on good authority that it should be all right to pass kCGLPFASupportsAutomaticGraphicsSwitching directly so went with the simpler solution, but that is no criticism of your code. This patch is solid.",True,{}
glfw/glfw,https://github.com/glfw/glfw,937,2017-01-29T14:17:37Z,2017-01-29T18:51:16Z,2017-01-29T20:33:07Z,CLOSED,False,4,6,1,https://github.com/cher-nov,Fix incomplete initialization of a matrix in linmath.h,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/937,https://github.com/cher-nov,1,https://github.com/glfw/glfw/pull/937,"Introduced by a28236d.
Related commit comment: a28236d#commitcomment-20651393","Introduced by a28236d.
Related commit comment: a28236d#commitcomment-20651393",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,937,2017-01-29T14:17:37Z,2017-01-29T18:51:16Z,2017-01-29T20:33:07Z,CLOSED,False,4,6,1,https://github.com/cher-nov,Fix incomplete initialization of a matrix in linmath.h,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/937,https://github.com/cher-nov,2,https://github.com/glfw/glfw/pull/937#issuecomment-275939684,"Introduced by a28236d.
Related commit comment: a28236d#commitcomment-20651393","@elmindreda, oh, your solution is really better.
For unknown reason I have thought that old VC++'s don't support designated initializers.",True,{}
glfw/glfw,https://github.com/glfw/glfw,937,2017-01-29T14:17:37Z,2017-01-29T18:51:16Z,2017-01-29T20:33:07Z,CLOSED,False,4,6,1,https://github.com/cher-nov,Fix incomplete initialization of a matrix in linmath.h,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/937,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/937#issuecomment-275941565,"Introduced by a28236d.
Related commit comment: a28236d#commitcomment-20651393","Even C89 allows flat initializer lists for multidimensional arrays, which is very handy for cases like this.
Thank you for reporting the bug!",True,{}
glfw/glfw,https://github.com/glfw/glfw,937,2017-01-29T14:17:37Z,2017-01-29T18:51:16Z,2017-01-29T20:33:07Z,CLOSED,False,4,6,1,https://github.com/cher-nov,Fix incomplete initialization of a matrix in linmath.h,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/937,https://github.com/cher-nov,4,https://github.com/glfw/glfw/pull/937#issuecomment-275943732,"Introduced by a28236d.
Related commit comment: a28236d#commitcomment-20651393","@elmindreda, yes, I know, of course. It was just a fleeting mistake. :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,947,2017-02-13T16:19:18Z,2017-02-13T16:20:00Z,2017-02-13T16:25:35Z,CLOSED,False,73,102,3,https://github.com/OlivierNemoz,Fixed X11 behavior when disconnecting / connecting the last display,1,[],https://github.com/glfw/glfw/pull/947,https://github.com/OlivierNemoz,1,https://github.com/glfw/glfw/pull/947,"Removed the one-time detection of headless display
Removed virtual ""Display"" display created when no monitor is plugged
Hardened monitor functions","Removed the one-time detection of headless display
Removed virtual ""Display"" display created when no monitor is plugged
Hardened monitor functions",True,{}
glfw/glfw,https://github.com/glfw/glfw,952,2017-02-23T22:49:14Z,,2022-03-20T21:38:46Z,OPEN,False,323,1,13,https://github.com/eriksunden,Updated touch structure,14,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/952,https://github.com/eriksunden,1,https://github.com/glfw/glfw/pull/952,"I wanted touch support inside GLFW, for convenience over software setups like TUIO, so continued on your touch branch, and based on previous experiences with multi-touch applications, I have bundled all the touch points into one container before sending them out through the callbacks.
I have merged to ""latest"" and then later on to ""master"", so it's up-to-date for a convenient merge (or to new feature branch) and possibly then part of 3.3 (as I saw in an issue was the plan).
I have built this branch with Visual Studio 2015 x64, XCode 8.2.1, gcc-4.8(on two linux systems).
The actual touch support is, as with your previous commits, only supporting WM_TOUCH, i.e. Windows. If desired, I could gather effort on implementing support on x11 and cocoa side.","I wanted touch support inside GLFW, for convenience over software setups like TUIO, so continued on your touch branch, and based on previous experiences with multi-touch applications, I have bundled all the touch points into one container before sending them out through the callbacks.
I have merged to ""latest"" and then later on to ""master"", so it's up-to-date for a convenient merge (or to new feature branch) and possibly then part of 3.3 (as I saw in an issue was the plan).
I have built this branch with Visual Studio 2015 x64, XCode 8.2.1, gcc-4.8(on two linux systems).
The actual touch support is, as with your previous commits, only supporting WM_TOUCH, i.e. Windows. If desired, I could gather effort on implementing support on x11 and cocoa side.",True,"{'THUMBS_UP': ['https://github.com/mkalten', 'https://github.com/satoshinm', 'https://github.com/Ceydric2002', 'https://github.com/cachekeyval', 'https://github.com/pmp-p']}"
glfw/glfw,https://github.com/glfw/glfw,952,2017-02-23T22:49:14Z,,2022-03-20T21:38:46Z,OPEN,False,323,1,13,https://github.com/eriksunden,Updated touch structure,14,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/952,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/952#issuecomment-282317374,"I wanted touch support inside GLFW, for convenience over software setups like TUIO, so continued on your touch branch, and based on previous experiences with multi-touch applications, I have bundled all the touch points into one container before sending them out through the callbacks.
I have merged to ""latest"" and then later on to ""master"", so it's up-to-date for a convenient merge (or to new feature branch) and possibly then part of 3.3 (as I saw in an issue was the plan).
I have built this branch with Visual Studio 2015 x64, XCode 8.2.1, gcc-4.8(on two linux systems).
The actual touch support is, as with your previous commits, only supporting WM_TOUCH, i.e. Windows. If desired, I could gather effort on implementing support on x11 and cocoa side.","@eriksunden Thank you, will review.",True,{}
glfw/glfw,https://github.com/glfw/glfw,952,2017-02-23T22:49:14Z,,2022-03-20T21:38:46Z,OPEN,False,323,1,13,https://github.com/eriksunden,Updated touch structure,14,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/952,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/952#issuecomment-282317519,"I wanted touch support inside GLFW, for convenience over software setups like TUIO, so continued on your touch branch, and based on previous experiences with multi-touch applications, I have bundled all the touch points into one container before sending them out through the callbacks.
I have merged to ""latest"" and then later on to ""master"", so it's up-to-date for a convenient merge (or to new feature branch) and possibly then part of 3.3 (as I saw in an issue was the plan).
I have built this branch with Visual Studio 2015 x64, XCode 8.2.1, gcc-4.8(on two linux systems).
The actual touch support is, as with your previous commits, only supporting WM_TOUCH, i.e. Windows. If desired, I could gather effort on implementing support on x11 and cocoa side.",This is related to #42.,True,{}
glfw/glfw,https://github.com/glfw/glfw,952,2017-02-23T22:49:14Z,,2022-03-20T21:38:46Z,OPEN,False,323,1,13,https://github.com/eriksunden,Updated touch structure,14,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/952,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/952#issuecomment-290266300,"I wanted touch support inside GLFW, for convenience over software setups like TUIO, so continued on your touch branch, and based on previous experiences with multi-touch applications, I have bundled all the touch points into one container before sending them out through the callbacks.
I have merged to ""latest"" and then later on to ""master"", so it's up-to-date for a convenient merge (or to new feature branch) and possibly then part of 3.3 (as I saw in an issue was the plan).
I have built this branch with Visual Studio 2015 x64, XCode 8.2.1, gcc-4.8(on two linux systems).
The actual touch support is, as with your previous commits, only supporting WM_TOUCH, i.e. Windows. If desired, I could gather effort on implementing support on x11 and cocoa side.","It's not a bad-looking interface, but it is more complex than the current one. Is there often more than one related touch event per frame?",True,{}
glfw/glfw,https://github.com/glfw/glfw,952,2017-02-23T22:49:14Z,,2022-03-20T21:38:46Z,OPEN,False,323,1,13,https://github.com/eriksunden,Updated touch structure,14,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/952,https://github.com/eriksunden,5,https://github.com/glfw/glfw/pull/952#issuecomment-356734332,"I wanted touch support inside GLFW, for convenience over software setups like TUIO, so continued on your touch branch, and based on previous experiences with multi-touch applications, I have bundled all the touch points into one container before sending them out through the callbacks.
I have merged to ""latest"" and then later on to ""master"", so it's up-to-date for a convenient merge (or to new feature branch) and possibly then part of 3.3 (as I saw in an issue was the plan).
I have built this branch with Visual Studio 2015 x64, XCode 8.2.1, gcc-4.8(on two linux systems).
The actual touch support is, as with your previous commits, only supporting WM_TOUCH, i.e. Windows. If desired, I could gather effort on implementing support on x11 and cocoa side.","Sorry for the ultra late reply.
Their is sort of several touch events per frame, if you consider one touch event to be equal to one finger, which one really shouldn't. One event per frame, with a consideration of all touch points that current resides on the touch surface is needed to perform a correct interaction response (even the fingers/touch points which have not changed).
Before you have a list of all touch points on the surface, you don't really now what kind of interaction the user has made, which can in one frame actually can be multiple interactions, if for instance the user had 2 fingers on the surface and performed a rotation and pinch.
There is even touch screens which support pressure, also an attribute part of most low-level touch API such as Windows Touch.",True,{}
glfw/glfw,https://github.com/glfw/glfw,952,2017-02-23T22:49:14Z,,2022-03-20T21:38:46Z,OPEN,False,323,1,13,https://github.com/eriksunden,Updated touch structure,14,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/952,https://github.com/eriksunden,6,https://github.com/glfw/glfw/pull/952#issuecomment-390222724,"I wanted touch support inside GLFW, for convenience over software setups like TUIO, so continued on your touch branch, and based on previous experiences with multi-touch applications, I have bundled all the touch points into one container before sending them out through the callbacks.
I have merged to ""latest"" and then later on to ""master"", so it's up-to-date for a convenient merge (or to new feature branch) and possibly then part of 3.3 (as I saw in an issue was the plan).
I have built this branch with Visual Studio 2015 x64, XCode 8.2.1, gcc-4.8(on two linux systems).
The actual touch support is, as with your previous commits, only supporting WM_TOUCH, i.e. Windows. If desired, I could gather effort on implementing support on x11 and cocoa side.","I've updated to the latest master, and tested the result as well. As before, it is a Windows only feature at the moment.
Do you plan to merge this pull request soon, or is their something you would like me to alter first?
I would appreciate the merge as their are several projects that use SDL or Qt for simple standalone full screen applications, mainly because of touch support, and I would like these groups to use GLFW instead, as it in general just more awesome :).",True,"{'THUMBS_UP': ['https://github.com/cachekeyval', 'https://github.com/svekel'], 'HEART': ['https://github.com/cachekeyval']}"
glfw/glfw,https://github.com/glfw/glfw,955,2017-02-26T14:05:55Z,2017-11-20T21:50:57Z,2017-11-27T17:42:38Z,CLOSED,False,46,1,5,https://github.com/linkmauve,Add support for the idle-inhibit protocol,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/955,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/955,"This makes every window disable the screensaver when they are displayed, on supported compositors.
This PR has only been tested against Weston using this (as of yet unmerged) series: https://patchwork.freedesktop.org/series/4875/","This makes every window disable the screensaver when they are displayed, on supported compositors.
This PR has only been tested against Weston using this (as of yet unmerged) series: https://patchwork.freedesktop.org/series/4875/",True,{}
glfw/glfw,https://github.com/glfw/glfw,955,2017-02-26T14:05:55Z,2017-11-20T21:50:57Z,2017-11-27T17:42:38Z,CLOSED,False,46,1,5,https://github.com/linkmauve,Add support for the idle-inhibit protocol,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/955,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/955#issuecomment-282575018,"This makes every window disable the screensaver when they are displayed, on supported compositors.
This PR has only been tested against Weston using this (as of yet unmerged) series: https://patchwork.freedesktop.org/series/4875/","I like how this is an actual object on Wayland.
Note that only non-iconified full screen windows should inhibit the screensaver, currently.",True,{}
glfw/glfw,https://github.com/glfw/glfw,955,2017-02-26T14:05:55Z,2017-11-20T21:50:57Z,2017-11-27T17:42:38Z,CLOSED,False,46,1,5,https://github.com/linkmauve,Add support for the idle-inhibit protocol,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/955,https://github.com/jadahl,3,https://github.com/glfw/glfw/pull/955#issuecomment-284117000,"This makes every window disable the screensaver when they are displayed, on supported compositors.
This PR has only been tested against Weston using this (as of yet unmerged) series: https://patchwork.freedesktop.org/series/4875/","The inhibitation protocol is designed so that only visible surfaces will affect idle inhibitation, so there is no need to deal with being iconified vs non-iconified.",True,{}
glfw/glfw,https://github.com/glfw/glfw,955,2017-02-26T14:05:55Z,2017-11-20T21:50:57Z,2017-11-27T17:42:38Z,CLOSED,False,46,1,5,https://github.com/linkmauve,Add support for the idle-inhibit protocol,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/955,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/955#issuecomment-345126059,"This makes every window disable the screensaver when they are displayed, on supported compositors.
This PR has only been tested against Weston using this (as of yet unmerged) series: https://patchwork.freedesktop.org/series/4875/","Hi, I fixed all of the comments, this should be good to go now.",True,{}
glfw/glfw,https://github.com/glfw/glfw,963,2017-03-07T14:21:30Z,2017-03-07T18:24:32Z,2017-03-07T18:32:43Z,MERGED,True,11,12,1,https://github.com/tombsar,Handle X11 Selection* events despite NULL window,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/963,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/963,"processEvent in x11_window.c currently discards events that can not be mapped to a current GLFW window. However, this breaks clipboard functionality by failing to respond to SelectionRequest and SelectionClear events.
This commit moves processing of these important clipboard events to before the NULL window test so that they are always considered.
Fixes #961 (tentatively; there is probably an underlying structural change to be made that fixes this properly).","processEvent in x11_window.c currently discards events that can not be mapped to a current GLFW window. However, this breaks clipboard functionality by failing to respond to SelectionRequest and SelectionClear events.
This commit moves processing of these important clipboard events to before the NULL window test so that they are always considered.
Fixes #961 (tentatively; there is probably an underlying structural change to be made that fixes this properly).",True,{}
glfw/glfw,https://github.com/glfw/glfw,963,2017-03-07T14:21:30Z,2017-03-07T18:24:32Z,2017-03-07T18:32:43Z,MERGED,True,11,12,1,https://github.com/tombsar,Handle X11 Selection* events despite NULL window,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/963,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/963#issuecomment-284811273,"processEvent in x11_window.c currently discards events that can not be mapped to a current GLFW window. However, this breaks clipboard functionality by failing to respond to SelectionRequest and SelectionClear events.
This commit moves processing of these important clipboard events to before the NULL window test so that they are always considered.
Fixes #961 (tentatively; there is probably an underlying structural change to be made that fixes this properly).","Thank you, looks good! Merged with minor commit message tweaks.",True,{'HOORAY': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,973,2017-03-18T10:59:16Z,2017-08-18T12:49:35Z,2017-08-18T14:01:52Z,CLOSED,False,308,2,2,https://github.com/zholos,add input lag test,2,['enhancement'],https://github.com/glfw/glfw/pull/973,https://github.com/zholos,1,https://github.com/glfw/glfw/pull/973,"This is a new test program – tests/inputlag.c – to measure input lag, i.e. the time between new input being polled and it's effect getting displayed.

It renders a marker at the cursor position reported by GLFW so you can see how much it lags behind the hardware mouse cursor, as well as forecasts for 1-3 frames ahead based on mouse movement speed to get an exact measurement of lag in frames. E.g. in the screenshot input lag is 1 frame.
The main purpose is to find the best way to write a main loop with vsync enabled and CPU as well as GPU synchronized to it, so that input lag is bounded at 1 frame. I think for games this is a good balance of reasonably low input lag and no tearing. But by default the CPU is not synchronized (glfwSwapBuffers is non-blocking), so the CPU can queue up too many frames that become stale by the time they're displayed. Consider this main loop:
glfwSwapInterval(1);
while (!glfwWindowShouldClose(window))
{
    render();
    glfwSwapBuffers(window);
    glfwPollEvents();
}
The timing of these calls on a 60 Hz monitor might be:
render();                // t=0.000
glfwSwapBuffers(window); // t=0.001, enqueues frame to be displayed at t=0.017, doesn't block
glfwPollEvents();        // t=0.002
render();                // t=0.003, blocks when command queue fills up until t=0.017
glfwSwapBuffers(window); // t=0.018, enqueues frame to be displayed at t=0.033
glfwPollEvents();        // t=0.019
Notice that the input we polled at t=0.002 only gets displayed at t=0.033 – almost 2 frames of input lag for no benefit!
The OpenGL wiki page Swap Interval recommends using glFinish after swapping buffers to achieve what I'm trying to do, but I've found that it doesn't always work. This test allows trying a couple of other methods to force synchronization, in particular fetching results from an occlusion query.
Besides this, it's a test for input handling. For instance, I've found that on X11 data comes through glfwSetCursorPosCallback a bit late compared to the synchronous glfwGetCursorPos.
And it can be used to test any future features that help reduce input lag. A good candidate is a function to expose GLX_NV_delay_before_swap.
I used code from tests/tearing.c and tests/gamma.c as a basis.
Some observations from the test so far:

disabling vsync makes input lag 0 on X11 and in fullscreen mode on Windows
enabling vsync with glFinish on an Nvidia GPU makes input lag 1 frame
enabling vsync without glFinish makes input lag 2 frames (as in the timing example above)
glFinish doesn't work for this purpose on an Intel GPU, but fetching results from an occlusion query does
enabling compositing in the window manager adds 1 frame of input lag","This is a new test program – tests/inputlag.c – to measure input lag, i.e. the time between new input being polled and it's effect getting displayed.

It renders a marker at the cursor position reported by GLFW so you can see how much it lags behind the hardware mouse cursor, as well as forecasts for 1-3 frames ahead based on mouse movement speed to get an exact measurement of lag in frames. E.g. in the screenshot input lag is 1 frame.
The main purpose is to find the best way to write a main loop with vsync enabled and CPU as well as GPU synchronized to it, so that input lag is bounded at 1 frame. I think for games this is a good balance of reasonably low input lag and no tearing. But by default the CPU is not synchronized (glfwSwapBuffers is non-blocking), so the CPU can queue up too many frames that become stale by the time they're displayed. Consider this main loop:
glfwSwapInterval(1);
while (!glfwWindowShouldClose(window))
{
    render();
    glfwSwapBuffers(window);
    glfwPollEvents();
}
The timing of these calls on a 60 Hz monitor might be:
render();                // t=0.000
glfwSwapBuffers(window); // t=0.001, enqueues frame to be displayed at t=0.017, doesn't block
glfwPollEvents();        // t=0.002
render();                // t=0.003, blocks when command queue fills up until t=0.017
glfwSwapBuffers(window); // t=0.018, enqueues frame to be displayed at t=0.033
glfwPollEvents();        // t=0.019
Notice that the input we polled at t=0.002 only gets displayed at t=0.033 – almost 2 frames of input lag for no benefit!
The OpenGL wiki page Swap Interval recommends using glFinish after swapping buffers to achieve what I'm trying to do, but I've found that it doesn't always work. This test allows trying a couple of other methods to force synchronization, in particular fetching results from an occlusion query.
Besides this, it's a test for input handling. For instance, I've found that on X11 data comes through glfwSetCursorPosCallback a bit late compared to the synchronous glfwGetCursorPos.
And it can be used to test any future features that help reduce input lag. A good candidate is a function to expose GLX_NV_delay_before_swap.
I used code from tests/tearing.c and tests/gamma.c as a basis.
Some observations from the test so far:

disabling vsync makes input lag 0 on X11 and in fullscreen mode on Windows
enabling vsync with glFinish on an Nvidia GPU makes input lag 1 frame
enabling vsync without glFinish makes input lag 2 frames (as in the timing example above)
glFinish doesn't work for this purpose on an Intel GPU, but fetching results from an occlusion query does
enabling compositing in the window manager adds 1 frame of input lag",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,973,2017-03-18T10:59:16Z,2017-08-18T12:49:35Z,2017-08-18T14:01:52Z,CLOSED,False,308,2,2,https://github.com/zholos,add input lag test,2,['enhancement'],https://github.com/glfw/glfw/pull/973,https://github.com/dmitshur,2,https://github.com/glfw/glfw/pull/973#issuecomment-287557049,"This is a new test program – tests/inputlag.c – to measure input lag, i.e. the time between new input being polled and it's effect getting displayed.

It renders a marker at the cursor position reported by GLFW so you can see how much it lags behind the hardware mouse cursor, as well as forecasts for 1-3 frames ahead based on mouse movement speed to get an exact measurement of lag in frames. E.g. in the screenshot input lag is 1 frame.
The main purpose is to find the best way to write a main loop with vsync enabled and CPU as well as GPU synchronized to it, so that input lag is bounded at 1 frame. I think for games this is a good balance of reasonably low input lag and no tearing. But by default the CPU is not synchronized (glfwSwapBuffers is non-blocking), so the CPU can queue up too many frames that become stale by the time they're displayed. Consider this main loop:
glfwSwapInterval(1);
while (!glfwWindowShouldClose(window))
{
    render();
    glfwSwapBuffers(window);
    glfwPollEvents();
}
The timing of these calls on a 60 Hz monitor might be:
render();                // t=0.000
glfwSwapBuffers(window); // t=0.001, enqueues frame to be displayed at t=0.017, doesn't block
glfwPollEvents();        // t=0.002
render();                // t=0.003, blocks when command queue fills up until t=0.017
glfwSwapBuffers(window); // t=0.018, enqueues frame to be displayed at t=0.033
glfwPollEvents();        // t=0.019
Notice that the input we polled at t=0.002 only gets displayed at t=0.033 – almost 2 frames of input lag for no benefit!
The OpenGL wiki page Swap Interval recommends using glFinish after swapping buffers to achieve what I'm trying to do, but I've found that it doesn't always work. This test allows trying a couple of other methods to force synchronization, in particular fetching results from an occlusion query.
Besides this, it's a test for input handling. For instance, I've found that on X11 data comes through glfwSetCursorPosCallback a bit late compared to the synchronous glfwGetCursorPos.
And it can be used to test any future features that help reduce input lag. A good candidate is a function to expose GLX_NV_delay_before_swap.
I used code from tests/tearing.c and tests/gamma.c as a basis.
Some observations from the test so far:

disabling vsync makes input lag 0 on X11 and in fullscreen mode on Windows
enabling vsync with glFinish on an Nvidia GPU makes input lag 1 frame
enabling vsync without glFinish makes input lag 2 frames (as in the timing example above)
glFinish doesn't work for this purpose on an Intel GPU, but fetching results from an occlusion query does
enabling compositing in the window manager adds 1 frame of input lag","I have no comments on whether this belongs here (@elmindreda will know better), but I just wanted to say this is very interesting, thank you for sharing. 👍",True,{}
glfw/glfw,https://github.com/glfw/glfw,973,2017-03-18T10:59:16Z,2017-08-18T12:49:35Z,2017-08-18T14:01:52Z,CLOSED,False,308,2,2,https://github.com/zholos,add input lag test,2,['enhancement'],https://github.com/glfw/glfw/pull/973,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/973#issuecomment-291481702,"This is a new test program – tests/inputlag.c – to measure input lag, i.e. the time between new input being polled and it's effect getting displayed.

It renders a marker at the cursor position reported by GLFW so you can see how much it lags behind the hardware mouse cursor, as well as forecasts for 1-3 frames ahead based on mouse movement speed to get an exact measurement of lag in frames. E.g. in the screenshot input lag is 1 frame.
The main purpose is to find the best way to write a main loop with vsync enabled and CPU as well as GPU synchronized to it, so that input lag is bounded at 1 frame. I think for games this is a good balance of reasonably low input lag and no tearing. But by default the CPU is not synchronized (glfwSwapBuffers is non-blocking), so the CPU can queue up too many frames that become stale by the time they're displayed. Consider this main loop:
glfwSwapInterval(1);
while (!glfwWindowShouldClose(window))
{
    render();
    glfwSwapBuffers(window);
    glfwPollEvents();
}
The timing of these calls on a 60 Hz monitor might be:
render();                // t=0.000
glfwSwapBuffers(window); // t=0.001, enqueues frame to be displayed at t=0.017, doesn't block
glfwPollEvents();        // t=0.002
render();                // t=0.003, blocks when command queue fills up until t=0.017
glfwSwapBuffers(window); // t=0.018, enqueues frame to be displayed at t=0.033
glfwPollEvents();        // t=0.019
Notice that the input we polled at t=0.002 only gets displayed at t=0.033 – almost 2 frames of input lag for no benefit!
The OpenGL wiki page Swap Interval recommends using glFinish after swapping buffers to achieve what I'm trying to do, but I've found that it doesn't always work. This test allows trying a couple of other methods to force synchronization, in particular fetching results from an occlusion query.
Besides this, it's a test for input handling. For instance, I've found that on X11 data comes through glfwSetCursorPosCallback a bit late compared to the synchronous glfwGetCursorPos.
And it can be used to test any future features that help reduce input lag. A good candidate is a function to expose GLX_NV_delay_before_swap.
I used code from tests/tearing.c and tests/gamma.c as a basis.
Some observations from the test so far:

disabling vsync makes input lag 0 on X11 and in fullscreen mode on Windows
enabling vsync with glFinish on an Nvidia GPU makes input lag 1 frame
enabling vsync without glFinish makes input lag 2 frames (as in the timing example above)
glFinish doesn't work for this purpose on an Intel GPU, but fetching results from an occlusion query does
enabling compositing in the window manager adds 1 frame of input lag",This is really nifty! I'll be merging it into the Nuklear rewrite of tests/cursor.c.,True,{}
glfw/glfw,https://github.com/glfw/glfw,973,2017-03-18T10:59:16Z,2017-08-18T12:49:35Z,2017-08-18T14:01:52Z,CLOSED,False,308,2,2,https://github.com/zholos,add input lag test,2,['enhancement'],https://github.com/glfw/glfw/pull/973,https://github.com/zholos,4,https://github.com/glfw/glfw/pull/973#issuecomment-292284060,"This is a new test program – tests/inputlag.c – to measure input lag, i.e. the time between new input being polled and it's effect getting displayed.

It renders a marker at the cursor position reported by GLFW so you can see how much it lags behind the hardware mouse cursor, as well as forecasts for 1-3 frames ahead based on mouse movement speed to get an exact measurement of lag in frames. E.g. in the screenshot input lag is 1 frame.
The main purpose is to find the best way to write a main loop with vsync enabled and CPU as well as GPU synchronized to it, so that input lag is bounded at 1 frame. I think for games this is a good balance of reasonably low input lag and no tearing. But by default the CPU is not synchronized (glfwSwapBuffers is non-blocking), so the CPU can queue up too many frames that become stale by the time they're displayed. Consider this main loop:
glfwSwapInterval(1);
while (!glfwWindowShouldClose(window))
{
    render();
    glfwSwapBuffers(window);
    glfwPollEvents();
}
The timing of these calls on a 60 Hz monitor might be:
render();                // t=0.000
glfwSwapBuffers(window); // t=0.001, enqueues frame to be displayed at t=0.017, doesn't block
glfwPollEvents();        // t=0.002
render();                // t=0.003, blocks when command queue fills up until t=0.017
glfwSwapBuffers(window); // t=0.018, enqueues frame to be displayed at t=0.033
glfwPollEvents();        // t=0.019
Notice that the input we polled at t=0.002 only gets displayed at t=0.033 – almost 2 frames of input lag for no benefit!
The OpenGL wiki page Swap Interval recommends using glFinish after swapping buffers to achieve what I'm trying to do, but I've found that it doesn't always work. This test allows trying a couple of other methods to force synchronization, in particular fetching results from an occlusion query.
Besides this, it's a test for input handling. For instance, I've found that on X11 data comes through glfwSetCursorPosCallback a bit late compared to the synchronous glfwGetCursorPos.
And it can be used to test any future features that help reduce input lag. A good candidate is a function to expose GLX_NV_delay_before_swap.
I used code from tests/tearing.c and tests/gamma.c as a basis.
Some observations from the test so far:

disabling vsync makes input lag 0 on X11 and in fullscreen mode on Windows
enabling vsync with glFinish on an Nvidia GPU makes input lag 1 frame
enabling vsync without glFinish makes input lag 2 frames (as in the timing example above)
glFinish doesn't work for this purpose on an Intel GPU, but fetching results from an occlusion query does
enabling compositing in the window manager adds 1 frame of input lag",Great!,True,{}
glfw/glfw,https://github.com/glfw/glfw,973,2017-03-18T10:59:16Z,2017-08-18T12:49:35Z,2017-08-18T14:01:52Z,CLOSED,False,308,2,2,https://github.com/zholos,add input lag test,2,['enhancement'],https://github.com/glfw/glfw/pull/973,https://github.com/dmitshur,5,https://github.com/glfw/glfw/pull/973#issuecomment-323362123,"This is a new test program – tests/inputlag.c – to measure input lag, i.e. the time between new input being polled and it's effect getting displayed.

It renders a marker at the cursor position reported by GLFW so you can see how much it lags behind the hardware mouse cursor, as well as forecasts for 1-3 frames ahead based on mouse movement speed to get an exact measurement of lag in frames. E.g. in the screenshot input lag is 1 frame.
The main purpose is to find the best way to write a main loop with vsync enabled and CPU as well as GPU synchronized to it, so that input lag is bounded at 1 frame. I think for games this is a good balance of reasonably low input lag and no tearing. But by default the CPU is not synchronized (glfwSwapBuffers is non-blocking), so the CPU can queue up too many frames that become stale by the time they're displayed. Consider this main loop:
glfwSwapInterval(1);
while (!glfwWindowShouldClose(window))
{
    render();
    glfwSwapBuffers(window);
    glfwPollEvents();
}
The timing of these calls on a 60 Hz monitor might be:
render();                // t=0.000
glfwSwapBuffers(window); // t=0.001, enqueues frame to be displayed at t=0.017, doesn't block
glfwPollEvents();        // t=0.002
render();                // t=0.003, blocks when command queue fills up until t=0.017
glfwSwapBuffers(window); // t=0.018, enqueues frame to be displayed at t=0.033
glfwPollEvents();        // t=0.019
Notice that the input we polled at t=0.002 only gets displayed at t=0.033 – almost 2 frames of input lag for no benefit!
The OpenGL wiki page Swap Interval recommends using glFinish after swapping buffers to achieve what I'm trying to do, but I've found that it doesn't always work. This test allows trying a couple of other methods to force synchronization, in particular fetching results from an occlusion query.
Besides this, it's a test for input handling. For instance, I've found that on X11 data comes through glfwSetCursorPosCallback a bit late compared to the synchronous glfwGetCursorPos.
And it can be used to test any future features that help reduce input lag. A good candidate is a function to expose GLX_NV_delay_before_swap.
I used code from tests/tearing.c and tests/gamma.c as a basis.
Some observations from the test so far:

disabling vsync makes input lag 0 on X11 and in fullscreen mode on Windows
enabling vsync with glFinish on an Nvidia GPU makes input lag 1 frame
enabling vsync without glFinish makes input lag 2 frames (as in the timing example above)
glFinish doesn't work for this purpose on an Intel GPU, but fetching results from an occlusion query does
enabling compositing in the window manager adds 1 frame of input lag","I wanted to share this relevant article https://www.blurbusters.com/4k-120hz-with-bonus-240hz-and-480hz-modes/. For anyone interested in this topic, it should be a fascinating read.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/gracicot']}"
glfw/glfw,https://github.com/glfw/glfw,979,2017-03-29T19:43:15Z,2017-03-30T00:25:56Z,2017-03-30T13:26:07Z,CLOSED,False,229,212,7,https://github.com/BrandonSchaefer,Get ready for Mir 1.0 by cleaning up deprecations,4,['Mir'],https://github.com/glfw/glfw/pull/979,https://github.com/BrandonSchaefer,1,https://github.com/glfw/glfw/pull/979,"Quite a removal. Then main diff +/- is changing the name of MirSurface to MirWindow.
As well as the display config change from using a defined structure to an opaque pointer. As well as other minor changes.
Cleaned up CMake so we can force only mir 0.26.2 or greater will be allowed to be compiled against.
There was a change to a public header MirSurface -> MirWindow but those are both opaque
Fixed a pthread bug where it was only  if (emptyEventQueue(_glfw.mir.eventQueue)) before checking the cond, but the cond might return but not be done. So changed to a while to ensure we only ever move out when we are actually done.
Fixed the cursor animation, was completely wrong and now its better!","Quite a removal. Then main diff +/- is changing the name of MirSurface to MirWindow.
As well as the display config change from using a defined structure to an opaque pointer. As well as other minor changes.
Cleaned up CMake so we can force only mir 0.26.2 or greater will be allowed to be compiled against.
There was a change to a public header MirSurface -> MirWindow but those are both opaque
Fixed a pthread bug where it was only  if (emptyEventQueue(_glfw.mir.eventQueue)) before checking the cond, but the cond might return but not be done. So changed to a while to ensure we only ever move out when we are actually done.
Fixed the cursor animation, was completely wrong and now its better!",True,{}
glfw/glfw,https://github.com/glfw/glfw,979,2017-03-29T19:43:15Z,2017-03-30T00:25:56Z,2017-03-30T13:26:07Z,CLOSED,False,229,212,7,https://github.com/BrandonSchaefer,Get ready for Mir 1.0 by cleaning up deprecations,4,['Mir'],https://github.com/glfw/glfw/pull/979,https://github.com/BrandonSchaefer,2,https://github.com/glfw/glfw/pull/979#issuecomment-290209638,"Quite a removal. Then main diff +/- is changing the name of MirSurface to MirWindow.
As well as the display config change from using a defined structure to an opaque pointer. As well as other minor changes.
Cleaned up CMake so we can force only mir 0.26.2 or greater will be allowed to be compiled against.
There was a change to a public header MirSurface -> MirWindow but those are both opaque
Fixed a pthread bug where it was only  if (emptyEventQueue(_glfw.mir.eventQueue)) before checking the cond, but the cond might return but not be done. So changed to a while to ensure we only ever move out when we are actually done.
Fixed the cursor animation, was completely wrong and now its better!","Also note you'll need 16.04 plus this ppa to test https://launchpad.net/~ci-train-ppa-service/+archive/ubuntu/stable-phone-overlay
Or 17.04! Ive tested on my machine that all the text programs + examples were working (that are supported)",True,{}
glfw/glfw,https://github.com/glfw/glfw,979,2017-03-29T19:43:15Z,2017-03-30T00:25:56Z,2017-03-30T13:26:07Z,CLOSED,False,229,212,7,https://github.com/BrandonSchaefer,Get ready for Mir 1.0 by cleaning up deprecations,4,['Mir'],https://github.com/glfw/glfw/pull/979,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/979#issuecomment-290210828,"Quite a removal. Then main diff +/- is changing the name of MirSurface to MirWindow.
As well as the display config change from using a defined structure to an opaque pointer. As well as other minor changes.
Cleaned up CMake so we can force only mir 0.26.2 or greater will be allowed to be compiled against.
There was a change to a public header MirSurface -> MirWindow but those are both opaque
Fixed a pthread bug where it was only  if (emptyEventQueue(_glfw.mir.eventQueue)) before checking the cond, but the cond might return but not be done. So changed to a while to ensure we only ever move out when we are actually done.
Fixed the cursor animation, was completely wrong and now its better!",What about 16.10 (which is what I'm running now)?,True,{}
glfw/glfw,https://github.com/glfw/glfw,979,2017-03-29T19:43:15Z,2017-03-30T00:25:56Z,2017-03-30T13:26:07Z,CLOSED,False,229,212,7,https://github.com/BrandonSchaefer,Get ready for Mir 1.0 by cleaning up deprecations,4,['Mir'],https://github.com/glfw/glfw/pull/979,https://github.com/BrandonSchaefer,4,https://github.com/glfw/glfw/pull/979#issuecomment-290238899,"Quite a removal. Then main diff +/- is changing the name of MirSurface to MirWindow.
As well as the display config change from using a defined structure to an opaque pointer. As well as other minor changes.
Cleaned up CMake so we can force only mir 0.26.2 or greater will be allowed to be compiled against.
There was a change to a public header MirSurface -> MirWindow but those are both opaque
Fixed a pthread bug where it was only  if (emptyEventQueue(_glfw.mir.eventQueue)) before checking the cond, but the cond might return but not be done. So changed to a while to ensure we only ever move out when we are actually done.
Fixed the cursor animation, was completely wrong and now its better!","Sadly no, we didnt end up releasing mir 0.26* for 16.10 (only to the ppa for the LTS and 17.04). I can look at getting a ppa setup for you for 16.10 though, unless yakkety has something broken in it!",True,{}
glfw/glfw,https://github.com/glfw/glfw,979,2017-03-29T19:43:15Z,2017-03-30T00:25:56Z,2017-03-30T13:26:07Z,CLOSED,False,229,212,7,https://github.com/BrandonSchaefer,Get ready for Mir 1.0 by cleaning up deprecations,4,['Mir'],https://github.com/glfw/glfw/pull/979,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/979#issuecomment-290273443,"Quite a removal. Then main diff +/- is changing the name of MirSurface to MirWindow.
As well as the display config change from using a defined structure to an opaque pointer. As well as other minor changes.
Cleaned up CMake so we can force only mir 0.26.2 or greater will be allowed to be compiled against.
There was a change to a public header MirSurface -> MirWindow but those are both opaque
Fixed a pthread bug where it was only  if (emptyEventQueue(_glfw.mir.eventQueue)) before checking the cond, but the cond might return but not be done. So changed to a while to ensure we only ever move out when we are actually done.
Fixed the cursor animation, was completely wrong and now its better!",If it's not a hassle; otherwise I'll wait until 17.04 is out. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,979,2017-03-29T19:43:15Z,2017-03-30T00:25:56Z,2017-03-30T13:26:07Z,CLOSED,False,229,212,7,https://github.com/BrandonSchaefer,Get ready for Mir 1.0 by cleaning up deprecations,4,['Mir'],https://github.com/glfw/glfw/pull/979,https://github.com/BrandonSchaefer,6,https://github.com/glfw/glfw/pull/979#issuecomment-290297685,"Quite a removal. Then main diff +/- is changing the name of MirSurface to MirWindow.
As well as the display config change from using a defined structure to an opaque pointer. As well as other minor changes.
Cleaned up CMake so we can force only mir 0.26.2 or greater will be allowed to be compiled against.
There was a change to a public header MirSurface -> MirWindow but those are both opaque
Fixed a pthread bug where it was only  if (emptyEventQueue(_glfw.mir.eventQueue)) before checking the cond, but the cond might return but not be done. So changed to a while to ensure we only ever move out when we are actually done.
Fixed the cursor animation, was completely wrong and now its better!","It appears to have built:
https://launchpad.net/~brandontschaefer/+archive/ubuntu/mir-testing
Just in case ppa-purge is nice to clear out bad ppas. Not sure if everything in yakkety is up to date enough. Though it should be!",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,979,2017-03-29T19:43:15Z,2017-03-30T00:25:56Z,2017-03-30T13:26:07Z,CLOSED,False,229,212,7,https://github.com/BrandonSchaefer,Get ready for Mir 1.0 by cleaning up deprecations,4,['Mir'],https://github.com/glfw/glfw/pull/979,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/979#issuecomment-290409747,"Quite a removal. Then main diff +/- is changing the name of MirSurface to MirWindow.
As well as the display config change from using a defined structure to an opaque pointer. As well as other minor changes.
Cleaned up CMake so we can force only mir 0.26.2 or greater will be allowed to be compiled against.
There was a change to a public header MirSurface -> MirWindow but those are both opaque
Fixed a pthread bug where it was only  if (emptyEventQueue(_glfw.mir.eventQueue)) before checking the cond, but the cond might return but not be done. So changed to a while to ensure we only ever move out when we are actually done.
Fixed the cursor animation, was completely wrong and now its better!",It builds perfectly. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,983,2017-04-05T11:14:42Z,2017-05-17T20:28:18Z,2017-05-17T20:28:18Z,CLOSED,False,92,6,2,https://github.com/db47h,Make glfwGetKeyName always return UTF8 key names,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/983,https://github.com/db47h,1,https://github.com/glfw/glfw/pull/983,"Fixes #981.
I could not find a non-combining symbol for some dead keys. For these, I put in the corresponding combining symbol, but left the entries commented out. We could either:

leave them out (they do not seem to be mapped to level 1 on any keyboard layout, so this should not be an issue).
return the combining symbol as-is. It would be up to the programmer to make sure that they display properly. They are all in the Combining Diacritical Marks Unicode block (0x0300-0x036F).
precede them with a space in the returned value from glfwGetKeyName().","Fixes #981.
I could not find a non-combining symbol for some dead keys. For these, I put in the corresponding combining symbol, but left the entries commented out. We could either:

leave them out (they do not seem to be mapped to level 1 on any keyboard layout, so this should not be an issue).
return the combining symbol as-is. It would be up to the programmer to make sure that they display properly. They are all in the Combining Diacritical Marks Unicode block (0x0300-0x036F).
precede them with a space in the returned value from glfwGetKeyName().",True,{}
glfw/glfw,https://github.com/glfw/glfw,983,2017-04-05T11:14:42Z,2017-05-17T20:28:18Z,2017-05-17T20:28:18Z,CLOSED,False,92,6,2,https://github.com/db47h,Make glfwGetKeyName always return UTF8 key names,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/983,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/983#issuecomment-292544073,"Fixes #981.
I could not find a non-combining symbol for some dead keys. For these, I put in the corresponding combining symbol, but left the entries commented out. We could either:

leave them out (they do not seem to be mapped to level 1 on any keyboard layout, so this should not be an issue).
return the combining symbol as-is. It would be up to the programmer to make sure that they display properly. They are all in the Combining Diacritical Marks Unicode block (0x0300-0x036F).
precede them with a space in the returned value from glfwGetKeyName().","That looks really promising! I have a holiday coming up, but I'll review and test as soon as I can.",True,{}
glfw/glfw,https://github.com/glfw/glfw,985,2017-04-06T14:10:16Z,2017-05-16T13:47:04Z,2017-05-16T16:15:35Z,CLOSED,False,28,26,2,https://github.com/kkaefer,Fix EGL support,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/985,https://github.com/kkaefer,1,https://github.com/glfw/glfw/pull/985,"This adds support for using GLFW with EGL backends on macOS. While EGL isn't available by default on macOS, there are third-party implementations like SwiftShader.
EGL is typically used in conjunction with OpenGL ES, so we're now preferring inclusion of these headers when GLFW_INCLUDE_ES* is defined by moving them before the #if __APPLE__ check.
Additionally, the addition of MoltenVK support added an override to makeBackingLayer. In non-Vulkan mode, this means that we are returning nil from that function. The NSGL implementation apparently creates this layer manually later on, but other OpenGL backends don't necessarily do that.","This adds support for using GLFW with EGL backends on macOS. While EGL isn't available by default on macOS, there are third-party implementations like SwiftShader.
EGL is typically used in conjunction with OpenGL ES, so we're now preferring inclusion of these headers when GLFW_INCLUDE_ES* is defined by moving them before the #if __APPLE__ check.
Additionally, the addition of MoltenVK support added an override to makeBackingLayer. In non-Vulkan mode, this means that we are returning nil from that function. The NSGL implementation apparently creates this layer manually later on, but other OpenGL backends don't necessarily do that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,985,2017-04-06T14:10:16Z,2017-05-16T13:47:04Z,2017-05-16T16:15:35Z,CLOSED,False,28,26,2,https://github.com/kkaefer,Fix EGL support,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/985,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/985#issuecomment-292203412,"This adds support for using GLFW with EGL backends on macOS. While EGL isn't available by default on macOS, there are third-party implementations like SwiftShader.
EGL is typically used in conjunction with OpenGL ES, so we're now preferring inclusion of these headers when GLFW_INCLUDE_ES* is defined by moving them before the #if __APPLE__ check.
Additionally, the addition of MoltenVK support added an override to makeBackingLayer. In non-Vulkan mode, this means that we are returning nil from that function. The NSGL implementation apparently creates this layer manually later on, but other OpenGL backends don't necessarily do that.","Thank you, will review.",True,{}
glfw/glfw,https://github.com/glfw/glfw,985,2017-04-06T14:10:16Z,2017-05-16T13:47:04Z,2017-05-16T16:15:35Z,CLOSED,False,28,26,2,https://github.com/kkaefer,Fix EGL support,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/985,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/985#issuecomment-301788990,"This adds support for using GLFW with EGL backends on macOS. While EGL isn't available by default on macOS, there are third-party implementations like SwiftShader.
EGL is typically used in conjunction with OpenGL ES, so we're now preferring inclusion of these headers when GLFW_INCLUDE_ES* is defined by moving them before the #if __APPLE__ check.
Additionally, the addition of MoltenVK support added an override to makeBackingLayer. In non-Vulkan mode, this means that we are returning nil from that function. The NSGL implementation apparently creates this layer manually later on, but other OpenGL backends don't necessarily do that.","Oops, forgot to update my local pull request branch and didn't merge your updated version. Sorry about that.
This has been merged as d1d08ef and 244d6d7 with additional cleanup in 018ae69 and fa0b5e1.",True,{'HOORAY': ['https://github.com/kkaefer']}
glfw/glfw,https://github.com/glfw/glfw,987,2017-04-06T21:49:19Z,,2018-02-26T15:09:18Z,OPEN,False,84,0,11,https://github.com/felselva,Add support for drag operation on borderless window,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/987,https://github.com/felselva,1,https://github.com/glfw/glfw/pull/987,"Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.","Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.",True,"{'LAUGH': ['https://github.com/lochnessdragon'], 'THUMBS_UP': ['https://github.com/lochnessdragon']}"
glfw/glfw,https://github.com/glfw/glfw,987,2017-04-06T21:49:19Z,,2018-02-26T15:09:18Z,OPEN,False,84,0,11,https://github.com/felselva,Add support for drag operation on borderless window,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/987,https://github.com/felselva,2,https://github.com/glfw/glfw/pull/987#issuecomment-292368849,"Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.","The Travis-CI report:
...
[ 15%] Linking C shared library libglfw.dylib
Undefined symbols for architecture x86_64:
  ""__glfwPlatformDragWindow"", referenced from:
      _glfwDragWindow in window.c.o

ld: symbol(s) not found for architecture x86_64

Should I make an empty definition of _glfwPlatformDragWindow on cocoa_window.m while the implementation for those platforms aren't still done? Example:
void _glfwPlatformDragWindow(_GLFWwindow* window)
{
}

Or is there another way?",True,{}
glfw/glfw,https://github.com/glfw/glfw,987,2017-04-06T21:49:19Z,,2018-02-26T15:09:18Z,OPEN,False,84,0,11,https://github.com/felselva,Add support for drag operation on borderless window,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/987,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/987#issuecomment-292369240,"Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.","Yes, always add stubs to all backends when creating a new platform function.",True,{'THUMBS_UP': ['https://github.com/felselva']}
glfw/glfw,https://github.com/glfw/glfw,987,2017-04-06T21:49:19Z,,2018-02-26T15:09:18Z,OPEN,False,84,0,11,https://github.com/felselva,Add support for drag operation on borderless window,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/987,https://github.com/felselva,4,https://github.com/glfw/glfw/pull/987#issuecomment-292695383,"Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.",The Wayland implementation is fixed by #992.,True,{}
glfw/glfw,https://github.com/glfw/glfw,987,2017-04-06T21:49:19Z,,2018-02-26T15:09:18Z,OPEN,False,84,0,11,https://github.com/felselva,Add support for drag operation on borderless window,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/987,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/987#issuecomment-292791145,"Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.","This is a much nicer interface than what I had in mind. 👍
I won't be able to review this properly until Thursday at the earliest. In the meantime, movable​By​Window​Background may be of use on macOS.",True,"{'THUMBS_UP': ['https://github.com/felselva', 'https://github.com/Playermet']}"
glfw/glfw,https://github.com/glfw/glfw,987,2017-04-06T21:49:19Z,,2018-02-26T15:09:18Z,OPEN,False,84,0,11,https://github.com/felselva,Add support for drag operation on borderless window,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/987,https://github.com/felselva,6,https://github.com/glfw/glfw/pull/987#issuecomment-292811782,"Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.","I won't be able to review this properly until Thursday at the earliest.

No worries.

In the meantime, movable​By​Window​Background may be of use on macOS.

I was thinking about that one (there's even other property called mouseDownCanMoveWindow), but the behaviour is different compared with Linux/Windows. The Linux/Windows lets you do this:
/* Drag window only on the customized top bar */
if (cursor_y < 20) {
    glfwDragWindow(window);
}
/* or even start the drag operation using a key */
if (key == GLFW_KEY_D) {
    glfwDragWindow(window);
}
But, movable​By​Window​Background (and mouseDownCanMoveWindow) are flags (not functions that start an operation) that if the user clicks anywhere (and only works with mouse click), the window will still be draggable:
if (cursor_y < 20) {
    glfwDragWindow(window);
}
/* Window still will be draggable outside of that scope, on any cursor position */
So, the macOS implementation will definitelly be hacky (if we do it). My suggestion, if you don't mind, is to leave this patch only with the X11/Wayland/Windows implementation, and I could work on other PR with the macOS implementation.",True,{}
glfw/glfw,https://github.com/glfw/glfw,987,2017-04-06T21:49:19Z,,2018-02-26T15:09:18Z,OPEN,False,84,0,11,https://github.com/felselva,Add support for drag operation on borderless window,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/987,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/987#issuecomment-320126457,"Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.",This has been staged in the drag-window branch for testing and completion.,True,{}
glfw/glfw,https://github.com/glfw/glfw,987,2017-04-06T21:49:19Z,,2018-02-26T15:09:18Z,OPEN,False,84,0,11,https://github.com/felselva,Add support for drag operation on borderless window,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/987,https://github.com/codeyash,8,https://github.com/glfw/glfw/pull/987#issuecomment-368533781,"Add a function glfwDragWindow that starts a drag operation for the specified window.
The implementation is done for X11 and Windows, and requires tests on Wayland.
This patch is related with the issue #923.",Any updates for such a nice feature,True,"{'THUMBS_UP': ['https://github.com/andsveking', 'https://github.com/Somnium7']}"
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/felselva,1,https://github.com/glfw/glfw/pull/988,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.","This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.",True,{}
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/988#issuecomment-292528641,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.","Because some platforms (read macOS) have application-level attention requests, perhaps the more neutral glfwRequestAttention would be a better name?",True,{'THUMBS_UP': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/felselva,3,https://github.com/glfw/glfw/pull/988#issuecomment-292616804,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.","I was wondering how we could approach that without breaking compatibility between platforms, since on Linux/Window, it will look like glfwRequestAttention(GLFWwindow *) and on macOS glfwRequestAttention(void).",True,{}
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/988#issuecomment-292744105,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.",Have it take a window and document that it's a hint and not guaranteed to point out the specific window.,True,{}
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/felselva,5,https://github.com/glfw/glfw/pull/988#issuecomment-292751584,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.","I've updated the function to do the following:
void _glfwPlatformRequestWindowAttention(_GLFWwindow* window)
{
    [NSApp requestUserAttention:NSInformationalRequest];
}
Also, I updated the documentation, adding a remark that on OSX the attention refers to the application, not the window.
Let me know if something is incorrect and I will fix 👍",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/988#issuecomment-292792866,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.","This looks almost ready to merge. Please don't add any test code or additional features to the simple example, though. It's mean to be just that and is used in the documentation.",True,{'THUMBS_UP': ['https://github.com/felselva']}
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/felselva,7,https://github.com/glfw/glfw/pull/988#issuecomment-292793726,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.",Do you want me to remove the added code from simple.c?,True,{}
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/elmindreda,8,https://github.com/glfw/glfw/pull/988#issuecomment-292794725,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.","Yes, please do. Instead you could for example request attention whenever the joysticks test detects a connection or disconnection.",True,{}
glfw/glfw,https://github.com/glfw/glfw,988,2017-04-06T22:54:03Z,2017-05-11T18:11:15Z,2017-05-11T18:16:30Z,CLOSED,False,74,0,12,https://github.com/felselva,Support for attention request,10,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/988,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/988#issuecomment-300873725,"This pull contains the implementation of attention request for X11.
The added function was glfwRequestWindowAttention.
The example simple.c was updated to demonstrate the functionality.
This patch is related with the issue #732.","This has been merged as 412eb6a, with additional cleanup in baa9cd8 and 2f5e230.",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/felselva,1,https://github.com/glfw/glfw/pull/989,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.",True,"{'HEART': ['https://github.com/ocornut', 'https://github.com/sitic']}"
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/989#issuecomment-292790816,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","I won't be able to review this properly until Thursday at the earliest but it looks like a solid start. _GLFWmonitorWin32 will be getting its corresponding HMONITOR soon for high DPI support, which should simplify this patch.",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/jadahl,3,https://github.com/glfw/glfw/pull/989#issuecomment-292838522,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","What is the purpose of this API? Most likely, it wont be possible to implement completely on Wayland as there is usually no valid reason for querying this type of information (since the client have no possible use for it). What could be useful though is being aware of work area size, as this can be used to determine a good default size for a new window.",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/felselva,4,https://github.com/glfw/glfw/pull/989#issuecomment-292857924,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","@jadahl The purpose is exactly to retrieve the size of the work area. I started implementing due this issue #920.
I mentioned there that Wayland in particular doesn't have the concept of work area. In my opinion, we should at least return the resolution of the screen, even if it is redundant with GLFWvidmode->width/GLFWvidmode->height, because it would give an approximate result across platforms. Also add a remark on the documentation about that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/jadahl,5,https://github.com/glfw/glfw/pull/989#issuecomment-292859795,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","The concept of work area doesn't exist yet, true, but its introduction has been requested before, by for example GTK+ that uses the work area to figure out a default window size. The position, however, will probably not be exposed, as it would serve no purpose.
What has to be considered is that it might not be useful to know any work area before knowing what monitor the window will be placed at. I expect this to be more of a compositor driven thing, as it has proven to be practically impossible to let applications them self place them in any predictable manner in a multi monitor configuration. Fullscreen is of course a different matter here, and in that case work area is irrelevant, as is with maximizing, as that is also done in a completely different way.
So, I'm still wondering, what is the purpose of this API? What is its intended use case? Is it possible make any use of the API if the client doesn't have total control of exact positioning details?",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/989#issuecomment-292978482,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","So, I'm still wondering, what is the purpose of this API? What is its intended use case? Is it possible make any use of the API if the client doesn't have total control of exact positioning details?

Ping @adambrown.",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/felselva,7,https://github.com/glfw/glfw/pull/989#issuecomment-294000687,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","What has to be considered is that it might not be useful to know any work area before knowing what monitor the window will be placed at. I expect this to be more of a compositor driven thing, as it has proven to be practically impossible to let applications them self place them in any predictable manner in a multi monitor configuration. Fullscreen is of course a different matter here, and in that case work area is irrelevant, as is with maximizing, as that is also done in a completely different way.

If the window is created with GLFW_VISIBLE as FALSE, it will be placed in a monitor before showing up, then it is possible to get the monitor using glfwSetWindowMonitor. It is useful for the same purpose in GTK+ and not extrapolate the size of the window beyond the work area.",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/adambrown,8,https://github.com/glfw/glfw/pull/989#issuecomment-296379070,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","@jadahl Sorry, I've been on vacation for 3 weeks and haven't been online. The purpose of this feature is detailed here in the ticket I created: #920
This is also a possible workaround for #899
In the first usecase described there, trying to maximize an undecorated window, I suppose it wouldn't be strictly necessary to know which display it would end up on the first time. Although right now in my app I am determining the display for the window based on the current location of the mouse at init on first run unless there is a saved positioning configuration matching the current display setup. Or in other words, I check the count, size and relative positioning of the displays to see if I have a saved window position and size for that layout. If I don't have a stored position and size for the matching display layout then I put the window at a default small size in the center of the display the mouse is on. Most of this work I have to do with Java AWT right now because GLFW doesn't allow me to have all the data I need, such as the mouse location, without creating a window. The reason for doing it this way is that if you have a laptop that you take from home to work, or you install the app as portable on a USB stick, and there are different monitor setups in different locations, you can have positioning information stored for all of them.
For the other usecase, trying to position notifications or other widgets, you would need to know what display you are putting the things on.
I hope that clarifies the exact purpose and intended usecase of this API.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/jadahl,9,https://github.com/glfw/glfw/pull/989#issuecomment-345629737,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","Not only is no Wayland implementation possible at the moment, the usefulness of it would there be one is limited, as if you try to manually ""maximize"" (just set a size equal to the work area), the window would still not be maximized, nor moved to the top-left corner.
To me, to make maximize work for undecorated windows, the only sane way would be to make glfwMaximizeWindow() do the right thing. Anything that tries to work around that function not being able to work as expected by bypassing the windowing system abstraction GLFW is trying to provide undoes exactly what GLFW is intended to do.",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/ocornut,10,https://github.com/glfw/glfw/pull/989#issuecomment-383392632,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","Hello,
Since the usefulness of this is being questioned above, may I humbly add that I also would very much like to have this API.  My framework (same project as shown in #1236) creates pop-up windows that I position precisely relative to each others, with windows protrude out of the parent window. I currently use monitor information from GLFW to avoid creating popups that straddle multiple monitors but also want to avoid ""task bars"", this is one of the reason OS export the ""work area"" information. I can do this with Win32 and SDL2 (SDL_GetDisplayUsableBounds if that's any useful) but GLFW doesn't export this information at the moment.
For my use case this PR would perfectly solve the problem, and it is fine to have a fallback that return the entire monitor region on systems like Wayland that don't know of this concept yet.
Regards,
Omar",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/dougbinks,11,https://github.com/glfw/glfw/pull/989#issuecomment-383580591,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","I concur with Omar that this is very useful outside of the now fixed glfwMaximizeWindow issue I raised, mainly for multi-window apps and those which wish to auto-layout multiple processes with non overlapping windows (my own use case).
For any platform without this concept the function can return coordinates from glfwGetMonitorPos and glfwGetVideoMode.
If the @ferreiradaselva does not have the time I can look into fixing any issues with the PR if the basic functionality requirements are approved.",True,{'THUMBS_UP': ['https://github.com/felselva']}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/felselva,12,https://github.com/glfw/glfw/pull/989#issuecomment-383601629,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","Hi, @dougbinks, feel free to work on this PR, or anyone interested!",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/jadahl,13,https://github.com/glfw/glfw/pull/989#issuecomment-383604162,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.",The fact that it cannot be made portable still remains however. What GLFW probably needs is a versatile popup placement API like the one GTK+ added.,True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/ocornut,14,https://github.com/glfw/glfw/pull/989#issuecomment-383608813,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","The fact that it cannot be made portable still remains however. What GLFW probably needs is a versatile popup placement API like the one GTK+ added.

For various reasons I would probably be unable to rely on such specific ""popup placement"" feature. I want the most low-level feature that has a comparable implementation on all major frameworks. The concept of a work area rectangle per monitor is pretty well supported across frameworks and OS and has a sane fall back any other implementation can use (return the whole screen).",True,{}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/dougbinks,15,https://github.com/glfw/glfw/pull/989#issuecomment-383611831,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","The fact that it cannot be made portable still remains however.

The fallback is portable, and makes sense where the platform does not have such a concept.
I don't think popups work for the multi-process window distribution problem, whereas the glfwGetMonitorWorkarea does.",True,{'THUMBS_UP': ['https://github.com/ocornut']}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/dougbinks,16,https://github.com/glfw/glfw/pull/989#issuecomment-419646822,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.","I have started work on resolving issues raised with this PR on my branch https://github.com/dougbinks/glfw/tree/pr-989.
Either this can be merged into this PR branch by @ferreiradaselva when I'm done or I can submit a new PR.",True,{'HEART': ['https://github.com/ocornut']}
glfw/glfw,https://github.com/glfw/glfw,989,2017-04-07T19:59:50Z,2019-03-05T19:33:59Z,2019-03-05T19:44:06Z,CLOSED,False,125,0,12,https://github.com/felselva,Add support for querying work area,6,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/989,https://github.com/elmindreda,17,https://github.com/glfw/glfw/pull/989#issuecomment-469830523,"This patch has the implementation for querying the work area on X11 and Windows.


The X11 implementation. I believe everything is done with this implementation. I tested with single monitor, but since the monitor is passed directly to the function, I don't think there will be any problem with it.


The Windows implementation. This implementation surely needs test on multiple monitors. I tested with a single monitor, and the work area retrieved was correct. However, we need to make sure that the HMONITOR that we grab the information from matches the _GLFWmonitor passed to the function.


The Cocoa implementation. The implementation for Cocoa is a draft and needs to be test and reviewed.


This patch is related to the issue #920.",This has been merged via #1322 and additional fixes.,True,{'THUMBS_UP': ['https://github.com/ocornut']}
glfw/glfw,https://github.com/glfw/glfw,991,2017-04-08T00:45:58Z,,2017-11-20T08:37:54Z,OPEN,False,185,0,8,https://github.com/felselva,Support for resize operation on borderless windows,4,"['enhancement', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/991,https://github.com/felselva,1,https://github.com/glfw/glfw/pull/991,"This patch adds the functionality to resize a borderless window, by specifying the region relative to the resize operation:

GLFW_WINDOW_LEFT
GLFW_WINDOW_TOP
GLFW_WINDOW_RIGHT
GLFW_WINDOW_BOTTOM
GLFW_WINDOW_TOPLEFT
GLFW_WINDOW_TOPRIGHT
GLFW_WINDOW_BOTTOMLEFT
GLFW_WINDOW_BOTTOMRIGHT

This is related with the issue #990.","This patch adds the functionality to resize a borderless window, by specifying the region relative to the resize operation:

GLFW_WINDOW_LEFT
GLFW_WINDOW_TOP
GLFW_WINDOW_RIGHT
GLFW_WINDOW_BOTTOM
GLFW_WINDOW_TOPLEFT
GLFW_WINDOW_TOPRIGHT
GLFW_WINDOW_BOTTOMLEFT
GLFW_WINDOW_BOTTOMRIGHT

This is related with the issue #990.",True,{}
glfw/glfw,https://github.com/glfw/glfw,991,2017-04-08T00:45:58Z,,2017-11-20T08:37:54Z,OPEN,False,185,0,8,https://github.com/felselva,Support for resize operation on borderless windows,4,"['enhancement', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/991,https://github.com/felselva,2,https://github.com/glfw/glfw/pull/991#issuecomment-292695403,"This patch adds the functionality to resize a borderless window, by specifying the region relative to the resize operation:

GLFW_WINDOW_LEFT
GLFW_WINDOW_TOP
GLFW_WINDOW_RIGHT
GLFW_WINDOW_BOTTOM
GLFW_WINDOW_TOPLEFT
GLFW_WINDOW_TOPRIGHT
GLFW_WINDOW_BOTTOMLEFT
GLFW_WINDOW_BOTTOMRIGHT

This is related with the issue #990.",The Wayland implementation is fixed by #992.,True,{}
glfw/glfw,https://github.com/glfw/glfw,992,2017-04-08T04:12:15Z,2017-04-13T01:59:49Z,2017-04-13T01:59:49Z,MERGED,True,2,0,1,https://github.com/felselva,Update serial on Wayland button callback,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/992,https://github.com/felselva,1,https://github.com/glfw/glfw/pull/992,"This is very important, because the serial used in the Wayland button callback wasn't being updated, making functions like wl_shell_surface_* useless inside the GLFW callbacks started by the Wayland backend.
The operations for moving and resizing a window using wl_shell_surface_move and wl_shell_surface_resize expect an update serial, which is fixed by this patch.
This is related to the issues #923 and #990.","This is very important, because the serial used in the Wayland button callback wasn't being updated, making functions like wl_shell_surface_* useless inside the GLFW callbacks started by the Wayland backend.
The operations for moving and resizing a window using wl_shell_surface_move and wl_shell_surface_resize expect an update serial, which is fixed by this patch.
This is related to the issues #923 and #990.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1005,2017-05-06T20:55:00Z,2017-06-15T18:07:50Z,2017-06-15T18:09:24Z,CLOSED,False,143,30,2,https://github.com/inolen,Convert Linux joystick code to using the evdev API,1,"['enhancement', 'Linux']",https://github.com/glfw/glfw/pull/1005,https://github.com/inolen,1,https://github.com/glfw/glfw/pull/1005,"Convert Linux joystick code to using the evdev API
Add support for hats on Linux

I'd recently experimented with swapping over from SDL2 to glfw and ran into the fact that hats are currently unsupported on Linux. I found a few issues on here which seem to have came to the same conclusion as myself; there is no good way to support them without converting over to the evdev API. I've done this conversion, and added support for hats.
As a disclaimer, I have no prior experience with evdev, so please triple check this change.
One concern of mine is that I'm not at all honoring the flat member from struct input_absinfo. It seems while the fuzz member is honored by the kernel, flat is expected to be handled by userspace code. However, I don't really know how exactly it should be used.","Convert Linux joystick code to using the evdev API
Add support for hats on Linux

I'd recently experimented with swapping over from SDL2 to glfw and ran into the fact that hats are currently unsupported on Linux. I found a few issues on here which seem to have came to the same conclusion as myself; there is no good way to support them without converting over to the evdev API. I've done this conversion, and added support for hats.
As a disclaimer, I have no prior experience with evdev, so please triple check this change.
One concern of mine is that I'm not at all honoring the flat member from struct input_absinfo. It seems while the fuzz member is honored by the kernel, flat is expected to be handled by userspace code. However, I don't really know how exactly it should be used.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/Zomby2D']}"
glfw/glfw,https://github.com/glfw/glfw,1005,2017-05-06T20:55:00Z,2017-06-15T18:07:50Z,2017-06-15T18:09:24Z,CLOSED,False,143,30,2,https://github.com/inolen,Convert Linux joystick code to using the evdev API,1,"['enhancement', 'Linux']",https://github.com/glfw/glfw/pull/1005,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1005#issuecomment-299674329,"Convert Linux joystick code to using the evdev API
Add support for hats on Linux

I'd recently experimented with swapping over from SDL2 to glfw and ran into the fact that hats are currently unsupported on Linux. I found a few issues on here which seem to have came to the same conclusion as myself; there is no good way to support them without converting over to the evdev API. I've done this conversion, and added support for hats.
As a disclaimer, I have no prior experience with evdev, so please triple check this change.
One concern of mine is that I'm not at all honoring the flat member from struct input_absinfo. It seems while the fuzz member is honored by the kernel, flat is expected to be handled by userspace code. However, I don't really know how exactly it should be used.","Awesome, and perfect timing! I was just about to start implementing this (see #900). Will review.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1005,2017-05-06T20:55:00Z,2017-06-15T18:07:50Z,2017-06-15T18:09:24Z,CLOSED,False,143,30,2,https://github.com/inolen,Convert Linux joystick code to using the evdev API,1,"['enhancement', 'Linux']",https://github.com/glfw/glfw/pull/1005,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1005#issuecomment-300268845,"Convert Linux joystick code to using the evdev API
Add support for hats on Linux

I'd recently experimented with swapping over from SDL2 to glfw and ran into the fact that hats are currently unsupported on Linux. I found a few issues on here which seem to have came to the same conclusion as myself; there is no good way to support them without converting over to the evdev API. I've done this conversion, and added support for hats.
As a disclaimer, I have no prior experience with evdev, so please triple check this change.
One concern of mine is that I'm not at all honoring the flat member from struct input_absinfo. It seems while the fuzz member is honored by the kernel, flat is expected to be handled by userspace code. However, I don't really know how exactly it should be used.","Tried it out and it works beautifully. I'll make a proper review of it as well, as you suggested.",True,"{'HOORAY': ['https://github.com/dmitshur', 'https://github.com/Zomby2D']}"
glfw/glfw,https://github.com/glfw/glfw,1005,2017-05-06T20:55:00Z,2017-06-15T18:07:50Z,2017-06-15T18:09:24Z,CLOSED,False,143,30,2,https://github.com/inolen,Convert Linux joystick code to using the evdev API,1,"['enhancement', 'Linux']",https://github.com/glfw/glfw/pull/1005,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1005#issuecomment-308822542,"Convert Linux joystick code to using the evdev API
Add support for hats on Linux

I'd recently experimented with swapping over from SDL2 to glfw and ran into the fact that hats are currently unsupported on Linux. I found a few issues on here which seem to have came to the same conclusion as myself; there is no good way to support them without converting over to the evdev API. I've done this conversion, and added support for hats.
As a disclaimer, I have no prior experience with evdev, so please triple check this change.
One concern of mine is that I'm not at all honoring the flat member from struct input_absinfo. It seems while the fuzz member is honored by the kernel, flat is expected to be handled by userspace code. However, I don't really know how exactly it should be used.",This is related to #906.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1005,2017-05-06T20:55:00Z,2017-06-15T18:07:50Z,2017-06-15T18:09:24Z,CLOSED,False,143,30,2,https://github.com/inolen,Convert Linux joystick code to using the evdev API,1,"['enhancement', 'Linux']",https://github.com/glfw/glfw/pull/1005,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1005#issuecomment-308823618,"Convert Linux joystick code to using the evdev API
Add support for hats on Linux

I'd recently experimented with swapping over from SDL2 to glfw and ran into the fact that hats are currently unsupported on Linux. I found a few issues on here which seem to have came to the same conclusion as myself; there is no good way to support them without converting over to the evdev API. I've done this conversion, and added support for hats.
As a disclaimer, I have no prior experience with evdev, so please triple check this change.
One concern of mine is that I'm not at all honoring the flat member from struct input_absinfo. It seems while the fuzz member is honored by the kernel, flat is expected to be handled by userspace code. However, I don't really know how exactly it should be used.","This has been merged as d1a2ec4 with bug fixes in 206f9ca and 6da26c8 and additional cleanup in d2952e4.
Thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1006,2017-05-06T21:03:12Z,2017-05-07T00:23:47Z,2017-10-01T13:58:38Z,CLOSED,False,2,2,1,https://github.com/KindDragon,cmake_minimum_required() command should at the beginning file,1,"['enhancement', 'Cygwin', 'build']",https://github.com/glfw/glfw/pull/1006,https://github.com/KindDragon,1,https://github.com/glfw/glfw/pull/1006,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1006,2017-05-06T21:03:12Z,2017-05-07T00:23:47Z,2017-10-01T13:58:38Z,CLOSED,False,2,2,1,https://github.com/KindDragon,cmake_minimum_required() command should at the beginning file,1,"['enhancement', 'Cygwin', 'build']",https://github.com/glfw/glfw/pull/1006,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1006#issuecomment-299673859,,"Oh, they fixed it! I tried having the commands in this order on earlier versions of CMake but then CMAKE_LEGACY_CYGWIN_WIN32 had no effect.
Thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/felselva,1,https://github.com/glfw/glfw/pull/1012,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/Zuzu-Typ']}"
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1012#issuecomment-301038967,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.",How do you handle wrapping?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1012#issuecomment-301046651,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Since the function is meant to be called from within callbacks and is limited to the main thread, there is no need for the window parameter. The time could be stored in the global struct.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1012#issuecomment-301061454,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.",Style-wise it is excellent.,True,{'THUMBS_UP': ['https://github.com/felselva']}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/felselva,5,https://github.com/glfw/glfw/pull/1012#issuecomment-301164787,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","How do you handle wrapping?

I didn't understand what you mean.

Since the function is meant to be called from within callbacks and is limited to the main thread, there is no need for the window parameter. The time could be stored in the global struct.

Fixed that. Now it doesn't take the window as argument and the event time is stored in the global struct.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/dmitshur,6,https://github.com/glfw/glfw/pull/1012#issuecomment-301200610,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","I have a question. When I first read the PR description, and the use cases, I expected the implementation to bundle the event time with all events. So that if a key is pressed at time t0 and a mouse button is pressed at t1, you can tell exactly when those events happened.
However, looking at the implementation, I see it stores a single global time of the ""latest"" event.
Is it okay that each latest event overwrites the time of previous events? How does everything fit together?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/felselva,7,https://github.com/glfw/glfw/pull/1012#issuecomment-301211784,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Is it okay that each latest event overwrites the time of previous events? How does everything fit together?

As far as I can tell, it's ok, because internally, GLFW will immediately call the respective callback of the event, and they will be processed in order of their arrival:

Receive the event
Store the event time
Do necessary work with the event properties
Call the callback (where you are supposed to use glfwGetEventTime())
Receive next event...

Between 1 and 2, theoretically, shouldn't have any event, since they are collected in order from the event queue (part of the system in the case of Windows and MacOS, or the window sytem in the case of X11, Wayland or Mir). In other words, the events have the time that they were added to the queue by the system, and, on client side, we are just getting these events (and their time) in order they were added to the queue.",True,"{'THUMBS_UP': ['https://github.com/dmitshur', 'https://github.com/tombsar', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/dmitshur,8,https://github.com/glfw/glfw/pull/1012#issuecomment-301219370,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Thanks for clarifying, that makes sense if that's how it works.",True,{'THUMBS_UP': ['https://github.com/felselva']}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/1012#issuecomment-319802881,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@ferreiradaselva I mean that milliseconds stored in a uint32 will overflow every 49 days or so, counted from system boot and not the start of the process. That applies to the Windows, X11 and Wayland implementations of this function. The Windows value is signed as well and will wrap to -2³¹. The code should instead probably accumulate the difference between timestamps into a uint64.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/felselva,10,https://github.com/glfw/glfw/pull/1012#issuecomment-320275696,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.",Got it. I will work on a fix for that.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,11,https://github.com/glfw/glfw/pull/1012#issuecomment-339056177,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Won't the user need to also know the current time, according to whatever time source the message queue uses, for this feature to be fully useful? If so, what do we return on X11?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/ghuser404,12,https://github.com/glfw/glfw/pull/1012#issuecomment-339893329,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@ferreiradaselva, @elmindreda, I would argue that returning time in double format is not the best/practical/useful solution. If this was returning time in nanoseconds as uint64_t (or similar), it would be more useful, because you would be able to reliably compare those values.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/felselva,13,https://github.com/glfw/glfw/pull/1012#issuecomment-340234714,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@elmindreda As far as I know, the point is being able to compare the time that the event was pushed in the queue with the time returned by glfwGetTime()
@ghuser404 glfwGetTime() returns double that's why this function is returning double, too.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/ghuser404,14,https://github.com/glfw/glfw/pull/1012#issuecomment-340262637,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@ferreiradaselva, makes sense. Although I think glfwGetTime() would be useful as a reference time if we could get current time of event handling clock, and set it via glfwSetTime().
Too bad it's all using imprecise floating point values.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/tombsar,15,https://github.com/glfw/glfw/pull/1012#issuecomment-340303269,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@ghuser404 I completely understand your instinct to use integral numbers to represent time, but the fact is that your program has to be running for a really long time before floating-point precision starts to cause any problems.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/ghuser404,16,https://github.com/glfw/glfw/pull/1012#issuecomment-340372798,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@tombsar, see http://floating-point-gui.de/errors/comparison/
float a = 0.15 + 0.15
float b = 0.1 + 0.2
if(a == b) // can be false!
if(a >= b) // can also be false!

This is enough for me to not use floating point values for such problems.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/tombsar,17,https://github.com/glfw/glfw/pull/1012#issuecomment-340389903,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@ghuser404 We are well aware of the limitations of floating-point representations. I have yet to see a single real-world bug caused by storing time as a double, and I can't think of any that could not be fixed in the user's code (e.g. by not comparing for exact equality with a constant that is known to not have an exact representation). If you are concerned, you can always use uint64_t millis = glfwGetTime() * 1000.0 or similar as your basis for time comparison.
Edit: I should mention, I don't speak on behalf of the glfw team. This discussion should probably take place on the forums rather than this tangentially related issue.",True,{'THUMBS_UP': ['https://github.com/ghuser404']}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,18,https://github.com/glfw/glfw/pull/1012#issuecomment-341244763,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@ferreiradaselva I wish we could use glfwGetTime as a reference, but it's on at least some platforms backed by a different time source and it uses an offset that the user can change at any time with glfwSetTime.
I've looked into making this line up, but there's still the problem of reference time on X11 where we may not even be running on the same machine as the event time source.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,19,https://github.com/glfw/glfw/pull/1012#issuecomment-358260242,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Hello,
What I dislike about this design is that a user of the API has to know wether the event is timed or not.
In #1186 I propose an alternative approach where we pass the time in the callback parameters, so that there is no ambiguity.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,20,https://github.com/glfw/glfw/pull/1012#issuecomment-358262669,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Also, regarding the time format, I think double is appropriate here both because the API uses it in glfwGetTime(), as @ferreiradaselva already mentionned, and also because on osx, the time of events is given using a double representing seconds, hence we could lose precision when converting back to nanoseconds. BTW it would be nice to quantify this, in the worst case where the time is ""big"", to see what nanoseconds precision is guaranteed.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,21,https://github.com/glfw/glfw/pull/1012#issuecomment-358266809,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@elmindreda , you mentionned the consistency with current time, I would also raise this concern : on every platform, the clock used for event times should be consistent with how the time argument of _glfwPlatformWaitEventsTimeout is interpreted.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,22,https://github.com/glfw/glfw/pull/1012#issuecomment-358272164,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Instead of introducing an additional time source as a reference for the event time and since no one seems to know how to get the current time from the X server, what about changing this to glfwGetEventLatency? On X11 we could return the less nonsensical 0.0 and since event times are measured in ms on several platforms, the time between the few lines of GLFW event handling code and the callback being called should be negligible.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,23,https://github.com/glfw/glfw/pull/1012#issuecomment-358275860,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@elmindreda I don't understand your last comment, maybe it's because I lack some context. Do you mean just changing the name glfwGetEventTime to glfwGetEventLatency  ?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/ghuser404,24,https://github.com/glfw/glfw/pull/1012#issuecomment-358276850,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","I assume it means getting time difference between two events, as opposed to getting time in reference to some clock.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,25,https://github.com/glfw/glfw/pull/1012#issuecomment-358277676,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Yes, what @ghuser404 said.
Edit: Sorry, misread. What I meant was return the difference between the event time for that OS event and the then current time from its reference time source (usually epoch or boot time).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/ghuser404,26,https://github.com/glfw/glfw/pull/1012#issuecomment-358280327,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Sorry, misread. What I meant was return the difference between the event time for that OS event and the then current time from its reference time source (usually epoch or boot time).

@elmindreda Don't you think it might end up negative on some OS this way?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,27,https://github.com/glfw/glfw/pull/1012#issuecomment-358281615,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@elmindreda I think I see your idea. But : if event time and time are based on trully different clocks, the information on latency wouldn't help, I think, because it's like substracting apples from oranges. And if they are based on the same clock, then we might as well return the time like it is today, because it's less convoluted. Maybe one thing to do is to verify, platform per platform, if the clocks used are the same.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,28,https://github.com/glfw/glfw/pull/1012#issuecomment-358292955,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@ghuser404 Potentially, if the time source can go backwards, but glfwGetEventTime and (for example) glfwGetCurrentEventTimeSourceTime would have the same problem. Edit: Or, wait, you mean because I reversed the order of operands in the sentence above?
@OlivierSohn Why wouldn't it help? What you want to know is the time from when the event was generated and the time it's received. The resulting duration in seconds is the same.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,29,https://github.com/glfw/glfw/pull/1012#issuecomment-358299519,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@elmindreda There are different kinds of clocks : realtime, monotonic, cpu. They all have different semantics (see here and here, note that these are Haskell docs but the concepts are not specific to Haskell).

What you want to know is the time from when the event was generated and the time it's received.

In this example, when the event was generated is given by the os, using clock 1 and the time it's received is given by clock 2 (the clock used underneath glfwGetTime if this is the function we would use to measure the current time) which may or may not be the same as clock 1.
Let's say that clock 1 is a RealTime clock and clock 2 is a Monotonic clock (these notions are defined here), doing the difference between the two would be nonsense because they don't have the same reference (zero) and even, they don't increase at the same speed.
But maybe on some platforms, the 2 clocks are the same : we could test it empirically by writing the event time and the result of glfwGetTime in the event callback and seeing if we have close values all the time. Or, better, inspect documentations and implementations to see what underlying clock is used.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,30,https://github.com/glfw/glfw/pull/1012#issuecomment-358306152,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Or, better, inspect documentations and implementations to see what underlying clock is used.

I did that and brought up time source specific concerns above in this thread.
For example, the Windows event message time is based on GetTickCount, uint32 ms since boot that wraps every ~49 days. The GLFW timer (glfwGetTimer*) that glfwGetTime is a helper function on top of uses QueryPerformance*, a deliberately unspecified hardware time source that is guaranteed monotonic only on the same core.

But maybe on some platforms, the 2 clocks are the same : we could test it empirically by writing the event time and the result of glfwGetTime in the event callback and seeing if we have close values all the time.

The result of glfwGetTime won't line up with any of the time sources discussed as it starts at glfwInit and can have its base changed at any time (from any thread) with glfwSetTime.
We could rebase the OS event times to the GLFW timer and return uint64 values of a frequency only known at run-time, no problem, but it doesn't seem very consistent or user friendly.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,31,https://github.com/glfw/glfw/pull/1012#issuecomment-358306568,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","In addition to my latest comment, I add this quote from the GLFW doc for glfwGetTime :

It uses the highest-resolution monotonic time source on each supported platform

so we just need to make sure that the os times events using the same clock.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,32,https://github.com/glfw/glfw/pull/1012#issuecomment-358308851,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","We could rebase the OS event times to the GLFW timer and return uint64 values of a frequency only known at run-time, no problem, but it doesn't seem very consistent or user friendly.

Or remove the glfwSetTime functionality, and remove the rebase on zero at glfwInit?
EDIT : I don't understand the bit about frequency, I'll look closer at the code",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,33,https://github.com/glfw/glfw/pull/1012#issuecomment-358309214,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Or remove the glfwSetTime functionality, and remove the rebase on zero at glfwInit?

We could do that, but not before 4.0. The advantage of glfwGetEventLatency is we can put it into 3.3.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,34,https://github.com/glfw/glfw/pull/1012#issuecomment-358311713,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","So I understand that the frequency is just about converting from the unit (nanosecond or milliseconds) to seconds, so we should do that if we return a double, in all cases.
Hence, your proposal to take the offset and frequency into account would be correct if we knew the 2 clocks are the same (the monotonic one from glfwGetTime, and the one of the os that times the events).
EDIT : if we don't know if the clocks are the same, we can't do anything with the 2 values as they are not in the same space, the glfwGetEventLatency would not help.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,35,https://github.com/glfw/glfw/pull/1012#issuecomment-358316358,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","I'm also having second thoughts on removing the rebase to 0 : if we do that the floating point operations precisions precision will decrease so when removing the rebase we could consider changing from double to uint64_t, or not change the behaviour.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,36,https://github.com/glfw/glfw/pull/1012#issuecomment-358318310,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@elmindreda Concerning Windows, to followup on what you said, regarding GetTickCount and QueryPerformaceCounter, it seems indeed that these 2 are monotonic, but they have different resolutions. And maybe different starts? GetTickCount starts at 0 at system boot, but it's not specified when is the zero of QueryPerformaceCounter, hence how would we compare them if we wanted to implement glfwGetEventLatency  ?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/elmindreda,37,https://github.com/glfw/glfw/pull/1012#issuecomment-358323387,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@OlivierSohn glfwGetEventLatency would have nothing to do with QueryPerformance*. It would return GetTickCount() - GetMessageTime() converted to seconds, as calculated when the event was received by GLFW, just before calling the corresponding event callback. Since it returns a duration and not an absolute time it doesn't matter what time source it used. It's just an estimate of how long it took from the time the OS recorded the event to when GLFW received it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,38,https://github.com/glfw/glfw/pull/1012#issuecomment-358347527,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@elmindreda thanks for clarifying, it makes sense now! So if for each platform we know how to get the current time with the same clock as the one the os used to time the event, it will be possible to implement glfwGetEventLatency indeed.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/ghuser404,39,https://github.com/glfw/glfw/pull/1012#issuecomment-358398021,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","So if for each platform we know how to get the current time with the same clock as the one the os used to time the event, it will be possible to implement glfwGetEventLatency indeed.

@OlivierSohn I think this is exactly what @elmindreda wanted to make with the initial API.

I wish we could use glfwGetTime as a reference, but it's on at least some platforms backed by a different time source and it uses an offset that the user can change at any time with glfwSetTime.
I've looked into making this line up, but there's still the problem of reference time on X11 where we may not even be running on the same machine as the event time source.

If glfwGetEventLatency is obliged to use the same clock, then I don't see how it's different from the initially proposed solution.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,40,https://github.com/glfw/glfw/pull/1012#issuecomment-358404620,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@ghuser404 I think there is a slight misunderstanding on your side : I underlined that in glfwGetEventLatency we need the same clock as the one the os uses to time events, not the same clock as the one used by glfwGetTime. I hope this clarifies my point, which is btw the point @elmindreda made in the beginning of the discussion:

Won't the user need to also know the current time, according to whatever time source the message queue uses, for this feature to be fully useful?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/ghuser404,41,https://github.com/glfw/glfw/pull/1012#issuecomment-358417465,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@OlivierSohn I probably quoted not the most helpful piece of discussion. But your quote only emphasises what I wanted to say: this whole thing didn't get merged into GLFW 3.3 because we cannot query clock on which the OS delivers events. @elmindreda then suggested to solve this by introducing glfwGetEventLatency which wouldn't rely on querying this clock. But you reverted the discussion back to being able to query it :)
Why I quoted the glfwGetTime piece is because the problem with integrating this API is that it may be running on a different clock, either because it was initially different or because user set the offset.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/OlivierSohn,42,https://github.com/glfw/glfw/pull/1012#issuecomment-358432477,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","Well, I'm not sure if I reverted anything, re-reading the discussions, I tend to think @elmindreda had this idea in the beginning, when she suggested glfwGetEventLatency, and it took me a while to see that we were on the same page :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/mdsitton,43,https://github.com/glfw/glfw/pull/1012#issuecomment-460004873,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","I've done some experimentation myself on this sort of thing, and would much prefer this to be done right :)
One solution that i would suggest here to the issues outlined above. Throw out the creation time need. GetMessageTime is rather low resolution, and is not that great for certain things.
One solution I have implemented in the past is to run the event loop's of all platforms on a thread separate from the rendering thread, and shuffle over data to the main thread through some kind of queue. Can see an example with native win32 and C++ here: https://github.com/mdsitton/ThreadedEventWindow
This allows you to poll for new input events on this thread and assign them a timestamp as soon as they are received (which is much faster now that a game loop isn't in the way). One that will have much higher resolution than 1ms.
This should still work with the current api plan of having a single global ""time"" that can be checked, as the value can be pulled out of the queue and moved into this global state from the game thread.
Though overall I don't know how well this would fit in with the glfw codebase, or how much refactoring work needs to be done to seperate all of the platform event loops onto a seperate thread from the game loop...
Anyways i hope a good solution can be figured out as this is a SORELY missed feature from basically all window platform layers :D",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/ghuser404,44,https://github.com/glfw/glfw/pull/1012#issuecomment-460024218,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.","@mdsitton All event processing must be done on the main thread. Besides, it's easily implementable on the user side, and I believe everyone is doing this anyway. Everyone is just hoping to get more accurate event timing, because that can be delayed while processing events.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1012,2017-05-12T02:28:56Z,,2019-02-03T05:57:36Z,OPEN,False,135,12,16,https://github.com/felselva,Get event time,3,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1012,https://github.com/mdsitton,45,https://github.com/glfw/glfw/pull/1012#issuecomment-460025724,"This patch add support for getting the event time of key-press, key-release, button-press, button-release and cursor motion. This is useful especially for cases of frame rate variation, like frame drops or disabled v-sync.
The test event.c was updated to print the event time, showing the event time between parenthesis, as printf(""...(event time: %0.3f)..."").
I tested the Wayland, X11 and Windows implementations. The Mac/Cocoa and Mir implementations are untested.
How it is done. The global structure of each platform contains a member variable lastEventTime to hold the time of the last event handled. When an event is handled, the time the event was added in the queue is stored in lastEventTime and later can be retrieved by the function glfwGetEventTime(), which will make the proper conversion to return the value in seconds.",User side timestamps are imo are not a solution here. This would also not be making the exposed glfw api multithreaded but the backend platform implementations instead.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/Squareys,1,https://github.com/glfw/glfw/pull/1015,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.","Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/Squareys,2,https://github.com/glfw/glfw/pull/1015#issuecomment-301792829,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.","The build doesn't actually run fully through, it seems to be missing a header now:
[  1%] Building C object src/CMakeFiles/glfw.dir/context.c.o

In file included from /home/travis/build/glfw/glfw/src/context.c:28:

In file included from /home/travis/build/glfw/glfw/src/internal.h:183:

/home/travis/build/glfw/glfw/src/x11_platform.h:51:10: fatal error: 'X11/extensions/XInput2.h' file not found

#include <X11/extensions/XInput2.h>

(We're probably building the 3.2 release.)
https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-trusty Will help with checking whether you are able to install certain packages on travis, in case this missing header is due to a missing package. (CMake configure should probably catch that, though?)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/Squareys,3,https://github.com/glfw/glfw/pull/1015#issuecomment-301793320,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.","The missing package is libxi-dev, which is whitelisted! Will ammend that to my commit.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/Squareys,4,https://github.com/glfw/glfw/pull/1015#issuecomment-301795210,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.","(It looks like the libx11-xcb1 package may be superfluous, the magnum build ran through without, I will check that real quick, and then this PR should be safe to merge)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1015#issuecomment-301795811,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.","The list of required header packages keeps changing as new APIs are used and old ones are made fully dynamically loaded, which is why I usually recommend installing the xorg-dev metapackage. I'm sure the Travis folks will thank you for being more specific, though.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/Squareys,6,https://github.com/glfw/glfw/pull/1015#issuecomment-301796404,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.","The xorg-dev package is also whitelisted, shall I change it to that? :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1015#issuecomment-301797355,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.","No, let's be nice to the free build bots. The latest revision seems to work well.",True,"{'THUMBS_UP': ['https://github.com/Squareys', 'https://github.com/mosra']}"
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/elmindreda,8,https://github.com/glfw/glfw/pull/1015#issuecomment-301798462,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.",Thanks!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1015,2017-05-16T13:52:58Z,2017-05-16T14:22:25Z,2017-10-01T13:58:13Z,MERGED,True,5,0,1,https://github.com/Squareys,Fix travis builds,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1015,https://github.com/Squareys,9,https://github.com/glfw/glfw/pull/1015#issuecomment-301798570,"Hi @elmindreda !
I have no idea how this happened, but travis changed something, which resulted in the cmake version of the default image being 2.8.7 rather than 2.8.12, which is insufficient for building glfw.
This affected us with magnum aswell (see mosra/magnum#203), and since we build glfw as a dependency on travis aswell, I thought I'd contribute our fixes here, too.
Cheers, Jonathan.","No problem, thanks for merging! 👍",True,{}
glfw/glfw,https://github.com/glfw/glfw,1021,2017-05-21T10:27:35Z,2017-08-18T12:53:51Z,2017-08-18T12:53:56Z,CLOSED,False,27,16,1,https://github.com/suprstefan,Radial deadzone on sticks for better precision,1,"['enhancement', 'wontfix', 'Windows']",https://github.com/glfw/glfw/pull/1021,https://github.com/suprstefan,1,https://github.com/glfw/glfw/pull/1021,"When testing the 360 gamepad input on windows I noticed a big spike in stick input when leaving the dead-zone. Since this isn't very nice I implemented ""The Right Way"" described here: http://www.third-helix.com/2013/04/12/doing-thumbstick-dead-zones-right.html
I have no idea if other platforms should be changed in the same way?","When testing the 360 gamepad input on windows I noticed a big spike in stick input when leaving the dead-zone. Since this isn't very nice I implemented ""The Right Way"" described here: http://www.third-helix.com/2013/04/12/doing-thumbstick-dead-zones-right.html
I have no idea if other platforms should be changed in the same way?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1021,2017-05-21T10:27:35Z,2017-08-18T12:53:51Z,2017-08-18T12:53:56Z,CLOSED,False,27,16,1,https://github.com/suprstefan,Radial deadzone on sticks for better precision,1,"['enhancement', 'wontfix', 'Windows']",https://github.com/glfw/glfw/pull/1021,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1021#issuecomment-320540787,"When testing the 360 gamepad input on windows I noticed a big spike in stick input when leaving the dead-zone. Since this isn't very nice I implemented ""The Right Way"" described here: http://www.third-helix.com/2013/04/12/doing-thumbstick-dead-zones-right.html
I have no idea if other platforms should be changed in the same way?","That's a nice deadzone variant and a nice implementation of it, but as the article itself says there's no one size fits all. Instead I think I'll remove the XInput circular deadzone and let the user implement whatever deadzone is desired.
With the addition of the gamepad functions this is now possible to do in a sane way for all axes.",True,"{'THUMBS_UP': ['https://github.com/thedmd', 'https://github.com/tombsar', 'https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,1021,2017-05-21T10:27:35Z,2017-08-18T12:53:51Z,2017-08-18T12:53:56Z,CLOSED,False,27,16,1,https://github.com/suprstefan,Radial deadzone on sticks for better precision,1,"['enhancement', 'wontfix', 'Windows']",https://github.com/glfw/glfw/pull/1021,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1021#issuecomment-321418013,"When testing the 360 gamepad input on windows I noticed a big spike in stick input when leaving the dead-zone. Since this isn't very nice I implemented ""The Right Way"" described here: http://www.third-helix.com/2013/04/12/doing-thumbstick-dead-zones-right.html
I have no idea if other platforms should be changed in the same way?",The XInput deadzone logic has been removed with 75e44ab.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1023,2017-05-27T06:07:23Z,2017-06-08T14:43:28Z,2017-06-08T14:46:56Z,CLOSED,False,3,1,1,https://github.com/rydotyosh,Fix type conversion between NSPoint and CGPoint,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1023,https://github.com/rydotyosh,1,https://github.com/glfw/glfw/pull/1023,"An error occured at cocoa_window.m:
glfw/src/cocoa_window.m:1033:76: error: sending 'CGPoint'
(aka 'struct CGPoint') to parameter of incompatible type 'NSPoint'
(aka 'struct _NSPoint')
...= [window->ns.object cascadeTopLeftFromPoint:_glfw.ns.cascadePoint];
So I fixed type conversion between NSPoint and CGPoint.
My compiler is below:
gcc --version
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)
Target: x86_64-apple-darwin13.4.0
Thread model: posix
Changing declaration of cascadePoint at cocoa_platform.h might be better,
but I choose less header file changing.","An error occured at cocoa_window.m:
glfw/src/cocoa_window.m:1033:76: error: sending 'CGPoint'
(aka 'struct CGPoint') to parameter of incompatible type 'NSPoint'
(aka 'struct _NSPoint')
...= [window->ns.object cascadeTopLeftFromPoint:_glfw.ns.cascadePoint];
So I fixed type conversion between NSPoint and CGPoint.
My compiler is below:
gcc --version
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)
Target: x86_64-apple-darwin13.4.0
Thread model: posix
Changing declaration of cascadePoint at cocoa_platform.h might be better,
but I choose less header file changing.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1023,2017-05-27T06:07:23Z,2017-06-08T14:43:28Z,2017-06-08T14:46:56Z,CLOSED,False,3,1,1,https://github.com/rydotyosh,Fix type conversion between NSPoint and CGPoint,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1023,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1023#issuecomment-304544580,"An error occured at cocoa_window.m:
glfw/src/cocoa_window.m:1033:76: error: sending 'CGPoint'
(aka 'struct CGPoint') to parameter of incompatible type 'NSPoint'
(aka 'struct _NSPoint')
...= [window->ns.object cascadeTopLeftFromPoint:_glfw.ns.cascadePoint];
So I fixed type conversion between NSPoint and CGPoint.
My compiler is below:
gcc --version
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)
Target: x86_64-apple-darwin13.4.0
Thread model: posix
Changing declaration of cascadePoint at cocoa_platform.h might be better,
but I choose less header file changing.","Thank you, will review.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1023,2017-05-27T06:07:23Z,2017-06-08T14:43:28Z,2017-06-08T14:46:56Z,CLOSED,False,3,1,1,https://github.com/rydotyosh,Fix type conversion between NSPoint and CGPoint,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1023,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1023#issuecomment-304705363,"An error occured at cocoa_window.m:
glfw/src/cocoa_window.m:1033:76: error: sending 'CGPoint'
(aka 'struct CGPoint') to parameter of incompatible type 'NSPoint'
(aka 'struct _NSPoint')
...= [window->ns.object cascadeTopLeftFromPoint:_glfw.ns.cascadePoint];
So I fixed type conversion between NSPoint and CGPoint.
My compiler is below:
gcc --version
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)
Target: x86_64-apple-darwin13.4.0
Thread model: posix
Changing declaration of cascadePoint at cocoa_platform.h might be better,
but I choose less header file changing.","Changing declaration of cascadePoint at cocoa_platform.h might be better, but I choose less header file changing.

Unfortunately NSPoint is declared in an Objective-C header so then all sources would have to be compiled as Objective-C. Your current approach is better.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1023,2017-05-27T06:07:23Z,2017-06-08T14:43:28Z,2017-06-08T14:46:56Z,CLOSED,False,3,1,1,https://github.com/rydotyosh,Fix type conversion between NSPoint and CGPoint,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1023,https://github.com/rydotyosh,4,https://github.com/glfw/glfw/pull/1023#issuecomment-304735932,"An error occured at cocoa_window.m:
glfw/src/cocoa_window.m:1033:76: error: sending 'CGPoint'
(aka 'struct CGPoint') to parameter of incompatible type 'NSPoint'
(aka 'struct _NSPoint')
...= [window->ns.object cascadeTopLeftFromPoint:_glfw.ns.cascadePoint];
So I fixed type conversion between NSPoint and CGPoint.
My compiler is below:
gcc --version
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)
Target: x86_64-apple-darwin13.4.0
Thread model: posix
Changing declaration of cascadePoint at cocoa_platform.h might be better,
but I choose less header file changing.","Unfortunately NSPoint is declared in an Objective-C header so then all sources would have to be compiled as Objective-C. Your current approach is better.

Ok, I understand.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/sebras,1,https://github.com/glfw/glfw/pull/1026,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.","This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/jcowgill,2,https://github.com/glfw/glfw/pull/1026#issuecomment-305261241,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.",Why do you need to enable that warning (which shouldn't be causing the build to fail anyway)? It's only relevant for C90 compatibility.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/sebras,3,https://github.com/glfw/glfw/pull/1026#issuecomment-305276686,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.","A project I'm participating in uses GLFW and compiles both for win32 and Linux. To be backwards compatible as far back as is possible (to Windows XP?) the win32 port is normally compiled with an old versions of MSVC (2005 I believe). Due to us Linux developers unknowingly causing issues with declarations midway through functions (as gcc does not usually complain about this) we conciously enabled -Wdeclaration-after-statement for all the code in the project. Most of GLFW compiled without warnings (this is expected as the same code is also used in the win32 port), the warnings were limited to the changed three files. It would be nice to avoid the warnings completely as this allows us to consistenly compile with this flag enabled and not cause issues for users of older MSVC 2005 compiles by accident.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/1026#issuecomment-305428068,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.","I would actually like to change the other way for Linux-only backends.  On Linux we are lucky enough to not have to support MSVC’s legacy, and block-scoped variables help prevent common errors such as reusing a variable after the end of the block, or simply human understanding.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/sebras,5,https://github.com/glfw/glfw/pull/1026#issuecomment-305429192,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.","Ok, so you are suggesting adding more blocks and thus new scopes to the source instead? That might would resolve the issue as well. Let me try that out.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/sebras,6,https://github.com/glfw/glfw/pull/1026#issuecomment-305446648,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.",I attempted to just do a naïve implementation and while it silences the compiler warnings I'm not sure the commitdiff nor the resulting code looks more appealing…,True,{}
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1026#issuecomment-321417295,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.","I'm sorry; I won't merge this.
C99 declarations is a lot to give up, especially on intermediate-heavy Cocoa, and having to maintain strict C89 discipline across the project for years to come until we drop support for VS 2010 and 2012 is a lot to ask to avoid making a compiler flag special case.",True,"{'HEART': ['https://github.com/dmitshur'], 'THUMBS_UP': ['https://github.com/dmitshur', 'https://github.com/intrigus', 'https://github.com/Playermet']}"
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/sebras,8,https://github.com/glfw/glfw/pull/1026#issuecomment-321956623,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.","Just so I understand you clearly. :)
The project where we use GLFW is MuPDF, and since MuPDF is built for Windows using VS2005 to keep support for Windows XP onwards (we try to keep that). VS2005 complains if variables are not declared at the top of blocks.
But what you are arguing is that is not worth staying with C89 for GLFW, because you only support VS2010 onwards and C99 has a few features you like to use? So I imagine both the original patch (faa784d) and the currently proposed patch (2a23666) are not acceptable?

especially on intermediate-heavy Cocoa

I'm not sure I understand what you mean by this..? Care to explain a bit more? I'm not arguing against you, but even if you decide not to take either of the patches on I'd still like to understand the underlying reasons. Thanks you! :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/thedmd,9,https://github.com/glfw/glfw/pull/1026#issuecomment-321969065,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.",Visual Studio have a toolset which generate Windows XP compatible binaries. For 2015 it is v140_xp. We are using it in all games we releaseing.,True,"{'THUMBS_UP': ['https://github.com/intrigus', 'https://github.com/Playermet']}"
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/1026#issuecomment-322009626,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.","VS2005 complains if variables are not declared at the top of blocks.

So does VS 2010 and 2012, which we support. Any GLFW code that will compile on VS is already strict about declaring variables at the top of blocks. That includes win32_*, wgl_*, egl_*, osmesa_* and files without an underscore. Your patch is about extending that restriction to other platforms where system compilers all support intermingled (C99 style) declarations.
I'm arguing that introducing and maintaining this restriction for all GLFW code for years to come is disproportionately more work than making a special case in your build system so the -Wdeclaration-after-statement flag isn't applied to all GLFW code.
I agree that applying this flag to your application code is a good idea for the reason you stated (and I should apply it to the Windows-relevant parts of GLFW for the same reason), but it should be possible for you to apply it to your code without also applying it to all your dependencies. Also, if you want the flag applied to GLFW because you are maintaining your own local modifications of it then my adding the flag selectively via CMake should help with that bit as well.


especially on intermediate-heavy Cocoa



I'm not sure I understand what you mean by this..? Care to explain a bit more?

Most APIs on macOS are fairly verbose and either OO Objective-C or OO-style C. It's common that you need to store intermediate values in long fetch sequences, either to use them directly later on or to break up what would otherwise be lines hundreds of characters long and nested in ways that are difficult to line-break clearly.
However, I see that your patch doesn't touch the macOS code so perhaps that's irrelevant.",True,"{'THUMBS_UP': ['https://github.com/dmitshur', 'https://github.com/intrigus']}"
glfw/glfw,https://github.com/glfw/glfw,1026,2017-05-31T16:39:12Z,2017-08-18T12:52:03Z,2017-08-18T12:52:09Z,CLOSED,False,270,214,6,https://github.com/sebras,Move variable declarations to top of blocks,1,"['wontfix', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1026,https://github.com/elmindreda,11,https://github.com/glfw/glfw/pull/1026#issuecomment-322070480,"This makes the project compile successfully
when -Wdeclaration-after-statement is enabled.",The flag has (mostly) been added with e27dc50.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1028,2017-06-04T21:34:56Z,2017-08-23T11:26:31Z,2017-08-24T08:46:08Z,MERGED,True,23,19,3,https://github.com/tikhomirov,Hide cursor instead of using blank image,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1028,https://github.com/tikhomirov,1,https://github.com/glfw/glfw/pull/1028,"When cursor isn't in normal mode and should be hidden, use [NSCursor hide]
method instead of setting it to blank image. This should prevent
situations when hidden cursor becomes visible after system notification
was shown.
Fixes #971","When cursor isn't in normal mode and should be hidden, use [NSCursor hide]
method instead of setting it to blank image. This should prevent
situations when hidden cursor becomes visible after system notification
was shown.
Fixes #971",True,{}
glfw/glfw,https://github.com/glfw/glfw,1028,2017-06-04T21:34:56Z,2017-08-23T11:26:31Z,2017-08-24T08:46:08Z,MERGED,True,23,19,3,https://github.com/tikhomirov,Hide cursor instead of using blank image,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1028,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1028#issuecomment-324122944,"When cursor isn't in normal mode and should be hidden, use [NSCursor hide]
method instead of setting it to blank image. This should prevent
situations when hidden cursor becomes visible after system notification
was shown.
Fixes #971","Looks good! Are the calls to [window display] necessary, and if so why?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1028,2017-06-04T21:34:56Z,2017-08-23T11:26:31Z,2017-08-24T08:46:08Z,MERGED,True,23,19,3,https://github.com/tikhomirov,Hide cursor instead of using blank image,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1028,https://github.com/tikhomirov,3,https://github.com/glfw/glfw/pull/1028#issuecomment-324228105,"When cursor isn't in normal mode and should be hidden, use [NSCursor hide]
method instead of setting it to blank image. This should prevent
situations when hidden cursor becomes visible after system notification
was shown.
Fixes #971",@elmindreda I can't remember why I added this call 😅 I checked and it works without [window display] so I removed this line.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1028,2017-06-04T21:34:56Z,2017-08-23T11:26:31Z,2017-08-24T08:46:08Z,MERGED,True,23,19,3,https://github.com/tikhomirov,Hide cursor instead of using blank image,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1028,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1028#issuecomment-324283660,"When cursor isn't in normal mode and should be hidden, use [NSCursor hide]
method instead of setting it to blank image. This should prevent
situations when hidden cursor becomes visible after system notification
was shown.
Fixes #971",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1039,2017-07-02T17:53:31Z,2017-07-03T12:34:37Z,2017-07-03T12:40:10Z,CLOSED,False,3,6,1,https://github.com/devnexen,GLAPIENTRY is unconditionally defined by gl.h,1,"['bug', 'verified', 'OpenBSD']",https://github.com/glfw/glfw/pull/1039,https://github.com/devnexen,1,https://github.com/glfw/glfw/pull/1039,to avoid already defined constant.,to avoid already defined constant.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1039,2017-07-02T17:53:31Z,2017-07-03T12:34:37Z,2017-07-03T12:40:10Z,CLOSED,False,3,6,1,https://github.com/devnexen,GLAPIENTRY is unconditionally defined by gl.h,1,"['bug', 'verified', 'OpenBSD']",https://github.com/glfw/glfw/pull/1039,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1039#issuecomment-312507549,to avoid already defined constant.,What is the purpose of this PR?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1039,2017-07-02T17:53:31Z,2017-07-03T12:34:37Z,2017-07-03T12:40:10Z,CLOSED,False,3,6,1,https://github.com/devnexen,GLAPIENTRY is unconditionally defined by gl.h,1,"['bug', 'verified', 'OpenBSD']",https://github.com/glfw/glfw/pull/1039,https://github.com/devnexen,3,https://github.com/glfw/glfw/pull/1039#issuecomment-312507860,to avoid already defined constant.,It does not compile since GLAPIENTRY is define before inclusion of gl.h below which ... defines it,True,{}
glfw/glfw,https://github.com/glfw/glfw,1039,2017-07-02T17:53:31Z,2017-07-03T12:34:37Z,2017-07-03T12:40:10Z,CLOSED,False,3,6,1,https://github.com/devnexen,GLAPIENTRY is unconditionally defined by gl.h,1,"['bug', 'verified', 'OpenBSD']",https://github.com/glfw/glfw/pull/1039,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1039#issuecomment-312601885,to avoid already defined constant.,On what platform is the current order causing a problem?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1039,2017-07-02T17:53:31Z,2017-07-03T12:34:37Z,2017-07-03T12:40:10Z,CLOSED,False,3,6,1,https://github.com/devnexen,GLAPIENTRY is unconditionally defined by gl.h,1,"['bug', 'verified', 'OpenBSD']",https://github.com/glfw/glfw/pull/1039,https://github.com/devnexen,5,https://github.com/glfw/glfw/pull/1039#issuecomment-312603300,to avoid already defined constant.,Openbsd,True,{}
glfw/glfw,https://github.com/glfw/glfw,1039,2017-07-02T17:53:31Z,2017-07-03T12:34:37Z,2017-07-03T12:40:10Z,CLOSED,False,3,6,1,https://github.com/devnexen,GLAPIENTRY is unconditionally defined by gl.h,1,"['bug', 'verified', 'OpenBSD']",https://github.com/glfw/glfw/pull/1039,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1039#issuecomment-312634093,to avoid already defined constant.,This has been merged as 57f8720 with additional cleanup in be51c20.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1039,2017-07-02T17:53:31Z,2017-07-03T12:34:37Z,2017-07-03T12:40:10Z,CLOSED,False,3,6,1,https://github.com/devnexen,GLAPIENTRY is unconditionally defined by gl.h,1,"['bug', 'verified', 'OpenBSD']",https://github.com/glfw/glfw/pull/1039,https://github.com/devnexen,7,https://github.com/glfw/glfw/pull/1039#issuecomment-312634999,to avoid already defined constant.,Thanks for your patience ;-),True,{}
glfw/glfw,https://github.com/glfw/glfw,1043,2017-07-12T21:35:55Z,2017-07-16T19:15:28Z,2017-07-17T21:50:17Z,CLOSED,False,6,3,2,https://github.com/thedmd,Fix use of internal joystick API in null and Win32 drivers.,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1043,https://github.com/thedmd,1,https://github.com/glfw/glfw/pull/1043,"I found two inconsistencies in joysticks API.
In null driver it is a matter of using different function signature than in declaration.
In win32 driver joystick disconnection code iterated over id's instead of _GLFWjoystick*, this can lead to crash.","I found two inconsistencies in joysticks API.
In null driver it is a matter of using different function signature than in declaration.
In win32 driver joystick disconnection code iterated over id's instead of _GLFWjoystick*, this can lead to crash.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1043,2017-07-12T21:35:55Z,2017-07-16T19:15:28Z,2017-07-17T21:50:17Z,CLOSED,False,6,3,2,https://github.com/thedmd,Fix use of internal joystick API in null and Win32 drivers.,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1043,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1043#issuecomment-315631618,"I found two inconsistencies in joysticks API.
In null driver it is a matter of using different function signature than in declaration.
In win32 driver joystick disconnection code iterated over id's instead of _GLFWjoystick*, this can lead to crash.","Thank you!
I wonder how that ever got through CI.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1043,2017-07-12T21:35:55Z,2017-07-16T19:15:28Z,2017-07-17T21:50:17Z,CLOSED,False,6,3,2,https://github.com/thedmd,Fix use of internal joystick API in null and Win32 drivers.,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1043,https://github.com/thedmd,3,https://github.com/glfw/glfw/pull/1043#issuecomment-315645094,"I found two inconsistencies in joysticks API.
In null driver it is a matter of using different function signature than in declaration.
In win32 driver joystick disconnection code iterated over id's instead of _GLFWjoystick*, this can lead to crash.",You're welcome.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1043,2017-07-12T21:35:55Z,2017-07-16T19:15:28Z,2017-07-17T21:50:17Z,CLOSED,False,6,3,2,https://github.com/thedmd,Fix use of internal joystick API in null and Win32 drivers.,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1043,https://github.com/dmitshur,4,https://github.com/glfw/glfw/pull/1043#issuecomment-315657823,"I found two inconsistencies in joysticks API.
In null driver it is a matter of using different function signature than in declaration.
In win32 driver joystick disconnection code iterated over id's instead of _GLFWjoystick*, this can lead to crash.","I wonder how that ever got through CI.

Is it because the CI does not run on Windows? See 
  
    
      glfw/.travis.yml
    
    
        Lines 8 to 9
      in
      e55e616
    
  
  
    

        
          
           - linux 
        

        
          
           - osx 
        
    
  

.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1043,2017-07-12T21:35:55Z,2017-07-16T19:15:28Z,2017-07-17T21:50:17Z,CLOSED,False,6,3,2,https://github.com/thedmd,Fix use of internal joystick API in null and Win32 drivers.,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1043,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1043#issuecomment-315704169,"I found two inconsistencies in joysticks API.
In null driver it is a matter of using different function signature than in declaration.
In win32 driver joystick disconnection code iterated over id's instead of _GLFWjoystick*, this can lead to crash.","Windows builds are handled by AppVeyor, but it seems it only emitted a warning.
Time for some -Werror.",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,1043,2017-07-12T21:35:55Z,2017-07-16T19:15:28Z,2017-07-17T21:50:17Z,CLOSED,False,6,3,2,https://github.com/thedmd,Fix use of internal joystick API in null and Win32 drivers.,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1043,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1043#issuecomment-315895615,"I found two inconsistencies in joysticks API.
In null driver it is a matter of using different function signature than in declaration.
In win32 driver joystick disconnection code iterated over id's instead of _GLFWjoystick*, this can lead to crash.",Some -Werror has been applied with 4feede6.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/liavt,1,https://github.com/glfw/glfw/pull/1054,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,True,"{'THUMBS_UP': ['https://github.com/felselva', 'https://github.com/cubberstud', 'https://github.com/wmcnamara']}"
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/dmitshur,2,https://github.com/glfw/glfw/pull/1054#issuecomment-317548873,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"to prevent repeated calls to glfwInit()

In what kind of situation would your program not know whether it already called glfwInit or not?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/liavt,3,https://github.com/glfw/glfw/pull/1054#issuecomment-317556847,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"A scenario in which that would occur is if an app supports multiple windows with no shared global state. For example, in C++, there could be a window class which needs to know whether to call glfwInit() before glfwCreateWindow().",True,{}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/dmitshur,4,https://github.com/glfw/glfw/pull/1054#issuecomment-317574255,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"I see. If there's no shared global state, is there a risk of race conditions if multiple places decide to check if glfw is initialized and call glfwInit if not?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/liavt,5,https://github.com/glfw/glfw/pull/1054#issuecomment-317575238,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"'glfwInit' must only be called by the main thread - it is not thread safe. 'glfwIsInit' would therefore have follow the same restriction on thread safety, as it is intended to be used with 'glfwInit'",True,{'THUMBS_UP': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/liavt,6,https://github.com/glfw/glfw/pull/1054#issuecomment-317588560,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,I have updated the documentation to use spaces instead of tabs. It also now mentions that glfwIsInit() should only be called from the main thread.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/dmitshur,7,https://github.com/glfw/glfw/pull/1054#issuecomment-317594521,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"Sounds reasonable to me (although I always hope these things don't need to be added). But, of course, I defer to @elmindreda to know whether this change makes sense.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/tombsar,8,https://github.com/glfw/glfw/pull/1054#issuecomment-317692950,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"-1 I see no reason to add this to the API. Either the client program should only call glfwInit once during startup (what I think is the best practice), or keep track of the init state itself.
A compromise might be to guarantee that glfwInit takes care of this internally, making it harmless to call it multiple times (at least from the main thread). As elimendreda pointed out, it is already guaranteed to do this.",True,"{'THUMBS_UP': ['https://github.com/dmitshur', 'https://github.com/Playermet', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/felselva,9,https://github.com/glfw/glfw/pull/1054#issuecomment-317707148,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"I forgot that glfwInit returns a value of success. So yeah, now I think it's not so needed. I can think of a situation where keeping track of the initialization is useful: when you use GLFW as part of an editor. Years ago I made an editor with GTK and GLFW (invisible windows). But, yeah, since glfwInit already returns a success value, I see no need for an extra function.",True,"{'HOORAY': ['https://github.com/dmitshur'], 'THUMBS_UP': ['https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/1054#issuecomment-317799089,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,If GLFW is already initialized then additional calls to glfwInit will succeed immediately with no effect so there is no need for application code to avoid that. This has been the case at least since 2.x.,True,{'HOORAY': ['https://github.com/dmitshur']}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/liavt,11,https://github.com/glfw/glfw/pull/1054#issuecomment-317823796,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"I didn't realize that multiple calls to glfwInit return immediately , so this change is not really that necessary",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/gracicot', 'https://github.com/dmitshur']}"
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/cubberstud,12,https://github.com/glfw/glfw/pull/1054#issuecomment-360505153,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"i'm currently working on new bindings for c++ that make strong use of raii.
for this case it is mandatory that querying if glfwInit() has already been called since the dtor calls glfwTerminate(). so creating multiple such objects is an error, because it would call glfwTerminate() multiple times:
i require a l-value glfw_context (as i call it) to exist for creating an window so i know that all windows will be destroyed before glfwTerminate is called (rvalues are forbidden and the respective function is deleted). however, if i create another glfw_context with a smaller scope (e.g. r-value category) it would call glfwTerminate before all windows were destroyed.
currently i need an ugly static member since i can not know if glfwInit() ""returned immediately"" or if this was simlply the first time i called this function. my goal is to solve this e.g. through an exception when the user should not be allowed to do so or - in the spirit of this disussion - allowing it and memorizing not to call glfwTerminate() for this instance. please reconsider accepting the proposal or share any thoughts on how i could solve this in a clean way otherwise!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/tombsar,13,https://github.com/glfw/glfw/pull/1054#issuecomment-360521312,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"@cubberstud The problem is that there is only one GLFW state, but your design allows for multiple glfw_context instances to coexist. Each instance does not ""own"" GLFW, and therefore should not be allowed to call glfwTerminate, as doing so interferes with other instances.
I don't know why you say that having a static member is ""ugly"". The question of whether or not GLFW has been initialized really is static data, so it makes sense to store it as such.
Have a think about what instances of your glfw_context class are supposed to represent, and why you allow multiple of them to exist simultaneously in the first place. Could you achieve the same thing with a singleton class representing GLFW's global ""initializedness""?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1054,2017-07-24T15:47:50Z,2017-07-25T18:16:27Z,2018-01-25T18:30:34Z,CLOSED,False,29,0,2,https://github.com/liavt,Added function to check if GLFW is initialized,6,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1054,https://github.com/cubberstud,14,https://github.com/glfw/glfw/pull/1054#issuecomment-360527305,glfwIsInit() returns the current initialization state of GLFW. This would be useful to prevent repeated calls to glfwInit() and to ensure that GLFW is initialized before using any library functions.,"the static member works for the scope of my framework -although i do not like it since it seems redundant because glfw already tracks this bit of information- but consider this:
if someone calls glfwInitialize() without using my framework, it will get called twice and as soon as the ctor of glfw_context is invoked and when the glfw_context's dtor is finally executed, glfwTerminate() will called since i have no way of knowing if e.g. another library is handling glfw. the static data in my framework tells me that it was not initialized and the call to glfwInit() (immediately) tells me that the setup was successfull. if i could just use glfwIsInit() in the ctor of glfw_context instead of the static member, it would detect that glfw is already initialized and will not attempt to call glfwTerminate() in the dtor. so this would e.g. allow for a thirdparty implementation to handle the glfw-lifetime.
i know that this example might seem rather contrived, but the code would even work correctly in this case without further effort.
as far as my framework is concerned: i do not want to use singletons, i implemented move and move-assign correctly and disabled copying (decided to delete them as well to enable stronger compiletime-gurantees and reasoning about the lifetimes).
having multiple glfw_context-instances around is still no problem (i was throwing an exception previously since i considered this a logical error but reading through this conversation i realized that this was considered fine so i changed my code such that the last instance that goes out of scope does all the cleanup)
note that i do not want to get rid of the concept of glfw_context since something like this is required for exception-saftiness and the concept of such a context gives me compile-time gurantees that the user attempted to call glfwInit() which i think is a nice way of approaching things.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1056,2017-08-02T16:27:22Z,2017-08-13T19:38:13Z,2017-08-13T19:38:13Z,CLOSED,False,219,72,8,https://github.com/knielsen,Implement access to primary selection,1,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1056,https://github.com/knielsen,1,https://github.com/glfw/glfw/pull/1056,"This patch implements the access to X11 primary selection that was requested in issue #894.
New functions glfwSetSelectionString() and glfwGetSelectionString() are added similar to glfwSetClipboardString() and glfwGetClipboardString(). These functions do nothing on platforms with no X11-like primary selection.
There is some discussion in the issue 894 as to whether this is too X11 specific to be included in GLFW, or if it should perhaps be in the platform-specific api. Win32 does not have any similar concept to primary selection, to my knowledge. On the other hand, there are some references to primary selection in Wayland, eg. https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection. So this might be non-X11 specific in the future.
In any case, I decided to create this pull request, which is rebased against latest GLFW master, in case it is useful.
I added stubs for other platforms; howver patch is currently only tested on Linux/X11 due to my lack of available other platforms.
Signed-off-by: Kristian Nielsen knielsen@knielsen-hq.org","This patch implements the access to X11 primary selection that was requested in issue #894.
New functions glfwSetSelectionString() and glfwGetSelectionString() are added similar to glfwSetClipboardString() and glfwGetClipboardString(). These functions do nothing on platforms with no X11-like primary selection.
There is some discussion in the issue 894 as to whether this is too X11 specific to be included in GLFW, or if it should perhaps be in the platform-specific api. Win32 does not have any similar concept to primary selection, to my knowledge. On the other hand, there are some references to primary selection in Wayland, eg. https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection. So this might be non-X11 specific in the future.
In any case, I decided to create this pull request, which is rebased against latest GLFW master, in case it is useful.
I added stubs for other platforms; howver patch is currently only tested on Linux/X11 due to my lack of available other platforms.
Signed-off-by: Kristian Nielsen knielsen@knielsen-hq.org",True,{}
glfw/glfw,https://github.com/glfw/glfw,1056,2017-08-02T16:27:22Z,2017-08-13T19:38:13Z,2017-08-13T19:38:13Z,CLOSED,False,219,72,8,https://github.com/knielsen,Implement access to primary selection,1,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1056,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1056#issuecomment-320109112,"This patch implements the access to X11 primary selection that was requested in issue #894.
New functions glfwSetSelectionString() and glfwGetSelectionString() are added similar to glfwSetClipboardString() and glfwGetClipboardString(). These functions do nothing on platforms with no X11-like primary selection.
There is some discussion in the issue 894 as to whether this is too X11 specific to be included in GLFW, or if it should perhaps be in the platform-specific api. Win32 does not have any similar concept to primary selection, to my knowledge. On the other hand, there are some references to primary selection in Wayland, eg. https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection. So this might be non-X11 specific in the future.
In any case, I decided to create this pull request, which is rebased against latest GLFW master, in case it is useful.
I added stubs for other platforms; howver patch is currently only tested on Linux/X11 due to my lack of available other platforms.
Signed-off-by: Kristian Nielsen knielsen@knielsen-hq.org","This is a beautiful patch. I don't know yet whether to merge it and if so in what form, but that's because it's right on the edge of the scope of GLFW. Seems it's time to define that edge more clearly.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1056,2017-08-02T16:27:22Z,2017-08-13T19:38:13Z,2017-08-13T19:38:13Z,CLOSED,False,219,72,8,https://github.com/knielsen,Implement access to primary selection,1,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1056,https://github.com/knielsen,3,https://github.com/glfw/glfw/pull/1056#issuecomment-320217224,"This patch implements the access to X11 primary selection that was requested in issue #894.
New functions glfwSetSelectionString() and glfwGetSelectionString() are added similar to glfwSetClipboardString() and glfwGetClipboardString(). These functions do nothing on platforms with no X11-like primary selection.
There is some discussion in the issue 894 as to whether this is too X11 specific to be included in GLFW, or if it should perhaps be in the platform-specific api. Win32 does not have any similar concept to primary selection, to my knowledge. On the other hand, there are some references to primary selection in Wayland, eg. https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection. So this might be non-X11 specific in the future.
In any case, I decided to create this pull request, which is rebased against latest GLFW master, in case it is useful.
I added stubs for other platforms; howver patch is currently only tested on Linux/X11 due to my lack of available other platforms.
Signed-off-by: Kristian Nielsen knielsen@knielsen-hq.org","Yes.
On X11, primary selection is really important. Traditional X11 uses only
the primary selection. I cannot think off-hand of a program that does not
support copy-paste just by double-clicking a word in one window and
middle-clicking to paste in another. The odd program encountered that does
not support it feels very awkward.
Hence the motivation for this patch, to get proper copy-paste support in
mupdf-gl on X11. Without some support in GLFW, the only option seems to be
to spawn an external xsel program for each copy operation, which is
inefficient and requires that xsel be made available somehow.
Primary selection is now in Wayland, so this issue should eventually come up
there as well. Its implementation was made a blocker for having Wayland as
default in Fedora:

https://fedoraproject.org/wiki/Wayland_features#BLOCKER:_primary_selection
https://www.phoronix.com/scan.php?page=news_item&px=Wayland-Primary-Selection
https://bugzilla.redhat.com/show_bug.cgi?id=1214655

On the other hand, GLFW seems to very successfully have hidden all platform
differences behind its API. As far as I know (not being a Win32 or OS X
user), there is no concept of primary selection on those platforms. It is
ackward to have a window system feature that is important on some platforms,
and completely missing on others. I am not sufficiently familiar with GLFW
to know if a similar situation exists in another part of the GLFW API and if
so, how it was handled.
Arguments for support in GLFW:

Primary selection is important in some places, and awkward to support without GLFW assistance.
Default behaviour on eg. Win32 is reasonable (works the same as for an X11 user that does not use primary selection).
Some other cross-platform frameworks also seem to support primary selection (see below).

I did some background research on how this issue is dealt with in other
cross-platform frameworks:
Java Swing
There is getSystemSelection() to access the primary selection in addition to
getSystemClipboard(). The function does nothing on systems without the
concept of primary selection:

https://docs.oracle.com/javase/7/docs/api/java/awt/Toolkit.html#getSystemSelection()

QT
Primary selection is supported through the QClipboard::Selection mode.
Interestingly, it also supports some OS X specific QClipboard::FindBuffer
mode for the current search string:

http://doc.qt.io/qt-5/qclipboard.html#Mode-enum

Javascript
I could not find a way to access the primary selection from Javascript (in
browsers).
Another option for an API is some kind of hint to which selection to use -
and only the CLIPBOARD hint would be available on all platforms. Maybe this
is more in the spirit of the GLFW API. This could even be used to support
the OS X FindBuffer as in QT, perhaps, or X11 SECONDARY selection, though
not sure if those are commonly used.
I hope the above helps us end up with the right decision wrt. primary
selection support in GLFW.",True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/gracicot']}"
glfw/glfw,https://github.com/glfw/glfw,1056,2017-08-02T16:27:22Z,2017-08-13T19:38:13Z,2017-08-13T19:38:13Z,CLOSED,False,219,72,8,https://github.com/knielsen,Implement access to primary selection,1,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1056,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1056#issuecomment-321411056,"This patch implements the access to X11 primary selection that was requested in issue #894.
New functions glfwSetSelectionString() and glfwGetSelectionString() are added similar to glfwSetClipboardString() and glfwGetClipboardString(). These functions do nothing on platforms with no X11-like primary selection.
There is some discussion in the issue 894 as to whether this is too X11 specific to be included in GLFW, or if it should perhaps be in the platform-specific api. Win32 does not have any similar concept to primary selection, to my knowledge. On the other hand, there are some references to primary selection in Wayland, eg. https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection. So this might be non-X11 specific in the future.
In any case, I decided to create this pull request, which is rebased against latest GLFW master, in case it is useful.
I added stubs for other platforms; howver patch is currently only tested on Linux/X11 due to my lack of available other platforms.
Signed-off-by: Kristian Nielsen knielsen@knielsen-hq.org","I don't think it's entirely fair to compare GLFW with Qt. They have different aims and very different scopes. The primary selection was deliberately excluded when clipboard support was added to GLFW, as it aims to provide a reliable common denominator, not like Qt enable the creation of native-like applications.
Neither SDL nor SFML provide explicit support for the primary selection. SDL does implicitly grab it when you call their equivalent of glfwSetClipboardString, but from what I understand that wouldn't be helpful to you.

On the other hand, GLFW seems to very successfully have hidden all platform differences behind its API. [...] I am not sufficiently familiar with GLFW to know if a similar situation exists in another part of the GLFW API and if so, how it was handled.

Until recently it's been possible to handle by taking it into account in the initial design or via exceptions within the current API. For example, context sharing is tied to context creation because some platforms require it, and glfwSetWindowIcon is a no-op on macOS where window icons are for document icons, not application icons. This release adds platform-specific hints, but using these look more like in-code metadata than new logic.
I'm very wary of adding whole functions to the public API (any function in glfw3.h) that only function on a single platform (or even that platform and its successor), precisely so that code written by someone only familiar with one platform will work as expected on the others.
That said, because this is low-impact, relatively small and has real applications waiting to use it I will merge this if reworked into a pair of X11-specific native access functions. There is some precedence for this with glfwGetOSMesaColorBuffer and any use of the primary selection will require X11-specific logic anyway. I know that isn't ideal, not least of which because with the current structure you will get all of Xlib dumped into your namespace. Perhaps that can be fixed.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1056,2017-08-02T16:27:22Z,2017-08-13T19:38:13Z,2017-08-13T19:38:13Z,CLOSED,False,219,72,8,https://github.com/knielsen,Implement access to primary selection,1,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1056,https://github.com/knielsen,5,https://github.com/glfw/glfw/pull/1056#issuecomment-321588050,"This patch implements the access to X11 primary selection that was requested in issue #894.
New functions glfwSetSelectionString() and glfwGetSelectionString() are added similar to glfwSetClipboardString() and glfwGetClipboardString(). These functions do nothing on platforms with no X11-like primary selection.
There is some discussion in the issue 894 as to whether this is too X11 specific to be included in GLFW, or if it should perhaps be in the platform-specific api. Win32 does not have any similar concept to primary selection, to my knowledge. On the other hand, there are some references to primary selection in Wayland, eg. https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection. So this might be non-X11 specific in the future.
In any case, I decided to create this pull request, which is rebased against latest GLFW master, in case it is useful.
I added stubs for other platforms; howver patch is currently only tested on Linux/X11 due to my lack of available other platforms.
Signed-off-by: Kristian Nielsen knielsen@knielsen-hq.org","Yes, native API seems a good option here. There is value in having a clean
platform neutral main API. Thanks for taking the time to think this over.
I have re-done the patch as a native X11 API now. I hope this is what you
had in mind (else just let me know).
It turns out that the window argument of the functions is not needed in
newest GLFW (it uses _glfw.x11.helperWindowHandle internally, and the X11
selection is global to the display). So I omitted the window argument from
the functions:
void glfwSetX11SelectionString(const char* string);
const char* glfwGetX11SelectionString(void);
This is somewhat inconsistent with glfw[GS]etClipboardString() which does
take a window argument, but should be appropriate for a native API.
The existing GLFW has no tests of native APIs. I kept the test for primary
selection in the patch in tests/clipboard.c under #ifdef
GLFW_EXPOSE_NATIVE_X11. So it can be manually enabled by passing
-DCMAKE_C_FLAGS=-DGLFW_EXPOSE_NATIVE_X11 to cmake (in addition to
-DGLFW_BUILD_TESTS=ON).
For applications, this still leaves the problem of detecting (at compile
time) whether there is GLFW_EXPOSE_NATIVE_X11 support in the instance of the
GLFW library being used. That can be worked around.
It could be useful if GLFW made available some GLFW_HAVE_NATIVE_X11 or
similar - so each application does not have to redo the platform check, and
end up with linker error if it gets it wrong. I did not see any such current
mechanims. But I think that is a separate issue from this pull request.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1056,2017-08-02T16:27:22Z,2017-08-13T19:38:13Z,2017-08-13T19:38:13Z,CLOSED,False,219,72,8,https://github.com/knielsen,Implement access to primary selection,1,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1056,https://github.com/knielsen,6,https://github.com/glfw/glfw/pull/1056#issuecomment-321593796,"This patch implements the access to X11 primary selection that was requested in issue #894.
New functions glfwSetSelectionString() and glfwGetSelectionString() are added similar to glfwSetClipboardString() and glfwGetClipboardString(). These functions do nothing on platforms with no X11-like primary selection.
There is some discussion in the issue 894 as to whether this is too X11 specific to be included in GLFW, or if it should perhaps be in the platform-specific api. Win32 does not have any similar concept to primary selection, to my knowledge. On the other hand, there are some references to primary selection in Wayland, eg. https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection. So this might be non-X11 specific in the future.
In any case, I decided to create this pull request, which is rebased against latest GLFW master, in case it is useful.
I added stubs for other platforms; howver patch is currently only tested on Linux/X11 due to my lack of available other platforms.
Signed-off-by: Kristian Nielsen knielsen@knielsen-hq.org","Hm, I rebased this onto latest master. The Travis failure seems to have been inherited from latest master.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1056,2017-08-02T16:27:22Z,2017-08-13T19:38:13Z,2017-08-13T19:38:13Z,CLOSED,False,219,72,8,https://github.com/knielsen,Implement access to primary selection,1,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1056,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1056#issuecomment-321833480,"This patch implements the access to X11 primary selection that was requested in issue #894.
New functions glfwSetSelectionString() and glfwGetSelectionString() are added similar to glfwSetClipboardString() and glfwGetClipboardString(). These functions do nothing on platforms with no X11-like primary selection.
There is some discussion in the issue 894 as to whether this is too X11 specific to be included in GLFW, or if it should perhaps be in the platform-specific api. Win32 does not have any similar concept to primary selection, to my knowledge. On the other hand, there are some references to primary selection in Wayland, eg. https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection. So this might be non-X11 specific in the future.
In any case, I decided to create this pull request, which is rebased against latest GLFW master, in case it is useful.
I added stubs for other platforms; howver patch is currently only tested on Linux/X11 due to my lack of available other platforms.
Signed-off-by: Kristian Nielsen knielsen@knielsen-hq.org","I have re-done the patch as a native X11 API now. I hope this is what you had in mind (else just let me know).

Looks good!

It turns out that the window argument of the functions is not needed in newest GLFW [...]. So I omitted the window argument [...] This is somewhat inconsistent with glfw[GS]etClipboardString() which does take a window argument, but should be appropriate for a native API.

I think that's the right choice. The window parameter of the clipboard functions is a design mistake that will be removed in the next API revision.

It could be useful if GLFW made available some GLFW_HAVE_NATIVE_X11 or similar - so each application does not have to redo the platform check, and end up with linker error if it gets it wrong. I did not see any such current mechanims. But I think that is a separate issue from this pull request.

Yeah. Once run-time selection between X11 and Wayland is in it should be possible to do using OS-specific macros.
The warnings that caused CI to fail on macOS have been fixed.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1059,2017-08-07T23:35:30Z,2017-08-13T19:38:14Z,2017-08-15T19:11:29Z,CLOSED,False,1,1,1,https://github.com/linkmauve,Stop crashing when Compose is unavailable,1,"['bug', 'Wayland', 'Linux']",https://github.com/glfw/glfw/pull/1059,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1059,"There was a missing check for when no Compose key was configured in the
xkb file, making _glfw.wl.xkb.composeState NULL and crashing on key
press.","There was a missing check for when no Compose key was configured in the
xkb file, making _glfw.wl.xkb.composeState NULL and crashing on key
press.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/cosier,1,https://github.com/glfw/glfw/pull/1078,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/",True,"{'HOORAY': ['https://github.com/1l0', 'https://github.com/screeny05'], 'THUMBS_UP': ['https://github.com/kritzikratzi', 'https://github.com/TheMrMilchmann']}"
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/cosier,2,https://github.com/glfw/glfw/pull/1078#issuecomment-329965659,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","Looks like the windows builds are failing on AppVeyor.
I shall look into it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/cosier,3,https://github.com/glfw/glfw/pull/1078#issuecomment-329971470,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","There was some minor linkage issue with building the transparency demo on Windows.
That has been fixed, however it is lacking transparency (the most important part!).
My guess is that there is no transparency implementation for wgl.
I shall look into that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/cosier,4,https://github.com/glfw/glfw/pull/1078#issuecomment-329986903,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","Luckily, I was pointed to #723 , which already implemented effecient transparency for windows via DWM.
I have merged that into this branch, and we now have windows support as well.
I have tested it on Windows 7 inside a VM.",True,"{'THUMBS_UP': ['https://github.com/1l0', 'https://github.com/leha-bot']}"
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/cosier,5,https://github.com/glfw/glfw/pull/1078#issuecomment-330026470,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","It seems older MSVC (ie. 2013) does not support the c++ keyword ""inline"", but rather a vendor specific ""__inline"". So I just removed it and let the compiler deal with it.
Also after merging with glfw:transparent-window branch, it already contained a transparentified gears.exe demo, thus rendering the transparent.exe demo from another dev branch redundant.
I have removed the transparent demo to slim this pull request.
Currently seeking any other issues...",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/cosier,6,https://github.com/glfw/glfw/pull/1078#issuecomment-330056694,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","Did some cleanup around duplicant transparent flags for wndconfig and fbconfig.
Since GLFW_TRANSPARENT is a framebuffer flag, I removed the other ones (as it caused additional internal signature changes to pass around the wndconfig).
Merge should slimmer now, and ready for review.",True,"{'HOORAY': ['https://github.com/thomthom', 'https://github.com/ckaran'], 'HEART': ['https://github.com/thomthom', 'https://github.com/elmindreda', 'https://github.com/ckaran']}"
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1078#issuecomment-330060047,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/",(This is not the review but) this looks very promising! Thank you!,True,"{'THUMBS_UP': ['https://github.com/thomthom', 'https://github.com/1l0']}"
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/elmindreda,8,https://github.com/glfw/glfw/pull/1078#issuecomment-330836729,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","@cosier I'm afraid I couldn't merge this directly as the original author metadata of the code you rebased is missing. Instead I put together the (current state of the) transparent-window branch, using your work as a guide through all the various revisions and adding your cleanups on top.
Does this look all right? Did I miss or mis-attribute anything?",True,{'THUMBS_UP': ['https://github.com/cosier']}
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/cosier,9,https://github.com/glfw/glfw/pull/1078#issuecomment-331043120,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","Ah the good ol' git rebase trick.
Looks good, I guess we can close this pull request then :-)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/bit2shift,10,https://github.com/glfw/glfw/pull/1078#issuecomment-331129619,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","Wouldn't it be interesting if one were to use the DWM API to extend the frame (DwmExtendFrameIntoClientArea with a padding of -1) all way and make the window fuly Aero Glass?
Just dropping my 2 cents (actually 2 function calls, the other being DwmIsCompositionEnabled(), which is required for Vista and 7 only).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1078,2017-09-16T10:56:18Z,2017-09-21T03:46:16Z,2017-09-27T20:08:26Z,CLOSED,False,373,17,16,https://github.com/cosier,transparent windows,35,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1078,https://github.com/elmindreda,11,https://github.com/glfw/glfw/pull/1078#issuecomment-332640280,"Hello!
I have come across the need for transparent windows (in dealing with rounded borders for a undecorated window)
I have looked at the existing issue for transparency options #197
However it was incomplete, did not compile on OSX, and didn't support X11.
My pull request provides working transparency for both OSX and X11 (not aware of the current state for transparency on Windows but am willing to work on it next).
What I have done:

Checkout'd @ckaran branch ckaran/transparent_window and made it compile and added some alphaMask struct members here and there for OSX,
Synced it up with the current master.
Added some use of XRender (requires additional linkage on cmake) to detect pict_format for alphaMask (maybe there is a better alternative that doesn't require XRender?.

Transparency can be enjoyed with the following glfw hint
glfwWindowHint(GLFW_TRANSPARENT, GLFW_TRUE)
This is my first dive in GLFW and the community here, please let me know what I am missing or if anything is needs to be done.
There is an example application called ""transparent"" in examples/","@cosier Thank you again so much for this PR! It honestly was immensely helpful for making sense of the backlog.
@bit2shift We can look into that once 3.3 is out. There are platform specific window hints now.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1079,2017-09-21T06:00:26Z,2017-09-27T20:09:08Z,2017-09-27T20:15:43Z,CLOSED,False,21,1,6,https://github.com/cosier,Transparent hint check,3,['enhancement'],https://github.com/glfw/glfw/pull/1079,https://github.com/cosier,1,https://github.com/glfw/glfw/pull/1079,"Currently the outcome of setting window transparency is unknown.
This pull request adds the ability to get the result of the GLFW_TRANSPARENT hint window outcome by using glfwGetWindowAttrib().
I have also updated the docs detailing this graceful fallback and how to check it's outcome.
Along with adding it to the gears example, as to show how to catch it.","Currently the outcome of setting window transparency is unknown.
This pull request adds the ability to get the result of the GLFW_TRANSPARENT hint window outcome by using glfwGetWindowAttrib().
I have also updated the docs detailing this graceful fallback and how to check it's outcome.
Along with adding it to the gears example, as to show how to catch it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1079,2017-09-21T06:00:26Z,2017-09-27T20:09:08Z,2017-09-27T20:15:43Z,CLOSED,False,21,1,6,https://github.com/cosier,Transparent hint check,3,['enhancement'],https://github.com/glfw/glfw/pull/1079,https://github.com/cosier,2,https://github.com/glfw/glfw/pull/1079#issuecomment-331071052,"Currently the outcome of setting window transparency is unknown.
This pull request adds the ability to get the result of the GLFW_TRANSPARENT hint window outcome by using glfwGetWindowAttrib().
I have also updated the docs detailing this graceful fallback and how to check it's outcome.
Along with adding it to the gears example, as to show how to catch it.","@elmindreda  I found a bug though, regarding windows framebuffer implemention.
In order for this pull request to work, it requires detection of transparency on WGL, but that never happens.
This works on EGL and GLX context's because we are checking pixel format:
pf->direct.alphaMask and setting the (_GLFWfbconfig) u->transparent appropiately.
But on wgl_context implementation, this never happens.
In wgl_context.c, we need something like:
u->transparent = getPixelFormatAttrib(window, n, WGL_TRANSPARENT_ARB)
WGL_TRANSPARENT_ARB is just an example, as I'm not familar with the correct attribute.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1079,2017-09-21T06:00:26Z,2017-09-27T20:09:08Z,2017-09-27T20:15:43Z,CLOSED,False,21,1,6,https://github.com/cosier,Transparent hint check,3,['enhancement'],https://github.com/glfw/glfw/pull/1079,https://github.com/thomthom,3,https://github.com/glfw/glfw/pull/1079#issuecomment-331085412,"Currently the outcome of setting window transparency is unknown.
This pull request adds the ability to get the result of the GLFW_TRANSPARENT hint window outcome by using glfwGetWindowAttrib().
I have also updated the docs detailing this graceful fallback and how to check it's outcome.
Along with adding it to the gears example, as to show how to catch it.",Just want to add my +1 to this feature. Knowing the success of the transparent feature would be very useful for what I want to build.,True,{'THUMBS_UP': ['https://github.com/cosier']}
glfw/glfw,https://github.com/glfw/glfw,1079,2017-09-21T06:00:26Z,2017-09-27T20:09:08Z,2017-09-27T20:15:43Z,CLOSED,False,21,1,6,https://github.com/cosier,Transparent hint check,3,['enhancement'],https://github.com/glfw/glfw/pull/1079,https://github.com/cosier,4,https://github.com/glfw/glfw/pull/1079#issuecomment-331088321,"Currently the outcome of setting window transparency is unknown.
This pull request adds the ability to get the result of the GLFW_TRANSPARENT hint window outcome by using glfwGetWindowAttrib().
I have also updated the docs detailing this graceful fallback and how to check it's outcome.
Along with adding it to the gears example, as to show how to catch it.","I have just pushed a fix for win32 transparency checks.
Since we are doing transparency with DWM, I had to restructure the checks around a bit.
Now with this pull request, using glfwGetWindowAttrib():

X11: If transparency was available via Xrender and requested returns True
OSX: will always support transparency, the same mechanism will return True
Windows: If compositing mode is enabled and transparency request, returns True

I have successfully tested these checks by toggling windows DWM on and off and running the Gears example (turning off DWM by using aero basic).
I have also tested the latest commit on OSX and Linux.
Should be ready for review.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1079,2017-09-21T06:00:26Z,2017-09-27T20:09:08Z,2017-09-27T20:15:43Z,CLOSED,False,21,1,6,https://github.com/cosier,Transparent hint check,3,['enhancement'],https://github.com/glfw/glfw/pull/1079,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1079#issuecomment-331732923,"Currently the outcome of setting window transparency is unknown.
This pull request adds the ability to get the result of the GLFW_TRANSPARENT hint window outcome by using glfwGetWindowAttrib().
I have also updated the docs detailing this graceful fallback and how to check it's outcome.
Along with adding it to the gears example, as to show how to catch it.","I agree that this window attribute should be added.
If the semantics are ""is it currently transparent?"" then it will additionally need to check on both Windows and X11 whether a desktop compositor is currently running. It will also slightly complicate #25.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1086,2017-10-01T00:41:25Z,2017-10-01T15:17:34Z,2017-10-01T15:43:56Z,MERGED,True,8,6,2,https://github.com/linkmauve,Add transparency support on Wayland,1,['Wayland'],https://github.com/glfw/glfw/pull/1086,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1086,"This supersedes #788, and fixes one of the last items of #197.","This supersedes #788, and fixes one of the last items of #197.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1086,2017-10-01T00:41:25Z,2017-10-01T15:17:34Z,2017-10-01T15:43:56Z,MERGED,True,8,6,2,https://github.com/linkmauve,Add transparency support on Wayland,1,['Wayland'],https://github.com/glfw/glfw/pull/1086,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1086#issuecomment-333383685,"This supersedes #788, and fixes one of the last items of #197.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,1,https://github.com/glfw/glfw/pull/1087,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",True,"{'HOORAY': ['https://github.com/WardBenjamin', 'https://github.com/xCuri0', 'https://github.com/halcyonx', 'https://github.com/elect86', 'https://github.com/r00ster91'], 'THUMBS_UP': ['https://github.com/leha-bot', 'https://github.com/r00ster91', 'https://github.com/lieff', 'https://github.com/AbitTheGray', 'https://github.com/FrankenApps', 'https://github.com/marcusdiy', 'https://github.com/EriKWDev'], 'HEART': ['https://github.com/r00ster91', 'https://github.com/AbitTheGray']}"
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,2,https://github.com/glfw/glfw/pull/1087#issuecomment-334197126,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@elmindreda Status on this ?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1087#issuecomment-335840209,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@xCuri0 I will be back on Sunday and will start looking through this properly then.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1087#issuecomment-335848350,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",Please hold off on any further updates in the meantime.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,5,https://github.com/glfw/glfw/pull/1087#issuecomment-337227965,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@elmindreda I've pushed the changes to my fork but for some reason it doesn't show up in the pull request.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1087#issuecomment-337231605,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@xCuri0 Must have been a glitch. Looks like it shows up correctly now.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1087#issuecomment-337258407,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","Thanks, those are good fixes!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,8,https://github.com/glfw/glfw/pull/1087#issuecomment-337266950,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@elmindreda Yep it shows for me now too. Also what do you mean by include substitutions should be quoted ?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/1087#issuecomment-337280865,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","Also what do you mean by include substitutions should be quoted ?

@xCuri0 For example the path ${ANDROID_NDK}/sources/android/native_app_glue/android_native_app_glue.c here substitutes in the contents of ANDROID_SDK, which will break if that path contains spaces, unless the whole thing is quoted like you did here.
Edit: Seems the CMake term is variable reference.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,10,https://github.com/glfw/glfw/pull/1087#issuecomment-337793794,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@elmindreda I've done most of the changes but I couldn't make a cursor state since it resulted in weird segmentation fault errors,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/evilbinary,11,https://github.com/glfw/glfw/pull/1087#issuecomment-338396150,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@xCuri0 how to support android without Vulkan?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,12,https://github.com/glfw/glfw/pull/1087#issuecomment-338408593,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@evilbinary It should work for OpenGL ES too Vulkan is not required,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,13,https://github.com/glfw/glfw/pull/1087#issuecomment-338460867,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@elmindreda Will this be included in 3.3 (probably as beta) ?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,14,https://github.com/glfw/glfw/pull/1087#issuecomment-338491448,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@xCuri0 Probably not, but not because of how far along it is. I don't mind merging incomplete ports as long as they work.
Rather it's because I don't want any mobile API design additions/changes/subtractions to be rushed just to make the cut for 3.3. Once it's been included in a release we're stuck with it.",True,"{'THUMBS_UP': ['https://github.com/intrigus', 'https://github.com/kieselsteini']}"
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,15,https://github.com/glfw/glfw/pull/1087#issuecomment-338524282,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@elmindreda The port does work but state saving isn't implemented yet since it requires all application data to be in a struct,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/evilbinary,16,https://github.com/glfw/glfw/pull/1087#issuecomment-338541320,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@xCuri0 Is that way do not use NativeActivity ?Just normal Activty with opengl?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,17,https://github.com/glfw/glfw/pull/1087#issuecomment-338542251,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@evilbinary No because GLFW is C and normal activity uses Java,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/evilbinary,18,https://github.com/glfw/glfw/pull/1087#issuecomment-338549483,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@xCuri0 Use android activity then init gl in java code,after use jni  and  call by GLFW.Like the way SDL lib do.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,19,https://github.com/glfw/glfw/pull/1087#issuecomment-338553535,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@evilbinary No because there is already a native activity in my port. I might try to get it to work like that once this gets merged
@elmindreda When will this be merged into master",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/evilbinary,20,https://github.com/glfw/glfw/pull/1087#issuecomment-338554745,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@xCuri0  Lately i port a glfw for android use by my project https://github.com/evilbinary/scheme-lib  a andorid platform run with scheme(chezscheme).,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,21,https://github.com/glfw/glfw/pull/1087#issuecomment-338564622,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@evilbinary in which folder is the GLFW located,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/evilbinary,22,https://github.com/glfw/glfw/pull/1087#issuecomment-338573441,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@xCuri0  scheme lib is here https://github.com/evilbinary/scheme-lib/blob/master/packages/glfw/glfw.ss but haven't finished when compile glfw android native.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,23,https://github.com/glfw/glfw/pull/1087#issuecomment-338644730,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@evilbinary Isn't that just a header file ?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,24,https://github.com/glfw/glfw/pull/1087#issuecomment-339044791,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@xCuri0 Before merging a new platform it needs a maintainer. Would you be willing to take that on?
We also need to have a solution for main, initialization and event loop that can be implemented in a stable (and preferably supported) way on (at least) both Android and iOS. AFAIK a lot of the UIKit may only be used from the main thread.
The current approach in this PR of calling input callbacks from a private thread also breaks GLFW API guarantees.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,25,https://github.com/glfw/glfw/pull/1087#issuecomment-339207801,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@elmindreda I can be the maintainer for the platform will I be added as a contributor then ? I tried adding polling in _glfwPlatformPollEvents();  and it didn't work but I'll try again.Also I can't develop for iOS since I dont have an iPhone / Mac.
If I can get _glfwPlatformPollEvents(); working the thread won't be needed.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,26,https://github.com/glfw/glfw/pull/1087#issuecomment-339920800,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@elmindreda I've removed the thread but it causes the app to be black. _glfw.app points to an address but the null check says it's null. If I remove the null check it crashes on setting onInputEvent. Do you know the possible cause of this ?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,27,https://github.com/glfw/glfw/pull/1087#issuecomment-341710348,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","I can be the maintainer for the platform will I be added as a contributor then ?

Yup, if you want.

Also I can't develop for iOS since I dont have an iPhone / Mac.

That's fine. We'll figure something out.

I've removed the thread but it causes the app to be black. _glfw.app points to an address but the null check says it's null. If I remove the null check it crashes on setting onInputEvent. Do you know the possible cause of this ?

Sorry, not sure. How would I go about building this?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,28,https://github.com/glfw/glfw/pull/1087#issuecomment-341896856,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@elmindreda I made an example that you can build in Android Studio https://github.com/xCuri0/glfw-android-example.
Apply this diff to the GLFW submodule to remove the thread.
diff --git a/src/android_init.c b/src/android_init.c
index ba572a4d..ee2fceda 100644
--- a/src/android_init.c
+++ b/src/android_init.c
@@ -50,16 +50,15 @@ void handle_cmd(struct android_app* _app, int32_t cmd) {
 // Android Entry Point
 void android_main(struct android_app *app) {
     app->onAppCmd = handle_cmd;
-    pthread_create(&(pthread_t){0}, NULL, (void*)&main, NULL); // Call the main entry point
 
-    while (1) {
+    while (!_glfw.app) {
         struct android_poll_source* source;
         // Process events
         while ((ALooper_pollAll(0, NULL, NULL,(void**)&source)) >= 0)
             if (source != NULL)
                 source->process(app, source);
     }
-
+    main(); // Call the main entry point
 }
 //////////////////////////////////////////////////////////////////////////
 //////                       GLFW platform API                      //////
diff --git a/src/android_window.c b/src/android_window.c
index 708aeda0..30e95e7c 100644
--- a/src/android_window.c
+++ b/src/android_window.c
@@ -212,6 +212,11 @@ int _glfwPlatformWindowVisible(_GLFWwindow* window)
 
 void _glfwPlatformPollEvents(void)
 {
+    struct android_poll_source* source;
+    // Process events
+    while ((ALooper_pollAll(0, NULL, NULL,(void**)&source)) >= 0)
+        if (source != NULL)
+            source->process(_glfw.windowListHead->android, source);
     _glfwInputCursorPos(_glfw.windowListHead, x, y);
 }",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,29,https://github.com/glfw/glfw/pull/1087#issuecomment-343332594,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@xCuri0 Thank you! Will try it out asap.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/kingofoz,30,https://github.com/glfw/glfw/pull/1087#issuecomment-347432866,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","hi @xCuri0 did you fix the segmentation fault error of the cursor state bug?
hi @elmindreda is the android support merged?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/Towerthousand,31,https://github.com/glfw/glfw/pull/1087#issuecomment-349645468,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","Hey, tried it out on a Nexus 6P, 5X and a Pixel 2 XL. Really want to get this merged. How can I help this PR move forward? @elmindreda",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,32,https://github.com/glfw/glfw/pull/1087#issuecomment-349718593,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@kingofoz Not yet. Currently I'm working on finishing version 3.3.
@Towerthousand Thanks for asking! You can join forces with @xCuri0 to stabilize and flesh out this port or have a look at #1098 for things to do on the 3.3 release.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/Jeffset,33,https://github.com/glfw/glfw/pull/1087#issuecomment-350586448,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@xCuri0  @elmindreda Took a look at this port and played with improving it a bit. And I think it's impressing and promising. But I have a bunch of questions. I can't find a trivial way to attach (f. ex) multitouch events, mobile sensors to existing API. As GLFW not yet designed as library for mobile platforms, does this port going to extend API or rework (generalize somehow) existing one? And what of compatibility? Or maybe only limited set of mobile features'll be available? I'd like to know what do you think of this problems :)
P. S.
I'm chiefly interested in this port and ready to contribute.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/elmindreda,34,https://github.com/glfw/glfw/pull/1087#issuecomment-350589509,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","@Jeffset As for touch input, have a look at the touch branch. None yet for sensors. It's quite likely that there will be an official mobile subset of the API if support for Android and iOS pans out.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,35,https://github.com/glfw/glfw/pull/1087#issuecomment-350905333,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@kingofoz I haven't used a cursor state since it causes segmentation fault.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,36,https://github.com/glfw/glfw/pull/1087#issuecomment-353910777,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@elmindreda Desktop platforms like Windows and Linux also have APIs for sensors.My laptop has an accelerometer used for HDD protection which can be accessed in Linux.,True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/vinjn', 'https://github.com/khaledkee']}"
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/rafal-tarnow,37,https://github.com/glfw/glfw/pull/1087#issuecomment-356226882,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","good job!, I have tested on Galaxy A5 (2016) Android 6.0.1 and it works",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/WardBenjamin,38,https://github.com/glfw/glfw/pull/1087#issuecomment-398270788,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",Looks awesome! What's the current status on this?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/mumin16,39,https://github.com/glfw/glfw/pull/1087#issuecomment-416254420,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",it cant run the release version,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/mumin16,40,https://github.com/glfw/glfw/pull/1087#issuecomment-416288103,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",there is a problem.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,41,https://github.com/glfw/glfw/pull/1087#issuecomment-416427779,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@mumin16 Can you tell the Android version of the emulator ? I only tested Nougat MIUI and Oreo 8.1 AOSP. Some people got it working on TouchWiz Marshmallow too,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/evilbinary,42,https://github.com/glfw/glfw/pull/1087#issuecomment-416428665,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@mumin16  what is your gui?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/mumin16,43,https://github.com/glfw/glfw/pull/1087#issuecomment-416457873,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","i try it:
nox emulator-> 4.4.2
memu emulator->5.1.1
gui is nuklear",True,{'THUMBS_UP': ['https://github.com/evilbinary']}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/evilbinary,44,https://github.com/glfw/glfw/pull/1087#issuecomment-416466661,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@mumin16  what's your project? Is it open source project?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/mumin16,45,https://github.com/glfw/glfw/pull/1087#issuecomment-416713403,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","if you press the home, application crashes and we get error : A/libc: Fatal signal 11 (SIGSEGV) at 0x00000017 (code=1).  we had been trying to call an uninitialised Canvas inside another Class so when it was trying to get the height or width of it, it would crash.  if you rotate mobile device, app locks sometimes.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/xCuri0,46,https://github.com/glfw/glfw/pull/1087#issuecomment-417005335,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",@mumin16 both of those are known bugs.  I can't implement state saving unless the app using the library stores all its variables in a struct which the library makes,True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/Darky-Lucera,47,https://github.com/glfw/glfw/pull/1087#issuecomment-486215683,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","Excuse me, are there any news ?",True,"{'THUMBS_UP': ['https://github.com/Dominaezzz', 'https://github.com/helcl42', 'https://github.com/widberg', 'https://github.com/r00ster91', 'https://github.com/alichraghi', 'https://github.com/superherointj'], 'EYES': ['https://github.com/borodust', 'https://github.com/widberg', 'https://github.com/dsego', 'https://github.com/atkawa7', 'https://github.com/ericoporto', 'https://github.com/paakmau']}"
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/tim3385,48,https://github.com/glfw/glfw/pull/1087#issuecomment-506980497,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.","Thanks for your work.
Do you base on touch branch?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1087,2017-10-03T08:41:42Z,,2019-07-30T03:04:30Z,OPEN,False,705,13,16,https://github.com/xCuri0,Add Android Support,27,['enhancement'],https://github.com/glfw/glfw/pull/1087,https://github.com/kapsyst,49,https://github.com/glfw/glfw/pull/1087#issuecomment-516241077,"I added Android support to GLFW. Some features may not be implemented but the basic context creation works.You can test it by importing the native-activity sample in Android Studio, adding GLFW to CMakeLists.txt and changing main.c to be like any normal GLFW program. main() works since the actual entry point is located in android_init.c > android_main(). OpenGL contexts use egl_context.c which required little modification to work.

Vulkan window surface creation uses the VK_KHR_android_surface extension.

I tested it on a Xiaomi Redmi Note 4X, please see if it works on other devices if possible.",Is there any movement on this? Would be nice to support all platforms via GLFW...,True,"{'THUMBS_UP': ['https://github.com/truedat101', 'https://github.com/atkawa7', 'https://github.com/saintech', 'https://github.com/Honeybunch', 'https://github.com/AbitTheGray', 'https://github.com/paakmau', 'https://github.com/hero2002', 'https://github.com/alichraghi', 'https://github.com/superherointj']}"
glfw/glfw,https://github.com/glfw/glfw,1090,2017-10-11T13:10:41Z,2019-01-17T20:08:29Z,2019-01-17T20:08:34Z,CLOSED,False,11,3,1,https://github.com/ccxvii,Send control characters to CharMod callback on X11.,1,['X11'],https://github.com/glfw/glfw/pull/1090,https://github.com/ccxvii,1,https://github.com/glfw/glfw/pull/1090,"Control A-Z were being inhibited, but other control characters were being
passed through. With this change, we pass all control characters that are
mapped via X*LookupString to the CharMod callback.","Control A-Z were being inhibited, but other control characters were being
passed through. With this change, we pass all control characters that are
mapped via X*LookupString to the CharMod callback.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1090,2017-10-11T13:10:41Z,2019-01-17T20:08:29Z,2019-01-17T20:08:34Z,CLOSED,False,11,3,1,https://github.com/ccxvii,Send control characters to CharMod callback on X11.,1,['X11'],https://github.com/glfw/glfw/pull/1090,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1090#issuecomment-455314401,"Control A-Z were being inhibited, but other control characters were being
passed through. With this change, we pass all control characters that are
mapped via X*LookupString to the CharMod callback.",The charmods callback has been deprecated and no further fixes will be made to it.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1094,2017-10-14T12:14:08Z,2022-04-01T16:57:16Z,2022-04-01T16:57:28Z,CLOSED,False,80,34,7,https://github.com/sagaceilo,Pass shared context and parent window as window hints.,11,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1094,https://github.com/sagaceilo,1,https://github.com/glfw/glfw/pull/1094,"This CL doesn't include other platform since I'm not familiar with them.
Nevertheless, it would be cool to be able to pass shared context and
parent window as optional window hints.
CreateWindow no more need extra parameter to be passed (I assume 99% of
time, no one even use this). hints.context.share already exists. Its
just set in glfwChildWindowHind (the name can be changed, I really
didn't come with anything better).","This CL doesn't include other platform since I'm not familiar with them.
Nevertheless, it would be cool to be able to pass shared context and
parent window as optional window hints.
CreateWindow no more need extra parameter to be passed (I assume 99% of
time, no one even use this). hints.context.share already exists. Its
just set in glfwChildWindowHind (the name can be changed, I really
didn't come with anything better).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1094,2017-10-14T12:14:08Z,2022-04-01T16:57:16Z,2022-04-01T16:57:28Z,CLOSED,False,80,34,7,https://github.com/sagaceilo,Pass shared context and parent window as window hints.,11,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1094,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1094#issuecomment-496329796,"This CL doesn't include other platform since I'm not familiar with them.
Nevertheless, it would be cool to be able to pass shared context and
parent window as optional window hints.
CreateWindow no more need extra parameter to be passed (I assume 99% of
time, no one even use this). hints.context.share already exists. Its
just set in glfwChildWindowHind (the name can be changed, I really
didn't come with anything better).","I'm cautiously in favour of this, as I agree that most users never set these to anything other than NULL.
Something to be looked into for version 4.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1094,2017-10-14T12:14:08Z,2022-04-01T16:57:16Z,2022-04-01T16:57:28Z,CLOSED,False,80,34,7,https://github.com/sagaceilo,Pass shared context and parent window as window hints.,11,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/1094,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1094#issuecomment-1086136692,"This CL doesn't include other platform since I'm not familiar with them.
Nevertheless, it would be cool to be able to pass shared context and
parent window as optional window hints.
CreateWindow no more need extra parameter to be passed (I assume 99% of
time, no one even use this). hints.context.share already exists. Its
just set in glfwChildWindowHind (the name can be changed, I really
didn't come with anything better).","Definitely agree that share context should not be a parameter to glfwCreateWindow in the next API revision. Contexts and windows need to be decoupled in many ways.
There are no plans to support creating child GLFW windows of other GLFW windows, however (as opposed to attaching existing native child windows as GLFW window object, which likely will happen).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1100,2017-10-21T15:34:27Z,2017-10-22T15:38:07Z,2017-10-22T15:38:25Z,CLOSED,False,30,12,2,https://github.com/siavashserver,Broken Doxygen Navigation Bar,2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1100,https://github.com/siavashserver,1,https://github.com/glfw/glfw/pull/1100,"Hi! Here is a couple of fixes for the doxygen navigation bar. It seems like that there is no way to detect the active page/tab (previously done through .tablist li.current a), so I had to remove the related bits.","Hi! Here is a couple of fixes for the doxygen navigation bar. It seems like that there is no way to detect the active page/tab (previously done through .tablist li.current a), so I had to remove the related bits.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1113,2017-10-30T12:05:16Z,2017-10-30T19:44:09Z,2017-10-31T12:13:56Z,MERGED,True,100,2,3,https://github.com/linkmauve,Add dynamic loading of libxkbcommon,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1113,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1113,"I haven’t managed to do so for libwayland-* yet, but this will be the next step.","I haven’t managed to do so for libwayland-* yet, but this will be the next step.",True,"{'THUMBS_UP': ['https://github.com/elmindreda'], 'HOORAY': ['https://github.com/elmindreda', 'https://github.com/gracicot']}"
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/AndySomogyi,1,https://github.com/glfw/glfw/pull/1114,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1114#issuecomment-340604922,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","Minor language nitpick: in the code comments all instances of ""it's"" should be replaced with ""its"".",True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/AndySomogyi,3,https://github.com/glfw/glfw/pull/1114#issuecomment-340607697,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","@tombsar, grammar is fixed.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/AndySomogyi,4,https://github.com/glfw/glfw/pull/1114#issuecomment-368088043,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","I've been using this patch for months now, have been testing very thoroughly.
Would it be possible to get this patch looked at and merged?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/AndySomogyi,5,https://github.com/glfw/glfw/pull/1114#issuecomment-427535882,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","Would it be possible for someone to take a look at this patch, and let me know what I have to do to get it approved? I submitted this almost a year ago.",True,{'THUMBS_UP': ['https://github.com/GreenLightning']}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/AndySomogyi,6,https://github.com/glfw/glfw/pull/1114#issuecomment-432391757,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.",I've corrected the typos that @OlivierSohn pointed out with 58fe324,True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/Alzathar,7,https://github.com/glfw/glfw/pull/1114#issuecomment-436491297,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","@AndySomogyi I merged your PR with the latest commit of the glfw/master branch (53c8c72). It compiles fine under macOS 10.12.6 and Xcode 9.2. However, when I tried to launch it (double click or using the terminal) nothing happens. In fact, in the terminal, I had the following message: Unable to load nib file: MainMenu, exiting.
The reason is because the XIB file is copied instead to be compiled to generate the NIB file. I was able to run your Cocoa example by modifying the examples/CMakeLists.txt file using the following patch:
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index fe15abc3..fa8201bd 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -77,22 +77,25 @@ endif()
 
 if (APPLE)
 
+  find_program(IBTOOL ibtool HINTS ""/usr/bin"" ""${OSX_DEVELOPER_ROOT}/usr/bin"")
+  if (${IBTOOL} STREQUAL ""IBTOOL-NOTFOUND"")
+    message(SEND_ERROR ""ibtool can not be found"")
+  endif()
+
   add_executable(
     Cocoa
     MACOSX_BUNDLE
     cocoa/AppDelegate.h
     cocoa/AppDelegate.m
     cocoa/main.m
-    cocoa/MainMenu.xib
     glfw.icns
     ${GLAD}
     )
-
-  set_source_files_properties(
-    cocoa/MainMenu.xib
-    PROPERTIES
-    MACOSX_PACKAGE_LOCATION Resources
-    )
+    
+  add_custom_command(TARGET Cocoa POST_BUILD
+    COMMAND ${IBTOOL} --errors --warnings --notices --output-format human-readable-text --compile
+    $<TARGET_BUNDLE_CONTENT_DIR:Cocoa>/Resources/Base.lproj/MainMenu.nib
+    ${CMAKE_CURRENT_SOURCE_DIR}/cocoa/MainMenu.xib)
 
   set_target_properties(
     Cocoa
Proof in image",True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/AndySomogyi,8,https://github.com/glfw/glfw/pull/1114#issuecomment-436503355,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","Strange, I wonder why it runs fine on my computer without any modifications. Runs fine either starting the Cocoa.app from the finder, or from the terminal with a open Cocoa.app.
Here's s screenshots. This is with Xcode 10.6, on MacOS 10.13.6.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/Alzathar,9,https://github.com/glfw/glfw/pull/1114#issuecomment-436504518,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","I guess it depends on the generator you choose. I did my tests using the Makefiles generator. This generator only copy the XIB files in the Resources folder. I did not try, but if you use the Xcode generator, it will certainly add the XIB file in the Xcode project. When you compile the code with Xcode, it will know it has to compile the XIB file(s) and generate the NIB file(s) in consequence.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/AndySomogyi,10,https://github.com/glfw/glfw/pull/1114#issuecomment-436505033,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.","Yes, I used the Xcode project generator.
I'll have to test it, but I'm not sure if your changes break the Xcode project. Maybe we could add a few CMake if(not XCodeProject)... blocks ?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1114,2017-10-30T20:15:32Z,2019-03-05T19:34:00Z,2019-03-05T22:19:11Z,CLOSED,False,1116,7,9,https://github.com/AndySomogyi,"fixed bug with GLFW running in a Cocoa app, added Cocoa test app",6,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1114,https://github.com/Alzathar,11,https://github.com/glfw/glfw/pull/1114#issuecomment-436505511,"This PR fixes issue #1107
This enables GLFW to work correctly inside a Cocoa app when using the NSApplication's NSAutoreleasePool. This change automatically detects if an NSApplication is running or not, and GLFW now only manages it's own NSAutoreleasePool if an NSApplication is not running. If there is no NSApplication (the traditional GLFW usage), this change has no effect.
Correct behavior has been validated both with the new Cocoa test application, and all of the existing example apps work correctly. I've used XCode's leak detector and verified that windows are correctly deleted in a Cocoa app.",You can use the the CMAKE_GENERATOR variable for that.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1115,2017-11-01T15:35:28Z,2018-10-24T22:53:35Z,2018-10-24T22:53:49Z,CLOSED,False,28,0,3,https://github.com/Spasi,Improve DPI change behavior on Windows,1,"['Windows', 'High DPI']",https://github.com/glfw/glfw/pull/1115,https://github.com/Spasi,1,https://github.com/glfw/glfw/pull/1115,"When a window transitions between monitors with different scale/dpi settings:

It's automatically resized and repositioned by handling the WM_DPICHANGED event (Windows 8.1 or newer)
Its non-client area is automatically updated to match the new DPI (Windows 10 Anniversary Update or newer)

In Windows 10 Creators Update the DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 mode was introduced which includes the EnableNonClientDpiScaling behavior. However, I don't think we need all its features and supporting it in GLFW would be more complicated (required calls: SetProcess/ThreadDpiAwarenessContext and IsValidDpiAwarenessContext), so I left it out for now. Calling EnableNonClientDpiScaling is harmless, if an application sets the _V2 context manually.
I recorded a video of the improved behavior, here.","When a window transitions between monitors with different scale/dpi settings:

It's automatically resized and repositioned by handling the WM_DPICHANGED event (Windows 8.1 or newer)
Its non-client area is automatically updated to match the new DPI (Windows 10 Anniversary Update or newer)

In Windows 10 Creators Update the DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 mode was introduced which includes the EnableNonClientDpiScaling behavior. However, I don't think we need all its features and supporting it in GLFW would be more complicated (required calls: SetProcess/ThreadDpiAwarenessContext and IsValidDpiAwarenessContext), so I left it out for now. Calling EnableNonClientDpiScaling is harmless, if an application sets the _V2 context manually.
I recorded a video of the improved behavior, here.",True,{'THUMBS_UP': ['https://github.com/BenMcLean']}
glfw/glfw,https://github.com/glfw/glfw,1115,2017-11-01T15:35:28Z,2018-10-24T22:53:35Z,2018-10-24T22:53:49Z,CLOSED,False,28,0,3,https://github.com/Spasi,Improve DPI change behavior on Windows,1,"['Windows', 'High DPI']",https://github.com/glfw/glfw/pull/1115,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1115#issuecomment-432760060,"When a window transitions between monitors with different scale/dpi settings:

It's automatically resized and repositioned by handling the WM_DPICHANGED event (Windows 8.1 or newer)
Its non-client area is automatically updated to match the new DPI (Windows 10 Anniversary Update or newer)

In Windows 10 Creators Update the DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 mode was introduced which includes the EnableNonClientDpiScaling behavior. However, I don't think we need all its features and supporting it in GLFW would be more complicated (required calls: SetProcess/ThreadDpiAwarenessContext and IsValidDpiAwarenessContext), so I left it out for now. Calling EnableNonClientDpiScaling is harmless, if an application sets the _V2 context manually.
I recorded a video of the improved behavior, here.",With the addition of GLFW_SCALE_TO_MONITOR I believe this is done.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1115,2017-11-01T15:35:28Z,2018-10-24T22:53:35Z,2018-10-24T22:53:49Z,CLOSED,False,28,0,3,https://github.com/Spasi,Improve DPI change behavior on Windows,1,"['Windows', 'High DPI']",https://github.com/glfw/glfw/pull/1115,https://github.com/Spasi,3,https://github.com/glfw/glfw/pull/1115#issuecomment-432855397,"When a window transitions between monitors with different scale/dpi settings:

It's automatically resized and repositioned by handling the WM_DPICHANGED event (Windows 8.1 or newer)
Its non-client area is automatically updated to match the new DPI (Windows 10 Anniversary Update or newer)

In Windows 10 Creators Update the DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 mode was introduced which includes the EnableNonClientDpiScaling behavior. However, I don't think we need all its features and supporting it in GLFW would be more complicated (required calls: SetProcess/ThreadDpiAwarenessContext and IsValidDpiAwarenessContext), so I left it out for now. Calling EnableNonClientDpiScaling is harmless, if an application sets the _V2 context manually.
I recorded a video of the improved behavior, here.","Yes, thank you, dpi transitions work great with GLFW_SCALE_TO_MONITOR.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1123,2017-11-09T17:25:37Z,2019-03-06T11:42:25Z,2019-03-06T13:09:46Z,CLOSED,False,153,0,11,https://github.com/GreenLightning,Add occlusion callback and window attribute,2,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1123,https://github.com/GreenLightning,1,https://github.com/glfw/glfw/pull/1123,"Adds glfwSetWindowOcclusionCallback(GLFWwindow* window, GLFWwindowocclusionfun cbfun) and GLFW_OCCLUDED window attribute as a first step towards #680.
Only implemented on macOS for now.","Adds glfwSetWindowOcclusionCallback(GLFWwindow* window, GLFWwindowocclusionfun cbfun) and GLFW_OCCLUDED window attribute as a first step towards #680.
Only implemented on macOS for now.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1123,2017-11-09T17:25:37Z,2019-03-06T11:42:25Z,2019-03-06T13:09:46Z,CLOSED,False,153,0,11,https://github.com/GreenLightning,Add occlusion callback and window attribute,2,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1123,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1123#issuecomment-343328027,"Adds glfwSetWindowOcclusionCallback(GLFWwindow* window, GLFWwindowocclusionfun cbfun) and GLFW_OCCLUDED window attribute as a first step towards #680.
Only implemented on macOS for now.","Thank you, will review!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1123,2017-11-09T17:25:37Z,2019-03-06T11:42:25Z,2019-03-06T13:09:46Z,CLOSED,False,153,0,11,https://github.com/GreenLightning,Add occlusion callback and window attribute,2,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1123,https://github.com/Miigon,3,https://github.com/glfw/glfw/pull/1123#issuecomment-366436318,"Adds glfwSetWindowOcclusionCallback(GLFWwindow* window, GLFWwindowocclusionfun cbfun) and GLFW_OCCLUDED window attribute as a first step towards #680.
Only implemented on macOS for now.",This feature is so helpful. Please review & merge. Thanks.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1123,2017-11-09T17:25:37Z,2019-03-06T11:42:25Z,2019-03-06T13:09:46Z,CLOSED,False,153,0,11,https://github.com/GreenLightning,Add occlusion callback and window attribute,2,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1123,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1123#issuecomment-469828660,"Adds glfwSetWindowOcclusionCallback(GLFWwindow* window, GLFWwindowocclusionfun cbfun) and GLFW_OCCLUDED window attribute as a first step towards #680.
Only implemented on macOS for now.","As a side-effect of fixing #1337, OpenGL vsync now uses a display link and is not affected by window occlusion. This idea of window occlusion doesn't seem to exist on platforms other than macOS so it would be a macOS-only window attribute and I would prefer not adding that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1123,2017-11-09T17:25:37Z,2019-03-06T11:42:25Z,2019-03-06T13:09:46Z,CLOSED,False,153,0,11,https://github.com/GreenLightning,Add occlusion callback and window attribute,2,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1123,https://github.com/GreenLightning,5,https://github.com/glfw/glfw/pull/1123#issuecomment-470076851,"Adds glfwSetWindowOcclusionCallback(GLFWwindow* window, GLFWwindowocclusionfun cbfun) and GLFW_OCCLUDED window attribute as a first step towards #680.
Only implemented on macOS for now.","The intention was to help users build custom workarounds for the high cpu usage issue caused by the weird vsync behavior of macOS. Since that is all fixed now, this pull request is not needed any more.
I have archived the commits in the GreenLightning/glfw@window-occlusion branch.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1128,2017-11-15T03:18:10Z,,2021-11-21T05:39:48Z,OPEN,False,951,678,11,https://github.com/RajaLehtihet,Preliminary Wacom Tablet support (Win 8 and above),20,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1128,https://github.com/RajaLehtihet,1,https://github.com/glfw/glfw/pull/1128,This will add preliminary wacom tablet support via WM_POINTER message,This will add preliminary wacom tablet support via WM_POINTER message,True,{}
glfw/glfw,https://github.com/glfw/glfw,1128,2017-11-15T03:18:10Z,,2021-11-21T05:39:48Z,OPEN,False,951,678,11,https://github.com/RajaLehtihet,Preliminary Wacom Tablet support (Win 8 and above),20,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1128,https://github.com/RajaLehtihet,2,https://github.com/glfw/glfw/pull/1128#issuecomment-347729003,This will add preliminary wacom tablet support via WM_POINTER message,"@elmindreda I have made the modifications you requested, could you take another look please ?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1128,2017-11-15T03:18:10Z,,2021-11-21T05:39:48Z,OPEN,False,951,678,11,https://github.com/RajaLehtihet,Preliminary Wacom Tablet support (Win 8 and above),20,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1128,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1128#issuecomment-347914777,This will add preliminary wacom tablet support via WM_POINTER message,"That is a huge improvement, thank you!
However, with that cleared up I notice that you seem to have copied example code directly from MSDN. As I understand it, such code may only be distributed under the Microsoft Limited Public License license (see section 2b), must be marked as such and accompanied by the full license text (see Microsoft Limited Public License section D).
I would strongly prefer that all code in GLFW be licensed zlib/libpng. Please re-implement the bits copied from MSDN so that they may be provided under the existing GLFW license.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1128,2017-11-15T03:18:10Z,,2021-11-21T05:39:48Z,OPEN,False,951,678,11,https://github.com/RajaLehtihet,Preliminary Wacom Tablet support (Win 8 and above),20,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1128,https://github.com/RajaLehtihet,4,https://github.com/glfw/glfw/pull/1128#issuecomment-356478480,This will add preliminary wacom tablet support via WM_POINTER message,"@elmindreda Changed as requested, please review",True,{}
glfw/glfw,https://github.com/glfw/glfw,1128,2017-11-15T03:18:10Z,,2021-11-21T05:39:48Z,OPEN,False,951,678,11,https://github.com/RajaLehtihet,Preliminary Wacom Tablet support (Win 8 and above),20,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1128,https://github.com/RajaLehtihet,5,https://github.com/glfw/glfw/pull/1128#issuecomment-359309565,This will add preliminary wacom tablet support via WM_POINTER message,Did you have the chance to look at it?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1128,2017-11-15T03:18:10Z,,2021-11-21T05:39:48Z,OPEN,False,951,678,11,https://github.com/RajaLehtihet,Preliminary Wacom Tablet support (Win 8 and above),20,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1128,https://github.com/RajaLehtihet,6,https://github.com/glfw/glfw/pull/1128#issuecomment-362687059,This will add preliminary wacom tablet support via WM_POINTER message,"I'm waiting for you to merge it. So, I can start working on the Linux and Mac porting.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1128,2017-11-15T03:18:10Z,,2021-11-21T05:39:48Z,OPEN,False,951,678,11,https://github.com/RajaLehtihet,Preliminary Wacom Tablet support (Win 8 and above),20,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1128,https://github.com/kantoniak,7,https://github.com/glfw/glfw/pull/1128#issuecomment-552190118,This will add preliminary wacom tablet support via WM_POINTER message,"@RajaLehtihet, do you still plan to merge this PR?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1128,2017-11-15T03:18:10Z,,2021-11-21T05:39:48Z,OPEN,False,951,678,11,https://github.com/RajaLehtihet,Preliminary Wacom Tablet support (Win 8 and above),20,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1128,https://github.com/ric-a-tic,8,https://github.com/glfw/glfw/pull/1128#issuecomment-974758312,This will add preliminary wacom tablet support via WM_POINTER message,"Has this been abandoned, or is it waiting on something?
@elmindreda",True,{}
glfw/glfw,https://github.com/glfw/glfw,1131,2017-11-16T15:05:01Z,2017-11-20T17:59:20Z,2017-11-27T17:29:01Z,CLOSED,False,84,18,5,https://github.com/linkmauve,Add Wayland to the CI,4,"['enhancement', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1131,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1131,"This adds two new CI platforms, Wayland with shared libs and with static libs.
There are a few fixes for the Wayland platform bundled, notably it will disable the compose key when xkbcommon is too old to support it.","This adds two new CI platforms, Wayland with shared libs and with static libs.
There are a few fixes for the Wayland platform bundled, notably it will disable the compose key when xkbcommon is too old to support it.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1131,2017-11-16T15:05:01Z,2017-11-20T17:59:20Z,2017-11-27T17:29:01Z,CLOSED,False,84,18,5,https://github.com/linkmauve,Add Wayland to the CI,4,"['enhancement', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1131,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1131#issuecomment-345127094,"This adds two new CI platforms, Wayland with shared libs and with static libs.
There are a few fixes for the Wayland platform bundled, notably it will disable the compose key when xkbcommon is too old to support it.",This should now be good to go. :),True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1132,2017-11-16T19:17:00Z,2017-11-20T17:59:20Z,2017-11-30T14:29:45Z,CLOSED,False,14,14,4,https://github.com/sgowdev,Addressing Some Xcode/Clang Warnings,6,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1132,https://github.com/sgowdev,1,https://github.com/glfw/glfw/pull/1132,"Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.","Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1132,2017-11-16T19:17:00Z,2017-11-20T17:59:20Z,2017-11-30T14:29:45Z,CLOSED,False,14,14,4,https://github.com/sgowdev,Addressing Some Xcode/Clang Warnings,6,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1132,https://github.com/sgowdev,2,https://github.com/glfw/glfw/pull/1132#issuecomment-345070276,"Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.","Awesome, made suggested changes, let me know how it looks!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1132,2017-11-16T19:17:00Z,2017-11-20T17:59:20Z,2017-11-30T14:29:45Z,CLOSED,False,14,14,4,https://github.com/sgowdev,Addressing Some Xcode/Clang Warnings,6,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1132,https://github.com/sgowdev,3,https://github.com/glfw/glfw/pull/1132#issuecomment-345092474,"Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.","@elmindreda not entirely sure why the build is failing: https://ci.appveyor.com/project/elmindreda/glfw/build/1.0.646/job/w2oatgh3rm84oqn0
I added an explicit cast, thinking that would resolve the issue, but it has not.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1132,2017-11-16T19:17:00Z,2017-11-20T17:59:20Z,2017-11-30T14:29:45Z,CLOSED,False,14,14,4,https://github.com/sgowdev,Addressing Some Xcode/Clang Warnings,6,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1132,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1132#issuecomment-345120046,"Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.","The cast has higher precedence than the bitwise operator, so the result gets promoted back up to unsigned long.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1132,2017-11-16T19:17:00Z,2017-11-20T17:59:20Z,2017-11-30T14:29:45Z,CLOSED,False,14,14,4,https://github.com/sgowdev,Addressing Some Xcode/Clang Warnings,6,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1132,https://github.com/sgowdev,5,https://github.com/glfw/glfw/pull/1132#issuecomment-345277978,"Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.",Huzzah!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1132,2017-11-16T19:17:00Z,2017-11-20T17:59:20Z,2017-11-30T14:29:45Z,CLOSED,False,14,14,4,https://github.com/sgowdev,Addressing Some Xcode/Clang Warnings,6,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1132,https://github.com/sgowdev,6,https://github.com/glfw/glfw/pull/1132#issuecomment-345308495,"Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.",@elmindreda GTM?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1132,2017-11-16T19:17:00Z,2017-11-20T17:59:20Z,2017-11-30T14:29:45Z,CLOSED,False,14,14,4,https://github.com/sgowdev,Addressing Some Xcode/Clang Warnings,6,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1132,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1132#issuecomment-345838376,"Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1132,2017-11-16T19:17:00Z,2017-11-20T17:59:20Z,2017-11-30T14:29:45Z,CLOSED,False,14,14,4,https://github.com/sgowdev,Addressing Some Xcode/Clang Warnings,6,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1132,https://github.com/sgowdev,8,https://github.com/glfw/glfw/pull/1132#issuecomment-345838535,"Just a few implicit cast warnings and a strict-prototypes warning.
I didn’t build with CMake though, so its entirely possible that these warnings are being silenced and are therefore expected.
I just prefer to have as few warnings in my workspace as possible, even little ones like these if possible.",:) and thank you for taking the time to review this and merge it in!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1133,2017-11-17T03:39:04Z,2017-12-19T14:31:31Z,2018-01-30T22:21:11Z,CLOSED,False,168,167,32,https://github.com/linkmauve,"Remove trailing whitespace everywhere, and forever",2,['enhancement'],https://github.com/glfw/glfw/pull/1133,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1133,Use Travis to guarantee that.,Use Travis to guarantee that.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1134,2017-11-17T12:18:29Z,2017-11-20T17:59:20Z,2017-11-27T17:32:23Z,CLOSED,False,7,6,1,https://github.com/linkmauve,Gamma will never be supported on Wayland,1,"['Wayland', 'documentation']",https://github.com/glfw/glfw/pull/1134,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1134,This reflects it in the documentation.,This reflects it in the documentation.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1138,2017-11-20T10:40:36Z,2017-11-20T15:57:15Z,2017-11-20T15:57:15Z,MERGED,True,2,2,1,https://github.com/kovidgoyal,Fix spurious error message when using glfwInitHintString,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1138,https://github.com/kovidgoyal,1,https://github.com/glfw/glfw/pull/1138,Patch is self-explanatory,Patch is self-explanatory,True,{}
glfw/glfw,https://github.com/glfw/glfw,1138,2017-11-20T10:40:36Z,2017-11-20T15:57:15Z,2017-11-20T15:57:15Z,MERGED,True,2,2,1,https://github.com/kovidgoyal,Fix spurious error message when using glfwInitHintString,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1138,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1138#issuecomment-345730876,Patch is self-explanatory,"Thank you!
Would you like want the final merged commit to bear your signature? If so, please update the commit message to
Fix spurious error from glfwInitHintString

Closes #1138.

...or similar, for formatting (first line <= 50 characters) and bookkeeping (PR number).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1138,2017-11-20T10:40:36Z,2017-11-20T15:57:15Z,2017-11-20T15:57:15Z,MERGED,True,2,2,1,https://github.com/kovidgoyal,Fix spurious error message when using glfwInitHintString,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1138,https://github.com/kovidgoyal,3,https://github.com/glfw/glfw/pull/1138#issuecomment-345736075,Patch is self-explanatory,Done.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1139,2017-11-20T15:05:52Z,2017-12-19T14:31:31Z,2017-12-19T14:31:31Z,CLOSED,False,31,7,2,https://github.com/kovidgoyal,Support for setting WM_CLASS on a per-window basis,1,"['enhancement', 'X11', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1139,https://github.com/kovidgoyal,1,https://github.com/glfw/glfw/pull/1139,"The current methods of setting WM_CLASS are:

Use the title set a creation time. Does not allow setting the name and class parts of WM_CLASS
Use an init hint. Does nto allow setting different WM_CLASS for different windows in the same application.

My proposed method addresses both od these shortcomings, by encoding the WM_CLASS and title values into a single string demarcated by ASCII start-of-header and record separator bytes (which do not occur in the utf-8 encoding). If the title does not start with start-of-header, the old behavior from (1) is used.","The current methods of setting WM_CLASS are:

Use the title set a creation time. Does not allow setting the name and class parts of WM_CLASS
Use an init hint. Does nto allow setting different WM_CLASS for different windows in the same application.

My proposed method addresses both od these shortcomings, by encoding the WM_CLASS and title values into a single string demarcated by ASCII start-of-header and record separator bytes (which do not occur in the utf-8 encoding). If the title does not start with start-of-header, the old behavior from (1) is used.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1139,2017-11-20T15:05:52Z,2017-12-19T14:31:31Z,2017-12-19T14:31:31Z,CLOSED,False,31,7,2,https://github.com/kovidgoyal,Support for setting WM_CLASS on a per-window basis,1,"['enhancement', 'X11', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1139,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1139#issuecomment-345737924,"The current methods of setting WM_CLASS are:

Use the title set a creation time. Does not allow setting the name and class parts of WM_CLASS
Use an init hint. Does nto allow setting different WM_CLASS for different windows in the same application.

My proposed method addresses both od these shortcomings, by encoding the WM_CLASS and title values into a single string demarcated by ASCII start-of-header and record separator bytes (which do not occur in the utf-8 encoding). If the title does not start with start-of-header, the old behavior from (1) is used.","I believed we had agreed to the current glfwInitHintString solution. If that's insufficient then I need to remove it before 3.3 release and replace it with something else.
What are you planning to set WM_CLASS to that will vary between windows?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1139,2017-11-20T15:05:52Z,2017-12-19T14:31:31Z,2017-12-19T14:31:31Z,CLOSED,False,31,7,2,https://github.com/kovidgoyal,Support for setting WM_CLASS on a per-window basis,1,"['enhancement', 'X11', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1139,https://github.com/kovidgoyal,3,https://github.com/glfw/glfw/pull/1139#issuecomment-345739655,"The current methods of setting WM_CLASS are:

Use the title set a creation time. Does not allow setting the name and class parts of WM_CLASS
Use an init hint. Does nto allow setting different WM_CLASS for different windows in the same application.

My proposed method addresses both od these shortcomings, by encoding the WM_CLASS and title values into a single string demarcated by ASCII start-of-header and record separator bytes (which do not occur in the utf-8 encoding). If the title does not start with start-of-header, the old behavior from (1) is used.","I just finished adding support for daemon mode to kitty. In which the first kitty window becomes the master and subsequent invocations cause the master to open new windows. The new windows can have different name/class values. I apologize for the change, but at the time that I thought the original fix was sufficient, I had not yet conceived of the daemon mode.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1139,2017-11-20T15:05:52Z,2017-12-19T14:31:31Z,2017-12-19T14:31:31Z,CLOSED,False,31,7,2,https://github.com/kovidgoyal,Support for setting WM_CLASS on a per-window basis,1,"['enhancement', 'X11', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1139,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1139#issuecomment-351503992,"The current methods of setting WM_CLASS are:

Use the title set a creation time. Does not allow setting the name and class parts of WM_CLASS
Use an init hint. Does nto allow setting different WM_CLASS for different windows in the same application.

My proposed method addresses both od these shortcomings, by encoding the WM_CLASS and title values into a single string demarcated by ASCII start-of-header and record separator bytes (which do not occur in the utf-8 encoding). If the title does not start with start-of-header, the old behavior from (1) is used.",@kovidgoyal Would 7929504 work for you?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1139,2017-11-20T15:05:52Z,2017-12-19T14:31:31Z,2017-12-19T14:31:31Z,CLOSED,False,31,7,2,https://github.com/kovidgoyal,Support for setting WM_CLASS on a per-window basis,1,"['enhancement', 'X11', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1139,https://github.com/kovidgoyal,5,https://github.com/glfw/glfw/pull/1139#issuecomment-351574033,"The current methods of setting WM_CLASS are:

Use the title set a creation time. Does not allow setting the name and class parts of WM_CLASS
Use an init hint. Does nto allow setting different WM_CLASS for different windows in the same application.

My proposed method addresses both od these shortcomings, by encoding the WM_CLASS and title values into a single string demarcated by ASCII start-of-header and record separator bytes (which do not occur in the utf-8 encoding). If the title does not start with start-of-header, the old behavior from (1) is used.","Looks good to me, thank you.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1139,2017-11-20T15:05:52Z,2017-12-19T14:31:31Z,2017-12-19T14:31:31Z,CLOSED,False,31,7,2,https://github.com/kovidgoyal,Support for setting WM_CLASS on a per-window basis,1,"['enhancement', 'X11', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1139,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1139#issuecomment-352282860,"The current methods of setting WM_CLASS are:

Use the title set a creation time. Does not allow setting the name and class parts of WM_CLASS
Use an init hint. Does nto allow setting different WM_CLASS for different windows in the same application.

My proposed method addresses both od these shortcomings, by encoding the WM_CLASS and title values into a single string demarcated by ASCII start-of-header and record separator bytes (which do not occur in the utf-8 encoding). If the title does not start with start-of-header, the old behavior from (1) is used.",@Spasi How bad an idea would it be for me to merge 7929504 considering LWJGL is (afaict) already shipping and exposing glfwInitHintString?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1139,2017-11-20T15:05:52Z,2017-12-19T14:31:31Z,2017-12-19T14:31:31Z,CLOSED,False,31,7,2,https://github.com/kovidgoyal,Support for setting WM_CLASS on a per-window basis,1,"['enhancement', 'X11', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1139,https://github.com/Spasi,7,https://github.com/glfw/glfw/pull/1139#issuecomment-352287737,"The current methods of setting WM_CLASS are:

Use the title set a creation time. Does not allow setting the name and class parts of WM_CLASS
Use an init hint. Does nto allow setting different WM_CLASS for different windows in the same application.

My proposed method addresses both od these shortcomings, by encoding the WM_CLASS and title values into a single string demarcated by ASCII start-of-header and record separator bytes (which do not occur in the utf-8 encoding). If the title does not start with start-of-header, the old behavior from (1) is used.","@elmindreda It's not a problem. GLFW functions are annotated with the version they were introduced. We're shipping a pre-release build of GLFW 3.3 and glfwInitHintString was added in that version, so we are not bound by any compatibility requirements.",True,"{'THUMBS_UP': ['https://github.com/elmindreda'], 'HEART': ['https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/kovidgoyal,1,https://github.com/glfw/glfw/pull/1141,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","Exposes the platform specific Bell/Beep API to make the default
system beep sound.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/kovidgoyal,2,https://github.com/glfw/glfw/pull/1141#issuecomment-348683640,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.",Isn't mir dead?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/ghuser404,3,https://github.com/glfw/glfw/pull/1141#issuecomment-348685135,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","Perhaps. But I thought things were still being added to those files, to make it compile.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/kovidgoyal,4,https://github.com/glfw/glfw/pull/1141#issuecomment-348685494,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","Aren't backend files conditionally compiled? Anyway, if @elmindreda is OK with actually merging this functionality into glfw, then adding a dummy function to mir_window.c is trivial. But I dont want to spend the time until I know this PR is something she actually wants.",True,{'THUMBS_UP': ['https://github.com/ghuser404']}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1141#issuecomment-349715254,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","This could be a useful thing to have. Will have a proper look after 3.3 is out.
I don't agree with it having a platform-specific ""ioctl"" parameter and would rather have a simple interface like NSBeep.
The Mir backend might be removed now that Mir is implementing the Wayland client API, so depending on timing it may not need a Mir stub at merge time.",True,{'THUMBS_UP': ['https://github.com/ghuser404']}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/kovidgoyal,6,https://github.com/glfw/glfw/pull/1141#issuecomment-349811080,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","The patform specific parameter is there to control the volume/pitch of the beep, which is functionality I need.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1141#issuecomment-349813802,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.",Why do you only need to control this on a single platform?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/kovidgoyal,8,https://github.com/glfw/glfw/pull/1141#issuecomment-349816801,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","I would like to control it on other platforms as well, I just dont know of an API to do so. I dont want to deprive X11 users of the ability to control the bell just because other OSes dont provide that ability.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/ghuser404,9,https://github.com/glfw/glfw/pull/1141#issuecomment-349934262,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","The same could be said about glfwRequestWindowAttention, Windows gives more control then what GLFW provides us with.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/kovidgoyal,10,https://github.com/glfw/glfw/pull/1141#issuecomment-349936853,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","Yes, but I dont need the extra control for request attention, I do need it for bell. Anyway, I dont really want to argue about it. Since I maintain my own fork of glfw in any case, I dont really care if you accept this PR or not.",True,"{'THUMBS_DOWN': ['https://github.com/ghuser404', 'https://github.com/intrigus']}"
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/ghuser404,11,https://github.com/glfw/glfw/pull/1141#issuecomment-349937734,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","I'm not arguing with you, I'm adding bits to the discussion. It's up to @elmindreda to decide what goes into GLFW.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/jadahl,12,https://github.com/glfw/glfw/pull/1141#issuecomment-357164799,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","The ""window bell"" is not strictly an audio feature, it's an accessibility feature. If you need a beep and control the volume and other details about it, just play a sound instead. The bell may just as well be a visual bell on some systems and not have a sound at all.
I think adding any parameter to controlling any ""bell"" is a bad idea, and it will be completely ignored on Linux (as on modern systems, XBell just ends up as a libcanberra sound with all parameters from XBell being ignored IF the bell even happen to be audioable).",True,"{'THUMBS_UP': ['https://github.com/ghuser404', 'https://github.com/elmindreda', 'https://github.com/fwsGonzo']}"
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/r00ster91,13,https://github.com/glfw/glfw/pull/1141#issuecomment-478328305,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","Is this really useful? What is the difference between this (glfwWindowBell(window);) and printf(""\a"");? Don't they both do the same? I assume the alert \a escape sequence is very portable since it's provided by C itself so I don't really see the need in this.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/jadahl,14,https://github.com/glfw/glfw/pull/1141#issuecomment-478506978,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","printf(""\a"");?

I assume this needs the glfw application to run in a terminal, which is probably not very common.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1141,2017-11-20T17:30:38Z,,2020-07-03T14:07:59Z,OPEN,False,67,8,8,https://github.com/kovidgoyal,Implement glfwWindowBell,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1141,https://github.com/jadahl,15,https://github.com/glfw/glfw/pull/1141#issuecomment-478507587,"Exposes the platform specific Bell/Beep API to make the default
system beep sound.","I assume this needs the glfw application to run in a terminal, which is probably not very common.

Also, when the system bell is a visual bell (e.g. used by someone deaf), it'd flash the terminal, instead of the actual GLFW window.",True,"{'THUMBS_UP': ['https://github.com/r00ster91', 'https://github.com/Playermet']}"
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/kovidgoyal,1,https://github.com/glfw/glfw/pull/1143,Pointed out by compiling with -Og -g3 (gcc),Pointed out by compiling with -Og -g3 (gcc),True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1143#issuecomment-347258798,Pointed out by compiling with -Og -g3 (gcc),"This should have been fixed already by 36a5f8c
Can you reproduce your original issue on master?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/kovidgoyal,3,https://github.com/glfw/glfw/pull/1143#issuecomment-347395060,Pointed out by compiling with -Og -g3 (gcc),At the time I sent this PR it was against master.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1143#issuecomment-349169032,Pointed out by compiling with -Og -g3 (gcc),What do you think of 43801d1?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/kovidgoyal,5,https://github.com/glfw/glfw/pull/1143#issuecomment-349181727,Pointed out by compiling with -Og -g3 (gcc),Looks OK to me.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1143#issuecomment-350029616,Pointed out by compiling with -Og -g3 (gcc),@linkmauve Is 43801d1 acceptable?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/linkmauve,7,https://github.com/glfw/glfw/pull/1143#issuecomment-351494325,Pointed out by compiling with -Og -g3 (gcc),"It looks fine, but the (x, y) == (0.0, 0.0) case should never be possible to reach with a conform compositor, hence the previous assert.
Is there still any reason for this btw?  On both clang and gcc, the assert removed the warning that led to this PR.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/elmindreda,8,https://github.com/glfw/glfw/pull/1143#issuecomment-351498565,Pointed out by compiling with -Og -g3 (gcc),"@linkmauve Only that I don't feel entirely comfortable with assert(false).
Would it be okay to instead of the default case (and instead of the above patches) start the function with something like
assert(axis == WL_POINTER_AXIS_HORIZONTAL_SCROLL || axis == WL_POINTER_AXIS_VERTICAL_SCROLL);
to better capture the intent?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/linkmauve,9,https://github.com/glfw/glfw/pull/1143#issuecomment-351499000,Pointed out by compiling with -Og -g3 (gcc),"That would be way nicer than the proposed return, yes. :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1143,2017-11-21T00:34:04Z,2017-12-13T21:00:21Z,2017-12-13T21:00:27Z,CLOSED,False,1,1,1,https://github.com/kovidgoyal,Fix uninitialized variable use,1,['Wayland'],https://github.com/glfw/glfw/pull/1143,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/1143#issuecomment-351520525,Pointed out by compiling with -Og -g3 (gcc),This has been addressed by 36a5f8c and 8dab9f6.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1151,2017-12-01T16:05:01Z,2017-12-20T15:58:12Z,2017-12-20T15:58:38Z,CLOSED,False,10,6,3,https://github.com/linkmauve,"Bump required wayland-protocols version, and fixes",3,"['Wayland', 'build']",https://github.com/glfw/glfw/pull/1151,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1151,"Also make the CI build using this version, to catch potential mismatch when we’ll bump it again in the future.","Also make the CI build using this version, to catch potential mismatch when we’ll bump it again in the future.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1152,2017-12-03T03:27:17Z,2018-01-29T02:59:48Z,2018-01-29T12:17:03Z,MERGED,True,316,48,8,https://github.com/linkmauve,Implement xdg-shell in addition to wl_shell,12,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1152,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1152,"This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.","This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1152,2017-12-03T03:27:17Z,2018-01-29T02:59:48Z,2018-01-29T12:17:03Z,MERGED,True,316,48,8,https://github.com/linkmauve,Implement xdg-shell in addition to wl_shell,12,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1152,https://github.com/jadahl,2,https://github.com/glfw/glfw/pull/1152#issuecomment-353551046,"This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.","@linkmauve Just pushed http://github.com/jadahl/mutter/commits/wip/xdg-shell . It's mostly complete, but still has the https://bugzilla.gnome.org/show_bug.cgi?id=791865 bug as far as I can tell. Anyhow, if you need some xdg-shell implementation test with, you can give that branch a try.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/linkmauve']}"
glfw/glfw,https://github.com/glfw/glfw,1152,2017-12-03T03:27:17Z,2018-01-29T02:59:48Z,2018-01-29T12:17:03Z,MERGED,True,316,48,8,https://github.com/linkmauve,Implement xdg-shell in addition to wl_shell,12,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1152,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1152#issuecomment-355678954,"This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.","I have now tested against @jadahl’s Mutter branch, it works as well as the wl_shell codepath there!
Two small notes though:

There is still somewhat of a race between the xdg_surface::configure and the wl_output::enter events, the only potential issue caused by that is that on HiDPI monitors we will draw the first two frames at scale=1 instead of the monitor’s.
The autoIconify hint defaults to GLFW_TRUE, which is quite surprising as it requires the user to alt-tab to the newly open window instead of it being displayed right away.  It may be the expected behaviour on other systems, but on Linux I’ve never encountered a program doing this.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1152,2017-12-03T03:27:17Z,2018-01-29T02:59:48Z,2018-01-29T12:17:03Z,MERGED,True,316,48,8,https://github.com/linkmauve,Implement xdg-shell in addition to wl_shell,12,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1152,https://github.com/jadahl,4,https://github.com/glfw/glfw/pull/1152#issuecomment-356209362,"This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.","There is still somewhat of a race between the xdg_surface::configure and the wl_output::enter events, the only potential issue caused by that is that on HiDPI monitors we will draw the first two frames at scale=1 instead of the monitor’s.

This is an issue with Wayland and should be addressed there. Nothing GTK+ has the same issue, and there is nothing GLFW can do about it yet really.

The autoIconify hint defaults to GLFW_TRUE, which is quite surprising as it requires the user to alt-tab to the newly open window instead of it being displayed right away. It may be the expected behaviour on other systems, but on Linux I’ve never encountered a program doing this.

Auto-iconify by default? That doesn't sound sane, why would one start a GLFW application minimized?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1152,2017-12-03T03:27:17Z,2018-01-29T02:59:48Z,2018-01-29T12:17:03Z,MERGED,True,316,48,8,https://github.com/linkmauve,Implement xdg-shell in addition to wl_shell,12,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1152,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1152#issuecomment-357224311,"This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.","Auto-iconify doesn't mean the window is created iconified; only that it will be iconified when it later loses input focus. Full screen windows are given input focus on creation on other platforms, to the extent that the GLFW_FOCUSED hint applies only to windowed mode windows (a weirdness that maybe should go away in 4).
I realize very little of this makes sense on Wayland.
However, the intent of auto-iconify has little to do with iconification and more to do with having the topmost undecorated window go away politely at Alt+Tab, mostly on Windows where there's no real high-level full screen window concept (not counting DXGI swapchain hacks in OpenGL ICDs). Wayland seems to have a proper one so it'll be less of an issue there.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1152,2017-12-03T03:27:17Z,2018-01-29T02:59:48Z,2018-01-29T12:17:03Z,MERGED,True,316,48,8,https://github.com/linkmauve,Implement xdg-shell in addition to wl_shell,12,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1152,https://github.com/linkmauve,6,https://github.com/glfw/glfw/pull/1152#issuecomment-357227254,"This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.",So that means I should special-case the first configure event received to avoid iconifying the window when it just got created and not yet activated?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1152,2017-12-03T03:27:17Z,2018-01-29T02:59:48Z,2018-01-29T12:17:03Z,MERGED,True,316,48,8,https://github.com/linkmauve,Implement xdg-shell in addition to wl_shell,12,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1152,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1152#issuecomment-357236662,"This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.","@linkmauve If possible, yes.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1152,2017-12-03T03:27:17Z,2018-01-29T02:59:48Z,2018-01-29T12:17:03Z,MERGED,True,316,48,8,https://github.com/linkmauve,Implement xdg-shell in addition to wl_shell,12,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1152,https://github.com/linkmauve,8,https://github.com/glfw/glfw/pull/1152#issuecomment-359442319,"This protocol matches desktops much better than the deprecated wl_shell, fixing a bunch of race conditions, removing undefined behaviour, adding missing features, and generally providing a much more user-friendly experience.
Since most compositors don’t support it yet, the wl_shell_surface role is kept as fallback for now.
I haven’t tested this new code at all, since my compositor doesn’t support it yet, hence the help wanted label.",This is now fixed.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1158,2017-12-09T21:16:29Z,2017-12-10T11:03:28Z,2017-12-10T16:01:31Z,CLOSED,False,4,3,2,https://github.com/Tuetuopay,[GLES] Include proper `glext` header with GL ES 3.x,1,"['bug', 'duplicate', 'verified', 'Linux']",https://github.com/glfw/glfw/pull/1158,https://github.com/Tuetuopay,1,https://github.com/glfw/glfw/pull/1158,"When using OpenGL ES 3.x headers, setting the GLFW_INCLUDE_GLEXT macro would include GLES2/gl2ext.h instead of the version 3 (GLES3/gl3ext.h).","When using OpenGL ES 3.x headers, setting the GLFW_INCLUDE_GLEXT macro would include GLES2/gl2ext.h instead of the version 3 (GLES3/gl3ext.h).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1158,2017-12-09T21:16:29Z,2017-12-10T11:03:28Z,2017-12-10T16:01:31Z,CLOSED,False,4,3,2,https://github.com/Tuetuopay,[GLES] Include proper `glext` header with GL ES 3.x,1,"['bug', 'duplicate', 'verified', 'Linux']",https://github.com/glfw/glfw/pull/1158,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1158#issuecomment-350512679,"When using OpenGL ES 3.x headers, setting the GLFW_INCLUDE_GLEXT macro would include GLES2/gl2ext.h instead of the version 3 (GLES3/gl3ext.h).",In what environment is this file located at GLES3/gl3ext.h?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1158,2017-12-09T21:16:29Z,2017-12-10T11:03:28Z,2017-12-10T16:01:31Z,CLOSED,False,4,3,2,https://github.com/Tuetuopay,[GLES] Include proper `glext` header with GL ES 3.x,1,"['bug', 'duplicate', 'verified', 'Linux']",https://github.com/glfw/glfw/pull/1158,https://github.com/Tuetuopay,3,https://github.com/glfw/glfw/pull/1158#issuecomment-350515466,"When using OpenGL ES 3.x headers, setting the GLFW_INCLUDE_GLEXT macro would include GLES2/gl2ext.h instead of the version 3 (GLES3/gl3ext.h).","@elmindreda my test environment is Ubuntu 16.04 on a WandBoard Quad (ARM SoC). However, I just checked the norm and it specifies GLES2/gl2ext.h. Bummer. Especially since the glfw package includes ... GLES3/gl2ext.h o_O",True,{}
glfw/glfw,https://github.com/glfw/glfw,1158,2017-12-09T21:16:29Z,2017-12-10T11:03:28Z,2017-12-10T16:01:31Z,CLOSED,False,4,3,2,https://github.com/Tuetuopay,[GLES] Include proper `glext` header with GL ES 3.x,1,"['bug', 'duplicate', 'verified', 'Linux']",https://github.com/glfw/glfw/pull/1158,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1158#issuecomment-350516873,"When using OpenGL ES 3.x headers, setting the GLFW_INCLUDE_GLEXT macro would include GLES2/gl2ext.h instead of the version 3 (GLES3/gl3ext.h).","Ah, yes, sorry about that. That was fixed with ca21a5c in GLFW 3.2. I see that 16.04 only provides 3.1.2, which is the release just before that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1158,2017-12-09T21:16:29Z,2017-12-10T11:03:28Z,2017-12-10T16:01:31Z,CLOSED,False,4,3,2,https://github.com/Tuetuopay,[GLES] Include proper `glext` header with GL ES 3.x,1,"['bug', 'duplicate', 'verified', 'Linux']",https://github.com/glfw/glfw/pull/1158,https://github.com/Tuetuopay,5,https://github.com/glfw/glfw/pull/1158#issuecomment-350540364,"When using OpenGL ES 3.x headers, setting the GLFW_INCLUDE_GLEXT macro would include GLES2/gl2ext.h instead of the version 3 (GLES3/gl3ext.h).","Yep, I ended up building GLFW manually from master... So much for a ""stable"" distro, that ""just works""!
Closing the PR then :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1159,2017-12-13T06:14:53Z,2017-12-13T06:16:04Z,2017-12-13T15:18:36Z,CLOSED,False,238542,2,444,https://github.com/playbar,merge code,7,['invalid'],https://github.com/glfw/glfw/pull/1159,https://github.com/playbar,1,https://github.com/glfw/glfw/pull/1159,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1161,2017-12-19T20:06:12Z,2018-02-25T15:54:45Z,2018-10-25T22:05:54Z,MERGED,True,567,190,5,https://github.com/linkmauve,Implement window decorations,23,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1161,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1161,"This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.","This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.",True,"{'THUMBS_UP': ['https://github.com/ClearlyClaire', 'https://github.com/elmindreda'], 'HOORAY': ['https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1161,2017-12-19T20:06:12Z,2018-02-25T15:54:45Z,2018-10-25T22:05:54Z,MERGED,True,567,190,5,https://github.com/linkmauve,Implement window decorations,23,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1161,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1161#issuecomment-361135592,"This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.",This has been updated to work on xdg-shell too.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1161,2017-12-19T20:06:12Z,2018-02-25T15:54:45Z,2018-10-25T22:05:54Z,MERGED,True,567,190,5,https://github.com/linkmauve,Implement window decorations,23,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1161,https://github.com/gracicot,3,https://github.com/glfw/glfw/pull/1161#issuecomment-361158332,"This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.","I have a question. I use KDE desktop, which implements server side decorations on wayland. Will glfw use those provided by the wayland compositor in that case? Thanks.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1161,2017-12-19T20:06:12Z,2018-02-25T15:54:45Z,2018-10-25T22:05:54Z,MERGED,True,567,190,5,https://github.com/linkmauve,Implement window decorations,23,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1161,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/1161#issuecomment-361238461,"This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.","No, it will neither use them on current master nor with this PR.
I will add support for it once it reaches wayland-protocols, see the discussion on wayland-devel@ in October, it got a few comments to be resolved before its inclusion.",True,{'THUMBS_UP': ['https://github.com/gracicot']}
glfw/glfw,https://github.com/glfw/glfw,1161,2017-12-19T20:06:12Z,2018-02-25T15:54:45Z,2018-10-25T22:05:54Z,MERGED,True,567,190,5,https://github.com/linkmauve,Implement window decorations,23,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1161,https://github.com/emersion,5,https://github.com/glfw/glfw/pull/1161#issuecomment-365694708,"This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.",Note that not all compositors implement the viewporter protocol.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1161,2017-12-19T20:06:12Z,2018-02-25T15:54:45Z,2018-10-25T22:05:54Z,MERGED,True,567,190,5,https://github.com/linkmauve,Implement window decorations,23,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1161,https://github.com/Cloudef,6,https://github.com/glfw/glfw/pull/1161#issuecomment-367277258,"This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.",I just hope compositors implement SSD instead.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1161,2017-12-19T20:06:12Z,2018-02-25T15:54:45Z,2018-10-25T22:05:54Z,MERGED,True,567,190,5,https://github.com/linkmauve,Implement window decorations,23,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1161,https://github.com/emersion,7,https://github.com/glfw/glfw/pull/1161#issuecomment-367280235,"This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.",Update: here's a v2 proposal for a decorations protocol: https://lists.freedesktop.org/archives/wayland-devel/2018-February/037119.html,True,{}
glfw/glfw,https://github.com/glfw/glfw,1161,2017-12-19T20:06:12Z,2018-02-25T15:54:45Z,2018-10-25T22:05:54Z,MERGED,True,567,190,5,https://github.com/linkmauve,Implement window decorations,23,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1161,https://github.com/linkmauve,8,https://github.com/glfw/glfw/pull/1161#issuecomment-433221719,"This PR implements window decorations on Wayland.
The current design is to allocate a single buffer mapped from a single pixel, and to scale it using a wp_viewport on each of the four surfaces.  This prevents buttons and text from being drawn there, but at least for text I’m not sure we want that inside of GLFW.
Resizing from the left, top-left or top side moves the right and bottom sides while they should stay in place, I’m not sure why, but I wouldn’t consider that a blocker either.
Disabling decorations, fullscreen, maximizing, and hidpi have all been tested now.
Here is how it looks on Weston:

Fixes #1068.","Support for server-side decorations has been added in #1341, please test.",True,"{'HOORAY': ['https://github.com/elmindreda', 'https://github.com/gracicot']}"
glfw/glfw,https://github.com/glfw/glfw,1170,2018-01-04T20:04:07Z,2018-01-05T10:43:53Z,2018-01-07T15:10:35Z,CLOSED,False,8,3,2,https://github.com/pmir,Fix HDEVNOTIFY handle leak,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1170,https://github.com/pmir,1,https://github.com/glfw/glfw/pull/1170,"Added a call to UnregisterDeviceNotification with a handle obtained from RegisterDeviceNotificationW
This fixes memory debugger errors such as:
Error #1: LEAK 40 direct bytes 0x0d0ca300-0x0d0ca328 + 620 indirect bytes
# 0 replace_RtlAllocateHeap                      [d:\drmemory_package\common\alloc_replace.c:3770]
# 1 SECHOST.dll!I_ScRegisterDeviceNotification  +0x7e     (0x7424178f <SECHOST.dll+0x1178f>)
# 2 USER32.dll!GetDC                            +0xdd2    (0x73f10913 <USER32.dll+0x60913>)
# 3 USER32.dll!RegisterDeviceNotificationW      +0x31     (0x73ec75e2 <USER32.dll+0x175e2>)
# 4 createHelperWindow                           [(...)glfw/src/win32_init.c:330]
# 5 _glfwPlatformInit                            [(...)glfw/src/win32_init.c:418]","Added a call to UnregisterDeviceNotification with a handle obtained from RegisterDeviceNotificationW
This fixes memory debugger errors such as:
Error #1: LEAK 40 direct bytes 0x0d0ca300-0x0d0ca328 + 620 indirect bytes
# 0 replace_RtlAllocateHeap                      [d:\drmemory_package\common\alloc_replace.c:3770]
# 1 SECHOST.dll!I_ScRegisterDeviceNotification  +0x7e     (0x7424178f <SECHOST.dll+0x1178f>)
# 2 USER32.dll!GetDC                            +0xdd2    (0x73f10913 <USER32.dll+0x60913>)
# 3 USER32.dll!RegisterDeviceNotificationW      +0x31     (0x73ec75e2 <USER32.dll+0x175e2>)
# 4 createHelperWindow                           [(...)glfw/src/win32_init.c:330]
# 5 _glfwPlatformInit                            [(...)glfw/src/win32_init.c:418]",True,{}
glfw/glfw,https://github.com/glfw/glfw,1170,2018-01-04T20:04:07Z,2018-01-05T10:43:53Z,2018-01-07T15:10:35Z,CLOSED,False,8,3,2,https://github.com/pmir,Fix HDEVNOTIFY handle leak,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1170,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1170#issuecomment-355828707,"Added a call to UnregisterDeviceNotification with a handle obtained from RegisterDeviceNotificationW
This fixes memory debugger errors such as:
Error #1: LEAK 40 direct bytes 0x0d0ca300-0x0d0ca328 + 620 indirect bytes
# 0 replace_RtlAllocateHeap                      [d:\drmemory_package\common\alloc_replace.c:3770]
# 1 SECHOST.dll!I_ScRegisterDeviceNotification  +0x7e     (0x7424178f <SECHOST.dll+0x1178f>)
# 2 USER32.dll!GetDC                            +0xdd2    (0x73f10913 <USER32.dll+0x60913>)
# 3 USER32.dll!RegisterDeviceNotificationW      +0x31     (0x73ec75e2 <USER32.dll+0x175e2>)
# 4 createHelperWindow                           [(...)glfw/src/win32_init.c:330]
# 5 _glfwPlatformInit                            [(...)glfw/src/win32_init.c:418]",This has been merged as 9f91bd6. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1171,2018-01-05T20:22:42Z,2018-01-29T01:26:13Z,2018-01-29T12:17:04Z,MERGED,True,81,81,3,https://github.com/linkmauve,Use the _glfw_dlopen/dlsym/dlclose define,1,"['X11', 'Wayland']",https://github.com/glfw/glfw/pull/1171,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1171,"The only functional difference is the change from RTLD_GLOBAL to RTLD_LOCAL, which is more correct in our case as we never want to expose loaded symbols to other shared objects.","The only functional difference is the change from RTLD_GLOBAL to RTLD_LOCAL, which is more correct in our case as we never want to expose loaded symbols to other shared objects.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1172,2018-01-05T21:14:09Z,2018-01-09T21:24:52Z,2018-01-09T21:27:30Z,CLOSED,False,13,6,1,https://github.com/linkmauve,Fix glfwTerminate() segfault when glfwInit() failed,1,"['bug', 'Wayland', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1172,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1172,"All of the _unref() functions require a non-NULL argument, same for dlclose().","All of the _unref() functions require a non-NULL argument, same for dlclose().",True,{}
glfw/glfw,https://github.com/glfw/glfw,1173,2018-01-05T21:37:26Z,2018-01-29T01:34:11Z,2018-01-29T12:17:04Z,MERGED,True,89,6,3,https://github.com/linkmauve,Load libwayland-egl and libwayland-cursor at runtime,3,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1173,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1173,"This depends on #1171, and loads these two helper libraries using dlopen/dlsym/dlclose.
Only libwayland-client remains.","This depends on #1171, and loads these two helper libraries using dlopen/dlsym/dlclose.
Only libwayland-client remains.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1177,2018-01-06T19:05:04Z,2018-03-01T07:29:05Z,2021-10-24T16:12:47Z,MERGED,True,0,1,1,https://github.com/cmarcelo,Remove unused variable in opacity test,1,"['enhancement', 'verified']",https://github.com/glfw/glfw/pull/1177,https://github.com/cmarcelo,1,https://github.com/glfw/glfw/pull/1177,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1180,2018-01-09T10:19:09Z,2018-01-09T20:07:06Z,2018-01-09T20:07:25Z,CLOSED,False,3,1,2,https://github.com/ocornut,Win32: Fix _glfwPlatformShowWindow() from activating the window,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1180,https://github.com/ocornut,1,https://github.com/glfw/glfw/pull/1180,"Fix suggestion, as discussed in #1179","Fix suggestion, as discussed in #1179",True,{}
glfw/glfw,https://github.com/glfw/glfw,1180,2018-01-09T10:19:09Z,2018-01-09T20:07:06Z,2018-01-09T20:07:25Z,CLOSED,False,3,1,2,https://github.com/ocornut,Win32: Fix _glfwPlatformShowWindow() from activating the window,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1180,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1180#issuecomment-356393750,"Fix suggestion, as discussed in #1179",CI is failing because of trailing whitespace in the readme. I took the liberty of fixing that with 20b1220 (and also the non-50/72 commit message).,True,{'THUMBS_UP': ['https://github.com/ocornut']}
glfw/glfw,https://github.com/glfw/glfw,1180,2018-01-09T10:19:09Z,2018-01-09T20:07:06Z,2018-01-09T20:07:25Z,CLOSED,False,3,1,2,https://github.com/ocornut,Win32: Fix _glfwPlatformShowWindow() from activating the window,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1180,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1180#issuecomment-356398980,"Fix suggestion, as discussed in #1179",This has been merged as 20b1220. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1181,2018-01-09T20:35:14Z,2018-01-09T21:40:25Z,2018-01-09T21:58:55Z,CLOSED,False,1,0,1,https://github.com/linkmauve,Implement scale callback on Wayland,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1181,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1181,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1191,2018-01-24T12:44:51Z,2018-01-29T01:03:25Z,2018-01-29T12:17:04Z,MERGED,True,8,0,1,https://github.com/linkmauve,Prevent a race between surface destruction and focus,1,"['bug', 'Wayland']",https://github.com/glfw/glfw/pull/1191,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1191,"The Wayland protocol is asynchronous, by the time we destroy a surface,
the compositor may have sent a wl_keyboard::enter or wl_pointer::enter
events which now point to no surface, yet we receive it after.
To prevent this race, we can just ignore any enter event targetting a
NULL surface.
Fixes #1150.","The Wayland protocol is asynchronous, by the time we destroy a surface,
the compositor may have sent a wl_keyboard::enter or wl_pointer::enter
events which now point to no surface, yet we receive it after.
To prevent this race, we can just ignore any enter event targetting a
NULL surface.
Fixes #1150.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1196,2018-01-27T13:46:20Z,2018-02-07T16:56:14Z,2018-02-07T16:56:14Z,CLOSED,False,6,0,2,https://github.com/a3f,Add support for kernels < 2.6.39,1,['Linux'],https://github.com/glfw/glfw/pull/1196,https://github.com/a3f,1,https://github.com/glfw/glfw/pull/1196,"Broke build for me on a 2.6.32 machine:
http://www.cpantesters.org/cpan/report/d956d128-0339-11e8-b0d1-b6c4abd39192","Broke build for me on a 2.6.32 machine:
http://www.cpantesters.org/cpan/report/d956d128-0339-11e8-b0d1-b6c4abd39192",True,{}
glfw/glfw,https://github.com/glfw/glfw,1196,2018-01-27T13:46:20Z,2018-02-07T16:56:14Z,2018-02-07T16:56:14Z,CLOSED,False,6,0,2,https://github.com/a3f,Add support for kernels < 2.6.39,1,['Linux'],https://github.com/glfw/glfw/pull/1196,https://github.com/xCuri0,2,https://github.com/glfw/glfw/pull/1196#issuecomment-360992654,"Broke build for me on a 2.6.32 machine:
http://www.cpantesters.org/cpan/report/d956d128-0339-11e8-b0d1-b6c4abd39192",Isn't Linux 2.6 EOL ?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1196,2018-01-27T13:46:20Z,2018-02-07T16:56:14Z,2018-02-07T16:56:14Z,CLOSED,False,6,0,2,https://github.com/a3f,Add support for kernels < 2.6.39,1,['Linux'],https://github.com/glfw/glfw/pull/1196,https://github.com/a3f,3,https://github.com/glfw/glfw/pull/1196#issuecomment-360992841,"Broke build for me on a 2.6.32 machine:
http://www.cpantesters.org/cpan/report/d956d128-0339-11e8-b0d1-b6c4abd39192",What's the minimum Linux version supported by GLFW?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1196,2018-01-27T13:46:20Z,2018-02-07T16:56:14Z,2018-02-07T16:56:14Z,CLOSED,False,6,0,2,https://github.com/a3f,Add support for kernels < 2.6.39,1,['Linux'],https://github.com/glfw/glfw/pull/1196,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1196#issuecomment-361007403,"Broke build for me on a 2.6.32 machine:
http://www.cpantesters.org/cpan/report/d956d128-0339-11e8-b0d1-b6c4abd39192","@a3f Wow, that's really old.
We don't have a minimum Linux kernel version (yet) but we are aimed primarily at desktop systems with GPUs, which are usually significantly more up-to-date than this.

Does GLFW behave correctly on that kernel with this fix or does it just compile okay? Have you checked the documentation for the corresponding version of the API?
Are you willing to maintain compatibility with this kernel version in future releases of GLFW so this fix won't rot?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1196,2018-01-27T13:46:20Z,2018-02-07T16:56:14Z,2018-02-07T16:56:14Z,CLOSED,False,6,0,2,https://github.com/a3f,Add support for kernels < 2.6.39,1,['Linux'],https://github.com/glfw/glfw/pull/1196,https://github.com/a3f,5,https://github.com/glfw/glfw/pull/1196#issuecomment-361014549,"Broke build for me on a 2.6.32 machine:
http://www.cpantesters.org/cpan/report/d956d128-0339-11e8-b0d1-b6c4abd39192","I've a Perl module with GLFW as dependency, which was smoke-tested by said v2.6.32 Linux (CentOS-6 supported till 2020). I know it builds correctly with patch applied, but I haven't tested functionality and can't commit to maintaining compatibility in future.
Kernel v2.6.39 was the first to indicate SYN_DROPPED, so in any lower version that event code would never be read, branch never taken and all is well. So, I thought it looks like innocuous enough of a fix to be actually considered.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1202,2018-01-30T15:33:47Z,2018-02-06T11:57:18Z,2018-02-06T13:21:15Z,MERGED,True,0,2,1,https://github.com/linkmauve,Stop checking for resizing,1,['Wayland'],https://github.com/glfw/glfw/pull/1202,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1202,"We didn’t do anything with this variable anyway, and I don’t have anything planned for it either.
Fixes #1197","We didn’t do anything with this variable anyway, and I don’t have anything planned for it either.
Fixes #1197",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1203,2018-01-30T15:40:17Z,2018-02-06T11:57:40Z,2018-02-06T13:21:23Z,MERGED,True,14,7,1,https://github.com/linkmauve,"Fix -Werror in Travis, env gets overriden",1,"['macOS', 'X11', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1203,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1203,"The global env wasn’t global enough.
Prevents #1197 from happening again.","The global env wasn’t global enough.
Prevents #1197 from happening again.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1203,2018-01-30T15:40:17Z,2018-02-06T11:57:40Z,2018-02-06T13:21:23Z,MERGED,True,14,7,1,https://github.com/linkmauve,"Fix -Werror in Travis, env gets overriden",1,"['macOS', 'X11', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1203,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1203#issuecomment-362914547,"The global env wasn’t global enough.
Prevents #1197 from happening again.",Is this ready to merge?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1203,2018-01-30T15:40:17Z,2018-02-06T11:57:40Z,2018-02-06T13:21:23Z,MERGED,True,14,7,1,https://github.com/linkmauve,"Fix -Werror in Travis, env gets overriden",1,"['macOS', 'X11', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1203,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1203#issuecomment-363401321,"The global env wasn’t global enough.
Prevents #1197 from happening again.","Yes, I just wanted to merge #1202 before, in order to avoid failing every build due to master not checking anymore.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1205,2018-01-30T16:52:51Z,2018-01-30T18:25:18Z,2020-10-01T18:36:49Z,MERGED,True,20,1,4,https://github.com/Kangz,Vulkan: make it an error to create surface without GLFW_NO_API,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1205,https://github.com/Kangz,1,https://github.com/glfw/glfw/pull/1205,"OpenGL / OpenGL ES cannot share presentation on a window with Vulkan.
This adds an error to glfwCreateWindowSurface when it is called on a
window without the GLFW_CLIENT_API hint set to GLFW_NO_API. This
prevents undefined bahevior and hard to debug crashes.
Fixes #1194.","OpenGL / OpenGL ES cannot share presentation on a window with Vulkan.
This adds an error to glfwCreateWindowSurface when it is called on a
window without the GLFW_CLIENT_API hint set to GLFW_NO_API. This
prevents undefined bahevior and hard to debug crashes.
Fixes #1194.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1205,2018-01-30T16:52:51Z,2018-01-30T18:25:18Z,2020-10-01T18:36:49Z,MERGED,True,20,1,4,https://github.com/Kangz,Vulkan: make it an error to create surface without GLFW_NO_API,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1205,https://github.com/Kangz,2,https://github.com/glfw/glfw/pull/1205#issuecomment-361658738,"OpenGL / OpenGL ES cannot share presentation on a window with Vulkan.
This adds an error to glfwCreateWindowSurface when it is called on a
window without the GLFW_CLIENT_API hint set to GLFW_NO_API. This
prevents undefined bahevior and hard to debug crashes.
Fixes #1194.","First time contributing to GLFW, please let me know if I missed anything or there are improvements needed.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1205,2018-01-30T16:52:51Z,2018-01-30T18:25:18Z,2020-10-01T18:36:49Z,MERGED,True,20,1,4,https://github.com/Kangz,Vulkan: make it an error to create surface without GLFW_NO_API,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1205,https://github.com/Kangz,3,https://github.com/glfw/glfw/pull/1205#issuecomment-361659502,"OpenGL / OpenGL ES cannot share presentation on a window with Vulkan.
This adds an error to glfwCreateWindowSurface when it is called on a
window without the GLFW_CLIENT_API hint set to GLFW_NO_API. This
prevents undefined bahevior and hard to debug crashes.
Fixes #1194.",Also I checked tested locally that removing the GLFW_CLIENT_API hint triggers the error.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1205,2018-01-30T16:52:51Z,2018-01-30T18:25:18Z,2020-10-01T18:36:49Z,MERGED,True,20,1,4,https://github.com/Kangz,Vulkan: make it an error to create surface without GLFW_NO_API,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1205,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1205#issuecomment-361666084,"OpenGL / OpenGL ES cannot share presentation on a window with Vulkan.
This adds an error to glfwCreateWindowSurface when it is called on a
window without the GLFW_CLIENT_API hint set to GLFW_NO_API. This
prevents undefined bahevior and hard to debug crashes.
Fixes #1194.",I can do the final janitor stuff in you're in a hurry.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1205,2018-01-30T16:52:51Z,2018-01-30T18:25:18Z,2020-10-01T18:36:49Z,MERGED,True,20,1,4,https://github.com/Kangz,Vulkan: make it an error to create surface without GLFW_NO_API,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1205,https://github.com/Kangz,5,https://github.com/glfw/glfw/pull/1205#issuecomment-361678245,"OpenGL / OpenGL ES cannot share presentation on a window with Vulkan.
This adds an error to glfwCreateWindowSurface when it is called on a
window without the GLFW_CLIENT_API hint set to GLFW_NO_API. This
prevents undefined bahevior and hard to debug crashes.
Fixes #1194.","There's no hurry, I was just afk for a while :) Addressed all comments, let me know if there are more changes needed!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1205,2018-01-30T16:52:51Z,2018-01-30T18:25:18Z,2020-10-01T18:36:49Z,MERGED,True,20,1,4,https://github.com/Kangz,Vulkan: make it an error to create surface without GLFW_NO_API,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1205,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1205#issuecomment-361683383,"OpenGL / OpenGL ES cannot share presentation on a window with Vulkan.
This adds an error to glfwCreateWindowSurface when it is called on a
window without the GLFW_CLIENT_API hint set to GLFW_NO_API. This
prevents undefined bahevior and hard to debug crashes.
Fixes #1194.","That was fast, thank you! Just two more then and I'll merge.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1205,2018-01-30T16:52:51Z,2018-01-30T18:25:18Z,2020-10-01T18:36:49Z,MERGED,True,20,1,4,https://github.com/Kangz,Vulkan: make it an error to create surface without GLFW_NO_API,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1205,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1205#issuecomment-361687715,"OpenGL / OpenGL ES cannot share presentation on a window with Vulkan.
This adds an error to glfwCreateWindowSurface when it is called on a
window without the GLFW_CLIENT_API hint set to GLFW_NO_API. This
prevents undefined bahevior and hard to debug crashes.
Fixes #1194.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1210,2018-02-11T20:09:17Z,2018-02-24T20:06:26Z,2018-05-29T13:54:47Z,MERGED,True,89,7,3,https://github.com/linkmauve,Implement key repeat on Wayland,7,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1210,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1210,"This bumps the requested wl_seat version in order to get a wl_keyboard exposing the repeat_info event, adds a timerfd which we poll(), and then we emit a key with the GLFW_REPEAT action.
Fixes #1108.","This bumps the requested wl_seat version in order to get a wl_keyboard exposing the repeat_info event, adds a timerfd which we poll(), and then we emit a key with the GLFW_REPEAT action.
Fixes #1108.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1217,2018-02-22T16:43:19Z,,2019-01-02T22:15:49Z,OPEN,False,1,1,1,https://github.com/fabioarnold,Replace green fullscreen button with zoom button,1,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1217,https://github.com/fabioarnold,1,https://github.com/glfw/glfw/pull/1217,"In an attempt to fix issue #1216 of mixing the native fullscreen feature with glfw's method of fullscreen I forced the green fullscreen button to be replaced by the old zoom button. This prevents the user from entering native fullscreen mode. This has been tested on macOS High Sierra 10.3.3 only.
See https://developer.apple.com/library/content/releasenotes/AppKit/RN-AppKit/#10_11Window under NSWindow Implicit Full Screen.
Admittedly, this is a hack to prevent macOS from implicitly marking a window as fullscreen capable, which might change in the future. So the way to go would be to actually support native fullscreen mode on macOS.","In an attempt to fix issue #1216 of mixing the native fullscreen feature with glfw's method of fullscreen I forced the green fullscreen button to be replaced by the old zoom button. This prevents the user from entering native fullscreen mode. This has been tested on macOS High Sierra 10.3.3 only.
See https://developer.apple.com/library/content/releasenotes/AppKit/RN-AppKit/#10_11Window under NSWindow Implicit Full Screen.
Admittedly, this is a hack to prevent macOS from implicitly marking a window as fullscreen capable, which might change in the future. So the way to go would be to actually support native fullscreen mode on macOS.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1220,2018-02-24T20:57:44Z,2018-03-01T07:31:55Z,2018-03-01T14:24:10Z,MERGED,True,29,0,8,https://github.com/linkmauve,Add a FreeMonitor platform API,1,"['macOS', 'Windows', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1220,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1220,"This fixes the leak of a wl_output object everytime a monitor is freed.
I haven’t checked whether other winsys need a similar custom free() (valgrind is helpful at that), but it shouldn’t hurt to add them later.","This fixes the leak of a wl_output object everytime a monitor is freed.
I haven’t checked whether other winsys need a similar custom free() (valgrind is helpful at that), but it shouldn’t hurt to add them later.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1220,2018-02-24T20:57:44Z,2018-03-01T07:31:55Z,2018-03-01T14:24:10Z,MERGED,True,29,0,8,https://github.com/linkmauve,Add a FreeMonitor platform API,1,"['macOS', 'Windows', 'X11', 'Wayland', 'Mir']",https://github.com/glfw/glfw/pull/1220,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1220#issuecomment-368336392,"This fixes the leak of a wl_output object everytime a monitor is freed.
I haven’t checked whether other winsys need a similar custom free() (valgrind is helpful at that), but it shouldn’t hurt to add them later.",Looks good.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1228,2018-03-05T23:26:50Z,2018-03-27T20:07:31Z,2018-03-28T16:18:21Z,CLOSED,False,20,0,3,https://github.com/linkmauve,Compile platform-specific hints conditionally,1,"['macOS', 'X11']",https://github.com/glfw/glfw/pull/1228,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1228,This prevents them from being compiled on unrelated platforms.,This prevents them from being compiled on unrelated platforms.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1228,2018-03-05T23:26:50Z,2018-03-27T20:07:31Z,2018-03-28T16:18:21Z,CLOSED,False,20,0,3,https://github.com/linkmauve,Compile platform-specific hints conditionally,1,"['macOS', 'X11']",https://github.com/glfw/glfw/pull/1228,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1228#issuecomment-370986176,This prevents them from being compiled on unrelated platforms.,"I avoided doing this to keep the number of platform-specific ifdefs in shared code to a minimum, and to not add complexity to what is only a few lines of code.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1228,2018-03-05T23:26:50Z,2018-03-27T20:07:31Z,2018-03-28T16:18:21Z,CLOSED,False,20,0,3,https://github.com/linkmauve,Compile platform-specific hints conditionally,1,"['macOS', 'X11']",https://github.com/glfw/glfw/pull/1228,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1228#issuecomment-370986943,This prevents them from being compiled on unrelated platforms.,"This change would also need to avoid emitting GLFW_INVALID_ENUM for the platform-specific hints, as setting them is valid on any platform.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1228,2018-03-05T23:26:50Z,2018-03-27T20:07:31Z,2018-03-28T16:18:21Z,CLOSED,False,20,0,3,https://github.com/linkmauve,Compile platform-specific hints conditionally,1,"['macOS', 'X11']",https://github.com/glfw/glfw/pull/1228,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/1228#issuecomment-371361557,This prevents them from being compiled on unrelated platforms.,"Do you prefer to fix setting the hints, or to drop this PR altogether?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1228,2018-03-05T23:26:50Z,2018-03-27T20:07:31Z,2018-03-28T16:18:21Z,CLOSED,False,20,0,3,https://github.com/linkmauve,Compile platform-specific hints conditionally,1,"['macOS', 'X11']",https://github.com/glfw/glfw/pull/1228,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1228#issuecomment-375938443,This prevents them from being compiled on unrelated platforms.,"I would prefer dropping this, though I agree the current design in master isn't ideal.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1233,2018-03-17T11:04:25Z,2018-03-19T19:12:45Z,2018-03-22T15:52:08Z,CLOSED,False,2,2,1,https://github.com/siavashserver,Fixed OpenGL header inclusion guide.,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1233,https://github.com/siavashserver,1,https://github.com/glfw/glfw/pull/1233,Addresses glfw/glfw.github.io#46 thanks to @Postski .,Addresses glfw/glfw.github.io#46 thanks to @Postski .,True,{}
glfw/glfw,https://github.com/glfw/glfw,1233,2018-03-17T11:04:25Z,2018-03-19T19:12:45Z,2018-03-22T15:52:08Z,CLOSED,False,2,2,1,https://github.com/siavashserver,Fixed OpenGL header inclusion guide.,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1233,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1233#issuecomment-374425832,Addresses glfw/glfw.github.io#46 thanks to @Postski .,Thank you! This has been merged as b4c99aa.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1233,2018-03-17T11:04:25Z,2018-03-19T19:12:45Z,2018-03-22T15:52:08Z,CLOSED,False,2,2,1,https://github.com/siavashserver,Fixed OpenGL header inclusion guide.,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1233,https://github.com/siavashserver,3,https://github.com/glfw/glfw/pull/1233#issuecomment-374621847,Addresses glfw/glfw.github.io#46 thanks to @Postski .,You are welcome 👍,True,{}
glfw/glfw,https://github.com/glfw/glfw,1235,2018-03-19T19:23:44Z,2018-03-27T20:03:38Z,2018-05-29T13:53:47Z,MERGED,True,45,10,5,https://github.com/unrelentingtech,Add support for Wayland on FreeBSD and other OSes,1,['Wayland'],https://github.com/glfw/glfw/pull/1235,https://github.com/unrelentingtech,1,https://github.com/glfw/glfw/pull/1235,"re: #1219.
Mostly just ifdefs Linux joystick support to Linux. I also added linking to libepoll-shim in CMake though.
BTW, any plans for selecting between Wayland and X11 dynamically (on the fly) like the big toolkits (incl. SDL) do? Some projects are already implementing this by themselves — by building two copies of bundled glfw and dlopen'ing one of them depending on the desired backend…","re: #1219.
Mostly just ifdefs Linux joystick support to Linux. I also added linking to libepoll-shim in CMake though.
BTW, any plans for selecting between Wayland and X11 dynamically (on the fly) like the big toolkits (incl. SDL) do? Some projects are already implementing this by themselves — by building two copies of bundled glfw and dlopen'ing one of them depending on the desired backend…",True,{}
glfw/glfw,https://github.com/glfw/glfw,1235,2018-03-19T19:23:44Z,2018-03-27T20:03:38Z,2018-05-29T13:53:47Z,MERGED,True,45,10,5,https://github.com/unrelentingtech,Add support for Wayland on FreeBSD and other OSes,1,['Wayland'],https://github.com/glfw/glfw/pull/1235,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1235#issuecomment-376656296,"re: #1219.
Mostly just ifdefs Linux joystick support to Linux. I also added linking to libepoll-shim in CMake though.
BTW, any plans for selecting between Wayland and X11 dynamically (on the fly) like the big toolkits (incl. SDL) do? Some projects are already implementing this by themselves — by building two copies of bundled glfw and dlopen'ing one of them depending on the desired backend…","Selecting the backend dynamically depends on #1174 (and similar ones for X11), after which we will have to move _glfwPlatform* functions to be static and put into a “backend struct” which every function will call into.
That probably won’t end up in 3.3, but is definitely planned.
And LGTM, I also tested on Linux and found no regression, so I’ll merge it. :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1253,2018-04-15T08:40:03Z,2018-04-25T20:10:17Z,2018-04-25T20:10:18Z,CLOSED,False,2,0,1,https://github.com/anoever,Fix windows build with WINVER >= Vista.,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1253,https://github.com/anoever,1,https://github.com/glfw/glfw/pull/1253,"In 32e78ae the definition of DWM_BLURBEHIND in win32_platform.h was
moved behind a WINVER < 0x0600 preprocessor check (< Vista). This broke
the build for WINVER >= 0x0600 since DWM_BLURBEHIND is not defined.
Starting with Vista DWM_BLURBEHIND is available in Dwmapi.h (see 1).
So we can just include the header directly on Vista and above.","In 32e78ae the definition of DWM_BLURBEHIND in win32_platform.h was
moved behind a WINVER < 0x0600 preprocessor check (< Vista). This broke
the build for WINVER >= 0x0600 since DWM_BLURBEHIND is not defined.
Starting with Vista DWM_BLURBEHIND is available in Dwmapi.h (see 1).
So we can just include the header directly on Vista and above.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1258,2018-04-20T13:05:51Z,,2021-10-29T13:06:22Z,OPEN,False,40,9,5,https://github.com/moretromain,Adding native double-click support on win32,3,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1258,https://github.com/moretromain,1,https://github.com/glfw/glfw/pull/1258,"On win32, native double-click support is done by:

Add 'CS_DBLCLKS' flag to the window class style
Adding handling for the four WM_NBUTTONDBLCLK message types (L, M, R and X buttons)

The message sequence for a double-click then is: WM_NBUTTONDOWN => WN_NBUTTONUP => WN_NBUTTONDBLCLK => WN_NBUTTONUP (as indicated in the Remarks section here)
Therefore, handling double-click in GLFW can be done by adding a 'GLFW_MULTI' state for mouse buttons. Input sequence on double-click then becomes: GLFW_PRESS => GLFW_RELEASE => GLFW_MULTI => GLFW_RELEASE, the GLFW_MULTI state now indicates that the second press event is a native double-click.
There is no need to change the acquire/release sequence, as the second click is handled as a regular mouse down event, and will be followed by a mouse up.","On win32, native double-click support is done by:

Add 'CS_DBLCLKS' flag to the window class style
Adding handling for the four WM_NBUTTONDBLCLK message types (L, M, R and X buttons)

The message sequence for a double-click then is: WM_NBUTTONDOWN => WN_NBUTTONUP => WN_NBUTTONDBLCLK => WN_NBUTTONUP (as indicated in the Remarks section here)
Therefore, handling double-click in GLFW can be done by adding a 'GLFW_MULTI' state for mouse buttons. Input sequence on double-click then becomes: GLFW_PRESS => GLFW_RELEASE => GLFW_MULTI => GLFW_RELEASE, the GLFW_MULTI state now indicates that the second press event is a native double-click.
There is no need to change the acquire/release sequence, as the second click is handled as a regular mouse down event, and will be followed by a mouse up.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1261,2018-05-02T13:33:18Z,,2019-05-28T13:09:16Z,OPEN,False,189,84,5,https://github.com/LukasBanana,Single GLRC for multiple windows,8,[],https://github.com/glfw/glfw/pull/1261,https://github.com/LukasBanana,1,https://github.com/glfw/glfw/pull/1261,"In my branch single-GLRC I added a new CMake option GLFW_OPENGL_SINGLE_GLRC (OFF by default), to let GLFW create only a single OpenGL context but to be used for multiple windows when a shared context is specified.
I'm using it to have multiple windows but avoiding resource management of OpenGL objects that are not sharable between contexts: Vertex Array Objects and Query Objects for instance.
For this implementation, I added the global macro _GLFW_OPENGL_SINGLE_GLRC (when the respective CMake option is ON) and the following member to the _GLFWcontext struct:
#ifdef _GLFW_OPENGL_SINGLE_GLRC
    // Specifies whether this _GLFWcontext has its own GLRC object.
    // If not, it must not delete the GLRC object on destruction.
    GLFWbool            customctx;
#endif
I implemented it for Windows (WGL), Linux (GLX), and MacOS (NSGL) contexts, but not for EGL.
I tested the implementation with the ""sharing"" Example on Windows 10, Kubuntu 17.10 (VirtualBox), and macOS High Sierra.
The functions wglMakeCurrent and glXMakeCurrent functions allow to specify a new drawable but the previous GL context can remain. On MacOS, the view is exchanged:
static void makeContextCurrentNSGL(_GLFWwindow* window)
{
    ...
#ifdef _GLFW_OPENGL_SINGLE_GLRC
        [window->context.nsgl.object setView:window->ns.view];
        [window->context.nsgl.object update];
#endif
        [window->context.nsgl.object makeCurrentContext];
    ...
}","In my branch single-GLRC I added a new CMake option GLFW_OPENGL_SINGLE_GLRC (OFF by default), to let GLFW create only a single OpenGL context but to be used for multiple windows when a shared context is specified.
I'm using it to have multiple windows but avoiding resource management of OpenGL objects that are not sharable between contexts: Vertex Array Objects and Query Objects for instance.
For this implementation, I added the global macro _GLFW_OPENGL_SINGLE_GLRC (when the respective CMake option is ON) and the following member to the _GLFWcontext struct:
#ifdef _GLFW_OPENGL_SINGLE_GLRC
    // Specifies whether this _GLFWcontext has its own GLRC object.
    // If not, it must not delete the GLRC object on destruction.
    GLFWbool            customctx;
#endif
I implemented it for Windows (WGL), Linux (GLX), and MacOS (NSGL) contexts, but not for EGL.
I tested the implementation with the ""sharing"" Example on Windows 10, Kubuntu 17.10 (VirtualBox), and macOS High Sierra.
The functions wglMakeCurrent and glXMakeCurrent functions allow to specify a new drawable but the previous GL context can remain. On MacOS, the view is exchanged:
static void makeContextCurrentNSGL(_GLFWwindow* window)
{
    ...
#ifdef _GLFW_OPENGL_SINGLE_GLRC
        [window->context.nsgl.object setView:window->ns.view];
        [window->context.nsgl.object update];
#endif
        [window->context.nsgl.object makeCurrentContext];
    ...
}",True,{}
glfw/glfw,https://github.com/glfw/glfw,1261,2018-05-02T13:33:18Z,,2019-05-28T13:09:16Z,OPEN,False,189,84,5,https://github.com/LukasBanana,Single GLRC for multiple windows,8,[],https://github.com/glfw/glfw/pull/1261,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1261#issuecomment-496330805,"In my branch single-GLRC I added a new CMake option GLFW_OPENGL_SINGLE_GLRC (OFF by default), to let GLFW create only a single OpenGL context but to be used for multiple windows when a shared context is specified.
I'm using it to have multiple windows but avoiding resource management of OpenGL objects that are not sharable between contexts: Vertex Array Objects and Query Objects for instance.
For this implementation, I added the global macro _GLFW_OPENGL_SINGLE_GLRC (when the respective CMake option is ON) and the following member to the _GLFWcontext struct:
#ifdef _GLFW_OPENGL_SINGLE_GLRC
    // Specifies whether this _GLFWcontext has its own GLRC object.
    // If not, it must not delete the GLRC object on destruction.
    GLFWbool            customctx;
#endif
I implemented it for Windows (WGL), Linux (GLX), and MacOS (NSGL) contexts, but not for EGL.
I tested the implementation with the ""sharing"" Example on Windows 10, Kubuntu 17.10 (VirtualBox), and macOS High Sierra.
The functions wglMakeCurrent and glXMakeCurrent functions allow to specify a new drawable but the previous GL context can remain. On MacOS, the view is exchanged:
static void makeContextCurrentNSGL(_GLFWwindow* window)
{
    ...
#ifdef _GLFW_OPENGL_SINGLE_GLRC
        [window->context.nsgl.object setView:window->ns.view];
        [window->context.nsgl.object update];
#endif
        [window->context.nsgl.object makeCurrentContext];
    ...
}","Are there any downsides to having a single GLRC across multiple windows? Unless there's something I'm overlooking, it seems that this would be a sensible default behaviour so long as it is still possible for the user to request separate shared contexts if they need them for some reason.
Possible candidate for 3.4.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1261,2018-05-02T13:33:18Z,,2019-05-28T13:09:16Z,OPEN,False,189,84,5,https://github.com/LukasBanana,Single GLRC for multiple windows,8,[],https://github.com/glfw/glfw/pull/1261,https://github.com/LukasBanana,3,https://github.com/glfw/glfw/pull/1261#issuecomment-496509158,"In my branch single-GLRC I added a new CMake option GLFW_OPENGL_SINGLE_GLRC (OFF by default), to let GLFW create only a single OpenGL context but to be used for multiple windows when a shared context is specified.
I'm using it to have multiple windows but avoiding resource management of OpenGL objects that are not sharable between contexts: Vertex Array Objects and Query Objects for instance.
For this implementation, I added the global macro _GLFW_OPENGL_SINGLE_GLRC (when the respective CMake option is ON) and the following member to the _GLFWcontext struct:
#ifdef _GLFW_OPENGL_SINGLE_GLRC
    // Specifies whether this _GLFWcontext has its own GLRC object.
    // If not, it must not delete the GLRC object on destruction.
    GLFWbool            customctx;
#endif
I implemented it for Windows (WGL), Linux (GLX), and MacOS (NSGL) contexts, but not for EGL.
I tested the implementation with the ""sharing"" Example on Windows 10, Kubuntu 17.10 (VirtualBox), and macOS High Sierra.
The functions wglMakeCurrent and glXMakeCurrent functions allow to specify a new drawable but the previous GL context can remain. On MacOS, the view is exchanged:
static void makeContextCurrentNSGL(_GLFWwindow* window)
{
    ...
#ifdef _GLFW_OPENGL_SINGLE_GLRC
        [window->context.nsgl.object setView:window->ns.view];
        [window->context.nsgl.object update];
#endif
        [window->context.nsgl.object makeCurrentContext];
    ...
}","It's been a while that I used my GLFW fork at work, but I remember that we had an issue on one platform. I don't remember if it was Mac or Linux, but we had a customized Linux, so maybe it was that.
However, I would still recommend to use it as an option but not as the default one.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1270,2018-05-19T09:55:32Z,,2018-05-22T18:22:26Z,OPEN,False,13,4,6,https://github.com/johron,Added variable to allow user to specify targets folder,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1270,https://github.com/johron,1,https://github.com/glfw/glfw/pull/1270,"Added a variable so that the user can configure where to store the targets generated from GLFW.
Attempted to follow contribution guidelines to the best of my ability - would appreciate feedback if I've missed something.
//Johan","Added a variable so that the user can configure where to store the targets generated from GLFW.
Attempted to follow contribution guidelines to the best of my ability - would appreciate feedback if I've missed something.
//Johan",True,{}
glfw/glfw,https://github.com/glfw/glfw,1271,2018-05-20T11:03:41Z,2018-09-11T12:28:46Z,2018-10-24T14:36:48Z,MERGED,True,53,14,3,https://github.com/linkmauve,Use HiDPI cursors on scale>1 monitors on Wayland,3,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1271,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1271,"This prevents them from looking blurry.
Note that only the NULL cursor and the ones used for decorations (resize, etc.) are rendered at scale=2 currently.  The cursors created by glfwCreateStandardCursor() and glfwCreateCursor() contain a single image which is specified to be scale=1.
In the future, GLFWcursor should be extended to support that usecase, as well as animations.","This prevents them from looking blurry.
Note that only the NULL cursor and the ones used for decorations (resize, etc.) are rendered at scale=2 currently.  The cursors created by glfwCreateStandardCursor() and glfwCreateCursor() contain a single image which is specified to be scale=1.
In the future, GLFWcursor should be extended to support that usecase, as well as animations.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1271,2018-05-20T11:03:41Z,2018-09-11T12:28:46Z,2018-10-24T14:36:48Z,MERGED,True,53,14,3,https://github.com/linkmauve,Use HiDPI cursors on scale>1 monitors on Wayland,3,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1271,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1271#issuecomment-420251160,"This prevents them from looking blurry.
Note that only the NULL cursor and the ones used for decorations (resize, etc.) are rendered at scale=2 currently.  The cursors created by glfwCreateStandardCursor() and glfwCreateCursor() contain a single image which is specified to be scale=1.
In the future, GLFWcursor should be extended to support that usecase, as well as animations.","Thanks to the improvements from #1323, standard cursors now support HiDPI too, only user-defined ones still don’t.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1273,2018-05-20T13:29:01Z,,2018-10-28T10:15:45Z,OPEN,False,119,40,5,https://github.com/linkmauve,Add support for arbitrary video modes on Wayland,2,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1273,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1273,This makes fullscreen glfwCreateWindow() and glfwSetWindowMonitor() obey the requested width and height parameters when the compositor supports the wp_viewporter protocol.  The previous behaviour is kept when this protocol isn’t supported.,This makes fullscreen glfwCreateWindow() and glfwSetWindowMonitor() obey the requested width and height parameters when the compositor supports the wp_viewporter protocol.  The previous behaviour is kept when this protocol isn’t supported.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1275,2018-05-23T13:52:09Z,2018-05-29T13:51:37Z,2018-05-29T13:52:12Z,MERGED,True,65,7,7,https://github.com/dougbinks,Focus on show PR for #1189,8,['enhancement'],https://github.com/glfw/glfw/pull/1275,https://github.com/dougbinks,1,https://github.com/glfw/glfw/pull/1275,"Adds GLFW_FOCUS_ON_SHOW window hint and attribute for issue #1189.
This is a platform independent change which preserves behaviour for all applications written to the GLFW API. I believe I have implemented all requirements as per ""Contributing a feature"" guidelines.
If changes are needed I'm happy to do them. I can also clean the commit timeline if needed.","Adds GLFW_FOCUS_ON_SHOW window hint and attribute for issue #1189.
This is a platform independent change which preserves behaviour for all applications written to the GLFW API. I believe I have implemented all requirements as per ""Contributing a feature"" guidelines.
If changes are needed I'm happy to do them. I can also clean the commit timeline if needed.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1275,2018-05-23T13:52:09Z,2018-05-29T13:51:37Z,2018-05-29T13:52:12Z,MERGED,True,65,7,7,https://github.com/dougbinks,Focus on show PR for #1189,8,['enhancement'],https://github.com/glfw/glfw/pull/1275,https://github.com/dougbinks,2,https://github.com/glfw/glfw/pull/1275#issuecomment-392770318,"Adds GLFW_FOCUS_ON_SHOW window hint and attribute for issue #1189.
This is a platform independent change which preserves behaviour for all applications written to the GLFW API. I believe I have implemented all requirements as per ""Contributing a feature"" guidelines.
If changes are needed I'm happy to do them. I can also clean the commit timeline if needed.",Thanks for review and finding these. I think I've changed these as per request in the latest commit.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1275,2018-05-23T13:52:09Z,2018-05-29T13:51:37Z,2018-05-29T13:52:12Z,MERGED,True,65,7,7,https://github.com/dougbinks,Focus on show PR for #1189,8,['enhancement'],https://github.com/glfw/glfw/pull/1275,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1275#issuecomment-392784402,"Adds GLFW_FOCUS_ON_SHOW window hint and attribute for issue #1189.
This is a platform independent change which preserves behaviour for all applications written to the GLFW API. I believe I have implemented all requirements as per ""Contributing a feature"" guidelines.
If changes are needed I'm happy to do them. I can also clean the commit timeline if needed.",Thank you for the speedy fix!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1279,2018-05-28T22:30:17Z,,2018-05-29T13:13:09Z,OPEN,False,68,13,4,https://github.com/Pokechu22,Fix disabled cursor mode over remote desktop,1,"['bug', 'Windows']",https://github.com/glfw/glfw/pull/1279,https://github.com/Pokechu22,1,https://github.com/glfw/glfw/pull/1279,"There were two major issues:


RDP uses MOUSE_MOVE_ABSOLUTE for its input events, and the
implementation of this was incorrect.  Although poorly documented,
the values actually range from 0-65535 and represent monitor positions,
instead of being positions beforehand.  The equally poorly documented
MOUSE_VIRTUAL_DESKTOP flag specifies whether or not to use the
SCREEN or VIRTUALSCREEN system metrics.


Using SetCursor(NULL) causes SetCursorPos to behave incorrectly
over RDP; it doesn't actually move it on the connected machine.
This has been fixed by creating an invisible cursor, which does
get moved correctly.


Aside from that, the center of the window is now cached and the cursor
test now supports pressing M to move the cursor to the center.
Fixes #1276.","There were two major issues:


RDP uses MOUSE_MOVE_ABSOLUTE for its input events, and the
implementation of this was incorrect.  Although poorly documented,
the values actually range from 0-65535 and represent monitor positions,
instead of being positions beforehand.  The equally poorly documented
MOUSE_VIRTUAL_DESKTOP flag specifies whether or not to use the
SCREEN or VIRTUALSCREEN system metrics.


Using SetCursor(NULL) causes SetCursorPos to behave incorrectly
over RDP; it doesn't actually move it on the connected machine.
This has been fixed by creating an invisible cursor, which does
get moved correctly.


Aside from that, the center of the window is now cached and the cursor
test now supports pressing M to move the cursor to the center.
Fixes #1276.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1285,2018-06-08T13:17:39Z,2022-03-03T22:57:26Z,2022-03-21T17:34:26Z,CLOSED,False,266,73,8,https://github.com/OlivierSohn,Fix a race condition between glfwPostEmptyEvent and glfwWait***Events on X11 and Wayland,1,"['bug', 'X11', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1285,https://github.com/OlivierSohn,1,https://github.com/glfw/glfw/pull/1285,"This PR closes #1281 by using a self pipe to write when an empty even has been posted, and by using ppoll in place of select to wait on events.
Benchmarks on Ubuntu/x11 have shown that the timeout precision is unchanged.
@kovidgoyal tested a prior version on wayland, it was working. Since then, I had to make changes while cherrypicking from his fork. It compiles, but I couldn't test it. Could someone run this program to verify that the bug is fixed on wayland too?
https://github.com/OlivierSohn/repro-evt/blob/master/main.cpp
Thanks!","This PR closes #1281 by using a self pipe to write when an empty even has been posted, and by using ppoll in place of select to wait on events.
Benchmarks on Ubuntu/x11 have shown that the timeout precision is unchanged.
@kovidgoyal tested a prior version on wayland, it was working. Since then, I had to make changes while cherrypicking from his fork. It compiles, but I couldn't test it. Could someone run this program to verify that the bug is fixed on wayland too?
https://github.com/OlivierSohn/repro-evt/blob/master/main.cpp
Thanks!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1285,2018-06-08T13:17:39Z,2022-03-03T22:57:26Z,2022-03-21T17:34:26Z,CLOSED,False,266,73,8,https://github.com/OlivierSohn,Fix a race condition between glfwPostEmptyEvent and glfwWait***Events on X11 and Wayland,1,"['bug', 'X11', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1285,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1285#issuecomment-395766215,"This PR closes #1281 by using a self pipe to write when an empty even has been posted, and by using ppoll in place of select to wait on events.
Benchmarks on Ubuntu/x11 have shown that the timeout precision is unchanged.
@kovidgoyal tested a prior version on wayland, it was working. Since then, I had to make changes while cherrypicking from his fork. It compiles, but I couldn't test it. Could someone run this program to verify that the bug is fixed on wayland too?
https://github.com/OlivierSohn/repro-evt/blob/master/main.cpp
Thanks!","I see you are using ppoll(), according to my manpages this is Linux-specific, so you may want to keep using select() like the rest of the code.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1285,2018-06-08T13:17:39Z,2022-03-03T22:57:26Z,2022-03-21T17:34:26Z,CLOSED,False,266,73,8,https://github.com/OlivierSohn,Fix a race condition between glfwPostEmptyEvent and glfwWait***Events on X11 and Wayland,1,"['bug', 'X11', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1285,https://github.com/OlivierSohn,3,https://github.com/glfw/glfw/pull/1285#issuecomment-395769130,"This PR closes #1281 by using a self pipe to write when an empty even has been posted, and by using ppoll in place of select to wait on events.
Benchmarks on Ubuntu/x11 have shown that the timeout precision is unchanged.
@kovidgoyal tested a prior version on wayland, it was working. Since then, I had to make changes while cherrypicking from his fork. It compiles, but I couldn't test it. Could someone run this program to verify that the bug is fixed on wayland too?
https://github.com/OlivierSohn/repro-evt/blob/master/main.cpp
Thanks!","@linkmauve do you have in mind a platform that has not this function ? I'm quoting @kovidgoyal here:

As far as i can see, ppoll is available on linux and freebsd and openbsd and on netbsd under the name pollts, so it's probably fine to use it.

(the related discussion is here)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1285,2018-06-08T13:17:39Z,2022-03-03T22:57:26Z,2022-03-21T17:34:26Z,CLOSED,False,266,73,8,https://github.com/OlivierSohn,Fix a race condition between glfwPostEmptyEvent and glfwWait***Events on X11 and Wayland,1,"['bug', 'X11', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1285,https://github.com/kovidgoyal,4,https://github.com/glfw/glfw/pull/1285#issuecomment-395770761,"This PR closes #1281 by using a self pipe to write when an empty even has been posted, and by using ppoll in place of select to wait on events.
Benchmarks on Ubuntu/x11 have shown that the timeout precision is unchanged.
@kovidgoyal tested a prior version on wayland, it was working. Since then, I had to make changes while cherrypicking from his fork. It compiles, but I couldn't test it. Could someone run this program to verify that the bug is fixed on wayland too?
https://github.com/OlivierSohn/repro-evt/blob/master/main.cpp
Thanks!","Not to mention that since @linkmauve did not accept my code to not use timerfd in the wayland backend anyway, it's not like the code is portable currently in any case.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1285,2018-06-08T13:17:39Z,2022-03-03T22:57:26Z,2022-03-21T17:34:26Z,CLOSED,False,266,73,8,https://github.com/OlivierSohn,Fix a race condition between glfwPostEmptyEvent and glfwWait***Events on X11 and Wayland,1,"['bug', 'X11', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1285,https://github.com/OlivierSohn,5,https://github.com/glfw/glfw/pull/1285#issuecomment-395775227,"This PR closes #1281 by using a self pipe to write when an empty even has been posted, and by using ppoll in place of select to wait on events.
Benchmarks on Ubuntu/x11 have shown that the timeout precision is unchanged.
@kovidgoyal tested a prior version on wayland, it was working. Since then, I had to make changes while cherrypicking from his fork. It compiles, but I couldn't test it. Could someone run this program to verify that the bug is fixed on wayland too?
https://github.com/OlivierSohn/repro-evt/blob/master/main.cpp
Thanks!","@linkmauve I'm a bit reluctant to use select now, that would imply a lot of changes to the code (and make the code less ""nice"" I think). But if it is a must-have, I'll happily let someone add a commit to this PR to do the change.
Note that we could also use poll but it exhibits a coarser timeout granularity (1 millisecond vs 80 microseconds according to my benchmarks), this is the reason why I preferred using ppoll.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1285,2018-06-08T13:17:39Z,2022-03-03T22:57:26Z,2022-03-21T17:34:26Z,CLOSED,False,266,73,8,https://github.com/OlivierSohn,Fix a race condition between glfwPostEmptyEvent and glfwWait***Events on X11 and Wayland,1,"['bug', 'X11', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1285,https://github.com/OlivierSohn,6,https://github.com/glfw/glfw/pull/1285#issuecomment-680817589,"This PR closes #1281 by using a self pipe to write when an empty even has been posted, and by using ppoll in place of select to wait on events.
Benchmarks on Ubuntu/x11 have shown that the timeout precision is unchanged.
@kovidgoyal tested a prior version on wayland, it was working. Since then, I had to make changes while cherrypicking from his fork. It compiles, but I couldn't test it. Could someone run this program to verify that the bug is fixed on wayland too?
https://github.com/OlivierSohn/repro-evt/blob/master/main.cpp
Thanks!","This would need a rebase, I tried to give myself 5 minutes to fix the conflicts but it's a bit more complicated than I first thought...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1304,2018-07-17T18:10:48Z,2018-09-04T06:13:57Z,2021-10-24T16:28:08Z,CLOSED,False,39,12,2,https://github.com/amerkoleci,Fix IsWindowsVersionOrGreater usage,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1304,https://github.com/amerkoleci,1,https://github.com/glfw/glfw/pull/1304,"Use RtlVerifyVersionInfo for IsWindowsVersionOrGreater check, fixes #1294","Use RtlVerifyVersionInfo for IsWindowsVersionOrGreater check, fixes #1294",True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/a3f,1,https://github.com/glfw/glfw/pull/1307,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.","Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/AndySomogyi,2,https://github.com/glfw/glfw/pull/1307#issuecomment-433557005,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.","How does this resolve the stb_image issue?
GLFW includes  #inlclude stb_image.h, and defines an implementation for these image functions by defining  STB_IMAGE_IMPLEMENTATION.
The issue I've ran into is other programs also include stb_image, and you end up with duplicate symbols.
It would be nice is there was a clean way around this.
I don't know, maybe a macro that renames the stb_image functions???",True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/a3f,3,https://github.com/glfw/glfw/pull/1307#issuecomment-433603081,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.","It would be nice is there was a clean way around this.

Well, the other programs could omit defining STB_IMAGE_IMPLEMENTATON if GLFW already provides it? Why would you want to keep two versions of stb_image.h functions?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/a3f,4,https://github.com/glfw/glfw/pull/1307#issuecomment-433603329,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.",@elmindreda Did you have time to review whether you would want this PR?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/AndySomogyi,5,https://github.com/glfw/glfw/pull/1307#issuecomment-433942473,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.","You most certainly would not want to keep two versions of stb_image.h, but that's the problem with these header only libraries.
Frequently, existing programs include str_image.h, and use functions out of it, but when the link with glfw statically, you get duplicate symbols.
That means existing programs need to change their implementation.
Furthermore, what if an existing program uses a different version of stb_image.h than glfw, then in this case, you could end up with a different function implementing some stb_image function.
I don't know a clean solution off hand, but this is a conversation we should really have to try to figure out a clean solution that does not break existing programs.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/tombsar,6,https://github.com/glfw/glfw/pull/1307#issuecomment-434049169,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.","Forgive me if I'm misunderstanding, but what is the stb_image issue? I wasn't aware that GLFW did include stb_image.h (with or without implementations), and Github search isn't showing anything except in one of the example programs.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/AndySomogyi,7,https://github.com/glfw/glfw/pull/1307#issuecomment-434065437,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.","Nevermind, it's all good.
I was trying to statically link nanogui, and it itself include str_image, along with some example programs which also include str_image. I was concerned about the wrong thing.
Note, this is why I'm leery about header-only libraries.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/a3f,8,https://github.com/glfw/glfw/pull/1307#issuecomment-451739642,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.",Any news on this?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/a3f,9,https://github.com/glfw/glfw/pull/1307#issuecomment-561890471,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.",I rebased again on top of master. Any feedback what's holding the merge of this pull request back?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1307,2018-07-29T20:31:15Z,2021-08-16T19:16:33Z,2021-08-16T20:06:03Z,CLOSED,False,25,15,3,https://github.com/a3f,Facilitate embedding GLFW objects into user static libraries,2,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1307,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/1307#issuecomment-899784399,"Some projects (e.g. raylib, nanogui) ship a static library that has GLFW
included (and reexports its symbols). Unfortunately, it's not possible to do so portably with the
current CMake setup.
The proper  (CMake 2.8.8+) way seems to be to define a CMake OBJECT library target and use
that as source for the glfw target.

User code that is interested in the glfw target is unaffected and can
keep using it normally.
User code that wants the objects to link into a static library just
needs to supply $<TARGET_OBJECTS:glfw_objlib> as part of the source.

After building the static library, it might be desirable to include it in the generated
pkg-config file. For that the other commit exports GLFW_PKG_DEPS and GLFW_PKG_LIBS
for use in client code.","Thank you for this PR and for your patience.
The new optional CMake variable GLFW_LIBRARY_TYPE added with d838497 will let you make the glfw CMake target an object library. I believe this will do what you need to incorporate GLFW in a larger library. If not, that's something I want to fix.
I also added CMake cache variables with the pkgconfig information with 244948e, similar to yours but with longer names.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1310,2018-08-05T18:46:32Z,2018-08-09T17:10:59Z,2018-08-09T17:10:59Z,CLOSED,False,3,3,2,https://github.com/tapir,docs: Fix a typo and a missing word,2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1310,https://github.com/tapir,1,https://github.com/glfw/glfw/pull/1310,,,True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1310,2018-08-05T18:46:32Z,2018-08-09T17:10:59Z,2018-08-09T17:10:59Z,CLOSED,False,3,3,2,https://github.com/tapir,docs: Fix a typo and a missing word,2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1310,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1310#issuecomment-410770724,,"I suggest that the title of this PR be changed to reflect that it now addresses typos across multiple documentation pages, not just the content scale callback one.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1310,2018-08-05T18:46:32Z,2018-08-09T17:10:59Z,2018-08-09T17:10:59Z,CLOSED,False,3,3,2,https://github.com/tapir,docs: Fix a typo and a missing word,2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1310,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1310#issuecomment-411830382,,Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1316,2018-08-24T12:23:21Z,2018-09-03T22:08:45Z,2018-09-16T17:58:20Z,CLOSED,False,2,0,2,https://github.com/dougbinks,Win32 support for GLFW_KEY_KP_EQUAL fixes #1315,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1316,https://github.com/dougbinks,1,https://github.com/glfw/glfw/pull/1316,Added support for GLFW_KEY_KP_EQUAL according to information on the relevant scancode from @Robertk92. Note that I do not have this key so can't test.,Added support for GLFW_KEY_KP_EQUAL according to information on the relevant scancode from @Robertk92. Note that I do not have this key so can't test.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1316,2018-08-24T12:23:21Z,2018-09-03T22:08:45Z,2018-09-16T17:58:20Z,CLOSED,False,2,0,2,https://github.com/dougbinks,Win32 support for GLFW_KEY_KP_EQUAL fixes #1315,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1316,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1316#issuecomment-421804690,Added support for GLFW_KEY_KP_EQUAL according to information on the relevant scancode from @Robertk92. Note that I do not have this key so can't test.,"Note that I do not have this key so can't test.

I don't either but I when translate it to a VK it ends up in a small OEM reserved range, so 🤷 thisisfine.gif
Thank you!",True,{'THUMBS_UP': ['https://github.com/dougbinks']}
glfw/glfw,https://github.com/glfw/glfw,1322,2018-09-08T16:58:58Z,2019-03-05T19:33:59Z,2019-03-07T10:32:13Z,CLOSED,False,147,0,13,https://github.com/dougbinks,Revised PR for add support for querying work area,19,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1322,https://github.com/dougbinks,1,https://github.com/glfw/glfw/pull/1322,"This is a revision of PR for Add support for querying work area #989
The implementation has been tested on Windows 10, OS X 10.11.6 and Ubuntu 18.04 with X11. There is a Wayland implementation which returns monitor virtual position and resolution but this is untested.","This is a revision of PR for Add support for querying work area #989
The implementation has been tested on Windows 10, OS X 10.11.6 and Ubuntu 18.04 with X11. There is a Wayland implementation which returns monitor virtual position and resolution but this is untested.",True,{'THUMBS_UP': ['https://github.com/ocornut']}
glfw/glfw,https://github.com/glfw/glfw,1322,2018-09-08T16:58:58Z,2019-03-05T19:33:59Z,2019-03-07T10:32:13Z,CLOSED,False,147,0,13,https://github.com/dougbinks,Revised PR for add support for querying work area,19,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1322,https://github.com/dougbinks,2,https://github.com/glfw/glfw/pull/1322#issuecomment-419705768,"This is a revision of PR for Add support for querying work area #989
The implementation has been tested on Windows 10, OS X 10.11.6 and Ubuntu 18.04 with X11. There is a Wayland implementation which returns monitor virtual position and resolution but this is untested.","I have now tested this on Wayland on Ubuntu 18.04. Took a little while to get all the dependencies sorted (once glfw wayland support goes out of experimental a guide might be needed), but everything works with no changes to this PR.",True,"{'THUMBS_UP': ['https://github.com/fungos', 'https://github.com/ocornut']}"
glfw/glfw,https://github.com/glfw/glfw,1322,2018-09-08T16:58:58Z,2019-03-05T19:33:59Z,2019-03-07T10:32:13Z,CLOSED,False,147,0,13,https://github.com/dougbinks,Revised PR for add support for querying work area,19,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1322,https://github.com/ocornut,3,https://github.com/glfw/glfw/pull/1322#issuecomment-465165107,"This is a revision of PR for Add support for querying work area #989
The implementation has been tested on Windows 10, OS X 10.11.6 and Ubuntu 18.04 with X11. There is a Wayland implementation which returns monitor virtual position and resolution but this is untested.","Hello,
Any chance getting this included in GLFW 3.3 or are the issues for it already locked down?
The PR looks fairly trivial.
Apologies for the bump.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1322,2018-09-08T16:58:58Z,2019-03-05T19:33:59Z,2019-03-07T10:32:13Z,CLOSED,False,147,0,13,https://github.com/dougbinks,Revised PR for add support for querying work area,19,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1322,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1322#issuecomment-465807381,"This is a revision of PR for Add support for querying work area #989
The implementation has been tested on Windows 10, OS X 10.11.6 and Ubuntu 18.04 with X11. There is a Wayland implementation which returns monitor virtual position and resolution but this is untested.",@ocornut It should be able to go into 3.3 modulo any unexpected problems. Looks like all of the updates it needs are trivial.,True,{'HEART': ['https://github.com/ocornut']}
glfw/glfw,https://github.com/glfw/glfw,1322,2018-09-08T16:58:58Z,2019-03-05T19:33:59Z,2019-03-07T10:32:13Z,CLOSED,False,147,0,13,https://github.com/dougbinks,Revised PR for add support for querying work area,19,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1322,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1322#issuecomment-469829714,"This is a revision of PR for Add support for querying work area #989
The implementation has been tested on Windows 10, OS X 10.11.6 and Ubuntu 18.04 with X11. There is a Wayland implementation which returns monitor virtual position and resolution but this is untested.",Thank you! This has been merged with a few additional fixes.,True,"{'THUMBS_UP': ['https://github.com/ocornut', 'https://github.com/andsveking']}"
glfw/glfw,https://github.com/glfw/glfw,1322,2018-09-08T16:58:58Z,2019-03-05T19:33:59Z,2019-03-07T10:32:13Z,CLOSED,False,147,0,13,https://github.com/dougbinks,Revised PR for add support for querying work area,19,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/1322,https://github.com/ocornut,6,https://github.com/glfw/glfw/pull/1322#issuecomment-470473128,"This is a revision of PR for Add support for querying work area #989
The implementation has been tested on Windows 10, OS X 10.11.6 and Ubuntu 18.04 with X11. There is a Wayland implementation which returns monitor virtual position and resolution but this is untested.",Thank you very much @felselva @dougbinks @elmindreda .,True,{}
glfw/glfw,https://github.com/glfw/glfw,1323,2018-09-08T18:12:38Z,2018-09-09T11:12:21Z,2018-10-24T14:37:50Z,MERGED,True,88,36,3,https://github.com/linkmauve,Add support for animated standard cursors,3,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1323,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1323,"The NULL and frame cursors aren’t animated yet, because neither are GLFWcursors, which this code depends on.
There is also no support for user animated cursors yet, since this would require changing the glfwCreateCursor() API.","The NULL and frame cursors aren’t animated yet, because neither are GLFWcursors, which this code depends on.
There is also no support for user animated cursors yet, since this would require changing the glfwCreateCursor() API.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1326,2018-09-13T14:35:00Z,2018-12-26T14:41:12Z,2018-12-26T16:02:14Z,CLOSED,False,3,0,1,https://github.com/SylvainBoilard,Added missing error specification for glfwWaitEventsTimeout,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1326,https://github.com/SylvainBoilard,1,https://github.com/glfw/glfw/pull/1326,"Hi,
This patch adds some missing documentation in glfw3.h about the errors glfwWaitEventsTimeout can raise.
Cheers.","Hi,
This patch adds some missing documentation in glfw3.h about the errors glfwWaitEventsTimeout can raise.
Cheers.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1326,2018-09-13T14:35:00Z,2018-12-26T14:41:12Z,2018-12-26T16:02:14Z,CLOSED,False,3,0,1,https://github.com/SylvainBoilard,Added missing error specification for glfwWaitEventsTimeout,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1326,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1326#issuecomment-422116344,"Hi,
This patch adds some missing documentation in glfw3.h about the errors glfwWaitEventsTimeout can raise.
Cheers.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1326,2018-09-13T14:35:00Z,2018-12-26T14:41:12Z,2018-12-26T16:02:14Z,CLOSED,False,3,0,1,https://github.com/SylvainBoilard,Added missing error specification for glfwWaitEventsTimeout,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1326,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1326#issuecomment-449986194,"Hi,
This patch adds some missing documentation in glfw3.h about the errors glfwWaitEventsTimeout can raise.
Cheers.",This has been merged as 3b255af.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1328,2018-09-17T07:42:00Z,2018-10-22T14:15:12Z,2018-11-01T20:23:15Z,MERGED,True,3,3,1,https://github.com/siavashserver,Documentation work.,1,['documentation'],https://github.com/glfw/glfw/pull/1328,https://github.com/siavashserver,1,https://github.com/glfw/glfw/pull/1328,Using GLFW_TRUE where applicable.,Using GLFW_TRUE where applicable.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1328,2018-09-17T07:42:00Z,2018-10-22T14:15:12Z,2018-11-01T20:23:15Z,MERGED,True,3,3,1,https://github.com/siavashserver,Documentation work.,1,['documentation'],https://github.com/glfw/glfw/pull/1328,https://github.com/siavashserver,2,https://github.com/glfw/glfw/pull/1328#issuecomment-422243905,Using GLFW_TRUE where applicable.,@linkmauve I'm not very familiar with merge process here; do I have the freedom to directly merge pull requests into the master branch?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1328,2018-09-17T07:42:00Z,2018-10-22T14:15:12Z,2018-11-01T20:23:15Z,MERGED,True,3,3,1,https://github.com/siavashserver,Documentation work.,1,['documentation'],https://github.com/glfw/glfw/pull/1328,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1328#issuecomment-431706465,Using GLFW_TRUE where applicable.,"For non-code fixes just go ahead and merge. For more complex stuff, we should figure out something that works for us.",True,{'HOORAY': ['https://github.com/siavashserver']}
glfw/glfw,https://github.com/glfw/glfw,1328,2018-09-17T07:42:00Z,2018-10-22T14:15:12Z,2018-11-01T20:23:15Z,MERGED,True,3,3,1,https://github.com/siavashserver,Documentation work.,1,['documentation'],https://github.com/glfw/glfw/pull/1328,https://github.com/siavashserver,4,https://github.com/glfw/glfw/pull/1328#issuecomment-431847872,Using GLFW_TRUE where applicable.,Alright :),True,{}
glfw/glfw,https://github.com/glfw/glfw,1336,2018-09-29T15:00:24Z,2018-10-05T09:59:27Z,2018-10-08T20:03:46Z,MERGED,True,11,1704,19,https://github.com/linkmauve,Remove the experimental Mir backend,1,['Mir'],https://github.com/glfw/glfw/pull/1336,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1336,"As of the release of Mir 1.0, libmirclient has been deprecated[1] and
its developers recommend clients using it to switch to Wayland.  This
patch removes support for libmirclient and instruct users to use the
experimental Wayland backend instead.
[1] https://discourse.ubuntu.com/t/mir-news-28th-september-2018/8184","As of the release of Mir 1.0, libmirclient has been deprecated[1] and
its developers recommend clients using it to switch to Wayland.  This
patch removes support for libmirclient and instruct users to use the
experimental Wayland backend instead.
[1] https://discourse.ubuntu.com/t/mir-news-28th-september-2018/8184",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/dmitshur', 'https://github.com/BrandonSchaefer']}"
glfw/glfw,https://github.com/glfw/glfw,1336,2018-09-29T15:00:24Z,2018-10-05T09:59:27Z,2018-10-08T20:03:46Z,MERGED,True,11,1704,19,https://github.com/linkmauve,Remove the experimental Mir backend,1,['Mir'],https://github.com/glfw/glfw/pull/1336,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1336#issuecomment-427183841,"As of the release of Mir 1.0, libmirclient has been deprecated[1] and
its developers recommend clients using it to switch to Wayland.  This
patch removes support for libmirclient and instruct users to use the
experimental Wayland backend instead.
[1] https://discourse.ubuntu.com/t/mir-news-28th-september-2018/8184","Great, will review asap!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1336,2018-09-29T15:00:24Z,2018-10-05T09:59:27Z,2018-10-08T20:03:46Z,MERGED,True,11,1704,19,https://github.com/linkmauve,Remove the experimental Mir backend,1,['Mir'],https://github.com/glfw/glfw/pull/1336,https://github.com/BrandonSchaefer,3,https://github.com/glfw/glfw/pull/1336#issuecomment-427961726,"As of the release of Mir 1.0, libmirclient has been deprecated[1] and
its developers recommend clients using it to switch to Wayland.  This
patch removes support for libmirclient and instruct users to use the
experimental Wayland backend instead.
[1] https://discourse.ubuntu.com/t/mir-news-28th-september-2018/8184",Thanks! I had been meaning to get to this,True,{}
glfw/glfw,https://github.com/glfw/glfw,1338,2018-09-29T17:48:56Z,2021-08-15T20:09:16Z,2021-08-15T20:10:48Z,CLOSED,False,108,2,4,https://github.com/linkmauve,WIP: Load libwayland-client at runtime,1,['Wayland'],https://github.com/glfw/glfw/pull/1338,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1338,"This is a work in progress of making libwayland-client.so a runtime dependency.
The main remaining issue is that src/internal.h includes src/wl_platform.h before struct _GLFWlibrary is defined, so we can’t use _glfw in the generated Wayland headers to provide the wl_proxy_* symbols.
Once this is resolved, this PR will fix #1174.","This is a work in progress of making libwayland-client.so a runtime dependency.
The main remaining issue is that src/internal.h includes src/wl_platform.h before struct _GLFWlibrary is defined, so we can’t use _glfw in the generated Wayland headers to provide the wl_proxy_* symbols.
Once this is resolved, this PR will fix #1174.",True,"{'HOORAY': ['https://github.com/gracicot', 'https://github.com/unrelentingtech', 'https://github.com/vially', 'https://github.com/Alvarito050506']}"
glfw/glfw,https://github.com/glfw/glfw,1339,2018-09-29T21:25:01Z,2018-10-01T11:13:21Z,2018-10-22T18:17:39Z,MERGED,True,30,12,3,https://github.com/linkmauve,Use memfd_create() and seals if available,1,['Wayland'],https://github.com/glfw/glfw/pull/1339,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1339,"This allows the compositor to avoid having to setup and teardown a
SIGBUS signal handler whenever it needs to read from this surface, as it
knows we won’t be able to shrink the file and so doesn’t have to protect
against that.
This codepath will only be used on Linux ≥ 3.17 with glibc ≥ 2.27, and
possibly other kernels and libc.  The former code will continue to be
used as a fallback, either if memfd_create() fails or if it isn’t
available.","This allows the compositor to avoid having to setup and teardown a
SIGBUS signal handler whenever it needs to read from this surface, as it
knows we won’t be able to shrink the file and so doesn’t have to protect
against that.
This codepath will only be used on Linux ≥ 3.17 with glibc ≥ 2.27, and
possibly other kernels and libc.  The former code will continue to be
used as a fallback, either if memfd_create() fails or if it isn’t
available.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1341,2018-10-01T13:56:15Z,2018-10-01T14:37:25Z,2018-10-22T18:17:18Z,MERGED,True,68,9,6,https://github.com/linkmauve,Add support for xdg-decoration,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1341,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1341,"This allows compositors which prefer to draw the decorations around
clients to do so, rather than letting GLFW draw its own decorations.
The appearance is thus entirely subject to the compositor used, but
should generally be better than the current solid colour decorations we
have, which we continue to use when the compositor doesn’t support this
protocol or tells us to draw the decorations ourselves.
This new protocol has been tested against wlroots’s rootston compositor.
Fixes #1257.","This allows compositors which prefer to draw the decorations around
clients to do so, rather than letting GLFW draw its own decorations.
The appearance is thus entirely subject to the compositor used, but
should generally be better than the current solid colour decorations we
have, which we continue to use when the compositor doesn’t support this
protocol or tells us to draw the decorations ourselves.
This new protocol has been tested against wlroots’s rootston compositor.
Fixes #1257.",True,{'THUMBS_UP': ['https://github.com/emersion']}
glfw/glfw,https://github.com/glfw/glfw,1344,2018-10-03T18:52:18Z,2018-10-03T20:03:21Z,2018-10-22T18:16:55Z,MERGED,True,1,1,1,https://github.com/linkmauve,Include the null byte in joystick path,1,"['bug', 'Linux']",https://github.com/glfw/glfw/pull/1344,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1344,This potential bug was found thanks to gcc 8’s -Wstringop-truncation warning.,This potential bug was found thanks to gcc 8’s -Wstringop-truncation warning.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/nullcatalyst,1,https://github.com/glfw/glfw/pull/1346,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/kovidgoyal,2,https://github.com/glfw/glfw/pull/1346#issuecomment-426868268,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.",wouldn't this fail if the window is a background window?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/yairchu,3,https://github.com/glfw/glfw/pull/1346#issuecomment-426901483,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","I've tried this fix and on my machine (MacBookPro13,2) this had no effect - like before, the ""Boing"" example for example still wouldn't show anything until the window is moved.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/nullcatalyst,4,https://github.com/glfw/glfw/pull/1346#issuecomment-427085336,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","@yairchu I could reproduce what you were saying. Apparently I did all of my testing on naked executables (as in not .app files) where it was working fine.
I have now updated the proposed solution to work with all* of the examples.
I add an asterisk to all, because the splitview example still does not render when the window is opened. But that is because it does not try to redraw the frame unless something has changed. And since the tiny snippet of code I added does not fix the fact that the view is not displayed until the third frame on my machine (MacBookPro11,3), it ends up not displaying anything.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/yairchu,5,https://github.com/glfw/glfw/pull/1346#issuecomment-427116744,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.",Now it works 👍,True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/nullcatalyst,6,https://github.com/glfw/glfw/pull/1346#issuecomment-427223875,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","@kovidgoyal I didn't respond to your comment at first, because my original interpretation was that you were trying to render to a hidden window, to which my naive first thought was ""does it matter if it doesn't render if it's not being displayed anywhere"". Upon rereading it now, I think I now understand that you were talking about creating a window while the app is being run in the background. For which I suspect you are 100% right - the window wouldn't be made the ""key"" window and wouldn't get updated. My apologies for misunderstanding you.
That being said, I believe the second commit I added should also work in that scenario as well. But I have not tested that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/kovidgoyal,7,https://github.com/glfw/glfw/pull/1346#issuecomment-427235168,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","I have not tested your second commit, but in my own testing, I found that simply calling update some time after the window was shown is not enough. It has to be called when doing the buffer swap. IIRC it needed to be called once after the first bufferswap of a window. To be safe in my patch I call it 2-3 times.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/kovidgoyal,8,https://github.com/glfw/glfw/pull/1346#issuecomment-427235287,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","To be clear, I'm saying, calling update sometime after the window is shown will work if the update happens to occur after the first buffer swap but it wont if it doesn't. Which is why I settled on doing it during the buffer swap",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/nullcatalyst,9,https://github.com/glfw/glfw/pull/1346#issuecomment-427238430,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","What you're saying makes sense.
My personal assumption was that calling update needed to happen sometime after a specific event in the lifecycle of the window/view. I had assumed that that was why your original code needed to try it on a couple of frames, because the event in question hadn't happened yet. And that is why I was opting to find an event that happened as late as possible and just call update at that point. ie: call it when the window was made key, but since that didn't seem to work, just push a new event onto the dispatch queue, which should happen after all other prior events are dequeued.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/nullcatalyst,10,https://github.com/glfw/glfw/pull/1346#issuecomment-427238647,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","I currently think there might be another bug in play though, as Apple's GLEssentials example doesn't seem to have the 2-3 frame delay.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/kovidgoyal,11,https://github.com/glfw/glfw/pull/1346#issuecomment-427239444,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","yeah I doubt that calling update is the correct fix, just one that works, with relatively low overhead. The correct fix is going to need someone with more knowledge of cocoa internals.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/nullcatalyst,12,https://github.com/glfw/glfw/pull/1346#issuecomment-427241166,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","Lol, yeah, I'm not the guy for that either",True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/elmindreda,13,https://github.com/glfw/glfw/pull/1346#issuecomment-433383155,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.",Please see if the mojave-fixes branch resolves this for you.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1346,2018-10-04T00:44:14Z,2018-10-26T14:25:42Z,2018-10-28T03:02:20Z,CLOSED,False,9,0,1,https://github.com/nullcatalyst,Fix for macOS mojave not rendering the OpenGL view on window start,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1346,https://github.com/yairchu,14,https://github.com/glfw/glfw/pull/1346#issuecomment-433425522,"Fixes #1334
Note that this just a simplified version of the commit kovidgoyal/kitty@b82e74f as mentioned by @kovidgoyal in #1334.
I really wanted there to be a more elegant solution than this, but this seemed to be the simplest fix I could come up with that still seemed to work.
I don't mind if this isn't used at all. Just wanted to provide an option for a potential solution.","Please see if the mojave-fixes branch resolves this for you.

Looks good here",True,{}
glfw/glfw,https://github.com/glfw/glfw,1352,2018-10-10T19:51:33Z,2018-10-10T22:58:24Z,2018-10-22T18:16:20Z,MERGED,True,22,3,1,https://github.com/emersion,wayland: add support for XCURSOR_THEME and XCURSOR_SIZE,1,['Wayland'],https://github.com/glfw/glfw/pull/1352,https://github.com/emersion,1,https://github.com/glfw/glfw/pull/1352,"These can be set by the compositor or the user to configure the
xcursor theme and size.","These can be set by the compositor or the user to configure the
xcursor theme and size.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1352,2018-10-10T19:51:33Z,2018-10-10T22:58:24Z,2018-10-22T18:16:20Z,MERGED,True,22,3,1,https://github.com/emersion,wayland: add support for XCURSOR_THEME and XCURSOR_SIZE,1,['Wayland'],https://github.com/glfw/glfw/pull/1352,https://github.com/emersion,2,https://github.com/glfw/glfw/pull/1352#issuecomment-428724730,"These can be set by the compositor or the user to configure the
xcursor theme and size.","Thanks for your review. Pushed a new version addressing your comments.

Otherwise, are you sure it’s a good idea to start with this hacky way, while we could design a proper protocol and implement it in a few days?

I'm sure standardizing a new protocol will take at least months. I'm also not yet sure creating a whole new protocol is worth it. Last, I want to hear from GNOME and KDE to know if they're interested in such a protocol.
This solution has the upside of being very simple and it always works, regardless of compositor support. IMHO it's a good short-term solution, it's better than hardcoding these values.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1352,2018-10-10T19:51:33Z,2018-10-10T22:58:24Z,2018-10-22T18:16:20Z,MERGED,True,22,3,1,https://github.com/emersion,wayland: add support for XCURSOR_THEME and XCURSOR_SIZE,1,['Wayland'],https://github.com/glfw/glfw/pull/1352,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1352#issuecomment-428761161,"These can be set by the compositor or the user to configure the
xcursor theme and size.",I agree.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1353,2018-10-10T20:00:09Z,2018-10-24T12:03:10Z,2018-10-24T14:20:07Z,MERGED,True,320,20,4,https://github.com/linkmauve,Implement clipboard support,5,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1353,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1353,"Clipboard support was one of the last missing features in the Wayland backend.
The current API is not adapted to a highly asynchronous protocol such as Wayland, but fixing that will have to wait 4.0 so I did what I could. The main issue is in glfwGetClipboardString(), which has to dispatch the request and block until the client sending the clipboard data is done, which could potentially take a very long time. A good way to reach this state is to copy from another Wayland client, kill -STOP it, and paste in the GLFW program, it will then block until we kill -CONT the other one. A possible solution against this issue would be to set a timer and place a handler for SIGALRM, but in the general case we can expect other clients to be well-behaved.
Supersedes #358, from which one commit has been extracted but the rest has been written from scratch.","Clipboard support was one of the last missing features in the Wayland backend.
The current API is not adapted to a highly asynchronous protocol such as Wayland, but fixing that will have to wait 4.0 so I did what I could. The main issue is in glfwGetClipboardString(), which has to dispatch the request and block until the client sending the clipboard data is done, which could potentially take a very long time. A good way to reach this state is to copy from another Wayland client, kill -STOP it, and paste in the GLFW program, it will then block until we kill -CONT the other one. A possible solution against this issue would be to set a timer and place a handler for SIGALRM, but in the general case we can expect other clients to be well-behaved.
Supersedes #358, from which one commit has been extracted but the rest has been written from scratch.",True,{'THUMBS_UP': ['https://github.com/r00ster91']}
glfw/glfw,https://github.com/glfw/glfw,1353,2018-10-10T20:00:09Z,2018-10-24T12:03:10Z,2018-10-24T14:20:07Z,MERGED,True,320,20,4,https://github.com/linkmauve,Implement clipboard support,5,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1353,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1353#issuecomment-432255652,"Clipboard support was one of the last missing features in the Wayland backend.
The current API is not adapted to a highly asynchronous protocol such as Wayland, but fixing that will have to wait 4.0 so I did what I could. The main issue is in glfwGetClipboardString(), which has to dispatch the request and block until the client sending the clipboard data is done, which could potentially take a very long time. A good way to reach this state is to copy from another Wayland client, kill -STOP it, and paste in the GLFW program, it will then block until we kill -CONT the other one. A possible solution against this issue would be to set a timer and place a handler for SIGALRM, but in the general case we can expect other clients to be well-behaved.
Supersedes #358, from which one commit has been extracted but the rest has been written from scratch.","I’ll merge as is in order to get more testing done, please report if anything is going wrong.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1356,2018-10-13T06:15:29Z,2018-11-01T16:59:34Z,2018-11-01T17:00:56Z,CLOSED,False,9,0,2,None,Fix missing check for _NET_WM_STATE,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1356,None,1,https://github.com/glfw/glfw/pull/1356,"I am using a tiling WM (XMonad) which doesn't support the NET_WM_STATE atom out-of-the-box, and whenver I call glfwGetWindowAttrib(window, GLFW_MAXIMIZED), I get a crash:
X Error of failed request:  BadAtom (invalid Atom parameter)                                                                                                                                                                      
  Major opcode of failed request:  20 (X_GetProperty)                                                                                                                                                                               
  Atom id in failed request:  0x0                                                                                                                                                                                                 
  Serial number of failed request:  168                                                                                                                                                                                             
  Current serial number in output stream:  168

Other functions that get or set NET_WM_STATE check for the atom being null. The fix is to add a simple check to _glfwPlatformWindowMaximized.","I am using a tiling WM (XMonad) which doesn't support the NET_WM_STATE atom out-of-the-box, and whenver I call glfwGetWindowAttrib(window, GLFW_MAXIMIZED), I get a crash:
X Error of failed request:  BadAtom (invalid Atom parameter)                                                                                                                                                                      
  Major opcode of failed request:  20 (X_GetProperty)                                                                                                                                                                               
  Atom id in failed request:  0x0                                                                                                                                                                                                 
  Serial number of failed request:  168                                                                                                                                                                                             
  Current serial number in output stream:  168

Other functions that get or set NET_WM_STATE check for the atom being null. The fix is to add a simple check to _glfwPlatformWindowMaximized.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1356,2018-10-13T06:15:29Z,2018-11-01T16:59:34Z,2018-11-01T17:00:56Z,CLOSED,False,9,0,2,None,Fix missing check for _NET_WM_STATE,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1356,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1356#issuecomment-435109799,"I am using a tiling WM (XMonad) which doesn't support the NET_WM_STATE atom out-of-the-box, and whenver I call glfwGetWindowAttrib(window, GLFW_MAXIMIZED), I get a crash:
X Error of failed request:  BadAtom (invalid Atom parameter)                                                                                                                                                                      
  Major opcode of failed request:  20 (X_GetProperty)                                                                                                                                                                               
  Atom id in failed request:  0x0                                                                                                                                                                                                 
  Serial number of failed request:  168                                                                                                                                                                                             
  Current serial number in output stream:  168

Other functions that get or set NET_WM_STATE check for the atom being null. The fix is to add a simple check to _glfwPlatformWindowMaximized.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1362,2018-10-19T03:45:42Z,,2018-10-25T17:45:33Z,OPEN,False,30,0,1,https://github.com/Alzathar,Manage correctly the key combination Ctrl + Tab under macOS,2,"['bug', 'macOS']",https://github.com/glfw/glfw/pull/1362,https://github.com/Alzathar,1,https://github.com/glfw/glfw/pull/1362,"From qutebrowser/qutebrowser#2142 and specifically this comment:

The combination CTRL + Tab is specially handled by OSX/Cocoa text input method.

At least two solutions exists (here and there) to fix the problem. However, the first one use a private/undocumented API. The second is used by this PR.
NOTE: I am not the author of the proposed code.","From qutebrowser/qutebrowser#2142 and specifically this comment:

The combination CTRL + Tab is specially handled by OSX/Cocoa text input method.

At least two solutions exists (here and there) to fix the problem. However, the first one use a private/undocumented API. The second is used by this PR.
NOTE: I am not the author of the proposed code.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1362,2018-10-19T03:45:42Z,,2018-10-25T17:45:33Z,OPEN,False,30,0,1,https://github.com/Alzathar,Manage correctly the key combination Ctrl + Tab under macOS,2,"['bug', 'macOS']",https://github.com/glfw/glfw/pull/1362,https://github.com/intrigus,2,https://github.com/glfw/glfw/pull/1362#issuecomment-431317136,"From qutebrowser/qutebrowser#2142 and specifically this comment:

The combination CTRL + Tab is specially handled by OSX/Cocoa text input method.

At least two solutions exists (here and there) to fix the problem. However, the first one use a private/undocumented API. The second is used by this PR.
NOTE: I am not the author of the proposed code.","Do you have permission to use the code if you are not the author?
And is it compatible with glfw's license?",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1362,2018-10-19T03:45:42Z,,2018-10-25T17:45:33Z,OPEN,False,30,0,1,https://github.com/Alzathar,Manage correctly the key combination Ctrl + Tab under macOS,2,"['bug', 'macOS']",https://github.com/glfw/glfw/pull/1362,https://github.com/Alzathar,3,https://github.com/glfw/glfw/pull/1362#issuecomment-431348616,"From qutebrowser/qutebrowser#2142 and specifically this comment:

The combination CTRL + Tab is specially handled by OSX/Cocoa text input method.

At least two solutions exists (here and there) to fix the problem. However, the first one use a private/undocumented API. The second is used by this PR.
NOTE: I am not the author of the proposed code.",@intrigus I've sent an email to the original author to answer to your questions.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1362,2018-10-19T03:45:42Z,,2018-10-25T17:45:33Z,OPEN,False,30,0,1,https://github.com/Alzathar,Manage correctly the key combination Ctrl + Tab under macOS,2,"['bug', 'macOS']",https://github.com/glfw/glfw/pull/1362,https://github.com/tombsar,4,https://github.com/glfw/glfw/pull/1362#issuecomment-431353867,"From qutebrowser/qutebrowser#2142 and specifically this comment:

The combination CTRL + Tab is specially handled by OSX/Cocoa text input method.

At least two solutions exists (here and there) to fix the problem. However, the first one use a private/undocumented API. The second is used by this PR.
NOTE: I am not the author of the proposed code.","It looks as though the code in this PR comes from QT, and is protected by a LGPL license. We can not simply copy the code without at minimum keeping the origin, authorship, and license intact. In my opinion (not a lawyer) we cannot include this code at all without explicit written permission from QT (and/or the original author) granting us an unrestricted license that does not carry with it the same responsibilities of the LGPL.
Are the comments included in the patch relevant to GLFW? I notice terms like performKeyEquivalent and QNSView that are unfamiliar, and I suspect may be referring to QT-specific code.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1362,2018-10-19T03:45:42Z,,2018-10-25T17:45:33Z,OPEN,False,30,0,1,https://github.com/Alzathar,Manage correctly the key combination Ctrl + Tab under macOS,2,"['bug', 'macOS']",https://github.com/glfw/glfw/pull/1362,https://github.com/Alzathar,5,https://github.com/glfw/glfw/pull/1362#issuecomment-431360639,"From qutebrowser/qutebrowser#2142 and specifically this comment:

The combination CTRL + Tab is specially handled by OSX/Cocoa text input method.

At least two solutions exists (here and there) to fix the problem. However, the first one use a private/undocumented API. The second is used by this PR.
NOTE: I am not the author of the proposed code.",@tombsar performKeyEquivalent: is proposed by Apple in its AppKit API. This is a way to handle keyboard shortcut. You can replace QNSView by NSView (available in AppKit API) as the former inherits from the latter. I will modify the comment if the original author gives the permission to use its code.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1362,2018-10-19T03:45:42Z,,2018-10-25T17:45:33Z,OPEN,False,30,0,1,https://github.com/Alzathar,Manage correctly the key combination Ctrl + Tab under macOS,2,"['bug', 'macOS']",https://github.com/glfw/glfw/pull/1362,https://github.com/Alzathar,6,https://github.com/glfw/glfw/pull/1362#issuecomment-431488612,"From qutebrowser/qutebrowser#2142 and specifically this comment:

The combination CTRL + Tab is specially handled by OSX/Cocoa text input method.

At least two solutions exists (here and there) to fix the problem. However, the first one use a private/undocumented API. The second is used by this PR.
NOTE: I am not the author of the proposed code.","Good news, we have the rights to use this code if Qt keeps the copyright!
I proposed to modify the proposed PR as following:
    // The Qt company has all the rights on the following code.
    // The GLFW project has the permission to use it in its source code
    // but the Qt company keeps the copyright
    // The original source code is here: https://codereview.qt-project.org/#/c/161214/1/src/plugins/platforms/cocoa/qnsview.mm
    // =========== QT COPYRIGHT BEGIN =========== //
    // At the moment the only reason we define this method
    // is Ctrl-tab key event never reaching any view at all.
    // ... 
    ...
   // =========== QT COPYRIGHT END =========== //
What do you think?
This PR will be very helpful for Dear ImGui to pass between windows with the CTRL + Tab shortcut. The following comment has a GIF to illustrate the behaviour: ocornut/imgui#787 (comment)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1363,2018-10-21T05:48:48Z,2018-10-21T23:00:29Z,2018-10-24T15:27:03Z,CLOSED,False,9,4,1,https://github.com/cdwfs,Workaround for #1335 (glfwCreateWindow crash),1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1363,https://github.com/cdwfs,1,https://github.com/glfw/glfw/pull/1363,"GetDpiForWindow() doesn't exist prior to Win10, so this
falls back on the previous behavior (USER_DEFAULT_SCREEN_DPI)
if GetDpiForWindow isn't available & avoids the crash.
Feel free to edit/replace with a proper fix!","GetDpiForWindow() doesn't exist prior to Win10, so this
falls back on the previous behavior (USER_DEFAULT_SCREEN_DPI)
if GetDpiForWindow isn't available & avoids the crash.
Feel free to edit/replace with a proper fix!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1363,2018-10-21T05:48:48Z,2018-10-21T23:00:29Z,2018-10-24T15:27:03Z,CLOSED,False,9,4,1,https://github.com/cdwfs,Workaround for #1335 (glfwCreateWindow crash),1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1363,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1363#issuecomment-432705887,"GetDpiForWindow() doesn't exist prior to Win10, so this
falls back on the previous behavior (USER_DEFAULT_SCREEN_DPI)
if GetDpiForWindow isn't available & avoids the crash.
Feel free to edit/replace with a proper fix!",Fixed with the very similar e779280. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1364,2018-10-22T18:56:38Z,2018-10-24T16:01:43Z,2018-10-24T16:01:43Z,CLOSED,False,1,1,1,https://github.com/tnixeu,The cursor position callback is named differently example usage and example declaration,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1364,https://github.com/tnixeu,1,https://github.com/glfw/glfw/pull/1364,In the documentation the example for glfwSetCursorPosCallback uses a different name for the callback function than the example function blow. In all other examples the same name is used.,In the documentation the example for glfwSetCursorPosCallback uses a different name for the callback function than the example function blow. In all other examples the same name is used.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1364,2018-10-22T18:56:38Z,2018-10-24T16:01:43Z,2018-10-24T16:01:43Z,CLOSED,False,1,1,1,https://github.com/tnixeu,The cursor position callback is named differently example usage and example declaration,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1364,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1364#issuecomment-432698797,In the documentation the example for glfwSetCursorPosCallback uses a different name for the callback function than the example function blow. In all other examples the same name is used.,Cleared the CI error. It was some miscommunication between GitHub and AppVeyor and nothing wrong with your patch.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1366,2018-10-26T04:27:12Z,2018-11-03T13:17:41Z,2018-11-03T17:33:22Z,MERGED,True,8,0,1,https://github.com/martinetd,Update cursor position on enter event,1,"['bug', 'X11']",https://github.com/glfw/glfw/pull/1366,https://github.com/martinetd,1,https://github.com/glfw/glfw/pull/1366,"click events would have an incorrect position after changing workspace,
if the mouse didn't move in between.
(Another example where this matters is a new window, if it appears under
the cursor, clicking would lead the application to think the user clicked
at 0,0)
FWIW I've done this for kitty which has their own fork of glfw now, but I believe this applies here as well, and it's simple enough. If someone has time there probably are other small stuff like this to pick; until then I'll at least try to not make the rift too much bigger by submitting to both when applicable; unless you don't care either.","click events would have an incorrect position after changing workspace,
if the mouse didn't move in between.
(Another example where this matters is a new window, if it appears under
the cursor, clicking would lead the application to think the user clicked
at 0,0)
FWIW I've done this for kitty which has their own fork of glfw now, but I believe this applies here as well, and it's simple enough. If someone has time there probably are other small stuff like this to pick; until then I'll at least try to not make the rift too much bigger by submitting to both when applicable; unless you don't care either.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1367,2018-10-30T14:02:19Z,2018-12-03T19:29:41Z,2019-11-14T10:40:09Z,CLOSED,False,13,17,4,https://github.com/DerDakon,CMake: improve install code,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1367,https://github.com/DerDakon,1,https://github.com/glfw/glfw/pull/1367,Use the GNUInstallDirs CMake module to determine the install subpaths.,Use the GNUInstallDirs CMake module to determine the install subpaths.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1369,2018-11-01T15:44:03Z,2018-11-02T10:22:42Z,2018-11-03T17:31:18Z,CLOSED,False,64,0,3,https://github.com/yairchu,add text input test/example,1,['enhancement'],https://github.com/glfw/glfw/pull/1369,https://github.com/yairchu,1,https://github.com/glfw/glfw/pull/1369,"This is a simple test for text input, which can be useful when developing or trouble-shooting it.","This is a simple test for text input, which can be useful when developing or trouble-shooting it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1369,2018-11-01T15:44:03Z,2018-11-02T10:22:42Z,2018-11-03T17:31:18Z,CLOSED,False,64,0,3,https://github.com/yairchu,add text input test/example,1,['enhancement'],https://github.com/glfw/glfw/pull/1369,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1369#issuecomment-435211147,"This is a simple test for text input, which can be useful when developing or trouble-shooting it.",Thank you. Did you have a look at the existing events test program?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1369,2018-11-01T15:44:03Z,2018-11-02T10:22:42Z,2018-11-03T17:31:18Z,CLOSED,False,64,0,3,https://github.com/yairchu,add text input test/example,1,['enhancement'],https://github.com/glfw/glfw/pull/1369,https://github.com/yairchu,3,https://github.com/glfw/glfw/pull/1369#issuecomment-435334443,"This is a simple test for text input, which can be useful when developing or trouble-shooting it.","Thank you. Did you have a look at the existing events test program?

Oh I didn't notice that my example is redundant by that one, will close this PR and use that program, thanks!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1371,2018-11-02T19:57:38Z,2018-11-03T10:57:48Z,2018-11-03T20:05:25Z,MERGED,True,28,28,10,https://github.com/vallentin,Use HTTPS when possible,2,['documentation'],https://github.com/glfw/glfw/pull/1371,https://github.com/vallentin,1,https://github.com/glfw/glfw/pull/1371,,,True,{'HEART': ['https://github.com/linkmauve']}
glfw/glfw,https://github.com/glfw/glfw,1371,2018-11-02T19:57:38Z,2018-11-03T10:57:48Z,2018-11-03T20:05:25Z,MERGED,True,28,28,10,https://github.com/vallentin,Use HTTPS when possible,2,['documentation'],https://github.com/glfw/glfw/pull/1371,https://github.com/vallentin,2,https://github.com/glfw/glfw/pull/1371#issuecomment-435567136,,"Resolved the other comments, but what's the final say on http://www.opengl.org/registry/, keep as is?
I would say keep as is. Some third sense is telling me they'd be more likely to continue redirecting that one, in case either is changed in the future.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1371,2018-11-02T19:57:38Z,2018-11-03T10:57:48Z,2018-11-03T20:05:25Z,MERGED,True,28,28,10,https://github.com/vallentin,Use HTTPS when possible,2,['documentation'],https://github.com/glfw/glfw/pull/1371,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1371#issuecomment-435578739,,That’s my impression too. :),True,{}
glfw/glfw,https://github.com/glfw/glfw,1372,2018-11-02T20:08:18Z,2018-11-02T22:10:00Z,2018-11-03T17:30:51Z,MERGED,True,4,4,4,https://github.com/vallentin,Fixed repeated words,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1372,https://github.com/vallentin,1,https://github.com/glfw/glfw/pull/1372,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1372,2018-11-02T20:08:18Z,2018-11-02T22:10:00Z,2018-11-03T17:30:51Z,MERGED,True,4,4,4,https://github.com/vallentin,Fixed repeated words,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1372,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1372#issuecomment-435523888,,Thanks!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1373,2018-11-04T00:17:33Z,2018-12-25T21:25:04Z,2018-12-25T21:25:05Z,CLOSED,False,3,0,2,https://github.com/OneSadCookie,Send key events for caps lock,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1373,https://github.com/OneSadCookie,1,https://github.com/glfw/glfw/pull/1373,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1373,2018-11-04T00:17:33Z,2018-12-25T21:25:04Z,2018-12-25T21:25:05Z,CLOSED,False,3,0,2,https://github.com/OneSadCookie,Send key events for caps lock,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1373,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1373#issuecomment-435836580,,This is related to #1368.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1374,2018-11-05T23:36:13Z,2021-10-27T16:40:39Z,2021-10-29T00:46:26Z,CLOSED,False,52,14,3,https://github.com/pmuetschard,Adds a `glfwInitVulkan` function to provide a vkGetInstanceProcAddr.,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1374,https://github.com/pmuetschard,1,https://github.com/glfw/glfw/pull/1374,"This allows an application to handle locating and loading a vulkan loader, but still use GLFW to handle the native window support.","This allows an application to handle locating and loading a vulkan loader, but still use GLFW to handle the native window support.",True,"{'THUMBS_UP': ['https://github.com/paakmau', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1374,2018-11-05T23:36:13Z,2021-10-27T16:40:39Z,2021-10-29T00:46:26Z,CLOSED,False,52,14,3,https://github.com/pmuetschard,Adds a `glfwInitVulkan` function to provide a vkGetInstanceProcAddr.,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1374,https://github.com/Dominaezzz,2,https://github.com/glfw/glfw/pull/1374#issuecomment-496613001,"This allows an application to handle locating and loading a vulkan loader, but still use GLFW to handle the native window support.",glfwInitHint instead?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1374,2018-11-05T23:36:13Z,2021-10-27T16:40:39Z,2021-10-29T00:46:26Z,CLOSED,False,52,14,3,https://github.com/pmuetschard,Adds a `glfwInitVulkan` function to provide a vkGetInstanceProcAddr.,1,"['enhancement', 'Vulkan']",https://github.com/glfw/glfw/pull/1374,https://github.com/pmuetschard,3,https://github.com/glfw/glfw/pull/1374#issuecomment-948243336,"This allows an application to handle locating and loading a vulkan loader, but still use GLFW to handle the native window support.","I would like to close this out... after so much time :)
The glfwInitHint function takes in an int value, however, we'd need it to pass in a function pointer, which won't fit into an int. Should I 1) expand the value type of that function to also fit a function pointer, 2) add a glfwInitHintFp function ala glfwWindowHintString, 3) keep the glfwInitVulkan function?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1381,2018-11-15T14:28:21Z,2019-01-17T00:07:05Z,2019-01-17T14:19:40Z,CLOSED,False,126,23,1,https://github.com/dougbinks,Win32 CreateWindow performance improvement: Array based choose pixel format,5,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1381,https://github.com/dougbinks,1,https://github.com/glfw/glfw/pull/1381,"This change appears to improve, but not fix, the severe delay in glfwCreateWindow observed:
http://discourse.glfw.org/t/glfw-has-long-delay-when-creating-a-window/1072
I do not know how wide-spread this issue is, and as the fix adds complexity to the codebase I'm unsure whether it's a good idea to add.
If we do wish to go ahead, I can make any further required changes to this proposed pull request.","This change appears to improve, but not fix, the severe delay in glfwCreateWindow observed:
http://discourse.glfw.org/t/glfw-has-long-delay-when-creating-a-window/1072
I do not know how wide-spread this issue is, and as the fix adds complexity to the codebase I'm unsure whether it's a good idea to add.
If we do wish to go ahead, I can make any further required changes to this proposed pull request.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1381,2018-11-15T14:28:21Z,2019-01-17T00:07:05Z,2019-01-17T14:19:40Z,CLOSED,False,126,23,1,https://github.com/dougbinks,Win32 CreateWindow performance improvement: Array based choose pixel format,5,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1381,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1381#issuecomment-448715040,"This change appears to improve, but not fix, the severe delay in glfwCreateWindow observed:
http://discourse.glfw.org/t/glfw-has-long-delay-when-creating-a-window/1072
I do not know how wide-spread this issue is, and as the fix adds complexity to the codebase I'm unsure whether it's a good idea to add.
If we do wish to go ahead, I can make any further required changes to this proposed pull request.","I think this is a good idea, but it will need to take care with extension attributes as they can't be included unless the associated extension is supported (WGL_ARB_pixel_format, Issues and Notes, 8).
I would also strongly prefer a solution that doesn't require manually keeping an array and an enum in sync. Since it's a very small array that should already be in the cache perhaps a lookup per access could be affordable?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1381,2018-11-15T14:28:21Z,2019-01-17T00:07:05Z,2019-01-17T14:19:40Z,CLOSED,False,126,23,1,https://github.com/dougbinks,Win32 CreateWindow performance improvement: Array based choose pixel format,5,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1381,https://github.com/dougbinks,3,https://github.com/glfw/glfw/pull/1381#issuecomment-449034119,"This change appears to improve, but not fix, the severe delay in glfwCreateWindow observed:
http://discourse.glfw.org/t/glfw-has-long-delay-when-creating-a-window/1072
I do not know how wide-spread this issue is, and as the fix adds complexity to the codebase I'm unsure whether it's a good idea to add.
If we do wish to go ahead, I can make any further required changes to this proposed pull request.","It should be simple enough to add/remove the extension attributes before calling the query, and a linear search for the extension to find it's index in an array this size will indeed be very fast and remove the need to maintain the enum.
I'm on vacation at the moment but will take a look at these changes before too long.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1381,2018-11-15T14:28:21Z,2019-01-17T00:07:05Z,2019-01-17T14:19:40Z,CLOSED,False,126,23,1,https://github.com/dougbinks,Win32 CreateWindow performance improvement: Array based choose pixel format,5,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1381,https://github.com/dougbinks,4,https://github.com/glfw/glfw/pull/1381#issuecomment-449992083,"This change appears to improve, but not fix, the severe delay in glfwCreateWindow observed:
http://discourse.glfw.org/t/glfw-has-long-delay-when-creating-a-window/1072
I do not know how wide-spread this issue is, and as the fix adds complexity to the codebase I'm unsure whether it's a good idea to add.
If we do wish to go ahead, I can make any further required changes to this proposed pull request.","I've updated the PR branch to remove the enum and only check the ARB/EXT attributes when the relevant extensions are available.
This is somewhat more complex code, but it does still perform much faster than the individual checks - on the only machine I have available at the moment the check is 2x faster at 1ms versus more than 2ms. The hintPos could be removed for relatively little performance loss and some gain in code simplicity.
I am still unsure that the performance gain is worth the additional code complexity.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1381,2018-11-15T14:28:21Z,2019-01-17T00:07:05Z,2019-01-17T14:19:40Z,CLOSED,False,126,23,1,https://github.com/dougbinks,Win32 CreateWindow performance improvement: Array based choose pixel format,5,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1381,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1381#issuecomment-453244170,"This change appears to improve, but not fix, the severe delay in glfwCreateWindow observed:
http://discourse.glfw.org/t/glfw-has-long-delay-when-creating-a-window/1072
I do not know how wide-spread this issue is, and as the fix adds complexity to the codebase I'm unsure whether it's a good idea to add.
If we do wish to go ahead, I can make any further required changes to this proposed pull request.","Here are some results from my current laptop.




pixel formats
master (seconds)
patch (seconds)




HD 630
103
0.003
0.001


GTX 1050M
670
0.132
0.020



I tried simplifying the patch little further, in the style of the context creation functions, with 29661f1. Does that seem sane?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1381,2018-11-15T14:28:21Z,2019-01-17T00:07:05Z,2019-01-17T14:19:40Z,CLOSED,False,126,23,1,https://github.com/dougbinks,Win32 CreateWindow performance improvement: Array based choose pixel format,5,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1381,https://github.com/dougbinks,6,https://github.com/glfw/glfw/pull/1381#issuecomment-454869724,"This change appears to improve, but not fix, the severe delay in glfwCreateWindow observed:
http://discourse.glfw.org/t/glfw-has-long-delay-when-creating-a-window/1072
I do not know how wide-spread this issue is, and as the fix adds complexity to the codebase I'm unsure whether it's a good idea to add.
If we do wish to go ahead, I can make any further required changes to this proposed pull request.","That looks very sane - I considered macros to simplify the code but wasn't sure about the style in GLFW.
The perf increase for NVIDIA GTX 1050M seems very reasonable, and better than I was seeing on the test machines I used (AMD and Intel), and the absolute time gain is perceptible.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1381,2018-11-15T14:28:21Z,2019-01-17T00:07:05Z,2019-01-17T14:19:40Z,CLOSED,False,126,23,1,https://github.com/dougbinks,Win32 CreateWindow performance improvement: Array based choose pixel format,5,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1381,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1381#issuecomment-455187500,"This change appears to improve, but not fix, the severe delay in glfwCreateWindow observed:
http://discourse.glfw.org/t/glfw-has-long-delay-when-creating-a-window/1072
I do not know how wide-spread this issue is, and as the fix adds complexity to the codebase I'm unsure whether it's a good idea to add.
If we do wish to go ahead, I can make any further required changes to this proposed pull request.",This was merged as babafc1. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1383,2018-11-19T04:51:29Z,2018-12-26T14:41:12Z,2018-12-26T15:58:44Z,CLOSED,False,13,0,1,https://github.com/aloucks,Disable non-client painting on borderless windows,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1383,https://github.com/aloucks,1,https://github.com/glfw/glfw/pull/1383,"Fixes an issue where a small title bar and window caption buttons were being painted after restoring a minimized undecorated window.
OS: Windows 10
GLFW: master branch
Steps to reproduce:
Repeatedly clicking the window's icon on the task bar will cause the window to alternate between minimized and restored. Prior to this change, restoring the window causes the following title bar and caption buttons to be rendered in the upper left hand corner of the window.

#include ""GLFW/glfw3.h""

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE) {
        glfwSetWindowShouldClose(window, GLFW_TRUE);
    }
}

int main() {
    glfwInit();
    glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);
    GLFWwindow* window = glfwCreateWindow(800, 600, ""GLFW Window"", NULL, NULL);
    glfwSetKeyCallback(window, key_callback);
    while (!glfwWindowShouldClose(window)) {
        glfwWaitEvents();
    }
    glfwTerminate();
}","Fixes an issue where a small title bar and window caption buttons were being painted after restoring a minimized undecorated window.
OS: Windows 10
GLFW: master branch
Steps to reproduce:
Repeatedly clicking the window's icon on the task bar will cause the window to alternate between minimized and restored. Prior to this change, restoring the window causes the following title bar and caption buttons to be rendered in the upper left hand corner of the window.

#include ""GLFW/glfw3.h""

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE) {
        glfwSetWindowShouldClose(window, GLFW_TRUE);
    }
}

int main() {
    glfwInit();
    glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);
    GLFWwindow* window = glfwCreateWindow(800, 600, ""GLFW Window"", NULL, NULL);
    glfwSetKeyCallback(window, key_callback);
    while (!glfwWindowShouldClose(window)) {
        glfwWaitEvents();
    }
    glfwTerminate();
}",True,{}
glfw/glfw,https://github.com/glfw/glfw,1383,2018-11-19T04:51:29Z,2018-12-26T14:41:12Z,2018-12-26T15:58:44Z,CLOSED,False,13,0,1,https://github.com/aloucks,Disable non-client painting on borderless windows,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1383,https://github.com/aloucks,2,https://github.com/glfw/glfw/pull/1383#issuecomment-440069193,"Fixes an issue where a small title bar and window caption buttons were being painted after restoring a minimized undecorated window.
OS: Windows 10
GLFW: master branch
Steps to reproduce:
Repeatedly clicking the window's icon on the task bar will cause the window to alternate between minimized and restored. Prior to this change, restoring the window causes the following title bar and caption buttons to be rendered in the upper left hand corner of the window.

#include ""GLFW/glfw3.h""

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE) {
        glfwSetWindowShouldClose(window, GLFW_TRUE);
    }
}

int main() {
    glfwInit();
    glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);
    GLFWwindow* window = glfwCreateWindow(800, 600, ""GLFW Window"", NULL, NULL);
    glfwSetKeyCallback(window, key_callback);
    while (!glfwWindowShouldClose(window)) {
        glfwWaitEvents();
    }
    glfwTerminate();
}","This also fixes some rendering issues when enabling the DWM drop shadow effect on a borderless window (which was the primary motivation; I want to draw my own window title bar).
In order to draw the drop shadow, the DWMNCRENDERINGPOLICY must be set to DWMNCRP_ENABLED when the window style doesn't indicate that a border should be drawn. Discarding both the WM_NCPAINT and WM_NCACTIVATE messages have been the only way that I've found that prevents all of the window chrome from ever being painted.
Example:
HWND hWnd = glfwGetWin32Window(window);
MARGINS margins = { 0 };
margins.cyTopHeight = 1;
DwmExtendFrameIntoClientArea(hWnd, &margins);
DWMNCRENDERINGPOLICY ncrp = DWMNCRP_ENABLED;
DwmSetWindowAttribute(hWnd, DWMWA_NCRENDERING_POLICY, &ncrp, sizeof(ncrp));
SetWindowPos(hWnd, NULL, 0, 0, 0, 0, SWP_NOZORDER | SWP_NOOWNERZORDER | 
                                     SWP_NOMOVE | SWP_NOSIZE | SWP_FRAMECHANGED);
With this PR applied, the window content is unpainted and the edges will have the drop shadow effect.
Without this PR applied, a border will be displayed with any variations of the MARGINS variable and will have some amount of border drawn on the edges or corners. The borders can be painted over, but they flicker when the window is resized (note that this assumes window resizing is now the responsibility of the app and not handled by the window proc).",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1383,2018-11-19T04:51:29Z,2018-12-26T14:41:12Z,2018-12-26T15:58:44Z,CLOSED,False,13,0,1,https://github.com/aloucks,Disable non-client painting on borderless windows,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1383,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1383#issuecomment-449985705,"Fixes an issue where a small title bar and window caption buttons were being painted after restoring a minimized undecorated window.
OS: Windows 10
GLFW: master branch
Steps to reproduce:
Repeatedly clicking the window's icon on the task bar will cause the window to alternate between minimized and restored. Prior to this change, restoring the window causes the following title bar and caption buttons to be rendered in the upper left hand corner of the window.

#include ""GLFW/glfw3.h""

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE) {
        glfwSetWindowShouldClose(window, GLFW_TRUE);
    }
}

int main() {
    glfwInit();
    glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);
    GLFWwindow* window = glfwCreateWindow(800, 600, ""GLFW Window"", NULL, NULL);
    glfwSetKeyCallback(window, key_callback);
    while (!glfwWindowShouldClose(window)) {
        glfwWaitEvents();
    }
    glfwTerminate();
}",Thank you! This has been merged as 9ac9d7b.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1386,2018-11-24T14:43:55Z,2018-12-25T21:25:04Z,2019-08-31T15:13:31Z,CLOSED,False,5,0,1,https://github.com/AndrewBelt,Trigger mouse button event when the window is not yet focused,1,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1386,https://github.com/AndrewBelt,1,https://github.com/glfw/glfw/pull/1386,"Solves #1209
This could have some debate, but this is the behavior on X11 and Win32. On Cocoa, when a window is not focused, the first click in a GLFW window currently does not trigger a mouse button callback. This fixes that.
Try clicking between Finder and Terminal for example. The first click on a window focuses it and achieves the click action depending on the position clicked.","Solves #1209
This could have some debate, but this is the behavior on X11 and Win32. On Cocoa, when a window is not focused, the first click in a GLFW window currently does not trigger a mouse button callback. This fixes that.
Try clicking between Finder and Terminal for example. The first click on a window focuses it and achieves the click action depending on the position clicked.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1386,2018-11-24T14:43:55Z,2018-12-25T21:25:04Z,2019-08-31T15:13:31Z,CLOSED,False,5,0,1,https://github.com/AndrewBelt,Trigger mouse button event when the window is not yet focused,1,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1386,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1386#issuecomment-515289479,"Solves #1209
This could have some debate, but this is the behavior on X11 and Win32. On Cocoa, when a window is not focused, the first click in a GLFW window currently does not trigger a mouse button callback. This fixes that.
Try clicking between Finder and Terminal for example. The first click on a window focuses it and achieves the click action depending on the position clicked.",I would like debate this. Is this the right place or is the forum better for that?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1386,2018-11-24T14:43:55Z,2018-12-25T21:25:04Z,2019-08-31T15:13:31Z,CLOSED,False,5,0,1,https://github.com/AndrewBelt,Trigger mouse button event when the window is not yet focused,1,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1386,https://github.com/AndrewBelt,3,https://github.com/glfw/glfw/pull/1386#issuecomment-526838310,"Solves #1209
This could have some debate, but this is the behavior on X11 and Win32. On Cocoa, when a window is not focused, the first click in a GLFW window currently does not trigger a mouse button callback. This fixes that.
Try clicking between Finder and Terminal for example. The first click on a window focuses it and achieves the click action depending on the position clicked.",Probably create a new issue or PR. Maybe propose a GLFW_COCOA_UNFOCUSED_CLICK window hint or something.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1387,2018-11-24T21:29:27Z,2018-12-26T14:41:12Z,2018-12-26T14:41:12Z,CLOSED,False,54,24,7,https://github.com/amonakov,Avoid hardcoded ramp size 256 in glfwSetGamma,4,"['bug', 'X11', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1387,https://github.com/amonakov,1,https://github.com/glfw/glfw/pull/1387,"This fixes unexpected failure to change gamma on X11 if the hardware is using a larger ramp (1024 entries per channel in my case).
This introduces a new internal function _glfwPlatformGetGammaRampSize and uses it to setup ramps of current size in glfwSetGamma.
The first two commits make small cleanups noticed when preparing the change.
Thanks!","This fixes unexpected failure to change gamma on X11 if the hardware is using a larger ramp (1024 entries per channel in my case).
This introduces a new internal function _glfwPlatformGetGammaRampSize and uses it to setup ramps of current size in glfwSetGamma.
The first two commits make small cleanups noticed when preparing the change.
Thanks!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1401,2018-12-14T03:52:40Z,2019-02-22T14:08:47Z,2019-02-22T14:08:47Z,CLOSED,False,266,50,13,https://github.com/nathan818fr,Allow to toggle the use of raw input per window,16,"['enhancement', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1401,https://github.com/nathan818fr,1,https://github.com/glfw/glfw/pull/1401,"Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)","Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)",True,"{'THUMBS_UP': ['https://github.com/JulienSol', 'https://github.com/tombsar', 'https://github.com/sagaceilo', 'https://github.com/MrMicky-FR', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1401,2018-12-14T03:52:40Z,2019-02-22T14:08:47Z,2019-02-22T14:08:47Z,CLOSED,False,266,50,13,https://github.com/nathan818fr,Allow to toggle the use of raw input per window,16,"['enhancement', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1401,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1401#issuecomment-447304892,"Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)","Looks good to me so far. I wonder whether it would be possible to implement this feature on top of the existing glfwSetInputMode function to avoid adding two new functions to the api? Either as an additional value (something like GLFW_CURSOR_DISABLED vs GLFW_CURSOR_DISABLED_RAW, or even GLFW_CURSOR_DISABLED vs GLFW_CURSOR_DISABLED_LEGACY) or an additional mode (GLFW_RAW_INPUT that can be GLFW_TRUE or GLFW_FALSE). Opinions?",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/nathan818fr']}"
glfw/glfw,https://github.com/glfw/glfw,1401,2018-12-14T03:52:40Z,2019-02-22T14:08:47Z,2019-02-22T14:08:47Z,CLOSED,False,266,50,13,https://github.com/nathan818fr,Allow to toggle the use of raw input per window,16,"['enhancement', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1401,https://github.com/nathan818fr,3,https://github.com/glfw/glfw/pull/1401#issuecomment-447351210,"Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)",I like the idea of glfwSetInputMode with a new GLFW_RAW_INPUT mode !,True,{}
glfw/glfw,https://github.com/glfw/glfw,1401,2018-12-14T03:52:40Z,2019-02-22T14:08:47Z,2019-02-22T14:08:47Z,CLOSED,False,266,50,13,https://github.com/nathan818fr,Allow to toggle the use of raw input per window,16,"['enhancement', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1401,https://github.com/nathan818fr,4,https://github.com/glfw/glfw/pull/1401#issuecomment-447408174,"Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)",So I used glfwSetInputMode and added doc (I tried to document properly).,True,{}
glfw/glfw,https://github.com/glfw/glfw,1401,2018-12-14T03:52:40Z,2019-02-22T14:08:47Z,2019-02-22T14:08:47Z,CLOSED,False,266,50,13,https://github.com/nathan818fr,Allow to toggle the use of raw input per window,16,"['enhancement', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1401,https://github.com/nathan818fr,5,https://github.com/glfw/glfw/pull/1401#issuecomment-449643298,"Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)","After several days of use under Windows (win 10, x86_64) and Linux (Debian 9, x86_64), I can confirm that it works well!",True,{'THUMBS_UP': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,1401,2018-12-14T03:52:40Z,2019-02-22T14:08:47Z,2019-02-22T14:08:47Z,CLOSED,False,266,50,13,https://github.com/nathan818fr,Allow to toggle the use of raw input per window,16,"['enhancement', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1401,https://github.com/nathan818fr,6,https://github.com/glfw/glfw/pull/1401#issuecomment-461788362,"Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)","I test this feature since a week on a Minecraft launcher (about 15 000 users per day), no bug report, everything goes well!",True,{'HEART': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1401,2018-12-14T03:52:40Z,2019-02-22T14:08:47Z,2019-02-22T14:08:47Z,CLOSED,False,266,50,13,https://github.com/nathan818fr,Allow to toggle the use of raw input per window,16,"['enhancement', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1401,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1401#issuecomment-463418644,"Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)","Looks good. f48146e in the raw-mouse-motion-control branch are my proposed changes.
TL;DR from the summary:

This renames 'raw input' to 'raw mouse motion' as there are other kinds of raw input.  The update path is restructured to avoid reinitializing all of disabled cursor mode.  Modification of shared state is moved out into shared code.  Raw mouse motion is disabled by default for compatibility.",True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/nathan818fr']}"
glfw/glfw,https://github.com/glfw/glfw,1401,2018-12-14T03:52:40Z,2019-02-22T14:08:47Z,2019-02-22T14:08:47Z,CLOSED,False,266,50,13,https://github.com/nathan818fr,Allow to toggle the use of raw input per window,16,"['enhancement', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1401,https://github.com/nathan818fr,8,https://github.com/glfw/glfw/pull/1401#issuecomment-464351279,"Following my issue #1400.
Features:

Enable or disable the use raw input for mouse movements (when cursor is disabled) per window
It's enabled by default and work only if the machine support it
int glfwGetWindowUseRawInput(GLFWwindow* handle)
void glfwSetWindowUseRawInput(GLFWwindow* handle, int value)
it use glfwGetInputMode / glfwSetInputMode with the new mode GLFW_RAW_INPUT
Check weather the machine support raw inputs
int glfwRawInputSupported(void)",Great!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1402,2018-12-14T18:28:15Z,2018-12-26T14:41:12Z,2018-12-26T16:13:16Z,CLOSED,False,3,3,2,https://github.com/vallentin,Fixed typos,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1402,https://github.com/vallentin,1,https://github.com/glfw/glfw/pull/1402,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ewtoombs,1,https://github.com/glfw/glfw/pull/1406,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.",True,"{'HEART': ['https://github.com/linkmauve', 'https://github.com/amonakov', 'https://github.com/tombsar', 'https://github.com/unrelentingtech', 'https://github.com/zlsa', 'https://github.com/vans163', 'https://github.com/vaheqelyan', 'https://github.com/gracicot', 'https://github.com/ninja-', 'https://github.com/fabioarnold', 'https://github.com/ShenCiao']}"
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ewtoombs,2,https://github.com/glfw/glfw/pull/1406#issuecomment-448736048,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.",My test code is here: https://gitlab.freedesktop.org/ewtoombs/opengl_glfw_latency_test,True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/amonakov,3,https://github.com/glfw/glfw/pull/1406#issuecomment-448925896,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","Nice! Can you comment to what degree this is implementable on other platforms?
OpenGL does not expose frame queue depth, so on Windows and X11 this is not straightforward, but nevertheless may be possible. For example, Croteam's Serious Engine can utilize the ""presentation"" part of VDPAU to keep frame visibility delays under control, iiuc. Other avenues are OML_sync_control with Mesa drivers and NV_delay_before_swap on Nvidia, I think.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ewtoombs,4,https://github.com/glfw/glfw/pull/1406#issuecomment-449090603,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","Nice! Can you comment to what degree this is implementable on other platforms?

I wish I could, @amonakov. I am pretty new to this, so wayland is the only one I have really looked into in-depth.

OpenGL does not expose frame queue depth, so on Windows and X11 this is not straightforward, but nevertheless may be possible. For example, Croteam's Serious Engine can utilize the ""presentation"" part of VDPAU to keep frame visibility delays under control, iiuc. Other avenues are OML_sync_control with Mesa drivers and NV_delay_before_swap on Nvidia, I think.

I see the GLX_OML_sync_control extension in my glxinfo! I can test that one. The others, I don't think I can. I am hoping somebody with the hardware can test them. There are also a whole bunch of other GLX extensions with the words swap or sync in them that are supported by my card:
server glx extensions:
    GLX_INTEL_swap_event, GLX_OML_swap_method, GLX_SGI_swap_control
client glx extensions:
    GLX_INTEL_swap_event, GLX_MESA_swap_control, GLX_OML_swap_method,
    GLX_OML_sync_control, GLX_SGI_swap_control, GLX_SGI_video_sync",True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ninja-,5,https://github.com/glfw/glfw/pull/1406#issuecomment-650690699,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.",what's the status of this? :),True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ewtoombs,6,https://github.com/glfw/glfw/pull/1406#issuecomment-652746059,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","It was working a year ago, when I had written it. Now, I don't know. As a part of wayland native support, I thought it could have been added right after I had written it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ninja-,7,https://github.com/glfw/glfw/pull/1406#issuecomment-652901174,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","@ewtoombs I am currently taking care of wayland fixes so I might be interested in taking over this one as well 🤔
Do you think this should be an opt-in or always sync render time this way?
Does this improve smoothness of v-sync running games or there wouldn't be much difference in this case?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ewtoombs,8,https://github.com/glfw/glfw/pull/1406#issuecomment-653266195,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","It has to be opt-in, because SwapInterval() must be set to 0 in order for it to work.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ewtoombs,9,https://github.com/glfw/glfw/pull/1406#issuecomment-653268721,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","It is not a smoothness fix, but a latency fix, capable of reducing the mouse to screen latency by around a whole frame. Smoothness will be unaffected if all you do is adopt presentation-time. If you also add the 10ms rendering delay after swap, which you have to in order to get next-frame rendering, you lose the same number of milliseconds from your rendering budget, so that could actually make smoothness much worse, if the game requires the entire frame's rendering budget for worst cast renders.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ninja-,10,https://github.com/glfw/glfw/pull/1406#issuecomment-653454508,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","It is not a smoothness fix, but a latency fix, capable of reducing the mouse to screen latency by around a whole frame. Smoothness will be unaffected if all you do is adopt presentation-time. If you also add the 10ms rendering delay after swap, which you have to in order to get next-frame rendering, you lose the same number of milliseconds from your rendering budget, so that could actually make smoothness much worse, if the game requires the entire frame's rendering budget for worst cast renders.

Typical budget is 1000/60 = 16.66ms, so losing 10ms sounds like quite a lot, especially for games?
What apps do you think could benefit from this change and which not?
Input lag is of course important to games, but not at the cost od 2/3 rendering time.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1406,2018-12-19T20:35:31Z,,2022-03-20T22:03:28Z,OPEN,False,144,0,5,https://github.com/ewtoombs,Support for next-frame rendering using presentation-time,1,['Wayland'],https://github.com/glfw/glfw/pull/1406,https://github.com/ewtoombs,11,https://github.com/glfw/glfw/pull/1406#issuecomment-653909811,"I added two functions to the wayland native API:
glfwWaylandPresSupported() checks the compositor for presentation-time support. glfwWaylandSwapPres() swaps the buffers, then blocks until the newly-rendered frame is displayed on the screen, processing events for the whole time. It returns the frame's presentation time with respect to the glfwGetTime() clock.
I did some testing with weston and a test app. The app has a black background. It renders a white cursor at the location of every mouse move event seen so far. The closer the hardware cursor is to the rendered cursor, the less delay there is.
Here is Mesa's synchronisation with SwapInterval set to 1.

Here is presentation-time (SwapInterval has to be set to 0 for this method to work.)

Here's the same thing with a 10ms delay added after the swap to wait for as many new mouse events as possible before starting the render.

The cursors are synchronised! They said it couldn't be done. Thus I have achieved next-frame rendering. I had to set weston's repaint-window to 3ms to get this last result.","Only AAA games use all 17ms of their rendering budget. The vast majority of regular games could render in 1 or 2 ms without a problem. Such games could work just fine with next frame scheduling. Emulators in particular benefit enormously. Super Mario World rendered next-frame is decidedly twitchy. It's awesome. But yes, this won't work for all games.",True,"{'THUMBS_UP': ['https://github.com/ninja-', 'https://github.com/npip99']}"
glfw/glfw,https://github.com/glfw/glfw,1407,2018-12-22T13:16:43Z,2019-02-15T14:47:01Z,2019-04-15T20:13:37Z,CLOSED,False,8,0,1,https://github.com/unrelentingtech,Wayland: use SHM_ANON on FreeBSD (like memfd on Linux),1,['Wayland'],https://github.com/glfw/glfw/pull/1407,https://github.com/unrelentingtech,1,https://github.com/glfw/glfw/pull/1407,"Reference: shm_open(2)
Similar patches: GTK, Firefox","Reference: shm_open(2)
Similar patches: GTK, Firefox",True,{}
glfw/glfw,https://github.com/glfw/glfw,1407,2018-12-22T13:16:43Z,2019-02-15T14:47:01Z,2019-04-15T20:13:37Z,CLOSED,False,8,0,1,https://github.com/unrelentingtech,Wayland: use SHM_ANON on FreeBSD (like memfd on Linux),1,['Wayland'],https://github.com/glfw/glfw/pull/1407,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1407#issuecomment-464074440,"Reference: shm_open(2)
Similar patches: GTK, Firefox","LGTM, and sorry for not noticing this patch earlier!
This commit is now merged as 36ce73b, I just changed the message to make it fit under 50 characters.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1408,2018-12-24T21:15:25Z,2019-01-29T18:28:23Z,2019-01-29T18:28:24Z,CLOSED,False,17,39,6,None,Removed duplicates of centerCursor function,4,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1408,None,1,https://github.com/glfw/glfw/pull/1408,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1408,2018-12-24T21:15:25Z,2019-01-29T18:28:23Z,2019-01-29T18:28:24Z,CLOSED,False,17,39,6,None,Removed duplicates of centerCursor function,4,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1408,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1408#issuecomment-458652594,,This has been merged as a46104e. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1411,2018-12-29T22:06:56Z,2019-02-13T23:20:34Z,2019-02-13T23:21:41Z,CLOSED,False,1,1,1,https://github.com/schraf,Update CMakeLists.txt,1,"['bug', 'build']",https://github.com/glfw/glfw/pull/1411,https://github.com/schraf,1,https://github.com/glfw/glfw/pull/1411,"I was getting an error in this cmake file when using 3.10.2 on linux. Here was the error message I was getting:
[cmake] CMake Error at external/glfw/src/CMakeLists.txt:82 (if):
[cmake]   if given arguments:
[cmake]
[cmake]     ""STREQUAL"" ""GNU"" ""OR"" ""STREQUAL"" ""Clang""
[cmake]
[cmake]   Unknown arguments specified
Adding the quotes around the cmake variables seems to do the trick. That was also done with the STREQUAL condition earlier on line 66.","I was getting an error in this cmake file when using 3.10.2 on linux. Here was the error message I was getting:
[cmake] CMake Error at external/glfw/src/CMakeLists.txt:82 (if):
[cmake]   if given arguments:
[cmake]
[cmake]     ""STREQUAL"" ""GNU"" ""OR"" ""STREQUAL"" ""Clang""
[cmake]
[cmake]   Unknown arguments specified
Adding the quotes around the cmake variables seems to do the trick. That was also done with the STREQUAL condition earlier on line 66.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1411,2018-12-29T22:06:56Z,2019-02-13T23:20:34Z,2019-02-13T23:21:41Z,CLOSED,False,1,1,1,https://github.com/schraf,Update CMakeLists.txt,1,"['bug', 'build']",https://github.com/glfw/glfw/pull/1411,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1411#issuecomment-461601625,"I was getting an error in this cmake file when using 3.10.2 on linux. Here was the error message I was getting:
[cmake] CMake Error at external/glfw/src/CMakeLists.txt:82 (if):
[cmake]   if given arguments:
[cmake]
[cmake]     ""STREQUAL"" ""GNU"" ""OR"" ""STREQUAL"" ""Clang""
[cmake]
[cmake]   Unknown arguments specified
Adding the quotes around the cmake variables seems to do the trick. That was also done with the STREQUAL condition earlier on line 66.","It seems CMAKE_C_COMPILER_ID isn't being set on your machine, which I didn't know could happen.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1411,2018-12-29T22:06:56Z,2019-02-13T23:20:34Z,2019-02-13T23:21:41Z,CLOSED,False,1,1,1,https://github.com/schraf,Update CMakeLists.txt,1,"['bug', 'build']",https://github.com/glfw/glfw/pull/1411,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1411#issuecomment-463416573,"I was getting an error in this cmake file when using 3.10.2 on linux. Here was the error message I was getting:
[cmake] CMake Error at external/glfw/src/CMakeLists.txt:82 (if):
[cmake]   if given arguments:
[cmake]
[cmake]     ""STREQUAL"" ""GNU"" ""OR"" ""STREQUAL"" ""Clang""
[cmake]
[cmake]   Unknown arguments specified
Adding the quotes around the cmake variables seems to do the trick. That was also done with the STREQUAL condition earlier on line 66.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1416,2019-01-11T19:30:26Z,2020-05-27T21:14:26Z,2020-05-27T21:14:32Z,CLOSED,False,5,0,1,https://github.com/0xb8,CMake: enable policy CMP0077.,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1416,https://github.com/0xb8,1,https://github.com/glfw/glfw/pull/1416,"This policy makes it easier for users to set library option()s when used
as CMake subproject.","This policy makes it easier for users to set library option()s when used
as CMake subproject.",True,{'THUMBS_UP': ['https://github.com/scurest']}
glfw/glfw,https://github.com/glfw/glfw,1416,2019-01-11T19:30:26Z,2020-05-27T21:14:26Z,2020-05-27T21:14:32Z,CLOSED,False,5,0,1,https://github.com/0xb8,CMake: enable policy CMP0077.,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1416,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1416#issuecomment-634944057,"This policy makes it easier for users to set library option()s when used
as CMake subproject.",Apologies. This was fixed with 71e6ff3 before I reviewed this PR.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1417,2019-01-14T02:17:24Z,2019-03-05T19:34:00Z,2019-03-05T19:34:01Z,CLOSED,False,58,5,2,https://github.com/amarcu5,Fix for VSync on 10.14 Mojave,3,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1417,https://github.com/amarcu5,1,https://github.com/glfw/glfw/pull/1417,"Addresses issue #1337
Fixes VSync on macOS 10.14 (Mojave) by using CVDisplayLink to synchronize frames rather than setting NSOpenGLContextParameterSwapInterval.
Based on work for SDL by @rcgordon: https://hg.libsdl.org/SDL/rev/73f3ca85ac0e","Addresses issue #1337
Fixes VSync on macOS 10.14 (Mojave) by using CVDisplayLink to synchronize frames rather than setting NSOpenGLContextParameterSwapInterval.
Based on work for SDL by @rcgordon: https://hg.libsdl.org/SDL/rev/73f3ca85ac0e",True,"{'THUMBS_UP': ['https://github.com/kivutar', 'https://github.com/GreenLightning', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1417,2019-01-14T02:17:24Z,2019-03-05T19:34:00Z,2019-03-05T19:34:01Z,CLOSED,False,58,5,2,https://github.com/amarcu5,Fix for VSync on 10.14 Mojave,3,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1417,https://github.com/GreenLightning,2,https://github.com/glfw/glfw/pull/1417#issuecomment-459777145,"Addresses issue #1337
Fixes VSync on macOS 10.14 (Mojave) by using CVDisplayLink to synchronize frames rather than setting NSOpenGLContextParameterSwapInterval.
Based on work for SDL by @rcgordon: https://hg.libsdl.org/SDL/rev/73f3ca85ac0e",My initial testing suggests that this fixes #680 as well!,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1417,2019-01-14T02:17:24Z,2019-03-05T19:34:00Z,2019-03-05T19:34:01Z,CLOSED,False,58,5,2,https://github.com/amarcu5,Fix for VSync on 10.14 Mojave,3,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1417,https://github.com/kovidgoyal,3,https://github.com/glfw/glfw/pull/1417#issuecomment-465849303,"Addresses issue #1337
Fixes VSync on macOS 10.14 (Mojave) by using CVDisplayLink to synchronize frames rather than setting NSOpenGLContextParameterSwapInterval.
Based on work for SDL by @rcgordon: https://hg.libsdl.org/SDL/rev/73f3ca85ac0e","This PR is not really correct. Various problems:


Race condition between CVLinkDisplayThread and main thread on window close. This can lead to crashes, such as kovidgoyal/kitty#1393


This will create a new thread for every window, which is a waste of resources. CVDisplayLink is a simple timer, there should be one per monitor, not one per window.


Different monitors can have different refresh rates, CVDisplayLinkSetCurrentCGDisplayFromOpenGLContext simply sets the rate to the slowest connected monitor, which is sub-optimal https://developer.apple.com/documentation/corevideo/1457164-cvdisplaylinksetcurrentcgdisplay?language=objc


In my glfw fork I abandoned setInterval completely and instead used a render frame callback, so applications can choose to do rendering work as and when needed, reducinf CPU consumption. This also works on wayland which has a render frame protocol.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1417,2019-01-14T02:17:24Z,2019-03-05T19:34:00Z,2019-03-05T19:34:01Z,CLOSED,False,58,5,2,https://github.com/amarcu5,Fix for VSync on 10.14 Mojave,3,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1417,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1417#issuecomment-465977583,"Addresses issue #1337
Fixes VSync on macOS 10.14 (Mojave) by using CVDisplayLink to synchronize frames rather than setting NSOpenGLContextParameterSwapInterval.
Based on work for SDL by @rcgordon: https://hg.libsdl.org/SDL/rev/73f3ca85ac0e",@kovidgoyal See above for fixes of issues 1 and 3 and related bugs.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1417,2019-01-14T02:17:24Z,2019-03-05T19:34:00Z,2019-03-05T19:34:01Z,CLOSED,False,58,5,2,https://github.com/amarcu5,Fix for VSync on 10.14 Mojave,3,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1417,https://github.com/kovidgoyal,5,https://github.com/glfw/glfw/pull/1417#issuecomment-465990628,"Addresses issue #1337
Fixes VSync on macOS 10.14 (Mojave) by using CVDisplayLink to synchronize frames rather than setting NSOpenGLContextParameterSwapInterval.
Based on work for SDL by @rcgordon: https://hg.libsdl.org/SDL/rev/73f3ca85ac0e","As far as I can tell, the race still exists. Imagine the display link thread gets stopped in the middle of displayLinkCallback and the window gets destroyed  in the main thread. Then the display link thread is resumed, leading to a crash. This might be fixable by stopping the display link thread at the begininng of destroying the window, but that is assuming that stopping the thread actually stops it even if it is in the middle of a callback, and not after the callback completes.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1417,2019-01-14T02:17:24Z,2019-03-05T19:34:00Z,2019-03-05T19:34:01Z,CLOSED,False,58,5,2,https://github.com/amarcu5,Fix for VSync on 10.14 Mojave,3,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1417,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1417#issuecomment-466393091,"Addresses issue #1337
Fixes VSync on macOS 10.14 (Mojave) by using CVDisplayLink to synchronize frames rather than setting NSOpenGLContextParameterSwapInterval.
Based on work for SDL by @rcgordon: https://hg.libsdl.org/SDL/rev/73f3ca85ac0e",I was hoping display link was sane enough to join on its worker thread at stop or release but will look into whether this is actually done.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1417,2019-01-14T02:17:24Z,2019-03-05T19:34:00Z,2019-03-05T19:34:01Z,CLOSED,False,58,5,2,https://github.com/amarcu5,Fix for VSync on 10.14 Mojave,3,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1417,https://github.com/kovidgoyal,7,https://github.com/glfw/glfw/pull/1417#issuecomment-466608951,"Addresses issue #1337
Fixes VSync on macOS 10.14 (Mojave) by using CVDisplayLink to synchronize frames rather than setting NSOpenGLContextParameterSwapInterval.
Based on work for SDL by @rcgordon: https://hg.libsdl.org/SDL/rev/73f3ca85ac0e","Since the documentation does not talk about the threading semantics of display link at all, I would not be comfortable relying on it. In my code, I use a global lock in _glfw.ns to ensure there are no races between monitor removal/display link.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1418,2019-01-15T06:46:04Z,2019-01-17T22:09:12Z,2019-01-17T22:09:23Z,CLOSED,False,1,1,1,https://github.com/maobaoqi,Fixed a little bug in CrossProduct function.,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1418,https://github.com/maobaoqi,1,https://github.com/glfw/glfw/pull/1418,"Hi, I read boing.c and find a little bug about cross product alogrithm. Although it doesn't matter for rendering result, I want to fix it. Thanks!^_^","Hi, I read boing.c and find a little bug about cross product alogrithm. Although it doesn't matter for rendering result, I want to fix it. Thanks!^_^",True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/GreenLightning']}"
glfw/glfw,https://github.com/glfw/glfw,1418,2019-01-15T06:46:04Z,2019-01-17T22:09:12Z,2019-01-17T22:09:23Z,CLOSED,False,1,1,1,https://github.com/maobaoqi,Fixed a little bug in CrossProduct function.,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1418,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1418#issuecomment-455350498,"Hi, I read boing.c and find a little bug about cross product alogrithm. Although it doesn't matter for rendering result, I want to fix it. Thanks!^_^",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1419,2019-01-18T17:58:15Z,2019-01-29T18:25:00Z,2019-04-15T20:15:20Z,CLOSED,False,1,0,1,https://github.com/ivan-achlaqullah,Ignore Visual Studio 2017 cache directory,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1419,https://github.com/ivan-achlaqullah,1,https://github.com/glfw/glfw/pull/1419,"Today when i'm building glfw using Visual Studio 2017, I noticed that the cache directory .vs/ are not ignored.

Since other generated files for Visual Studio are ignored, I decided to add it to .gitignore","Today when i'm building glfw using Visual Studio 2017, I noticed that the cache directory .vs/ are not ignored.

Since other generated files for Visual Studio are ignored, I decided to add it to .gitignore",True,{}
glfw/glfw,https://github.com/glfw/glfw,1420,2019-01-19T19:45:46Z,,2021-10-29T13:07:43Z,OPEN,False,447,1,10,https://github.com/RobbinMarcus,Support for drag and resize operations,4,['enhancement'],https://github.com/glfw/glfw/pull/1420,https://github.com/RobbinMarcus,1,https://github.com/glfw/glfw/pull/1420,"This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.","This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.",True,"{'THUMBS_UP': ['https://github.com/almic', 'https://github.com/bryphe', 'https://github.com/johnnovak', 'https://github.com/xteo', 'https://github.com/adenine-dev', 'https://github.com/emoon', 'https://github.com/robbie-vanderzee', 'https://github.com/JasonTheKitten', 'https://github.com/Cons-Cat', 'https://github.com/Jaytheway', 'https://github.com/shujaatak', 'https://github.com/pablojimpas']}"
glfw/glfw,https://github.com/glfw/glfw,1420,2019-01-19T19:45:46Z,,2021-10-29T13:07:43Z,OPEN,False,447,1,10,https://github.com/RobbinMarcus,Support for drag and resize operations,4,['enhancement'],https://github.com/glfw/glfw/pull/1420,https://github.com/xteo,2,https://github.com/glfw/glfw/pull/1420#issuecomment-616004192,"This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.","@RobbinMarcus : Thanks for this MR
I am trying to setup our Application ( using GLFW) to be without OS Title bar so we can control the Look of the Titlebar fully like other moderm application
I will try you MR this week but wanted to ask a question. in your note you mentioned you still have issue with Resize ? did I understand well ?
** Undecorated glfwResizeWindow does not work, I cannot figure out why.**
Thanks for your contribution hope to get it working!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1420,2019-01-19T19:45:46Z,,2021-10-29T13:07:43Z,OPEN,False,447,1,10,https://github.com/RobbinMarcus,Support for drag and resize operations,4,['enhancement'],https://github.com/glfw/glfw/pull/1420,https://github.com/RobbinMarcus,3,https://github.com/glfw/glfw/pull/1420#issuecomment-616070708,"This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.","Hi @xteo.
Yes that's correct, trying to resize the window does not work in this PR.
I've tried to fiddle with some things but I couldn't get it to work. Good luck!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1420,2019-01-19T19:45:46Z,,2021-10-29T13:07:43Z,OPEN,False,447,1,10,https://github.com/RobbinMarcus,Support for drag and resize operations,4,['enhancement'],https://github.com/glfw/glfw/pull/1420,https://github.com/rokups,4,https://github.com/glfw/glfw/pull/1420#issuecomment-826796654,"This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.","This feature would be very helpful to Dear ImGui, so i was testing this functionality a bit. X11 implementation has an issue where drag operation makes mouse button stuck in pressed state even after drag operation is done and mouse button is released (which happens over window by the way). If anyone has any ideas how to work this around - please speak 🙏🏻
Edit:
This fixes stuck mouse buttons. I probably is reasonable thing to do, since window only receives press/release events, so if mouse with pressed button enters window it does not report this state anyway.
        case EnterNotify:
        {
            // <...>
            for (int i = 0; i <= GLFW_MOUSE_BUTTON_LAST; i++)
            {
                if (window->mouseButtons[i])
                    _glfwInputMouseClick(window, 0, GLFW_RELEASE, 0);
            }
Edit2: This mos likely is not correct and would break if we hold mouse button down over window, move mouse out of that window and move it back in while button is still held down, so it needs additional work.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1420,2019-01-19T19:45:46Z,,2021-10-29T13:07:43Z,OPEN,False,447,1,10,https://github.com/RobbinMarcus,Support for drag and resize operations,4,['enhancement'],https://github.com/glfw/glfw/pull/1420,https://github.com/emoon,5,https://github.com/glfw/glfw/pull/1420#issuecomment-834123960,"This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.",It would be great to get this feature in. It's something I want myself as well,True,"{'THUMBS_UP': ['https://github.com/robbie-vanderzee', 'https://github.com/JasonTheKitten', 'https://github.com/Cons-Cat']}"
glfw/glfw,https://github.com/glfw/glfw,1420,2019-01-19T19:45:46Z,,2021-10-29T13:07:43Z,OPEN,False,447,1,10,https://github.com/RobbinMarcus,Support for drag and resize operations,4,['enhancement'],https://github.com/glfw/glfw/pull/1420,https://github.com/rokups,6,https://github.com/glfw/glfw/pull/1420#issuecomment-834133219,"This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.","I spent some time ironing it out. It works quite good on X11 now, but in the process i had to also fix inconsistent mouse button reporting. On windows however resizing seems to not work at all. I am not sure why, but maybe application has to support handling these resize messages..?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1420,2019-01-19T19:45:46Z,,2021-10-29T13:07:43Z,OPEN,False,447,1,10,https://github.com/RobbinMarcus,Support for drag and resize operations,4,['enhancement'],https://github.com/glfw/glfw/pull/1420,https://github.com/JasonTheKitten,7,https://github.com/glfw/glfw/pull/1420#issuecomment-889974835,"This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.","I believe this PR would be extremely useful.
Many times, one wishes to use an undecorated window. Perhaps they want their custom window decorations to have a different aesthetic. Or perhaps they want to add extra widgets to the decoration.
While it is possible (and easy) to manually write code to drag an undecorated window, it may not encompass all of the features of the default drag behavior of the OS's windowing system.
For example, on Windows, the default windowing system will allow you to maximize windows if you drag them to the top, or do a side-by-side view if you drag them to the sides.
This is why I would like this PR to be merged.",True,{'THUMBS_UP': ['https://github.com/ikeofkc']}
glfw/glfw,https://github.com/glfw/glfw,1420,2019-01-19T19:45:46Z,,2021-10-29T13:07:43Z,OPEN,False,447,1,10,https://github.com/RobbinMarcus,Support for drag and resize operations,4,['enhancement'],https://github.com/glfw/glfw/pull/1420,https://github.com/Cons-Cat,8,https://github.com/glfw/glfw/pull/1420#issuecomment-894819397,"This is a cleaned up version that merges both changes for the drag operation and resize operation. I implemented the requested changes by @jadahl and @linkmauve and solved conflicts generated by the old pull requests.
Merged these two pull requests together:

Add support for drag operation on borderless window #987
Support for resize operation on borderless windows #991

Affected issues:

Provide a way to specify the window drag area on an undecorrated window #923
Support for resizing undecorated window #990

Current state:
I tested these changes on windows (win32). I changed the ""simple"" example to have an undecorated window and added a mouse callback to call one of the operations (glfwDragWindow or glfwResizeWindow).

Undecorated glfwDragWindow works as intended.
Undecorated glfwResizeWindow does not work, I cannot figure out why.
Decorated glfwDragWindow works as intended.
Decorated glfwResizeWindow works as intended.",I would certainly use this!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1425,2019-01-31T23:10:18Z,2019-01-31T23:25:51Z,2022-03-17T17:04:29Z,CLOSED,False,23,16,3,https://github.com/JasperNV,Fix issues with XInput,1,"['wontfix', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1425,https://github.com/JasperNV,1,https://github.com/glfw/glfw/pull/1425,"glfwInit() will call _glfwPlatformInit(), which on Win32 will call
_glfwInitJoysticksWin32(), which will try to create an XInput gamepad
using the SDL device ID for XInput. However, at this point in time, the
default mappings for controllers hasn't been initialized, so we end up
with an XInput gamepad with no mappings.
Fix this by loading the mappings before calling glfwInit().","glfwInit() will call _glfwPlatformInit(), which on Win32 will call
_glfwInitJoysticksWin32(), which will try to create an XInput gamepad
using the SDL device ID for XInput. However, at this point in time, the
default mappings for controllers hasn't been initialized, so we end up
with an XInput gamepad with no mappings.
Fix this by loading the mappings before calling glfwInit().",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/mmozeiko,1,https://github.com/glfw/glfw/pull/1426,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.",True,"{'THUMBS_UP': ['https://github.com/GreenLightning', 'https://github.com/nathan818fr', 'https://github.com/r00ster91', 'https://github.com/kortfattat', 'https://github.com/CuriouserThing', 'https://github.com/vtlmks', 'https://github.com/Geometror', 'https://github.com/malytomas'], 'HOORAY': ['https://github.com/nathan818fr', 'https://github.com/r00ster91', 'https://github.com/bryphe', 'https://github.com/gracicot', 'https://github.com/CuriouserThing', 'https://github.com/vtlmks', 'https://github.com/Geometror', 'https://github.com/malytomas']}"
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/GreenLightning,2,https://github.com/glfw/glfw/pull/1426#issuecomment-460683098,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","Very nice pull request!
I tested it on Windows 10.
I am currently rendering from the window position callback and the window refresh callback to work around the modal event loop. This kind of works if the user keeps moving the mouse, which luckily is usually the case while moving / resizing. But my workaround fails when the user stops moving the mouse or just clicks on the title bar without dragging. Using this pull request it works perfectly and the code is simpler because I no longer need the callbacks.
One potential disadvantage is that this (both the change proposed by this pull request and my workaround described in the paragraph above) causes the application to block Windows from updating the window position and size. This is probably not noticeable in the example applications, because they update and render so quickly. To make the issue apparent, e. g. in the particles example, add a delay to the beginning of draw_scene like this:
	// Sleep for 50 milliseconds
	struct timespec time;
	clock_gettime(CLOCK_REALTIME, &time);
	time.tv_nsec += 50 * 1000000;
	thrd_sleep(&time, NULL);

This will reduce the framerate to slightly less than 20 FPS to simulate a really slow application. If you move / resize the window now it will look very choppy with this pull request, whereas before the rendering was interrupted by the modal event loop, but the window was moving very smoothly.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1426#issuecomment-460782054,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.",Will look into this after 3.3 is out.,True,"{'THUMBS_UP': ['https://github.com/GreenLightning', 'https://github.com/nathan818fr', 'https://github.com/prithvidiamond1'], 'HEART': ['https://github.com/prithvidiamond1']}"
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/nathan818fr,4,https://github.com/glfw/glfw/pull/1426#issuecomment-461790838,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","Great pull request !
I have implemented it on the alpha version of one of my java program (using Java w/ LWJGL).
Some users have reported a stack overflow error from the glfwPollEvents call (on Windows 10, amd64).
Source code: https://github.com/nathan818fr/glfw/tree/3f2cd09cc3017b9f6c89b3156d2106b776916cef
Note: The stack overflow error comes from the native method, not from the Java program. And when I revert the commit: no more bug.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/mmozeiko,5,https://github.com/glfw/glfw/pull/1426#issuecomment-461912624,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","Oh, it slipped my mind to consider using glfw in other languages. I could see garbage collected languages such as Java or C# having an issue here. Not sure how well they will work with fibers.
Probably this kind of functionality should be off by default and turned on with hint from user only.
Any chance to get full stack backtrace from the error? Or coredump/minidump?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/nathan818fr,6,https://github.com/glfw/glfw/pull/1426#issuecomment-461998603,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","I will send you more information as soon as possible (I can not reproduce the bug on my PC).
Note however that the pull request worked well for more than 10,000 users. But 3 users raised this problem.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/mmozeiko,7,https://github.com/glfw/glfw/pull/1426#issuecomment-462001099,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","Yeah, that sounds exactly like the result what I would expect from garbage collector. Most of the time it works fine. But in some very special case, when memory aligns in specific way and GC kicks in at particular time  - everything breaks in a weird way. The more I think about this, the more I'm convinced that fibers used in this way won't work well with managed languages who have garbage collectors. The stack will be completely different from normal execution, so it won't be able to collect all live references and will probably try to free objects too soon.
I guess I'll update pull request with extra window hint that enables this behavior.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/mmozeiko,8,https://github.com/glfw/glfw/pull/1426#issuecomment-595676081,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.",I've added GLFW_WIN32_MESSAGES_IN_FIBER init hint to enable this functionality only on request from user.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/prithvidiamond1,9,https://github.com/glfw/glfw/pull/1426#issuecomment-636062525,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","I have a doubt... how can I make use of this to fix the skippy resize issue? I am a noob and I am using the python bindings which has a garbage collector, so has the issue with garbage collector languages been patched?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/mmozeiko,10,https://github.com/glfw/glfw/pull/1426#issuecomment-636102316,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","You add glfwWindowHint(GLFW_WIN32_MESSAGES_IN_FIBER, GLFW_TRUE) before call to glfwCreateWindow. There is no way to ""patch"" issues with GC languages. This is fundamentally incompatible with languages that use GC, unless they are fiber aware (which I don't think they are).
But I think Python should be fine - because it does not JIT the code. All GC work happens only on Python objects, not on native memory. Haven't tried it though, so it's up to you.",True,"{'THUMBS_UP': ['https://github.com/prithvidiamond1', 'https://github.com/GreenLightning'], 'HEART': ['https://github.com/prithvidiamond1']}"
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/prithvidiamond1,11,https://github.com/glfw/glfw/pull/1426#issuecomment-636108443,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.",@mmozeiko Thanks! seems easy enough to do... However I don't think any of the python bindings have been updated with GLFW_WIN32_MESSAGES_IN_FIBRE... I overheard that this patch hasn't been merged with the official repo... So until that happens I guess I am stuck... Any idea when it will be merged?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/mmozeiko,12,https://github.com/glfw/glfw/pull/1426#issuecomment-636109966,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","As long as you build glfw dll yourself from this pull request, you can use existing Python bindings.
GLFW_WIN32_MESSAGES_IN_FIBER is just a number, take it from glfw3.h header (value 0x00051003) and write it explicitly in Python code.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/prithvidiamond1,13,https://github.com/glfw/glfw/pull/1426#issuecomment-636112616,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","Ok I will look into it tomorrow (it is really late where I live...). However, I might need some help, as I am kinda of a noob at this kinda of stuff...
To be specific, how does one build a dll? I can get the writing in python part done...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/Xiliusha,14,https://github.com/glfw/glfw/pull/1426#issuecomment-650670354,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","Thanks! Moving and sizing modal loop block my game. Some player using this feature to cheat. I hate it.
Could I embedded this solution in my game?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/mmozeiko,15,https://github.com/glfw/glfw/pull/1426#issuecomment-650699390,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","You should prevent cheating by logical checks, not by workarounds for win32 api functions. If delaying window messages is all the cheaters need to cheat, then they can simply write extra software that will hook your GLFW window procedure and produce artificial delays. It's pretty trivial to do that. And this branch or any other GLFW functionality won't prevent that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/joaodasilva,16,https://github.com/glfw/glfw/pull/1426#issuecomment-950617105,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","Will this be merged into GLFW, given that it's an opt-in behavior with the hint?
With this patch, the main loop runs at 60 FPS while dragging or resizing the window though it runs at 120 FPS otherwise on a 120Hz monitor. It would be interesting to understand why this happens, and to verify whether it also happens on 60Hz monitors.
Another workaround for draw-during-resizes is to draw from a background thread. That works, but background threads can't call into most GLFW APIs. That's not an issue in most programs, but generic runtimes can't guarantee that client code won't call into glfwGetSize from the drawing thread, for example. (This example comes from a Javascript wrapper around GLFW. The Javascript code might well inspect the window size during its drawing callbacks, which would block during resizes.)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/joaodasilva,17,https://github.com/glfw/glfw/pull/1426#issuecomment-965648580,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","The resize callbacks don't get dispatched if the resize mouse-down happens while the window isn't focused. E.g. click on another application, then click on the window border and start resizing: events won't get dispatched again.
This is caused by the window->win32.frameAction check and early return when handling WM_ENTERSIZEMOVE / WM_EXITSIZEMOVE; that check is meant to skip the enableCursor / disableCursor calls though, and shouldn't skip the timer setup code introduced by the patch.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1426,2019-02-03T22:09:10Z,,2022-02-11T03:34:59Z,OPEN,False,161,34,7,https://github.com/mmozeiko,Win32: Do the event processing during window resize/move,2,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1426,https://github.com/tycho,18,https://github.com/glfw/glfw/pull/1426#issuecomment-1035852385,"This change provides workaround for Windows modal event loop while window is being resized/moved.
User can continue using their standard ""while"" event loop in main thread to do updates in their application.
Change includes two parts:


Move message dispatching in separate fiber. This allows to ""break out"" the modal event loop. This is done by using timer which fires after 1msec on window resize/move event. After timer fires, the control returns to main code. There is pretty much no performance overhead for switching fibers in this situation.


Handle non-client left mouse click on title bar. Otherwise Windows does not return in DefWindowProc. Easy way to do this is to defer calling DefWindowProc on WM_NCLBUTTONDOWN message. Wait until user moves mouse (WMNC_MOUSEMOVE or WM_MOUSEMOVE) and then deliver original message. For example, exact same thing is done in Google Chromium source code.


This fixes issues like #1231, #561, #185.
To check how this new behavior works - open any example that does some kind of animation in their main loop. For example, particles. Then try resizing or dragging window. Notice how all animation stops without this change. But with this pull request the animation will smoothly continue updating.","I just tested this out (manually rebased on current master branch). It works very well in the samples I tested -- better than other approaches I've seen in other libraries like this, and better than my own hacked-together solution as well.
The only complaint I have is that rendering still pauses if the user clicks and holds on any of the minimize/maximize/close window buttons. Know of any way to address that?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1428,2019-02-07T13:28:38Z,2019-02-10T22:48:15Z,2019-02-10T23:10:35Z,CLOSED,False,5,4,2,https://github.com/Kangz,Win32: Fix flaky GetAsyncKeyState bit for CAPITAL and NUMLOCK,1,['Windows'],https://github.com/glfw/glfw/pull/1428,https://github.com/Kangz,1,https://github.com/glfw/glfw/pull/1428,"This bug was reported on the Chromium bug tracker at https://crbug.com/922095 and seems to have been caused by a race between 7c87948 that fixed the use of the first bit, and 0e8c4ea that added support for CAPITAL and NUM_LOCK.","This bug was reported on the Chromium bug tracker at https://crbug.com/922095 and seems to have been caused by a race between 7c87948 that fixed the use of the first bit, and 0e8c4ea that added support for CAPITAL and NUM_LOCK.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1428,2019-02-07T13:28:38Z,2019-02-10T22:48:15Z,2019-02-10T23:10:35Z,CLOSED,False,5,4,2,https://github.com/Kangz,Win32: Fix flaky GetAsyncKeyState bit for CAPITAL and NUMLOCK,1,['Windows'],https://github.com/glfw/glfw/pull/1428,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1428#issuecomment-462184277,"This bug was reported on the Chromium bug tracker at https://crbug.com/922095 and seems to have been caused by a race between 7c87948 that fixed the use of the first bit, and 0e8c4ea that added support for CAPITAL and NUM_LOCK.","The code seems correct as is. The MSB of the Win32 key state does indicate whether the physical key is down, but for a * Lock key GLFW uses its lock state for the corresponding modifier flag, not its pressed state. The lock state is indicated in the LSB of the Win32 key state.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1428,2019-02-07T13:28:38Z,2019-02-10T22:48:15Z,2019-02-10T23:10:35Z,CLOSED,False,5,4,2,https://github.com/Kangz,Win32: Fix flaky GetAsyncKeyState bit for CAPITAL and NUMLOCK,1,['Windows'],https://github.com/glfw/glfw/pull/1428,https://github.com/Kangz,3,https://github.com/glfw/glfw/pull/1428#issuecomment-462186663,"This bug was reported on the Chromium bug tracker at https://crbug.com/922095 and seems to have been caused by a race between 7c87948 that fixed the use of the first bit, and 0e8c4ea that added support for CAPITAL and NUM_LOCK.","My bad, the bug report in Chromium was against an old version of GLFW that uses GetAsyncKeyState while current master uses GetKeyState which doesn't have this issue.
Sorry for the noise, closing this.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1428,2019-02-07T13:28:38Z,2019-02-10T22:48:15Z,2019-02-10T23:10:35Z,CLOSED,False,5,4,2,https://github.com/Kangz,Win32: Fix flaky GetAsyncKeyState bit for CAPITAL and NUMLOCK,1,['Windows'],https://github.com/glfw/glfw/pull/1428,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1428#issuecomment-462190179,"This bug was reported on the Chromium bug tracker at https://crbug.com/922095 and seems to have been caused by a race between 7c87948 that fixed the use of the first bit, and 0e8c4ea that added support for CAPITAL and NUM_LOCK.",No worries!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1431,2019-02-11T16:26:28Z,2019-02-13T23:19:37Z,2019-02-13T23:22:17Z,CLOSED,False,12,8,2,https://github.com/maxhora,DPI aware standard cursor icons,1,"['bug', 'Windows', 'verified', 'High DPI']",https://github.com/glfw/glfw/pull/1431,https://github.com/maxhora,1,https://github.com/glfw/glfw/pull/1431,"Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:","Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:",True,{}
glfw/glfw,https://github.com/glfw/glfw,1431,2019-02-11T16:26:28Z,2019-02-13T23:19:37Z,2019-02-13T23:22:17Z,CLOSED,False,12,8,2,https://github.com/maxhora,DPI aware standard cursor icons,1,"['bug', 'Windows', 'verified', 'High DPI']",https://github.com/glfw/glfw/pull/1431,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1431#issuecomment-462439169,"Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:","Looks good, thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1431,2019-02-11T16:26:28Z,2019-02-13T23:19:37Z,2019-02-13T23:22:17Z,CLOSED,False,12,8,2,https://github.com/maxhora,DPI aware standard cursor icons,1,"['bug', 'Windows', 'verified', 'High DPI']",https://github.com/glfw/glfw/pull/1431,https://github.com/maxhora,3,https://github.com/glfw/glfw/pull/1431#issuecomment-462440997,"Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:",@elmindreda thanks! have updated description with screenshots,True,{}
glfw/glfw,https://github.com/glfw/glfw,1431,2019-02-11T16:26:28Z,2019-02-13T23:19:37Z,2019-02-13T23:22:17Z,CLOSED,False,12,8,2,https://github.com/maxhora,DPI aware standard cursor icons,1,"['bug', 'Windows', 'verified', 'High DPI']",https://github.com/glfw/glfw/pull/1431,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1431#issuecomment-462451017,"Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:","This patch loads a shared cursor, which is then destroyed in _glfwPlatformDestroyCursor. It should either make a copy of it or track whether the cursor is shared.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1431,2019-02-11T16:26:28Z,2019-02-13T23:19:37Z,2019-02-13T23:22:17Z,CLOSED,False,12,8,2,https://github.com/maxhora,DPI aware standard cursor icons,1,"['bug', 'Windows', 'verified', 'High DPI']",https://github.com/glfw/glfw/pull/1431,https://github.com/maxhora,5,https://github.com/glfw/glfw/pull/1431#issuecomment-462452788,"Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:",@elmindreda makes sense!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1431,2019-02-11T16:26:28Z,2019-02-13T23:19:37Z,2019-02-13T23:22:17Z,CLOSED,False,12,8,2,https://github.com/maxhora,DPI aware standard cursor icons,1,"['bug', 'Windows', 'verified', 'High DPI']",https://github.com/glfw/glfw/pull/1431,https://github.com/maxhora,6,https://github.com/glfw/glfw/pull/1431#issuecomment-462468942,"Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:","@elmindreda , If I'm going to use CopyCursor the issue with wrong size returns back.
It seems there is no way in Win API to check if cursor is shared or not.
Beside the fact that doc says ""Don't use DestroyCursor"" to destroy shared cursor, another more general doc clearly states:
You can destroy the cursor handle and free the memory the cursor used by calling the DestroyCursor function. However, this function has no effect on a shared cursor. A shared cursor is valid as long as the module from which it was loaded remains in memory.

So calling of DestroyCursor doesn't return error or corrupts shared cursor data, it's just silently returns.
Does it make sense to left the change as is, or, maybe, add collection to gather standard cursors handles to avoid call of DestroyCursor if collection lookup succeeded?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1431,2019-02-11T16:26:28Z,2019-02-13T23:19:37Z,2019-02-13T23:22:17Z,CLOSED,False,12,8,2,https://github.com/maxhora,DPI aware standard cursor icons,1,"['bug', 'Windows', 'verified', 'High DPI']",https://github.com/glfw/glfw/pull/1431,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1431#issuecomment-462496856,"Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:","Oh, that's fine then. Thank you! I'll merge this.",True,{'THUMBS_UP': ['https://github.com/maxhora']}
glfw/glfw,https://github.com/glfw/glfw,1431,2019-02-11T16:26:28Z,2019-02-13T23:19:37Z,2019-02-13T23:22:17Z,CLOSED,False,12,8,2,https://github.com/maxhora,DPI aware standard cursor icons,1,"['bug', 'Windows', 'verified', 'High DPI']",https://github.com/glfw/glfw/pull/1431,https://github.com/elmindreda,8,https://github.com/glfw/glfw/pull/1431#issuecomment-463416796,"Since LoadCursor doesn't support dpi virtualization, it leads to wrong scaling of user pointer cursor icon on multihead Windows setup in case if connected monitors have different dpi.
Changelist replaces LoadCursor with LoadImage to redirect correct scaling job to OS by setting LR_DEFAULTSIZE. LR_SHARED is required there since standard icons images are used and it assures that memory will be reused for similar cursor icons.
Normal ""standard"" cursor size after app started on primary monitor:

Oversized cursor issue after external monitor with lower DPI pluged-in as primary display:",This has been merged as cf79f06. Thank you!,True,{'HOORAY': ['https://github.com/maxhora']}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/Kangz,1,https://github.com/glfw/glfw/pull/1440,PTAL and no worries if you think this is not worth fixing.,PTAL and no worries if you think this is not worth fixing.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/Kangz,2,https://github.com/glfw/glfw/pull/1440#issuecomment-479083930,PTAL and no worries if you think this is not worth fixing.,Up! @elmindreda PTAL (I'll fix the merge issue with README.md if this looks ok),True,{}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1440#issuecomment-479481264,PTAL and no worries if you think this is not worth fixing.,"LGTM. Would you mind doing the other ones as well? cocoa_joystick.h, null_joystick.h, null_platform.h and win32_joystick.h has various other (bad) approaches to this.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/Kangz,4,https://github.com/glfw/glfw/pull/1440#issuecomment-479538923,PTAL and no worries if you think this is not worth fixing.,"Done, though I haven't tested compilation on all platform. AFAIK CI covers all configurations?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/Kangz,5,https://github.com/glfw/glfw/pull/1440#issuecomment-479562895,PTAL and no worries if you think this is not worth fixing.,Had to add an int dummy in the struct otherwise MSVC produces this error: error C2016: C requires that a struct or union has at least one member,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/Kangz,6,https://github.com/glfw/glfw/pull/1440#issuecomment-530499849,PTAL and no worries if you think this is not worth fixing.,Bump! I ran into this again today.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1440#issuecomment-530879528,PTAL and no worries if you think this is not worth fixing.,@Kangz Thank you for bump!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/Kangz,8,https://github.com/glfw/glfw/pull/1440#issuecomment-531563498,PTAL and no worries if you think this is not worth fixing.,@elmindreda PTAL again!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/Kangz,9,https://github.com/glfw/glfw/pull/1440#issuecomment-548104796,PTAL and no worries if you think this is not worth fixing.,Thanks!,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/Luflosi,10,https://github.com/glfw/glfw/pull/1440#issuecomment-633597572,PTAL and no worries if you think this is not worth fixing.,Wouldn't it have been nicer to just put the semicolons where the #defines are instead of doing the IMO ugly workaround with the dummyContext? I can make a PR to change this if it will be accepted.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1440,2019-02-26T09:12:26Z,2019-10-30T20:43:07Z,2020-05-25T21:35:15Z,CLOSED,False,14,13,6,https://github.com/Kangz,Fix -Wextra-semi warnings,1,['enhancement'],https://github.com/glfw/glfw/pull/1440,https://github.com/elmindreda,11,https://github.com/glfw/glfw/pull/1440#issuecomment-633722549,PTAL and no worries if you think this is not worth fixing.,"@Luflosi Agreed. I would accept this PR, only I'm hoping to merge runtime platform selection soon and that will remove these altogether.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1443,2019-03-01T17:52:34Z,2019-04-20T08:05:16Z,2019-07-22T22:26:59Z,MERGED,True,40,229,5,https://github.com/linkmauve,Remove wl_shell support,1,['Wayland'],https://github.com/glfw/glfw/pull/1443,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1443,"This protocol is part of the core Wayland, but it is pretty badly
designed and is missing quite a few features, and is in the process of
being phased out in compositors.  Its support in GLFW requires
duplicating pretty much every single window management codepath.
This bumps the required compositor versions to the ones which have
implemented xdg-shell, approximately two years ago, which seems sensible
to me.","This protocol is part of the core Wayland, but it is pretty badly
designed and is missing quite a few features, and is in the process of
being phased out in compositors.  Its support in GLFW requires
duplicating pretty much every single window management codepath.
This bumps the required compositor versions to the ones which have
implemented xdg-shell, approximately two years ago, which seems sensible
to me.",True,"{'THUMBS_UP': ['https://github.com/emersion', 'https://github.com/gracicot', 'https://github.com/elmindreda', 'https://github.com/r00ster91']}"
glfw/glfw,https://github.com/glfw/glfw,1443,2019-03-01T17:52:34Z,2019-04-20T08:05:16Z,2019-07-22T22:26:59Z,MERGED,True,40,229,5,https://github.com/linkmauve,Remove wl_shell support,1,['Wayland'],https://github.com/glfw/glfw/pull/1443,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1443#issuecomment-469756606,"This protocol is part of the core Wayland, but it is pretty badly
designed and is missing quite a few features, and is in the process of
being phased out in compositors.  Its support in GLFW requires
duplicating pretty much every single window management codepath.
This bumps the required compositor versions to the ones which have
implemented xdg-shell, approximately two years ago, which seems sensible
to me.",Seems good 👍,True,{}
glfw/glfw,https://github.com/glfw/glfw,1443,2019-03-01T17:52:34Z,2019-04-20T08:05:16Z,2019-07-22T22:26:59Z,MERGED,True,40,229,5,https://github.com/linkmauve,Remove wl_shell support,1,['Wayland'],https://github.com/glfw/glfw/pull/1443,https://github.com/kovidgoyal,3,https://github.com/glfw/glfw/pull/1443#issuecomment-471147178,"This protocol is part of the core Wayland, but it is pretty badly
designed and is missing quite a few features, and is in the process of
being phased out in compositors.  Its support in GLFW requires
duplicating pretty much every single window management codepath.
This bumps the required compositor versions to the ones which have
implemented xdg-shell, approximately two years ago, which seems sensible
to me.","FYI neither weston nor sway have current releases that support the stable version of this, so if you want to do it, you will need to add support for the unstable version as well (zxdg_shell_v6)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1443,2019-03-01T17:52:34Z,2019-04-20T08:05:16Z,2019-07-22T22:26:59Z,MERGED,True,40,229,5,https://github.com/linkmauve,Remove wl_shell support,1,['Wayland'],https://github.com/glfw/glfw/pull/1443,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/1443#issuecomment-472500755,"This protocol is part of the core Wayland, but it is pretty badly
designed and is missing quite a few features, and is in the process of
being phased out in compositors.  Its support in GLFW requires
duplicating pretty much every single window management codepath.
This bumps the required compositor versions to the ones which have
implemented xdg-shell, approximately two years ago, which seems sensible
to me.","Sway at least does, since its 1.0 release.
As for Weston, it is in RC1 stage now, and most users won’t use it as their main compositor anyway so we can easily ignore it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1443,2019-03-01T17:52:34Z,2019-04-20T08:05:16Z,2019-07-22T22:26:59Z,MERGED,True,40,229,5,https://github.com/linkmauve,Remove wl_shell support,1,['Wayland'],https://github.com/glfw/glfw/pull/1443,https://github.com/kovidgoyal,5,https://github.com/glfw/glfw/pull/1443#issuecomment-472661096,"This protocol is part of the core Wayland, but it is pretty badly
designed and is missing quite a few features, and is in the process of
being phased out in compositors.  Its support in GLFW requires
duplicating pretty much every single window management codepath.
This bumps the required compositor versions to the ones which have
implemented xdg-shell, approximately two years ago, which seems sensible
to me.","Yes but sway 1.0 was just released, which means lots of people wont have
it on their distros for a while.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1443,2019-03-01T17:52:34Z,2019-04-20T08:05:16Z,2019-07-22T22:26:59Z,MERGED,True,40,229,5,https://github.com/linkmauve,Remove wl_shell support,1,['Wayland'],https://github.com/glfw/glfw/pull/1443,https://github.com/linkmauve,6,https://github.com/glfw/glfw/pull/1443#issuecomment-485068366,"This protocol is part of the core Wayland, but it is pretty badly
designed and is missing quite a few features, and is in the process of
being phased out in compositors.  Its support in GLFW requires
duplicating pretty much every single window management codepath.
This bumps the required compositor versions to the ones which have
implemented xdg-shell, approximately two years ago, which seems sensible
to me.","3.3 got released, there is no reason not to merge this anymore, the next version will most likely get released in a world where wl_shell is completely irrelevant. \o/",True,{}
glfw/glfw,https://github.com/glfw/glfw,1444,2019-03-06T10:05:13Z,2019-03-27T11:48:58Z,2019-04-15T20:15:03Z,CLOSED,False,79,13,2,https://github.com/svenevs,give parent projects finer control over install,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1444,https://github.com/svenevs,1,https://github.com/glfw/glfw/pull/1444,"Introduces configuration variables that can control the install location(s) for headers, libraries, cmake, and pkg-config.

Existing installation procedures are unchanged (if user does not use these variables, remains as is).
These variables are extremely helpful for parent packages that may need to control where things go.  This could also potentially be quite useful for packagers if their platform needs values other than what GNUInstallDirs defines.
Adds GLFW_UNINSTALL option, parent projects that do not define an uninstall target likely do not want the GLFW uninstall (only).
Includes CMP0077 policy update, this means that in a parent project I can set(GLFW_UNINSTALL OFF) in parent project, rather than set(GLFW_UNINSTALL OFF CACHE BOOL """" FORCE).

I just noticed #1416 has this, I can remove it if you'd rather keep this more isolated.



For reference this tactic is inspired by the vtk-m project, it's a simple but very useful way to enable parent projects to control things 🙂
Results
To help with review I've included some sample output.  The manipulations introduced by glfw_replace_absolute macro are most relevant for pkg-config file, so that's why I'm including those.  Hopefully this is more helpful than distracting...
master branch
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_master && make -j install
-- Install configuration: """"
-- Installing: /tmp/glfw_master/include/GLFW
-- Installing: /tmp/glfw_master/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_master/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_master/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_master/lib64/libglfw3.a

$ cat /tmp/glfw_master/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_master
exec_prefix=${prefix}
includedir=/tmp/glfw_master/include
libdir=/tmp/glfw_master/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
this branch (no changes)
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_defaults && make -j install
-- Install configuration: """"
-- Installing: /tmp/glfw_defaults/include/GLFW
-- Installing: /tmp/glfw_defaults/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_defaults/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_defaults/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_defaults/lib64/libglfw3.a
$ cat /tmp/glfw_defaults/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_defaults
exec_prefix=${prefix}
includedir=/tmp/glfw_defaults/include
libdir=/tmp/glfw_defaults/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
example change lib64 to lib
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_lib -DGLFW_INSTALL_LIBDIR=lib
-- Install configuration: """"
-- Installing: /tmp/glfw_lib/include/GLFW
-- Installing: /tmp/glfw_lib/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_lib/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_lib/lib/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_lib/lib/libglfw3.a
$ cat /tmp/glfw_lib/lib/pkgconfig/glfw3.pc
prefix=/tmp/glfw_lib
exec_prefix=${prefix}
includedir=/tmp/glfw_lib/include
libdir=/tmp/glfw_lib/lib

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
example absolute path of include (test for glfw_replace_absolute macro)
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_incl -DGLFW_INSTALL_INCLUDEDIR=/tmp/another_dir
-- Install configuration: """"
-- Installing: /tmp/another_dir/GLFW
-- Installing: /tmp/another_dir/GLFW/glfw3.h
-- Installing: /tmp/another_dir/GLFW/glfw3native.h
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_incl/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_incl/lib64/libglfw3.a
$ cat /tmp/glfw_incl/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_incl
exec_prefix=${prefix}
includedir=/tmp/another_dir
libdir=/tmp/glfw_incl/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
glfw3Targets.cmake snippet
set_target_properties(glfw PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES ""/tmp/another_dir""
  INTERFACE_LINK_LIBRARIES ""/usr/lib64/librt.so;/usr/lib64/libm.so;dl;/usr/lib64/libX11.so;-lpthread""                                                        
)","Introduces configuration variables that can control the install location(s) for headers, libraries, cmake, and pkg-config.

Existing installation procedures are unchanged (if user does not use these variables, remains as is).
These variables are extremely helpful for parent packages that may need to control where things go.  This could also potentially be quite useful for packagers if their platform needs values other than what GNUInstallDirs defines.
Adds GLFW_UNINSTALL option, parent projects that do not define an uninstall target likely do not want the GLFW uninstall (only).
Includes CMP0077 policy update, this means that in a parent project I can set(GLFW_UNINSTALL OFF) in parent project, rather than set(GLFW_UNINSTALL OFF CACHE BOOL """" FORCE).

I just noticed #1416 has this, I can remove it if you'd rather keep this more isolated.



For reference this tactic is inspired by the vtk-m project, it's a simple but very useful way to enable parent projects to control things 🙂
Results
To help with review I've included some sample output.  The manipulations introduced by glfw_replace_absolute macro are most relevant for pkg-config file, so that's why I'm including those.  Hopefully this is more helpful than distracting...
master branch
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_master && make -j install
-- Install configuration: """"
-- Installing: /tmp/glfw_master/include/GLFW
-- Installing: /tmp/glfw_master/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_master/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_master/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_master/lib64/libglfw3.a

$ cat /tmp/glfw_master/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_master
exec_prefix=${prefix}
includedir=/tmp/glfw_master/include
libdir=/tmp/glfw_master/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
this branch (no changes)
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_defaults && make -j install
-- Install configuration: """"
-- Installing: /tmp/glfw_defaults/include/GLFW
-- Installing: /tmp/glfw_defaults/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_defaults/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_defaults/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_defaults/lib64/libglfw3.a
$ cat /tmp/glfw_defaults/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_defaults
exec_prefix=${prefix}
includedir=/tmp/glfw_defaults/include
libdir=/tmp/glfw_defaults/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
example change lib64 to lib
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_lib -DGLFW_INSTALL_LIBDIR=lib
-- Install configuration: """"
-- Installing: /tmp/glfw_lib/include/GLFW
-- Installing: /tmp/glfw_lib/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_lib/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_lib/lib/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_lib/lib/libglfw3.a
$ cat /tmp/glfw_lib/lib/pkgconfig/glfw3.pc
prefix=/tmp/glfw_lib
exec_prefix=${prefix}
includedir=/tmp/glfw_lib/include
libdir=/tmp/glfw_lib/lib

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
example absolute path of include (test for glfw_replace_absolute macro)
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_incl -DGLFW_INSTALL_INCLUDEDIR=/tmp/another_dir
-- Install configuration: """"
-- Installing: /tmp/another_dir/GLFW
-- Installing: /tmp/another_dir/GLFW/glfw3.h
-- Installing: /tmp/another_dir/GLFW/glfw3native.h
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_incl/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_incl/lib64/libglfw3.a
$ cat /tmp/glfw_incl/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_incl
exec_prefix=${prefix}
includedir=/tmp/another_dir
libdir=/tmp/glfw_incl/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
glfw3Targets.cmake snippet
set_target_properties(glfw PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES ""/tmp/another_dir""
  INTERFACE_LINK_LIBRARIES ""/usr/lib64/librt.so;/usr/lib64/libm.so;dl;/usr/lib64/libX11.so;-lpthread""                                                        
)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1444,2019-03-06T10:05:13Z,2019-03-27T11:48:58Z,2019-04-15T20:15:03Z,CLOSED,False,79,13,2,https://github.com/svenevs,give parent projects finer control over install,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1444,https://github.com/svenevs,2,https://github.com/glfw/glfw/pull/1444#issuecomment-477114749,"Introduces configuration variables that can control the install location(s) for headers, libraries, cmake, and pkg-config.

Existing installation procedures are unchanged (if user does not use these variables, remains as is).
These variables are extremely helpful for parent packages that may need to control where things go.  This could also potentially be quite useful for packagers if their platform needs values other than what GNUInstallDirs defines.
Adds GLFW_UNINSTALL option, parent projects that do not define an uninstall target likely do not want the GLFW uninstall (only).
Includes CMP0077 policy update, this means that in a parent project I can set(GLFW_UNINSTALL OFF) in parent project, rather than set(GLFW_UNINSTALL OFF CACHE BOOL """" FORCE).

I just noticed #1416 has this, I can remove it if you'd rather keep this more isolated.



For reference this tactic is inspired by the vtk-m project, it's a simple but very useful way to enable parent projects to control things 🙂
Results
To help with review I've included some sample output.  The manipulations introduced by glfw_replace_absolute macro are most relevant for pkg-config file, so that's why I'm including those.  Hopefully this is more helpful than distracting...
master branch
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_master && make -j install
-- Install configuration: """"
-- Installing: /tmp/glfw_master/include/GLFW
-- Installing: /tmp/glfw_master/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_master/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_master/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_master/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_master/lib64/libglfw3.a

$ cat /tmp/glfw_master/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_master
exec_prefix=${prefix}
includedir=/tmp/glfw_master/include
libdir=/tmp/glfw_master/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
this branch (no changes)
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_defaults && make -j install
-- Install configuration: """"
-- Installing: /tmp/glfw_defaults/include/GLFW
-- Installing: /tmp/glfw_defaults/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_defaults/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_defaults/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_defaults/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_defaults/lib64/libglfw3.a
$ cat /tmp/glfw_defaults/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_defaults
exec_prefix=${prefix}
includedir=/tmp/glfw_defaults/include
libdir=/tmp/glfw_defaults/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
example change lib64 to lib
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_lib -DGLFW_INSTALL_LIBDIR=lib
-- Install configuration: """"
-- Installing: /tmp/glfw_lib/include/GLFW
-- Installing: /tmp/glfw_lib/include/GLFW/glfw3.h
-- Installing: /tmp/glfw_lib/include/GLFW/glfw3native.h
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_lib/lib/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_lib/lib/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_lib/lib/libglfw3.a
$ cat /tmp/glfw_lib/lib/pkgconfig/glfw3.pc
prefix=/tmp/glfw_lib
exec_prefix=${prefix}
includedir=/tmp/glfw_lib/include
libdir=/tmp/glfw_lib/lib

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
example absolute path of include (test for glfw_replace_absolute macro)
$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/glfw_incl -DGLFW_INSTALL_INCLUDEDIR=/tmp/another_dir
-- Install configuration: """"
-- Installing: /tmp/another_dir/GLFW
-- Installing: /tmp/another_dir/GLFW/glfw3.h
-- Installing: /tmp/another_dir/GLFW/glfw3native.h
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Config.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3ConfigVersion.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Targets.cmake
-- Installing: /tmp/glfw_incl/lib64/cmake/glfw3/glfw3Targets-noconfig.cmake
-- Installing: /tmp/glfw_incl/lib64/pkgconfig/glfw3.pc
-- Installing: /tmp/glfw_incl/lib64/libglfw3.a
$ cat /tmp/glfw_incl/lib64/pkgconfig/glfw3.pc
prefix=/tmp/glfw_incl
exec_prefix=${prefix}
includedir=/tmp/another_dir
libdir=/tmp/glfw_incl/lib64

Name: GLFW
Description: A multi-platform library for OpenGL, window and input
Version: 3.3.0
URL: https://www.glfw.org/
Requires.private:  x11
Libs: -L${libdir} -lglfw3
Libs.private:  -lrt -lm -ldl
Cflags: -I${includedir}
glfw3Targets.cmake snippet
set_target_properties(glfw PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES ""/tmp/another_dir""
  INTERFACE_LINK_LIBRARIES ""/usr/lib64/librt.so;/usr/lib64/libm.so;dl;/usr/lib64/libX11.so;-lpthread""                                                        
)","I think it's better not to do this:

GNUInstallDirs and this approach create conflicts.  To remedy the conflicts, a regex replacing macro needs to be introduced.  While it works fine and should be reliable ... well it's better to not have it.
Needing absolute path support for pkg-config installs adds to the not-so-pleasant nature of this.

Basically, the complexity added vs the utility is not warranted.  I've found an alternative way of working around this.  It would be really great to merge #1416 though ;)
I can add a different bite-sized PR that conditionally disables the uninstall stuff if you want it.  The reason for doing that is the same reason for insulating the install targets with an option.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/anael-seghezzi,1,https://github.com/glfw/glfw/pull/1445,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.","Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.",True,"{'THUMBS_UP': ['https://github.com/ChengCat', 'https://github.com/r00ster91', 'https://github.com/ifarbod', 'https://github.com/elmindreda', 'https://github.com/ocornut', 'https://github.com/Poopooracoocoo', 'https://github.com/ric-a-tic', 'https://github.com/hamoid'], 'HOORAY': ['https://github.com/bryphe', 'https://github.com/scurest', 'https://github.com/ocornut', 'https://github.com/Poopooracoocoo']}"
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1445#issuecomment-470577365,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.",This looks very promising. Will review after 3.3 is out. Two issues remaining now.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/anael-seghezzi,3,https://github.com/glfw/glfw/pull/1445#issuecomment-470593831,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.","If you are ok with the structure of it, I can do the same for X11. What do you think ? (The issues reported by Travis should be fixed now).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1445#issuecomment-470622219,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.",I can't review it in detail right now but at minimum it looks like a very solid foundation. The cursor and proximity events and their parameters could perhaps do with a bit more documentation.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/anael-seghezzi,5,https://github.com/glfw/glfw/pull/1445#issuecomment-470629316,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.","Ok, thanks, I'll detail the doc.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/anael-seghezzi,6,https://github.com/glfw/glfw/pull/1445#issuecomment-471026411,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.","I added XInput2 basic support. Handling the ""Coordinate Transformation Matrix"" property was a bit tricky but this way we can get X and Y at full precision. I didn't find how to read Z coordinate though. I tested it on Linux Mint with a Graphire2 and an Intuos4 but it should be tested on other systems.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/ocornut']}"
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/jigpu,7,https://github.com/glfw/glfw/pull/1445#issuecomment-471104280,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.","Saw your tweet @anael-seghezzi and thought I'd let you know that the Z coordinate isn't reported by the X driver. The only way to get it on Linux is through the Wayland tablet protocol or directly through the kernel. Also looks like you're properly using the min/max data of the valuators, so it should be 8K-safe 👍",True,"{'THUMBS_UP': ['https://github.com/anael-seghezzi', 'https://github.com/ocornut']}"
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/anael-seghezzi,8,https://github.com/glfw/glfw/pull/1445#issuecomment-474073801,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.",Another thing I don't know how to handle correctly on x11 linux is to catch the tablet being unplugged en route and disable it. Right now it causes a crash.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/1445#issuecomment-510922015,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.","I have an Intuos on loan now and have tested this PR on Windows, X11 and macOS. It worked well on all platforms. Will try to help out with the X11 disconnect issue.
Definitely want this in 3.4. Thank you!",True,"{'HOORAY': ['https://github.com/anael-seghezzi', 'https://github.com/Playermet', 'https://github.com/ocornut'], 'THUMBS_UP': ['https://github.com/ocornut', 'https://github.com/Ternvein']}"
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/jigpu,10,https://github.com/glfw/glfw/pull/1445#issuecomment-511574308,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.","@anael-seghezzi I'm not sure if you're already handling the HierarchyChanged events that are sent when devices are enabled/disabled/added/removed, but that might be the key if you aren't. See http://who-t.blogspot.com/2009/06/xi2-recipies-part-2.html for more detail on event and the following trimmed-down trace when unplugging a tablet from my system:
$ xinput test-xi2 --root
⎡ Virtual core pointer                    	id=2	[master pointer  (3)]
[...]
⎜   ↳ Wacom Intuos Pro M Pen stylus           	id=9	[slave  pointer  (2)]
⎜   ↳ Wacom Intuos Pro M Pad pad              	id=10	[slave  pointer  (2)]
⎜   ↳ Wacom Intuos Pro M Finger touch         	id=11	[slave  pointer  (2)]
[...]
⎜   ↳ Wacom Intuos Pro M Pen eraser           	id=22	[slave  pointer  (2)]
⎜   ↳ Wacom Intuos Pro M Pen cursor           	id=23	[slave  pointer  (2)]
[...]

EVENT type 12 (PropertyEvent)
     property: 166 'Device Enabled'
     changed: modified
EVENT type 11 (HierarchyChanged)
    Changes happened:        [device disabled]
[...]
    device 10 [slave pointer (2)] is disabled
    changes:        [device disabled]
[... Lots of ""EVENT type 12 (PropertyEvent)"" as device props are deleted ...]
EVENT type 11 (HierarchyChanged)
    Changes happened:    [slave removed]    
[...]
    device 10 [<undefined> (0)] is disabled
    changes:    [slave removed]    
[... Repeat the sequence of ""HierarchyChanged"" and ""PropertyEvent"" events for all the other disconnected devices ...]",True,{'THUMBS_UP': ['https://github.com/ocornut']}
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/anael-seghezzi,11,https://github.com/glfw/glfw/pull/1445#issuecomment-511752253,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.",Thank you jigpu I'll have a look at it.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1445,2019-03-06T11:26:32Z,,2022-05-30T11:49:29Z,OPEN,False,733,18,11,https://github.com/anael-seghezzi,Add minimal pen tablet support,14,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1445,https://github.com/hanatos,12,https://github.com/glfw/glfw/pull/1445#issuecomment-1141060508,"Hi, I would like to propose this minimal pen tablet support (wacom etc) using wintab32 for win32.
With support for x, y, z, pressure, pitch, yaw, roll, cursor (pen, eraser etc) and proximity.
@elmindreda, I have something similar for cocoa and x11 but I wanted to check first if you are ok with this.
I tested variants of these over the years by modifying glfw's code for in-house painting tools, mainly on mac and windows.","heya, just wanted to say thanks for the pull request and that i'm successfully using it. to resolve build/merge problems, i had to add this commit:
hanatos/glfw@709d88f",True,{}
glfw/glfw,https://github.com/glfw/glfw,1453,2019-03-19T16:24:16Z,2019-04-01T18:05:25Z,2019-04-01T18:07:43Z,CLOSED,False,8,4,1,https://github.com/kliffy542,Bypass DwmIsCompositionEnabled checks on Win8+.,3,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1453,https://github.com/kliffy542,1,https://github.com/glfw/glfw/pull/1453,"DWM composition is always enabled on Win8+, so there's no need to call DwmIsCompositionEnabled on those platforms. See also https://bugs.chromium.org/p/chromium/issues/detail?id=942165.","DWM composition is always enabled on Win8+, so there's no need to call DwmIsCompositionEnabled on those platforms. See also https://bugs.chromium.org/p/chromium/issues/detail?id=942165.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1453,2019-03-19T16:24:16Z,2019-04-01T18:05:25Z,2019-04-01T18:07:43Z,CLOSED,False,8,4,1,https://github.com/kliffy542,Bypass DwmIsCompositionEnabled checks on Win8+.,3,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1453,https://github.com/kliffy542,2,https://github.com/glfw/glfw/pull/1453#issuecomment-474457505,"DWM composition is always enabled on Win8+, so there's no need to call DwmIsCompositionEnabled on those platforms. See also https://bugs.chromium.org/p/chromium/issues/detail?id=942165.",This is in reference to issue #1452 but I'm not sure how to link them.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1453,2019-03-19T16:24:16Z,2019-04-01T18:05:25Z,2019-04-01T18:07:43Z,CLOSED,False,8,4,1,https://github.com/kliffy542,Bypass DwmIsCompositionEnabled checks on Win8+.,3,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1453,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1453#issuecomment-475650681,"DWM composition is always enabled on Win8+, so there's no need to call DwmIsCompositionEnabled on those platforms. See also https://bugs.chromium.org/p/chromium/issues/detail?id=942165.",I'm looking to remove or replace the DWM hack but if we do keep it I will definitely merge this fix. Thanks!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1453,2019-03-19T16:24:16Z,2019-04-01T18:05:25Z,2019-04-01T18:07:43Z,CLOSED,False,8,4,1,https://github.com/kliffy542,Bypass DwmIsCompositionEnabled checks on Win8+.,3,"['enhancement', 'Windows']",https://github.com/glfw/glfw/pull/1453,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1453#issuecomment-478684484,"DWM composition is always enabled on Win8+, so there's no need to call DwmIsCompositionEnabled on those platforms. See also https://bugs.chromium.org/p/chromium/issues/detail?id=942165.",This has been merged as 8745861.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1455,2019-03-23T23:06:26Z,2019-03-23T23:16:08Z,2021-10-24T16:06:08Z,CLOSED,False,133,1,2,https://github.com/Johnmper,Alternative syntax for function access,3,['wontfix'],https://github.com/glfw/glfw/pull/1455,https://github.com/Johnmper,1,https://github.com/glfw/glfw/pull/1455,"Does not had overhead.
Can be used in junction with the normal <GLFW/glfw3.h> in older projects or as a standalone <GLFW/glfw3cxx.h>
Both of the following are valid:
#include<GLFW/glfw3cxx.h>
glfw::Init();
glfw::Terminate();

or integrating with older projects as long as glfw3cxx.h is included after glfw3.h
#include<GLFW/glfw3.h>
#include<GLFW/glfw3cxx.h>
glfwInit();
glfw::Terminate();

For simplicity sake, the creation of the function names for glfw3cxx.h is partially automated, by directly extracting from the glfw3.h using the following script:
grep ""glfw[^(]*([^)]*);"" glfw3.h | grep -oh ""glfw[^(]*"" | sed ""s/glfw//"" |  while read FUNC; do echo ""constexpr auto $FUNC = glfw$FUNC;""; done","Does not had overhead.
Can be used in junction with the normal <GLFW/glfw3.h> in older projects or as a standalone <GLFW/glfw3cxx.h>
Both of the following are valid:
#include<GLFW/glfw3cxx.h>
glfw::Init();
glfw::Terminate();

or integrating with older projects as long as glfw3cxx.h is included after glfw3.h
#include<GLFW/glfw3.h>
#include<GLFW/glfw3cxx.h>
glfwInit();
glfw::Terminate();

For simplicity sake, the creation of the function names for glfw3cxx.h is partially automated, by directly extracting from the glfw3.h using the following script:
grep ""glfw[^(]*([^)]*);"" glfw3.h | grep -oh ""glfw[^(]*"" | sed ""s/glfw//"" |  while read FUNC; do echo ""constexpr auto $FUNC = glfw$FUNC;""; done",True,{}
glfw/glfw,https://github.com/glfw/glfw,1455,2019-03-23T23:06:26Z,2019-03-23T23:16:08Z,2021-10-24T16:06:08Z,CLOSED,False,133,1,2,https://github.com/Johnmper,Alternative syntax for function access,3,['wontfix'],https://github.com/glfw/glfw/pull/1455,https://github.com/Johnmper,2,https://github.com/glfw/glfw/pull/1455#issuecomment-475912571,"Does not had overhead.
Can be used in junction with the normal <GLFW/glfw3.h> in older projects or as a standalone <GLFW/glfw3cxx.h>
Both of the following are valid:
#include<GLFW/glfw3cxx.h>
glfw::Init();
glfw::Terminate();

or integrating with older projects as long as glfw3cxx.h is included after glfw3.h
#include<GLFW/glfw3.h>
#include<GLFW/glfw3cxx.h>
glfwInit();
glfw::Terminate();

For simplicity sake, the creation of the function names for glfw3cxx.h is partially automated, by directly extracting from the glfw3.h using the following script:
grep ""glfw[^(]*([^)]*);"" glfw3.h | grep -oh ""glfw[^(]*"" | sed ""s/glfw//"" |  while read FUNC; do echo ""constexpr auto $FUNC = glfw$FUNC;""; done","Ups, forget to protect the glfw3cxx header from multiple inclusions.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1455,2019-03-23T23:06:26Z,2019-03-23T23:16:08Z,2021-10-24T16:06:08Z,CLOSED,False,133,1,2,https://github.com/Johnmper,Alternative syntax for function access,3,['wontfix'],https://github.com/glfw/glfw/pull/1455,https://github.com/gracicot,3,https://github.com/glfw/glfw/pull/1455#issuecomment-475982353,"Does not had overhead.
Can be used in junction with the normal <GLFW/glfw3.h> in older projects or as a standalone <GLFW/glfw3cxx.h>
Both of the following are valid:
#include<GLFW/glfw3cxx.h>
glfw::Init();
glfw::Terminate();

or integrating with older projects as long as glfw3cxx.h is included after glfw3.h
#include<GLFW/glfw3.h>
#include<GLFW/glfw3cxx.h>
glfwInit();
glfw::Terminate();

For simplicity sake, the creation of the function names for glfw3cxx.h is partially automated, by directly extracting from the glfw3.h using the following script:
grep ""glfw[^(]*([^)]*);"" glfw3.h | grep -oh ""glfw[^(]*"" | sed ""s/glfw//"" |  while read FUNC; do echo ""constexpr auto $FUNC = glfw$FUNC;""; done",I'm not sure it's a good idea to make glfw functions private symbols with a namespace {,True,{}
glfw/glfw,https://github.com/glfw/glfw,1455,2019-03-23T23:06:26Z,2019-03-23T23:16:08Z,2021-10-24T16:06:08Z,CLOSED,False,133,1,2,https://github.com/Johnmper,Alternative syntax for function access,3,['wontfix'],https://github.com/glfw/glfw/pull/1455,https://github.com/Johnmper,4,https://github.com/glfw/glfw/pull/1455#issuecomment-478301808,"Does not had overhead.
Can be used in junction with the normal <GLFW/glfw3.h> in older projects or as a standalone <GLFW/glfw3cxx.h>
Both of the following are valid:
#include<GLFW/glfw3cxx.h>
glfw::Init();
glfw::Terminate();

or integrating with older projects as long as glfw3cxx.h is included after glfw3.h
#include<GLFW/glfw3.h>
#include<GLFW/glfw3cxx.h>
glfwInit();
glfw::Terminate();

For simplicity sake, the creation of the function names for glfw3cxx.h is partially automated, by directly extracting from the glfw3.h using the following script:
grep ""glfw[^(]*([^)]*);"" glfw3.h | grep -oh ""glfw[^(]*"" | sed ""s/glfw//"" |  while read FUNC; do echo ""constexpr auto $FUNC = glfw$FUNC;""; done","Maybe not, i got it to work though, had to do LOTS of modifications. All of the tests and examples work just fine with the alternative syntax.
But maybe it isn't really useful.",True,{'THUMBS_UP': ['https://github.com/r00ster91']}
glfw/glfw,https://github.com/glfw/glfw,1460,2019-04-04T15:16:27Z,2019-04-05T03:20:34Z,2019-04-05T03:20:46Z,CLOSED,False,1,1,1,https://github.com/r00ster91,Add an 'n' in window.dox,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1460,https://github.com/r00ster91,1,https://github.com/glfw/glfw/pull/1460,A tiny docs fix.,A tiny docs fix.,True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1460,2019-04-04T15:16:27Z,2019-04-05T03:20:34Z,2019-04-05T03:20:46Z,CLOSED,False,1,1,1,https://github.com/r00ster91,Add an 'n' in window.dox,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1460,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1460#issuecomment-480071547,A tiny docs fix.,Thank you for this 'n'. It may be tiny but that doesn't make it less welcome.,True,{'THUMBS_UP': ['https://github.com/r00ster91']}
glfw/glfw,https://github.com/glfw/glfw,1468,2019-04-17T05:24:17Z,,2021-10-29T13:07:27Z,OPEN,False,2,2,2,https://github.com/lggmonclar,Fix issue with Windows multi-threaded applications not being able to correctly get the GLFW_FOCUSED attribute from outside the main thread,4,"['bug', 'Windows']",https://github.com/glfw/glfw/pull/1468,https://github.com/lggmonclar,1,https://github.com/glfw/glfw/pull/1468,"Multi-threaded Windows applications that attempt to get the GLFW_FOCUSED attribute from one of their worker threads will always be returned 0.
This issue is being caused by the GetActiveWindow() calls in win32_window.c:1791, which returns a nullptr if it is called by a worker thread, even if glfwMakeContextCurrent() is correctly set.
Replacing this call with GetForegroundWindow() fixes this issue, because it always returns the foreground window's handle, even from worker threads.
By the way, the Travis builds that are configured with USE_WAYLAND are failling to git clone the wayland-protocols repository, thus failing the check.

References:

GetActiveWindow: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getactivewindow
GetForegroundWindow: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getforegroundwindow
Relevant Microsoft devblog post: https://devblogs.microsoft.com/oldnewthing/?p=20643","Multi-threaded Windows applications that attempt to get the GLFW_FOCUSED attribute from one of their worker threads will always be returned 0.
This issue is being caused by the GetActiveWindow() calls in win32_window.c:1791, which returns a nullptr if it is called by a worker thread, even if glfwMakeContextCurrent() is correctly set.
Replacing this call with GetForegroundWindow() fixes this issue, because it always returns the foreground window's handle, even from worker threads.
By the way, the Travis builds that are configured with USE_WAYLAND are failling to git clone the wayland-protocols repository, thus failing the check.

References:

GetActiveWindow: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getactivewindow
GetForegroundWindow: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getforegroundwindow
Relevant Microsoft devblog post: https://devblogs.microsoft.com/oldnewthing/?p=20643",True,{}
glfw/glfw,https://github.com/glfw/glfw,1468,2019-04-17T05:24:17Z,,2021-10-29T13:07:27Z,OPEN,False,2,2,2,https://github.com/lggmonclar,Fix issue with Windows multi-threaded applications not being able to correctly get the GLFW_FOCUSED attribute from outside the main thread,4,"['bug', 'Windows']",https://github.com/glfw/glfw/pull/1468,https://github.com/jlodos,2,https://github.com/glfw/glfw/pull/1468#issuecomment-880905414,"Multi-threaded Windows applications that attempt to get the GLFW_FOCUSED attribute from one of their worker threads will always be returned 0.
This issue is being caused by the GetActiveWindow() calls in win32_window.c:1791, which returns a nullptr if it is called by a worker thread, even if glfwMakeContextCurrent() is correctly set.
Replacing this call with GetForegroundWindow() fixes this issue, because it always returns the foreground window's handle, even from worker threads.
By the way, the Travis builds that are configured with USE_WAYLAND are failling to git clone the wayland-protocols repository, thus failing the check.

References:

GetActiveWindow: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getactivewindow
GetForegroundWindow: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getforegroundwindow
Relevant Microsoft devblog post: https://devblogs.microsoft.com/oldnewthing/?p=20643","FWIW we have encountered this issue. It also affects glfwSetCursorPos which internally uses _glfwPlatformWindowFocused. So glfwSetCursorPos won't work when used from a thread different from the window creation thread. I can also confirm the proposed solution fixes the problem.
We are using ImGui with GLFW, ImGui fails in a multithreaded application because it internally uses both glfwGetWindowAttrib with GLFW_FOCUSED and glfwSetCursorPos.
It is worth mentioning that there are no bugs, since glfwCreateWindow, glfwSetCursorPos and glfwGetWindowAttrib must be called from the main thread as per documentation. However, GetForegroundWindow does exactly the same as GetActiveWindow when called from the window creation thread. So there is confidence this change won't break any existing code. It would be nice to have it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1468,2019-04-17T05:24:17Z,,2021-10-29T13:07:27Z,OPEN,False,2,2,2,https://github.com/lggmonclar,Fix issue with Windows multi-threaded applications not being able to correctly get the GLFW_FOCUSED attribute from outside the main thread,4,"['bug', 'Windows']",https://github.com/glfw/glfw/pull/1468,https://github.com/JeremyBorys,3,https://github.com/glfw/glfw/pull/1468#issuecomment-883563146,"Multi-threaded Windows applications that attempt to get the GLFW_FOCUSED attribute from one of their worker threads will always be returned 0.
This issue is being caused by the GetActiveWindow() calls in win32_window.c:1791, which returns a nullptr if it is called by a worker thread, even if glfwMakeContextCurrent() is correctly set.
Replacing this call with GetForegroundWindow() fixes this issue, because it always returns the foreground window's handle, even from worker threads.
By the way, the Travis builds that are configured with USE_WAYLAND are failling to git clone the wayland-protocols repository, thus failing the check.

References:

GetActiveWindow: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getactivewindow
GetForegroundWindow: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getforegroundwindow
Relevant Microsoft devblog post: https://devblogs.microsoft.com/oldnewthing/?p=20643",Can anyone think of anything that might cause any issues with this change? Is there any reason this hasn't been put in?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/podsvirov,1,https://github.com/glfw/glfw/pull/1470,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.","Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/podsvirov,2,https://github.com/glfw/glfw/pull/1470#issuecomment-484630469,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.","Cc: @DerDakon, @elmindreda.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/DerDakon,3,https://github.com/glfw/glfw/pull/1470#issuecomment-484677999,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.",Can you be a bit more detailed about the problem please?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/podsvirov,4,https://github.com/glfw/glfw/pull/1470#issuecomment-484693970,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.","To create relocatable package your need use only relative paths.
When your use CMAKE_INSTALL_FULL_INCLUDEDIR (absolute path), your broke them. Your should use CMAKE_INSTALL_INCLUDEDIR (relative path).
Created packge can look good on your machine, but do not work correctly on client machine.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/DerDakon,5,https://github.com/glfw/glfw/pull/1470#issuecomment-484708334,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.","I don't see a reason to use the full path there and the relative path for the libraries. It makes sense in the .pc files, which are untouched, so I think this is the right thing.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/podsvirov,6,https://github.com/glfw/glfw/pull/1470#issuecomment-485949176,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.",Any plans to merge this PR and release 3.3.1 version?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1470#issuecomment-486419725,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.",@podsvirov Will look into this asap. In the meantime 3.3.1 has been started in the 3.3-stable branch.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/podsvirov,8,https://github.com/glfw/glfw/pull/1470#issuecomment-486502324,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.",@elmindreda thanks! This is intuitive from the name of the branch. I already noticed it. Note that these changes are based on the 3.3-stable branch. I already want to merge these changes into the 3.3-stable branch.,True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/DPD85']}"
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/1470#issuecomment-493494198,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.",This has been fixed with 15af302 and 42a3e44. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1470,2019-04-18T16:54:09Z,2019-05-17T15:17:26Z,2019-05-17T16:22:10Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix use absolute path in INSTALL_INTERFACE,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1470,https://github.com/podsvirov,10,https://github.com/glfw/glfw/pull/1470#issuecomment-493513849,"Unfortunately, the long-awaited release 3.3 breaks the projects of some users. The problem arises from the use of the absolute path where it was not worth it.
There changes fix possible preprocessor error GLFW/glfw3.h: No such file or directory or error at CMake configuration time.",This is just my two cents in a big and grand job. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1472,2019-04-21T14:56:47Z,2020-07-02T20:12:34Z,2021-12-03T17:30:16Z,CLOSED,False,3,1,2,https://github.com/LucaRood,Fix #1112: simultaneous key presses being dropped,2,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/1472,https://github.com/LucaRood,1,https://github.com/glfw/glfw/pull/1472,"This improves the mechanism to check for duplicate key press events, by
checking if the event with the same time code actually corresponds to
the same key.
This will correctly process any key known to GLFW, handling simultanous
presses of different keys, while still filtering out duplicate presses
of the same key.
Note that this still does not properly handle keys that are
GLFW_KEY_UNKNOWN, as I am not aware of a good way to check for previous
events on those keys.","This improves the mechanism to check for duplicate key press events, by
checking if the event with the same time code actually corresponds to
the same key.
This will correctly process any key known to GLFW, handling simultanous
presses of different keys, while still filtering out duplicate presses
of the same key.
Note that this still does not properly handle keys that are
GLFW_KEY_UNKNOWN, as I am not aware of a good way to check for previous
events on those keys.",True,"{'THUMBS_UP': ['https://github.com/eriktate', 'https://github.com/n-wach', 'https://github.com/augustin64']}"
glfw/glfw,https://github.com/glfw/glfw,1472,2019-04-21T14:56:47Z,2020-07-02T20:12:34Z,2021-12-03T17:30:16Z,CLOSED,False,3,1,2,https://github.com/LucaRood,Fix #1112: simultaneous key presses being dropped,2,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/1472,https://github.com/smldis,2,https://github.com/glfw/glfw/pull/1472#issuecomment-549321451,"This improves the mechanism to check for duplicate key press events, by
checking if the event with the same time code actually corresponds to
the same key.
This will correctly process any key known to GLFW, handling simultanous
presses of different keys, while still filtering out duplicate presses
of the same key.
Note that this still does not properly handle keys that are
GLFW_KEY_UNKNOWN, as I am not aware of a good way to check for previous
events on those keys.",Any progress? I am hitting this on Julia GLFW bindings package,True,{}
glfw/glfw,https://github.com/glfw/glfw,1472,2019-04-21T14:56:47Z,2020-07-02T20:12:34Z,2021-12-03T17:30:16Z,CLOSED,False,3,1,2,https://github.com/LucaRood,Fix #1112: simultaneous key presses being dropped,2,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/1472,https://github.com/kiroma,3,https://github.com/glfw/glfw/pull/1472#issuecomment-564629662,"This improves the mechanism to check for duplicate key press events, by
checking if the event with the same time code actually corresponds to
the same key.
This will correctly process any key known to GLFW, handling simultanous
presses of different keys, while still filtering out duplicate presses
of the same key.
Note that this still does not properly handle keys that are
GLFW_KEY_UNKNOWN, as I am not aware of a good way to check for previous
events on those keys.",What's the status on this?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1472,2019-04-21T14:56:47Z,2020-07-02T20:12:34Z,2021-12-03T17:30:16Z,CLOSED,False,3,1,2,https://github.com/LucaRood,Fix #1112: simultaneous key presses being dropped,2,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/1472,https://github.com/kiroma,4,https://github.com/glfw/glfw/pull/1472#issuecomment-565500553,"This improves the mechanism to check for duplicate key press events, by
checking if the event with the same time code actually corresponds to
the same key.
This will correctly process any key known to GLFW, handling simultanous
presses of different keys, while still filtering out duplicate presses
of the same key.
Note that this still does not properly handle keys that are
GLFW_KEY_UNKNOWN, as I am not aware of a good way to check for previous
events on those keys.",Update? I think this is far too simple of a fix for a far too annoying of a bug.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1472,2019-04-21T14:56:47Z,2020-07-02T20:12:34Z,2021-12-03T17:30:16Z,CLOSED,False,3,1,2,https://github.com/LucaRood,Fix #1112: simultaneous key presses being dropped,2,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/1472,https://github.com/kiroma,5,https://github.com/glfw/glfw/pull/1472#issuecomment-583528219,"This improves the mechanism to check for duplicate key press events, by
checking if the event with the same time code actually corresponds to
the same key.
This will correctly process any key known to GLFW, handling simultanous
presses of different keys, while still filtering out duplicate presses
of the same key.
Note that this still does not properly handle keys that are
GLFW_KEY_UNKNOWN, as I am not aware of a good way to check for previous
events on those keys.",update?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1472,2019-04-21T14:56:47Z,2020-07-02T20:12:34Z,2021-12-03T17:30:16Z,CLOSED,False,3,1,2,https://github.com/LucaRood,Fix #1112: simultaneous key presses being dropped,2,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/1472,https://github.com/Brokkonaut,6,https://github.com/glfw/glfw/pull/1472#issuecomment-607432006,"This improves the mechanism to check for duplicate key press events, by
checking if the event with the same time code actually corresponds to
the same key.
This will correctly process any key known to GLFW, handling simultanous
presses of different keys, while still filtering out duplicate presses
of the same key.
Note that this still does not properly handle keys that are
GLFW_KEY_UNKNOWN, as I am not aware of a good way to check for previous
events on those keys.",Any chance to get this pulled soon?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1472,2019-04-21T14:56:47Z,2020-07-02T20:12:34Z,2021-12-03T17:30:16Z,CLOSED,False,3,1,2,https://github.com/LucaRood,Fix #1112: simultaneous key presses being dropped,2,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/1472,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1472#issuecomment-653226201,"This improves the mechanism to check for duplicate key press events, by
checking if the event with the same time code actually corresponds to
the same key.
This will correctly process any key known to GLFW, handling simultanous
presses of different keys, while still filtering out duplicate presses
of the same key.
Note that this still does not properly handle keys that are
GLFW_KEY_UNKNOWN, as I am not aware of a good way to check for previous
events on those keys.","Thank you for this PR. This should be fixed now with 9a3664b, which is based on it.",True,"{'THUMBS_UP': ['https://github.com/LucaRood'], 'HOORAY': ['https://github.com/n-wach']}"
glfw/glfw,https://github.com/glfw/glfw,1486,2019-05-21T16:56:15Z,2019-05-21T16:57:48Z,2021-10-24T16:17:49Z,CLOSED,False,45,0,2,https://github.com/tvinhkhai,Learn open gl,6,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1486,https://github.com/tvinhkhai,1,https://github.com/glfw/glfw/pull/1486,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1486,2019-05-21T16:56:15Z,2019-05-21T16:57:48Z,2021-10-24T16:17:49Z,CLOSED,False,45,0,2,https://github.com/tvinhkhai,Learn open gl,6,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1486,https://github.com/tvinhkhai,2,https://github.com/glfw/glfw/pull/1486#issuecomment-494474137,,"sorry, I'm new to github.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1486,2019-05-21T16:56:15Z,2019-05-21T16:57:48Z,2021-10-24T16:17:49Z,CLOSED,False,45,0,2,https://github.com/tvinhkhai,Learn open gl,6,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1486,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1486#issuecomment-495024860,,No worries and welcome to GitHub!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1490,2019-05-27T21:14:09Z,2019-07-12T16:55:46Z,2019-07-12T17:08:29Z,CLOSED,False,15,13,2,https://github.com/TheMrMilchmann,Win32: Invoke cursor enter callback before cursor position callback,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1490,https://github.com/TheMrMilchmann,1,https://github.com/glfw/glfw/pull/1490,"Currently, on windows, when the cursor enters a window the cursor position callback is invoked once before the cursor enter callback is invoked. This behavior is confusing, does not seem to have any purpose. Additionally (from what I can tell by looking at the code) this is not the case for other platforms.
This PR provides a simple fix by moving some logic in the related Win32 event handling code in order to guarantee that the cursor enter callback is invoked before the cursor position callback (when the cursor enters the window.) After some brief testing I could not find any regressions caused by this change.
Note: The PR is currently targeting the master branch and thus the 3.4 release since I was not sure whether this could go into a patch update. Other than that I followed the contribution guidelines and enabled PR edits from maintainers, but if there is anything else for me to do, please let me know!","Currently, on windows, when the cursor enters a window the cursor position callback is invoked once before the cursor enter callback is invoked. This behavior is confusing, does not seem to have any purpose. Additionally (from what I can tell by looking at the code) this is not the case for other platforms.
This PR provides a simple fix by moving some logic in the related Win32 event handling code in order to guarantee that the cursor enter callback is invoked before the cursor position callback (when the cursor enters the window.) After some brief testing I could not find any regressions caused by this change.
Note: The PR is currently targeting the master branch and thus the 3.4 release since I was not sure whether this could go into a patch update. Other than that I followed the contribution guidelines and enabled PR edits from maintainers, but if there is anything else for me to do, please let me know!",True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/nathan818fr']}"
glfw/glfw,https://github.com/glfw/glfw,1490,2019-05-27T21:14:09Z,2019-07-12T16:55:46Z,2019-07-12T17:08:29Z,CLOSED,False,15,13,2,https://github.com/TheMrMilchmann,Win32: Invoke cursor enter callback before cursor position callback,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1490,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1490#issuecomment-510962046,"Currently, on windows, when the cursor enters a window the cursor position callback is invoked once before the cursor enter callback is invoked. This behavior is confusing, does not seem to have any purpose. Additionally (from what I can tell by looking at the code) this is not the case for other platforms.
This PR provides a simple fix by moving some logic in the related Win32 event handling code in order to guarantee that the cursor enter callback is invoked before the cursor position callback (when the cursor enters the window.) After some brief testing I could not find any regressions caused by this change.
Note: The PR is currently targeting the master branch and thus the 3.4 release since I was not sure whether this could go into a patch update. Other than that I followed the contribution guidelines and enabled PR edits from maintainers, but if there is anything else for me to do, please let me know!",This was merged as 4f0b8b0. Thank you!,True,"{'HOORAY': ['https://github.com/TheMrMilchmann', 'https://github.com/tombsar']}"
glfw/glfw,https://github.com/glfw/glfw,1491,2019-05-28T00:45:50Z,2019-06-27T17:00:55Z,2019-06-27T17:00:56Z,CLOSED,False,6,14,6,https://github.com/tombsar,Remove _glfwInputWindowMonitor,7,['enhancement'],https://github.com/glfw/glfw/pull/1491,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/1491,"_glfwInputWindowMonitor did nothing more than assign a member of the window struct, so I think the code actually becomes more readable by removing the function and doing the assignment explicitly.
Also cleaned up a pointer non-NULL check in win32_window.c that was causing a false-positive warning in MSVC 2019.","_glfwInputWindowMonitor did nothing more than assign a member of the window struct, so I think the code actually becomes more readable by removing the function and doing the assignment explicitly.
Also cleaned up a pointer non-NULL check in win32_window.c that was causing a false-positive warning in MSVC 2019.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1491,2019-05-28T00:45:50Z,2019-06-27T17:00:55Z,2019-06-27T17:00:56Z,CLOSED,False,6,14,6,https://github.com/tombsar,Remove _glfwInputWindowMonitor,7,['enhancement'],https://github.com/glfw/glfw/pull/1491,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1491#issuecomment-498717986,"_glfwInputWindowMonitor did nothing more than assign a member of the window struct, so I think the code actually becomes more readable by removing the function and doing the assignment explicitly.
Also cleaned up a pointer non-NULL check in win32_window.c that was causing a false-positive warning in MSVC 2019.","_glfwInputWindowMonitor is a consequence of platform-specific code not being allowed to modify the shared portion of structs like library, window, monitor, context and cursor. There is also _glfwInputMonitorWindow for the same reason.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1491,2019-05-28T00:45:50Z,2019-06-27T17:00:55Z,2019-06-27T17:00:56Z,CLOSED,False,6,14,6,https://github.com/tombsar,Remove _glfwInputWindowMonitor,7,['enhancement'],https://github.com/glfw/glfw/pull/1491,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1491#issuecomment-498727309,"_glfwInputWindowMonitor did nothing more than assign a member of the window struct, so I think the code actually becomes more readable by removing the function and doing the assignment explicitly.
Also cleaned up a pointer non-NULL check in win32_window.c that was causing a false-positive warning in MSVC 2019.","I'll gladly grab 5950382 right away. I can cherry-pick it into my queue, or if you prefer to have it merged signed, please wrap the description at 72 characters.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1491,2019-05-28T00:45:50Z,2019-06-27T17:00:55Z,2019-06-27T17:00:56Z,CLOSED,False,6,14,6,https://github.com/tombsar,Remove _glfwInputWindowMonitor,7,['enhancement'],https://github.com/glfw/glfw/pull/1491,https://github.com/tombsar,4,https://github.com/glfw/glfw/pull/1491#issuecomment-498849948,"_glfwInputWindowMonitor did nothing more than assign a member of the window struct, so I think the code actually becomes more readable by removing the function and doing the assignment explicitly.
Also cleaned up a pointer non-NULL check in win32_window.c that was causing a false-positive warning in MSVC 2019.","D'oh! I was misled by nearby lines that modify the platform-specific parts of the same structs. Thanks for the explanation.
Feel free to cherry-pick the one commit. Sorry about the formatting of the commit message; that's what happens when I use GitHub's built-in editor rather than something proper.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1491,2019-05-28T00:45:50Z,2019-06-27T17:00:55Z,2019-06-27T17:00:56Z,CLOSED,False,6,14,6,https://github.com/tombsar,Remove _glfwInputWindowMonitor,7,['enhancement'],https://github.com/glfw/glfw/pull/1491,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1491#issuecomment-506429484,"_glfwInputWindowMonitor did nothing more than assign a member of the window struct, so I think the code actually becomes more readable by removing the function and doing the assignment explicitly.
Also cleaned up a pointer non-NULL check in win32_window.c that was causing a false-positive warning in MSVC 2019.","Merged, thank you!

Sorry about the formatting of the commit message; that's what happens when I use GitHub's built-in editor rather than something proper.

No worries! It's incredibly silly that the GitHub editor doesn't help one to format messages as 50/72 automatically.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1496,2019-06-07T21:46:47Z,2019-06-27T16:49:53Z,2021-10-24T16:01:58Z,MERGED,True,15,15,4,https://github.com/Luflosi,Replace some tabs with spaces,1,['enhancement'],https://github.com/glfw/glfw/pull/1496,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1496,"I found some tabs where there should be spaces for consistency.
This is my first contribution to GLFW, please let me know if I did something wrong.","I found some tabs where there should be spaces for consistency.
This is my first contribution to GLFW, please let me know if I did something wrong.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1496,2019-06-07T21:46:47Z,2019-06-27T16:49:53Z,2021-10-24T16:01:58Z,MERGED,True,15,15,4,https://github.com/Luflosi,Replace some tabs with spaces,1,['enhancement'],https://github.com/glfw/glfw/pull/1496,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1496#issuecomment-502457468,"I found some tabs where there should be spaces for consistency.
This is my first contribution to GLFW, please let me know if I did something wrong.","Looks good, thank you! Please add a line like Closes #1496 to the commit description to help track where this commit came from.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1496,2019-06-07T21:46:47Z,2019-06-27T16:49:53Z,2021-10-24T16:01:58Z,MERGED,True,15,15,4,https://github.com/Luflosi,Replace some tabs with spaces,1,['enhancement'],https://github.com/glfw/glfw/pull/1496,https://github.com/Luflosi,3,https://github.com/glfw/glfw/pull/1496#issuecomment-502459764,"I found some tabs where there should be spaces for consistency.
This is my first contribution to GLFW, please let me know if I did something wrong.",Like this?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1496,2019-06-07T21:46:47Z,2019-06-27T16:49:53Z,2021-10-24T16:01:58Z,MERGED,True,15,15,4,https://github.com/Luflosi,Replace some tabs with spaces,1,['enhancement'],https://github.com/glfw/glfw/pull/1496,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1496#issuecomment-502460013,"I found some tabs where there should be spaces for consistency.
This is my first contribution to GLFW, please let me know if I did something wrong.",Perfect!,True,{'HOORAY': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1497,2019-06-12T04:58:29Z,2021-08-16T19:16:32Z,2021-08-31T17:01:37Z,CLOSED,False,39,15,2,https://github.com/bradder555,feat: exports the glfw objects,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1497,https://github.com/bradder555,1,https://github.com/glfw/glfw/pull/1497,"i need this so i can use the nanogui library
this work is a copy of wjakob (thanks!)
https://github.com/wjakob/glfw/tree/6a0dde2a65448bb54dee7a45979f3ebe72253a19
i need a later version of glfw because i need transparency","i need this so i can use the nanogui library
this work is a copy of wjakob (thanks!)
https://github.com/wjakob/glfw/tree/6a0dde2a65448bb54dee7a45979f3ebe72253a19
i need a later version of glfw because i need transparency",True,{}
glfw/glfw,https://github.com/glfw/glfw,1500,2019-06-14T10:56:47Z,2019-07-12T16:55:46Z,2019-07-12T16:55:46Z,CLOSED,False,1,1,1,https://github.com/zann1x,Fix typo in documentation of glfwGetRequiredInstanceExtensions,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1500,https://github.com/zann1x,1,https://github.com/glfw/glfw/pull/1500,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1503,2019-06-14T14:43:58Z,2019-08-14T21:09:39Z,2019-08-15T11:52:10Z,CLOSED,False,4,1,1,https://github.com/dougbinks,Win32 maximize for issue #1499,3,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1503,https://github.com/dougbinks,1,https://github.com/glfw/glfw/pull/1503,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1503,2019-06-14T14:43:58Z,2019-08-14T21:09:39Z,2019-08-15T11:52:10Z,CLOSED,False,4,1,1,https://github.com/dougbinks,Win32 maximize for issue #1499,3,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1503,https://github.com/dougbinks,2,https://github.com/glfw/glfw/pull/1503#issuecomment-502136937,,Note that I haven't altered the changelog as that has been removed from the readme.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1503,2019-06-14T14:43:58Z,2019-08-14T21:09:39Z,2019-08-15T11:52:10Z,CLOSED,False,4,1,1,https://github.com/dougbinks,Win32 maximize for issue #1499,3,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1503,https://github.com/Luflosi,3,https://github.com/glfw/glfw/pull/1503#issuecomment-503766906,,This patch uses tabs and I think spaces are the standard in GLFW.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1503,2019-06-14T14:43:58Z,2019-08-14T21:09:39Z,2019-08-15T11:52:10Z,CLOSED,False,4,1,1,https://github.com/dougbinks,Win32 maximize for issue #1499,3,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1503,https://github.com/dougbinks,4,https://github.com/glfw/glfw/pull/1503#issuecomment-503933000,,"Spaces are indeed standard, I've switched them.
Thanks for spotting that!",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1503,2019-06-14T14:43:58Z,2019-08-14T21:09:39Z,2019-08-15T11:52:10Z,CLOSED,False,4,1,1,https://github.com/dougbinks,Win32 maximize for issue #1499,3,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1503,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1503#issuecomment-505533777,,This sentence adds cross-links with #1499.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1503,2019-06-14T14:43:58Z,2019-08-14T21:09:39Z,2019-08-15T11:52:10Z,CLOSED,False,4,1,1,https://github.com/dougbinks,Win32 maximize for issue #1499,3,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1503,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1503#issuecomment-521420433,,"I won't merge this fix but it did lead me to the cause of #1499 and a bonus bug. Thank you!
At first I thought the fix shouldn't work as the win32.maximized boolean is only used for disambiguation inside the WM_SIZE handler and isn't set during creation (the bonus bug). #1499 is caused by the content scale adjustment call to SetWindowPos during window creation, which both undoes the maximization from creating the window with WS_MAXIMIZE and causes the boolean to be updated early enough.
711b969 switches to SetWindowPlacement for adjusting the normal window rect without breaking initial maximization.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1503,2019-06-14T14:43:58Z,2019-08-14T21:09:39Z,2019-08-15T11:52:10Z,CLOSED,False,4,1,1,https://github.com/dougbinks,Win32 maximize for issue #1499,3,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1503,https://github.com/dougbinks,7,https://github.com/glfw/glfw/pull/1503#issuecomment-521615338,,"Excellent fix, good find!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1504,2019-06-14T14:51:09Z,2021-01-18T22:56:04Z,2021-02-12T11:45:27Z,CLOSED,False,0,3,1,https://github.com/aphecetche,CMake : remove the setting of INSTALL_NAME_DIR property on Mac ,1,"['bug', 'macOS', 'verified', 'build']",https://github.com/glfw/glfw/pull/1504,https://github.com/aphecetche,1,https://github.com/glfw/glfw/pull/1504,"That gets in the way of proper RPATH handling as far as I can tell.
A small reproducer is below.
git clone https://github.com/aphecetche/glfw-open-window
mkdir build
cd build
cmake -DCMAKE_INSTALL_PREFIX=../install ../glfw-open-window -DGLFW_ROOT=[install path of glfw]
make install

That creates a  trivial main executable that just opens a window.
w/o this PR launching the executable I get :
~/alice/cmake/standalone/install-glfw-open-window/bin$ ./main
dyld: Library not loaded: lib/libglfw.3.dylib
  Referenced from: /Users/laurent/alice/cmake/standalone/install-glfw-open-window/bin/./main
  Reason: image not found
zsh: abort      ./main

And I guess it's due to the setting of the INSTALL_NAME_DIR which makes the executable try to fetch the lib from lib/ (=${CMAKE_INSTALL_LIBDIR})...

otool -L main
main:
lib/libglfw.3.dylib (compatibility version 3.0.0, current version 3.3.0)
/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1)

while with this PR the executable just works, as the lib reference is now to @rpath as expected :
otool -L main
main:
@rpath/libglfw.3.dylib (compatibility version 3.0.0, current version 3.4.0)
/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1)","That gets in the way of proper RPATH handling as far as I can tell.
A small reproducer is below.
git clone https://github.com/aphecetche/glfw-open-window
mkdir build
cd build
cmake -DCMAKE_INSTALL_PREFIX=../install ../glfw-open-window -DGLFW_ROOT=[install path of glfw]
make install

That creates a  trivial main executable that just opens a window.
w/o this PR launching the executable I get :
~/alice/cmake/standalone/install-glfw-open-window/bin$ ./main
dyld: Library not loaded: lib/libglfw.3.dylib
  Referenced from: /Users/laurent/alice/cmake/standalone/install-glfw-open-window/bin/./main
  Reason: image not found
zsh: abort      ./main

And I guess it's due to the setting of the INSTALL_NAME_DIR which makes the executable try to fetch the lib from lib/ (=${CMAKE_INSTALL_LIBDIR})...

otool -L main
main:
lib/libglfw.3.dylib (compatibility version 3.0.0, current version 3.3.0)
/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1)

while with this PR the executable just works, as the lib reference is now to @rpath as expected :
otool -L main
main:
@rpath/libglfw.3.dylib (compatibility version 3.0.0, current version 3.4.0)
/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1508,2019-06-16T17:34:59Z,2019-06-24T14:43:56Z,2019-07-12T15:08:44Z,CLOSED,False,32,1,3,https://github.com/p-groarke,Fix borderless fullscreen.,1,[],https://github.com/glfw/glfw/pull/1508,https://github.com/p-groarke,1,https://github.com/glfw/glfw/pull/1508,See #1507 for details.,See #1507 for details.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1513,2019-06-19T15:35:15Z,2019-07-12T16:55:44Z,2019-07-12T17:00:35Z,MERGED,True,1,1,1,https://github.com/Luflosi,Fix typo,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1513,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1513,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1513,2019-06-19T15:35:15Z,2019-07-12T16:55:44Z,2019-07-12T17:00:35Z,MERGED,True,1,1,1,https://github.com/Luflosi,Fix typo,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1513,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1513#issuecomment-503617387,,"I referenced the pull request number before this pull request existed. This causes Github to not underline the ""Closes"" word with the label ""This commit closes pull request #1513."" in the commit message. Is that a problem?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1513,2019-06-19T15:35:15Z,2019-07-12T16:55:44Z,2019-07-12T17:00:35Z,MERGED,True,1,1,1,https://github.com/Luflosi,Fix typo,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1513,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1513#issuecomment-506440500,,It shouldn't be a problem. The important thing (imo) is to have the issue number there to help humans.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1513,2019-06-19T15:35:15Z,2019-07-12T16:55:44Z,2019-07-12T17:00:35Z,MERGED,True,1,1,1,https://github.com/Luflosi,Fix typo,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1513,https://github.com/Luflosi,4,https://github.com/glfw/glfw/pull/1513#issuecomment-506799066,,Should I rebase the commit onto the latest master?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1513,2019-06-19T15:35:15Z,2019-07-12T16:55:44Z,2019-07-12T17:00:35Z,MERGED,True,1,1,1,https://github.com/Luflosi,Fix typo,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1513,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1513#issuecomment-507053762,,"@Luflosi Yes, please do!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1513,2019-06-19T15:35:15Z,2019-07-12T16:55:44Z,2019-07-12T17:00:35Z,MERGED,True,1,1,1,https://github.com/Luflosi,Fix typo,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1513,https://github.com/Luflosi,6,https://github.com/glfw/glfw/pull/1513#issuecomment-507190605,,Done.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1514,2019-06-20T14:11:50Z,2020-12-17T21:35:40Z,2021-02-12T11:48:32Z,CLOSED,False,2997,12,20,https://github.com/YarikTH,[WIP] Add vivante backend,16,"['enhancement', 'Linux']",https://github.com/glfw/glfw/pull/1514,https://github.com/YarikTH,1,https://github.com/glfw/glfw/pull/1514,"This adds interface to graphics application to create i.MX Framebuffer to initialize graphics context without any window subsystems. Also provides input using /dev/input devices like linux_joystick.c does.
Modifies in GLFW library to add vivante backend.
This includes modifying a few existing files and creating five new files which are
specific to the backend that we are adding. For eg. in our case these are
vivante_platform.h, vivante_init.c, vivante_window.c, evdev.c, evdev.h .
Files ""evdev.c"", ""evdev.h"" can be used for other embended linux platforms.
Files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Funtion glfwCreatePositionedWindow added and some platform code was adjusted to use it. It was done because window creation api in vivante doesn't support window position change nor window resize, both position and size set on creation time.
Example ""gears-gles2.c"" added because all examples use opengl 1.0 api, while my target board doesn't support OpenGL api, but supports GLES 2.0 api. This example is optional and can be removed.
Links to the api description:
https://www.nxp.com/docs/en/user-guide/i.MX_Graphics_User's_Guide_Linux.pdf
Chapter 4 i.MX Framebuffer API
P.S. SDL2 already supports this backed since 2.0.5","This adds interface to graphics application to create i.MX Framebuffer to initialize graphics context without any window subsystems. Also provides input using /dev/input devices like linux_joystick.c does.
Modifies in GLFW library to add vivante backend.
This includes modifying a few existing files and creating five new files which are
specific to the backend that we are adding. For eg. in our case these are
vivante_platform.h, vivante_init.c, vivante_window.c, evdev.c, evdev.h .
Files ""evdev.c"", ""evdev.h"" can be used for other embended linux platforms.
Files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Funtion glfwCreatePositionedWindow added and some platform code was adjusted to use it. It was done because window creation api in vivante doesn't support window position change nor window resize, both position and size set on creation time.
Example ""gears-gles2.c"" added because all examples use opengl 1.0 api, while my target board doesn't support OpenGL api, but supports GLES 2.0 api. This example is optional and can be removed.
Links to the api description:
https://www.nxp.com/docs/en/user-guide/i.MX_Graphics_User's_Guide_Linux.pdf
Chapter 4 i.MX Framebuffer API
P.S. SDL2 already supports this backed since 2.0.5",True,{}
glfw/glfw,https://github.com/glfw/glfw,1514,2019-06-20T14:11:50Z,2020-12-17T21:35:40Z,2021-02-12T11:48:32Z,CLOSED,False,2997,12,20,https://github.com/YarikTH,[WIP] Add vivante backend,16,"['enhancement', 'Linux']",https://github.com/glfw/glfw/pull/1514,https://github.com/YarikTH,2,https://github.com/glfw/glfw/pull/1514#issuecomment-504050401,"This adds interface to graphics application to create i.MX Framebuffer to initialize graphics context without any window subsystems. Also provides input using /dev/input devices like linux_joystick.c does.
Modifies in GLFW library to add vivante backend.
This includes modifying a few existing files and creating five new files which are
specific to the backend that we are adding. For eg. in our case these are
vivante_platform.h, vivante_init.c, vivante_window.c, evdev.c, evdev.h .
Files ""evdev.c"", ""evdev.h"" can be used for other embended linux platforms.
Files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Funtion glfwCreatePositionedWindow added and some platform code was adjusted to use it. It was done because window creation api in vivante doesn't support window position change nor window resize, both position and size set on creation time.
Example ""gears-gles2.c"" added because all examples use opengl 1.0 api, while my target board doesn't support OpenGL api, but supports GLES 2.0 api. This example is optional and can be removed.
Links to the api description:
https://www.nxp.com/docs/en/user-guide/i.MX_Graphics_User's_Guide_Linux.pdf
Chapter 4 i.MX Framebuffer API
P.S. SDL2 already supports this backed since 2.0.5",Maybe I should add separate pull request for glfwCreatePositionedWindow. Because it is severe change and doesn't directly connected with vivante backend,True,{}
glfw/glfw,https://github.com/glfw/glfw,1514,2019-06-20T14:11:50Z,2020-12-17T21:35:40Z,2021-02-12T11:48:32Z,CLOSED,False,2997,12,20,https://github.com/YarikTH,[WIP] Add vivante backend,16,"['enhancement', 'Linux']",https://github.com/glfw/glfw/pull/1514,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1514#issuecomment-504935223,"This adds interface to graphics application to create i.MX Framebuffer to initialize graphics context without any window subsystems. Also provides input using /dev/input devices like linux_joystick.c does.
Modifies in GLFW library to add vivante backend.
This includes modifying a few existing files and creating five new files which are
specific to the backend that we are adding. For eg. in our case these are
vivante_platform.h, vivante_init.c, vivante_window.c, evdev.c, evdev.h .
Files ""evdev.c"", ""evdev.h"" can be used for other embended linux platforms.
Files ""egl_context.h"" and ""internal.h"" has minor changes to include the header files.
Also there are changes in CMake code files to include the newly created files.
Funtion glfwCreatePositionedWindow added and some platform code was adjusted to use it. It was done because window creation api in vivante doesn't support window position change nor window resize, both position and size set on creation time.
Example ""gears-gles2.c"" added because all examples use opengl 1.0 api, while my target board doesn't support OpenGL api, but supports GLES 2.0 api. This example is optional and can be removed.
Links to the api description:
https://www.nxp.com/docs/en/user-guide/i.MX_Graphics_User's_Guide_Linux.pdf
Chapter 4 i.MX Framebuffer API
P.S. SDL2 already supports this backed since 2.0.5","Hello, and thanks for your work!
Are you aware of the Etnaviv driver though?  It is a driver for Vivante GPUs which doesn’t require the use of proprietary APIs, which otherwise make it very hard for us to test.  Etnaviv provides standard Linux APIs instead, such as DRM, Wayland, X11, etc., and lets you use the existing backends without any modification.
Just like the Nvidia proprietary backend, I really don’t think the costs of an additional backend for very specific hardware is justified, especially since a free driver exists.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1521,2019-06-22T20:23:16Z,2022-03-03T22:57:26Z,2022-03-18T15:29:43Z,CLOSED,False,16,2,3,https://github.com/eXeC64,Fix PostEmptyEvent not waking WaitEvents,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1521,https://github.com/eXeC64,1,https://github.com/glfw/glfw/pull/1521,"Use an eventfd as a means to signal waitEvents to wake up as
wl_display_sync does not always achieve this.
This fixes GitHub Issue #1520","Use an eventfd as a means to signal waitEvents to wake up as
wl_display_sync does not always achieve this.
This fixes GitHub Issue #1520",True,{}
glfw/glfw,https://github.com/glfw/glfw,1521,2019-06-22T20:23:16Z,2022-03-03T22:57:26Z,2022-03-18T15:29:43Z,CLOSED,False,16,2,3,https://github.com/eXeC64,Fix PostEmptyEvent not waking WaitEvents,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1521,https://github.com/eXeC64,2,https://github.com/glfw/glfw/pull/1521#issuecomment-511230657,"Use an eventfd as a means to signal waitEvents to wake up as
wl_display_sync does not always achieve this.
This fixes GitHub Issue #1520","Is there anything else needed on my side for this? I'm quite keen to get this fixed, as it causes my application to freeze.",True,"{'THUMBS_UP': ['https://github.com/JeremyBorys', 'https://github.com/warisb', 'https://github.com/borsi1']}"
glfw/glfw,https://github.com/glfw/glfw,1521,2019-06-22T20:23:16Z,2022-03-03T22:57:26Z,2022-03-18T15:29:43Z,CLOSED,False,16,2,3,https://github.com/eXeC64,Fix PostEmptyEvent not waking WaitEvents,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1521,https://github.com/warisb,3,https://github.com/glfw/glfw/pull/1521#issuecomment-613794788,"Use an eventfd as a means to signal waitEvents to wake up as
wl_display_sync does not always achieve this.
This fixes GitHub Issue #1520",I ran into the same problem in Ubuntu 18.04 (using GNOME Wayland session). My application was hanging on glfwWaitEvents(). I pulled from your branch and it fixed my problem. I also second merging this PR if others don't see any issues.,True,{'THUMBS_UP': ['https://github.com/borsi1']}
glfw/glfw,https://github.com/glfw/glfw,1521,2019-06-22T20:23:16Z,2022-03-03T22:57:26Z,2022-03-18T15:29:43Z,CLOSED,False,16,2,3,https://github.com/eXeC64,Fix PostEmptyEvent not waking WaitEvents,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1521,https://github.com/eXeC64,4,https://github.com/glfw/glfw/pull/1521#issuecomment-638839353,"Use an eventfd as a means to signal waitEvents to wake up as
wl_display_sync does not always achieve this.
This fixes GitHub Issue #1520",@elmindreda Would you be able to spare some time to review this? I'm finding that even non-multithreaded glfw applications randomly hang on Wayland without it.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1521,2019-06-22T20:23:16Z,2022-03-03T22:57:26Z,2022-03-18T15:29:43Z,CLOSED,False,16,2,3,https://github.com/eXeC64,Fix PostEmptyEvent not waking WaitEvents,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1521,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1521#issuecomment-639481728,"Use an eventfd as a means to signal waitEvents to wake up as
wl_display_sync does not always achieve this.
This fixes GitHub Issue #1520",@eXeC64 Will do. Cannot promise when.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1521,2019-06-22T20:23:16Z,2022-03-03T22:57:26Z,2022-03-18T15:29:43Z,CLOSED,False,16,2,3,https://github.com/eXeC64,Fix PostEmptyEvent not waking WaitEvents,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1521,https://github.com/OlivierSohn,6,https://github.com/glfw/glfw/pull/1521#issuecomment-680801526,"Use an eventfd as a means to signal waitEvents to wake up as
wl_display_sync does not always achieve this.
This fixes GitHub Issue #1520","@eXeC64 in #1285, we fixed a race condition, are you sure this is not fixing the error you are attempting to fix here?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1525,2019-06-29T17:21:23Z,2019-07-09T15:01:25Z,2019-11-01T12:16:03Z,CLOSED,False,7,1,2,https://github.com/p-groarke,win32_window : Respect floating.,1,['support'],https://github.com/glfw/glfw/pull/1525,https://github.com/p-groarke,1,https://github.com/glfw/glfw/pull/1525,"From my other closed PR. Fullscreen should not be topmost unless floating is set.
This is important for borderless fullscreen windows, which are expected to behave like normal windows.
If this is too drastic of a change. A new window option should be added to control this behavior, as it makes true borderless fullscreen impossible.","From my other closed PR. Fullscreen should not be topmost unless floating is set.
This is important for borderless fullscreen windows, which are expected to behave like normal windows.
If this is too drastic of a change. A new window option should be added to control this behavior, as it makes true borderless fullscreen impossible.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1525,2019-06-29T17:21:23Z,2019-07-09T15:01:25Z,2019-11-01T12:16:03Z,CLOSED,False,7,1,2,https://github.com/p-groarke,win32_window : Respect floating.,1,['support'],https://github.com/glfw/glfw/pull/1525,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1525#issuecomment-507062794,"From my other closed PR. Fullscreen should not be topmost unless floating is set.
This is important for borderless fullscreen windows, which are expected to behave like normal windows.
If this is too drastic of a change. A new window option should be added to control this behavior, as it makes true borderless fullscreen impossible.","I believe you can achieve this behavior with a non-floating, non-fullscreen borderless window that covers the desired monitor.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1525,2019-06-29T17:21:23Z,2019-07-09T15:01:25Z,2019-11-01T12:16:03Z,CLOSED,False,7,1,2,https://github.com/p-groarke,win32_window : Respect floating.,1,['support'],https://github.com/glfw/glfw/pull/1525,https://github.com/p-groarke,3,https://github.com/glfw/glfw/pull/1525#issuecomment-507084271,"From my other closed PR. Fullscreen should not be topmost unless floating is set.
This is important for borderless fullscreen windows, which are expected to behave like normal windows.
If this is too drastic of a change. A new window option should be added to control this behavior, as it makes true borderless fullscreen impossible.","Hi @elmindreda, that's what I've been trying to do :) But when creating the borderless fullscreen window, it goes through this code-path. I'm using the instructions in the window guide, though I might be missing something.
Basically,
		if (GLFWmonitor* monitor = get_monitor(_position)) {
			if (const GLFWvidmode* mode = glfwGetVideoMode(monitor)) {
				glfwSetWindowMonitor(_window_ptr.get(), monitor, 0, 0,
						mode->width, mode->height, mode->refreshRate);

				on_resize(mode->width, mode->height);
			}
		}",True,{}
glfw/glfw,https://github.com/glfw/glfw,1525,2019-06-29T17:21:23Z,2019-07-09T15:01:25Z,2019-11-01T12:16:03Z,CLOSED,False,7,1,2,https://github.com/p-groarke,win32_window : Respect floating.,1,['support'],https://github.com/glfw/glfw/pull/1525,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1525#issuecomment-507309663,"From my other closed PR. Fullscreen should not be topmost unless floating is set.
This is important for borderless fullscreen windows, which are expected to behave like normal windows.
If this is too drastic of a change. A new window option should be added to control this behavior, as it makes true borderless fullscreen impossible.","I mean leave it as a non-fullscreen window (i.e. no monitor set for the window) which will avoid the GLFW fullscreen path.
if (GLFWmonitor* monitor = get_monitor(_position))
{
    int x, y;
    glfwGetMonitorPos(monitor, &x, &y);
    const GLFWvidmode* mode = glfwGetVideoMode(monitor);
    glfwSetWindowAttrib(window, GLFW_DECORATED, 0);
    glfwSetWindowMonitor(window, NULL, x, y, mode->width, mode->height, 0);
    on_resize(mode->width, mode->height);
}
The call to glfwSetWindowMonitor isn't doing anything fullscreen-related here, it just sets the size and position of the window.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1525,2019-06-29T17:21:23Z,2019-07-09T15:01:25Z,2019-11-01T12:16:03Z,CLOSED,False,7,1,2,https://github.com/p-groarke,win32_window : Respect floating.,1,['support'],https://github.com/glfw/glfw/pull/1525,https://github.com/p-groarke,5,https://github.com/glfw/glfw/pull/1525#issuecomment-509679231,"From my other closed PR. Fullscreen should not be topmost unless floating is set.
This is important for borderless fullscreen windows, which are expected to behave like normal windows.
If this is too drastic of a change. A new window option should be added to control this behavior, as it makes true borderless fullscreen impossible.","I think that will work, thx.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1527,2019-06-30T18:25:04Z,2019-11-24T16:41:40Z,2021-02-12T11:49:20Z,CLOSED,False,1,3,1,https://github.com/p-groarke,docs : Fix input modifiers contradiction.,1,['documentation'],https://github.com/glfw/glfw/pull/1527,https://github.com/p-groarke,1,https://github.com/glfw/glfw/pull/1527,,,True,{'THUMBS_UP': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,1527,2019-06-30T18:25:04Z,2019-11-24T16:41:40Z,2021-02-12T11:49:20Z,CLOSED,False,1,3,1,https://github.com/p-groarke,docs : Fix input modifiers contradiction.,1,['documentation'],https://github.com/glfw/glfw/pull/1527,https://github.com/p-groarke,2,https://github.com/glfw/glfw/pull/1527#issuecomment-534742688,,"@elmindreda @linkmauve Hi, I'm curious what your PR workflow is. Does silence mean accepted or refused? Do you merge PRs at release time or throughout development?
Ty",True,{}
glfw/glfw,https://github.com/glfw/glfw,1528,2019-07-02T12:24:04Z,2019-07-12T16:55:45Z,2020-05-12T22:20:33Z,CLOSED,False,28,10,3,https://github.com/db47h,Query and keep track of Xkb group index,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1528,https://github.com/db47h,1,https://github.com/glfw/glfw/pull/1528,"Fixes #1462
For users with multiple keyboard layouts configured, glfwGetKeyName works fine only with the primary layout (i.e. on Ubuntu 18.04, the first layout in the list). Switching layouts results in changing the group index used in various Xkb API calls. With this commit, the current group index is fetched when initializing keyboard input and an event handler is set up to keep track of any change to this group index.
As a result the scancode -> keyname mapping may change while the program is running (needs to be documented). This also partially addresses #1201: GLFW now receives the event, a complete fix would need to push it to the application.
Note that this code deals only with the default keyboard (see #1462 (comment)).","Fixes #1462
For users with multiple keyboard layouts configured, glfwGetKeyName works fine only with the primary layout (i.e. on Ubuntu 18.04, the first layout in the list). Switching layouts results in changing the group index used in various Xkb API calls. With this commit, the current group index is fetched when initializing keyboard input and an event handler is set up to keep track of any change to this group index.
As a result the scancode -> keyname mapping may change while the program is running (needs to be documented). This also partially addresses #1201: GLFW now receives the event, a complete fix would need to push it to the application.
Note that this code deals only with the default keyboard (see #1462 (comment)).",True,"{'HEART': ['https://github.com/r00ster91', 'https://github.com/elmindreda'], 'THUMBS_UP': ['https://github.com/tombsar']}"
glfw/glfw,https://github.com/glfw/glfw,1528,2019-07-02T12:24:04Z,2019-07-12T16:55:45Z,2020-05-12T22:20:33Z,CLOSED,False,28,10,3,https://github.com/db47h,Query and keep track of Xkb group index,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1528,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1528#issuecomment-510570036,"Fixes #1462
For users with multiple keyboard layouts configured, glfwGetKeyName works fine only with the primary layout (i.e. on Ubuntu 18.04, the first layout in the list). Switching layouts results in changing the group index used in various Xkb API calls. With this commit, the current group index is fetched when initializing keyboard input and an event handler is set up to keep track of any change to this group index.
As a result the scancode -> keyname mapping may change while the program is running (needs to be documented). This also partially addresses #1201: GLFW now receives the event, a complete fix would need to push it to the application.
Note that this code deals only with the default keyboard (see #1462 (comment)).",Tested on MATE on Cygwin/X. Works perfectly.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1530,2019-07-08T12:58:39Z,2019-07-24T19:30:39Z,2019-07-24T19:30:39Z,CLOSED,False,2,1,1,None,CMake: remove -DGLFW_DLL on non-Windows targets,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1530,None,1,https://github.com/glfw/glfw/pull/1530,"When using GLFW with CMake and installed GLFW binaries, -DGLFW_DLL is
passed on Linux, which should not happen.","When using GLFW with CMake and installed GLFW binaries, -DGLFW_DLL is
passed on Linux, which should not happen.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1530,2019-07-08T12:58:39Z,2019-07-24T19:30:39Z,2019-07-24T19:30:39Z,CLOSED,False,2,1,1,None,CMake: remove -DGLFW_DLL on non-Windows targets,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1530,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1530#issuecomment-510958429,"When using GLFW with CMake and installed GLFW binaries, -DGLFW_DLL is
passed on Linux, which should not happen.","Good point, thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1540,2019-07-24T15:27:45Z,2019-09-16T12:40:19Z,2021-01-18T21:36:38Z,CLOSED,False,0,3,1,https://github.com/realzhtw,Removed overloading of INSTALL_NAME_DIR with ${CMAKE_INSTALL_LIBDIR} …,1,"['bug', 'duplicate', 'macOS', 'verified', 'build']",https://github.com/glfw/glfw/pull/1540,https://github.com/realzhtw,1,https://github.com/glfw/glfw/pull/1540,"Hi. I don't quite understand why this was done in the first place, but it prevents users from specifying CMAKE_INSTALL_NAME_DIR. In particular it breaks linking against libglfw when (for exmaple) in tracy (https://bitbucket.org/wolfpld/tracy/src) when built using pkgsrc framework that relies on being able to pass CMAKE_INSTAL_NAME_DIR (see https://github.com/jsonn/pkgsrc/blob/trunk/mk/configure/cmake.mk, line 46).
Removing those lines make everything work as expected.","Hi. I don't quite understand why this was done in the first place, but it prevents users from specifying CMAKE_INSTALL_NAME_DIR. In particular it breaks linking against libglfw when (for exmaple) in tracy (https://bitbucket.org/wolfpld/tracy/src) when built using pkgsrc framework that relies on being able to pass CMAKE_INSTAL_NAME_DIR (see https://github.com/jsonn/pkgsrc/blob/trunk/mk/configure/cmake.mk, line 46).
Removing those lines make everything work as expected.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1540,2019-07-24T15:27:45Z,2019-09-16T12:40:19Z,2021-01-18T21:36:38Z,CLOSED,False,0,3,1,https://github.com/realzhtw,Removed overloading of INSTALL_NAME_DIR with ${CMAKE_INSTALL_LIBDIR} …,1,"['bug', 'duplicate', 'macOS', 'verified', 'build']",https://github.com/glfw/glfw/pull/1540,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1540#issuecomment-531759270,"Hi. I don't quite understand why this was done in the first place, but it prevents users from specifying CMAKE_INSTALL_NAME_DIR. In particular it breaks linking against libglfw when (for exmaple) in tracy (https://bitbucket.org/wolfpld/tracy/src) when built using pkgsrc framework that relies on being able to pass CMAKE_INSTAL_NAME_DIR (see https://github.com/jsonn/pkgsrc/blob/trunk/mk/configure/cmake.mk, line 46).
Removing those lines make everything work as expected.","Hi, thanks for your PR, but this work change is a duplicate of #1504.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1541,2019-07-25T23:12:33Z,2019-09-23T11:43:06Z,2019-09-26T14:22:10Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,['macOS'],https://github.com/glfw/glfw/pull/1541,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1541,"The size member in the GLFWgammaramp struct is of type unsigned int, so the for loop iterating over it should also use the type unsigned int.","The size member in the GLFWgammaramp struct is of type unsigned int, so the for loop iterating over it should also use the type unsigned int.",True,{'THUMBS_UP': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,1541,2019-07-25T23:12:33Z,2019-09-23T11:43:06Z,2019-09-26T14:22:10Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,['macOS'],https://github.com/glfw/glfw/pull/1541,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1541#issuecomment-524122206,"The size member in the GLFWgammaramp struct is of type unsigned int, so the for loop iterating over it should also use the type unsigned int.",I rebased the commit onto the latest master.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1541,2019-07-25T23:12:33Z,2019-09-23T11:43:06Z,2019-09-26T14:22:10Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,['macOS'],https://github.com/glfw/glfw/pull/1541,https://github.com/Luflosi,3,https://github.com/glfw/glfw/pull/1541#issuecomment-524123248,"The size member in the GLFWgammaramp struct is of type unsigned int, so the for loop iterating over it should also use the type unsigned int.","I added the ""Closes #1541."" text to the commit message.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1541,2019-07-25T23:12:33Z,2019-09-23T11:43:06Z,2019-09-26T14:22:10Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,['macOS'],https://github.com/glfw/glfw/pull/1541,https://github.com/Luflosi,4,https://github.com/glfw/glfw/pull/1541#issuecomment-529186886,"The size member in the GLFWgammaramp struct is of type unsigned int, so the for loop iterating over it should also use the type unsigned int.",I rebased the commit onto the latest master.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1541,2019-07-25T23:12:33Z,2019-09-23T11:43:06Z,2019-09-26T14:22:10Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,['macOS'],https://github.com/glfw/glfw/pull/1541,https://github.com/Luflosi,5,https://github.com/glfw/glfw/pull/1541#issuecomment-531966742,"The size member in the GLFWgammaramp struct is of type unsigned int, so the for loop iterating over it should also use the type unsigned int.",I rebased again.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1541,2019-07-25T23:12:33Z,2019-09-23T11:43:06Z,2019-09-26T14:22:10Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,['macOS'],https://github.com/glfw/glfw/pull/1541,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1541#issuecomment-535526517,"The size member in the GLFWgammaramp struct is of type unsigned int, so the for loop iterating over it should also use the type unsigned int.",Thank you!,True,{'HEART': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1546,2019-08-07T08:36:48Z,2020-04-27T16:05:09Z,2020-04-27T16:05:16Z,CLOSED,False,402,0,4,None,Meson support,3,"['wontfix', 'build']",https://github.com/glfw/glfw/pull/1546,None,1,https://github.com/glfw/glfw/pull/1546,added support for meson build system,added support for meson build system,True,{}
glfw/glfw,https://github.com/glfw/glfw,1546,2019-08-07T08:36:48Z,2020-04-27T16:05:09Z,2020-04-27T16:05:16Z,CLOSED,False,402,0,4,None,Meson support,3,"['wontfix', 'build']",https://github.com/glfw/glfw/pull/1546,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1546#issuecomment-620080363,added support for meson build system,Meson is a nice system and this is a good adaption but I will not merge this. Switching meta build system is very disruptive and maintaining two sets of build files is not a good idea.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1549,2019-08-12T10:52:53Z,2019-09-16T10:30:27Z,2019-11-01T12:09:41Z,MERGED,True,17,17,8,https://github.com/luzpaz,Fix typos,1,['documentation'],https://github.com/glfw/glfw/pull/1549,https://github.com/luzpaz,1,https://github.com/glfw/glfw/pull/1549,"Found via codespell -q 3 -S ./deps -L numer,uint","Found via codespell -q 3 -S ./deps -L numer,uint",True,{}
glfw/glfw,https://github.com/glfw/glfw,1556,2019-08-31T00:45:31Z,2019-09-06T14:57:14Z,2019-10-16T14:09:06Z,CLOSED,False,4,0,1,https://github.com/httpdigest,Fix comparison of video modes (#1555),1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1556,https://github.com/httpdigest,1,https://github.com/glfw/glfw/pull/1556,This fixes the video mode comparator function which is also used to filter-out assumed duplicate video modes (#1555) when returning 0.,This fixes the video mode comparator function which is also used to filter-out assumed duplicate video modes (#1555) when returning 0.,True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/TheMrMilchmann']}"
glfw/glfw,https://github.com/glfw/glfw,1556,2019-08-31T00:45:31Z,2019-09-06T14:57:14Z,2019-10-16T14:09:06Z,CLOSED,False,4,0,1,https://github.com/httpdigest,Fix comparison of video modes (#1555),1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1556,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1556#issuecomment-526787424,This fixes the video mode comparator function which is also used to filter-out assumed duplicate video modes (#1555) when returning 0.,"Alternative is to leave the screen area check in place, and add your x and y checks afterwards. That way we fix the bug (not being able to distinguish ""same area but differently shaped"" modes) while keeping more of the current behaviour (preferring ""larger"" modes first, rather than ""wider"").",True,{}
glfw/glfw,https://github.com/glfw/glfw,1556,2019-08-31T00:45:31Z,2019-09-06T14:57:14Z,2019-10-16T14:09:06Z,CLOSED,False,4,0,1,https://github.com/httpdigest,Fix comparison of video modes (#1555),1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1556,https://github.com/httpdigest,3,https://github.com/glfw/glfw/pull/1556#issuecomment-526787559,This fixes the video mode comparator function which is also used to filter-out assumed duplicate video modes (#1555) when returning 0.,@tombsar agreed. I changed the commit accordingly.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1556,2019-08-31T00:45:31Z,2019-09-06T14:57:14Z,2019-10-16T14:09:06Z,CLOSED,False,4,0,1,https://github.com/httpdigest,Fix comparison of video modes (#1555),1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1556,https://github.com/tombsar,4,https://github.com/glfw/glfw/pull/1556#issuecomment-526873898,This fixes the video mode comparator function which is also used to filter-out assumed duplicate video modes (#1555) when returning 0.,"Thinking about this a bit more, I think the height comparison is now redundant. If the areas are equal and the widths are equal, then the two modes must have the same dimensions.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1556,2019-08-31T00:45:31Z,2019-09-06T14:57:14Z,2019-10-16T14:09:06Z,CLOSED,False,4,0,1,https://github.com/httpdigest,Fix comparison of video modes (#1555),1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1556,https://github.com/httpdigest,5,https://github.com/glfw/glfw/pull/1556#issuecomment-526891030,This fixes the video mode comparator function which is also used to filter-out assumed duplicate video modes (#1555) when returning 0.,"Thinking about this a bit more, I think the height comparison is now redundant. If the areas are equal and the widths are equal, then the two modes must have the same dimensions.

True. Made changes accordingly.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1567,2019-09-22T19:09:33Z,2019-11-24T16:41:56Z,2021-02-12T11:49:09Z,CLOSED,False,194,2,5,https://github.com/p-groarke,Window setjoystickcallback,3,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1567,https://github.com/p-groarke,1,https://github.com/glfw/glfw/pull/1567,"Fixes : #1526
And also fixes this issue in a natural and expected way : #1080
The joystickcallbacks break the API contract of GLFW. Namely, that you will be provided a user window pointer in your callbacks, and receive it when being called. This idiom is important, and consistency is important as well. GLFW is natural to use because of API consistency.
Added a callback to the window callbacks struct, which can be set by the user. When executing joystick configuration callbacks, first the global one is called. We then iterate windows and call the appropriate callback if it is set, and provide the necessary window pointer to the user.
I've been writing mostly c++ in recent years, please keep your eyes open for some non-ANSI C stuff during review, ty.
You may bikeshed the name among yourselves as much as you like, just let me know what name you want. I don't care ;)","Fixes : #1526
And also fixes this issue in a natural and expected way : #1080
The joystickcallbacks break the API contract of GLFW. Namely, that you will be provided a user window pointer in your callbacks, and receive it when being called. This idiom is important, and consistency is important as well. GLFW is natural to use because of API consistency.
Added a callback to the window callbacks struct, which can be set by the user. When executing joystick configuration callbacks, first the global one is called. We then iterate windows and call the appropriate callback if it is set, and provide the necessary window pointer to the user.
I've been writing mostly c++ in recent years, please keep your eyes open for some non-ANSI C stuff during review, ty.
You may bikeshed the name among yourselves as much as you like, just let me know what name you want. I don't care ;)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1568,2019-09-30T12:56:26Z,2020-07-15T17:56:49Z,2020-07-16T16:10:42Z,CLOSED,False,133,0,10,https://github.com/rokups,Implement window transparency to mouse events (#1236),1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1568,https://github.com/rokups,1,https://github.com/glfw/glfw/pull/1568,"This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.","This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.",True,"{'HEART': ['https://github.com/ocornut', 'https://github.com/wormyrocks', 'https://github.com/caiovlp'], 'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/lieff', 'https://github.com/timothy1205']}"
glfw/glfw,https://github.com/glfw/glfw,1568,2019-09-30T12:56:26Z,2020-07-15T17:56:49Z,2020-07-16T16:10:42Z,CLOSED,False,133,0,10,https://github.com/rokups,Implement window transparency to mouse events (#1236),1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1568,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1568#issuecomment-656364040,"This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.","Thank you for this PR! My proposed changes are now in the mouse-passthrough branch of this repo. I didn't want to modify your commit without asking so I added a PASSTHRU to PASSTHROUGH rename pass for now.

Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?

Yup, looks good! I modified the logic for the internal flag a little, to keep modifications of shared state inside shared code.

libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested.
Not sure if i got all _glfw.x11.xshape right.

The X11 path looks good and worked fine on X11 on both Linux and Cygwin. It needed a pre-fix because GLFW now loads all of Xlib dynamically, and there was an issue with not removing the custom input shape, but that was all.
I had to replace the Win32 implementation, though. While the WM_NCHITTEST method does what Dear Imgui docking needs it didn't match the passthrough behavior of other platforms and pass the input through. Instead the combination of WS_EX_TRANSPARENT and WS_EX_LAYERED is required, and for hidden windows also a call to SetLayeredWindowAttributes.

Wayland while i think is implemented correctly - does not work.

It seems to work perfectly in Weston. I've tried opaque windows and the gears example, setting it at creation or after.
The macOS path also just worked.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1568,2019-09-30T12:56:26Z,2020-07-15T17:56:49Z,2020-07-16T16:10:42Z,CLOSED,False,133,0,10,https://github.com/rokups,Implement window transparency to mouse events (#1236),1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1568,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1568#issuecomment-656364756,"This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.","I tested the mouse-passthrough branch with the current docking branch of Dear Imgui today and it appears to work as expected, i.e. the same as the current Win32 workaround in the demo code.",True,"{'HOORAY': ['https://github.com/rokups', 'https://github.com/ocornut'], 'THUMBS_UP': ['https://github.com/ocornut']}"
glfw/glfw,https://github.com/glfw/glfw,1568,2019-09-30T12:56:26Z,2020-07-15T17:56:49Z,2020-07-16T16:10:42Z,CLOSED,False,133,0,10,https://github.com/rokups,Implement window transparency to mouse events (#1236),1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1568,https://github.com/rokups,4,https://github.com/glfw/glfw/pull/1568#issuecomment-656540627,"This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.","Thank you for looking into my PR.

I didn't want to modify your commit without asking

Please do whatever you think is necessary 👍

libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.

Google search sends mixed signals. Maybe it should be libXext.so instead?",True,{'THUMBS_UP': ['https://github.com/ocornut']}
glfw/glfw,https://github.com/glfw/glfw,1568,2019-09-30T12:56:26Z,2020-07-15T17:56:49Z,2020-07-16T16:10:42Z,CLOSED,False,133,0,10,https://github.com/rokups,Implement window transparency to mouse events (#1236),1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1568,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1568#issuecomment-656605575,"This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.","Google search sends mixed signals. Maybe it should be libXext.so instead?

That form of the name is typically only available if the development package is installed and may point to a library with a different ABI.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1568,2019-09-30T12:56:26Z,2020-07-15T17:56:49Z,2020-07-16T16:10:42Z,CLOSED,False,133,0,10,https://github.com/rokups,Implement window transparency to mouse events (#1236),1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1568,https://github.com/ocornut,6,https://github.com/glfw/glfw/pull/1568#issuecomment-659460832,"This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.","Thanks @rokups and @elmindreda for looking into this!

I had to replace the Win32 implementation, though. While the WM_NCHITTEST method does what Dear Imgui docking needs it didn't match the passthrough behavior of other platforms and pass the input through. Instead the combination of WS_EX_TRANSPARENT and WS_EX_LAYERED is required, and for hidden windows also a call to SetLayeredWindowAttributes.

One thought was coming to mind but then I realized it wouldn't meaningfully affect our use case. For the sake of completeneness I'm writing it down:
I haven't performed the tests yet, but I wonder if this might be altering performances of the swap/composition in any way. I guess we could do a quick test of running unthrottled with both settings and see if it makes any diffferences (worth testing with both variations of DXGI_SWAP_EFFECT_DISCARD and Win10 compositor friendly DXGI_SWAP_EFFECT_FLIP_DISCARD settings of the SwapChain). I will run those tests if I have time and report the info.
As Dear ImGui multi-viewports only temporarily enable this flags during dragging of a window the difference would likely not matter.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1568,2019-09-30T12:56:26Z,2020-07-15T17:56:49Z,2020-07-16T16:10:42Z,CLOSED,False,133,0,10,https://github.com/rokups,Implement window transparency to mouse events (#1236),1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1568,https://github.com/ocornut,7,https://github.com/glfw/glfw/pull/1568#issuecomment-659468868,"This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.","Results: Well, it turns out that just copying _glfwPlatformSetWindowMousePassthrough() into my Win32 main.cpp did the job.
I tested this in a DX11 setup with both DXGI_SWAP_EFFECT_DISCARD and DXGI_SWAP_EFFECT_FLIP_DISCARD with both Integrated Intel HD chip and Integrated Nvidia on same laptop and couldn't measure any meaningful difference, so you can nuke my thought above. At this point I can't pretend I understand how the WS_EX_TRANSPARENT and WS_EX_LAYERED flags behave, but I assume with the current settings they don't have any incidence on per-pixel compositing.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1568,2019-09-30T12:56:26Z,2020-07-15T17:56:49Z,2020-07-16T16:10:42Z,CLOSED,False,133,0,10,https://github.com/rokups,Implement window transparency to mouse events (#1236),1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1568,https://github.com/elmindreda,8,https://github.com/glfw/glfw/pull/1568#issuecomment-659514381,"This is an implementation for window transparency for mouse events requested in #1236. There are some things to discuss before merging.
GLFW_MOUSE_PASSTHRU define and mousePassthru variable. I used terminology suggested in #1236. Naming is hard so if anyone has a better idea - speak up. Maybe we shuld do PASSTHRU -> PASSTHROUGH at least.
Is GLFW_MOUSE_PASSTHRU defined in appropriate place and is it's value proper?
I tried to add documentation comments but i did so without fully understanding what i am doing. In case anything is missing/incorrect please let me know.
libXext.so.6 - hope that "".6"" is pretty much same across all distributions. I may be wrong.
CYGWIN - untested. Only reason why it would break is libXext-6.so being named something else i think.
Not sure if i got all _glfw.x11.xshape right.
Wayland while i think is implemented correctly - does not work. I tested with gears example, setting glfwWindowHint(GLFW_MOUSE_PASSTHRU, GLFW_TRUE); before window creation. It may be that kwin compositor does not have required bits for this to work. If anyone runs Gnome wayland - i would greatly appreciate if you could test this PR. Otherwise i may get around to setting up a VM for a test, but i would love to avoid it if possible.
X11/Windows/MacOS - everything works as expected.",Thank you for looking into it and posting the results!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1569,2019-10-01T14:19:52Z,2019-10-06T15:36:47Z,2019-11-01T12:13:56Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type for a struct member,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1569,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1569,"The name member in the _GLFWmonitorWayland struct is used in two places. It is assigned the value from a variable of type uint32_t and is compared to another variable of type uint32_t, so name should also have the same type.","The name member in the _GLFWmonitorWayland struct is used in two places. It is assigned the value from a variable of type uint32_t and is compared to another variable of type uint32_t, so name should also have the same type.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1569,2019-10-01T14:19:52Z,2019-10-06T15:36:47Z,2019-11-01T12:13:56Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type for a struct member,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1569,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1569#issuecomment-538753082,"The name member in the _GLFWmonitorWayland struct is used in two places. It is assigned the value from a variable of type uint32_t and is compared to another variable of type uint32_t, so name should also have the same type.","I added ""Closes #1569."" and rebased onto the latest master.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1569,2019-10-01T14:19:52Z,2019-10-06T15:36:47Z,2019-11-01T12:13:56Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type for a struct member,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1569,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1569#issuecomment-538758678,"The name member in the _GLFWmonitorWayland struct is used in two places. It is assigned the value from a variable of type uint32_t and is compared to another variable of type uint32_t, so name should also have the same type.","Thanks, this PR is correct, I tested it just in case and LGTM!
I wonder why compilers don’t output any warning in this case though.
Note that you don’t need the “Closes #NNNN” in pull requests, they get closed automatically once we press the merge button.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1569,2019-10-01T14:19:52Z,2019-10-06T15:36:47Z,2019-11-01T12:13:56Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type for a struct member,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1569,https://github.com/Luflosi,4,https://github.com/glfw/glfw/pull/1569#issuecomment-538770222,"The name member in the _GLFWmonitorWayland struct is used in two places. It is assigned the value from a variable of type uint32_t and is compared to another variable of type uint32_t, so name should also have the same type.","Thanks, this PR is correct, I tested it just in case and LGTM!

Awesome, thanks.

I wonder why compilers don’t output any warning in this case though.

I think the warnings for this sort of thing need to be enabled manually.

Note that you don’t need the “Closes #NNNN” in pull requests, they get closed automatically once we press the merge button.

I am aware of that. However in my first PR @elmindreda recommended to add this: #1496 (comment).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1569,2019-10-01T14:19:52Z,2019-10-06T15:36:47Z,2019-11-01T12:13:56Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type for a struct member,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1569,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1569#issuecomment-548766739,"The name member in the _GLFWmonitorWayland struct is used in two places. It is assigned the value from a variable of type uint32_t and is compared to another variable of type uint32_t, so name should also have the same type.","Yup, it helps when working with the Git history. Thank you for adding it!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1570,2019-10-03T11:47:43Z,2020-05-27T19:15:45Z,2020-05-27T19:15:46Z,CLOSED,False,3,1,2,https://github.com/some00,OS X EGL context api support with ANGLE,1,"['bug', 'macOS', 'verified', 'EGL']",https://github.com/glfw/glfw/pull/1570,https://github.com/some00,1,https://github.com/glfw/glfw/pull/1570,"ANGLE'S EGL implementation expects the NativeWindowType to be a CALayer*.
https://github.com/google/angle/blob/master/src/libANGLE/renderer/gl/cgl/DisplayCGL.mm: DisplayCGL::isValidNativeWindow
Current GLFW implementation uses NSView*.
Since I couldn't find any alternative EGL implementations, I assumed that ANGLE's CALayer* choice is correct, and changed GLFW without checking the vendor.
To test I used the following code: https://gist.github.com/some00/1a5c9962e1efced46c26624e0b90d584","ANGLE'S EGL implementation expects the NativeWindowType to be a CALayer*.
https://github.com/google/angle/blob/master/src/libANGLE/renderer/gl/cgl/DisplayCGL.mm: DisplayCGL::isValidNativeWindow
Current GLFW implementation uses NSView*.
Since I couldn't find any alternative EGL implementations, I assumed that ANGLE's CALayer* choice is correct, and changed GLFW without checking the vendor.
To test I used the following code: https://gist.github.com/some00/1a5c9962e1efced46c26624e0b90d584",True,{}
glfw/glfw,https://github.com/glfw/glfw,1570,2019-10-03T11:47:43Z,2020-05-27T19:15:45Z,2020-05-27T19:15:46Z,CLOSED,False,3,1,2,https://github.com/some00,OS X EGL context api support with ANGLE,1,"['bug', 'macOS', 'verified', 'EGL']",https://github.com/glfw/glfw/pull/1570,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1570#issuecomment-634882498,"ANGLE'S EGL implementation expects the NativeWindowType to be a CALayer*.
https://github.com/google/angle/blob/master/src/libANGLE/renderer/gl/cgl/DisplayCGL.mm: DisplayCGL::isValidNativeWindow
Current GLFW implementation uses NSView*.
Since I couldn't find any alternative EGL implementations, I assumed that ANGLE's CALayer* choice is correct, and changed GLFW without checking the vendor.
To test I used the following code: https://gist.github.com/some00/1a5c9962e1efced46c26624e0b90d584","Thank you for the PR! I wanted to solve this issue the way this PR does and always use a layer but it caused NSGL vsync to be disabled on older macOS versions.
This issue was instead solved with 91eebe9 in #1680.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1572,2019-10-06T21:01:25Z,2019-10-30T20:43:06Z,2019-11-01T12:55:17Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1572,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1572,"The monitorCount member in the _GLFWlibrary struct is of type int, so the for loop iterating over it should also use the type int.
Closes #1572.","The monitorCount member in the _GLFWlibrary struct is of type int, so the for loop iterating over it should also use the type int.
Closes #1572.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1572,2019-10-06T21:01:25Z,2019-10-30T20:43:06Z,2019-11-01T12:55:17Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1572,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1572#issuecomment-543141174,"The monitorCount member in the _GLFWlibrary struct is of type int, so the for loop iterating over it should also use the type int.
Closes #1572.",Rebased again.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1572,2019-10-06T21:01:25Z,2019-10-30T20:43:06Z,2019-11-01T12:55:17Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1572,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1572#issuecomment-548777707,"The monitorCount member in the _GLFWlibrary struct is of type int, so the for loop iterating over it should also use the type int.
Closes #1572.",Merged as 7749aac. Thank you!,True,{'HEART': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1574,2019-10-07T11:25:02Z,2021-08-16T19:16:33Z,2021-08-16T20:34:07Z,CLOSED,False,41,19,3,https://github.com/svenevs,add object library support for parent projects,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1574,https://github.com/svenevs,1,https://github.com/glfw/glfw/pull/1574,"Transitive dependency management via target_link_libraries with
object libraries introduced in CMake 3.12.
Update a few minor elements related to switching to new CMake.","Transitive dependency management via target_link_libraries with
object libraries introduced in CMake 3.12.
Update a few minor elements related to switching to new CMake.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1574,2019-10-07T11:25:02Z,2021-08-16T19:16:33Z,2021-08-16T20:34:07Z,CLOSED,False,41,19,3,https://github.com/svenevs,add object library support for parent projects,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1574,https://github.com/svenevs,2,https://github.com/glfw/glfw/pull/1574#issuecomment-538967004,"Transitive dependency management via target_link_libraries with
object libraries introduced in CMake 3.12.
Update a few minor elements related to switching to new CMake.","I'm so sorry!!! I meant to open a PR up against my fork's master, was kind of still in a testing phase here ... didn't realize opening PR tab on my fork would bring me here :/

Are you willing to entertain having an object library?  There's no way for parent projects to combine everything together into a superlib if they want, unless an object library in the child project is used (limitation of CMake, for many years now).  This PR aims to enable this, while leaving everything else the same (unless people see there is an object library underneath, they'll have no idea / no impact on them).
What are your thoughts about updating to CMake 3.12 minimum version (noting that debian stable is currently 3.13, ubuntu (I believe) now has rolling CMake releases, and users can also pip install cmake)?  Object libraries become much better in 3.12.

Note that if the answer to (1) is yes, but (2) is no, I can implement definition propagation using genex.  It's just not very pretty...
To avoid noise, please advise: open issue to have discussion?  Close this while I test on my own fork?  Keep it and add review?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1574,2019-10-07T11:25:02Z,2021-08-16T19:16:33Z,2021-08-16T20:34:07Z,CLOSED,False,41,19,3,https://github.com/svenevs,add object library support for parent projects,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1574,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1574#issuecomment-899775739,"Transitive dependency management via target_link_libraries with
object libraries introduced in CMake 3.12.
Update a few minor elements related to switching to new CMake.","Thank you for the PR and for your patience.
CMake 3.12 is still a bit new to set as the minimum version but GLFW now uses the ellipsis syntax in cmake_minimum_required to offer somewhat better support for newer versions. If there are specific flags or policies from newer versions, I'll gladly add conditional support for them. That said, the current minimum of 3.1 is definitely too old and will be updated.
The addition of the optional CMake variable GLFW_LIBRARY_TYPE by d838497 will allow one to build GLFW as an object library by turning the glfw target itself into one. This only requires CMake 3.12 of those who choose to build GLFW that way.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1575,2019-10-08T19:51:40Z,2019-10-08T19:51:52Z,2021-10-24T16:12:01Z,CLOSED,False,88,0,2,https://github.com/GeorgeWeb,Add premake support for Dwarfworks: https://github.com/GeorgeWeb/dwarfworks,3,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1575,https://github.com/GeorgeWeb,1,https://github.com/glfw/glfw/pull/1575,"Not enough coffee has been drunk today I suppose or I am too sleepy, I meant merging to my fork's master and apologise for the noise created.","Not enough coffee has been drunk today I suppose or I am too sleepy, I meant merging to my fork's master and apologise for the noise created.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1575,2019-10-08T19:51:40Z,2019-10-08T19:51:52Z,2021-10-24T16:12:01Z,CLOSED,False,88,0,2,https://github.com/GeorgeWeb,Add premake support for Dwarfworks: https://github.com/GeorgeWeb/dwarfworks,3,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1575,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1575#issuecomment-540710954,"Not enough coffee has been drunk today I suppose or I am too sleepy, I meant merging to my fork's master and apologise for the noise created.",No worries! ☕️,True,{}
glfw/glfw,https://github.com/glfw/glfw,1576,2019-10-09T18:02:12Z,2019-10-16T14:11:59Z,2019-11-01T12:45:04Z,CLOSED,False,10,0,1,https://github.com/gracicot,Added a CMake line to select C99 in the implementation,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1576,https://github.com/gracicot,1,https://github.com/glfw/glfw/pull/1576,"This tells CMake to select the C99 standard in a compiler/platform agnostic way.
It should fix issue #1560
Reopened from gracicot#1","This tells CMake to select the C99 standard in a compiler/platform agnostic way.
It should fix issue #1560
Reopened from gracicot#1",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1576,2019-10-09T18:02:12Z,2019-10-16T14:11:59Z,2019-11-01T12:45:04Z,CLOSED,False,10,0,1,https://github.com/gracicot,Added a CMake line to select C99 in the implementation,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1576,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1576#issuecomment-540709097,"This tells CMake to select the C99 standard in a compiler/platform agnostic way.
It should fix issue #1560
Reopened from gracicot#1",Thank you for all the workaround stuff so this can be merged before bumping the minimum CMake version!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1576,2019-10-09T18:02:12Z,2019-10-16T14:11:59Z,2019-11-01T12:45:04Z,CLOSED,False,10,0,1,https://github.com/gracicot,Added a CMake line to select C99 in the implementation,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1576,https://github.com/tombsar,3,https://github.com/glfw/glfw/pull/1576#issuecomment-546994567,"This tells CMake to select the C99 standard in a compiler/platform agnostic way.
It should fix issue #1560
Reopened from gracicot#1","I think this fix only covered the main glfw library, not the tests. I'm still getting errors about C99 code in tests/glfwinfo.c.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1576,2019-10-09T18:02:12Z,2019-10-16T14:11:59Z,2019-11-01T12:45:04Z,CLOSED,False,10,0,1,https://github.com/gracicot,Added a CMake line to select C99 in the implementation,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1576,https://github.com/gracicot,4,https://github.com/glfw/glfw/pull/1576#issuecomment-546997219,"This tells CMake to select the C99 standard in a compiler/platform agnostic way.
It should fix issue #1560
Reopened from gracicot#1",@tombsar I'll open a new pull request for that. It should be similar  and as simple as this one. I'll try to check if there is no other targets to change too.,True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/tombsar']}"
glfw/glfw,https://github.com/glfw/glfw,1576,2019-10-09T18:02:12Z,2019-10-16T14:11:59Z,2019-11-01T12:45:04Z,CLOSED,False,10,0,1,https://github.com/gracicot,Added a CMake line to select C99 in the implementation,3,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1576,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1576#issuecomment-548775007,"This tells CMake to select the C99 standard in a compiler/platform agnostic way.
It should fix issue #1560
Reopened from gracicot#1",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1579,2019-10-14T04:03:35Z,,2021-10-29T13:04:51Z,OPEN,False,48,0,3,https://github.com/AndrewBelt,Add glfwGetOpenedFilenames() to glfw3native.h,3,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1579,https://github.com/AndrewBelt,1,https://github.com/glfw/glfw/pull/1579,"This solves #1024 and #1458 (which are nearly duplicates) in the least invasive way I could think of. A handful of people need this feature, and accessing application:openFiles: is impossible without access to the NSApplication class, so I believe a new native GLFW function is unavoidable.","This solves #1024 and #1458 (which are nearly duplicates) in the least invasive way I could think of. A handful of people need this feature, and accessing application:openFiles: is impossible without access to the NSApplication class, so I believe a new native GLFW function is unavoidable.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1585,2019-10-24T10:11:53Z,2019-10-30T20:43:07Z,2019-11-01T14:24:27Z,CLOSED,False,5,2,2,https://github.com/papr,CMakeLists.txt: Add support for cmake < v3.7,2,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1585,https://github.com/papr,1,https://github.com/glfw/glfw/pull/1585,"Fixes #1584
Replaces VERSION_GREATER_EQUAL with VERSION_EQUAL OR VERSION_GREATER","Fixes #1584
Replaces VERSION_GREATER_EQUAL with VERSION_EQUAL OR VERSION_GREATER",True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,1,https://github.com/glfw/glfw/pull/1590,This PR attempt to fix #601.,This PR attempt to fix #601.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,2,https://github.com/glfw/glfw/pull/1590#issuecomment-548544407,This PR attempt to fix #601.,"Now, the callbacks have been implemented, which was easier than I expected, since most code to do so was already in place. The documentation is there too, though it still needs some small fixes, I don't know Doxygen that well. Now, next is to write tests and examples.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,3,https://github.com/glfw/glfw/pull/1590#issuecomment-549080175,This PR attempt to fix #601.,Unfortunately it doesn't work because in GLFW the joystick is actively polled. I will probably have to add something to poll joysticks as well.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,4,https://github.com/glfw/glfw/pull/1590#issuecomment-550559737,This PR attempt to fix #601.,"It now works fine on Linux, tested with tests/event.  Please, could someone volunteer to test on other platforms as well?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/Blergenstein,5,https://github.com/glfw/glfw/pull/1590#issuecomment-593048015,This PR attempt to fix #601.,"Looking at the events test on Windows, the joystick button callback gets called constantly, even when the joystick isn't being touched.  I used the joystick test to ensure that the joystick isn't doing anything, (the axes always stated 0 for their value).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,6,https://github.com/glfw/glfw/pull/1590#issuecomment-593065630,This PR attempt to fix #601.,"Thanks for testing this. It would be great if you could also debug this to find the cause, otherwise this will have to wait until I can get a Windows system myself.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/Blergenstein,7,https://github.com/glfw/glfw/pull/1590#issuecomment-593658710,This PR attempt to fix #601.,"It looks like the axes updater only fires when there's a change.  I rewrapped it and the wrapped the others to do the same but in a potentially more optimized way.  Not sure if the _glfwInputGamepad functions should be run or not if there weren't any changes, so that may be broken with the below changes.  I don't use/know git or github at all, so I don't know how to ""properly"" send you these changes.
// Notifies shared code of the new value of a joystick axis
//
void _glfwInputJoystickAxis(_GLFWjoystick* js, int axis, int value)
{
  //When the function needing this is called, it will create its own variable, so is this needed?
  //const int jid = (int) (js - _glfw.joysticks);

  if (js->axes[axis] != value)
    {
      js->axes[axis] = value;
      if(_glfw.callbacks.joystick_axis)
        _glfw.callbacks.joystick_axis((int) (js - _glfw.joysticks), axis, value);
      _glfwInputGamepad(js);
    };
}

// Notifies shared code of the new value of a joystick button
//
void _glfwInputJoystickButton(_GLFWjoystick* js, int button, char value)
{
  //When the function needing this is called, it will create its own variable, so is this needed?
  //const int jid = (int) (js - _glfw.joysticks);

  if(js->buttons[button] != value)
    {
      js->buttons[button] = value;
      if(_glfw.callbacks.joystick_button)
        _glfw.callbacks.joystick_button((int) (js - _glfw.joysticks), button, value);
      _glfwInputGamepad(js);
    };
}

// Notifies shared code of the new value of a joystick hat
//
void _glfwInputJoystickHat(_GLFWjoystick* js, int hat, char value)
{
  //When the function needing this is called, it will create its own variable, so is this needed?
  //const int jid = (int) (js - _glfw.joysticks);
  const int base = js->buttonCount + hat * 4;

  js->buttons[base + 0] = (value & 0x01) ? GLFW_PRESS : GLFW_RELEASE;
  js->buttons[base + 1] = (value & 0x02) ? GLFW_PRESS : GLFW_RELEASE;
  js->buttons[base + 2] = (value & 0x04) ? GLFW_PRESS : GLFW_RELEASE;
  js->buttons[base + 3] = (value & 0x08) ? GLFW_PRESS : GLFW_RELEASE;

  if(js->hats[hat] != value)
    {
      js->hats[hat] = value;
      if(_glfw.callbacks.joystick_hat)
        _glfw.callbacks.joystick_hat((int) (js - _glfw.joysticks), hat, value);
      _glfwInputGamepad(js);
    };
}",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/Blergenstein,8,https://github.com/glfw/glfw/pull/1590#issuecomment-595026380,This PR attempt to fix #601.,"My changes fixed the issue with the events test, but I don't get any events in my program.  I'm still looking into it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,9,https://github.com/glfw/glfw/pull/1590#issuecomment-595033778,This PR attempt to fix #601.,"Thanks for your efforts, I will add your modifications to my PR once everything works.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/Blergenstein,10,https://github.com/glfw/glfw/pull/1590#issuecomment-595078033,This PR attempt to fix #601.,"Okay, scratch that last comment from me.  I made a really bad whoopsie.  I'm slowly removing SDL2 from my program and forgot to add glfwPollEvents(); to my video loop.  The callbacks looks like they're running really well right now.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,11,https://github.com/glfw/glfw/pull/1590#issuecomment-595175948,This PR attempt to fix #601.,"OK, then I'll integrate your changes as fast as my ""copious"" free time allows me to.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,12,https://github.com/glfw/glfw/pull/1590#issuecomment-599259573,This PR attempt to fix #601.,"@Blergenstein, I have finally integrated your changes, could you please test again and see if it works for you as well?
@elmindreda, sorry to ping you again, but could you please review this PR, or assign someone else to this PR? This is a useful feature that we would like to use downstream in Ebiten.",True,{'THUMBS_UP': ['https://github.com/Blergenstein']}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/Blergenstein,13,https://github.com/glfw/glfw/pull/1590#issuecomment-605598108,This PR attempt to fix #601.,"Sorry for the delay.  It looks good; although the is a slight catch that I noticed with the Events test.  You have to use glfwPollEvents(); to be able to use the joystick callbacks.  If you don't, the input from the joystick seems very pokey, and doesn't always seem to catch all of the inputs.
Other than that, it seems to work well.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,14,https://github.com/glfw/glfw/pull/1590#issuecomment-605599300,This PR attempt to fix #601.,"This seems to be platform dependent, on Linux the glfwPollEvents is not
strictly necessary. But for portability I will update the examples and
document that glfwPollEvents is needed to get joystick events when I get
time to do this.
Now for someone to test this on OSX.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/Blergenstein,15,https://github.com/glfw/glfw/pull/1590#issuecomment-605676240,This PR attempt to fix #601.,"Good luck finding a Mac person, and thanks again for your work on this.
…
On Sun, Mar 29, 2020 at 2:47 AM Beoran ***@***.***> wrote:
 This seems to be platform dependent, on Linux the glfwPollEvents is not
 strictly necessary. But for portability I will update the examples and
 document that glfwPollEvents is needed to get joystick events when I get
 time to do this.
 Now for someone to test this on OSX.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#1590 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AOLBMQVQBK46LZPMUP5OSLDRJ34KLANCNFSM4JHBQCGQ>
 .",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/cmedinasoriano,16,https://github.com/glfw/glfw/pull/1590#issuecomment-611501547,This PR attempt to fix #601.,"I was able to test this branch on MacOS but the joystick callbacks were ONLY sent while any of the other events were active like moving the mouse / clicking the mouse buttons or while keyboard key was pressed.  If I just use the joystick alone, no event is sent with the exception of the connect and disconnect event.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,17,https://github.com/glfw/glfw/pull/1590#issuecomment-611549768,This PR attempt to fix #601.,"@cmedinasoriano  Are you using glfwPollEvents() correctly (once per frame in your main loop)? If not, that may explain what you are seeing.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/cmedinasoriano,18,https://github.com/glfw/glfw/pull/1590#issuecomment-611842683,This PR attempt to fix #601.,@beoran Sorry I was using the events test provided as is.  It was calling the glfwWaitEvents instead of the glfwPollEvents and I assumed one was replacing the other.  I can confirm that after using glfwPollEvents every event callback is working properly.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,19,https://github.com/glfw/glfw/pull/1590#issuecomment-612108231,This PR attempt to fix #601.,"Interesting, that does mean that glfwWaitEvents still has errors on OSX, and probably on Windows as well, because it should call  glfwPollEvents internally. For the time being glfwPollEventsis a workaround, but I will have to fix this issue as well.
Once I do, u would appreciate it if you tested again. Also, thanks for trying out my patch on OSX!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/wormyrocks,20,https://github.com/glfw/glfw/pull/1590#issuecomment-629681584,This PR attempt to fix #601.,"It seems like under Linux this patch calls glfwPollEvents twice, both in window.c and x11_window.c.
Is this intentional? I assume the correct behavior is for it to only be called in x11_window.c.
For what it's worth, I've had no problems with this patch on my own branch (on macOS) since I initially merged your commit back from October - just now trying to propagate those updates across other platforms.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,21,https://github.com/glfw/glfw/pull/1590#issuecomment-629689359,This PR attempt to fix #601.,"Yes, this is intentional, IIRC it did not always work correctly otherwise. Perhaps it can be improved as well, though.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1590,2019-10-30T22:59:12Z,,2021-10-29T13:05:11Z,OPEN,False,425,27,6,https://github.com/beoran,Add joystick and gamepad callbacks.,6,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1590,https://github.com/beoran,22,https://github.com/glfw/glfw/pull/1590#issuecomment-925141524,This PR attempt to fix #601.,I updated the PR. Any news on this? This PR has been open for 2 years.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1591,2019-10-31T11:51:34Z,2019-10-31T11:52:04Z,2021-10-24T16:03:14Z,CLOSED,False,74,0,1,https://github.com/kalleee,Create premake5.lua,1,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1591,https://github.com/kalleee,1,https://github.com/glfw/glfw/pull/1591,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1593,2019-11-04T02:16:20Z,2019-11-14T18:41:11Z,2019-11-14T20:52:43Z,CLOSED,False,24,0,2,https://github.com/gracicot,Set C standard at 99 for all test and example targets,2,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1593,https://github.com/gracicot,1,https://github.com/glfw/glfw/pull/1593,"This pull request set the C standard for all remaining targets that wasn't covered by #1576
I used the CMake style that was present in the file, which was to use directory based command for the test's CMakeLists file.","This pull request set the C standard for all remaining targets that wasn't covered by #1576
I used the CMake style that was present in the file, which was to use directory based command for the test's CMakeLists file.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1593,2019-11-04T02:16:20Z,2019-11-14T18:41:11Z,2019-11-14T20:52:43Z,CLOSED,False,24,0,2,https://github.com/gracicot,Set C standard at 99 for all test and example targets,2,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1593,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1593#issuecomment-551193366,"This pull request set the C standard for all remaining targets that wasn't covered by #1576
I used the CMake style that was present in the file, which was to use directory based command for the test's CMakeLists file.",Looks good! The examples directory also needs this.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1593,2019-11-04T02:16:20Z,2019-11-14T18:41:11Z,2019-11-14T20:52:43Z,CLOSED,False,24,0,2,https://github.com/gracicot,Set C standard at 99 for all test and example targets,2,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1593,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1593#issuecomment-554074347,"This pull request set the C standard for all remaining targets that wasn't covered by #1576
I used the CMake style that was present in the file, which was to use directory based command for the test's CMakeLists file.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1595,2019-11-05T15:28:52Z,2019-11-14T18:41:10Z,2019-11-19T20:26:02Z,CLOSED,False,1,0,1,https://github.com/thewoz,Update .gitignore,1,['enhancement'],https://github.com/glfw/glfw/pull/1595,https://github.com/thewoz,1,https://github.com/glfw/glfw/pull/1595,"often github projects or libraries in general are compiled inside a folder build
so would be nice to add to the .gitignore file","often github projects or libraries in general are compiled inside a folder build
so would be nice to add to the .gitignore file",True,{}
glfw/glfw,https://github.com/glfw/glfw,1595,2019-11-05T15:28:52Z,2019-11-14T18:41:10Z,2019-11-19T20:26:02Z,CLOSED,False,1,0,1,https://github.com/thewoz,Update .gitignore,1,['enhancement'],https://github.com/glfw/glfw/pull/1595,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1595#issuecomment-554059874,"often github projects or libraries in general are compiled inside a folder build
so would be nice to add to the .gitignore file",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1595,2019-11-05T15:28:52Z,2019-11-14T18:41:10Z,2019-11-19T20:26:02Z,CLOSED,False,1,0,1,https://github.com/thewoz,Update .gitignore,1,['enhancement'],https://github.com/glfw/glfw/pull/1595,https://github.com/thewoz,3,https://github.com/glfw/glfw/pull/1595#issuecomment-555696942,"often github projects or libraries in general are compiled inside a folder build
so would be nice to add to the .gitignore file",you are welcome,True,{}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/ZenulAbidin,1,https://github.com/glfw/glfw/pull/1598,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.","XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/ZenulAbidin,2,https://github.com/glfw/glfw/pull/1598#issuecomment-557167577,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.","Also, this bug is not present in the latest release.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1598#issuecomment-568441598,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.","Also, this bug is not present in the latest release.

Do you mean that this bug is present in master but not in 3.3?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/ZenulAbidin,4,https://github.com/glfw/glfw/pull/1598#issuecomment-570291703,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.","After running git bisect, I have discovered that this regression was introduced in commit b3eb6dd. The problem is triggered here:

  
    
      glfw/src/x11_init.c
    
    
        Lines 670 to 676
      in
      fe57e3c
    
  
  
    

        
          
           _glfw.x11.xkb.group = 0; 
        

        
          
           XkbStateRec state; 
        

        
          
           if (XkbGetState(_glfw.x11.display, XkbUseCoreKbd, &state) == Success) 
        

        
          
           { 
        

        
          
               XkbSelectEventDetails(_glfw.x11.display, XkbUseCoreKbd, XkbStateNotify, XkbAllStateComponentsMask, XkbGroupStateMask); 
        

        
          
               _glfw.x11.xkb.group = (unsigned int)state.group; 
        

        
          
           } 
        
    
  


This is related to issue #1462, because I have an English QWERTY keyboard layout and also an Arabic QWERTY layout on my system (this may be why you couldn't reproduce it). The issue is the function keys are only on group 0. My Arabic layout is group 0 while my English layout is group 1. So the function keys only work if I start the program in Arabic layout. If I then switch to English layout while the program is running, it still works, but it's very inconvenient.
This bug is reproducible in master as well as in GLFW 3.3.1.
Over here:

  
    
      glfw/src/x11_init.c
    
    
        Lines 256 to 262
      in
      fe57e3c
    
  
  
    

        
          
           // Map the key name to a GLFW key code. Note: We only map printable 
        

        
          
           // keys here, and we use the US keyboard layout. The rest of the 
        

        
          
           // keys (function keys) are mapped using traditional KeySym 
        

        
          
           // translations. 
        

        
          
           if (strcmp(name, ""TLDE"") == 0) key = GLFW_KEY_GRAVE_ACCENT; 
        

        
          
           else if (strcmp(name, ""AE01"") == 0) key = GLFW_KEY_1; 
        

        
          
           else if (strcmp(name, ""AE02"") == 0) key = GLFW_KEY_2; 
        
    
  


Since it's assigning ASCII keys here and they return the native character in the current keyboard layout, it would be simpler to assign the function keys there too. The function key names I added in my PR were taken from the evdev key-codes list and I tested all of them.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1598#issuecomment-570295743,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.",Successfully reproduced on Cygwin/X running MATE with the default Arabic layout.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1598#issuecomment-607546656,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.","This is a good PR but I cannot merge the removal of the non-XKB code as-is because that path can still be chosen if the XKB extension is unavailable, which would leave all keys unknown. We should either keep the whole fallback path or go all-in and require XKB at init.
The x11-xkb-key-names branch is my proposal for the alternative of keeping the fallback path. I also added checking XKB key aliases, which should help some with non-PC and/or non-evdev platforms, though more work is likely needed for obscure platforms.
Do these changes seem reasonable?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/ZenulAbidin,7,https://github.com/glfw/glfw/pull/1598#issuecomment-609469547,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.","@elmindreda

This is a good PR but I cannot merge the removal of the non-XKB code as-is because that path can still be chosen if the XKB extension is unavailable, which would leave all keys unknown.

Good point. We should keep the code that GLFW falls back to if XKB isn't available.
I believe the changes in the x11-xkb-key-names branch are acceptable.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/elmindreda,8,https://github.com/glfw/glfw/pull/1598#issuecomment-622100483,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.",This has been merged as a41a58a. Thank you for the fix and your patience through all the delays.,True,{'THUMBS_UP': ['https://github.com/ZenulAbidin']}
glfw/glfw,https://github.com/glfw/glfw,1598,2019-11-21T15:12:14Z,2020-04-29T19:46:10Z,2020-11-10T02:19:35Z,CLOSED,False,75,199,1,https://github.com/ZenulAbidin,Map function keys independently of key group,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1598,https://github.com/combolek,9,https://github.com/glfw/glfw/pull/1598#issuecomment-724405942,"XkbKeycodeToKeysym in function translateKeyCode in x11_init.c is returning keySym value of -1 when called with the key's scancode. This causes all function and numpad keys to be mapped to GLFW_KEY_UNKNOWN.
Printable keys register correctly because they are mapped explicitly, so I mapped the other keys like that too. There is no reason to use translateKeyCode now.","b25ee39 is an important bug fix. May I ask that it be released in 3.3.3 so that Linux distributions pick it up?
Thanks",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/pwiecz', 'https://github.com/bpingris']}"
glfw/glfw,https://github.com/glfw/glfw,1601,2019-12-03T19:54:56Z,2019-12-11T21:08:05Z,2020-02-13T20:07:46Z,CLOSED,False,1,1,1,https://github.com/Luflosi,Fix typo,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1601,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1601,"I think this should be a plural.
That being said, I am not a native speaker, so I could be wrong.","I think this should be a plural.
That being said, I am not a native speaker, so I could be wrong.",True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1602,2019-12-04T16:16:19Z,2020-05-27T19:11:18Z,2020-05-27T19:11:18Z,CLOSED,False,14,8,2,https://github.com/flecavalier,Videomode crash,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1602,https://github.com/flecavalier,1,https://github.com/glfw/glfw/pull/1602,"Fixing a bug where querying the position or video mode of a disconnected monitor would cause GLFW to segfault.
All credits to kovidgoyal for originally pushing this fix in his own fork of GLFW. (Original pull request: https://github.com/kovidgoyal/glfw/commit/c5a1269b2a661b86ed54934836796599526669b3?diff=split)","Fixing a bug where querying the position or video mode of a disconnected monitor would cause GLFW to segfault.
All credits to kovidgoyal for originally pushing this fix in his own fork of GLFW. (Original pull request: https://github.com/kovidgoyal/glfw/commit/c5a1269b2a661b86ed54934836796599526669b3?diff=split)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1602,2019-12-04T16:16:19Z,2020-05-27T19:11:18Z,2020-05-27T19:11:18Z,CLOSED,False,14,8,2,https://github.com/flecavalier,Videomode crash,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1602,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1602#issuecomment-561767385,"Fixing a bug where querying the position or video mode of a disconnected monitor would cause GLFW to segfault.
All credits to kovidgoyal for originally pushing this fix in his own fork of GLFW. (Original pull request: https://github.com/kovidgoyal/glfw/commit/c5a1269b2a661b86ed54934836796599526669b3?diff=split)",I recommend reading comment kovidgoyal/kitty#812 (comment). @elmindreda needs to decide if this is the proper fix.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1602,2019-12-04T16:16:19Z,2020-05-27T19:11:18Z,2020-05-27T19:11:18Z,CLOSED,False,14,8,2,https://github.com/flecavalier,Videomode crash,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1602,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1602#issuecomment-568445515,"Fixing a bug where querying the position or video mode of a disconnected monitor would cause GLFW to segfault.
All credits to kovidgoyal for originally pushing this fix in his own fork of GLFW. (Original pull request: https://github.com/kovidgoyal/glfw/commit/c5a1269b2a661b86ed54934836796599526669b3?diff=split)","This will need to be fixed, thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1602,2019-12-04T16:16:19Z,2020-05-27T19:11:18Z,2020-05-27T19:11:18Z,CLOSED,False,14,8,2,https://github.com/flecavalier,Videomode crash,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1602,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1602#issuecomment-634880277,"Fixing a bug where querying the position or video mode of a disconnected monitor would cause GLFW to segfault.
All credits to kovidgoyal for originally pushing this fix in his own fork of GLFW. (Original pull request: https://github.com/kovidgoyal/glfw/commit/c5a1269b2a661b86ed54934836796599526669b3?diff=split)","This was merged with a5e5b78 (and 13479ed), based on the commit this PR was based on. Thank you for bringing this upstream!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1605,2019-12-08T17:58:04Z,2019-12-11T21:08:04Z,2019-12-11T21:33:28Z,CLOSED,False,1,1,1,https://github.com/pthom,CMakeLists.txt: add hint when libxi-dev is missing,2,"['enhancement', 'X11', 'build']",https://github.com/glfw/glfw/pull/1605,https://github.com/pthom,1,https://github.com/glfw/glfw/pull/1605,"This is just a helper message when ""X11_Xi_INCLUDE_PATH"" is not found, because googling does not help very much to spot the missing package.","This is just a helper message when ""X11_Xi_INCLUDE_PATH"" is not found, because googling does not help very much to spot the missing package.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1605,2019-12-08T17:58:04Z,2019-12-11T21:08:04Z,2019-12-11T21:33:28Z,CLOSED,False,1,1,1,https://github.com/pthom,CMakeLists.txt: add hint when libxi-dev is missing,2,"['enhancement', 'X11', 'build']",https://github.com/glfw/glfw/pull/1605,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1605#issuecomment-562975008,"This is just a helper message when ""X11_Xi_INCLUDE_PATH"" is not found, because googling does not help very much to spot the missing package.","This only applies to Debian though, ArchLinux calls this package libxi, Fedora libXi-devel, and other distributions probably use very different names too.",True,{'THUMBS_UP': ['https://github.com/intrigus']}
glfw/glfw,https://github.com/glfw/glfw,1605,2019-12-08T17:58:04Z,2019-12-11T21:08:04Z,2019-12-11T21:33:28Z,CLOSED,False,1,1,1,https://github.com/pthom,CMakeLists.txt: add hint when libxi-dev is missing,2,"['enhancement', 'X11', 'build']",https://github.com/glfw/glfw/pull/1605,https://github.com/pthom,3,https://github.com/glfw/glfw/pull/1605#issuecomment-562975803,"This is just a helper message when ""X11_Xi_INCLUDE_PATH"" is not found, because googling does not help very much to spot the missing package.","May be the message could be ""Hint: install libxi devel package"" (this would have been sufficient for me)",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1605,2019-12-08T17:58:04Z,2019-12-11T21:08:04Z,2019-12-11T21:33:28Z,CLOSED,False,1,1,1,https://github.com/pthom,CMakeLists.txt: add hint when libxi-dev is missing,2,"['enhancement', 'X11', 'build']",https://github.com/glfw/glfw/pull/1605,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1605#issuecomment-563956127,"This is just a helper message when ""X11_Xi_INCLUDE_PATH"" is not found, because googling does not help very much to spot the missing package.","Ooh, good idea! Will add for all the X errors.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1605,2019-12-08T17:58:04Z,2019-12-11T21:08:04Z,2019-12-11T21:33:28Z,CLOSED,False,1,1,1,https://github.com/pthom,CMakeLists.txt: add hint when libxi-dev is missing,2,"['enhancement', 'X11', 'build']",https://github.com/glfw/glfw/pull/1605,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1605#issuecomment-564742541,"This is just a helper message when ""X11_Xi_INCLUDE_PATH"" is not found, because googling does not help very much to spot the missing package.","Package name hints added with a43f545. Thank you!
Wish we could have a per-distro package name table but don't have time to compile and maintain one.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1607,2019-12-08T20:39:48Z,,2021-10-29T13:03:47Z,OPEN,False,222,2,7,https://github.com/linkmauve,Expose damage tracking in the API,6,['enhancement'],https://github.com/glfw/glfw/pull/1607,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1607,"This adds two new functions to the public API, glfwGetBufferAge() and glfwSwapBuffersWithDamage(), mirroring the EGL extensions EGL_EXT_buffer_age and EGL_KHR_swap_buffers_with_damage, as well as a new GLFWrect struct used by the latter.
These two functions can help efficiency tremendously, especially due to a lower memory bandwidth usage, especially on embedded GPUs:

glfwGetBufferAge() lets the application know when the current buffer was last written to, so that it can avoid a clear and redraw of areas which haven’t changed.
glfwSwapBuffersWithDamage() lets the compositor know which areas it should redraw, so that it can avoid compositing areas which haven’t changed, if it itself tracks the buffer age of its buffers.

Here is a video of PyTouhou patched to use this new API: touhou-damage
I also modified tests/msaa.c to use damage to swap buffers, so that you can test this feature.
Other context APIs might have similar extensions, but I don’t have any way to test them and this can be left for a future changeset.
Another future extension to consider is EGL_KHR_partial_update, which lets the application tell the driver ahead of time which regions it will update, thus avoiding an expensive read back of the entire buffer, especially on tiling GPUs.","This adds two new functions to the public API, glfwGetBufferAge() and glfwSwapBuffersWithDamage(), mirroring the EGL extensions EGL_EXT_buffer_age and EGL_KHR_swap_buffers_with_damage, as well as a new GLFWrect struct used by the latter.
These two functions can help efficiency tremendously, especially due to a lower memory bandwidth usage, especially on embedded GPUs:

glfwGetBufferAge() lets the application know when the current buffer was last written to, so that it can avoid a clear and redraw of areas which haven’t changed.
glfwSwapBuffersWithDamage() lets the compositor know which areas it should redraw, so that it can avoid compositing areas which haven’t changed, if it itself tracks the buffer age of its buffers.

Here is a video of PyTouhou patched to use this new API: touhou-damage
I also modified tests/msaa.c to use damage to swap buffers, so that you can test this feature.
Other context APIs might have similar extensions, but I don’t have any way to test them and this can be left for a future changeset.
Another future extension to consider is EGL_KHR_partial_update, which lets the application tell the driver ahead of time which regions it will update, thus avoiding an expensive read back of the entire buffer, especially on tiling GPUs.",True,"{'THUMBS_UP': ['https://github.com/xerpi', 'https://github.com/neurotok']}"
glfw/glfw,https://github.com/glfw/glfw,1608,2019-12-09T05:33:58Z,,2021-05-06T03:03:41Z,OPEN,False,201,15,12,https://github.com/christopher-hesse,EGL headless mode,5,[],https://github.com/glfw/glfw/pull/1608,https://github.com/christopher-hesse,1,https://github.com/glfw/glfw/pull/1608,"Inspired by #786 this is a PR to support OSMesa-style headless rendering with EGL.
If you want to run an OpenGL program on a linux server you can run an X server with either hardware or software rendering.  Configuring software rendering isn't too bad but hardware rendering can be a bit annoying and in either case you need to manage an X server process.
To run without an X server, you can use osmesa or EGL.  OSMesa headless can be used by compiling GLFW with -DGLFW_USE_OSMESA=ON , but only supports software rendering.  For hardware rendering, EGL can be used, but the existing code doesn't seem to quite support this setup.
This PR is a proof of concept for this mode (it's just hacked into egl_context.(h|c)) but if there is interest I could clean it up.","Inspired by #786 this is a PR to support OSMesa-style headless rendering with EGL.
If you want to run an OpenGL program on a linux server you can run an X server with either hardware or software rendering.  Configuring software rendering isn't too bad but hardware rendering can be a bit annoying and in either case you need to manage an X server process.
To run without an X server, you can use osmesa or EGL.  OSMesa headless can be used by compiling GLFW with -DGLFW_USE_OSMESA=ON , but only supports software rendering.  For hardware rendering, EGL can be used, but the existing code doesn't seem to quite support this setup.
This PR is a proof of concept for this mode (it's just hacked into egl_context.(h|c)) but if there is interest I could clean it up.",True,"{'THUMBS_UP': ['https://github.com/paperManu', 'https://github.com/flxzt', 'https://github.com/EriKWDev', 'https://github.com/r00tman']}"
glfw/glfw,https://github.com/glfw/glfw,1608,2019-12-09T05:33:58Z,,2021-05-06T03:03:41Z,OPEN,False,201,15,12,https://github.com/christopher-hesse,EGL headless mode,5,[],https://github.com/glfw/glfw/pull/1608,https://github.com/vchuravy,2,https://github.com/glfw/glfw/pull/1608#issuecomment-730143511,"Inspired by #786 this is a PR to support OSMesa-style headless rendering with EGL.
If you want to run an OpenGL program on a linux server you can run an X server with either hardware or software rendering.  Configuring software rendering isn't too bad but hardware rendering can be a bit annoying and in either case you need to manage an X server process.
To run without an X server, you can use osmesa or EGL.  OSMesa headless can be used by compiling GLFW with -DGLFW_USE_OSMESA=ON , but only supports software rendering.  For hardware rendering, EGL can be used, but the existing code doesn't seem to quite support this setup.
This PR is a proof of concept for this mode (it's just hacked into egl_context.(h|c)) but if there is interest I could clean it up.",Having this would be fantastic! Especially for scientific applications rendering on a server.,True,"{'THUMBS_UP': ['https://github.com/EriKWDev', 'https://github.com/whateverforever', 'https://github.com/r00tman', 'https://github.com/eagle-dai', 'https://github.com/kahuz', 'https://github.com/shaisung']}"
glfw/glfw,https://github.com/glfw/glfw,1608,2019-12-09T05:33:58Z,,2021-05-06T03:03:41Z,OPEN,False,201,15,12,https://github.com/christopher-hesse,EGL headless mode,5,[],https://github.com/glfw/glfw/pull/1608,https://github.com/kivutar,3,https://github.com/glfw/glfw/pull/1608#issuecomment-833189712,"Inspired by #786 this is a PR to support OSMesa-style headless rendering with EGL.
If you want to run an OpenGL program on a linux server you can run an X server with either hardware or software rendering.  Configuring software rendering isn't too bad but hardware rendering can be a bit annoying and in either case you need to manage an X server process.
To run without an X server, you can use osmesa or EGL.  OSMesa headless can be used by compiling GLFW with -DGLFW_USE_OSMESA=ON , but only supports software rendering.  For hardware rendering, EGL can be used, but the existing code doesn't seem to quite support this setup.
This PR is a proof of concept for this mode (it's just hacked into egl_context.(h|c)) but if there is interest I could clean it up.",This would also be useful for automated testing,True,"{'THUMBS_UP': ['https://github.com/EriKWDev', 'https://github.com/whateverforever', 'https://github.com/r00tman', 'https://github.com/eagle-dai', 'https://github.com/logankaser']}"
glfw/glfw,https://github.com/glfw/glfw,1614,2019-12-18T17:06:55Z,2019-12-26T15:32:02Z,2021-10-24T15:58:32Z,CLOSED,False,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1614,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1614,"The sizeof() operator has the type size_t, so the for loop iterating over it should use the same type.
Closes #1614.","The sizeof() operator has the type size_t, so the for loop iterating over it should use the same type.
Closes #1614.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1619,2020-01-05T16:44:35Z,2020-01-17T01:05:56Z,2020-01-21T06:55:58Z,CLOSED,False,73,7,8,https://github.com/ByunghoonKim,Add VK_EXT_metal_surface support,9,"['enhancement', 'macOS', 'Vulkan']",https://github.com/glfw/glfw/pull/1619,https://github.com/ByunghoonKim,1,https://github.com/glfw/glfw/pull/1619,"MoltenVK_Runtime_UserGuide of MoltenVK repository describes VK_MVK_macos_surface as obsolete and suggests to use VK_EXT_metal_surface instead.
Made minimal additions to the code and left the original enclosed in #if defined(VK_USE_PLATFORM_MACOS_MVK) macro.","MoltenVK_Runtime_UserGuide of MoltenVK repository describes VK_MVK_macos_surface as obsolete and suggests to use VK_EXT_metal_surface instead.
Made minimal additions to the code and left the original enclosed in #if defined(VK_USE_PLATFORM_MACOS_MVK) macro.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1619,2020-01-05T16:44:35Z,2020-01-17T01:05:56Z,2020-01-21T06:55:58Z,CLOSED,False,73,7,8,https://github.com/ByunghoonKim,Add VK_EXT_metal_surface support,9,"['enhancement', 'macOS', 'Vulkan']",https://github.com/glfw/glfw/pull/1619,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1619#issuecomment-576454101,"MoltenVK_Runtime_UserGuide of MoltenVK repository describes VK_MVK_macos_surface as obsolete and suggests to use VK_EXT_metal_surface instead.
Made minimal additions to the code and left the original enclosed in #if defined(VK_USE_PLATFORM_MACOS_MVK) macro.","Apologies for not giving proper feedback on this before merging. I left it far too late but also wanted it to go out in 3.3.2, which it did yesterday.
Thank you for the meticulous PR! It was merged as c5cb4a2, with conversion to run-time detection and selection in 15d9180.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1619,2020-01-05T16:44:35Z,2020-01-17T01:05:56Z,2020-01-21T06:55:58Z,CLOSED,False,73,7,8,https://github.com/ByunghoonKim,Add VK_EXT_metal_surface support,9,"['enhancement', 'macOS', 'Vulkan']",https://github.com/glfw/glfw/pull/1619,https://github.com/ByunghoonKim,3,https://github.com/glfw/glfw/pull/1619#issuecomment-576543978,"MoltenVK_Runtime_UserGuide of MoltenVK repository describes VK_MVK_macos_surface as obsolete and suggests to use VK_EXT_metal_surface instead.
Made minimal additions to the code and left the original enclosed in #if defined(VK_USE_PLATFORM_MACOS_MVK) macro.",Thank you for such a great effort to maintain this marvelous library. I am glad that I was a tiny bit helpful.,True,{'HEART': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1621,2020-01-12T11:56:26Z,2020-05-27T19:17:53Z,2020-05-27T19:18:16Z,CLOSED,False,48,0,2,https://github.com/JonLangfordUK,Update to GLFW 12/01/2020,2,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1621,https://github.com/JonLangfordUK,1,https://github.com/glfw/glfw/pull/1621,,,True,{'THUMBS_DOWN': ['https://github.com/mmozeiko']}
glfw/glfw,https://github.com/glfw/glfw,1621,2020-01-12T11:56:26Z,2020-05-27T19:17:53Z,2020-05-27T19:18:16Z,CLOSED,False,48,0,2,https://github.com/JonLangfordUK,Update to GLFW 12/01/2020,2,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1621,https://github.com/intrigus,2,https://github.com/glfw/glfw/pull/1621#issuecomment-573411147,,"Huh?
What is this about?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1621,2020-01-12T11:56:26Z,2020-05-27T19:17:53Z,2020-05-27T19:18:16Z,CLOSED,False,48,0,2,https://github.com/JonLangfordUK,Update to GLFW 12/01/2020,2,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1621,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1621#issuecomment-634883579,,"I won't merge this, even in a fixed form. Maintaining more than one build system is a constant hassle and currently CMake is the better choice.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1624,2020-01-14T00:55:11Z,2020-01-17T01:05:57Z,2020-01-17T01:05:57Z,CLOSED,False,1,1,1,https://github.com/Crunkle,Fix documentation install when Doxygen is not found,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1624,https://github.com/Crunkle,1,https://github.com/glfw/glfw/pull/1624,If Doxygen is not installed then the install target will fail as the documentation was not built. This simply updates the check to only include the docs directory if Doxygen was found.,If Doxygen is not installed then the install target will fail as the documentation was not built. This simply updates the check to only include the docs directory if Doxygen was found.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1631,2020-01-22T05:58:54Z,,2020-01-24T11:15:33Z,OPEN,False,11,0,1,https://github.com/JackBoosY,Add vcpkg installation instructions,3,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1631,https://github.com/JackBoosY,1,https://github.com/glfw/glfw/pull/1631,"glfw is available as a port in vcpkg, a C++ library manager that simplifies installation for glfw and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build glfw, ready to be included in their projects.
We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.","glfw is available as a port in vcpkg, a C++ library manager that simplifies installation for glfw and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build glfw, ready to be included in their projects.
We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1640,2020-02-07T06:01:05Z,2020-02-07T06:01:19Z,2021-10-21T17:30:34Z,CLOSED,False,66,0,1,https://github.com/pmq24,Add premake5.lua,1,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1640,https://github.com/pmq24,1,https://github.com/glfw/glfw/pull/1640,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1642,2020-02-08T18:22:43Z,2021-08-31T17:15:59Z,2021-08-31T17:16:30Z,CLOSED,False,44,19,5,https://github.com/christianrauch,check available Wayland protocols,2,"['enhancement', 'wontfix', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1642,https://github.com/christianrauch,1,https://github.com/glfw/glfw/pull/1642,Check the available protocol definitions when generating bindings and set HAS_PROTO_<name> for a compile-time check.,Check the available protocol definitions when generating bindings and set HAS_PROTO_<name> for a compile-time check.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1642,2020-02-08T18:22:43Z,2021-08-31T17:15:59Z,2021-08-31T17:16:30Z,CLOSED,False,44,19,5,https://github.com/christianrauch,check available Wayland protocols,2,"['enhancement', 'wontfix', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1642,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1642#issuecomment-909429708,Check the available protocol definitions when generating bindings and set HAS_PROTO_<name> for a compile-time check.,"Thank you for the PR!
I don't think this is the right approach for GLFW to use. If we end up using protocols so new that distributions don't yet have them, I think it would be better to bundle the protocol definition until the packages have caught up.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1644,2020-02-09T21:31:18Z,2020-03-16T16:05:58Z,2020-03-16T16:05:58Z,CLOSED,False,0,5,1,None,removed unnecessary initialization of values with zero,1,[],https://github.com/glfw/glfw/pull/1644,None,1,https://github.com/glfw/glfw/pull/1644,xpos and ypos are assigned with a value inside _glfwPlatformGetMonitorPos,xpos and ypos are assigned with a value inside _glfwPlatformGetMonitorPos,True,{}
glfw/glfw,https://github.com/glfw/glfw,1644,2020-02-09T21:31:18Z,2020-03-16T16:05:58Z,2020-03-16T16:05:58Z,CLOSED,False,0,5,1,None,removed unnecessary initialization of values with zero,1,[],https://github.com/glfw/glfw/pull/1644,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1644#issuecomment-585347977,xpos and ypos are assigned with a value inside _glfwPlatformGetMonitorPos,"Thank you for the PR but I will not merge this.
The shared function sets those because the API guarantees that out parameters will have defined values even if an error occurs, including GLFW_NOT_INITIALIZED. It is also a service to platform functions so they don't all have to duplicate this work.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1644,2020-02-09T21:31:18Z,2020-03-16T16:05:58Z,2020-03-16T16:05:58Z,CLOSED,False,0,5,1,None,removed unnecessary initialization of values with zero,1,[],https://github.com/glfw/glfw/pull/1644,None,3,https://github.com/glfw/glfw/pull/1644#issuecomment-585412335,xpos and ypos are assigned with a value inside _glfwPlatformGetMonitorPos,"Ok, thanks for your time.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1667,2020-03-28T10:19:21Z,2020-03-28T10:19:38Z,2021-10-21T17:30:59Z,CLOSED,False,74,0,1,https://github.com/Xydez,Update repo,3,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1667,https://github.com/Xydez,1,https://github.com/glfw/glfw/pull/1667,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1673,2020-04-15T16:01:28Z,2020-05-19T12:16:26Z,2020-05-19T12:16:26Z,CLOSED,False,2,2,1,https://github.com/gre-42,Correct sign in mat4x4_rotate_Y,1,['bug'],https://github.com/glfw/glfw/pull/1673,https://github.com/gre-42,1,https://github.com/glfw/glfw/pull/1673,Signs were incorrect in mat4x4_rotate_Y.,Signs were incorrect in mat4x4_rotate_Y.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1673,2020-04-15T16:01:28Z,2020-05-19T12:16:26Z,2020-05-19T12:16:26Z,CLOSED,False,2,2,1,https://github.com/gre-42,Correct sign in mat4x4_rotate_Y,1,['bug'],https://github.com/glfw/glfw/pull/1673,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1673#issuecomment-614163071,Signs were incorrect in mat4x4_rotate_Y.,"Good spot! I agree; the Y rotation is inconsistent with X and Z, and the signs should be swapped. (see https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations).
I believe this code is taken from the repository here: https://github.com/datenwolf/linmath.h/blob/master/linmath.h#L248 so it would be great if you could submit a PR there too.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/qristofer']}"
glfw/glfw,https://github.com/glfw/glfw,1673,2020-04-15T16:01:28Z,2020-05-19T12:16:26Z,2020-05-19T12:16:26Z,CLOSED,False,2,2,1,https://github.com/gre-42,Correct sign in mat4x4_rotate_Y,1,['bug'],https://github.com/glfw/glfw/pull/1673,https://github.com/gre-42,3,https://github.com/glfw/glfw/pull/1673#issuecomment-614199879,Signs were incorrect in mat4x4_rotate_Y.,I just submitted a PR in the source repository also.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1673,2020-04-15T16:01:28Z,2020-05-19T12:16:26Z,2020-05-19T12:16:26Z,CLOSED,False,2,2,1,https://github.com/gre-42,Correct sign in mat4x4_rotate_Y,1,['bug'],https://github.com/glfw/glfw/pull/1673,https://github.com/tombsar,4,https://github.com/glfw/glfw/pull/1673#issuecomment-620539114,Signs were incorrect in mat4x4_rotate_Y.,NB: This change was accepted over at the source repository (datenwolf/linmath.h#39),True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1678,2020-04-18T23:35:24Z,,2022-02-05T21:56:54Z,OPEN,False,181,2,11,https://github.com/MDZhB,Gamepad rumble effects,15,"['enhancement', 'Windows', 'Linux', 'input']",https://github.com/glfw/glfw/pull/1678,https://github.com/MDZhB,1,https://github.com/glfw/glfw/pull/1678,"This adds a function to control rumble effects on xbox-like gamepads, partially addressing #57. It also adds two sliders to the joystick test app, which allow the user to set each rumble motor's intensity. Some notes:

There is currently no MacOS support. I intend to implement this once I get my hands on an Apple machine. Linux and Windows work fine.
There is no fallback for DirectInput devices. Although all of the devices available to me support vibration effects, IDirectInputDevice8_EnumEffects produced no effect types; consequently, I couldn't test my work. If anybody can recommend a cheap pad with vibration effects that are available through DirectInput, I'd be happy to buy one and add some code to cover older devices.
The sole change to the API is a new method, int glfwSetJoystickRumble(int jid, float slowMotorIntensity, float fastMotorIntensity), which returns GLFW_FALSE if it was unable to make the gamepad rumble for any reason. @elmindreda's comment on #57 regarding a more complex haptic feedback API got no response, so I assume this is sufficient in the maintainer's/community's view.

Right now I'm looking for some feedback on my code, since I'm not really a C person. I'll add all the missing documentation (changelog, guide, etc.) once my work is good enough to merge.","This adds a function to control rumble effects on xbox-like gamepads, partially addressing #57. It also adds two sliders to the joystick test app, which allow the user to set each rumble motor's intensity. Some notes:

There is currently no MacOS support. I intend to implement this once I get my hands on an Apple machine. Linux and Windows work fine.
There is no fallback for DirectInput devices. Although all of the devices available to me support vibration effects, IDirectInputDevice8_EnumEffects produced no effect types; consequently, I couldn't test my work. If anybody can recommend a cheap pad with vibration effects that are available through DirectInput, I'd be happy to buy one and add some code to cover older devices.
The sole change to the API is a new method, int glfwSetJoystickRumble(int jid, float slowMotorIntensity, float fastMotorIntensity), which returns GLFW_FALSE if it was unable to make the gamepad rumble for any reason. @elmindreda's comment on #57 regarding a more complex haptic feedback API got no response, so I assume this is sufficient in the maintainer's/community's view.

Right now I'm looking for some feedback on my code, since I'm not really a C person. I'll add all the missing documentation (changelog, guide, etc.) once my work is good enough to merge.",True,"{'THUMBS_UP': ['https://github.com/dkorpel', 'https://github.com/MrCrayfish', 'https://github.com/Cons-Cat', 'https://github.com/K4thos', 'https://github.com/ws909', 'https://github.com/stohrendorf', 'https://github.com/malytomas']}"
glfw/glfw,https://github.com/glfw/glfw,1678,2020-04-18T23:35:24Z,,2022-02-05T21:56:54Z,OPEN,False,181,2,11,https://github.com/MDZhB,Gamepad rumble effects,15,"['enhancement', 'Windows', 'Linux', 'input']",https://github.com/glfw/glfw/pull/1678,https://github.com/JohnnytheRocket,2,https://github.com/glfw/glfw/pull/1678#issuecomment-711160073,"This adds a function to control rumble effects on xbox-like gamepads, partially addressing #57. It also adds two sliders to the joystick test app, which allow the user to set each rumble motor's intensity. Some notes:

There is currently no MacOS support. I intend to implement this once I get my hands on an Apple machine. Linux and Windows work fine.
There is no fallback for DirectInput devices. Although all of the devices available to me support vibration effects, IDirectInputDevice8_EnumEffects produced no effect types; consequently, I couldn't test my work. If anybody can recommend a cheap pad with vibration effects that are available through DirectInput, I'd be happy to buy one and add some code to cover older devices.
The sole change to the API is a new method, int glfwSetJoystickRumble(int jid, float slowMotorIntensity, float fastMotorIntensity), which returns GLFW_FALSE if it was unable to make the gamepad rumble for any reason. @elmindreda's comment on #57 regarding a more complex haptic feedback API got no response, so I assume this is sufficient in the maintainer's/community's view.

Right now I'm looking for some feedback on my code, since I'm not really a C person. I'll add all the missing documentation (changelog, guide, etc.) once my work is good enough to merge.","I tried this out with a PS4 controller, and whereas all the expected GLFW function remained I only got GLFW_FALSE  returned by glfwSetJoystickRumble, and no rumble.
I am running Linux and the controller was correctly identified with the expected button mapping. What type of controllers have successfully been tested?
EDIT
It turns out that the force feedback-drivers were not activated in my kernel. After activating them the rumble works as expected. However, I think it would be useful to be able to set the duration of the rumble in the function call, or at least in a setup stage.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1678,2020-04-18T23:35:24Z,,2022-02-05T21:56:54Z,OPEN,False,181,2,11,https://github.com/MDZhB,Gamepad rumble effects,15,"['enhancement', 'Windows', 'Linux', 'input']",https://github.com/glfw/glfw/pull/1678,https://github.com/MDZhB,3,https://github.com/glfw/glfw/pull/1678#issuecomment-731625921,"This adds a function to control rumble effects on xbox-like gamepads, partially addressing #57. It also adds two sliders to the joystick test app, which allow the user to set each rumble motor's intensity. Some notes:

There is currently no MacOS support. I intend to implement this once I get my hands on an Apple machine. Linux and Windows work fine.
There is no fallback for DirectInput devices. Although all of the devices available to me support vibration effects, IDirectInputDevice8_EnumEffects produced no effect types; consequently, I couldn't test my work. If anybody can recommend a cheap pad with vibration effects that are available through DirectInput, I'd be happy to buy one and add some code to cover older devices.
The sole change to the API is a new method, int glfwSetJoystickRumble(int jid, float slowMotorIntensity, float fastMotorIntensity), which returns GLFW_FALSE if it was unable to make the gamepad rumble for any reason. @elmindreda's comment on #57 regarding a more complex haptic feedback API got no response, so I assume this is sufficient in the maintainer's/community's view.

Right now I'm looking for some feedback on my code, since I'm not really a C person. I'll add all the missing documentation (changelog, guide, etc.) once my work is good enough to merge.","I think it would be useful to be able to set the duration of the rumble in the function call, or at least in a setup stage.

This code makes use of the XInput API on Windows, which does not support rumble duration. I'd like to stay away from adding machinery for this. My reasons are twofold:

it feels like a slippery slope toward cumbersome, DirectInput style effects (with parameters for duration, envelopes, etc.);
the application can achieve the same functionality by updating the rumble intensity in every frame where it is needed.

The current approach exposes gamepad rumble in a way that is simple and still allows for the implementation of ""fire and forget"" effects in the application code, if that is the programmer's preference.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1678,2020-04-18T23:35:24Z,,2022-02-05T21:56:54Z,OPEN,False,181,2,11,https://github.com/MDZhB,Gamepad rumble effects,15,"['enhancement', 'Windows', 'Linux', 'input']",https://github.com/glfw/glfw/pull/1678,https://github.com/JohnnytheRocket,4,https://github.com/glfw/glfw/pull/1678#issuecomment-732015824,"This adds a function to control rumble effects on xbox-like gamepads, partially addressing #57. It also adds two sliders to the joystick test app, which allow the user to set each rumble motor's intensity. Some notes:

There is currently no MacOS support. I intend to implement this once I get my hands on an Apple machine. Linux and Windows work fine.
There is no fallback for DirectInput devices. Although all of the devices available to me support vibration effects, IDirectInputDevice8_EnumEffects produced no effect types; consequently, I couldn't test my work. If anybody can recommend a cheap pad with vibration effects that are available through DirectInput, I'd be happy to buy one and add some code to cover older devices.
The sole change to the API is a new method, int glfwSetJoystickRumble(int jid, float slowMotorIntensity, float fastMotorIntensity), which returns GLFW_FALSE if it was unable to make the gamepad rumble for any reason. @elmindreda's comment on #57 regarding a more complex haptic feedback API got no response, so I assume this is sufficient in the maintainer's/community's view.

Right now I'm looking for some feedback on my code, since I'm not really a C person. I'll add all the missing documentation (changelog, guide, etc.) once my work is good enough to merge.","The current approach exposes gamepad rumble in a way that is simple and still allows for the implementation of ""fire and forget"" effects in the application code, if that is the programmer's preference.

After some more experience working with it, I agree with your assessment. Good work with this, I at least appreciate it a lot!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1678,2020-04-18T23:35:24Z,,2022-02-05T21:56:54Z,OPEN,False,181,2,11,https://github.com/MDZhB,Gamepad rumble effects,15,"['enhancement', 'Windows', 'Linux', 'input']",https://github.com/glfw/glfw/pull/1678,https://github.com/stohrendorf,5,https://github.com/glfw/glfw/pull/1678#issuecomment-1030705835,"This adds a function to control rumble effects on xbox-like gamepads, partially addressing #57. It also adds two sliders to the joystick test app, which allow the user to set each rumble motor's intensity. Some notes:

There is currently no MacOS support. I intend to implement this once I get my hands on an Apple machine. Linux and Windows work fine.
There is no fallback for DirectInput devices. Although all of the devices available to me support vibration effects, IDirectInputDevice8_EnumEffects produced no effect types; consequently, I couldn't test my work. If anybody can recommend a cheap pad with vibration effects that are available through DirectInput, I'd be happy to buy one and add some code to cover older devices.
The sole change to the API is a new method, int glfwSetJoystickRumble(int jid, float slowMotorIntensity, float fastMotorIntensity), which returns GLFW_FALSE if it was unable to make the gamepad rumble for any reason. @elmindreda's comment on #57 regarding a more complex haptic feedback API got no response, so I assume this is sufficient in the maintainer's/community's view.

Right now I'm looking for some feedback on my code, since I'm not really a C person. I'll add all the missing documentation (changelog, guide, etc.) once my work is good enough to merge.","What are the blockers to get this implemented/merged? This PR was opened quite some time ago, resolving an issue opened nearly a decade ago, and I haven't seen any comment indicating this can't be merged. The changes seem small enough to not consume too much time to review, and they are an optional feature posing no impact on existing functionality, so people can just ignore this feature if (for some reason) it migh cause problems.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1680,2020-04-19T12:11:11Z,2020-05-22T15:44:29Z,2020-05-22T15:59:11Z,CLOSED,False,7,1,3,https://github.com/Kangz,Use CALayer instead of NSView for EGLNativeWindowType,1,"['bug', 'macOS', 'verified', 'EGL']",https://github.com/glfw/glfw/pull/1680,https://github.com/Kangz,1,https://github.com/glfw/glfw/pull/1680,"The only two EGL implementations on macOS are Swiftshader and ANGLE.
While Swiftshader supports both NSView and CALayer as
EGLNativeWindowType, ANGLE supports only CALayer. Furthermore
Swiftshader's OpenGL ES frontend is deprecated in favor of using ANGLE
on top of Swiftshader's Vulkan frontend.
This means that on macOS EGLNativeWindowType should be a CALayer for
compatibility with ANGLE.
Fixes #1169","The only two EGL implementations on macOS are Swiftshader and ANGLE.
While Swiftshader supports both NSView and CALayer as
EGLNativeWindowType, ANGLE supports only CALayer. Furthermore
Swiftshader's OpenGL ES frontend is deprecated in favor of using ANGLE
on top of Swiftshader's Vulkan frontend.
This means that on macOS EGLNativeWindowType should be a CALayer for
compatibility with ANGLE.
Fixes #1169",True,{}
glfw/glfw,https://github.com/glfw/glfw,1680,2020-04-19T12:11:11Z,2020-05-22T15:44:29Z,2020-05-22T15:59:11Z,CLOSED,False,7,1,3,https://github.com/Kangz,Use CALayer instead of NSView for EGLNativeWindowType,1,"['bug', 'macOS', 'verified', 'EGL']",https://github.com/glfw/glfw/pull/1680,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1680#issuecomment-627623205,"The only two EGL implementations on macOS are Swiftshader and ANGLE.
While Swiftshader supports both NSView and CALayer as
EGLNativeWindowType, ANGLE supports only CALayer. Furthermore
Swiftshader's OpenGL ES frontend is deprecated in favor of using ANGLE
on top of Swiftshader's Vulkan frontend.
This means that on macOS EGLNativeWindowType should be a CALayer for
compatibility with ANGLE.
Fixes #1169","I'm a little concerned that our content can, with this PR, be in all three states: non-layer-backed by default on pre-Mojave, layer-backed on Mojave and later or when using EGL, or layer-hosting when using Vulkan.
I tested making layer-backed the default state on pre-Mojave systems, but that disabled vsync for NSGL contexts for some reason I have yet to discover.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1680,2020-04-19T12:11:11Z,2020-05-22T15:44:29Z,2020-05-22T15:59:11Z,CLOSED,False,7,1,3,https://github.com/Kangz,Use CALayer instead of NSView for EGLNativeWindowType,1,"['bug', 'macOS', 'verified', 'EGL']",https://github.com/glfw/glfw/pull/1680,https://github.com/Kangz,3,https://github.com/glfw/glfw/pull/1680#issuecomment-627786758,"The only two EGL implementations on macOS are Swiftshader and ANGLE.
While Swiftshader supports both NSView and CALayer as
EGLNativeWindowType, ANGLE supports only CALayer. Furthermore
Swiftshader's OpenGL ES frontend is deprecated in favor of using ANGLE
on top of Swiftshader's Vulkan frontend.
This means that on macOS EGLNativeWindowType should be a CALayer for
compatibility with ANGLE.
Fixes #1169","If I understand correctly the concern is that when using EGL on pre-Mojave, we could have the same VSync issue that the non-EGL path had?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1680,2020-04-19T12:11:11Z,2020-05-22T15:44:29Z,2020-05-22T15:59:11Z,CLOSED,False,7,1,3,https://github.com/Kangz,Use CALayer instead of NSView for EGLNativeWindowType,1,"['bug', 'macOS', 'verified', 'EGL']",https://github.com/glfw/glfw/pull/1680,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1680#issuecomment-630479097,"The only two EGL implementations on macOS are Swiftshader and ANGLE.
While Swiftshader supports both NSView and CALayer as
EGLNativeWindowType, ANGLE supports only CALayer. Furthermore
Swiftshader's OpenGL ES frontend is deprecated in favor of using ANGLE
on top of Swiftshader's Vulkan frontend.
This means that on macOS EGLNativeWindowType should be a CALayer for
compatibility with ANGLE.
Fixes #1169","If I understand correctly the concern is that when using EGL on pre-Mojave, we could have the same VSync issue that the non-EGL path had?

That seems to be unavoidable. I'm just vaguely worried, especially after the silent NSGL breakage in Mojave and what is probably more of the kind in the future.
I'll gladly merge this in the meantime.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1680,2020-04-19T12:11:11Z,2020-05-22T15:44:29Z,2020-05-22T15:59:11Z,CLOSED,False,7,1,3,https://github.com/Kangz,Use CALayer instead of NSView for EGLNativeWindowType,1,"['bug', 'macOS', 'verified', 'EGL']",https://github.com/glfw/glfw/pull/1680,https://github.com/Kangz,5,https://github.com/glfw/glfw/pull/1680#issuecomment-632358401,"The only two EGL implementations on macOS are Swiftshader and ANGLE.
While Swiftshader supports both NSView and CALayer as
EGLNativeWindowType, ANGLE supports only CALayer. Furthermore
Swiftshader's OpenGL ES frontend is deprecated in favor of using ANGLE
on top of Swiftshader's Vulkan frontend.
This means that on macOS EGLNativeWindowType should be a CALayer for
compatibility with ANGLE.
Fixes #1169","Addressed all comments and the PR is much simpler now, PTAL again!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1691,2020-05-08T15:42:30Z,2020-06-23T23:18:31Z,2020-06-30T12:31:46Z,CLOSED,False,97,10,4,https://github.com/linkmauve,Don’t let the driver guess the platform,1,"['enhancement', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1691,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1691,"EGL_EXT_platform_base, and later EGL 1.5, introduced two new functions
which take a platform enum instead of guessing based on the shape of the
passed pointer data, which is incredibly error-prone.
This commit makes use of them when they’re exposed by the driver, and
falls back to the old insecure API when not.","EGL_EXT_platform_base, and later EGL 1.5, introduced two new functions
which take a platform enum instead of guessing based on the shape of the
passed pointer data, which is incredibly error-prone.
This commit makes use of them when they’re exposed by the driver, and
falls back to the old insecure API when not.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1691,2020-05-08T15:42:30Z,2020-06-23T23:18:31Z,2020-06-30T12:31:46Z,CLOSED,False,97,10,4,https://github.com/linkmauve,Don’t let the driver guess the platform,1,"['enhancement', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1691,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1691#issuecomment-625922877,"EGL_EXT_platform_base, and later EGL 1.5, introduced two new functions
which take a platform enum instead of guessing based on the shape of the
passed pointer data, which is incredibly error-prone.
This commit makes use of them when they’re exposed by the driver, and
falls back to the old insecure API when not.","Awesome, will review!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,1,https://github.com/glfw/glfw/pull/1693,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",True,"{'THUMBS_UP': ['https://github.com/unrelentingtech', 'https://github.com/rmader', 'https://github.com/DragonSWDev', 'https://github.com/benob', 'https://github.com/Faalagorn', 'https://github.com/ljrk0', 'https://github.com/ChrisLane', 'https://github.com/major-mayer', 'https://github.com/Thesola10', 'https://github.com/TheBrokenRail', 'https://github.com/Alvarito050506', 'https://github.com/hyarsan', 'https://github.com/vchernin', 'https://github.com/frilox042', 'https://github.com/AlynxZhou', 'https://github.com/Lgmrszd', 'https://github.com/Friz64', 'https://github.com/elmindreda'], 'HEART': ['https://github.com/benob', 'https://github.com/Thesola10', 'https://github.com/stacktracer', 'https://github.com/Alvarito050506', 'https://github.com/AlynxZhou', 'https://github.com/Lgmrszd', 'https://github.com/Friz64']}"
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,2,https://github.com/glfw/glfw/pull/1693#issuecomment-626251399,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Why the switch to focal?

libdecoration requires newer versions of some libraries and meson. Also, xenial is only supported for another year.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,3,https://github.com/glfw/glfw/pull/1693#issuecomment-631145986,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@elmindreda @linkmauve Is the client-side decoration support in this PR something you would be interested in? With this PR the Wayland support gets in much better shape as it allows proper handling of windows and removes remaining visual glitches during resizing.
The window and decoration visibility toggling support has been deactivated for now. They are always visible and cannot be hidden. Is run-time window or decoration hiding something that is used in practice?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,4,https://github.com/glfw/glfw/pull/1693#issuecomment-647848079,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",@elmindreda @linkmauve Any interest in proper Wayland client-side window decorations for GLFW?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,5,https://github.com/glfw/glfw/pull/1693#issuecomment-650654861,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","hey, nice work here :) I tried your branch of glfw with Minecraft.
It seems to have fixed the weird window size glitch that broke resizing as well, and the fullscreen switch crash :)
But looks like mouse input is currently broken :/ I can't get click anything within game - on master it's fine",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,6,https://github.com/glfw/glfw/pull/1693#issuecomment-650657500,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",also I noticed the cursor doesn't go back to normal after resize,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,7,https://github.com/glfw/glfw/pull/1693#issuecomment-650660592,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","I just finished debugging the cursor issue while you pushed the fix lol! I got the same fix, but what a pain it was to find it...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,8,https://github.com/glfw/glfw/pull/1693#issuecomment-650660704,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Cursor position seems to be incorrent though, maybe we need to offset the decoration size?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,9,https://github.com/glfw/glfw/pull/1693#issuecomment-650661269,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",The more I resize the window the more broken the cursor position is,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,10,https://github.com/glfw/glfw/pull/1693#issuecomment-650664205,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","well. as I try left top corner (0,0) and down right corner (width, height) it seems to match debugging pointer events, at least matches what game thinks the current width or height is. maybe the problem is with passing width/height on resize?
cursor pos on fullscreen is always fine",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,11,https://github.com/glfw/glfw/pull/1693#issuecomment-650673231,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","so, while I got no closer to finding a solution, I just spotted another bug: sometimes while game locks the pointer, the cursor may not disappear from screen",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,12,https://github.com/glfw/glfw/pull/1693#issuecomment-650683446,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Ok I FINALLY fixed the cursor being out of sync!
Needs call to         _glfwInputWindowSize(window, scaledWidth, scaledHeight); in resizeWindow!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,13,https://github.com/glfw/glfw/pull/1693#issuecomment-650775919,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Ok I FINALLY fixed the cursor being out of sync!
Needs call to  _glfwInputWindowSize(window, scaledWidth, scaledHeight); in resizeWindow!

Cool. Can you rebase (I force-pushed to enable the proxy_tag pointer comparison) and send a pull request to my branch?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,14,https://github.com/glfw/glfw/pull/1693#issuecomment-650798221,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","It's a one liner but I can if you wish ;)
any ideas on the pointer locking problem?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,15,https://github.com/glfw/glfw/pull/1693#issuecomment-650800508,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","It's a one liner but I can if you wish ;)
any ideas on the pointer locking problem?

Actually, I do not see what the problem is with the cursor position offset. The cursor example seems to report the correct positions.
Can you provide minimal source examples that replicate these two bugs and state what the expected and actual outcome is? Ideally, you could demonstrate these bugs with GLFW's built-in examples or tests.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,16,https://github.com/glfw/glfw/pull/1693#issuecomment-650802039,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Can you provide minimal source examples that replicate these two bugs and state what the expected and actual outcome is? Ideally, you could demonstrate these bugs with GLFW's built-in examples or tests.

You can see _glfwInputWindowSize being called in code for older decorations but nowhere in the new code...
Cursor positions are correct, but minecraft uses window size for calculating offsets what is where relative to the cursor.
So that's fixed by calling it during resizeWindow.
Regarding cursor locking problem, I am not sure on the exact repro, spamming cursor lock/unlock should trigger it.
Cursor just stays on the screen when it's locked. Most of the time.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,17,https://github.com/glfw/glfw/pull/1693#issuecomment-650803312,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","You can see _glfwInputWindowSize being called in code for older decorations but nowhere in the new code...

I saw this, but I did not get how this relates to the cursor position. The resizeWindow does not contain any references to window sizes, only to the old viewport decoration sizes. If, then this should be added in frame_configure, since _glfwInputWindowSize was previously called in xdgToplevelHandleConfigure.

Cursor positions are correct, but minecraft uses window size for calculating offsets what is where relative to the cursor.
So that's fixed by calling it during resizeWindow.

That sounds a bit weird. Why is it not requesting the cursor position via the API?
Since I cannot reproduce the issue, it would be better if you can submit a fix and make sure that the application behaves as expected.

Regarding cursor locking problem, I am not sure on the exact repro, spamming cursor lock/unlock should trigger it.
Cursor just stays on the screen when it's locked. Most of the time.

Can you describe what the problem is? Did this used to work with the old viewport decorations but not the new libdecoration?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,18,https://github.com/glfw/glfw/pull/1693#issuecomment-650803923,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","I saw this, but I did not get how this relates to the cursor position. The resizeWindow does not contain any references to window sizes, only to the old viewport decoration sizes. If, then this should be added in frame_configure, since _glfwInputWindowSize was previously called in xdgToplevelHandleConfigure.

Call it wherever you prefer, just make sure it's updated during resize...

That sounds a bit weird. Why is it not requesting the cursor position via the API?

As I said...Minecraft does math with both the cursor position [which is correct] and with window size [which is incorrect without fix] to know whether you are pointing your cursor at a button.

Can you describe what the problem is? Did this used to work with the old viewport decorations but not the new libdecoration?

I am not 100% sure as it was unplayable with master glfw...I'll try to check if that helps.
Cursor is locked correctly, relative positions are passed correctly, just the cursor stays in place on the screen.
Gnome Shell, Ubuntu 20.04",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,19,https://github.com/glfw/glfw/pull/1693#issuecomment-650804509,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","btw. I tried to take a screenshot but game is not visible on screenshot, that's how it looks....
interesting whether this is a glfw bug or mutter bug...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,20,https://github.com/glfw/glfw/pull/1693#issuecomment-650808733,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Call it wherever you prefer, just make sure it's updated during resize...

Well, it's not about the function names... it's about the correct place to call it to have the same sequence of requests sent to the compositor.
Anyhow, I added
_glfwInputWindowSize(window, width, height);
_glfwPlatformSetWindowSize(window, width, height);
_glfwInputWindowDamage(window);
to the frame_configure. Those seem to be the important bits from xdgToplevelHandleConfigure. I don't know if this solves the problem or if there is more that has to be ported from xdgToplevelHandleConfigure to frame_configure since I cannot reproduce the issue. Let me know if the current state solves the issue.

to know whether you are pointing your cursor at a button.

Well, this makes sense. The button position is, of course, irrelevant to the mouse cursor position. But both have to agree to detect if the cursor and button position match.

Cursor is locked correctly, relative positions are passed correctly, just the cursor stays in place on the screen.

I assume for now that this is unrelated to the decoration code. But since we have no comparison, we won't know before digging into the code.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,21,https://github.com/glfw/glfw/pull/1693#issuecomment-651045901,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Well, it's not about the function names... it's about the correct place to call it to have the same sequence of requests sent to the compositor.

I said wherever not whatever :D

to the frame_configure. Those seem to be the important bits from xdgToplevelHandleConfigure. I don't know if this solves the problem or if there is more that has to be ported from xdgToplevelHandleConfigure to frame_configure since I cannot reproduce the issue. Let me know if the current state solves the issue.

I'll try to check your clean branch later.

I assume for now that this is unrelated to the decoration code. But since we have no comparison, we won't know before digging into the code.

It may be or not, but it would be good to fix it together ^^",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,22,https://github.com/glfw/glfw/pull/1693#issuecomment-651723915,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","tried clean. window size fix is working, cursor locking is not - cursor is visible :/ let's work together on a fix 🤔",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,23,https://github.com/glfw/glfw/pull/1693#issuecomment-651736999,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Well according to docs and other examples, the api call to hide the cursor is fine - null surface.
I also checked it's not being ""raced"" with another call that would override the cursor.
I have no idea why it's not working.
I also tried with weston started in gnome shell, but it's even buggier there and pointer locking doesn't seem to work. I might try with clean weston to see the results, but it probably wouldn't hide the cursor anyway.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,24,https://github.com/glfw/glfw/pull/1693#issuecomment-651737217,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","tried clean. window size fix is working, cursor locking is not - cursor is visible :/ let's work together on a fix thinking

If you can provide a minimal example that reproduces this, I might look into this.
However, I haven't received much feedback on the decoration work yet. I don't want to spend too much time on this if it isn't going to be merged upstream.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,25,https://github.com/glfw/glfw/pull/1693#issuecomment-651740412,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","However, I haven't received much feedback on the decoration work yet. I don't want to spend too much time on this if it isn't going to be merged upstream.

Current implementation on master is unusable anyway so I would merge this to move forward :)
From what I see, at least the ""right click menu"" on window frame is standarized and is handled by mutter. even with libdecoration it works.
It would be good to move forward with this in future and render 1:1 gnome style window frame, but so far I have no idea what would need to be done.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,26,https://github.com/glfw/glfw/pull/1693#issuecomment-651740918,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","If you can provide a minimal example that reproduces this, I might look into this.

If you would be interested in running Minecraft with some tooling that overrides libraries, I might help you set it up - it might require a game license though to run it...
Otherwise I could look into writing a minimal reproducer later this week, but it could be hard.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,27,https://github.com/glfw/glfw/pull/1693#issuecomment-651745888,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","If you would be interested in running Minecraft with some tooling that overrides libraries, I might help you set it up - it might require a game license though to run it...
Otherwise I could look into writing a minimal reproducer later this week, but it could be hard.

I don't have a license and I am not really interested in getting into minecraft :-) A minimal example would definitely help to constrain the problem.

It would be good to move forward with this in future and render 1:1 gnome style window frame, but so far I have no idea what would need to be done.

If all you want is the GTK decoration style, it would probably be better to just use GTK.
Using GTK decorations with libdecoration requires a change in the API https://gitlab.gnome.org/jadahl/libdecoration/-/merge_requests/8 which might put off other projects that just want decorations without handing over the dispatching to libdecoration.
Otherwise, there is no way to get GTK deocrations. I asked for separating the GTK decorations into a dedicated library but this is not going to happen as the code is too heavily depending on GTK and its render engine.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,28,https://github.com/glfw/glfw/pull/1693#issuecomment-651748382,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","I tried with pure weston and the cursor stays there as well....I am really dedicated to fixing this, hell of a challenge ;)
Also on weston when I maximize the window there are artifacts all over the game screen....
Not sure if this is some glfw bug that results in improper buffer sizes or something...
Sometimes on weston it would crash with xdg_wm_base@24: error 4: xdg_surface buffer does not match the configured state

sounds like something to do with new decorations, wouldn't you think?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,29,https://github.com/glfw/glfw/pull/1693#issuecomment-651803140,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","ok I fixed it....needs to destroy old cursor surface as well.
I have no idea why that's needed...some other libraries do this as well...
    wl_pointer_set_cursor(_glfw.wl.pointer, _glfw.wl.serial, NULL, 0, 0);
    wl_surface_attach(_glfw.wl.cursorSurface, NULL, 0, 0);
    wl_surface_commit(_glfw.wl.cursorSurface);",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,30,https://github.com/glfw/glfw/pull/1693#issuecomment-651807230,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","ok I fixed it....needs to destroy old cursor surface as well.

Can you send a PR to my branch or directly to GLFW?

Sometimes on weston it would crash with xdg_wm_base@24: error 4: xdg_surface buffer does not match the configured state

I will look into the other issue later. Would be good to have something reproducible for me to test.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,31,https://github.com/glfw/glfw/pull/1693#issuecomment-651817763,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","repro:
Run pure weston session, run gears example and maximize. Artifacts all over the screen.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,32,https://github.com/glfw/glfw/pull/1693#issuecomment-651834056,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",I will push a branch later with my fixes. Right now my next priority to fix is the opaque mode not fully working...gnome thinks it's transparent and breaks screenshots...,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,33,https://github.com/glfw/glfw/pull/1693#issuecomment-651914941,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","I was also able to finally fix the screenshot problem issue...what a debugging hell it was...
It's choosing wrong EGL config. It should choose one without alpha bits and then it works. I'll try to find a proper place to add the fix...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,34,https://github.com/glfw/glfw/pull/1693#issuecomment-652087073,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Run pure weston session, run gears example and maximize. Artifacts all over the screen.

I cannot reproduce this, either nested or on a VT. I see decoration artefacts when resizing, but those only appear on Weston.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,35,https://github.com/glfw/glfw/pull/1693#issuecomment-652318640,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@christianrauch why did you remove surface commit from setSurfaceOpaque? I can't see any difference in resize performance, but it looked like a bug to me",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,36,https://github.com/glfw/glfw/pull/1693#issuecomment-652319203,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","did you change something specific yesterday? hard to know when you force push every time..
anyway feel free to review #1725",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,37,https://github.com/glfw/glfw/pull/1693#issuecomment-652360799,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","why did you remove surface commit from setSurfaceOpaque? I can't see any difference in resize performance, but it looked like a bug to me

It is not required and introduced resize glitches. If you want an opaque surface, request an XRGB buffer or an EGL configuration without alpha channel.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,38,https://github.com/glfw/glfw/pull/1693#issuecomment-652362630,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","It is not required and introduced resize glitches. If you want an opaque surface, request an XRGB buffer or an EGL configuration without alpha channel.

What compositor are you testing with related to these glitches?
It's a hint for the compositor so it doesn't need to render other windows underneath.
If you look at my branch, that's what I did as well - changed EGL init to use XRGB when transparency is not requested.
But I really doubt mutter would just look at it being XRGB buffer and treat it the same way as opaque ""hint"" and properly optimize...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,39,https://github.com/glfw/glfw/pull/1693#issuecomment-652365740,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","What compositor are you testing with related to these glitches?

Mutter

It's a hint for the compositor so it doesn't need to render other windows underneath.
If you look at my branch, that's what I did as well - changed EGL init to use XRGB when transparency is not requested.
But I really doubt mutter would just look at it being XRGB buffer and treat it the same way as opaque ""hint"" and properly optimize...

Semantically, it has the same meaning. It just more efficient as you have fewer function calls and the buffer ""automatically"" has the correct opaque size. Overwise you have to make sure that the opaque region does not overlap with other surfaces which will create glitches, e.g. with the decoration shadows.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,40,https://github.com/glfw/glfw/pull/1693#issuecomment-652366742,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",@christianrauch if only we could prove that mutter treats XRGB buffers and opaque hint as equals and it won't hit performance...because I've never seen any app or framework skip calls to opaque...,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,41,https://github.com/glfw/glfw/pull/1693#issuecomment-652385479,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","why did you remove surface commit from setSurfaceOpaque? I can't see any difference in resize performance, but it looked like a bug to me

I just saw that I gave an unrelated answer. Yes, I removed the wl_surface_commit because it caused glitches when the opaque region is committed to early. It has to be synchronized with the other calls. You should only commit once, once you have the complete state prepared. Premature commits will create glitches.
Unrelated to this, I think the setOpaqueRegion is redundant if you have an XRGB buffer or EGL configuration without an alpha channel. wl_surface_set_opaque_region only makes sense if subareas of your transparent surface can be considered opaque.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/jadahl,42,https://github.com/glfw/glfw/pull/1693#issuecomment-652394005,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","FWIW, GLFW setting an opaque region without explicitly asking for a XRGB buffer first is incorrect, unless explicitly told by the application what part of the buffer is opaque.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/ninja-,43,https://github.com/glfw/glfw/pull/1693#issuecomment-652440631,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@jadahl right, that's what I adressed in 2227df8 I think. Maybe we could skip setOpaque then completly",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/rmader,44,https://github.com/glfw/glfw/pull/1693#issuecomment-706307335,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","AFAIK the XRGB handling is somewhat broken in EGL, i.e. on Wayland you'll still get an ARGB buffer and on X11 a XRGB one. So you'll likely have to set the opaque region anyway - you can check on Mutter 3.38.1 by running alt+f2 -> lg -> Meta.add_debug_paint_flag(Meta.DebugPaintFlag.OPAQUE_REGION)  (it has https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1463 which fixes the detection for XRGB buffers)
See:
mpv-player/mpv#8125
https://gitlab.freedesktop.org/mesa/mesa/-/issues/149
https://bugs.freedesktop.org/show_bug.cgi?id=67676#c1
p.s.: the above Mutter MR also means that the performance there should be pretty much equal now between setting the opaque region and using XRGB. Before that fix, XRGB would actually be slower, as Mutter didn't use the opaque pass to paint it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/rmader,45,https://github.com/glfw/glfw/pull/1693#issuecomment-706313557,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Oh and just in case you don't know: when resizing, the subsurfaces should be set to sync (wl_subsurface_set_sync), so they can be commited while waiting for the parent surface to commit. If that's feasible here somehow.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/jwinarske,46,https://github.com/glfw/glfw/pull/1693#issuecomment-712165318,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","I would prefer decorations to be a build option, and only pull in build dependencies if used.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,47,https://github.com/glfw/glfw/pull/1693#issuecomment-712179592,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@jwinarske Do you mean ""decorations"" as a general feature to be a build-option or specifically the library that implements decorations? ""decorations"" as feature have never been a build option, neither on X11 nor on Wayland before. ""libdecoration"" is a build option (GLFW_USE_LIBDECORATION) that will only pull dependencies if activated.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/jwinarske,48,https://github.com/glfw/glfw/pull/1693#issuecomment-712215179,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@christianrauch I'm just concerned about minimizing build deps.  It might also be better to patch the lib with your own cmake file than pull in meson.  Wayland is a bit of a serious army knife, and one size doesn't fit all; hence the concern.  I do like the idea of enabling/disabling things based on presence of protocol, as you have in your other PR.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,49,https://github.com/glfw/glfw/pull/1693#issuecomment-712429388,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Overall, I think GLFW needs working client-side decorations on Wayland. The current implementation of client-side decorations in GLFW is unusable.

I'm just concerned about minimizing build deps.

That makes sense, of course. Most of libdecoration's library and protocol dependencies overlap with GLFW. cairo is the only required dependency for drawing the decorations and rendering fonts. Even if the drawing would be replaced by standard OpenGL functions, you probably need a library for text rendering. There is an optional dependency on dbus to fetch cursor settings, which I highly recommend to have the cursor match the desktop settings.

Wayland is a bit of a serious army knife, and one size doesn't fit all; hence the concern.

I am not entirely sure what you mean by his. The core protocol does not have much functionality. The protocol extensions, such as xdg-shell and xdg-decoration, have a very specific scope.

I do like the idea of enabling/disabling things based on presence of protocol, as you have in your other PR.

libdecoration uses the same Wayland protocols than GLFW. Using xdg-decoration allows to disable client-side decorations when server-side decorations are supported. However, you still need the functionality of drawing decorations when this is not supported.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/jwinarske,50,https://github.com/glfw/glfw/pull/1693#issuecomment-717538159,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","That makes sense, of course. Most of libdecoration's library and protocol dependencies overlap with GLFW. cairo is the only required dependency for drawing the decorations and rendering fonts. Even if the drawing would be replaced by standard OpenGL functions, you probably need a library for text rendering. There is an optional dependency on dbus to fetch cursor settings, which I highly recommend to have the cursor match the desktop settings.

My uses cases are 99% embedded without window decorations.


Wayland is a bit of a serious army knife, and one size doesn't fit all; hence the concern.

I am not entirely sure what you mean by his. The core protocol does not have much functionality. The protocol extensions, such as xdg-shell and xdg-decoration, have a very specific scope.

Yes although not everyone has the same end goal.  It's relative to the solution.  Not everyone needs/wants Window decoration support.  I'm just looking for a way to turn it off when building.


libdecoration uses the same Wayland protocols than GLFW. Using xdg-decoration allows to disable client-side decorations >when server-side decorations are supported. However, you still need the functionality of drawing decorations when this is not >supported.


Again, I'm just looking to see the feature as a build option.  It would be great to have decorations for my desktop builds :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/DragonSWDev,51,https://github.com/glfw/glfw/pull/1693#issuecomment-722561619,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@christianrauch Your GLFW fork with libdecoration support causes massive VRAM leak and crashes GNOME Shell for me. My code is working because vanilla GLFW (X11 and Wayland) is working without any problems. I've compiled your version and forced loading it with ""LD_PRELOAD"". When application window shows up then whole desktop becomes unresposive. I can only move cursor but I can't click anything or use keyboard. After a while whole GNOME Shell crashes and I'm back on the login screen.
When I tried to figure out what happend in log I saw this line:
gnome-shell[2894]: amdgpu: Not enough memory for command submission.
I tried to run application again with radeontop running on second window. Right before interface hang I can see VRAM usage up to about 95%. Then it again crashed. I was able to run it once without crashing but desktop started to lag which ended after I closed application.
I don't know what is the cause of this problem (some bug in libdecoration, GLFW, GNOME Shell or GPU driver) and how to find it. If you need more informations please let me know and I'll try to provide them. About hardware and operating system I'm using Gigabyte Radeon RX570 on Fedora 33 with GNOME 3.38.1, kernel 5.8.17 and Mesa 20.2.1.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,52,https://github.com/glfw/glfw/pull/1693#issuecomment-722570508,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@DragonSWDev Is this with any of the standard GLFW examples? Does this also happen with the libdecoration ""egl"" example?
It would be useful to have an example with reproducible steps to figure out if this is related to libdecoration or other changes I made to GLFW.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/DragonSWDev,53,https://github.com/glfw/glfw/pull/1693#issuecomment-722573276,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@christianrauch No, it happened with my own OpenGL code. For the clarity I'll try with GLFW examples and I'll check libdecoration examples.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/DragonSWDev,54,https://github.com/glfw/glfw/pull/1693#issuecomment-722591235,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@christianrauch Ok, I made tests with examples. Before I'll describe GLFW examples I want to let you know that both libdecoration examples are working without any issues (libdecor-demo and libdecor-egl). As for GLFW examples - some crashes with segmentation fault and log I'll provide below and some are running without GNOME crash but their window is transparent and I can't move it or click buttons on decoration. Here is the list of examples behaviour:
boing - crash
gears - crash
heightmap - unresponsive
offscreen - opens and closes instantly even on vanilla GLFW
particles - unresponsive
sharing - crash
simple - unresponsive
splitview - unresponsive
wave - unresponsive
Crashing examples aside from segmentation fault error are giving this output:
amdgpu: Failed to allocate a buffer:
amdgpu:    size      : 512586494132224 bytes
amdgpu:    alignment : 131072 bytes
amdgpu:    domains   : 4
amdgpu:    flags   : 6
amdgpu: Failed to allocate a buffer:
amdgpu:    size      : 512586494132224 bytes
amdgpu:    alignment : 131072 bytes
amdgpu:    domains   : 4
amdgpu:    flags   : 6

Bytes values are the same during every execute. They only differ between examples (this particular log is from boing example).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,55,https://github.com/glfw/glfw/pull/1693#issuecomment-722721045,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","None of these GLFW examples crash or become unresponsive on my setup (Ubuntu 20.04, Intel iris driver). I see glitches (on master and with this PR) with transparent surfaces in examples heightmap, splitview and wave.
Do you only see the VRAM leaking with this PR and with GLFW_USE_LIBDECORATION set ON or OFF? Since I do not see these leaks with the Intel driver, I assume that this is related to the AMD driver. I would suggest opening an issue for this in the mesa repo.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/DragonSWDev,56,https://github.com/glfw/glfw/pull/1693#issuecomment-722738537,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",@christianrauch I made another build and now all examples are working (with libdecoration support) without any problems (excluding glitches you also noticed). It's no more crashing or becoming unresponsive. I agree it looks like driver bug (application shouldn't be able to crash driver) but before I'll report it to Mesa repo I would like to have more informations about possible cause of this bug. Can you tell me what changes you did with your fork? It looks like those changes fixed problem at least for me. My own applications also started to work with this build.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,57,https://github.com/glfw/glfw/pull/1693#issuecomment-723197439,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@DragonSWDev I fixed an issue that was reported by the AddressSanitizer. I added the AddressSanitizer in this PR to check for any memory issues. In debug builds, this should be reported issues on the stdout and quit the process, rather than crashing the application without any message.
I forgot to check if the payload provided in the callbacks is coming from the application/GLFW surface and not the libdecoration subsurfaces. This is fixed now, but I also don't see how this should leak VRAM.
If you want to undo this change to test if it causes your leaks, remove
if (wl_proxy_get_tag((struct wl_proxy *) output) != &proxy_tag)
    return;
from the surfaceHandleEnter and surfaceHandleLeave in wl_window.c.",True,"{'HEART': ['https://github.com/ninja-', 'https://github.com/DragonSWDev']}"
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/rmader,58,https://github.com/glfw/glfw/pull/1693#issuecomment-723202653,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","FTR., I spoke with other Gnome devs about the fact that clients apparently can starve Mutter concerning vram, making it crash. It looks like there are plans to allow vram resource management via cgroups, making sure Mutter always gets what it needs to keep functioning.
Clients should never be able to crash a session.",True,"{'HEART': ['https://github.com/ninja-', 'https://github.com/DragonSWDev', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/DragonSWDev,59,https://github.com/glfw/glfw/pull/1693#issuecomment-723337560,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@christianrauch @rmader pointed to the Mutter as cause. I blamed driver but actually if it would be driver issue then probably it would end in whole system crash, not only desktop. Looks like it needs to be fixed on GNOME side. I can only confirm that your changes make GLFW and libdecoration working. I hope it will land soon, it makes GLFW Wayland experience much better on GNOME. Yeah, it's not closely integrated with desktop theme like on compositors with xdg-decorations support but it's much better to have custom decorations than no full decorations at all. I had issues with moving and resizing with vanilla GLFW decorations and with libdecorations they are gone and everything works perfectly. Before this will land officially I'm going to use my custom build in my projects. Good job!
@rmader Thank you for investigating this. Good to know it's known issue and there are plans to fix it. I agree, clients should never make compositor crash. It should be fixed on GNOME side.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/rmader,60,https://github.com/glfw/glfw/pull/1693#issuecomment-731763162,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@DragonSWDev: the leak would still make the application crash so we should make sure it doesn't happen. The fact that it can also crash the system compositor just makes it much worse than it should be :)
FTR: the fix I was talking about would need to be in the kernel and would benefit other DEs as well, most notably KDE as it also works on making use of cgroups.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/DiegoMagdaleno,61,https://github.com/glfw/glfw/pull/1693#issuecomment-794141130,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",is this still an active work in progress?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,62,https://github.com/glfw/glfw/pull/1693#issuecomment-796320612,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","is this still an active work in progress?

Do you mean the decoration library or this very PR?
The library is mostly feature-complete. I haven't received any feedback on this PR from @elmindreda, so I am just updating the API from time to time to make it compile with the upstream.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,63,https://github.com/glfw/glfw/pull/1693#issuecomment-881756206,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",@elmindreda @linkmauve Can someone approve the CI workflow?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/DragonSWDev,64,https://github.com/glfw/glfw/pull/1693#issuecomment-890382225,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",It is worth mentioning that SDL merged libdecor support and libdecor landed in Fedora 34 repository. More distributions will probably follow this as well.,True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/Cons-Cat', 'https://github.com/gracicot', 'https://github.com/SteveGremory', 'https://github.com/Alvarito050506']}"
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/vchernin,65,https://github.com/glfw/glfw/pull/1693#issuecomment-991852655,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@christianrauch me and @yavko both run into blurriness when running this patch at HiDPI on GNOME. It doesn't seem to exist without this patch.
Here's a diff (click Swipe at the bottom and zoom in with your browser, the one on the right is with this patch). I took it a while ago but the issue seems to still exist, with this patch Minecraft is slightly, but noticeably blurrier than without this patch.
Haven't yet tried running an SDL app or something to confirm whether it's a general libdecor bug, I suppose that's a good next step if there's no ideas. FYI the patches stored in this helpful repo were used. Note an older version of glfw was used, since this patch hasn't been rebased in a while.
Regardless thanks for working on this, hopefully at some point this does get merged.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/christianrauch,66,https://github.com/glfw/glfw/pull/1693#issuecomment-991946615,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","I stopped working on this since it's not clear if this gets merged eventually. If there is interest by the upstream developers (@elmindreda), I would probably look into this again in more detail.
libdecor supports HiDPI. That means that the UI elements/surfaces are rendered at the scale that is set for the display. Hence the decoration UI elements should not appear blurry. However, for the ""content"" surface, the client is responsible for managing the surface/buffer scale depending on which display the surface is shown.
Check out the example. It should render the checker pattern at the correct size without upscaling.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/vchernin,67,https://github.com/glfw/glfw/pull/1693#issuecomment-991962085,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","A couple perhaps notable observations:
Initially when launching the game the decoration elements are blurry. But the mouse cursor is the correct size for both the decoration and ""content"" surface.
After the loading bar appears, when hovering over the ""content"" surface (i.e. the game itself), the cursor appears larger than normal. When hovering over the libdecor UI elements, the cursor appears smaller (the correct size compared to GTK apps and hovering over nothing).

  
    
    

    cursor-inconsistent-size-demo-libdecor.mp4
    
  

  

  


Interestingly at about 11 seconds the cursor is the correct size everywhere, but I think that might be since I hovered over the window buttons, and temporarily the cursor thought it was on a different surface than it was actually on (might be an incorrect explanation).
I can't reproduce any of this with the libdecor quick start from the readme on this same setup.
Gnome shell/mutter 41.1 on Fedora 35.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/yavko,68,https://github.com/glfw/glfw/pull/1693#issuecomment-991965877,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","A couple perhaps notable observations:
Initially when launching the game the decoration elements are blurry. But the mouse cursor is the correct size for both the decoration and ""content"" surface.
After the loading bar appears, when hovering over the ""content"" surface (i.e. the game itself), the cursor appears larger than normal. When hovering over the libdecor UI elements, the cursor appears smaller (the correct size compared to GTK apps and hovering over nothing).
cursor-inconsistent-size-demo-libdecor.mp4
Interestingly at about 11 seconds the cursor is the correct size everywhere, but I think that might be since I hovered over the window buttons, and temporarily the cursor thought it was on a different surface than it was actually on (might be an incorrect explanation).
I can't reproduce any of this with the libdecor quick start from the readme on this same setup.
Gnome shell/mutter 41.1 on Fedora 35.

for me the mouse cursor gets way smaller and on HIDPI the ui is blurry",True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/jgcodes2020,69,https://github.com/glfw/glfw/pull/1693#issuecomment-1114040877,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .",is this PR going to be placed in the Wayland backend?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/elmindreda,70,https://github.com/glfw/glfw/pull/1693#issuecomment-1115418660,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","Thank you so much for this PR! I definitely want to merge this for 3.4. The current client-side decorations are unusable and libdecor seems like the best available solution, especially now that it has proper packages.
The only major change I'd suggest is that the choice between libdecor and XDG decoration be made at run-time, with XDG decoration used where available and libdecor dynamically loaded when needed. That said, these bits of GLFW have been changing a lot lately and might again soon, so this might be a bad time to rebase. Also note that rebase status won't prevent this from being accepted.
Thank you for your patience! I'm still in the process of taking on more maintenance of the Wayland code and currently can't give a proper code review, but will as soon as I'm able.",True,{'ROCKET': ['https://github.com/gracicot']}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/jwinarske,71,https://github.com/glfw/glfw/pull/1693#issuecomment-1115480184,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@elmindreda My only request with this PR is that is can be disabled at build, opposed to runtime detect.  The use cases involve embedded Linux where one most likely does not want Wayland window decorations.",True,{'THUMBS_UP': ['https://github.com/vially']}
glfw/glfw,https://github.com/glfw/glfw,1693,2020-05-09T20:21:29Z,,2022-05-03T10:29:32Z,OPEN,False,337,56,6,https://github.com/christianrauch,proper decorations with title and window buttons,8,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1693,https://github.com/elmindreda,72,https://github.com/glfw/glfw/pull/1693#issuecomment-1115950376,"This adds libdecor for proper client-side window decoration support:

(cc @jadahl)
This PR currently checks out a development branch that contains some PRs that haven't been merged upstream yet.
For now, I am mainly interested to get some feedback on the decoration requirements in GLFW and see if libdecor fits your needs. Once the remaining PRs have been merged upstream, I would appreciate if GLFW could gain proper decoration support by merging this.
I also included some minor changes to remove glitches during resizing.
Fixes #1639 .","@jwinarske The libdecor API is small and the bits used by GLFW could be declared in an internal header, as is already done with some other APIs. That way there's no external compile-time dependency even when support is enabled.",True,"{'THUMBS_UP': ['https://github.com/jwinarske', 'https://github.com/gracicot', 'https://github.com/DragonSWDev']}"
glfw/glfw,https://github.com/glfw/glfw,1696,2020-05-18T22:57:48Z,,2020-08-25T03:39:33Z,OPEN,False,387,39,20,https://github.com/elmindreda,Add keyboard layout callback and name query,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1696,https://github.com/elmindreda,1,https://github.com/glfw/glfw/pull/1696,"This adds a global callback for when the keyboard layout changes and a query for the localized, human-readable name of the current layout.
On macOS it also triggers when the mode changes for an IME, for example switching between hiragana and katakana, while on other platforms they are both referred to as Japanese or similar. I don't know whether or how to fix that inconsistency.
On Wayland the name query returns data cached from received events but on other platforms it queries the system directly.
This PR is intended to fix #1201.
This functionality may be affected by IME support work before 3.4 release.","This adds a global callback for when the keyboard layout changes and a query for the localized, human-readable name of the current layout.
On macOS it also triggers when the mode changes for an IME, for example switching between hiragana and katakana, while on other platforms they are both referred to as Japanese or similar. I don't know whether or how to fix that inconsistency.
On Wayland the name query returns data cached from received events but on other platforms it queries the system directly.
This PR is intended to fix #1201.
This functionality may be affected by IME support work before 3.4 release.",True,"{'THUMBS_UP': ['https://github.com/norcalli', 'https://github.com/gracicot', 'https://github.com/TheMrMilchmann', 'https://github.com/Younes-L']}"
glfw/glfw,https://github.com/glfw/glfw,1696,2020-05-18T22:57:48Z,,2020-08-25T03:39:33Z,OPEN,False,387,39,20,https://github.com/elmindreda,Add keyboard layout callback and name query,1,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1696,https://github.com/norcalli,2,https://github.com/glfw/glfw/pull/1696#issuecomment-679531037,"This adds a global callback for when the keyboard layout changes and a query for the localized, human-readable name of the current layout.
On macOS it also triggers when the mode changes for an IME, for example switching between hiragana and katakana, while on other platforms they are both referred to as Japanese or similar. I don't know whether or how to fix that inconsistency.
On Wayland the name query returns data cached from received events but on other platforms it queries the system directly.
This PR is intended to fix #1201.
This functionality may be affected by IME support work before 3.4 release.",Does the IME inconsistency on other platforms mean that it won't get notified at all on a change like hiragana/katakana or that the names will just appear to be the same?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1698,2020-05-22T13:38:28Z,2020-05-27T21:21:35Z,2020-05-27T23:18:58Z,CLOSED,False,2,0,1,https://github.com/tombsar,Add statement to docs for glfwTerminate,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1698,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/1698,"At the moment it is safe to call glfwTerminate even if the library is not currently initialized (it returns instantly with no side effects), but this is not mentioned in the documentation. Unless you plan to change this behaviour in future (and I don't think you should), it would be great to make this a promise so that users don't need to add their own redundant conditional.","At the moment it is safe to call glfwTerminate even if the library is not currently initialized (it returns instantly with no side effects), but this is not mentioned in the documentation. Unless you plan to change this behaviour in future (and I don't think you should), it would be great to make this a promise so that users don't need to add their own redundant conditional.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1698,2020-05-22T13:38:28Z,2020-05-27T21:21:35Z,2020-05-27T23:18:58Z,CLOSED,False,2,0,1,https://github.com/tombsar,Add statement to docs for glfwTerminate,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1698,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1698#issuecomment-634949970,"At the moment it is safe to call glfwTerminate even if the library is not currently initialized (it returns instantly with no side effects), but this is not mentioned in the documentation. Unless you plan to change this behaviour in future (and I don't think you should), it would be great to make this a promise so that users don't need to add their own redundant conditional.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1700,2020-05-25T05:30:45Z,2020-05-26T19:43:09Z,2020-05-26T19:43:18Z,CLOSED,False,12,14,2,https://github.com/ben1,Fix /w4 compile warnings,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1700,https://github.com/ben1,1,https://github.com/glfw/glfw/pull/1700,"These changes simply avoid re-declaring variables that were already declared. In one case the type of the variable was different too, so the name of the variable was also changed to reflect its usage.","These changes simply avoid re-declaring variables that were already declared. In one case the type of the variable was different too, so the name of the variable was also changed to reflect its usage.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1700,2020-05-25T05:30:45Z,2020-05-26T19:43:09Z,2020-05-26T19:43:18Z,CLOSED,False,12,14,2,https://github.com/ben1,Fix /w4 compile warnings,2,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1700,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1700#issuecomment-634237893,"These changes simply avoid re-declaring variables that were already declared. In one case the type of the variable was different too, so the name of the variable was also changed to reflect its usage.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1701,2020-05-25T13:11:05Z,2020-05-26T18:19:16Z,2020-05-26T18:52:08Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1701,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1701,"The atomCount variable has the type unsigned long, so the for loop iterating over it should use the same type.
Closes #1701.","The atomCount variable has the type unsigned long, so the for loop iterating over it should use the same type.
Closes #1701.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1701,2020-05-25T13:11:05Z,2020-05-26T18:19:16Z,2020-05-26T18:52:08Z,MERGED,True,1,1,1,https://github.com/Luflosi,Use the correct type in a for loop,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1701,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1701#issuecomment-634194046,"The atomCount variable has the type unsigned long, so the for loop iterating over it should use the same type.
Closes #1701.",Thank you!,True,{'HEART': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1702,2020-05-25T14:02:41Z,2020-05-25T14:05:50Z,2020-05-25T21:43:35Z,MERGED,True,3,3,1,https://github.com/Luflosi,Replace %m conversion specifier with %s and strerror(),1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1702,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1702,"When compiling with -Wall and -pedantic-errors, gcc complains with
warning: ISO C does not support the '%m' gnu_printf format [-Wformat=]

because the %m conversion specifier is a GNU extension.
Closes #1702.
I'm not sure if this is actually a problem for most people. This was a problem for kitty but since it has its own fork of GLFW, it isn't a big deal.","When compiling with -Wall and -pedantic-errors, gcc complains with
warning: ISO C does not support the '%m' gnu_printf format [-Wformat=]

because the %m conversion specifier is a GNU extension.
Closes #1702.
I'm not sure if this is actually a problem for most people. This was a problem for kitty but since it has its own fork of GLFW, it isn't a big deal.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1702,2020-05-25T14:02:41Z,2020-05-25T14:05:50Z,2020-05-25T21:43:35Z,MERGED,True,3,3,1,https://github.com/Luflosi,Replace %m conversion specifier with %s and strerror(),1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1702,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1702#issuecomment-633589249,"When compiling with -Wall and -pedantic-errors, gcc complains with
warning: ISO C does not support the '%m' gnu_printf format [-Wformat=]

because the %m conversion specifier is a GNU extension.
Closes #1702.
I'm not sure if this is actually a problem for most people. This was a problem for kitty but since it has its own fork of GLFW, it isn't a big deal.","Wow, that was fast!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1702,2020-05-25T14:02:41Z,2020-05-25T14:05:50Z,2020-05-25T21:43:35Z,MERGED,True,3,3,1,https://github.com/Luflosi,Replace %m conversion specifier with %s and strerror(),1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1702,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1702#issuecomment-633593687,"When compiling with -Wall and -pedantic-errors, gcc complains with
warning: ISO C does not support the '%m' gnu_printf format [-Wformat=]

because the %m conversion specifier is a GNU extension.
Closes #1702.
I'm not sure if this is actually a problem for most people. This was a problem for kitty but since it has its own fork of GLFW, it isn't a big deal.","Well sure, it was an easy and uncontroversial change to review. :)",True,{'THUMBS_UP': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1703,2020-05-25T16:35:20Z,2020-05-28T18:53:48Z,2021-10-27T18:30:54Z,CLOSED,False,1,1,1,https://github.com/Luflosi,Use __typeof__() instead of void*,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1703,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1703,"Preserve the real type of a pointer instead of casting to void*.
Closes #1703.
Can __typeof__() be used on all supported platforms?","Preserve the real type of a pointer instead of casting to void*.
Closes #1703.
Can __typeof__() be used on all supported platforms?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1703,2020-05-25T16:35:20Z,2020-05-28T18:53:48Z,2021-10-27T18:30:54Z,CLOSED,False,1,1,1,https://github.com/Luflosi,Use __typeof__() instead of void*,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1703,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1703#issuecomment-633652058,"Preserve the real type of a pointer instead of casting to void*.
Closes #1703.
Can __typeof__() be used on all supported platforms?",Apparently it's not supported everywhere. Is there a way to achieve the same thing that works on all platforms?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1703,2020-05-25T16:35:20Z,2020-05-28T18:53:48Z,2021-10-27T18:30:54Z,CLOSED,False,1,1,1,https://github.com/Luflosi,Use __typeof__() instead of void*,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1703,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1703#issuecomment-633723848,"Preserve the real type of a pointer instead of casting to void*.
Closes #1703.
Can __typeof__() be used on all supported platforms?",Not that I know of. Is this intended to fix the issue of casts between function and non-function pointers?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1703,2020-05-25T16:35:20Z,2020-05-28T18:53:48Z,2021-10-27T18:30:54Z,CLOSED,False,1,1,1,https://github.com/Luflosi,Use __typeof__() instead of void*,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1703,https://github.com/Luflosi,4,https://github.com/glfw/glfw/pull/1703#issuecomment-635532566,"Preserve the real type of a pointer instead of casting to void*.
Closes #1703.
Can __typeof__() be used on all supported platforms?","This caused warnings in kitty:
glfw/input.c:1019:5: error: assigning to 'void *' from 'GLFWkeyboardfun' (aka
      'void (*)(struct GLFWwindow *, struct GLFWkeyevent *)') converts between
      void pointer and function pointer [-Werror,-Wpedantic]
    _GLFW_SWAP_POINTERS(window->callbacks.keyboard, cbfun);
    ^                   ~~~~~~~~~~~~~~~~~~~~~~~~~~
glfw/internal.h:233:11: note: expanded from macro '_GLFW_SWAP_POINTERS'
        t = x;                    \
          ^ ~

But since there seems to be no good way to fix this on all platforms, I'll close this PR.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1703,2020-05-25T16:35:20Z,2020-05-28T18:53:48Z,2021-10-27T18:30:54Z,CLOSED,False,1,1,1,https://github.com/Luflosi,Use __typeof__() instead of void*,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1703,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1703#issuecomment-636905380,"Preserve the real type of a pointer instead of casting to void*.
Closes #1703.
Can __typeof__() be used on all supported platforms?",We could remove the macro altogether for one extra line per setter function. I would accept a PR that did that.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1703,2020-05-25T16:35:20Z,2020-05-28T18:53:48Z,2021-10-27T18:30:54Z,CLOSED,False,1,1,1,https://github.com/Luflosi,Use __typeof__() instead of void*,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1703,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1703#issuecomment-953200714,"Preserve the real type of a pointer instead of casting to void*.
Closes #1703.
Can __typeof__() be used on all supported platforms?",Function pointer swaps should be safe now with the somewhat more clunky ee6ff93. Thank you!,True,{'THUMBS_UP': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1708,2020-06-02T15:54:36Z,2020-06-02T16:20:45Z,2020-06-02T16:21:02Z,CLOSED,False,7,7,1,https://github.com/tombsar,Reorder platform fields in mappings.h.in,1,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1708,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/1708,"The upstream SDL_GameControllerDB README (https://github.com/gabomdq/SDL_GameControllerDB) has a convention that the platform entry should always be at the end of the mapping string. Would it make sense to follow that with glfw's own mappings?
I haven't regenerated mappings.h, but I could do that and add to this PR if requested.","The upstream SDL_GameControllerDB README (https://github.com/gabomdq/SDL_GameControllerDB) has a convention that the platform entry should always be at the end of the mapping string. Would it make sense to follow that with glfw's own mappings?
I haven't regenerated mappings.h, but I could do that and add to this PR if requested.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1708,2020-06-02T15:54:36Z,2020-06-02T16:20:45Z,2020-06-02T16:21:02Z,CLOSED,False,7,7,1,https://github.com/tombsar,Reorder platform fields in mappings.h.in,1,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1708,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1708#issuecomment-637645262,"The upstream SDL_GameControllerDB README (https://github.com/gabomdq/SDL_GameControllerDB) has a convention that the platform entry should always be at the end of the mapping string. Would it make sense to follow that with glfw's own mappings?
I haven't regenerated mappings.h, but I could do that and add to this PR if requested.","Sorry, it's maybe not so obvious since SDL2's own controllermap tool puts platform at the start of the string...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1708,2020-06-02T15:54:36Z,2020-06-02T16:20:45Z,2020-06-02T16:21:02Z,CLOSED,False,7,7,1,https://github.com/tombsar,Reorder platform fields in mappings.h.in,1,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1708,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1708#issuecomment-637660614,"The upstream SDL_GameControllerDB README (https://github.com/gabomdq/SDL_GameControllerDB) has a convention that the platform entry should always be at the end of the mapping string. Would it make sense to follow that with glfw's own mappings?
I haven't regenerated mappings.h, but I could do that and add to this PR if requested.",I think it's good to not necessarily use the same order as our upstream source so our parser doesn't get too complacent.,True,{'THUMBS_UP': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,1711,2020-06-05T03:59:57Z,2021-12-14T08:33:43Z,2021-12-15T20:34:52Z,CLOSED,False,3,2,1,https://github.com/annacrombie,set O_NONBLOCK on wayland key repeat timerfd,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1711,https://github.com/annacrombie,1,https://github.com/glfw/glfw/pull/1711,would fix #1710,would fix #1710,True,"{'THUMBS_UP': ['https://github.com/BailShamber', 'https://github.com/Clyybber', 'https://github.com/Admicos', 'https://github.com/melvyn2', 'https://github.com/davidgarland', 'https://github.com/nycex', 'https://github.com/AlynxZhou']}"
glfw/glfw,https://github.com/glfw/glfw,1711,2020-06-05T03:59:57Z,2021-12-14T08:33:43Z,2021-12-15T20:34:52Z,CLOSED,False,3,2,1,https://github.com/annacrombie,set O_NONBLOCK on wayland key repeat timerfd,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1711,https://github.com/ninja-,2,https://github.com/glfw/glfw/pull/1711#issuecomment-650684092,would fix #1710,+1,True,{}
glfw/glfw,https://github.com/glfw/glfw,1711,2020-06-05T03:59:57Z,2021-12-14T08:33:43Z,2021-12-15T20:34:52Z,CLOSED,False,3,2,1,https://github.com/annacrombie,set O_NONBLOCK on wayland key repeat timerfd,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1711,https://github.com/annacrombie,3,https://github.com/glfw/glfw/pull/1711#issuecomment-650895053,would fix #1710,@linkmauve alright!  I think it should be good to go.  Thanks for your consideration :),True,{}
glfw/glfw,https://github.com/glfw/glfw,1711,2020-06-05T03:59:57Z,2021-12-14T08:33:43Z,2021-12-15T20:34:52Z,CLOSED,False,3,2,1,https://github.com/annacrombie,set O_NONBLOCK on wayland key repeat timerfd,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1711,https://github.com/Clyybber,4,https://github.com/glfw/glfw/pull/1711#issuecomment-852045268,would fix #1710,ping on this; it makes GLFW usable on wayland without xwayland.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1711,2020-06-05T03:59:57Z,2021-12-14T08:33:43Z,2021-12-15T20:34:52Z,CLOSED,False,3,2,1,https://github.com/annacrombie,set O_NONBLOCK on wayland key repeat timerfd,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1711,https://github.com/AlynxZhou,5,https://github.com/glfw/glfw/pull/1711#issuecomment-993133317,would fix #1710,Any blocker on this PR?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1711,2020-06-05T03:59:57Z,2021-12-14T08:33:43Z,2021-12-15T20:34:52Z,CLOSED,False,3,2,1,https://github.com/annacrombie,set O_NONBLOCK on wayland key repeat timerfd,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1711,https://github.com/linkmauve,6,https://github.com/glfw/glfw/pull/1711#issuecomment-993300843,would fix #1710,"This was merged in 963e728 with 6887908 as a follow-up.
Thanks for the patch, and sorry for the delay merging it!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1712,2020-06-05T04:02:28Z,2020-06-17T16:53:23Z,2020-06-17T18:14:35Z,CLOSED,False,16,6,1,https://github.com/tatsy,Fixed: GLFW_INCLUDE_GLU is not working related to issue #1695.,1,"['bug', 'verified', 'OpenGL']",https://github.com/glfw/glfw/pull/1712,https://github.com/tatsy,1,https://github.com/glfw/glfw/pull/1712,"I found that the fix proposed in issue #1695 prevents glu.h from being included even when GLFW_INCLUDE_GLU is specified.
In this PR, I separated the section for glu.h from the section where the standard GL.h is included.","I found that the fix proposed in issue #1695 prevents glu.h from being included even when GLFW_INCLUDE_GLU is specified.
In this PR, I separated the section for glu.h from the section where the standard GL.h is included.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1712,2020-06-05T04:02:28Z,2020-06-17T16:53:23Z,2020-06-17T18:14:35Z,CLOSED,False,16,6,1,https://github.com/tatsy,Fixed: GLFW_INCLUDE_GLU is not working related to issue #1695.,1,"['bug', 'verified', 'OpenGL']",https://github.com/glfw/glfw/pull/1712,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1712#issuecomment-645494309,"I found that the fix proposed in issue #1695 prevents glu.h from being included even when GLFW_INCLUDE_GLU is specified.
In this PR, I separated the section for glu.h from the section where the standard GL.h is included.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1717,2020-06-12T04:29:10Z,2020-06-23T23:18:31Z,2020-06-24T13:55:33Z,CLOSED,False,4,0,1,https://github.com/halx99,Should pass hdc when invoke eglGetDisplay at win32,2,"['enhancement', 'Windows', 'EGL']",https://github.com/glfw/glfw/pull/1717,https://github.com/halx99,1,https://github.com/glfw/glfw/pull/1717,"Such as EGL provide by google AngleProject, see https://github.com/google/angle/blob/master/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp function Renderer11::initialize","Such as EGL provide by google AngleProject, see https://github.com/google/angle/blob/master/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp function Renderer11::initialize",True,{}
glfw/glfw,https://github.com/glfw/glfw,1717,2020-06-12T04:29:10Z,2020-06-23T23:18:31Z,2020-06-24T13:55:33Z,CLOSED,False,4,0,1,https://github.com/halx99,Should pass hdc when invoke eglGetDisplay at win32,2,"['enhancement', 'Windows', 'EGL']",https://github.com/glfw/glfw/pull/1717,https://github.com/halx99,2,https://github.com/glfw/glfw/pull/1717#issuecomment-648674324,"Such as EGL provide by google AngleProject, see https://github.com/google/angle/blob/master/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp function Renderer11::initialize",@elmindreda We need ReleaseDC after eglGetDisplay,True,{}
glfw/glfw,https://github.com/glfw/glfw,1717,2020-06-12T04:29:10Z,2020-06-23T23:18:31Z,2020-06-24T13:55:33Z,CLOSED,False,4,0,1,https://github.com/halx99,Should pass hdc when invoke eglGetDisplay at win32,2,"['enhancement', 'Windows', 'EGL']",https://github.com/glfw/glfw/pull/1717,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1717#issuecomment-648835974,"Such as EGL provide by google AngleProject, see https://github.com/google/angle/blob/master/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp function Renderer11::initialize","The GLFW window class is CS_OWNDC, meaning ReleaseDC is a no-op.",True,{'THUMBS_UP': ['https://github.com/halx99']}
glfw/glfw,https://github.com/glfw/glfw,1720,2020-06-18T01:23:25Z,2020-06-28T22:16:35Z,2020-07-01T01:44:20Z,CLOSED,False,8,4,1,https://github.com/tombsar,Update documentation for OPENGL_DEBUG_CONTEXT hint,2,"['bug', 'documentation', 'OpenGL ES']",https://github.com/glfw/glfw/pull/1720,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/1720,"The documentation currently says that the GLFW_OPENGL_DEBUG_CONTEXT hint is ignored if an OpenGL ES context is requested, but I don't think that matches the implemented behaviour.","The documentation currently says that the GLFW_OPENGL_DEBUG_CONTEXT hint is ignored if an OpenGL ES context is requested, but I don't think that matches the implemented behaviour.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1720,2020-06-18T01:23:25Z,2020-06-28T22:16:35Z,2020-07-01T01:44:20Z,CLOSED,False,8,4,1,https://github.com/tombsar,Update documentation for OPENGL_DEBUG_CONTEXT hint,2,"['bug', 'documentation', 'OpenGL ES']",https://github.com/glfw/glfw/pull/1720,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1720#issuecomment-646272963,"The documentation currently says that the GLFW_OPENGL_DEBUG_CONTEXT hint is ignored if an OpenGL ES context is requested, but I don't think that matches the implemented behaviour.","Possibly we should add a preferred GLFW_DEBUG_CONTEXT alias as well?

I'd be in favour of that, although I think it should be GLFW_CONTEXT_DEBUG for consistency with the other hints?
Up to you whether you want to introduce the new hint at the same time as this documentation hotfix, or leave it for a future release.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1720,2020-06-18T01:23:25Z,2020-06-28T22:16:35Z,2020-07-01T01:44:20Z,CLOSED,False,8,4,1,https://github.com/tombsar,Update documentation for OPENGL_DEBUG_CONTEXT hint,2,"['bug', 'documentation', 'OpenGL ES']",https://github.com/glfw/glfw/pull/1720,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1720#issuecomment-646330587,"The documentation currently says that the GLFW_OPENGL_DEBUG_CONTEXT hint is ignored if an OpenGL ES context is requested, but I don't think that matches the implemented behaviour.","I'd be in favour of that, although I think it should be GLFW_CONTEXT_DEBUG for consistency with the other hints?

Oh, yes, definitely, thank you!

Up to you whether you want to introduce the new hint at the same time as this documentation hotfix, or leave it for a future release.

Separate would be best, I think.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1720,2020-06-18T01:23:25Z,2020-06-28T22:16:35Z,2020-07-01T01:44:20Z,CLOSED,False,8,4,1,https://github.com/tombsar,Update documentation for OPENGL_DEBUG_CONTEXT hint,2,"['bug', 'documentation', 'OpenGL ES']",https://github.com/glfw/glfw/pull/1720,https://github.com/tombsar,4,https://github.com/glfw/glfw/pull/1720#issuecomment-646368394,"The documentation currently says that the GLFW_OPENGL_DEBUG_CONTEXT hint is ignored if an OpenGL ES context is requested, but I don't think that matches the implemented behaviour.","I struggled to find a wording I was happy with, so I ended up borrowing the phrase ""debug mode"" from the OpenGL wiki. I also added a reference to the Khronos extension definition
What do you think? Did I change it too much?
I'm a bit lost with Github's review system, so hopefully this all works smoothly.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1720,2020-06-18T01:23:25Z,2020-06-28T22:16:35Z,2020-07-01T01:44:20Z,CLOSED,False,8,4,1,https://github.com/tombsar,Update documentation for OPENGL_DEBUG_CONTEXT hint,2,"['bug', 'documentation', 'OpenGL ES']",https://github.com/glfw/glfw/pull/1720,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1720#issuecomment-650250443,"The documentation currently says that the GLFW_OPENGL_DEBUG_CONTEXT hint is ignored if an OpenGL ES context is requested, but I don't think that matches the implemented behaviour.","What do you think? Did I change it too much?

It's great! Will merge asap.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1720,2020-06-18T01:23:25Z,2020-06-28T22:16:35Z,2020-07-01T01:44:20Z,CLOSED,False,8,4,1,https://github.com/tombsar,Update documentation for OPENGL_DEBUG_CONTEXT hint,2,"['bug', 'documentation', 'OpenGL ES']",https://github.com/glfw/glfw/pull/1720,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1720#issuecomment-651969952,"The documentation currently says that the GLFW_OPENGL_DEBUG_CONTEXT hint is ignored if an OpenGL ES context is requested, but I don't think that matches the implemented behaviour.",Thank you! This was merged as 8a69a0d with corresponding fixes in 4e3b433 (that I didn't think to check for before writing b420ca7).,True,{'HOORAY': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,1722,2020-06-23T14:21:15Z,2020-06-23T23:18:31Z,2020-06-24T13:56:30Z,MERGED,True,2,2,2,https://github.com/Luflosi,Fix typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1722,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1722,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1722,2020-06-23T14:21:15Z,2020-06-23T23:18:31Z,2020-06-24T13:56:30Z,MERGED,True,2,2,2,https://github.com/Luflosi,Fix typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1722,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1722#issuecomment-648188978,,I found a couple more typos. Should I amend this commit?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1722,2020-06-23T14:21:15Z,2020-06-23T23:18:31Z,2020-06-24T13:56:30Z,MERGED,True,2,2,2,https://github.com/Luflosi,Fix typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1722,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1722#issuecomment-648194684,,Yes please. :),True,"{'THUMBS_UP': ['https://github.com/Luflosi', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1722,2020-06-23T14:21:15Z,2020-06-23T23:18:31Z,2020-06-24T13:56:30Z,MERGED,True,2,2,2,https://github.com/Luflosi,Fix typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1722,https://github.com/Luflosi,4,https://github.com/glfw/glfw/pull/1722#issuecomment-648208883,,I found some typos in the deps directory. Can I fix those too?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1722,2020-06-23T14:21:15Z,2020-06-23T23:18:31Z,2020-06-24T13:56:30Z,MERGED,True,2,2,2,https://github.com/Luflosi,Fix typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1722,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1722#issuecomment-648234298,,"Those should be reported upstream, imo.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1722,2020-06-23T14:21:15Z,2020-06-23T23:18:31Z,2020-06-24T13:56:30Z,MERGED,True,2,2,2,https://github.com/Luflosi,Fix typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1722,https://github.com/Luflosi,6,https://github.com/glfw/glfw/pull/1722#issuecomment-648259076,,"I'm honestly too lazy to report the typos upstream. I would need to find where all the repos are hosted, read their contributing guidelines and submit patches to each one individually. If anybody wants to do it, here is what codespell complained about. Keep in mind that there are false positives.
./deps/nuklear_glfw_gl2.h:151: vertexes ==> vertices
./deps/tinycthread.c:335: pres ==> press
./deps/tinycthread.c:352: pres ==> press
./deps/tinycthread.c:353: pres ==> press
./deps/tinycthread.c:355: pres ==> press
./deps/tinycthread.c:357: pres ==> press
./deps/tinycthread.c:423: pres ==> press
./deps/tinycthread.c:424: pres ==> press
./deps/tinycthread.c:426: pres ==> press
./deps/tinycthread.c:428: pres ==> press
./deps/tinycthread.c:446: pres ==> press
./deps/tinycthread.c:448: pres ==> press
./deps/tinycthread.c:452: pres ==> press
./deps/tinycthread.c:454: pres ==> press
./deps/tinycthread.c:455: pres ==> press
./deps/nuklear.h:694: transistions ==> transitions
./deps/nuklear.h:1081: vertexes ==> vertices
./deps/nuklear.h:1206: vertexes ==> vertices
./deps/nuklear.h:1231: indicies ==> indices
./deps/nuklear.h:1436: visibile ==> visible
./deps/nuklear.h:1437: visibile ==> visible
./deps/nuklear.h:2599: separeted ==> separated
./deps/nuklear.h:2699: collapsable ==> collapsible
./deps/nuklear.h:2700: visibile ==> visible
./deps/nuklear.h:2705: collapsable ==> collapsible
./deps/nuklear.h:2720: collapsable ==> collapsible
./deps/nuklear.h:2745: collapsable ==> collapsible
./deps/nuklear.h:2746: collapsable ==> collapsible
./deps/nuklear.h:2747: collapsable ==> collapsible
./deps/nuklear.h:2748: collapsable ==> collapsible
./deps/nuklear.h:2749: collapsable ==> collapsible
./deps/nuklear.h:2750: collapsable ==> collapsible
./deps/nuklear.h:2751: collapsable ==> collapsible
./deps/nuklear.h:2753: collapsable ==> collapsible
./deps/nuklear.h:2754: collapsable ==> collapsible
./deps/nuklear.h:2760: collapsable ==> collapsible
./deps/nuklear.h:2764: collapsable ==> collapsible
./deps/nuklear.h:2766: collapsable ==> collapsible
./deps/nuklear.h:2786: collapsable ==> collapsible
./deps/nuklear.h:2803: collapsable ==> collapsible
./deps/nuklear.h:2823: collapsable ==> collapsible
./deps/nuklear.h:2825: collapsable ==> collapsible
./deps/nuklear.h:2846: collapsable ==> collapsible
./deps/nuklear.h:2866: collapsable ==> collapsible
./deps/nuklear.h:2898: collapsable ==> collapsible
./deps/nuklear.h:2914: collapsable ==> collapsible
./deps/nuklear.h:3120: modifyable ==> modifiable
./deps/nuklear.h:3121: modifyable ==> modifiable
./deps/nuklear.h:3141: identifaction ==> identification
./deps/nuklear.h:3144: propery ==> property, properly
./deps/nuklear.h:3198: modifing ==> modifying
./deps/nuklear.h:3199: modifing ==> modifying
./deps/nuklear.h:3200: modifing ==> modifying
./deps/nuklear.h:3207: modifing ==> modifying
./deps/nuklear.h:3228: modifing ==> modifying
./deps/nuklear.h:3249: modifing ==> modifying
./deps/nuklear.h:3270: modifing ==> modifying
./deps/nuklear.h:3293: modifing ==> modifying
./deps/nuklear.h:3316: modifing ==> modifying
./deps/nuklear.h:3892: hight ==> height, high
./deps/nuklear.h:4580: vertexes ==> vertices
./deps/nuklear.h:9353: indicies ==> indices
./deps/nuklear.h:9353: vertexes ==> vertices
./deps/nuklear.h:9357: specifing ==> specifying
./deps/nuklear.h:9360: verticies ==> vertices
./deps/nuklear.h:9360: indicies ==> indices
./deps/nuklear.h:12023: tesselate ==> tessellate
./deps/nuklear.h:13067: te ==> the, be
./deps/nuklear.h:13100: nd ==> and, 2nd
./deps/nuklear.h:13110: Te ==> The, be
./deps/nuklear.h:19086: seperator ==> separator
./deps/nuklear.h:19105: seperator ==> separator
./deps/nuklear.h:19105: seperator ==> separator
./deps/nuklear.h:19111: seperator ==> separator
./deps/nuklear.h:19111: seperator ==> separator
./deps/nuklear.h:21158: modifyable ==> modifiable
./deps/nuklear.h:21160: modifyable ==> modifiable
./deps/nuklear.h:25254: separed ==> separated
./deps/nuklear.h:25264: modifyable ==> modifiable
./deps/nuklear.h:25265: formated ==> formatted
./deps/nuklear.h:25271: Modifing ==> Modifying
./deps/nuklear.h:25271: funtions ==> functions
./deps/nuklear.h:25298: boundries ==> boundaries
./deps/nuklear.h:25315: programatic ==> programmatic
./deps/nuklear.h:25324: seperator ==> separator
./deps/nuklear.h:25360: glyphes ==> glyphs
./deps/nuklear.h:25440: commiting ==> committing
./deps/nuklear.h:25446: glyphes ==> glyphs
./deps/nuklear.h:25463: becomming ==> becoming
./deps/nuklear.h:25510: dependend ==> dependent, depended
./deps/mingw/dinput.h:599: Portugese ==> Portuguese
./deps/mingw/dinput.h:603: Portugese ==> Portuguese
./deps/glad/vulkan.h:2974: pEvents ==> prevents
./deps/glad/vulkan.h:2985: pEvent ==> prevent
./deps/glad/gl.h:1837: lod ==> load
Other than that, my PR is complete and can be reviewed.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1722,2020-06-23T14:21:15Z,2020-06-23T23:18:31Z,2020-06-24T13:56:30Z,MERGED,True,2,2,2,https://github.com/Luflosi,Fix typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1722,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1722#issuecomment-648836529,,Thank you!,True,{'HEART': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,1,https://github.com/glfw/glfw/pull/1725,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",True,"{'HEART': ['https://github.com/amatas', 'https://github.com/flewkey', 'https://github.com/skerit', 'https://github.com/ChrisLane', 'https://github.com/ninja-', 'https://github.com/DragonSWDev', 'https://github.com/L-as', 'https://github.com/WTechNinja', 'https://github.com/proudmuslim-dev', 'https://github.com/davidgarland', 'https://github.com/Lgmrszd']}"
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/skerit,2,https://github.com/glfw/glfw/pull/1725#issuecomment-701669842,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@ninja- When I compile glfw using your wayland_fixes branch, Minecraft throws this error:
java.lang.UnsatisfiedLinkError: Failed to dynamically load library: /usr/local/lib/libglfw.so(error = null)

When I compile it with the master branch, it doesn't throw this error (but then there seem to be several issues with transparency)

Edit: Ninja's branch requires libdecoration to also be installed on the system. On Arch that can be done via the AUR: pamac install libdecoration-git",True,{'THUMBS_UP': ['https://github.com/ninja-']}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,3,https://github.com/glfw/glfw/pull/1725#issuecomment-702096005,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@jadahl let's have some discussion on merging this, let's not waste the work done here :D!",True,{'THUMBS_UP': ['https://github.com/skerit']}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,4,https://github.com/glfw/glfw/pull/1725#issuecomment-702096821,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@skerit injecting patched versions into minecraft launcher is a bit of a pain at the moment, I wish we had some easier way btw >.>",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,5,https://github.com/glfw/glfw/pull/1725#issuecomment-702098806,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",@skerit ldd /usr/local/lib/libglfw.so would show you all missing libraries btw. :),True,{'THUMBS_UP': ['https://github.com/skerit']}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ChrisLane,6,https://github.com/glfw/glfw/pull/1725#issuecomment-702148182,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","MultiMC Launcher allows you to use system versions instead of the bundled versions.
…
On 1 Oct 2020, 13:21, at 13:21, ninja ***@***.***> wrote:
@skerit injecting patched versions into minecraft launcher is a bit of
a pain at the moment, I wish we had some easier way btw >.>

--
You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub:
#1725 (comment)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/skerit,7,https://github.com/glfw/glfw/pull/1725#issuecomment-702702312,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@ChrisLane I was using MultiMC to set the custom glfw library via the java arguments config, indeed :)
@ninja- Once I installed libdecoration it worked fine! Well, the actual decoration is still blurry for some reason (I use non-integer scaling), but the game looked great and I actually had a decent FPS for once :)
Related, but a bit off-topic: Unfortunately I'm unable to actually screencast the application in OBS. Using obs-xdg-portal I'm able to select the Minecraft window, and up until then it actually does work and I'm able to record it, but as soon as I move my cursor over the Minecraft window Gnome-shell crashes 🤷 I have no idea if that's an issue with glfw, with the xdg screencast implementation or with gnome-shell/mutter... Let it be a warning to anyone passing through here :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/jadahl,8,https://github.com/glfw/glfw/pull/1725#issuecomment-702705253,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","the actual decoration is still blurry for some reason

That should eventually be fixed by https://gitlab.gnome.org/jadahl/libdecoration/-/merge_requests/24.

as soon as I move my cursor over the Minecraft window Gnome-shell crashes

Could you open a bug report on https://gitlab.gnome.org/GNOME/mutter/issues/new for that?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,9,https://github.com/glfw/glfw/pull/1725#issuecomment-702746932,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","but the game looked great and I actually had a decent FPS for once :)

does Xwayland really kill your FPS that much? I haven't seen that big of a difference, but vsync is probably better.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,10,https://github.com/glfw/glfw/pull/1725#issuecomment-702747662,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","Related, but a bit off-topic: Unfortunately I'm unable to actually screencast the application in OBS. Using obs-xdg-portal I'm able to select the Minecraft window, and up until then it actually does work and I'm able to record it, but as soon as I move my cursor over the Minecraft window Gnome-shell crashes shrug I have no idea if that's an issue with glfw, with the xdg screencast implementation or with gnome-shell/mutter... Let it be a warning to anyone passing through here :)

Are you on Fedora? I can't play with it on Ubuntu because Ubuntu is still shipping gnome shell without pipewire :((",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/XakepSDK,11,https://github.com/glfw/glfw/pull/1725#issuecomment-703099692,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","Will it draw native to system decorations? In KDE i can disable decorations per window, will this work with libdecoration? Will be libdecoration shipped with glfw?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,12,https://github.com/glfw/glfw/pull/1725#issuecomment-703108571,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","AFAIK no, there might be some work going with this in libdecoration but I wouldn't count on that. Non native window borders are small price to pay for wayland support :D",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/XakepSDK,13,https://github.com/glfw/glfw/pull/1725#issuecomment-703109378,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","What's wrong with using xdg-decoration protocol? Decorations will work without any 3rd party dependency.
Afaik all major display servers implement it properly.
And this implementation will be no go for all tiling wayland display servers.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,14,https://github.com/glfw/glfw/pull/1725#issuecomment-703114916,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",@christianrauch,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/skerit,15,https://github.com/glfw/glfw/pull/1725#issuecomment-703118797,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@ninja- I'm on Manjaro. It does affect the FPS quite a bit, I'm just guessing that's due to the fractional scaling + screen capturing + BSL shaders. But I also have a Radeon 5700 XT card, which should give me more then 15 frames a second (which is what I get at the worst times)
@jadahl  I created an issue here, with a system log output: https://gitlab.gnome.org/GNOME/mutter/-/issues/1446",True,{'THUMBS_UP': ['https://github.com/ninja-']}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/christianrauch,16,https://github.com/glfw/glfw/pull/1725#issuecomment-703123850,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@XakepSDK Let's not get into a discussion about server-side vs. client-side decorations. It has torn apart the Linux-Desktop community large enough. Unless someone finds a solution to implement atomic client updates when the subsurfaces come from different asynchronous entities, there will always be compositors that expect client-side decorations to allow atomic updates and prevent mixed states.

Will it draw native to system decorations?

There are no ""native"" decorations on Wayland or X11 either. ""Someone"" has to draw them. libdecoration supports both modes:

If your compositor supports the xdg-decoration protocol (e.g. Kwin, sway), libdecoration will negotiate with the compositor which mode to use (e.g. it is using server-side decorations on KWin by default). However, even with xdg-decoration support, the compositor might choose to have the client draw the decorations.
If your compositor does not support the xdg-decoration protocol (e.g. mutter, Mir, weston), or supports it but does not support the server-side mode, the client has to draw the decorations.


And this implementation will be no go for all tiling wayland display servers.

There is nothing that prevents the use of libdecoration in tiling compositors (that include a window manager). The compositor just has to support the the xdg-decoration protocol, similar to as a X11 tiling window manager has to support all X11 protocols.
You can easily test this functionality with sway when toggling the decoration modes as sway supports both decoration modes.

In KDE i can disable decorations per window, will this work with libdecoration?

If you do not want decorations at all, you can just unset the environment variable LIBDECOR_PLUGIN_DIR so that libdecoration will fallback to no decorations.

Will be libdecoration shipped with glfw?

Right now, it is included as a third-party project that will be checked out from the upstream (https://gitlab.gnome.org/jadahl/libdecoration) when built. Alternatively, you have to integrate the source tree into GLFW. This will be the case until libdecoration has been packaged and released to all relevant distribution repos.",True,{'THUMBS_UP': ['https://github.com/ninja-']}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,17,https://github.com/glfw/glfw/pull/1725#issuecomment-703163368,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","I'm on Manjaro. It does affect the FPS quite a bit, I'm just guessing that's due to the fractional scaling + screen capturing + BSL shaders. But I also have a Radeon 5700 XT card, which should give me more then 15 frames a second (which is what I get at the worst times)

That's the same card I am using, but I gave up on playing with shaders due to several mesa bugs breaking graphics - even with latest opengl features forced with that magical mesa env...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/DragonSWDev,18,https://github.com/glfw/glfw/pull/1725#issuecomment-710324850,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@XakepSDK

What's wrong with using xdg-decoration protocol? Decorations will work without any 3rd party dependency.

Main problem is that this protocol is not mandatory but optional. You can't expect all existing compositors to have it or force any to implement it. Some solution for them is needed and I hope libdecoration will provide such solution. I played with it and it looks very promising. With additional plugins (like proposed GTK plugin) it should also integrate nicely with desktop. But for now even basic decorations are way better than nothing.",True,{'THUMBS_UP': ['https://github.com/gracicot']}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/satvrnn,19,https://github.com/glfw/glfw/pull/1725#issuecomment-717950421,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",Can confirm this helped me quite a bit.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/TheComputerGuy96,20,https://github.com/glfw/glfw/pull/1725#issuecomment-719709784,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",Does this work with the latest stable versions of LWJGL and Minecraft (3.2.3 and 1.16.3 respectively)? 🤔,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/satvrnn,21,https://github.com/glfw/glfw/pull/1725#issuecomment-720028282,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",yep,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/TheComputerGuy96,22,https://github.com/glfw/glfw/pull/1725#issuecomment-720062593,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","I frequently get a segmentation fault when trying to run Minecraft 1.16.3 with this (with the same address for GLFW and sometimes radeonsi_dri)
I can get into the loading screen and even the main menu screen, but that requires me to mess around with the window settings and clicking on the window fast with my mouse
I'm using Minecraft 1.16.3 with LWJGL 3.2.3 (I removed the lwjgl-glfw-natives-linux.jar file from the JSON of LWJGL), various versions of GLFW (I tried one with the current commit reverted and the one in early July), GNOME 3.38.1, Mesa 20.2.1, both the latest version of libdecoration and the one before and Arch Linux
Here's the Java crash log: https://del.dog/moocughifu.txt
Update: I opened Minecraft today and it worked without any crashes (which is strange)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/jacksondm33,23,https://github.com/glfw/glfw/pull/1725#issuecomment-721444938,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","I'm currently using sway on Arch Linux and consistently get these errors almost immediately after launching:
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_VALUE in glTexImage2D(width, height or depth < 0)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_VALUE in glTexImage2D(width, height or depth < 0)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_VALUE in glTexImage2D(invalid width=822494446 or height=1991179616 or depth=1)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_VALUE in glTexImage2D(invalid width=822494446 or height=1991179616 or depth=1)
[18:57:55] [Render thread/FATAL]: Unreported exception thrown!
java.lang.RuntimeException: GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
	at ded.b(SourceFile:172) ~[minecraft-1.16.3-client.jar:?]
	at ded.b(SourceFile:149) ~[minecraft-1.16.3-client.jar:?]
	at ded.d(SourceFile:65) ~[minecraft-1.16.3-client.jar:?]
	at ded.a(SourceFile:54) ~[minecraft-1.16.3-client.jar:?]
	at djw.a(SourceFile:1130) ~[minecraft-1.16.3-client.jar:?]
	at dew.b(SourceFile:268) ~[minecraft-1.16.3-client.jar:?]
	at org.lwjgl.glfw.GLFWFramebufferSizeCallbackI.callback(GLFWFramebufferSizeCallbackI.java:37) ~[lwjgl-glfw-3.2.2.jar:build 10]
	at org.lwjgl.system.JNI.invokeV(Native Method) ~[lwjgl-3.2.2.jar:build 10]
	at org.lwjgl.glfw.GLFW.glfwPollEvents(GLFW.java:3101) ~[lwjgl-glfw-3.2.2.jar:build 10]
	at com.mojang.blaze3d.systems.RenderSystem.flipFrame(SourceFile:102) ~[minecraft-1.16.3-client.jar:?]
	at dew.e(SourceFile:308) ~[minecraft-1.16.3-client.jar:?]
	at djw.e(SourceFile:1043) ~[minecraft-1.16.3-client.jar:?]
	at djw.e(SourceFile:656) [minecraft-1.16.3-client.jar:?]
	at net.minecraft.client.main.Main.main(SourceFile:215) [minecraft-1.16.3-client.jar:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:564) ~[?:?]
	at org.multimc.onesix.OneSixLauncher.launchWithMainClass(OneSixLauncher.java:196) [NewLaunch.jar:?]
	at org.multimc.onesix.OneSixLauncher.launch(OneSixLauncher.java:231) [NewLaunch.jar:?]
	at org.multimc.EntryPoint.listen(EntryPoint.java:143) [NewLaunch.jar:?]
	at org.multimc.EntryPoint.main(EntryPoint.java:34) [NewLaunch.jar:?]
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glClear(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glClear(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glDrawArrays(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glDrawArrays(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glDrawArrays(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glDrawArrays(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glDrawArrays(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glDrawArrays(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glDrawArrays(incomplete framebuffer)
[18:57:55] [Render thread/INFO]: OpenGL debug message, id=1, source=API, type=ERROR, severity=HIGH, message=GL_INVALID_FRAMEBUFFER_OPERATION in glDrawArrays(incomplete framebuffer)

I don't know enough about how minecraft and lwjgl work to know where these values for width and height are coming from. They seem to almost be random 32-bit signed integers but they sometimes stay the same between launches.
Sometimes, though, minecraft will launch without any problems. I used to think it was caused by me switching it to a floating window in sway right before it normally crashes, but that rarely works anymore and sometimes it launches without any intervention.
If anyone has any insight into what might be causing this error, please let me know.
Full multimc log",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,24,https://github.com/glfw/glfw/pull/1725#issuecomment-721445463,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",yes this may be a compositor issue. can you try reproducing with gnome shell? and weston isn't currently supported,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/TheComputerGuy96,25,https://github.com/glfw/glfw/pull/1725#issuecomment-721617645,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@ninja- I already reproduced the issue with GNOME
But the weird thing is it went away the next day without me touching anything
BIG UPDATE
Enabling ""Game Window"" in MultiMC settings causes crashes (disabling ""Game Window"" fixes it)
UPDATE 2
Downgrading libdecoration is also needed (commit 8b8a4e24 works fine)
UPDATE 3
Downgrading libdecoration is the only thing that's needed",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/skerit,26,https://github.com/glfw/glfw/pull/1725#issuecomment-722253433,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","Still works fine in Gnome 3.38 and capturing the window using obs-xdg-portal no longer crashes Gnome, so I guess that was a gnome/mutter specific issue. Yay!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/jacksondm33,27,https://github.com/glfw/glfw/pull/1725#issuecomment-722779826,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@ninja- were you replying to me? If so, I haven't tried it on gnome, but I assume my issue would go away since others have reported it working on gnome. I would like to get this working on sway, if possible. I just don't know exactly where the issue originates from.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/TheComputerGuy96,28,https://github.com/glfw/glfw/pull/1725#issuecomment-722820993,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@jacksondm33 It works on sway
But recent updates to libdecoration made Minecraft very unstable (commit bc558745 is the last one that works properly)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/jacksondm33,29,https://github.com/glfw/glfw/pull/1725#issuecomment-722828432,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","@TheComputerGuy96 okay, I'll try downgrading libdecoration. I misread your earlier comment and didn't realize you were able to reproduce the same error on GNOME.
Edit:
Using commit bc558745 fixed it. Thanks!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/TheComputerGuy96,30,https://github.com/glfw/glfw/pull/1725#issuecomment-723420852,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","Here are the current issues when running Minecraft with this:

Maximized window option in MultiMC doesn't work
Key repeat isn't working for some reason
Labels for keyboard buttons are weird in the controls menu
The cursor position when opening a chest/furnace isn't in the center anymore",True,{'EYES': ['https://github.com/ninja-']}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/TheComputerGuy96,31,https://github.com/glfw/glfw/pull/1725#issuecomment-734767253,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",@ninja- Can you fix the merge conflict?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/TheComputerGuy96,32,https://github.com/glfw/glfw/pull/1725#issuecomment-734786357,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",@ninja- You accidentally removed libdecoration,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ChrisLane,33,https://github.com/glfw/glfw/pull/1725#issuecomment-762715190,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",What's left to be done on this PR for this to be merged? I would be keen to get fixes merged so that I don't have to do it myself downstream.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,34,https://github.com/glfw/glfw/pull/1725#issuecomment-762738123,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",project owners don't seem interested in merge,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/christianrauch,35,https://github.com/glfw/glfw/pull/1725#issuecomment-762738935,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711","What's left to be done on this PR for this to be merged?

@ChrisLane One thing that should be done is to merge the client-side decoration support in #1693 first.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ChrisLane,36,https://github.com/glfw/glfw/pull/1725#issuecomment-805663627,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",@ninja- could you update your branch please? I'm unable to apply your patch,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/ninja-,37,https://github.com/glfw/glfw/pull/1725#issuecomment-805690972,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",@ChrisLane I kind of gave up on maintaing this due to no upstream interest in merge...I think @ChristianChurch took my fixes into his branch and is continuing work on client side decorations?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1725,2020-06-30T17:44:50Z,,2022-01-03T09:55:46Z,OPEN,False,334,59,7,https://github.com/ninja-,Wayland fixes for Minecraft,15,['Wayland'],https://github.com/glfw/glfw/pull/1725,https://github.com/dada513,38,https://github.com/glfw/glfw/pull/1725#issuecomment-1003978870,"Wayland fixes that make Minecraft work smoothly
on top of #1693 and #1711",it would be nice to have this merged,True,{}
glfw/glfw,https://github.com/glfw/glfw,1731,2020-07-13T01:20:09Z,2021-12-24T00:15:16Z,2021-12-24T00:27:13Z,CLOSED,False,20,11,4,None,Wayland: Fix hidden windows,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1731,None,1,https://github.com/glfw/glfw/pull/1731,"Corrects the protocol violation with attaching an xdg_surface to a wl_surface that already has a buffer. Destroying the xdg_surface is not necessary. Instead we just attach a null wl_buffer.
NOTE: this patch introduces new behavior where glfwSwapBuffers will always return immediately on Wayland if the window is hidden, even if there is a swap interval. This is probably better than the previous behavior where swapping a hidden window with swap interval >= 1 would cause the program to hang indefinitely in a frame callback. However, it could cause some applications to consume a lot of CPU if they keep a render loop going after hiding a window.
Fixes  #1492","Corrects the protocol violation with attaching an xdg_surface to a wl_surface that already has a buffer. Destroying the xdg_surface is not necessary. Instead we just attach a null wl_buffer.
NOTE: this patch introduces new behavior where glfwSwapBuffers will always return immediately on Wayland if the window is hidden, even if there is a swap interval. This is probably better than the previous behavior where swapping a hidden window with swap interval >= 1 would cause the program to hang indefinitely in a frame callback. However, it could cause some applications to consume a lot of CPU if they keep a render loop going after hiding a window.
Fixes  #1492",True,"{'THUMBS_UP': ['https://github.com/unrelentingtech', 'https://github.com/c4llv07e', 'https://github.com/ChrisLane', 'https://github.com/alichraghi']}"
glfw/glfw,https://github.com/glfw/glfw,1731,2020-07-13T01:20:09Z,2021-12-24T00:15:16Z,2021-12-24T00:27:13Z,CLOSED,False,20,11,4,None,Wayland: Fix hidden windows,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1731,https://github.com/unrelentingtech,2,https://github.com/glfw/glfw/pull/1731#issuecomment-762846512,"Corrects the protocol violation with attaching an xdg_surface to a wl_surface that already has a buffer. Destroying the xdg_surface is not necessary. Instead we just attach a null wl_buffer.
NOTE: this patch introduces new behavior where glfwSwapBuffers will always return immediately on Wayland if the window is hidden, even if there is a swap interval. This is probably better than the previous behavior where swapping a hidden window with swap interval >= 1 would cause the program to hang indefinitely in a frame callback. However, it could cause some applications to consume a lot of CPU if they keep a render loop going after hiding a window.
Fixes  #1492",This fixes instant-meshes (nanogui) SwapBuffers hang before showing the window.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1731,2020-07-13T01:20:09Z,2021-12-24T00:15:16Z,2021-12-24T00:27:13Z,CLOSED,False,20,11,4,None,Wayland: Fix hidden windows,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1731,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1731#issuecomment-1000578478,"Corrects the protocol violation with attaching an xdg_surface to a wl_surface that already has a buffer. Destroying the xdg_surface is not necessary. Instead we just attach a null wl_buffer.
NOTE: this patch introduces new behavior where glfwSwapBuffers will always return immediately on Wayland if the window is hidden, even if there is a swap interval. This is probably better than the previous behavior where swapping a hidden window with swap interval >= 1 would cause the program to hang indefinitely in a frame callback. However, it could cause some applications to consume a lot of CPU if they keep a render loop going after hiding a window.
Fixes  #1492",Thank you for the fix and for your patience! This has (finally) been merged as 094aa6d.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/torkeldanielsson,1,https://github.com/glfw/glfw/pull/1736,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.","This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.",True,"{'THUMBS_UP': ['https://github.com/AbitTheGray', 'https://github.com/dpwiz', 'https://github.com/MagicalTux', 'https://github.com/kerskuchen', 'https://github.com/raysan5', 'https://github.com/svekel', 'https://github.com/h3xl3r', 'https://github.com/savegame', 'https://github.com/norcalli', 'https://github.com/lamarrr', 'https://github.com/JeftavanderHorst'], 'ROCKET': ['https://github.com/savegame']}"
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/pbouffard,2,https://github.com/glfw/glfw/pull/1736#issuecomment-754209444,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.","Would this enable gestures like pinch-to-zoom, two-finger panning, etc on Macs?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/torkeldanielsson,3,https://github.com/glfw/glfw/pull/1736#issuecomment-755431943,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.","Would this enable gestures like pinch-to-zoom, two-finger panning, etc on Macs?

No, for a number of reasons:

Touch function in this PR is Windows only
This PR adds ""raw"" touches, so for pinch and pan that needs to be handled on a higher level
This PR is touch as in touch-screen, not as in touch-pad (I am not aware of any mac with touch screens, not sure how macos handles connected external touch screens)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/zesinger,4,https://github.com/glfw/glfw/pull/1736#issuecomment-762458860,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.","@torkeldanielsson Thanks a lot for this. ATM I am working on a home made virtual jukebox UI and use GLFW. I'll control it via a 10"" touch screen with a mini PC (Windows 10) and I just need the touch press and release (with coordinates) functions and it seems to be available in your code.
I am new at github. Are there 64-bits glf3w.lib and glf3w.dll available to go with the headers you share here https://github.com/torkeldanielsson/glfw/tree/touch/include/GLFW ? And basic documentation on how to initialize and set the callback functions?
Thanks again
David",True,{}
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/raysan5,5,https://github.com/glfw/glfw/pull/1736#issuecomment-762461786,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.","Hi, in case it can be useful for someone, for raylib I created a single-file gestures.h module to manage gestures for the multiple platforms, receiving simple touch events.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/torkeldanielsson,6,https://github.com/glfw/glfw/pull/1736#issuecomment-762689649,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.","@torkeldanielsson Thanks a lot for this. ATM I am working on a home made virtual jukebox UI and use GLFW. I'll control it via a 10"" touch screen with a mini PC (Windows 10) and I just need the touch press and release (with coordinates) functions and it seems to be available in your code.
I am new at github. Are there 64-bits glf3w.lib and glf3w.dll available to go with the headers you share here https://github.com/torkeldanielsson/glfw/tree/touch/include/GLFW ? And basic documentation on how to initialize and set the callback functions?
Thanks again
David

This is a PR (pull request), which is a set of suggested changes to the master GLFW repository. The  .lib/.dll files are created as part of the release process, which is done from time to time based on the master. To use this version you need to clone my GLFW fork, check out this branch, and then build it. This PR includes documentation for the functionality that is added, you can see this by clicking on the ""files changed"" tab above.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/zesinger,7,https://github.com/glfw/glfw/pull/1736#issuecomment-762702341,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.","To use this version you need to clone my GLFW fork, check out this branch, and then build it. This PR includes documentation for the functionality that is added, you can see this by clicking on the ""files changed"" tab above.

OK I am going to try to understand how to build it with visual studio 2017.
Thanks a lot to take time to answer.
David",True,{}
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/blakat360,8,https://github.com/glfw/glfw/pull/1736#issuecomment-913135405,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.",Any news on this - currently use glfw as windowing system for a client that recently requested pinch to zoom support. Having this pulled into a release and not hacked into the build would be a massive plus.,True,"{'THUMBS_UP': ['https://github.com/h3xl3r', 'https://github.com/hirox', 'https://github.com/ws909']}"
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/ws909,9,https://github.com/glfw/glfw/pull/1736#issuecomment-1016159759,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.","It might be possible to capture touch input in macOS as well. Catalina introduced Sidecar, that can turn iPads into a secondary screen for Macs. I believe I read in the past that the iPad can be used to capture touch events, as well. In that case, glfwTouchInputSupported can take a monitor as an argument, to test it for the monitor itself. Hopefully, an iPad in Sidecar should be reported as another monitor? Nonetheless, Apple Pencil events can be captured by macOS, on the iPad. Unsure how, but I believe it's with this framework: https://developer.apple.com/documentation/pencilkit",True,{}
glfw/glfw,https://github.com/glfw/glfw,1736,2020-07-22T06:22:41Z,,2022-05-03T13:24:27Z,OPEN,False,337,15,12,https://github.com/torkeldanielsson,Touch input,2,"['enhancement', 'Windows', 'input']",https://github.com/glfw/glfw/pull/1736,https://github.com/jinfagang,10,https://github.com/glfw/glfw/pull/1736#issuecomment-1116093889,"This PR proposes to add the generic API from the touch branch for receiving touch input.
There exists at least the following efforts, since at least 2013 (!), to add touch to GLFW:

#42 The related touch branch was created by Quinten Lansu with additions (bananas!) from Camilla Löwy.
#532 An effort was made in 2015 to get touch working on Wayland by linkmauve.
#952 In 2017 Erik Sunden made a PR which (besides rebasing) proposed bundling touches before passing to callbacks.
Related: #90 (trackpads, but #42 is mentioned in the discussions)

Now, I have a customer who needs touch to work in our application (voysys.se) so I need touch to work (which it does) at least in a fork for us. Platform for my project is Windows. I added a few hours to the work package to be able to make this PR with these changes to the upstream. (If it is merged is of course an open question for the maintainers/community.)
After reading through the previous efforts on touch, above, I came to the conclusion that I like the callback api in the touch branch. It is based on WM_TOUCH, which is available from windows 7. The effort in PR #532 to add Wayland support indicates that the approach will work for other platforms too. Raw touch points with id, state (press/move/release), and position are passed in. It is up to the user to add inertia, gestures, whatever. I think this is a clean, sane low level api for touch and that it is the right approach. Because who knows what people want to do with the touches.
What I have done:

Rebased the touch branch on the latest upstream/master
Updated comments, defines, styling, etc to be in line with what the current standards seems to be (hope I got it right?)
Added a ""glfwTouchInputSupported"" to check for touch support (I'm open for removing this one - I took inspiration from the raw mouse support test function but that actually works slightly differently in that it is a per platform true/false thing. Touch is a platform, OS-version and also ""does the user actually have a touch screen"" question. Right now this function answers the platform and OS-version questions, but it doesn't know if the user has a touch screen.)
Used this to build a simple pan+zoom touch interface in our application
(I squashed the individual commits, because rebasing was easier this way and they did not build individually anyway)

I have tested this now on my laptop which has a touchscreen (surface book 2) and starting next week I will run tests on the target displays which are external multitouch monitors.
[2020-11-02] Update: this is running and working well on customer's site for a few months. Touch is the only input used, on two external touch monitors per pc. No issues has been reported.",Anyupdates? I need pin to zoom touch on Mac touchpad. This is support very well in XCode's 3D file viewer.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1738,2020-07-23T16:21:02Z,2020-07-23T20:24:43Z,2020-07-23T21:53:54Z,CLOSED,False,4,4,1,https://github.com/Luflosi,Return NULL instead of GLFW_FALSE where appropriate,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1738,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1738,"Related to 782e6b6.
I think this commit is correct because these functions return NULL in other cases as well and never GLFW_FALSE.","Related to 782e6b6.
I think this commit is correct because these functions return NULL in other cases as well and never GLFW_FALSE.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1738,2020-07-23T16:21:02Z,2020-07-23T20:24:43Z,2020-07-23T21:53:54Z,CLOSED,False,4,4,1,https://github.com/Luflosi,Return NULL instead of GLFW_FALSE where appropriate,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1738,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1738#issuecomment-663214556,"Related to 782e6b6.
I think this commit is correct because these functions return NULL in other cases as well and never GLFW_FALSE.",Thank you!,True,{'HEART': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1739,2020-07-24T10:40:37Z,2020-12-10T23:08:21Z,2021-10-24T16:42:59Z,CLOSED,False,188,124,4,https://github.com/Luflosi,Use switch statement instead of if-else-chain for cursor shapes,1,['enhancement'],https://github.com/glfw/glfw/pull/1739,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1739,"I propose replacing the if-else-chains for the cursor shapes with switch statements. Since the C language provides this construct for this exact purpose, I think we should use it. Is there any reason not to do that?","I propose replacing the if-else-chains for the cursor shapes with switch statements. Since the C language provides this construct for this exact purpose, I think we should use it. Is there any reason not to do that?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1739,2020-07-24T10:40:37Z,2020-12-10T23:08:21Z,2021-10-24T16:42:59Z,CLOSED,False,188,124,4,https://github.com/Luflosi,Use switch statement instead of if-else-chain for cursor shapes,1,['enhancement'],https://github.com/glfw/glfw/pull/1739,https://github.com/Luflosi,2,https://github.com/glfw/glfw/pull/1739#issuecomment-708374739,"I propose replacing the if-else-chains for the cursor shapes with switch statements. Since the C language provides this construct for this exact purpose, I think we should use it. Is there any reason not to do that?",It's been almost three months. Any chance to get this reviewed this year or at least tell me a rough time estimate?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1739,2020-07-24T10:40:37Z,2020-12-10T23:08:21Z,2021-10-24T16:42:59Z,CLOSED,False,188,124,4,https://github.com/Luflosi,Use switch statement instead of if-else-chain for cursor shapes,1,['enhancement'],https://github.com/glfw/glfw/pull/1739,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1739#issuecomment-711431139,"I propose replacing the if-else-chains for the cursor shapes with switch statements. Since the C language provides this construct for this exact purpose, I think we should use it. Is there any reason not to do that?",Thanks for the bump. Adding this to my queue. Should be merged soon.,True,"{'THUMBS_UP': ['https://github.com/Luflosi'], 'HOORAY': ['https://github.com/Luflosi', 'https://github.com/gracicot']}"
glfw/glfw,https://github.com/glfw/glfw,1745,2020-08-08T20:54:36Z,2020-09-02T19:47:23Z,2020-09-02T20:51:47Z,MERGED,True,1,1,1,https://github.com/Luflosi,Make _glfwPlatformInitJoysticks() return the correct type in null_joystick,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1745,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1745,"This code was introduced in 782e6b6.
All the other instances of _glfwPlatformInitJoysticks() also return GLFWbool.
Closes #1745.","This code was introduced in 782e6b6.
All the other instances of _glfwPlatformInitJoysticks() also return GLFWbool.
Closes #1745.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1745,2020-08-08T20:54:36Z,2020-09-02T19:47:23Z,2020-09-02T20:51:47Z,MERGED,True,1,1,1,https://github.com/Luflosi,Make _glfwPlatformInitJoysticks() return the correct type in null_joystick,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1745,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1745#issuecomment-685991049,"This code was introduced in 782e6b6.
All the other instances of _glfwPlatformInitJoysticks() also return GLFWbool.
Closes #1745.",Thank you!,True,{'HEART': ['https://github.com/Luflosi']}
glfw/glfw,https://github.com/glfw/glfw,1756,2020-08-31T15:50:37Z,,2021-07-11T17:00:11Z,OPEN,False,270,1,5,https://github.com/MTCoster,Add glfw3.hpp wrapper a la vulkan.hpp,1,[],https://github.com/glfw/glfw/pull/1756,https://github.com/MTCoster,1,https://github.com/glfw/glfw/pull/1756,"This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.","This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1756,2020-08-31T15:50:37Z,,2021-07-11T17:00:11Z,OPEN,False,270,1,5,https://github.com/MTCoster,Add glfw3.hpp wrapper a la vulkan.hpp,1,[],https://github.com/glfw/glfw/pull/1756,https://github.com/janekb04,2,https://github.com/glfw/glfw/pull/1756#issuecomment-786079331,"This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.","@MTCoster Hi, I also like the idea to have an official interface for C++ in GLFW. I would like to just quickly note that there are now two C++ wrappers for GLFW. I made one of them (GLFWPP) and it seems a bit similar to your proposal.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1756,2020-08-31T15:50:37Z,,2021-07-11T17:00:11Z,OPEN,False,270,1,5,https://github.com/MTCoster,Add glfw3.hpp wrapper a la vulkan.hpp,1,[],https://github.com/glfw/glfw/pull/1756,https://github.com/gracicot,3,https://github.com/glfw/glfw/pull/1756#issuecomment-786110744,"This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.",I added a few comments that would improve the interface a bit.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1756,2020-08-31T15:50:37Z,,2021-07-11T17:00:11Z,OPEN,False,270,1,5,https://github.com/MTCoster,Add glfw3.hpp wrapper a la vulkan.hpp,1,[],https://github.com/glfw/glfw/pull/1756,https://github.com/MTCoster,4,https://github.com/glfw/glfw/pull/1756#issuecomment-786712822,"This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.","@MTCoster Hi, I also like the idea to have an official interface for C++ in GLFW. [...] I made one of them (GLFWPP) and it seems a bit similar to your proposal.

Hi @janekb04, I don't think your wrapper existed when I first proposed this, but it looks almost exactly how I imagined mine would eventually! I think instead of reinventing the wheel, I would prefer to support getting your solution upstreamed as glfw3.hpp (if you are willing to contribute it of course).
Alternatively, I'd be happy to resume work on a version designed specifically to be part of the core GLFW library if you would prefer to keep your work separate. Either way; I'm glad there's support in the community for such an undertaking!

@gracicot, thank you for your feedback; as I mentioned in my initial PR, all the code here is in very early stages. Pending @janekb04's response, I will absolutely incorporate your feedback (and any future comments you have) into my development.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1756,2020-08-31T15:50:37Z,,2021-07-11T17:00:11Z,OPEN,False,270,1,5,https://github.com/MTCoster,Add glfw3.hpp wrapper a la vulkan.hpp,1,[],https://github.com/glfw/glfw/pull/1756,https://github.com/janekb04,5,https://github.com/glfw/glfw/pull/1756#issuecomment-787506494,"This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.","@MTCoster After giving it a thought, I would be very glad to have my library included as part of GLFW. It would certainly require some changes, but I don't think they would be substantial. I would mostly be just making it more in-line with modern C++ like by adding move semantics and possibly restructuring it to be in a single file or creating separate cpp file(s).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1756,2020-08-31T15:50:37Z,,2021-07-11T17:00:11Z,OPEN,False,270,1,5,https://github.com/MTCoster,Add glfw3.hpp wrapper a la vulkan.hpp,1,[],https://github.com/glfw/glfw/pull/1756,https://github.com/Arr4y,6,https://github.com/glfw/glfw/pull/1756#issuecomment-877699380,"This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.","One of my favorite bindings for glfw is vkfw (https://github.com/Cvelth/vkfw). One of the main reasons is that is has great support for Vulkan. I didn't realize it at first but it gave access to the hpp Vulkan headers. One of the main advantages is that it took significantly less lines of code to do things.
I am wondering if there's any plans to support Vulkan hpp headers with this?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1756,2020-08-31T15:50:37Z,,2021-07-11T17:00:11Z,OPEN,False,270,1,5,https://github.com/MTCoster,Add glfw3.hpp wrapper a la vulkan.hpp,1,[],https://github.com/glfw/glfw/pull/1756,https://github.com/janekb04,7,https://github.com/glfw/glfw/pull/1756#issuecomment-877768881,"This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.","@Arr4y Hi, my wrapper already supports Vulkan-Hpp.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1756,2020-08-31T15:50:37Z,,2021-07-11T17:00:11Z,OPEN,False,270,1,5,https://github.com/MTCoster,Add glfw3.hpp wrapper a la vulkan.hpp,1,[],https://github.com/glfw/glfw/pull/1756,https://github.com/Arr4y,8,https://github.com/glfw/glfw/pull/1756#issuecomment-877832298,"This is currently in a proof-of-concept state, and is by no means ready to merge.
I was inspired by vulkan.hpp to create a C++-style wrapper around glfw3.h: glfw3.hpp.
This allows for the use of paradigms central to C++ (such as RAII) when using GLFW.
I’m open to suggestions for how this should look (I do have some ideas of my own already), and more than willing to be responsible for its upkeep indefinitely.
As mentioned in the bold-text above, this is very much not complete yet. I’m posting this as a draft PR to gauge interest. If the maintainers are open to incorporating glfw3.hpp into the project, I’ll get on with fleshing it out.","@Arr4y Hi, my wrapper already supports Vulkan-Hpp.

Awesome. I'm looking forward to this. Thank you for the heads up.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1757,2020-09-01T07:27:02Z,2020-09-02T19:52:07Z,2020-09-02T20:08:25Z,CLOSED,False,28,11,3,https://github.com/siavashserver,[docs] Better scaling on mobile and small screens.,2,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1757,https://github.com/siavashserver,1,https://github.com/glfw/glfw/pull/1757,"Hopefully the docs will become easier to read on mobile devices.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71","Hopefully the docs will become easier to read on mobile devices.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1757,2020-09-01T07:27:02Z,2020-09-02T19:52:07Z,2020-09-02T20:08:25Z,CLOSED,False,28,11,3,https://github.com/siavashserver,[docs] Better scaling on mobile and small screens.,2,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1757,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1757#issuecomment-685770019,"Hopefully the docs will become easier to read on mobile devices.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71","Some of the elements in the top navigation bars seem to be displaced. Currently they look like this

With this PR they instead look like this on Firefox and Edge

Would it be possible to move the three top links to where it matches the rest of the site?",True,{'LAUGH': ['https://github.com/siavashserver']}
glfw/glfw,https://github.com/glfw/glfw,1757,2020-09-01T07:27:02Z,2020-09-02T19:52:07Z,2020-09-02T20:08:25Z,CLOSED,False,28,11,3,https://github.com/siavashserver,[docs] Better scaling on mobile and small screens.,2,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1757,https://github.com/siavashserver,3,https://github.com/glfw/glfw/pull/1757#issuecomment-685790094,"Hopefully the docs will become easier to read on mobile devices.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71",It should be fixed now; forgot to test on big displays xD,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1757,2020-09-01T07:27:02Z,2020-09-02T19:52:07Z,2020-09-02T20:08:25Z,CLOSED,False,28,11,3,https://github.com/siavashserver,[docs] Better scaling on mobile and small screens.,2,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1757,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1757#issuecomment-685961309,"Hopefully the docs will become easier to read on mobile devices.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1757,2020-09-01T07:27:02Z,2020-09-02T19:52:07Z,2020-09-02T20:08:25Z,CLOSED,False,28,11,3,https://github.com/siavashserver,[docs] Better scaling on mobile and small screens.,2,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1757,https://github.com/siavashserver,5,https://github.com/glfw/glfw/pull/1757#issuecomment-685967551,"Hopefully the docs will become easier to read on mobile devices.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71","You're welcome! 😊

…
On Thu, Sep 3, 2020, 12:23 AM Camilla Löwy ***@***.***> wrote:
 Thank you!

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#1757 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAIGT2QIQYVXFIOC63PVSXTSD2PEJANCNFSM4QRMDSUA>
 .",True,{}
glfw/glfw,https://github.com/glfw/glfw,1759,2020-09-03T12:34:40Z,2020-09-07T18:51:25Z,2021-02-12T11:45:59Z,CLOSED,False,73,72,3,https://github.com/siavashserver,[docs] Migrating to Sass for stylesheets.,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1759,https://github.com/siavashserver,1,https://github.com/glfw/glfw/pull/1759,"Migrating to Sass for docs as well to unify the workflow.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71 and #1757","Migrating to Sass for docs as well to unify the workflow.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71 and #1757",True,{}
glfw/glfw,https://github.com/glfw/glfw,1759,2020-09-03T12:34:40Z,2020-09-07T18:51:25Z,2021-02-12T11:45:59Z,CLOSED,False,73,72,3,https://github.com/siavashserver,[docs] Migrating to Sass for stylesheets.,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1759,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1759#issuecomment-686469569,"Migrating to Sass for docs as well to unify the workflow.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71 and #1757","Since this seems to be done mostly for variables, may I suggest using CSS custom properties instead? They don’t require any compilation step, and make it easier to change them at runtime (for instance for a dark theme, if we ever get one in the future).",True,{'HEART': ['https://github.com/siavashserver']}
glfw/glfw,https://github.com/glfw/glfw,1759,2020-09-03T12:34:40Z,2020-09-07T18:51:25Z,2021-02-12T11:45:59Z,CLOSED,False,73,72,3,https://github.com/siavashserver,[docs] Migrating to Sass for stylesheets.,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1759,https://github.com/siavashserver,3,https://github.com/glfw/glfw/pull/1759#issuecomment-686493858,"Migrating to Sass for docs as well to unify the workflow.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71 and #1757","I still rather to keep sass/less in my toolchain for stuff like mixins,
etc; they come in handy 😋

In other words sass/less and css vars can coexist and complement each other.
…
On Thu, Sep 3, 2020, 5:25 PM linkmauve ***@***.***> wrote:
 Since this seems to be done mostly for variables, may I suggest using CSS
 custom properties <https://developer.mozilla.org/en-US/docs/Web/CSS/--*>
 instead? They don’t require any compilation step, and make it easier to
 change them at runtime (for instance for a dark theme, if we ever get one
 in the future).

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#1759 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAIGT2SJOUGU3ZL27VLOX43SD6G4DANCNFSM4QUW4PWQ>
 .",True,{}
glfw/glfw,https://github.com/glfw/glfw,1759,2020-09-03T12:34:40Z,2020-09-07T18:51:25Z,2021-02-12T11:45:59Z,CLOSED,False,73,72,3,https://github.com/siavashserver,[docs] Migrating to Sass for stylesheets.,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1759,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/1759#issuecomment-686596892,"Migrating to Sass for docs as well to unify the workflow.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71 and #1757",I see no problem with that! :D,True,{'HEART': ['https://github.com/siavashserver']}
glfw/glfw,https://github.com/glfw/glfw,1759,2020-09-03T12:34:40Z,2020-09-07T18:51:25Z,2021-02-12T11:45:59Z,CLOSED,False,73,72,3,https://github.com/siavashserver,[docs] Migrating to Sass for stylesheets.,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1759,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1759#issuecomment-688537045,"Migrating to Sass for docs as well to unify the workflow.
Related: glfw/glfw.github.io#70
Follow up to : glfw/glfw.github.io#71 and #1757","Merged, thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1761,2020-09-04T16:09:27Z,2020-10-05T23:54:44Z,2020-10-06T00:06:09Z,CLOSED,False,2,0,1,https://github.com/dougbinks,Win32 update monitor handles when monitors are added or removed,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1761,https://github.com/dougbinks,1,https://github.com/glfw/glfw/pull/1761,"On Windows, when a monitor is added or removed (or in some cases just a display setting change is made), the monitor display handle can change.
Currently GLFW does not update handles for monitors whose names remain the same after a monitor change, which results in calls to some functions which need the monitor handle, such as glfwGetMonitorWorkArea to fail.
This PR has the minimal change needed to fix this by updating the monitor handle. A larger code change could be made which would minimize the computation, but as monitor changes are infrequent and also take some time this is a decent enough and minimal solution.
This should fix issue #1676","On Windows, when a monitor is added or removed (or in some cases just a display setting change is made), the monitor display handle can change.
Currently GLFW does not update handles for monitors whose names remain the same after a monitor change, which results in calls to some functions which need the monitor handle, such as glfwGetMonitorWorkArea to fail.
This PR has the minimal change needed to fix this by updating the monitor handle. A larger code change could be made which would minimize the computation, but as monitor changes are infrequent and also take some time this is a decent enough and minimal solution.
This should fix issue #1676",True,{}
glfw/glfw,https://github.com/glfw/glfw,1761,2020-09-04T16:09:27Z,2020-10-05T23:54:44Z,2020-10-06T00:06:09Z,CLOSED,False,2,0,1,https://github.com/dougbinks,Win32 update monitor handles when monitors are added or removed,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1761,https://github.com/dougbinks,2,https://github.com/glfw/glfw/pull/1761#issuecomment-687583006,"On Windows, when a monitor is added or removed (or in some cases just a display setting change is made), the monitor display handle can change.
Currently GLFW does not update handles for monitors whose names remain the same after a monitor change, which results in calls to some functions which need the monitor handle, such as glfwGetMonitorWorkArea to fail.
This PR has the minimal change needed to fix this by updating the monitor handle. A larger code change could be made which would minimize the computation, but as monitor changes are infrequent and also take some time this is a decent enough and minimal solution.
This should fix issue #1676","Just a quick note to say that should a more optimal performance version be required which only calls EnumDisplayMonitors once, I would be happy to make the change - it would only add a few more lines of code.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1761,2020-09-04T16:09:27Z,2020-10-05T23:54:44Z,2020-10-06T00:06:09Z,CLOSED,False,2,0,1,https://github.com/dougbinks,Win32 update monitor handles when monitors are added or removed,1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1761,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1761#issuecomment-703952913,"On Windows, when a monitor is added or removed (or in some cases just a display setting change is made), the monitor display handle can change.
Currently GLFW does not update handles for monitors whose names remain the same after a monitor change, which results in calls to some functions which need the monitor handle, such as glfwGetMonitorWorkArea to fail.
This PR has the minimal change needed to fix this by updating the monitor handle. A larger code change could be made which would minimize the computation, but as monitor changes are infrequent and also take some time this is a decent enough and minimal solution.
This should fix issue #1676","Thank you! This has been merged as 166611c.
This should be sufficiently optimal until the changes land that make disconnected monitor objects more robust.",True,{'THUMBS_UP': ['https://github.com/dougbinks']}
glfw/glfw,https://github.com/glfw/glfw,1769,2020-09-18T01:01:46Z,,2020-09-22T17:54:18Z,OPEN,False,8,2,2,https://github.com/satej1210,Desktop Environment freezes when GLFW Window width or height is >32767,2,"['bug', 'X11']",https://github.com/glfw/glfw/pull/1769,https://github.com/satej1210,1,https://github.com/glfw/glfw/pull/1769,"I found this bug while working with the GLFW library with Open3D.
Basically, if you set the width or height to 32768 in the boing.c example, the entire desktop would freeze. While stepping through the code, the program would freeze at XCheckTypedWindowEvent in x11_window.c:114.
I thought it made sense to add the assert statements to check for width <= 32767 and height <= 32767 because if you remove the asserts that are already present in the function, and the if statement to check if width or height <= 0, then the desktop environment will freeze in a similar way when you set the width or height > 32767.
OS: Linux 5.4.0-47-generic #51~18.04.1-Ubuntu SMP Sat Sep 5 14:35:50 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
xserver-xorg-core version: 1.20.8-2ubuntu2.2~18.04.3
Release or commit: 96f9f5c (latest commit)
Error messages: None because the system needs to be restarted.","I found this bug while working with the GLFW library with Open3D.
Basically, if you set the width or height to 32768 in the boing.c example, the entire desktop would freeze. While stepping through the code, the program would freeze at XCheckTypedWindowEvent in x11_window.c:114.
I thought it made sense to add the assert statements to check for width <= 32767 and height <= 32767 because if you remove the asserts that are already present in the function, and the if statement to check if width or height <= 0, then the desktop environment will freeze in a similar way when you set the width or height > 32767.
OS: Linux 5.4.0-47-generic #51~18.04.1-Ubuntu SMP Sat Sep 5 14:35:50 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
xserver-xorg-core version: 1.20.8-2ubuntu2.2~18.04.3
Release or commit: 96f9f5c (latest commit)
Error messages: None because the system needs to be restarted.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1769,2020-09-18T01:01:46Z,,2020-09-22T17:54:18Z,OPEN,False,8,2,2,https://github.com/satej1210,Desktop Environment freezes when GLFW Window width or height is >32767,2,"['bug', 'X11']",https://github.com/glfw/glfw/pull/1769,https://github.com/satej1210,2,https://github.com/glfw/glfw/pull/1769#issuecomment-694588965,"I found this bug while working with the GLFW library with Open3D.
Basically, if you set the width or height to 32768 in the boing.c example, the entire desktop would freeze. While stepping through the code, the program would freeze at XCheckTypedWindowEvent in x11_window.c:114.
I thought it made sense to add the assert statements to check for width <= 32767 and height <= 32767 because if you remove the asserts that are already present in the function, and the if statement to check if width or height <= 0, then the desktop environment will freeze in a similar way when you set the width or height > 32767.
OS: Linux 5.4.0-47-generic #51~18.04.1-Ubuntu SMP Sat Sep 5 14:35:50 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
xserver-xorg-core version: 1.20.8-2ubuntu2.2~18.04.3
Release or commit: 96f9f5c (latest commit)
Error messages: None because the system needs to be restarted.","Probably worth mentioning that this bug only occurs on xserver-xorg-core version 1.20.8-2ubuntu2.2~18.04.3 (which is on Ubuntu 18.04), but does not show up on 1.20.8-2ubuntu2.4 (on Ubuntu 20.04).
Also, since this looks like a integer overflow bug, it might also be a compiler issue. So the bug occurs on GCC 7.5.0 and not on GCC 9.3.0",True,{}
glfw/glfw,https://github.com/glfw/glfw,1770,2020-09-18T12:28:59Z,2020-09-22T17:51:31Z,2020-09-22T17:52:34Z,MERGED,True,16,16,1,https://github.com/Luflosi,Use consistent indentation for Doxygen custom stylesheet,1,['documentation'],https://github.com/glfw/glfw/pull/1770,https://github.com/Luflosi,1,https://github.com/glfw/glfw/pull/1770,Most of this file is indented with tabs but parts are indented with spaces.,Most of this file is indented with tabs but parts are indented with spaces.,True,"{'HEART': ['https://github.com/siavashserver'], 'THUMBS_UP': ['https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1774,2020-09-29T05:36:15Z,2020-09-30T15:03:09Z,2021-02-12T11:48:04Z,CLOSED,False,45,37,3,https://github.com/jwinarske,remove ECM dependency,1,"['enhancement', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1774,https://github.com/jwinarske,1,https://github.com/glfw/glfw/pull/1774,"This PR removes the ECM build dependency for Wayland.
This PR was built and tested on Ubuntu 18.04.5 LTS and Yocto Dunfell.","This PR removes the ECM build dependency for Wayland.
This PR was built and tested on Ubuntu 18.04.5 LTS and Yocto Dunfell.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1774,2020-09-29T05:36:15Z,2020-09-30T15:03:09Z,2021-02-12T11:48:04Z,CLOSED,False,45,37,3,https://github.com/jwinarske,remove ECM dependency,1,"['enhancement', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1774,https://github.com/jwinarske,2,https://github.com/glfw/glfw/pull/1774#issuecomment-701006158,"This PR removes the ECM build dependency for Wayland.
This PR was built and tested on Ubuntu 18.04.5 LTS and Yocto Dunfell.","Well I was using the wrong package name...  It is in fact there :)  I rarely use the CMake that comes with a distro, so I would have to manually override it either way.  I'll update PR in a couple of hours.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1774,2020-09-29T05:36:15Z,2020-09-30T15:03:09Z,2021-02-12T11:48:04Z,CLOSED,False,45,37,3,https://github.com/jwinarske,remove ECM dependency,1,"['enhancement', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/1774,https://github.com/linkmauve,3,https://github.com/glfw/glfw/pull/1774#issuecomment-701449460,"This PR removes the ECM build dependency for Wayland.
This PR was built and tested on Ubuntu 18.04.5 LTS and Yocto Dunfell.","Thanks, and merged!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1775,2020-09-29T17:09:12Z,2020-10-05T23:54:44Z,2020-10-06T00:06:38Z,CLOSED,False,1,1,1,https://github.com/perminovVS,Fix incorrect define _WIN32_WINNT_WINBLUE,1,"['bug', 'Windows', 'verified', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1775,https://github.com/perminovVS,1,https://github.com/glfw/glfw/pull/1775,"On Windows 8 app crach, not correct check version in _glfwPlatformInit.
IsWindows8Point1OrGreater() return true on Windows 8.
SetProcessDpiAwareness crach, glfw.win32.shcore.SetProcessDpiAwareness is NULL.
Correct:
#define _WIN32_WINNT_WIN8       0x0602 // Windows 8
#define _WIN32_WINNT_WINBLUE 0x0603 // Windows 8.1
https://docs.microsoft.com/ru-ru/cpp/porting/modifying-winver-and-win32-winnt?view=vs-2019","On Windows 8 app crach, not correct check version in _glfwPlatformInit.
IsWindows8Point1OrGreater() return true on Windows 8.
SetProcessDpiAwareness crach, glfw.win32.shcore.SetProcessDpiAwareness is NULL.
Correct:
#define _WIN32_WINNT_WIN8       0x0602 // Windows 8
#define _WIN32_WINNT_WINBLUE 0x0603 // Windows 8.1
https://docs.microsoft.com/ru-ru/cpp/porting/modifying-winver-and-win32-winnt?view=vs-2019",True,{}
glfw/glfw,https://github.com/glfw/glfw,1775,2020-09-29T17:09:12Z,2020-10-05T23:54:44Z,2020-10-06T00:06:38Z,CLOSED,False,1,1,1,https://github.com/perminovVS,Fix incorrect define _WIN32_WINNT_WINBLUE,1,"['bug', 'Windows', 'verified', 'critical :rotating_light:']",https://github.com/glfw/glfw/pull/1775,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1775#issuecomment-703953044,"On Windows 8 app crach, not correct check version in _glfwPlatformInit.
IsWindows8Point1OrGreater() return true on Windows 8.
SetProcessDpiAwareness crach, glfw.win32.shcore.SetProcessDpiAwareness is NULL.
Correct:
#define _WIN32_WINNT_WIN8       0x0602 // Windows 8
#define _WIN32_WINNT_WINBLUE 0x0603 // Windows 8.1
https://docs.microsoft.com/ru-ru/cpp/porting/modifying-winver-and-win32-winnt?view=vs-2019",Thank you! This has been merged as 53b1396.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1778,2020-10-03T13:15:55Z,,2022-06-01T18:51:33Z,OPEN,False,71,31,2,https://github.com/thisistherk,Add native API to allow access to Metal surface on Mac,7,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1778,https://github.com/thisistherk,1,https://github.com/glfw/glfw/pull/1778,"Adds a new native API on Mac, glfwGetMetalLayer, to retrieve (and create if necessary) the metal layer for a window.  I've been using this for Vulkan where I want to handle the surface creation myself rather than have GLFW do it for me.","Adds a new native API on Mac, glfwGetMetalLayer, to retrieve (and create if necessary) the metal layer for a window.  I've been using this for Vulkan where I want to handle the surface creation myself rather than have GLFW do it for me.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1778,2020-10-03T13:15:55Z,,2022-06-01T18:51:33Z,OPEN,False,71,31,2,https://github.com/thisistherk,Add native API to allow access to Metal surface on Mac,7,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1778,https://github.com/lance5,2,https://github.com/glfw/glfw/pull/1778#issuecomment-735506742,"Adds a new native API on Mac, glfwGetMetalLayer, to retrieve (and create if necessary) the metal layer for a window.  I've been using this for Vulkan where I want to handle the surface creation myself rather than have GLFW do it for me.","hi, when are completa for this work?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1778,2020-10-03T13:15:55Z,,2022-06-01T18:51:33Z,OPEN,False,71,31,2,https://github.com/thisistherk,Add native API to allow access to Metal surface on Mac,7,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1778,https://github.com/allcreater,3,https://github.com/glfw/glfw/pull/1778#issuecomment-1001251086,"Adds a new native API on Mac, glfwGetMetalLayer, to retrieve (and create if necessary) the metal layer for a window.  I've been using this for Vulkan where I want to handle the surface creation myself rather than have GLFW do it for me.","This function seems to be absolutely essential for using GLFW with the Apple Metal-cpp library, which only works with the existing CAMetalLayer (which, as far as I understand, can only be created from Objective-C)
I think this feature is really important, let's add it please :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1778,2020-10-03T13:15:55Z,,2022-06-01T18:51:33Z,OPEN,False,71,31,2,https://github.com/thisistherk,Add native API to allow access to Metal surface on Mac,7,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1778,https://github.com/olesgedz,4,https://github.com/glfw/glfw/pull/1778#issuecomment-1015218137,"Adds a new native API on Mac, glfwGetMetalLayer, to retrieve (and create if necessary) the metal layer for a window.  I've been using this for Vulkan where I want to handle the surface creation myself rather than have GLFW do it for me.","Hi, trying to use it with metal-cpp bindings, but getting redefinition errors:
In file included from /Users/odgedz/Documents/Github/MetalOpenglWrapper/extern/metal-cpp/Foundation/Foundation.hpp:25:
In file included from /Users/odgedz/Documents/Github/MetalOpenglWrapper/extern/metal-cpp/Foundation/NSArray.hpp:25:
In file included from /Users/odgedz/Documents/Github/MetalOpenglWrapper/extern/metal-cpp/Foundation/NSObject.hpp:26:
In file included from /Users/odgedz/Documents/Github/MetalOpenglWrapper/extern/metal-cpp/Foundation/NSPrivate.hpp:25:
In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/objc/runtime.h:27:
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/objc/objc.h:46:29: error: typedef redefinition with different types ('struct objc_object *' vs 'void *')
typedef struct objc_object id;
^
/Users/odgedz/Documents/Github/MetalOpenglWrapper/extern/glfwLayer/include/GLFW/glfw3native.h:98:17: note: previous definition is here
typedef void id;
HEADERS:
#include 
#define GLFW_INCLUDE_NONE
#define GLFW_EXPOSE_NATIVE_COCOA
#include <GLFW/glfw3.h>
#include <GLFW/glfw3native.h>
#define NS_PRIVATE_IMPLEMENTATION
#define CA_PRIVATE_IMPLEMENTATION
#define MTL_PRIVATE_IMPLEMENTATION
#include ""Foundation/Foundation.hpp""
#include ""Metal/Metal.hpp""
#include ""QuartzCore/CAMetalLayer.h""
is it strictly for objective-c++ or there is a way to get a layer with metal-cpp bindings?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1778,2020-10-03T13:15:55Z,,2022-06-01T18:51:33Z,OPEN,False,71,31,2,https://github.com/thisistherk,Add native API to allow access to Metal surface on Mac,7,"['enhancement', 'macOS']",https://github.com/glfw/glfw/pull/1778,https://github.com/allcreater,5,https://github.com/glfw/glfw/pull/1778#issuecomment-1015873801,"Adds a new native API on Mac, glfwGetMetalLayer, to retrieve (and create if necessary) the metal layer for a window.  I've been using this for Vulkan where I want to handle the surface creation myself rather than have GLFW do it for me.","Hi, trying to use it with metal-cpp bindings, but getting redefinition errors:
...
/Users/odgedz/Documents/Github/MetalOpenglWrapper/extern/glfwLayer/include/GLFW/glfw3native.h:98:17: note: previous definition is here
typedef void id;

Don't know how to solve this kind of problems right, but my workaround were total segregation GLFW from Metal-cpp by units of translation, and transfering id type as void* :/
To be honest right now I use SDL due to the lack of this patch, but my personal project should works with GLFW too when the platform swapchain will be exposed.
PS: small note to your description for readers: probably you try compile this code not from headers but at implementation file, because _PRIVATE_IMPLEMENTATION defines must be in only one translation unit :)

is it strictly for objective-c++ or there is a way to get a layer with metal-cpp bindings?

Seems like pure C++, but to be honest I'm not sure that Apple Clang don't uses some extensions by default :)",True,{'LAUGH': ['https://github.com/olesgedz']}
glfw/glfw,https://github.com/glfw/glfw,1779,2020-10-03T20:24:27Z,2020-10-04T18:31:14Z,2021-02-12T11:43:33Z,MERGED,True,0,60,2,https://github.com/caramelli,Wayland: Remove FindWaylandProtocols.cmake and FindXKBCommon.cmake,1,"['Wayland', 'build']",https://github.com/glfw/glfw/pull/1779,https://github.com/caramelli,1,https://github.com/glfw/glfw/pull/1779,"With the removal of the ECM (Extra CMake Modules) dependency, FindXKBCommon.cmake and FindWaylandProtocols.cmake can be removed.
Nicolas Caramelli","With the removal of the ECM (Extra CMake Modules) dependency, FindXKBCommon.cmake and FindWaylandProtocols.cmake can be removed.
Nicolas Caramelli",True,{'THUMBS_UP': ['https://github.com/linkmauve']}
glfw/glfw,https://github.com/glfw/glfw,1779,2020-10-03T20:24:27Z,2020-10-04T18:31:14Z,2021-02-12T11:43:33Z,MERGED,True,0,60,2,https://github.com/caramelli,Wayland: Remove FindWaylandProtocols.cmake and FindXKBCommon.cmake,1,"['Wayland', 'build']",https://github.com/glfw/glfw/pull/1779,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1779#issuecomment-703296465,"With the removal of the ECM (Extra CMake Modules) dependency, FindXKBCommon.cmake and FindWaylandProtocols.cmake can be removed.
Nicolas Caramelli","Indeed, thanks!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1781,2020-10-04T19:37:17Z,2020-10-05T23:54:45Z,2020-10-06T00:07:04Z,CLOSED,False,46,142,1,https://github.com/caramelli,triangle-vulkan test: Update shader code,1,"['bug', 'Vulkan']",https://github.com/glfw/glfw/pull/1781,https://github.com/caramelli,1,https://github.com/glfw/glfw/pull/1781,"Updated shader code with the output of the glslangValidator tool to avoid the SPIRV error ""Vulkan spec doesn't allow BuiltIn VertexId/InstanceId to be used.""
Nicolas Caramelli","Updated shader code with the output of the glslangValidator tool to avoid the SPIRV error ""Vulkan spec doesn't allow BuiltIn VertexId/InstanceId to be used.""
Nicolas Caramelli",True,{}
glfw/glfw,https://github.com/glfw/glfw,1781,2020-10-04T19:37:17Z,2020-10-05T23:54:45Z,2020-10-06T00:07:04Z,CLOSED,False,46,142,1,https://github.com/caramelli,triangle-vulkan test: Update shader code,1,"['bug', 'Vulkan']",https://github.com/glfw/glfw/pull/1781,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1781#issuecomment-703953152,"Updated shader code with the output of the glslangValidator tool to avoid the SPIRV error ""Vulkan spec doesn't allow BuiltIn VertexId/InstanceId to be used.""
Nicolas Caramelli",Thank you! This has been merged as 8d47dc5.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1782,2020-10-08T22:01:35Z,,2021-09-03T14:51:08Z,OPEN,False,17,17,1,https://github.com/jwinarske,Wayland: create missing directory and use proper binary folder,1,"['bug', 'Wayland', 'cannot reproduce', 'build']",https://github.com/glfw/glfw/pull/1782,https://github.com/jwinarske,1,https://github.com/glfw/glfw/pull/1782,"Fixes item misses in last PR.

If ran on clean tree, it would fail as nothing was creating the src directory.
If using add_directory scheme, build fails as source files were going to incorrect folder.","Fixes item misses in last PR.

If ran on clean tree, it would fail as nothing was creating the src directory.
If using add_directory scheme, build fails as source files were going to incorrect folder.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1782,2020-10-08T22:01:35Z,,2021-09-03T14:51:08Z,OPEN,False,17,17,1,https://github.com/jwinarske,Wayland: create missing directory and use proper binary folder,1,"['bug', 'Wayland', 'cannot reproduce', 'build']",https://github.com/glfw/glfw/pull/1782,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1782#issuecomment-706219508,"Fixes item misses in last PR.

If ran on clean tree, it would fail as nothing was creating the src directory.
If using add_directory scheme, build fails as source files were going to incorrect folder.",I can verify the second issue you list but not the first one.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1782,2020-10-08T22:01:35Z,,2021-09-03T14:51:08Z,OPEN,False,17,17,1,https://github.com/jwinarske,Wayland: create missing directory and use proper binary folder,1,"['bug', 'Wayland', 'cannot reproduce', 'build']",https://github.com/glfw/glfw/pull/1782,https://github.com/jwinarske,3,https://github.com/glfw/glfw/pull/1782#issuecomment-706459589,"Fixes item misses in last PR.

If ran on clean tree, it would fail as nothing was creating the src directory.
If using add_directory scheme, build fails as source files were going to incorrect folder.",Try creating a new build folder.  There was certainly a case I hit where it failed to copy due to a non-existent folder,True,{}
glfw/glfw,https://github.com/glfw/glfw,1782,2020-10-08T22:01:35Z,,2021-09-03T14:51:08Z,OPEN,False,17,17,1,https://github.com/jwinarske,Wayland: create missing directory and use proper binary folder,1,"['bug', 'Wayland', 'cannot reproduce', 'build']",https://github.com/glfw/glfw/pull/1782,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1782#issuecomment-707209211,"Fixes item misses in last PR.

If ran on clean tree, it would fail as nothing was creating the src directory.
If using add_directory scheme, build fails as source files were going to incorrect folder.","Hmm. Tried it again now. It seems the ${GLFW_BINARY_DIR}/src directory is created during CMake generation when files like glfw3.pc and glfw_config.h are created, while the Wayland proxy sources are generated as part of the build, which is necessarily later.
I will merge the binary directory fixes in the meantime. Thank you for those!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1782,2020-10-08T22:01:35Z,,2021-09-03T14:51:08Z,OPEN,False,17,17,1,https://github.com/jwinarske,Wayland: create missing directory and use proper binary folder,1,"['bug', 'Wayland', 'cannot reproduce', 'build']",https://github.com/glfw/glfw/pull/1782,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1782#issuecomment-707211581,"Fixes item misses in last PR.

If ran on clean tree, it would fail as nothing was creating the src directory.
If using add_directory scheme, build fails as source files were going to incorrect folder.","All the path handling in the previous PR used unquoted variable references, so if there was whitespace in any path then that may explain why you got those errors.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1782,2020-10-08T22:01:35Z,,2021-09-03T14:51:08Z,OPEN,False,17,17,1,https://github.com/jwinarske,Wayland: create missing directory and use proper binary folder,1,"['bug', 'Wayland', 'cannot reproduce', 'build']",https://github.com/glfw/glfw/pull/1782,https://github.com/jwinarske,6,https://github.com/glfw/glfw/pull/1782#issuecomment-707238514,"Fixes item misses in last PR.

If ran on clean tree, it would fail as nothing was creating the src directory.
If using add_directory scheme, build fails as source files were going to incorrect folder.","In my case there were no white spaces in the path (only if I need to build something on Windows, which aside from quotes, will also most likely require path conversion).  When using ""add_custom_command"" the target directory isn't created auto-magically, it needs to be created manually.  If you attempt to build this project standalone, it builds fine as the folder required for the ""add_custom""command"" exists.  My repro case adds glfw3 via ""add_subdirectory"", opposed to ""ExternalProject_Add"".  This should not repro for standalone or ""ExternalProject_Add"" cases.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1782,2020-10-08T22:01:35Z,,2021-09-03T14:51:08Z,OPEN,False,17,17,1,https://github.com/jwinarske,Wayland: create missing directory and use proper binary folder,1,"['bug', 'Wayland', 'cannot reproduce', 'build']",https://github.com/glfw/glfw/pull/1782,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1782#issuecomment-707249230,"Fixes item misses in last PR.

If ran on clean tree, it would fail as nothing was creating the src directory.
If using add_directory scheme, build fails as source files were going to incorrect folder.","Still can't reproduce this. I tried with the starter project now (Edit: with the submodule updated), which adds GLFW as a subdirectory. Once I'd applied the binary directory fixes above it works as expected. Tested with the make and Ninja generators.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1784,2020-10-14T08:30:11Z,2020-10-14T10:04:29Z,2020-10-19T22:29:20Z,MERGED,True,13,0,1,https://github.com/caramelli,Wayland: Assume 96 DPI if physical size is <= 0,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1784,https://github.com/caramelli,1,https://github.com/glfw/glfw/pull/1784,"This fallback is similar to the one performed in the ""X11: Assume 96 DPI if RandR Monitor Size is zero"" commit: e96dc5d
Nicolas Caramelli","This fallback is similar to the one performed in the ""X11: Assume 96 DPI if RandR Monitor Size is zero"" commit: e96dc5d
Nicolas Caramelli",True,{}
glfw/glfw,https://github.com/glfw/glfw,1784,2020-10-14T08:30:11Z,2020-10-14T10:04:29Z,2020-10-19T22:29:20Z,MERGED,True,13,0,1,https://github.com/caramelli,Wayland: Assume 96 DPI if physical size is <= 0,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1784,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1784#issuecomment-708299840,"This fallback is similar to the one performed in the ""X11: Assume 96 DPI if RandR Monitor Size is zero"" commit: e96dc5d
Nicolas Caramelli",Thanks! This indeed helps on projectors and other outputs which don’t have an intrinsic size.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1784,2020-10-14T08:30:11Z,2020-10-14T10:04:29Z,2020-10-19T22:29:20Z,MERGED,True,13,0,1,https://github.com/caramelli,Wayland: Assume 96 DPI if physical size is <= 0,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1784,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1784#issuecomment-711430758,"This fallback is similar to the one performed in the ""X11: Assume 96 DPI if RandR Monitor Size is zero"" commit: e96dc5d
Nicolas Caramelli",Would it be possible to do this in outputHandleGeometry in wl_monitor.c instead of having it as a separate pass?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1784,2020-10-14T08:30:11Z,2020-10-14T10:04:29Z,2020-10-19T22:29:20Z,MERGED,True,13,0,1,https://github.com/caramelli,Wayland: Assume 96 DPI if physical size is <= 0,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1784,https://github.com/caramelli,4,https://github.com/glfw/glfw/pull/1784#issuecomment-712410738,"This fallback is similar to the one performed in the ""X11: Assume 96 DPI if RandR Monitor Size is zero"" commit: e96dc5d
Nicolas Caramelli","The outputHandleGeometry() callback is called before the outputHandleMode() callback which provides width and height
But yes we can do something in the outputHandleMode() callback, that's another solution!
I created another pull request if you prefer to use this method: #1792",True,{}
glfw/glfw,https://github.com/glfw/glfw,1786,2020-10-14T16:53:56Z,2020-11-17T23:11:03Z,2020-11-17T23:11:04Z,CLOSED,False,1,1,1,https://github.com/andydotxyz,Fix macOS Print Screen,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1786,https://github.com/andydotxyz,1,https://github.com/glfw/glfw/pull/1786,"Many years ago this value was set to PRINT_SCREEN 1ae9ce1.
However when the file was tidied and moved the information was list.
Attempting to re-instate to fix Print Screen on macOS.","Many years ago this value was set to PRINT_SCREEN 1ae9ce1.
However when the file was tidied and moved the information was list.
Attempting to re-instate to fix Print Screen on macOS.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1792,2020-10-19T20:01:50Z,2020-12-10T23:08:21Z,2021-02-12T13:26:29Z,CLOSED,False,9,13,2,https://github.com/caramelli,Wayland: Move the 96 DPI assumption into the outputHandleMode() callback,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1792,https://github.com/caramelli,1,https://github.com/glfw/glfw/pull/1792,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1792,2020-10-19T20:01:50Z,2020-12-10T23:08:21Z,2021-02-12T13:26:29Z,CLOSED,False,9,13,2,https://github.com/caramelli,Wayland: Move the 96 DPI assumption into the outputHandleMode() callback,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1792,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1792#issuecomment-743129640,,"Hi, sorry for not reviewing this PR before it was merged, but it relies on the assumption that the mode event will be sent after the geometry event on a given wl_output, which is all but guaranteed.
The proper way to do so would be to store these properties in a temporary struct, and apply them in the done handler (if the protocol version is ≥ 2, otherwise to do it every time a mode or geometry event is received) so that it can react to live changes. Those are arguably quite rare, a normal monitor doesn’t often change its physical size for instance, but it could perfectly do in a VR setup, or in other kinds of non-conventional monitors.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1792,2020-10-19T20:01:50Z,2020-12-10T23:08:21Z,2021-02-12T13:26:29Z,CLOSED,False,9,13,2,https://github.com/caramelli,Wayland: Move the 96 DPI assumption into the outputHandleMode() callback,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1792,https://github.com/caramelli,3,https://github.com/glfw/glfw/pull/1792#issuecomment-743163179,,"If we consider Weston (reference implementation of a Wayland compositor), the outputHandleGeometry() callback is called before the outputHandleMode():
wl_output_send_geometry(resource,
			output->x,
			output->y,
			head->mm_width,
			head->mm_height,
			head->subpixel,
			head->make, head->model,
			output->transform);
if (version >= WL_OUTPUT_SCALE_SINCE_VERSION)
	wl_output_send_scale(resource,
			     output->current_scale);

wl_list_for_each (mode, &output->mode_list, link) {
	wl_output_send_mode(resource,
			    mode->flags,
			    mode->width,
			    mode->height,
			    mode->refresh);
}

Yes, the PR is based on this consideration.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1792,2020-10-19T20:01:50Z,2020-12-10T23:08:21Z,2021-02-12T13:26:29Z,CLOSED,False,9,13,2,https://github.com/caramelli,Wayland: Move the 96 DPI assumption into the outputHandleMode() callback,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1792,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/1792#issuecomment-743165889,,"The protocol is the source of truth defining what an acceptable behaviour can be, and I couldn’t find any mention of an order there, except that done gets emitted after all the other ones are sent, so I’d advise not relying on implementation details of a single compositor (and even if all current compositors would share this implementation detail, it doesn’t mean a future one couldn’t send events in a different order).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1792,2020-10-19T20:01:50Z,2020-12-10T23:08:21Z,2021-02-12T13:26:29Z,CLOSED,False,9,13,2,https://github.com/caramelli,Wayland: Move the 96 DPI assumption into the outputHandleMode() callback,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1792,https://github.com/caramelli,5,https://github.com/glfw/glfw/pull/1792#issuecomment-743240265,,"OK, so we can do something in the outputHandleDone() callback as you suggest.
Wayland versions without ""done"" event support are very old (this raises me questions about CMakeLists.txt: the pkg_check_modules for Wayland with version 0.2.7 is a strange version number ...)
I have tested the following code:
static void outputHandleDone(void* data, struct wl_output* output)
{
    struct _GLFWmonitor *monitor = data;
    int i;

    for (i = 0; i < monitor->modeCount; ++i)
    {
        if (i == monitor->wl.currentMode && (monitor->widthMM <= 0 || monitor->heightMM <= 0))
        {
            // If Wayland does not provide a physical size, assume the default 96 DPI
            monitor->widthMM  = (int) (monitor->modes[monitor->wl.currentMode].width * 25.4f / 96.f);
            monitor->heightMM = (int) (monitor->modes[monitor->wl.currentMode].height * 25.4f / 96.f);
            break;
        }
    }

    _glfwInputMonitor(monitor, GLFW_CONNECTED, _GLFW_INSERT_LAST);
}

Maybe we need to do a new PR",True,{}
glfw/glfw,https://github.com/glfw/glfw,1792,2020-10-19T20:01:50Z,2020-12-10T23:08:21Z,2021-02-12T13:26:29Z,CLOSED,False,9,13,2,https://github.com/caramelli,Wayland: Move the 96 DPI assumption into the outputHandleMode() callback,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1792,https://github.com/linkmauve,6,https://github.com/glfw/glfw/pull/1792#issuecomment-743773345,,"This one looks more correct, thanks!
We can rely on done being present, since we reject any wl_output with a version lower than 2: https://github.com/glfw/glfw/blob/master/src/wl_monitor.c#L129",True,{}
glfw/glfw,https://github.com/glfw/glfw,1792,2020-10-19T20:01:50Z,2020-12-10T23:08:21Z,2021-02-12T13:26:29Z,CLOSED,False,9,13,2,https://github.com/caramelli,Wayland: Move the 96 DPI assumption into the outputHandleMode() callback,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1792,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1792#issuecomment-777747555,,I hope b925a54 is a step in the right direction.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1792,2020-10-19T20:01:50Z,2020-12-10T23:08:21Z,2021-02-12T13:26:29Z,CLOSED,False,9,13,2,https://github.com/caramelli,Wayland: Move the 96 DPI assumption into the outputHandleMode() callback,1,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1792,https://github.com/higfxback,8,https://github.com/glfw/glfw/pull/1792#issuecomment-778194299,,"OK, I tested the code corresponding to this last commit, no issue for me!
Nicolas Caramelli",True,"{'THUMBS_UP': ['https://github.com/elmindreda'], 'HOORAY': ['https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/caramelli,1,https://github.com/glfw/glfw/pull/1793,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli","If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli",True,{}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/caramelli,2,https://github.com/glfw/glfw/pull/1793#issuecomment-725020565,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli","Reading through the internal implementation of glfw, it seems to me that using a hint instead of an environment variable would be quite appropriate. So I updated the change.
Nicolas Caramelli",True,{}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1793#issuecomment-725635264,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli",Is there an issue with VK_KHR_xcb_surface that this is working around or is it a matter of preference?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/caramelli,4,https://github.com/glfw/glfw/pull/1793#issuecomment-725688131,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli","The uses of VK_KHR_xcb_surface and VK_KHR_xlib_surface in GLFW are both fine: VK_KHR_xcb_surface is used by default (if libX11-xcb.so is available on the system), and there is no issue with that!
But VK_KHR_xcb_surface and VK_KHR_xlib_surface have a specific implementation in the Vulkan ICD (Installable Client Driver), with sometimes different behaviors or performances depending on the internal implementation of the ICD. Yes, the purpose of the proposed change is to have the ability to select or test the VK_KHR_xlib_surface extension available in the ICD.
Nicolas Caramelli",True,{}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/caramelli,5,https://github.com/glfw/glfw/pull/1793#issuecomment-729878005,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli",Do you still have reservations about this change?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1793#issuecomment-730034188,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli",I'm concerned that the hint name is too generic. Perhaps something like GLFW_X11_XCB_VULKAN_SURFACE?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/caramelli,7,https://github.com/glfw/glfw/pull/1793#issuecomment-730207261,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli","Thanks for your comment.
In the current implementation, XCB is only used to create the Vulkan surface, but yes, XCB could be used for other things.
OK, I updated the hint name with GLFW_X11_XCB_VULKAN_SURFACE",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/caramelli,8,https://github.com/glfw/glfw/pull/1793#issuecomment-816607828,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli","If you see others changes required for this PR, do not hesitate to let me know!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/elmindreda,9,https://github.com/glfw/glfw/pull/1793#issuecomment-825190450,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli",This feature has been merged as 84f95a7. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1793,2020-10-23T16:59:40Z,2021-04-22T20:40:20Z,2021-07-18T07:24:13Z,CLOSED,False,21,3,4,https://github.com/caramelli,Init hint to pick VK_KHR_xlib_surface instead of VK_KHR_xcb_surface,3,"['enhancement', 'X11', 'Vulkan']",https://github.com/glfw/glfw/pull/1793,https://github.com/caramelli,10,https://github.com/glfw/glfw/pull/1793#issuecomment-882012867,"If libX11-xcb.so is available on the system, the VK_KHR_xcb_surface extension is used and there is no way to force the use of the VK_KHR_xlib_surface extension.
This change adds the GLFW_NO_XCB environment variable to do this, but a better workaround might exist.
Nicolas Caramelli","GLFW_X11_XCB_VULKAN_SURFACE hint is now used in https://github.com/KhronosGroup/Vulkan-Samples
Thanks for having merged this!",True,"{'THUMBS_UP': ['https://github.com/elmindreda'], 'HOORAY': ['https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1795,2020-10-25T09:58:22Z,,2020-11-11T20:05:40Z,OPEN,False,5,1,1,https://github.com/tomc1998,Added dumb fix for disabled cursor snapping to center,1,"['bug', 'X11', 'input']",https://github.com/glfw/glfw/pull/1795,https://github.com/tomc1998,1,https://github.com/glfw/glfw/pull/1795,"This is a fix for #1790
The cursor callback was being called, snapping the cursor back to the center of the window, when the cursor was disabled.
This PR disables calling the cursor callback for 'EnterNotify' X11 events, which seemed to be the root of the snapping. This seems to fix all the issues I was having.
Unsure whether this is the correct solution, since I don't understand the purpose of the GLFW cursor warping - with this change, the virtual cursor position will grow and grow to quite absurd sizes. This might not be the correct fix!","This is a fix for #1790
The cursor callback was being called, snapping the cursor back to the center of the window, when the cursor was disabled.
This PR disables calling the cursor callback for 'EnterNotify' X11 events, which seemed to be the root of the snapping. This seems to fix all the issues I was having.
Unsure whether this is the correct solution, since I don't understand the purpose of the GLFW cursor warping - with this change, the virtual cursor position will grow and grow to quite absurd sizes. This might not be the correct fix!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1795,2020-10-25T09:58:22Z,,2020-11-11T20:05:40Z,OPEN,False,5,1,1,https://github.com/tomc1998,Added dumb fix for disabled cursor snapping to center,1,"['bug', 'X11', 'input']",https://github.com/glfw/glfw/pull/1795,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1795#issuecomment-725633924,"This is a fix for #1790
The cursor callback was being called, snapping the cursor back to the center of the window, when the cursor was disabled.
This PR disables calling the cursor callback for 'EnterNotify' X11 events, which seemed to be the root of the snapping. This seems to fix all the issues I was having.
Unsure whether this is the correct solution, since I don't understand the purpose of the GLFW cursor warping - with this change, the virtual cursor position will grow and grow to quite absurd sizes. This might not be the correct fix!","Thank you, will review.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,None,1,https://github.com/glfw/glfw/pull/1796,"This commit is in response to this issue:
#1783","This commit is in response to this issue:
#1783",True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,None,2,https://github.com/glfw/glfw/pull/1796#issuecomment-720794038,"This commit is in response to this issue:
#1783",Any update on this?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,None,3,https://github.com/glfw/glfw/pull/1796#issuecomment-722588098,"This commit is in response to this issue:
#1783",Is there anything I need to do to make this change more palatable @elmindreda ?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1796#issuecomment-725622537,"This commit is in response to this issue:
#1783","@hdf89shfdfs Sorry, my arm stopped working for a month. I like this solution a lot, except possibly that half of the logic is in a separate, new file.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,None,5,https://github.com/glfw/glfw/pull/1796#issuecomment-726071842,"This commit is in response to this issue:
#1783","@elmindreda hope you feel better.
I understand what you mean but I'm not really a fan of having all the logic inside the main CMakeLists.txt since I think it makes reading the cmake harder.
Generally in my projects I like having a generic helper module but I didn't see one that already existed and looking in your cmake modules folder they all seem to be single purpose so I thought it fit the mold.
What about having a cmake module glfw.cmake? And put helper functions/macros inside there instead?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,None,6,https://github.com/glfw/glfw/pull/1796#issuecomment-726742070,"This commit is in response to this issue:
#1783",I've created a new commit showing what a more general cmake helper module would look like.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,None,7,https://github.com/glfw/glfw/pull/1796#issuecomment-726742360,"This commit is in response to this issue:
#1783",Please let me know what you think @elmindreda,True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,None,8,https://github.com/glfw/glfw/pull/1796#issuecomment-727203714,"This commit is in response to this issue:
#1783",Hey @elmindreda  do you have any idea why the linux builds would be failing? I'm struggling to figure it out.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,https://github.com/moritz-h,9,https://github.com/glfw/glfw/pull/1796#issuecomment-804253280,"This commit is in response to this issue:
#1783","I have found this PR, while having the problem, that the current ""regex replace"" based method does not work anymore when using modern CMAKE_MSVC_RUNTIME_LIBRARY in a top level project. I think it is a nice start, but also I see a few problems with the current implementation of this PR.

Please don't force a user to globally set CMAKE_MSVC_RUNTIME_LIBRARY by throwing a warning. I think it should be perfectly fine if a user set CMAKE_MSVC_RUNTIME_LIBRARY as target property instead of globally.
Please don't force static linking in the standalone case. The standalone case may be used to build GLFW standalone to later use find_package from another project. Therefore the user should be able to select linkage type.

I would suggest to keep the USE_MSVC_RUNTIME_LIBRARY_DLL option for all CMake versions, but for CMake 3.15+, instead of changing the CMAKE_C_FLAGS the CMAKE_MSVC_RUNTIME_LIBRARY property can be set on the glfw target.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1796,2020-10-26T10:28:43Z,2021-04-22T20:40:18Z,2021-04-22T20:40:19Z,CLOSED,False,93,38,3,None,Modernize MSVC runtime library code,3,['build'],https://github.com/glfw/glfw/pull/1796,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/1796#issuecomment-817356756,"This commit is in response to this issue:
#1783","@moritz-h Agreed, that seems to be the better solution. I've also added a warning for when the USE_MSVC_RUNTIME_LIBRARY_DLL option has no effect.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1798,2020-10-28T18:31:30Z,2020-12-02T17:51:43Z,2020-12-02T17:51:43Z,CLOSED,False,4,2,2,https://github.com/ljrk0,wl: Fix destroying CSDs in the correct order,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1798,https://github.com/ljrk0,1,https://github.com/glfw/glfw/pull/1798,"On Wayland we implement Client-Side Decorations if the compositors do not
implement SSDs.  In that case, the destructors of the surfaces were called
in the wrong order, leading to a dereference of an already freed object.
We need to first destroy the subsurface before destroying the parent surface.
Related PR on kitty: kovidgoyal/kitty#3066
Related issue on kitty: kovidgoyal/kitty#3051","On Wayland we implement Client-Side Decorations if the compositors do not
implement SSDs.  In that case, the destructors of the surfaces were called
in the wrong order, leading to a dereference of an already freed object.
We need to first destroy the subsurface before destroying the parent surface.
Related PR on kitty: kovidgoyal/kitty#3066
Related issue on kitty: kovidgoyal/kitty#3051",True,"{'THUMBS_UP': ['https://github.com/Luflosi', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1798,2020-10-28T18:31:30Z,2020-12-02T17:51:43Z,2020-12-02T17:51:43Z,CLOSED,False,4,2,2,https://github.com/ljrk0,wl: Fix destroying CSDs in the correct order,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1798,https://github.com/christianrauch,2,https://github.com/glfw/glfw/pull/1798#issuecomment-723479576,"On Wayland we implement Client-Side Decorations if the compositors do not
implement SSDs.  In that case, the destructors of the surfaces were called
in the wrong order, leading to a dereference of an already freed object.
We need to first destroy the subsurface before destroying the parent surface.
Related PR on kitty: kovidgoyal/kitty#3066
Related issue on kitty: kovidgoyal/kitty#3051","I think that the currently implemented CSD are unusable, at least on GNOME Shell. I proposed #1693 to implement ""proper"" client-side decorations on Wayland, including the usual functionality like min/max/close and additional fixes for resizing glitches.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/ljrk0']}"
glfw/glfw,https://github.com/glfw/glfw,1798,2020-10-28T18:31:30Z,2020-12-02T17:51:43Z,2020-12-02T17:51:43Z,CLOSED,False,4,2,2,https://github.com/ljrk0,wl: Fix destroying CSDs in the correct order,1,"['bug', 'verified', 'Wayland']",https://github.com/glfw/glfw/pull/1798,https://github.com/Luflosi,3,https://github.com/glfw/glfw/pull/1798#issuecomment-723504869,"On Wayland we implement Client-Side Decorations if the compositors do not
implement SSDs.  In that case, the destructors of the surfaces were called
in the wrong order, leading to a dereference of an already freed object.
We need to first destroy the subsurface before destroying the parent surface.
Related PR on kitty: kovidgoyal/kitty#3066
Related issue on kitty: kovidgoyal/kitty#3051",I fully agree with you and would love to see your PR merged. However think it would be best to merge this simple fix first since it shouldn't take much time to review.,True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/ljrk0']}"
glfw/glfw,https://github.com/glfw/glfw,1799,2020-10-29T04:36:31Z,2020-10-29T04:40:01Z,2021-10-24T16:03:42Z,CLOSED,False,47,0,1,https://github.com/cameron-edward-culp,Add premake5 file.,1,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1799,https://github.com/cameron-edward-culp,1,https://github.com/glfw/glfw/pull/1799,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1801,2020-11-02T11:14:10Z,2020-11-02T19:03:34Z,2020-11-03T15:51:48Z,CLOSED,False,8,8,1,https://github.com/timgates42,"docs: fix simple typo, collapseable -> collapsable",1,['external'],https://github.com/glfw/glfw/pull/1801,https://github.com/timgates42,1,https://github.com/glfw/glfw/pull/1801,"There is a small typo in deps/nuklear.h.
Should read collapsable rather than collapseable.","There is a small typo in deps/nuklear.h.
Should read collapsable rather than collapseable.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1801,2020-11-02T11:14:10Z,2020-11-02T19:03:34Z,2020-11-03T15:51:48Z,CLOSED,False,8,8,1,https://github.com/timgates42,"docs: fix simple typo, collapseable -> collapsable",1,['external'],https://github.com/glfw/glfw/pull/1801,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1801#issuecomment-720409340,"There is a small typo in deps/nuklear.h.
Should read collapsable rather than collapseable.","I’d even go for “collapsible”, which seems to be recommended by various dictionaries.
Edit: this typo happens in Nuklear, not in GLFW itself, you may want to fix it upstream instead.",True,"{'THUMBS_UP': ['https://github.com/tombsar', 'https://github.com/timgates42', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/richardwilkes,1,https://github.com/glfw/glfw/pull/1802,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.","NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/andydotxyz,2,https://github.com/glfw/glfw/pull/1802#issuecomment-724290616,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.",Tested this and it fixes the issue for me thanks!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1802#issuecomment-725633064,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.","Thank you for this!
Is this behavior documented anywhere? Would it be safe to set the policy from applicationDidFinishLaunching:? It appears to work, but Cocoa.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/richardwilkes,4,https://github.com/glfw/glfw/pull/1802#issuecomment-725669784,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.","The (bad) behavior seemed to be introduced in macOS Catalina. There was no documentation at the time as to why it changed nor have I found any since. As for trying to make the call from applicationDidFinishLaunching, I did try that and it didn't have the desired effect for some reason.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1802#issuecomment-729271776,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.",Thanks! I'll merge the current version and we'll hope for clarity later.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/elmindreda,6,https://github.com/glfw/glfw/pull/1802#issuecomment-741060533,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.",The dispatch_get_main_queue function does not appear to be available on 10.8. Does it work for you to instead call setActivationPolicy: after run in _glfwPlatformInit?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/richardwilkes,7,https://github.com/glfw/glfw/pull/1802#issuecomment-741089131,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.","Looks like it wasn't introduced until 10.10. :-(
I believe all that really needs to be done is to have that call to setActivationPolicy run on the event thread, after the event loop is executing.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/elmindreda,8,https://github.com/glfw/glfw/pull/1802#issuecomment-741145087,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.",cdc3b71 is my proposal for a backwards compatible fix.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/richardwilkes,9,https://github.com/glfw/glfw/pull/1802#issuecomment-741152397,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.","Hmm... I'm not sure that will actually fix the problem. Earlier experiments showed it had to be done as the result of an event coming in on the event loop, not anywhere else. I had also tried on some of the callbacks, like applicationDidFinishLaunching, to no avail.
Have you tested this change and seen it work both incorrectly without and then correctly with?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/1802#issuecomment-741177849,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.","Have you tested this change and seen it work both incorrectly without and then correctly with?

Yup, the bug is consistently reproducible on my machine and cdc3b71 Works on My Machine™ when launched from a terminal, Finder and Xcode.
Edit: Admittedly I'm trying to simplify but I'm not set on any particular solution. If it's reasonable and backwards compatible then I'll be happy to merge it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/richardwilkes,11,https://github.com/glfw/glfw/pull/1802#issuecomment-741192184,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.",Fantastic. Glad to hear that works.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/elmindreda,12,https://github.com/glfw/glfw/pull/1802#issuecomment-741217569,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.","Anyone following this thread, please test cdc3b71 and report the results.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1802,2020-11-05T17:28:55Z,2021-01-18T22:56:03Z,2021-01-18T22:56:03Z,CLOSED,False,10,3,2,https://github.com/richardwilkes,Fix for #1648: menubar not clickable on macOS Catalina,1,"['bug', 'macOS', 'verified', 'help needed']",https://github.com/glfw/glfw/pull/1802,https://github.com/andydotxyz,13,https://github.com/glfw/glfw/pull/1802#issuecomment-748014162,"NSApp setActivationPolicy was being called too soon when the app was not
bundled and launched from the command line.",yes that works for me too.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1804,2020-11-18T14:21:44Z,,2021-01-18T15:44:45Z,OPEN,False,105,0,7,https://github.com/torkeldanielsson,Machine shutdown callback,5,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1804,https://github.com/torkeldanielsson,1,https://github.com/glfw/glfw/pull/1804,"Adds a machine shutdown callback. Windows only at the moment. (Anyone know if the API for this on linux is easy? Haven't looked into adding it on linux at all, sorry...)
It was added to our (voysys.com) fork of glfw due to a customer request. I thought I would drop a PR here in the upstream, maybe this is functionality that someone else can find useful?
From the included addition to the documentation:
If you wish to be notified when the user attempts to shut down the machine, or 
interrupt a shutdown, then set a machine shutdown callback.

@code
glfwSetMachineShutdownCallback(window, machine_shutdown_callback);
@endcode

The callback function is called when GLFW detects that the machine is shutting down.
It can be used for example to save data to disk in order to minimize risk of data loss.
Another use is to interrupt the shutdown (return false).

@code
int machine_shutdown_callback(GLFWwindow* window)
{
    initiate_save_of_important_data_to_disk();
    if (prevent_machine_shutdown())
        return GLFW_FALSE;
    else
        return GLFW_TRUE;
}
@endcode","Adds a machine shutdown callback. Windows only at the moment. (Anyone know if the API for this on linux is easy? Haven't looked into adding it on linux at all, sorry...)
It was added to our (voysys.com) fork of glfw due to a customer request. I thought I would drop a PR here in the upstream, maybe this is functionality that someone else can find useful?
From the included addition to the documentation:
If you wish to be notified when the user attempts to shut down the machine, or 
interrupt a shutdown, then set a machine shutdown callback.

@code
glfwSetMachineShutdownCallback(window, machine_shutdown_callback);
@endcode

The callback function is called when GLFW detects that the machine is shutting down.
It can be used for example to save data to disk in order to minimize risk of data loss.
Another use is to interrupt the shutdown (return false).

@code
int machine_shutdown_callback(GLFWwindow* window)
{
    initiate_save_of_important_data_to_disk();
    if (prevent_machine_shutdown())
        return GLFW_FALSE;
    else
        return GLFW_TRUE;
}
@endcode",True,{}
glfw/glfw,https://github.com/glfw/glfw,1804,2020-11-18T14:21:44Z,,2021-01-18T15:44:45Z,OPEN,False,105,0,7,https://github.com/torkeldanielsson,Machine shutdown callback,5,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1804,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1804#issuecomment-729753907,"Adds a machine shutdown callback. Windows only at the moment. (Anyone know if the API for this on linux is easy? Haven't looked into adding it on linux at all, sorry...)
It was added to our (voysys.com) fork of glfw due to a customer request. I thought I would drop a PR here in the upstream, maybe this is functionality that someone else can find useful?
From the included addition to the documentation:
If you wish to be notified when the user attempts to shut down the machine, or 
interrupt a shutdown, then set a machine shutdown callback.

@code
glfwSetMachineShutdownCallback(window, machine_shutdown_callback);
@endcode

The callback function is called when GLFW detects that the machine is shutting down.
It can be used for example to save data to disk in order to minimize risk of data loss.
Another use is to interrupt the shutdown (return false).

@code
int machine_shutdown_callback(GLFWwindow* window)
{
    initiate_save_of_important_data_to_disk();
    if (prevent_machine_shutdown())
        return GLFW_FALSE;
    else
        return GLFW_TRUE;
}
@endcode",We could look into simply trapping the SIGTERM signal on Linux for this purpose?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1804,2020-11-18T14:21:44Z,,2021-01-18T15:44:45Z,OPEN,False,105,0,7,https://github.com/torkeldanielsson,Machine shutdown callback,5,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1804,https://github.com/tombsar,3,https://github.com/glfw/glfw/pull/1804#issuecomment-730324061,"Adds a machine shutdown callback. Windows only at the moment. (Anyone know if the API for this on linux is easy? Haven't looked into adding it on linux at all, sorry...)
It was added to our (voysys.com) fork of glfw due to a customer request. I thought I would drop a PR here in the upstream, maybe this is functionality that someone else can find useful?
From the included addition to the documentation:
If you wish to be notified when the user attempts to shut down the machine, or 
interrupt a shutdown, then set a machine shutdown callback.

@code
glfwSetMachineShutdownCallback(window, machine_shutdown_callback);
@endcode

The callback function is called when GLFW detects that the machine is shutting down.
It can be used for example to save data to disk in order to minimize risk of data loss.
Another use is to interrupt the shutdown (return false).

@code
int machine_shutdown_callback(GLFWwindow* window)
{
    initiate_save_of_important_data_to_disk();
    if (prevent_machine_shutdown())
        return GLFW_FALSE;
    else
        return GLFW_TRUE;
}
@endcode","I'm struggling to find up-to-date information on how to detect this on Linux. Will run some tests with dbus-monitor to see what messages get passed around. SIGTERM and SIGKILL will be sent to the program when it needs to terminate, but a) that can be for reasons other than system shutdown, and b) it's probably too late to do anything about it by that point.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1804,2020-11-18T14:21:44Z,,2021-01-18T15:44:45Z,OPEN,False,105,0,7,https://github.com/torkeldanielsson,Machine shutdown callback,5,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1804,https://github.com/torkeldanielsson,4,https://github.com/glfw/glfw/pull/1804#issuecomment-730366102,"Adds a machine shutdown callback. Windows only at the moment. (Anyone know if the API for this on linux is easy? Haven't looked into adding it on linux at all, sorry...)
It was added to our (voysys.com) fork of glfw due to a customer request. I thought I would drop a PR here in the upstream, maybe this is functionality that someone else can find useful?
From the included addition to the documentation:
If you wish to be notified when the user attempts to shut down the machine, or 
interrupt a shutdown, then set a machine shutdown callback.

@code
glfwSetMachineShutdownCallback(window, machine_shutdown_callback);
@endcode

The callback function is called when GLFW detects that the machine is shutting down.
It can be used for example to save data to disk in order to minimize risk of data loss.
Another use is to interrupt the shutdown (return false).

@code
int machine_shutdown_callback(GLFWwindow* window)
{
    initiate_save_of_important_data_to_disk();
    if (prevent_machine_shutdown())
        return GLFW_FALSE;
    else
        return GLFW_TRUE;
}
@endcode","I'm struggling to find up-to-date information on how to detect this on Linux. Will run some tests with dbus-monitor to see what messages get passed around. SIGTERM and SIGKILL will be sent to the program when it needs to terminate, but a) that can be for reasons other than system shutdown, and b) it's probably too late to do anything about it by that point.

I looked a bit at it now too. Asking applications for permission before shutdown, and letting the applications interrupt the shutdown, seems to be a Windows thing. On Linux the signals being sent is more of a ""you are to shut down, NOW"". I would be hesitant to add signal listening to this - it doesn't seem like something that is done already by glfw?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1804,2020-11-18T14:21:44Z,,2021-01-18T15:44:45Z,OPEN,False,105,0,7,https://github.com/torkeldanielsson,Machine shutdown callback,5,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1804,https://github.com/tombsar,5,https://github.com/glfw/glfw/pull/1804#issuecomment-730394729,"Adds a machine shutdown callback. Windows only at the moment. (Anyone know if the API for this on linux is easy? Haven't looked into adding it on linux at all, sorry...)
It was added to our (voysys.com) fork of glfw due to a customer request. I thought I would drop a PR here in the upstream, maybe this is functionality that someone else can find useful?
From the included addition to the documentation:
If you wish to be notified when the user attempts to shut down the machine, or 
interrupt a shutdown, then set a machine shutdown callback.

@code
glfwSetMachineShutdownCallback(window, machine_shutdown_callback);
@endcode

The callback function is called when GLFW detects that the machine is shutting down.
It can be used for example to save data to disk in order to minimize risk of data loss.
Another use is to interrupt the shutdown (return false).

@code
int machine_shutdown_callback(GLFWwindow* window)
{
    initiate_save_of_important_data_to_disk();
    if (prevent_machine_shutdown())
        return GLFW_FALSE;
    else
        return GLFW_TRUE;
}
@endcode","Yes and no. At least historically, shutdowns on Linux were broadcast with a bit of warning, and users could cancel a pending shutdown by running shutdown -c in a shell. I'd expect there to be a systemd equivalent of this, but perhaps not.
I don't believe glfw does any signal handling at the moment (although signal.h does seem to be included), so it might be better to leave it alone.
At the moment, on Windows does shutting down the machine set the glfwGetWindowShouldClose flag? A compromise might be to add a function whereby the application can query what caused the window to need to close (e.g. ""system shut down"" vs ""user action"") instead of adding a new callback.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1804,2020-11-18T14:21:44Z,,2021-01-18T15:44:45Z,OPEN,False,105,0,7,https://github.com/torkeldanielsson,Machine shutdown callback,5,"['enhancement', 'macOS', 'Windows', 'X11']",https://github.com/glfw/glfw/pull/1804,https://github.com/torkeldanielsson,6,https://github.com/glfw/glfw/pull/1804#issuecomment-755436952,"Adds a machine shutdown callback. Windows only at the moment. (Anyone know if the API for this on linux is easy? Haven't looked into adding it on linux at all, sorry...)
It was added to our (voysys.com) fork of glfw due to a customer request. I thought I would drop a PR here in the upstream, maybe this is functionality that someone else can find useful?
From the included addition to the documentation:
If you wish to be notified when the user attempts to shut down the machine, or 
interrupt a shutdown, then set a machine shutdown callback.

@code
glfwSetMachineShutdownCallback(window, machine_shutdown_callback);
@endcode

The callback function is called when GLFW detects that the machine is shutting down.
It can be used for example to save data to disk in order to minimize risk of data loss.
Another use is to interrupt the shutdown (return false).

@code
int machine_shutdown_callback(GLFWwindow* window)
{
    initiate_save_of_important_data_to_disk();
    if (prevent_machine_shutdown())
        return GLFW_FALSE;
    else
        return GLFW_TRUE;
}
@endcode","At the moment, on Windows does shutting down the machine set the glfwGetWindowShouldClose flag? A compromise might be to add a function whereby the application can query what caused the window to need to close (e.g. ""system shut down"" vs ""user action"") instead of adding a new callback.

It does not set the glfwGetWindowShouldClose flag. Windows asks applications for permission to shut down, so an application can intercept a shutdown and cancel it (it is possible to change settings and disable this so the PC always shuts down regardless). This PR suggests using the return bool from the callback to signal whether to let the shutdown proceed or not.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1816,2020-12-07T09:11:05Z,2020-12-07T09:12:03Z,2021-10-21T17:31:34Z,CLOSED,False,70,0,1,https://github.com/LeonardoM011,Update,2,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1816,https://github.com/LeonardoM011,1,https://github.com/glfw/glfw/pull/1816,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1818,2020-12-10T14:20:26Z,2021-01-18T22:51:39Z,2021-10-24T16:01:25Z,CLOSED,False,18,18,1,https://github.com/ashishgamedev,Fixed Indentation in src/internal.h,1,['enhancement'],https://github.com/glfw/glfw/pull/1818,https://github.com/ashishgamedev,1,https://github.com/glfw/glfw/pull/1818,Fixed Indentation in src/internal.h,Fixed Indentation in src/internal.h,True,{}
glfw/glfw,https://github.com/glfw/glfw,1819,2020-12-14T07:38:04Z,2020-12-14T11:27:59Z,2020-12-14T18:16:06Z,MERGED,True,1,1,1,https://github.com/bheesham,Fix minor typo: If if -> If.,1,"['bug', 'verified', 'documentation', 'Vulkan']",https://github.com/glfw/glfw/pull/1819,https://github.com/bheesham,1,https://github.com/glfw/glfw/pull/1819,This change is ,This change is ,True,{}
glfw/glfw,https://github.com/glfw/glfw,1819,2020-12-14T07:38:04Z,2020-12-14T11:27:59Z,2020-12-14T18:16:06Z,MERGED,True,1,1,1,https://github.com/bheesham,Fix minor typo: If if -> If.,1,"['bug', 'verified', 'documentation', 'Vulkan']",https://github.com/glfw/glfw/pull/1819,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1819#issuecomment-744377134,This change is ,"Thanks, LGTM!",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1824,2020-12-30T05:08:23Z,2021-04-22T20:40:20Z,2021-04-23T15:50:52Z,CLOSED,False,2,2,1,https://github.com/atkurtul,Update CMakeLists.txt,4,"['bug', 'Windows', 'verified', 'build']",https://github.com/glfw/glfw/pull/1824,https://github.com/atkurtul,1,https://github.com/glfw/glfw/pull/1824,This was preventing building with clang on windows. Should work as well with clang-cl,This was preventing building with clang on windows. Should work as well with clang-cl,True,{}
glfw/glfw,https://github.com/glfw/glfw,1824,2020-12-30T05:08:23Z,2021-04-22T20:40:20Z,2021-04-23T15:50:52Z,CLOSED,False,2,2,1,https://github.com/atkurtul,Update CMakeLists.txt,4,"['bug', 'Windows', 'verified', 'build']",https://github.com/glfw/glfw/pull/1824,None,2,https://github.com/glfw/glfw/pull/1824#issuecomment-752731849,This was preventing building with clang on windows. Should work as well with clang-cl,"This was preventing building with clang on windows. Should work as well with clang-cl

This was added to fix clang-cl on windows. You are re-introducing the issue.
ac62770#diff-25a6634263c1b1f6fc4697a04e2b9904ea4b042a89af59dc93ec1f5d44848a26",True,{}
glfw/glfw,https://github.com/glfw/glfw,1824,2020-12-30T05:08:23Z,2021-04-22T20:40:20Z,2021-04-23T15:50:52Z,CLOSED,False,2,2,1,https://github.com/atkurtul,Update CMakeLists.txt,4,"['bug', 'Windows', 'verified', 'build']",https://github.com/glfw/glfw/pull/1824,https://github.com/atkurtul,3,https://github.com/glfw/glfw/pull/1824#issuecomment-752849978,This was preventing building with clang on windows. Should work as well with clang-cl,Clang with GNU interface treats forwards slashes as file paths. so there is no way to compile it with clang unless the cmake generator is Visual Studio.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1824,2020-12-30T05:08:23Z,2021-04-22T20:40:20Z,2021-04-23T15:50:52Z,CLOSED,False,2,2,1,https://github.com/atkurtul,Update CMakeLists.txt,4,"['bug', 'Windows', 'verified', 'build']",https://github.com/glfw/glfw/pull/1824,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1824#issuecomment-825191695,This was preventing building with clang on windows. Should work as well with clang-cl,This should be fixed now with 061a026. Thank you for reporting this!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1827,2021-01-03T00:58:36Z,2021-01-18T22:51:40Z,2021-01-18T22:51:40Z,CLOSED,False,2,0,1,https://github.com/lukebayes,Added 2 entries to the gitignores file.,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1827,https://github.com/lukebayes,1,https://github.com/glfw/glfw/pull/1827,"I downloaded and built from sources as as submodule for a personal
exploration that I'm working on and discovered that the glfw submodule shows
changed files after a build.
Adding these 2 entries fixes the issue.
FWIW - I didn't update README or CREDITS because I don't really need any credit for such a small change, and I'm not convinced that consumers of the README would be interested in this change either.","I downloaded and built from sources as as submodule for a personal
exploration that I'm working on and discovered that the glfw submodule shows
changed files after a build.
Adding these 2 entries fixes the issue.
FWIW - I didn't update README or CREDITS because I don't really need any credit for such a small change, and I'm not convinced that consumers of the README would be interested in this change either.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1830,2021-01-06T04:42:55Z,2021-01-18T22:56:02Z,2021-01-18T22:56:02Z,CLOSED,False,1,1,1,https://github.com/prideout,Cocoa: Fix duplicate video mode detection.,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1830,https://github.com/prideout,1,https://github.com/glfw/glfw/pull/1830,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1831,2021-01-08T14:38:57Z,2021-01-08T14:39:26Z,2021-10-24T16:05:34Z,CLOSED,False,74,0,1,https://github.com/harshit2608,Update,3,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1831,https://github.com/harshit2608,1,https://github.com/glfw/glfw/pull/1831,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1833,2021-01-11T16:29:16Z,2021-01-18T22:56:04Z,2021-01-19T10:27:26Z,CLOSED,False,16,0,1,https://github.com/nevyn,Mac/Apple Silicon: Fix crash-on-launch by using modern API to get display name,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1833,https://github.com/nevyn,1,https://github.com/glfw/glfw/pull/1833,"On Apple Silicon, IOKit is deprecated and there will be no
matching io_service that we can query for name. Luckilly,
NSScreen got an API to fetch the display name in 10.15.
This is a blocker to get glfw running on Apple Silicon.
Fixes #1809","On Apple Silicon, IOKit is deprecated and there will be no
matching io_service that we can query for name. Luckilly,
NSScreen got an API to fetch the display name in 10.15.
This is a blocker to get glfw running on Apple Silicon.
Fixes #1809",True,"{'EYES': ['https://github.com/shakesoda', 'https://github.com/Jacalz'], 'HOORAY': ['https://github.com/shakesoda', 'https://github.com/Jacalz', 'https://github.com/elmindreda', 'https://github.com/RobaFett22', 'https://github.com/kawanet']}"
glfw/glfw,https://github.com/glfw/glfw,1836,2021-01-18T07:38:50Z,2021-09-03T15:20:26Z,2021-09-03T15:20:34Z,CLOSED,False,31,0,1,https://github.com/pmprog,8bitdo Controller mappings,1,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1836,https://github.com/pmprog,1,https://github.com/glfw/glfw/pull/1836,"Addition of 8bitdo controller mappings (pulled from Raylib, with a config update for M30)","Addition of 8bitdo controller mappings (pulled from Raylib, with a config update for M30)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1836,2021-01-18T07:38:50Z,2021-09-03T15:20:26Z,2021-09-03T15:20:34Z,CLOSED,False,31,0,1,https://github.com/pmprog,8bitdo Controller mappings,1,"['enhancement', 'input']",https://github.com/glfw/glfw/pull/1836,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1836#issuecomment-912617084,"Addition of 8bitdo controller mappings (pulled from Raylib, with a config update for M30)","Thank you for your patience. These mappings should be included now with afa78b4, which pulled in the then current set of mappings from SDL_GameControllerDB. If any are still missing, please submit them to that project and they will be included in our next mappings update.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1840,2021-01-19T17:35:02Z,2021-07-23T18:52:35Z,2021-07-23T18:52:35Z,CLOSED,False,2,0,1,https://github.com/sgowdev,Fixes glfw/src/cocoa_platform.h:34:9: warning: 'GL_SILENCE_DEPRECATION' macro redefined [-Wmacro-redefined],1,"['enhancement', 'macOS', 'build', 'OpenGL']",https://github.com/glfw/glfw/pull/1840,https://github.com/sgowdev,1,https://github.com/glfw/glfw/pull/1840,"I build glfw from source, directly in my Xcode project, where I already have the GL_SILENCE_DEPRECATION macro defined.
Wrapping glfw's GL_SILENCE_DEPRECATION macro definition in an #ifndef removes the macro redefined warning.
Feel free to close if this is irrelevant for standard glfw usage (linking against built library), but it is useful for me.","I build glfw from source, directly in my Xcode project, where I already have the GL_SILENCE_DEPRECATION macro defined.
Wrapping glfw's GL_SILENCE_DEPRECATION macro definition in an #ifndef removes the macro redefined warning.
Feel free to close if this is irrelevant for standard glfw usage (linking against built library), but it is useful for me.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1840,2021-01-19T17:35:02Z,2021-07-23T18:52:35Z,2021-07-23T18:52:35Z,CLOSED,False,2,0,1,https://github.com/sgowdev,Fixes glfw/src/cocoa_platform.h:34:9: warning: 'GL_SILENCE_DEPRECATION' macro redefined [-Wmacro-redefined],1,"['enhancement', 'macOS', 'build', 'OpenGL']",https://github.com/glfw/glfw/pull/1840,https://github.com/sgowdev,2,https://github.com/glfw/glfw/pull/1840#issuecomment-885835191,"I build glfw from source, directly in my Xcode project, where I already have the GL_SILENCE_DEPRECATION macro defined.
Wrapping glfw's GL_SILENCE_DEPRECATION macro definition in an #ifndef removes the macro redefined warning.
Feel free to close if this is irrelevant for standard glfw usage (linking against built library), but it is useful for me.",Closing due to inactivity,True,{}
glfw/glfw,https://github.com/glfw/glfw,1847,2021-02-11T21:29:15Z,2021-02-11T21:30:04Z,2021-10-24T16:34:12Z,CLOSED,False,0,0,0,https://github.com/Bagellll,Merge pull request #2 from glfw/master,1,['wontfix'],https://github.com/glfw/glfw/pull/1847,https://github.com/Bagellll,1,https://github.com/glfw/glfw/pull/1847,Merge,Merge,True,{}
glfw/glfw,https://github.com/glfw/glfw,1848,2021-02-13T16:57:58Z,2021-02-14T21:09:15Z,2021-02-16T19:01:03Z,CLOSED,False,1,1,1,https://github.com/siavashserver,Fixed TinyThread++ link.,1,['documentation'],https://github.com/glfw/glfw/pull/1848,https://github.com/siavashserver,1,https://github.com/glfw/glfw/pull/1848,"Official page: https://tinythreadpp.bitsnbites.eu/
GitHub repo: https://github.com/mbitsnbites/tinythreadpp","Official page: https://tinythreadpp.bitsnbites.eu/
GitHub repo: https://github.com/mbitsnbites/tinythreadpp",True,{}
glfw/glfw,https://github.com/glfw/glfw,1848,2021-02-13T16:57:58Z,2021-02-14T21:09:15Z,2021-02-16T19:01:03Z,CLOSED,False,1,1,1,https://github.com/siavashserver,Fixed TinyThread++ link.,1,['documentation'],https://github.com/glfw/glfw/pull/1848,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1848#issuecomment-778800803,"Official page: https://tinythreadpp.bitsnbites.eu/
GitHub repo: https://github.com/mbitsnbites/tinythreadpp","Oh, good point. Perhaps we could remove the C++ recommendation altogether? C++11 seems fairly universally available on the desktop now.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1848,2021-02-13T16:57:58Z,2021-02-14T21:09:15Z,2021-02-16T19:01:03Z,CLOSED,False,1,1,1,https://github.com/siavashserver,Fixed TinyThread++ link.,1,['documentation'],https://github.com/glfw/glfw/pull/1848,https://github.com/siavashserver,3,https://github.com/glfw/glfw/pull/1848#issuecomment-778842214,"Official page: https://tinythreadpp.bitsnbites.eu/
GitHub repo: https://github.com/mbitsnbites/tinythreadpp","You are right, C++11 is widely supported these days. Closing this pull request since there isn't much point to it :)",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1856,2021-02-28T17:56:15Z,,2021-08-27T10:57:44Z,OPEN,False,9,2,2,https://github.com/jlmxyz,handle VisibilityNotify on x11 so that a window that is mapped but co…,1,"['bug', 'X11']",https://github.com/glfw/glfw/pull/1856,https://github.com/jlmxyz,1,https://github.com/glfw/glfw/pull/1856,fix for #1855,fix for #1855,True,{'THUMBS_UP': ['https://github.com/tombsar']}
glfw/glfw,https://github.com/glfw/glfw,1856,2021-02-28T17:56:15Z,,2021-08-27T10:57:44Z,OPEN,False,9,2,2,https://github.com/jlmxyz,handle VisibilityNotify on x11 so that a window that is mapped but co…,1,"['bug', 'X11']",https://github.com/glfw/glfw/pull/1856,https://github.com/jlmxyz,2,https://github.com/glfw/glfw/pull/1856#issuecomment-906986000,fix for #1855,anyone to make this patch reviewed and merged? it's only a few lines...,True,{}
glfw/glfw,https://github.com/glfw/glfw,1859,2021-03-05T02:40:21Z,2021-07-09T04:24:29Z,2021-08-31T17:02:13Z,CLOSED,False,7,14,1,None,Suggestion update minimum to 3.13,1,['build'],https://github.com/glfw/glfw/pull/1859,None,1,https://github.com/glfw/glfw/pull/1859,"For the upcoming 3.4 release why not update the CMake minimum?
3.13 came out Nov 21, 2018
Currently CMake 3.20 is out. Glfw is 19 versions behind.
3.13 brings a lot of quality of life updates for users.","For the upcoming 3.4 release why not update the CMake minimum?
3.13 came out Nov 21, 2018
Currently CMake 3.20 is out. Glfw is 19 versions behind.
3.13 brings a lot of quality of life updates for users.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1859,2021-03-05T02:40:21Z,2021-07-09T04:24:29Z,2021-08-31T17:02:13Z,CLOSED,False,7,14,1,None,Suggestion update minimum to 3.13,1,['build'],https://github.com/glfw/glfw/pull/1859,https://github.com/uthidata,2,https://github.com/glfw/glfw/pull/1859#issuecomment-813037324,"For the upcoming 3.4 release why not update the CMake minimum?
3.13 came out Nov 21, 2018
Currently CMake 3.20 is out. Glfw is 19 versions behind.
3.13 brings a lot of quality of life updates for users.","Note that this fix #1874 requires at least CMake 3.15 to work, so if the minimum CMake version changes at all, I think it should change to 3.15.",True,{'THUMBS_UP': ['https://github.com/gracicot']}
glfw/glfw,https://github.com/glfw/glfw,1868,2021-03-21T15:18:19Z,2021-08-16T18:31:33Z,2021-10-24T18:17:03Z,CLOSED,False,422,72,13,https://github.com/linkmauve,Cache mappings on disk,6,"['wontfix', 'input']",https://github.com/glfw/glfw/pull/1868,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/1868,"Parsing this file was taking the most time out of glfwInit(), or about 14ms on my PinePhone before the start of this series.  In the case where the string is already in cache, it now takes only 0.95ms.
It would be possible to make that even faster, and additionally to keep that page shared with other GLFW processes, by using mmap() instead, but for now I opted to not change the memory representation.
I also changed the mappings.h format to be a single \n-separated string instead of multiple different strings, so that we can call glfwUpdateGamepadMappings() once instead of once per entry, this alone was a ~2ms win.
Part of the implementation is shared with xkbcommon/libxkbcommon#220","Parsing this file was taking the most time out of glfwInit(), or about 14ms on my PinePhone before the start of this series.  In the case where the string is already in cache, it now takes only 0.95ms.
It would be possible to make that even faster, and additionally to keep that page shared with other GLFW processes, by using mmap() instead, but for now I opted to not change the memory representation.
I also changed the mappings.h format to be a single \n-separated string instead of multiple different strings, so that we can call glfwUpdateGamepadMappings() once instead of once per entry, this alone was a ~2ms win.
Part of the implementation is shared with xkbcommon/libxkbcommon#220",True,{}
glfw/glfw,https://github.com/glfw/glfw,1868,2021-03-21T15:18:19Z,2021-08-16T18:31:33Z,2021-10-24T18:17:03Z,CLOSED,False,422,72,13,https://github.com/linkmauve,Cache mappings on disk,6,"['wontfix', 'input']",https://github.com/glfw/glfw/pull/1868,https://github.com/linkmauve,2,https://github.com/glfw/glfw/pull/1868#issuecomment-804870120,"Parsing this file was taking the most time out of glfwInit(), or about 14ms on my PinePhone before the start of this series.  In the case where the string is already in cache, it now takes only 0.95ms.
It would be possible to make that even faster, and additionally to keep that page shared with other GLFW processes, by using mmap() instead, but for now I opted to not change the memory representation.
I also changed the mappings.h format to be a single \n-separated string instead of multiple different strings, so that we can call glfwUpdateGamepadMappings() once instead of once per entry, this alone was a ~2ms win.
Part of the implementation is shared with xkbcommon/libxkbcommon#220","I’ve updated this PR with two new commits, using the mmap() approach suggested in the first comment.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1868,2021-03-21T15:18:19Z,2021-08-16T18:31:33Z,2021-10-24T18:17:03Z,CLOSED,False,422,72,13,https://github.com/linkmauve,Cache mappings on disk,6,"['wontfix', 'input']",https://github.com/glfw/glfw/pull/1868,https://github.com/tombsar,3,https://github.com/glfw/glfw/pull/1868#issuecomment-805090321,"Parsing this file was taking the most time out of glfwInit(), or about 14ms on my PinePhone before the start of this series.  In the case where the string is already in cache, it now takes only 0.95ms.
It would be possible to make that even faster, and additionally to keep that page shared with other GLFW processes, by using mmap() instead, but for now I opted to not change the memory representation.
I also changed the mappings.h format to be a single \n-separated string instead of multiple different strings, so that we can call glfwUpdateGamepadMappings() once instead of once per entry, this alone was a ~2ms win.
Part of the implementation is shared with xkbcommon/libxkbcommon#220","changed the mappings.h format to be a single \n-separated string instead of multiple different strings

Does this run the risk of generating overlong string literals that could be rejected by the compiler? I remember there was a previous issue related to that (#1145).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1868,2021-03-21T15:18:19Z,2021-08-16T18:31:33Z,2021-10-24T18:17:03Z,CLOSED,False,422,72,13,https://github.com/linkmauve,Cache mappings on disk,6,"['wontfix', 'input']",https://github.com/glfw/glfw/pull/1868,https://github.com/linkmauve,4,https://github.com/glfw/glfw/pull/1868#issuecomment-807348821,"Parsing this file was taking the most time out of glfwInit(), or about 14ms on my PinePhone before the start of this series.  In the case where the string is already in cache, it now takes only 0.95ms.
It would be possible to make that even faster, and additionally to keep that page shared with other GLFW processes, by using mmap() instead, but for now I opted to not change the memory representation.
I also changed the mappings.h format to be a single \n-separated string instead of multiple different strings, so that we can call glfwUpdateGamepadMappings() once instead of once per entry, this alone was a ~2ms win.
Part of the implementation is shared with xkbcommon/libxkbcommon#220","changed the mappings.h format to be a single \n-separated string instead of multiple different strings

Does this run the risk of generating overlong string literals that could be rejected by the compiler? I remember there was a previous issue related to that (#1145).

Good catch, I didn’t realise I was basically reverting this change.  I’ve instead replaced it with a concatenation of all the strings just before calling glfwUpdateGamepadMappings(). :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1868,2021-03-21T15:18:19Z,2021-08-16T18:31:33Z,2021-10-24T18:17:03Z,CLOSED,False,422,72,13,https://github.com/linkmauve,Cache mappings on disk,6,"['wontfix', 'input']",https://github.com/glfw/glfw/pull/1868,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1868#issuecomment-899728086,"Parsing this file was taking the most time out of glfwInit(), or about 14ms on my PinePhone before the start of this series.  In the case where the string is already in cache, it now takes only 0.95ms.
It would be possible to make that even faster, and additionally to keep that page shared with other GLFW processes, by using mmap() instead, but for now I opted to not change the memory representation.
I also changed the mappings.h format to be a single \n-separated string instead of multiple different strings, so that we can call glfwUpdateGamepadMappings() once instead of once per entry, this alone was a ~2ms win.
Part of the implementation is shared with xkbcommon/libxkbcommon#220","I don't think it's a good idea for GLFW to start caching data to disk if it can possibly be avoided. The recent improvement to the handling of mappings seem to have helped with performance somewhat.
If performance does become an issue I would prefer either delaying the parsing until we need the mappings, only parsing entries as needed or re-using the existing parser and have mappings.h contain pre-parsed _GLFWmapping structs.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,1,https://github.com/glfw/glfw/pull/1870,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.",True,"{'THUMBS_UP': ['https://github.com/TheMrMilchmann', 'https://github.com/tombsar']}"
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/tombsar,2,https://github.com/glfw/glfw/pull/1870#issuecomment-805084727,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","Many thanks for doing this. I don't intend to use the feature, but it looks like there is demand.
Just FYI, the link to the previous discussion didn't come out right; it just links back to this PR (at least for me...).
I'm in favour of naming them ""Aux"" rather than ""User"", as in the proposed API they are secondary to the ""main"" context created with the window (and all contexts are user-created, even if indirectly through window creation). Not a big issue.
I agree that a more general (and all-around better) GLFWContext API should be left for glfw 4.
I don't think the test needs to be extended. So long as the contexts are created successfully, it's SEP if they don't function properly. I'd suggest a formatting pass, as there are a couple of minor inconsistencies.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,3,https://github.com/glfw/glfw/pull/1870#issuecomment-805089205,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","I've updated the link with a full url instead of just the number, seems Github has an issue.
As for the formatting pass do let me know of any minor inconsistencies you find since I'm dyslexic and cannot see them.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/tombsar,4,https://github.com/glfw/glfw/pull/1870#issuecomment-805111398,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","It's just whitespace - some of the if conditions have spaces separating all terms, while others don't. I don't think glfw has a written style guide, but the prevailing format is to have spaces separating operators from operands, but no spaces separating operands from parens. Really minor point - could easily be fixed (by me or someone else) after the functionality is merged.
Out of interest, what is the consequence of not destroying a User context before destroying the parent window? Is it just a resource leak, or does something break?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,5,https://github.com/glfw/glfw/pull/1870#issuecomment-805146373,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","Out of interest, what is the consequence of not destroying a User context before destroying the parent window? Is it just a resource leak, or does something break?

This depends on the implementation, but other than not being able to use the context nothing has broken in my simple tests.
I've found a few inconsistent uses of spaces and have fixed them, thanks for pointing those out.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,6,https://github.com/glfw/glfw/pull/1870#issuecomment-911947849,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.",If needed I can merge master and check all platforms.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/elmindreda,7,https://github.com/glfw/glfw/pull/1870#issuecomment-912540108,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","@dougbinks If it turns out to be straightforward then yes please, otherwise it's probably best to wait until #1958 has been merged.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,8,https://github.com/glfw/glfw/pull/1870#issuecomment-912961188,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","I've fixed the usercontext.c issue (glad changes), and tested on Windows. Will check the other operating systems later.
I was a little confused by the feature ""Allow edits and access to secrets by maintainers"" permitting a push to the branch on my fork, but somehow showing this as unreachable when I clicked on the link for the merge... since the link takes you to this repo and not my fork!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,9,https://github.com/glfw/glfw/pull/1870#issuecomment-912985924,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","I've finished testing and the usercontext.c test passes on win32, x11, wayland, macosx (cocoa), with wgl, xgl, egl, osmesa and nsgl.",True,{'HOORAY': ['https://github.com/abgita']}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,10,https://github.com/glfw/glfw/pull/1870#issuecomment-1066128650,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","I just took a look at merging with master as #1958 has been merged. This is going to be a fairly large investment of time to merge the branches so I was wondering if this was an appropriate time to merge, or if other large changes were coming down the pipe.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,11,https://github.com/glfw/glfw/pull/1870#issuecomment-1084787475,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","I have begun a merge on my branch:
https://github.com/dougbinks/glfw/tree/multi-context-windows-merge-master
With Win32 platform compiling, and WGL contexts tested. I'll be updating the other platforms and testing contexts over the next few days if I get time.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,12,https://github.com/glfw/glfw/pull/1870#issuecomment-1084988695,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","x11 and wayland platforms now working, along with EGL and OSMESA on branch https://github.com/dougbinks/glfw/tree/multi-context-windows-merge-master
MacOS / Cocoa / NSGL will likely be tomorrow.",True,"{'HEART': ['https://github.com/TheMrMilchmann', 'https://github.com/silenium-dev']}"
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,13,https://github.com/glfw/glfw/pull/1870#issuecomment-1085718367,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.",I have completed the merge on all platforms / context backends and tested them - this PR should now be ready for review.,True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/silenium-dev']}"
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/wintertime,14,https://github.com/glfw/glfw/pull/1870#issuecomment-1090484862,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","Did it simplify the new code much to forbid using this on a GLFWwindow with GLFW_NO_API? I think, in the past people sometimes asked already to have separate window and context and if you would allow that it would be basically done (except the function names could drop the user part and it would be optional until GLFW 4)?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1870,2021-03-23T15:16:06Z,,2022-04-06T17:18:14Z,OPEN,False,974,96,30,https://github.com/dougbinks,User contexts for multi context windows,40,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'EGL']",https://github.com/glfw/glfw/pull/1870,https://github.com/dougbinks,15,https://github.com/glfw/glfw/pull/1870#issuecomment-1090513597,"This PR adds the ability to created multiple contexts for windows via user contexts as per Feature request / discussion: multiple contexts for a window #1687. The code is currently in active use by several developers.
I have completed all the steps as per the contributing guide including documentation.
The implementation changes the code structure for all context creation without changing the behaviour of existing glfw functionality, and as such has some risk. The approach is to separate the window specific context information from the OpenGL / OpenGL ES context so that this improves the maintainability of the feature.
Backends for all windows and context creation have been modified to support user contexts.
I have considered calling this Aux Contexts instead of User Contexts, if it's thought this is better then I can undertake the change.
A slightly cleaner interface would be to move to have all context specific functionality handled via a GLFWContext* object but this would either be a breaking change or would potentially add confusion - I would propose this was left for GLFW 4, but if requested I can undertake the changes.
The test usercontext.c is fairly basic, if requested I can extend it to create threaded OpenGL object creation (create a texture object on a thread for example), but this will take me some time to get around to.","There are complexities with window creation without a context then being used to create a context on some platforms, as the window configuration may not be compatible with the requested context.
I personally would prefer to consider that as additional functionality which can be added on top of this at a later date.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1873,2021-03-27T14:16:58Z,2021-05-14T17:14:39Z,2021-05-14T17:14:39Z,CLOSED,False,4,1,2,https://github.com/jrfonseca,Don't call SwapBuffers on single-buffer contexts.,1,"['enhancement', 'OpenGL']",https://github.com/glfw/glfw/pull/1873,https://github.com/jrfonseca,1,https://github.com/glfw/glfw/pull/1873,"It's generally harmless to call SwapBuffers on single-buffer contexts.
But it's unnecessary at the very least, and it confuses
https://github.com/apitrace/apitrace into thinking the GLFW3 application
is using double-buffered back-buffers even when it isn't.","It's generally harmless to call SwapBuffers on single-buffer contexts.
But it's unnecessary at the very least, and it confuses
https://github.com/apitrace/apitrace into thinking the GLFW3 application
is using double-buffered back-buffers even when it isn't.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1874,2021-03-28T20:42:47Z,2021-04-22T20:40:21Z,2021-04-22T21:16:50Z,CLOSED,False,1,1,1,https://github.com/nmcclatchey,Fix failure to build when using GCC-like Clang front-end,1,"['bug', 'Windows', 'verified', 'build']",https://github.com/glfw/glfw/pull/1874,https://github.com/nmcclatchey,1,https://github.com/glfw/glfw/pull/1874,"At least on Windows, the Clang compiler has two front-end variants:

clang-cl uses a command-line interface that imitates MSVC.
clang and clang++ use a command-line interface that imitates GCC.

CMake version 3.15 gained support for the latter variant of the Clang compiler, but glfw contains a CMake file that uses CMAKE_C_SIMULATE_ID to detect the frontend; however, this variable is misleading when using clang on Windows with the GCC-like front-end. This pull request updates the test to use the (undocumented) variable CMAKE_C_COMPILER_FRONTEND_VARIANT when available (CMake 3.15+), which correctly identifies the command-line variant that must be used for compilation.
In short, this pull request permits building glfw on Windows build systems using clang and clang++, instead of clang-cl.","At least on Windows, the Clang compiler has two front-end variants:

clang-cl uses a command-line interface that imitates MSVC.
clang and clang++ use a command-line interface that imitates GCC.

CMake version 3.15 gained support for the latter variant of the Clang compiler, but glfw contains a CMake file that uses CMAKE_C_SIMULATE_ID to detect the frontend; however, this variable is misleading when using clang on Windows with the GCC-like front-end. This pull request updates the test to use the (undocumented) variable CMAKE_C_COMPILER_FRONTEND_VARIANT when available (CMake 3.15+), which correctly identifies the command-line variant that must be used for compilation.
In short, this pull request permits building glfw on Windows build systems using clang and clang++, instead of clang-cl.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1874,2021-03-28T20:42:47Z,2021-04-22T20:40:21Z,2021-04-22T21:16:50Z,CLOSED,False,1,1,1,https://github.com/nmcclatchey,Fix failure to build when using GCC-like Clang front-end,1,"['bug', 'Windows', 'verified', 'build']",https://github.com/glfw/glfw/pull/1874,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1874#issuecomment-825191278,"At least on Windows, the Clang compiler has two front-end variants:

clang-cl uses a command-line interface that imitates MSVC.
clang and clang++ use a command-line interface that imitates GCC.

CMake version 3.15 gained support for the latter variant of the Clang compiler, but glfw contains a CMake file that uses CMAKE_C_SIMULATE_ID to detect the frontend; however, this variable is misleading when using clang on Windows with the GCC-like front-end. This pull request updates the test to use the (undocumented) variable CMAKE_C_COMPILER_FRONTEND_VARIANT when available (CMake 3.15+), which correctly identifies the command-line variant that must be used for compilation.
In short, this pull request permits building glfw on Windows build systems using clang and clang++, instead of clang-cl.",This should be fixed now with 061a026. Thank you for reporting this!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1883,2021-04-14T17:23:21Z,2021-04-23T12:46:40Z,2021-04-26T18:01:49Z,CLOSED,False,3,3,1,https://github.com/podsvirov,Applied patches from MSYS2 distro,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1883,https://github.com/podsvirov,1,https://github.com/glfw/glfw/pull/1883,"Patches:

 001-3.2-cmake-suffix.patch
 003-3.2-cmake-install.patch #1884

For more info see:
https://github.com/msys2/MINGW-packages/tree/bbba91bfc550cc702ae4f74eab0539c5fffac16d/mingw-w64-glfw","Patches:

 001-3.2-cmake-suffix.patch
 003-3.2-cmake-install.patch #1884

For more info see:
https://github.com/msys2/MINGW-packages/tree/bbba91bfc550cc702ae4f74eab0539c5fffac16d/mingw-w64-glfw",True,{}
glfw/glfw,https://github.com/glfw/glfw,1883,2021-04-14T17:23:21Z,2021-04-23T12:46:40Z,2021-04-26T18:01:49Z,CLOSED,False,3,3,1,https://github.com/podsvirov,Applied patches from MSYS2 distro,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1883,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1883#issuecomment-819786386,"Patches:

 001-3.2-cmake-suffix.patch
 003-3.2-cmake-install.patch #1884

For more info see:
https://github.com/msys2/MINGW-packages/tree/bbba91bfc550cc702ae4f74eab0539c5fffac16d/mingw-w64-glfw",Thank you! I can't accept the import suffix change but I'll gladly merge the bindir one.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1883,2021-04-14T17:23:21Z,2021-04-23T12:46:40Z,2021-04-26T18:01:49Z,CLOSED,False,3,3,1,https://github.com/podsvirov,Applied patches from MSYS2 distro,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1883,https://github.com/podsvirov,3,https://github.com/glfw/glfw/pull/1883#issuecomment-819798118,"Patches:

 001-3.2-cmake-suffix.patch
 003-3.2-cmake-install.patch #1884

For more info see:
https://github.com/msys2/MINGW-packages/tree/bbba91bfc550cc702ae4f74eab0539c5fffac16d/mingw-w64-glfw","@elmindreda, for example, please look what filename the autoconf-based zlib -project produce (see Files: sections).
Many other projects have similar .a files for static libraries and .dll.a for shared libraries.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1883,2021-04-14T17:23:21Z,2021-04-23T12:46:40Z,2021-04-26T18:01:49Z,CLOSED,False,3,3,1,https://github.com/podsvirov,Applied patches from MSYS2 distro,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1883,https://github.com/podsvirov,4,https://github.com/glfw/glfw/pull/1883#issuecomment-821804871,"Patches:

 001-3.2-cmake-suffix.patch
 003-3.2-cmake-install.patch #1884

For more info see:
https://github.com/msys2/MINGW-packages/tree/bbba91bfc550cc702ae4f74eab0539c5fffac16d/mingw-w64-glfw","Thank you! I can't accept the import suffix change but I'll gladly merge the bindir one.

@elmindreda, then please merge #1884.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1884,2021-04-15T16:00:01Z,2021-04-23T12:46:40Z,2021-04-24T12:26:58Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix hardcoded runtime destination,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1884,https://github.com/podsvirov,1,https://github.com/glfw/glfw/pull/1884,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1884,2021-04-15T16:00:01Z,2021-04-23T12:46:40Z,2021-04-24T12:26:58Z,CLOSED,False,1,1,1,https://github.com/podsvirov,CMake: Fix hardcoded runtime destination,1,"['bug', 'verified', 'build']",https://github.com/glfw/glfw/pull/1884,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1884#issuecomment-825773324,,Thank you!,True,{'LAUGH': ['https://github.com/podsvirov']}
glfw/glfw,https://github.com/glfw/glfw,1890,2021-04-22T06:29:32Z,2021-10-27T16:40:39Z,2021-10-27T16:49:11Z,CLOSED,False,13,9,4,https://github.com/charles-lunarg,Make `GLFW_VULKAN_STATIC` available only on Apple platforms,1,"['macOS', 'Vulkan']",https://github.com/glfw/glfw/pull/1890,https://github.com/charles-lunarg,1,https://github.com/glfw/glfw/pull/1890,"The Vulkan-Loader restricted support for static linking to only Apple platforms.
This commit makes the CMake option only visible on Apple platforms and
updates the documentation to reflect it.
Resolves #1776","The Vulkan-Loader restricted support for static linking to only Apple platforms.
This commit makes the CMake option only visible on Apple platforms and
updates the documentation to reflect it.
Resolves #1776",True,{}
glfw/glfw,https://github.com/glfw/glfw,1895,2021-05-03T22:50:46Z,,2021-09-03T15:21:56Z,OPEN,False,4,2,2,https://github.com/christianrauch,make windows opaque by default,3,"['bug', 'Wayland']",https://github.com/glfw/glfw/pull/1895,https://github.com/christianrauch,1,https://github.com/glfw/glfw/pull/1895,Make all windows opaque by default to fix rendering issues with most of the tests and examples on Wayland.,Make all windows opaque by default to fix rendering issues with most of the tests and examples on Wayland.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1899,2021-05-12T19:03:43Z,2021-09-02T17:24:20Z,2021-09-02T17:24:38Z,CLOSED,False,10,5,4,https://github.com/warisb,Fix Wayland cursor offset when the cursor shape changes,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1899,https://github.com/warisb,1,https://github.com/glfw/glfw/pull/1899,"The wayland protocol spec
https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_pointer
States that set_cursor must be called with the serial number of the
enter event. However, GLFW is passing in the serial number of the latest
received event, which does not meet the protocol spec.
As a result, set_cursor calls were simply ignored by the compositor.
This fix complies with the protocol more closely by specifically caching the
enter event serial, and using it for all set_cursor calls.
Fixes #1706","The wayland protocol spec
https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_pointer
States that set_cursor must be called with the serial number of the
enter event. However, GLFW is passing in the serial number of the latest
received event, which does not meet the protocol spec.
As a result, set_cursor calls were simply ignored by the compositor.
This fix complies with the protocol more closely by specifically caching the
enter event serial, and using it for all set_cursor calls.
Fixes #1706",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1899,2021-05-12T19:03:43Z,2021-09-02T17:24:20Z,2021-09-02T17:24:38Z,CLOSED,False,10,5,4,https://github.com/warisb,Fix Wayland cursor offset when the cursor shape changes,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1899,https://github.com/warisb,2,https://github.com/glfw/glfw/pull/1899#issuecomment-840107970,"The wayland protocol spec
https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_pointer
States that set_cursor must be called with the serial number of the
enter event. However, GLFW is passing in the serial number of the latest
received event, which does not meet the protocol spec.
As a result, set_cursor calls were simply ignored by the compositor.
This fix complies with the protocol more closely by specifically caching the
enter event serial, and using it for all set_cursor calls.
Fixes #1706","Note that this bug affected cursor modes (Disable, Hidden, Normal) as well, so if anyone noticed a problem related to that, this PR should also fix it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1899,2021-05-12T19:03:43Z,2021-09-02T17:24:20Z,2021-09-02T17:24:38Z,CLOSED,False,10,5,4,https://github.com/warisb,Fix Wayland cursor offset when the cursor shape changes,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1899,https://github.com/warriormaster12,3,https://github.com/glfw/glfw/pull/1899#issuecomment-864395878,"The wayland protocol spec
https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_pointer
States that set_cursor must be called with the serial number of the
enter event. However, GLFW is passing in the serial number of the latest
received event, which does not meet the protocol spec.
As a result, set_cursor calls were simply ignored by the compositor.
This fix complies with the protocol more closely by specifically caching the
enter event serial, and using it for all set_cursor calls.
Fixes #1706",Only seems to work with Opengl but not with Vulkan,True,{}
glfw/glfw,https://github.com/glfw/glfw,1899,2021-05-12T19:03:43Z,2021-09-02T17:24:20Z,2021-09-02T17:24:38Z,CLOSED,False,10,5,4,https://github.com/warisb,Fix Wayland cursor offset when the cursor shape changes,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1899,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1899#issuecomment-911902799,"The wayland protocol spec
https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_pointer
States that set_cursor must be called with the serial number of the
enter event. However, GLFW is passing in the serial number of the latest
received event, which does not meet the protocol spec.
As a result, set_cursor calls were simply ignored by the compositor.
This fix complies with the protocol more closely by specifically caching the
enter event serial, and using it for all set_cursor calls.
Fixes #1706",This has been merged as e7758c5. Thank you for the fix!,True,{'HEART': ['https://github.com/warisb']}
glfw/glfw,https://github.com/glfw/glfw,1902,2021-05-21T08:12:39Z,2021-05-21T08:13:02Z,2021-10-24T16:05:10Z,CLOSED,False,42,0,1,https://github.com/AkZuza,Main,4,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1902,https://github.com/AkZuza,1,https://github.com/glfw/glfw/pull/1902,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1908,2021-06-01T20:56:19Z,2021-08-31T18:55:05Z,2021-08-31T18:57:29Z,CLOSED,False,3,1,2,https://github.com/koraykilinc,Fix some keys not repeating in Wayland,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1908,https://github.com/koraykilinc,1,https://github.com/glfw/glfw/pull/1908,"According to https://xkbcommon.org/doc/current/group__components.html#ga9d7f998efeca98b3afc7c257bbac90a8, xkb_keymap_key_repeats requires keymap and keycode as input.
int xkb_keymap_key_repeats( struct xkb_keymap * keymap,
			    xkb_keycode_t key
)

However, in wl_init.c:inputChar, we are passing in xkb_keysym_t which was a type mismatch.
This results in some keys not repeating when they should and vice versa.","According to https://xkbcommon.org/doc/current/group__components.html#ga9d7f998efeca98b3afc7c257bbac90a8, xkb_keymap_key_repeats requires keymap and keycode as input.
int xkb_keymap_key_repeats( struct xkb_keymap * keymap,
			    xkb_keycode_t key
)

However, in wl_init.c:inputChar, we are passing in xkb_keysym_t which was a type mismatch.
This results in some keys not repeating when they should and vice versa.",True,"{'THUMBS_UP': ['https://github.com/warisb', 'https://github.com/JeremyBorys', 'https://github.com/gracicot', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1908,2021-06-01T20:56:19Z,2021-08-31T18:55:05Z,2021-08-31T18:57:29Z,CLOSED,False,3,1,2,https://github.com/koraykilinc,Fix some keys not repeating in Wayland,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1908,https://github.com/warisb,2,https://github.com/glfw/glfw/pull/1908#issuecomment-890399675,"According to https://xkbcommon.org/doc/current/group__components.html#ga9d7f998efeca98b3afc7c257bbac90a8, xkb_keymap_key_repeats requires keymap and keycode as input.
int xkb_keymap_key_repeats( struct xkb_keymap * keymap,
			    xkb_keycode_t key
)

However, in wl_init.c:inputChar, we are passing in xkb_keysym_t which was a type mismatch.
This results in some keys not repeating when they should and vice versa.",I think this one is a no-brainer. Simply fixing a protocol misuse. I encourage maintainers to take a look asap.,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1908,2021-06-01T20:56:19Z,2021-08-31T18:55:05Z,2021-08-31T18:57:29Z,CLOSED,False,3,1,2,https://github.com/koraykilinc,Fix some keys not repeating in Wayland,1,"['bug', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/1908,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1908#issuecomment-909515089,"According to https://xkbcommon.org/doc/current/group__components.html#ga9d7f998efeca98b3afc7c257bbac90a8, xkb_keymap_key_repeats requires keymap and keycode as input.
int xkb_keymap_key_repeats( struct xkb_keymap * keymap,
			    xkb_keycode_t key
)

However, in wl_init.c:inputChar, we are passing in xkb_keysym_t which was a type mismatch.
This results in some keys not repeating when they should and vice versa.",This has been merged as 216d5e8. Thank you for the fix!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1909,2021-06-03T11:54:59Z,,2021-06-25T18:33:21Z,OPEN,False,345,137,16,https://github.com/Bayemite,Add get window title function [help needed],16,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'help needed']",https://github.com/glfw/glfw/pull/1909,https://github.com/Bayemite,1,https://github.com/glfw/glfw/pull/1909,"This is addressing issue #1448, adding a function that queries the window title.
The implementation prefers calls to platform specific functions where available.
TODO:
It would be nice if someone could help out with the Cocoa and Wayland implementations- I have no access to these platforms.","This is addressing issue #1448, adding a function that queries the window title.
The implementation prefers calls to platform specific functions where available.
TODO:
It would be nice if someone could help out with the Cocoa and Wayland implementations- I have no access to these platforms.",True,"{'EYES': ['https://github.com/robbie-vanderzee'], 'THUMBS_UP': ['https://github.com/malytomas']}"
glfw/glfw,https://github.com/glfw/glfw,1912,2021-06-09T19:08:53Z,2021-06-14T17:45:47Z,2021-06-22T18:05:08Z,MERGED,True,125,136,5,https://github.com/elmindreda,Start transition to Actions for CI builds,4,['build'],https://github.com/glfw/glfw/pull/1912,https://github.com/elmindreda,1,https://github.com/glfw/glfw/pull/1912,"Since travis-ci.org is shutting down soon, we need a new provider for non-Windows CI builds.
This PR proposes to move both all Travis builds and the VS 2019 AppVeyor builds to Actions, with the hope of eventually moving all CI builds to Actions.
Other changes include

Setting up automated builds of the latest branch before it starts receiving merge commits with 3.4.
Removing a seemingly unused dependency for the Wayland builds.
Removing the trailing whitespace test for now. A clang-format file might be a better form for it?","Since travis-ci.org is shutting down soon, we need a new provider for non-Windows CI builds.
This PR proposes to move both all Travis builds and the VS 2019 AppVeyor builds to Actions, with the hope of eventually moving all CI builds to Actions.
Other changes include

Setting up automated builds of the latest branch before it starts receiving merge commits with 3.4.
Removing a seemingly unused dependency for the Wayland builds.
Removing the trailing whitespace test for now. A clang-format file might be a better form for it?",True,{}
glfw/glfw,https://github.com/glfw/glfw,1913,2021-06-10T08:49:28Z,2021-08-16T19:21:20Z,2021-08-16T19:21:20Z,CLOSED,False,27,0,2,https://github.com/tksuoran,Win32: Expose native HDC with glfwGetWGLContextDC,1,"['enhancement', 'Windows', 'documentation']",https://github.com/glfw/glfw/pull/1913,https://github.com/tksuoran,1,https://github.com/glfw/glfw/pull/1913,"OpenXR requires both HDC and HGLRC, so I added getter for HDC.","OpenXR requires both HDC and HGLRC, so I added getter for HDC.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1913,2021-06-10T08:49:28Z,2021-08-16T19:21:20Z,2021-08-16T19:21:20Z,CLOSED,False,27,0,2,https://github.com/tksuoran,Win32: Expose native HDC with glfwGetWGLContextDC,1,"['enhancement', 'Windows', 'documentation']",https://github.com/glfw/glfw/pull/1913,https://github.com/tksuoran,2,https://github.com/glfw/glfw/pull/1913#issuecomment-858461481,"OpenXR requires both HDC and HGLRC, so I added getter for HDC.",I suppose GetDC(glfwGetWin32Window()) would do so this is probably not needed.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1913,2021-06-10T08:49:28Z,2021-08-16T19:21:20Z,2021-08-16T19:21:20Z,CLOSED,False,27,0,2,https://github.com/tksuoran,Win32: Expose native HDC with glfwGetWGLContextDC,1,"['enhancement', 'Windows', 'documentation']",https://github.com/glfw/glfw/pull/1913,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/1913#issuecomment-860781440,"OpenXR requires both HDC and HGLRC, so I added getter for HDC.","Yes, GetDC will work fine and will return the same DC as the GLFW function would, as our window gets its own private one. That needs to be noted in (at least) the documentation for the Win32 native access functions, though.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1913,2021-06-10T08:49:28Z,2021-08-16T19:21:20Z,2021-08-16T19:21:20Z,CLOSED,False,27,0,2,https://github.com/tksuoran,Win32: Expose native HDC with glfwGetWGLContextDC,1,"['enhancement', 'Windows', 'documentation']",https://github.com/glfw/glfw/pull/1913,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1913#issuecomment-899759138,"OpenXR requires both HDC and HGLRC, so I added getter for HDC.",Closing this as fixed by the documentation update showing the GetDC solution above.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1923,2021-06-23T07:17:09Z,2021-06-23T19:32:51Z,2021-06-23T19:33:14Z,CLOSED,False,1,1,1,https://github.com/tombsar,Consistent subsections in compile guide,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1923,https://github.com/tombsar,1,https://github.com/glfw/glfw/pull/1923,"In the compile guide, the ""Dependencies for Linux and OSMesa"" section looks to be one level too high in the hierarchy. I've moved it to be in line with the similarly-named sub-sub-sections.","In the compile guide, the ""Dependencies for Linux and OSMesa"" section looks to be one level too high in the hierarchy. I've moved it to be in line with the similarly-named sub-sub-sections.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1923,2021-06-23T07:17:09Z,2021-06-23T19:32:51Z,2021-06-23T19:33:14Z,CLOSED,False,1,1,1,https://github.com/tombsar,Consistent subsections in compile guide,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1923,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1923#issuecomment-867103638,"In the compile guide, the ""Dependencies for Linux and OSMesa"" section looks to be one level too high in the hierarchy. I've moved it to be in line with the similarly-named sub-sub-sections.","Well spotted, thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1925,2021-06-27T16:51:01Z,,2022-04-29T15:08:00Z,OPEN,False,84,0,6,https://github.com/knokko,Add glfwGetGLXFBConfig,5,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1925,https://github.com/knokko,1,https://github.com/glfw/glfw/pull/1925,"Description
This commit adds a new function called glfwGetGLXFBConfig that will return the GLXFBConfig that was chosen to create a given window.
Motivation
This is needed to create an OpenXR session with OpenGL rendering on some Linux systems: It is needed to set the glxFBConfig value of the XrGraphicsBindingOpenGLXlibKHR struct.
Review notes
I am not an experienced C developer and this is the first time I (try to) contribute to GLFW, so I might have missed something important. Also, I don't know a good way to test whether this works correctly; I only checked that it still compiles and that some of the examples still work.","Description
This commit adds a new function called glfwGetGLXFBConfig that will return the GLXFBConfig that was chosen to create a given window.
Motivation
This is needed to create an OpenXR session with OpenGL rendering on some Linux systems: It is needed to set the glxFBConfig value of the XrGraphicsBindingOpenGLXlibKHR struct.
Review notes
I am not an experienced C developer and this is the first time I (try to) contribute to GLFW, so I might have missed something important. Also, I don't know a good way to test whether this works correctly; I only checked that it still compiles and that some of the examples still work.",True,"{'THUMBS_UP': ['https://github.com/leon0399', 'https://github.com/SWinxy']}"
glfw/glfw,https://github.com/glfw/glfw,1925,2021-06-27T16:51:01Z,,2022-04-29T15:08:00Z,OPEN,False,84,0,6,https://github.com/knokko,Add glfwGetGLXFBConfig,5,"['enhancement', 'X11']",https://github.com/glfw/glfw/pull/1925,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1925#issuecomment-1113429225,"Description
This commit adds a new function called glfwGetGLXFBConfig that will return the GLXFBConfig that was chosen to create a given window.
Motivation
This is needed to create an OpenXR session with OpenGL rendering on some Linux systems: It is needed to set the glxFBConfig value of the XrGraphicsBindingOpenGLXlibKHR struct.
Review notes
I am not an experienced C developer and this is the first time I (try to) contribute to GLFW, so I might have missed something important. Also, I don't know a good way to test whether this works correctly; I only checked that it still compiles and that some of the examples still work.","Looks good, will add this. Thanks!
I'm currently restructuring the internals of context creation and this will be even easier to implement after.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1928,2021-07-01T09:56:05Z,2021-08-16T19:16:33Z,2021-08-17T09:09:10Z,CLOSED,False,21,16,5,https://github.com/Zino2201,Rename BUILD_SHARED_LIBS to GLFW_BUILD_SHARED_LIBS,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1928,https://github.com/Zino2201,1,https://github.com/glfw/glfw/pull/1928,"So lately I was trying to use GLFW in my project combined with other libs.
I needed GLFW to be built as a shared library, but the option BUILD_SHARED_LIBS actually sets a CMake flag (https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html).
This flag turns all libraries that don't explicitly specify themselves as STATIC or SHARED into shared libraries, conflicting with some libraries.
This addresses #279.","So lately I was trying to use GLFW in my project combined with other libs.
I needed GLFW to be built as a shared library, but the option BUILD_SHARED_LIBS actually sets a CMake flag (https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html).
This flag turns all libraries that don't explicitly specify themselves as STATIC or SHARED into shared libraries, conflicting with some libraries.
This addresses #279.",True,{'THUMBS_UP': ['https://github.com/PierreEVEN']}
glfw/glfw,https://github.com/glfw/glfw,1928,2021-07-01T09:56:05Z,2021-08-16T19:16:33Z,2021-08-17T09:09:10Z,CLOSED,False,21,16,5,https://github.com/Zino2201,Rename BUILD_SHARED_LIBS to GLFW_BUILD_SHARED_LIBS,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/1928,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1928#issuecomment-899788672,"So lately I was trying to use GLFW in my project combined with other libs.
I needed GLFW to be built as a shared library, but the option BUILD_SHARED_LIBS actually sets a CMake flag (https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html).
This flag turns all libraries that don't explicitly specify themselves as STATIC or SHARED into shared libraries, conflicting with some libraries.
This addresses #279.","Thank you for this PR. This feature has been requested several times over the years and should be available in a usable form now.
The (optional) CMake variable GLFW_LIBRARY_TYPE added by d838497 will now let you control the library type of just GLFW. When set it will override the value of BUILD_SHARED_LIBS for GLFW but won't affect other libraries.
Note that this change does contain a CMake variable (almost) named GLFW_BUILD_SHARED_LIBS, but this one should not be set by the user. It's just used to avoid shadowing the value of BUILD_SHARED_LIBS from a higher-level project.",True,{'THUMBS_UP': ['https://github.com/Zino2201']}
glfw/glfw,https://github.com/glfw/glfw,1931,2021-07-08T03:26:37Z,2021-07-16T17:42:40Z,2021-07-20T18:17:22Z,MERGED,True,8,1,1,https://github.com/davidvmckay,"Clarify ""as you would"" for beginners.",2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1931,https://github.com/davidvmckay,1,https://github.com/glfw/glfw/pull/1931,fixes #1088,fixes #1088,True,{}
glfw/glfw,https://github.com/glfw/glfw,1931,2021-07-08T03:26:37Z,2021-07-16T17:42:40Z,2021-07-20T18:17:22Z,MERGED,True,8,1,1,https://github.com/davidvmckay,"Clarify ""as you would"" for beginners.",2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1931,https://github.com/aloucks,2,https://github.com/glfw/glfw/pull/1931#issuecomment-876734000,fixes #1088,I think it would be more helpful to have the cmake one-liners.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1931,2021-07-08T03:26:37Z,2021-07-16T17:42:40Z,2021-07-20T18:17:22Z,MERGED,True,8,1,1,https://github.com/davidvmckay,"Clarify ""as you would"" for beginners.",2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1931,https://github.com/gracicot,3,https://github.com/glfw/glfw/pull/1931#issuecomment-876739989,fixes #1088,"Usually after doing generating cmake command, you can do cmake --build . in the build directory, and it will invoke whatever buildsystem cmake generated.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1931,2021-07-08T03:26:37Z,2021-07-16T17:42:40Z,2021-07-20T18:17:22Z,MERGED,True,8,1,1,https://github.com/davidvmckay,"Clarify ""as you would"" for beginners.",2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1931,https://github.com/davidvmckay,4,https://github.com/glfw/glfw/pull/1931#issuecomment-880175273,fixes #1088,"Thank you @aloucks and @gracicot -- those are nice suggestions.  However, that didn't seem to work for me with the current state of master in this repository -- SO I'm just trying to improve documentation for users of the repo as its build process stands today.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1931,2021-07-08T03:26:37Z,2021-07-16T17:42:40Z,2021-07-20T18:17:22Z,MERGED,True,8,1,1,https://github.com/davidvmckay,"Clarify ""as you would"" for beginners.",2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1931,https://github.com/elmindreda,5,https://github.com/glfw/glfw/pull/1931#issuecomment-881612536,fixes #1088,"@davidvmckay Thank you for this PR. That sentence really did need usage examples. This fix led to me doing a refresh of most of the guide (3b95970). I removed the reference to installation for now. Installation and its pros and cons needs its own section.
If building the main branch with cmake --build doesn't work then please report that as a bug in a new issue.
@aloucks @gracicot CMake one-liners are great. In the update above I show both the make and CMake build lines, partly to demonstrate that people don't need to build via CMake, if that makes sense.
This is only an initial refresh and I would love feedback on it.",True,"{'THUMBS_UP': ['https://github.com/aloucks'], 'HOORAY': ['https://github.com/davidvmckay']}"
glfw/glfw,https://github.com/glfw/glfw,1931,2021-07-08T03:26:37Z,2021-07-16T17:42:40Z,2021-07-20T18:17:22Z,MERGED,True,8,1,1,https://github.com/davidvmckay,"Clarify ""as you would"" for beginners.",2,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1931,https://github.com/davidvmckay,6,https://github.com/glfw/glfw/pull/1931#issuecomment-883597750,fixes #1088,"This fix led to me doing a refresh of most of the guide ([3b95970]
This is only an initial refresh and I would love feedback on it.

@elmindreda
Wow, that is a fantastic amount of enhancement to the build guide.  I can't wait to see it published to the main site.  Also loving the updates to the project board.",True,{'HOORAY': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1939,2021-07-25T23:47:08Z,2021-07-25T23:47:32Z,2021-10-24T16:11:19Z,CLOSED,False,73,0,1,https://github.com/benfc1993,Rename premake file,3,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1939,https://github.com/benfc1993,1,https://github.com/glfw/glfw/pull/1939,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1942,2021-07-31T08:34:24Z,,2021-08-16T20:46:09Z,OPEN,False,6,1,1,https://github.com/hiteshsahu,Updated Readme With Fullform & Icon,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/1942,https://github.com/hiteshsahu,1,https://github.com/glfw/glfw/pull/1942,"Before:

After:","Before:

After:",True,{}
glfw/glfw,https://github.com/glfw/glfw,1943,2021-08-01T17:25:37Z,2021-08-15T20:09:16Z,2021-08-15T20:14:22Z,CLOSED,False,192,12,7,https://github.com/elmindreda,Make wayland-client dynamically loaded,2,"['enhancement', 'Wayland']",https://github.com/glfw/glfw/pull/1943,https://github.com/elmindreda,1,https://github.com/glfw/glfw/pull/1943,"This adds dynamic loading of the last bit of the Wayland API, which is needed for runtime platform (window system) selection.
The insight to use wayland.xml to resolve the difficult-to-redirect interface symbols was gleaned from SDL.
Instead of compiling the code output of wayland-scanner separately it is now part of the wl_init.c compilation unit.  This lets us do things like transparently rename our copies of Wayland globals.
The OS version of wayland-client-protocol.h is no longer used by GLFW, but it is presumably ABI compatible with the output of wayland-scanner.","This adds dynamic loading of the last bit of the Wayland API, which is needed for runtime platform (window system) selection.
The insight to use wayland.xml to resolve the difficult-to-redirect interface symbols was gleaned from SDL.
Instead of compiling the code output of wayland-scanner separately it is now part of the wl_init.c compilation unit.  This lets us do things like transparently rename our copies of Wayland globals.
The OS version of wayland-client-protocol.h is no longer used by GLFW, but it is presumably ABI compatible with the output of wayland-scanner.",True,"{'HOORAY': ['https://github.com/gracicot', 'https://github.com/QuLogic'], 'ROCKET': ['https://github.com/gracicot']}"
glfw/glfw,https://github.com/glfw/glfw,1944,2021-08-04T07:22:38Z,2021-08-12T18:16:37Z,2021-10-24T16:18:09Z,CLOSED,False,123,0,29,https://github.com/KirkXu,Lo aaa,3,['wontfix'],https://github.com/glfw/glfw/pull/1944,https://github.com/KirkXu,1,https://github.com/glfw/glfw/pull/1944,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1944,2021-08-04T07:22:38Z,2021-08-12T18:16:37Z,2021-10-24T16:18:09Z,CLOSED,False,123,0,29,https://github.com/KirkXu,Lo aaa,3,['wontfix'],https://github.com/glfw/glfw/pull/1944,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1944#issuecomment-892726355,,What is the purpose of this pull request?,True,{}
glfw/glfw,https://github.com/glfw/glfw,1946,2021-08-09T19:47:28Z,2021-08-09T20:01:29Z,2021-10-24T16:15:54Z,CLOSED,False,97,0,2,https://github.com/Langwedocjusz,Added premake,3,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/1946,https://github.com/Langwedocjusz,1,https://github.com/glfw/glfw/pull/1946,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1947,2021-08-12T20:46:31Z,2021-08-26T14:18:18Z,2021-08-26T14:18:37Z,CLOSED,False,648,153,33,https://github.com/elmindreda,Add pluggable heap allocator,2,['enhancement'],https://github.com/glfw/glfw/pull/1947,https://github.com/elmindreda,1,https://github.com/glfw/glfw/pull/1947,"This adds the glfwInitAllocator function for specifying a custom memory allocator to use instead of the C runtime library.
The allocator is a struct of type GLFWallocator with fields corresponding to malloc, realloc and free, while the internal API corresponds to calloc, realloc and free.
Heap allocation calls are filtered before reaching the user-provided functions, so de-allocation of NULL and allocations of zero bytes are not passed on, reallocating NULL is transformed into an allocation and reallocating to size zero is transformed into de-allocation.
The clearing of a new block to zero is performed by the internal calloc-like function.","This adds the glfwInitAllocator function for specifying a custom memory allocator to use instead of the C runtime library.
The allocator is a struct of type GLFWallocator with fields corresponding to malloc, realloc and free, while the internal API corresponds to calloc, realloc and free.
Heap allocation calls are filtered before reaching the user-provided functions, so de-allocation of NULL and allocations of zero bytes are not passed on, reallocating NULL is transformed into an allocation and reallocating to size zero is transformed into de-allocation.
The clearing of a new block to zero is performed by the internal calloc-like function.",True,{'HEART': ['https://github.com/lmariscal']}
glfw/glfw,https://github.com/glfw/glfw,1951,2021-08-20T05:23:22Z,2022-03-01T00:07:17Z,2022-03-10T20:32:35Z,CLOSED,False,1,1,1,https://github.com/Slemmie,fix bit shift runtime error,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1951,https://github.com/Slemmie,1,https://github.com/glfw/glfw/pull/1951,"Stumbled upon an issue while using GLFW in a project:
src/x11_window.c:1274:72: runtime error: left shift of 1 by 31 places cannot be represented in type 'int'
Had a look inside the file. it seems that either the value (1 << 31) is a mere 'inf value', or, perhaps a check to make sure 'diff' itself wont overflow on its own. Proposed change is to simply lower the value a little (by half, for ease). If the value must be exactly (1 << 31), though, perhaps using some other datatype like a long value is better, or just change the condition to (diff <= (1 << 31) - 1) which is achievable without ever casting away from int, maybe use 'INT_MAX'.
I encountered the error after adding glfwCallbacks and then pressing the same keyboard key twice; to be exact, the first instance of pressing some key for the second time during runtime triggered the error, after that the error wouldn't reappear until relaunching the program.
EDIT: I am using Ubuntu 20.04","Stumbled upon an issue while using GLFW in a project:
src/x11_window.c:1274:72: runtime error: left shift of 1 by 31 places cannot be represented in type 'int'
Had a look inside the file. it seems that either the value (1 << 31) is a mere 'inf value', or, perhaps a check to make sure 'diff' itself wont overflow on its own. Proposed change is to simply lower the value a little (by half, for ease). If the value must be exactly (1 << 31), though, perhaps using some other datatype like a long value is better, or just change the condition to (diff <= (1 << 31) - 1) which is achievable without ever casting away from int, maybe use 'INT_MAX'.
I encountered the error after adding glfwCallbacks and then pressing the same keyboard key twice; to be exact, the first instance of pressing some key for the second time during runtime triggered the error, after that the error wouldn't reappear until relaunching the program.
EDIT: I am using Ubuntu 20.04",True,{}
glfw/glfw,https://github.com/glfw/glfw,1951,2021-08-20T05:23:22Z,2022-03-01T00:07:17Z,2022-03-10T20:32:35Z,CLOSED,False,1,1,1,https://github.com/Slemmie,fix bit shift runtime error,3,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1951,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1951#issuecomment-1064477865,"Stumbled upon an issue while using GLFW in a project:
src/x11_window.c:1274:72: runtime error: left shift of 1 by 31 places cannot be represented in type 'int'
Had a look inside the file. it seems that either the value (1 << 31) is a mere 'inf value', or, perhaps a check to make sure 'diff' itself wont overflow on its own. Proposed change is to simply lower the value a little (by half, for ease). If the value must be exactly (1 << 31), though, perhaps using some other datatype like a long value is better, or just change the condition to (diff <= (1 << 31) - 1) which is achievable without ever casting away from int, maybe use 'INT_MAX'.
I encountered the error after adding glfwCallbacks and then pressing the same keyboard key twice; to be exact, the first instance of pressing some key for the second time during runtime triggered the error, after that the error wouldn't reappear until relaunching the program.
EDIT: I am using Ubuntu 20.04",Sorry for the delay. This has been merged now as b54fb0a. Thank you for the fix!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1952,2021-08-22T12:32:18Z,,2021-10-18T23:00:19Z,OPEN,False,21,7,8,https://github.com/divVerent,Enable joystick support on FreeBSD using the Linux driver.,1,"['enhancement', 'FreeBSD', 'input']",https://github.com/glfw/glfw/pull/1952,https://github.com/divVerent,1,https://github.com/glfw/glfw/pull/1952,"This is arguably incomplete; it supports joysticks via webcamd (which uses Linux
drivers running in userspace), but not via uhidd (which is FreeBSD's own thing).
Nevertheless a strict improvement.
Tested using a gamepad I have that is supported by the ""xpad"" Linux driver.
Note: adds build dependency on devel/evdev-proto and devel/libinotify.
To actually use it, need to install multimedia/webcamd at runtime (if not
installed or not running, no joysticks will be detected).
Fixes #1892.","This is arguably incomplete; it supports joysticks via webcamd (which uses Linux
drivers running in userspace), but not via uhidd (which is FreeBSD's own thing).
Nevertheless a strict improvement.
Tested using a gamepad I have that is supported by the ""xpad"" Linux driver.
Note: adds build dependency on devel/evdev-proto and devel/libinotify.
To actually use it, need to install multimedia/webcamd at runtime (if not
installed or not running, no joysticks will be detected).
Fixes #1892.",True,{'HOORAY': ['https://github.com/FrostKiwi']}
glfw/glfw,https://github.com/glfw/glfw,1952,2021-08-22T12:32:18Z,,2021-10-18T23:00:19Z,OPEN,False,21,7,8,https://github.com/divVerent,Enable joystick support on FreeBSD using the Linux driver.,1,"['enhancement', 'FreeBSD', 'input']",https://github.com/glfw/glfw/pull/1952,https://github.com/divVerent,2,https://github.com/glfw/glfw/pull/1952#issuecomment-903262448,"This is arguably incomplete; it supports joysticks via webcamd (which uses Linux
drivers running in userspace), but not via uhidd (which is FreeBSD's own thing).
Nevertheless a strict improvement.
Tested using a gamepad I have that is supported by the ""xpad"" Linux driver.
Note: adds build dependency on devel/evdev-proto and devel/libinotify.
To actually use it, need to install multimedia/webcamd at runtime (if not
installed or not running, no joysticks will be detected).
Fixes #1892.","Note: I have not tested this; my game is written in Go, which is based on the 3.3 release series of glfw, and this change is a port-forward of my 3.3 changes I actually did test. Joystick APIs however have changed significantly from 3.3 to master.
Nevertheless, the changes are trivial except for the added build dependency.
Will check later if I can make a local go-gl/glfw build based on the current master branch.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1952,2021-08-22T12:32:18Z,,2021-10-18T23:00:19Z,OPEN,False,21,7,8,https://github.com/divVerent,Enable joystick support on FreeBSD using the Linux driver.,1,"['enhancement', 'FreeBSD', 'input']",https://github.com/glfw/glfw/pull/1952,https://github.com/divVerent,3,https://github.com/glfw/glfw/pull/1952#issuecomment-903270435,"This is arguably incomplete; it supports joysticks via webcamd (which uses Linux
drivers running in userspace), but not via uhidd (which is FreeBSD's own thing).
Nevertheless a strict improvement.
Tested using a gamepad I have that is supported by the ""xpad"" Linux driver.
Note: adds build dependency on devel/evdev-proto and devel/libinotify.
To actually use it, need to install multimedia/webcamd at runtime (if not
installed or not running, no joysticks will be detected).
Fixes #1892.","Now tested the changes properly: copying the glfw master source into go-gl/glfw/v3.3/glfw/glfw works just fine; only changes to go-gl/glfw then also needed is using linux_joystick.c and passing -linotify to the linker, as expected.
Tested using ugen0.3: <BDA Xbox ONE Core controller> at usbus0.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1952,2021-08-22T12:32:18Z,,2021-10-18T23:00:19Z,OPEN,False,21,7,8,https://github.com/divVerent,Enable joystick support on FreeBSD using the Linux driver.,1,"['enhancement', 'FreeBSD', 'input']",https://github.com/glfw/glfw/pull/1952,https://github.com/FrostKiwi,4,https://github.com/glfw/glfw/pull/1952#issuecomment-903276468,"This is arguably incomplete; it supports joysticks via webcamd (which uses Linux
drivers running in userspace), but not via uhidd (which is FreeBSD's own thing).
Nevertheless a strict improvement.
Tested using a gamepad I have that is supported by the ""xpad"" Linux driver.
Note: adds build dependency on devel/evdev-proto and devel/libinotify.
To actually use it, need to install multimedia/webcamd at runtime (if not
installed or not running, no joysticks will be detected).
Fixes #1892.","Works for me for both a DualShock 3 and a 360 Controller. Big <3 <3
Curious how this will interact with bluetooth controllers. I am intersted in getting Bluetooth controllers to work, namely the DualShock 3, 4 and Dualsense. (PS3, PS4, PS5) Fun investigations ahead...",True,{}
glfw/glfw,https://github.com/glfw/glfw,1952,2021-08-22T12:32:18Z,,2021-10-18T23:00:19Z,OPEN,False,21,7,8,https://github.com/divVerent,Enable joystick support on FreeBSD using the Linux driver.,1,"['enhancement', 'FreeBSD', 'input']",https://github.com/glfw/glfw/pull/1952,https://github.com/divVerent,5,https://github.com/glfw/glfw/pull/1952#issuecomment-903695314,"This is arguably incomplete; it supports joysticks via webcamd (which uses Linux
drivers running in userspace), but not via uhidd (which is FreeBSD's own thing).
Nevertheless a strict improvement.
Tested using a gamepad I have that is supported by the ""xpad"" Linux driver.
Note: adds build dependency on devel/evdev-proto and devel/libinotify.
To actually use it, need to install multimedia/webcamd at runtime (if not
installed or not running, no joysticks will be detected).
Fixes #1892.","Sadly I can already tell you that webcamd does not support Bluetooth
devices. I do not have any myself, but it seems like they're supported
by ports that are neither webcamd nor uhidd, but implement the uhidd
protocol.

So eventually GLFW will also need the uhidd support; my PR only covers
the webcamd protocol at the moment, primarily because it's a trivial
change given the existing Linux implementation already works for it
when actually enabled.
…
On Sun, Aug 22, 2021 at 10:20 AM Vlad ***@***.***> wrote:

 Works for me for both a DualShock 3 and a 360 Controller. Big <3 <3

 Curious how this will interact with bluetooth controllers. I am intersted in getting Bluetooth controllers to work, namely the DualShock 3, 4 and Dualsense. (PS3, PS4, PS5) Fun investigations ahead...

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.
 Triage notifications on the go with GitHub Mobile for iOS or Android.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1953,2021-08-24T00:37:00Z,2021-08-24T21:29:21Z,2021-08-24T21:29:21Z,CLOSED,False,1,1,1,https://github.com/Richardds,Fix invalid preprocessor command 'warning',1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1953,https://github.com/Richardds,1,https://github.com/glfw/glfw/pull/1953,"Building GLFW 3.3.4 on Windows 10 (x64) MSVC results in a compiler error: Invalid preprocessor command 'warning'.
#warning macro is not supported in MSVC.
OS and version: Microsoft Windows 10 Pro (10.0.19043 Build 19043)
Compiler version: 19.29.30133 (x64)
Release or commit: 3.3.4
CMake properties:

Build log:
C:\Development\Build\glfw-3.3.4>msbuild GLFW.sln /t:Build /p:Configuration=Release
Microsoft (R) Build Engine version 16.11.0+0538acc04 for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

Building the projects in this solution one at a time. To enable parallel build, please add the ""-m"" switch.
Build started 24/08/2021 02:18:59.
Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" on node 1 (Build target(s)).
ValidateSolutionConfiguration:
  Building solution configuration ""Release|x64"".
ValidateProjects:
  The project ""ALL_BUILD"" is not selected for building in solution configuration ""Release|x64"".
Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (1) is building ""C:\Development\Build\glfw-3.3.4\ZERO_CHECK.vcxproj""
 (2) on node 1 (default targets).
PrepareForBuild:
  Creating directory ""x64\Release\ZERO_CHECK\"".
  Creating directory ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\"".
InitializeBuildStatus:
  Creating ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\unsuccessfulbuild"" because ""AlwaysCreate"" was specified.
CustomBuild:
  Checking Build System
FinalizeBuildStatus:
  Deleting file ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\unsuccessfulbuild"".
  Touching ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\ZERO_CHECK.lastbuildstate"".
Done Building Project ""C:\Development\Build\glfw-3.3.4\ZERO_CHECK.vcxproj"" (default targets).

Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (1) is building ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.me
taproj"" (3) on node 1 (default targets).
Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (3) is building ""C:\Development\Build\glfw-3.3.4\sr
c\glfw.vcxproj"" (4) on node 1 (default targets).
PrepareForBuild:
  Creating directory ""glfw.dir\Release\"".
  Creating directory ""C:\Development\Build\glfw-3.3.4\src\Release\"".
  Creating directory ""glfw.dir\Release\glfw.tlog\"".
InitializeBuildStatus:
  Creating ""glfw.dir\Release\glfw.tlog\unsuccessfulbuild"" because ""AlwaysCreate"" was specified.
CustomBuild:
  Building Custom Rule C:/Development/Libraries/glfw-3.3.4/src/CMakeLists.txt
ClCompile:
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\HostX64\x64\CL.exe /c /I""
  C:\Development\Libraries\glfw-3.3.4\include"" /I""C:\Development\Libraries\glfw-3.3.4\src"" /I""C:\Development\Build\glfw
  -3.3.4\src"" /nologo /W3 /WX- /diagnostics:column /O2 /Ob2 /D _WINDLL /D _UNICODE /D UNICODE /D WIN32 /D _WINDOWS /D N
  DEBUG /D _GLFW_USE_CONFIG_H /D _UNICODE /D _CRT_SECURE_NO_WARNINGS /D ""CMAKE_INTDIR=\""Release\"""" /D glfw_EXPORTS /Gm-
   /MD /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo""glfw.dir\Release\\"" /Fd""glfw.dir\Release\vc142.pdb"" /ext
  ernal:W3 /Gd /TC /errorReport:queue ""C:\Development\Libraries\glfw-3.3.4\src\context.c"" ""C:\Development\Libraries\glf
  w-3.3.4\src\init.c"" ""C:\Development\Libraries\glfw-3.3.4\src\input.c"" ""C:\Development\Libraries\glfw-3.3.4\src\monito
  r.c"" ""C:\Development\Libraries\glfw-3.3.4\src\vulkan.c"" ""C:\Development\Libraries\glfw-3.3.4\src\window.c"" ""C:\Develo
  pment\Libraries\glfw-3.3.4\src\win32_init.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_joystick.c"" ""C:\Developme
  nt\Libraries\glfw-3.3.4\src\win32_monitor.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_time.c"" ""C:\Development\L
  ibraries\glfw-3.3.4\src\win32_thread.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_window.c"" ""C:\Development\Libr
  aries\glfw-3.3.4\src\wgl_context.c"" ""C:\Development\Libraries\glfw-3.3.4\src\egl_context.c"" ""C:\Development\Libraries
  \glfw-3.3.4\src\osmesa_context.c""
  context.c
  init.c
  input.c
  monitor.c
  vulkan.c
  window.c
  win32_init.c
C:\Development\Libraries\glfw-3.3.4\src\win32_init.c(43,1): fatal error C1021: invalid preprocessor command 'warning' [
C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj]
  win32_joystick.c
  win32_monitor.c
  win32_time.c
  win32_thread.c
  win32_window.c
  wgl_context.c
  egl_context.c
  osmesa_context.c
  Generating Code...
Done Building Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj"" (default targets) -- FAILED.

Done Building Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (default targets) -- FAILED.

Done Building Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (Build target(s)) -- FAILED.


Build FAILED.

""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (Build target) (1) ->
""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (default target) (3) ->
""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj"" (default target) (4) ->
(ClCompile target) ->
  C:\Development\Libraries\glfw-3.3.4\src\win32_init.c(43,1): fatal error C1021: invalid preprocessor command 'warning'
 [C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj]

    0 Warning(s)
    1 Error(s)

Time Elapsed 00:00:02.54","Building GLFW 3.3.4 on Windows 10 (x64) MSVC results in a compiler error: Invalid preprocessor command 'warning'.
#warning macro is not supported in MSVC.
OS and version: Microsoft Windows 10 Pro (10.0.19043 Build 19043)
Compiler version: 19.29.30133 (x64)
Release or commit: 3.3.4
CMake properties:

Build log:
C:\Development\Build\glfw-3.3.4>msbuild GLFW.sln /t:Build /p:Configuration=Release
Microsoft (R) Build Engine version 16.11.0+0538acc04 for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

Building the projects in this solution one at a time. To enable parallel build, please add the ""-m"" switch.
Build started 24/08/2021 02:18:59.
Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" on node 1 (Build target(s)).
ValidateSolutionConfiguration:
  Building solution configuration ""Release|x64"".
ValidateProjects:
  The project ""ALL_BUILD"" is not selected for building in solution configuration ""Release|x64"".
Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (1) is building ""C:\Development\Build\glfw-3.3.4\ZERO_CHECK.vcxproj""
 (2) on node 1 (default targets).
PrepareForBuild:
  Creating directory ""x64\Release\ZERO_CHECK\"".
  Creating directory ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\"".
InitializeBuildStatus:
  Creating ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\unsuccessfulbuild"" because ""AlwaysCreate"" was specified.
CustomBuild:
  Checking Build System
FinalizeBuildStatus:
  Deleting file ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\unsuccessfulbuild"".
  Touching ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\ZERO_CHECK.lastbuildstate"".
Done Building Project ""C:\Development\Build\glfw-3.3.4\ZERO_CHECK.vcxproj"" (default targets).

Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (1) is building ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.me
taproj"" (3) on node 1 (default targets).
Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (3) is building ""C:\Development\Build\glfw-3.3.4\sr
c\glfw.vcxproj"" (4) on node 1 (default targets).
PrepareForBuild:
  Creating directory ""glfw.dir\Release\"".
  Creating directory ""C:\Development\Build\glfw-3.3.4\src\Release\"".
  Creating directory ""glfw.dir\Release\glfw.tlog\"".
InitializeBuildStatus:
  Creating ""glfw.dir\Release\glfw.tlog\unsuccessfulbuild"" because ""AlwaysCreate"" was specified.
CustomBuild:
  Building Custom Rule C:/Development/Libraries/glfw-3.3.4/src/CMakeLists.txt
ClCompile:
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\HostX64\x64\CL.exe /c /I""
  C:\Development\Libraries\glfw-3.3.4\include"" /I""C:\Development\Libraries\glfw-3.3.4\src"" /I""C:\Development\Build\glfw
  -3.3.4\src"" /nologo /W3 /WX- /diagnostics:column /O2 /Ob2 /D _WINDLL /D _UNICODE /D UNICODE /D WIN32 /D _WINDOWS /D N
  DEBUG /D _GLFW_USE_CONFIG_H /D _UNICODE /D _CRT_SECURE_NO_WARNINGS /D ""CMAKE_INTDIR=\""Release\"""" /D glfw_EXPORTS /Gm-
   /MD /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo""glfw.dir\Release\\"" /Fd""glfw.dir\Release\vc142.pdb"" /ext
  ernal:W3 /Gd /TC /errorReport:queue ""C:\Development\Libraries\glfw-3.3.4\src\context.c"" ""C:\Development\Libraries\glf
  w-3.3.4\src\init.c"" ""C:\Development\Libraries\glfw-3.3.4\src\input.c"" ""C:\Development\Libraries\glfw-3.3.4\src\monito
  r.c"" ""C:\Development\Libraries\glfw-3.3.4\src\vulkan.c"" ""C:\Development\Libraries\glfw-3.3.4\src\window.c"" ""C:\Develo
  pment\Libraries\glfw-3.3.4\src\win32_init.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_joystick.c"" ""C:\Developme
  nt\Libraries\glfw-3.3.4\src\win32_monitor.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_time.c"" ""C:\Development\L
  ibraries\glfw-3.3.4\src\win32_thread.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_window.c"" ""C:\Development\Libr
  aries\glfw-3.3.4\src\wgl_context.c"" ""C:\Development\Libraries\glfw-3.3.4\src\egl_context.c"" ""C:\Development\Libraries
  \glfw-3.3.4\src\osmesa_context.c""
  context.c
  init.c
  input.c
  monitor.c
  vulkan.c
  window.c
  win32_init.c
C:\Development\Libraries\glfw-3.3.4\src\win32_init.c(43,1): fatal error C1021: invalid preprocessor command 'warning' [
C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj]
  win32_joystick.c
  win32_monitor.c
  win32_time.c
  win32_thread.c
  win32_window.c
  wgl_context.c
  egl_context.c
  osmesa_context.c
  Generating Code...
Done Building Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj"" (default targets) -- FAILED.

Done Building Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (default targets) -- FAILED.

Done Building Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (Build target(s)) -- FAILED.


Build FAILED.

""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (Build target) (1) ->
""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (default target) (3) ->
""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj"" (default target) (4) ->
(ClCompile target) ->
  C:\Development\Libraries\glfw-3.3.4\src\win32_init.c(43,1): fatal error C1021: invalid preprocessor command 'warning'
 [C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj]

    0 Warning(s)
    1 Error(s)

Time Elapsed 00:00:02.54",True,{}
glfw/glfw,https://github.com/glfw/glfw,1953,2021-08-24T00:37:00Z,2021-08-24T21:29:21Z,2021-08-24T21:29:21Z,CLOSED,False,1,1,1,https://github.com/Richardds,Fix invalid preprocessor command 'warning',1,"['bug', 'Windows', 'verified']",https://github.com/glfw/glfw/pull/1953,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1953#issuecomment-904989896,"Building GLFW 3.3.4 on Windows 10 (x64) MSVC results in a compiler error: Invalid preprocessor command 'warning'.
#warning macro is not supported in MSVC.
OS and version: Microsoft Windows 10 Pro (10.0.19043 Build 19043)
Compiler version: 19.29.30133 (x64)
Release or commit: 3.3.4
CMake properties:

Build log:
C:\Development\Build\glfw-3.3.4>msbuild GLFW.sln /t:Build /p:Configuration=Release
Microsoft (R) Build Engine version 16.11.0+0538acc04 for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

Building the projects in this solution one at a time. To enable parallel build, please add the ""-m"" switch.
Build started 24/08/2021 02:18:59.
Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" on node 1 (Build target(s)).
ValidateSolutionConfiguration:
  Building solution configuration ""Release|x64"".
ValidateProjects:
  The project ""ALL_BUILD"" is not selected for building in solution configuration ""Release|x64"".
Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (1) is building ""C:\Development\Build\glfw-3.3.4\ZERO_CHECK.vcxproj""
 (2) on node 1 (default targets).
PrepareForBuild:
  Creating directory ""x64\Release\ZERO_CHECK\"".
  Creating directory ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\"".
InitializeBuildStatus:
  Creating ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\unsuccessfulbuild"" because ""AlwaysCreate"" was specified.
CustomBuild:
  Checking Build System
FinalizeBuildStatus:
  Deleting file ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\unsuccessfulbuild"".
  Touching ""x64\Release\ZERO_CHECK\ZERO_CHECK.tlog\ZERO_CHECK.lastbuildstate"".
Done Building Project ""C:\Development\Build\glfw-3.3.4\ZERO_CHECK.vcxproj"" (default targets).

Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (1) is building ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.me
taproj"" (3) on node 1 (default targets).
Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (3) is building ""C:\Development\Build\glfw-3.3.4\sr
c\glfw.vcxproj"" (4) on node 1 (default targets).
PrepareForBuild:
  Creating directory ""glfw.dir\Release\"".
  Creating directory ""C:\Development\Build\glfw-3.3.4\src\Release\"".
  Creating directory ""glfw.dir\Release\glfw.tlog\"".
InitializeBuildStatus:
  Creating ""glfw.dir\Release\glfw.tlog\unsuccessfulbuild"" because ""AlwaysCreate"" was specified.
CustomBuild:
  Building Custom Rule C:/Development/Libraries/glfw-3.3.4/src/CMakeLists.txt
ClCompile:
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\HostX64\x64\CL.exe /c /I""
  C:\Development\Libraries\glfw-3.3.4\include"" /I""C:\Development\Libraries\glfw-3.3.4\src"" /I""C:\Development\Build\glfw
  -3.3.4\src"" /nologo /W3 /WX- /diagnostics:column /O2 /Ob2 /D _WINDLL /D _UNICODE /D UNICODE /D WIN32 /D _WINDOWS /D N
  DEBUG /D _GLFW_USE_CONFIG_H /D _UNICODE /D _CRT_SECURE_NO_WARNINGS /D ""CMAKE_INTDIR=\""Release\"""" /D glfw_EXPORTS /Gm-
   /MD /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo""glfw.dir\Release\\"" /Fd""glfw.dir\Release\vc142.pdb"" /ext
  ernal:W3 /Gd /TC /errorReport:queue ""C:\Development\Libraries\glfw-3.3.4\src\context.c"" ""C:\Development\Libraries\glf
  w-3.3.4\src\init.c"" ""C:\Development\Libraries\glfw-3.3.4\src\input.c"" ""C:\Development\Libraries\glfw-3.3.4\src\monito
  r.c"" ""C:\Development\Libraries\glfw-3.3.4\src\vulkan.c"" ""C:\Development\Libraries\glfw-3.3.4\src\window.c"" ""C:\Develo
  pment\Libraries\glfw-3.3.4\src\win32_init.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_joystick.c"" ""C:\Developme
  nt\Libraries\glfw-3.3.4\src\win32_monitor.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_time.c"" ""C:\Development\L
  ibraries\glfw-3.3.4\src\win32_thread.c"" ""C:\Development\Libraries\glfw-3.3.4\src\win32_window.c"" ""C:\Development\Libr
  aries\glfw-3.3.4\src\wgl_context.c"" ""C:\Development\Libraries\glfw-3.3.4\src\egl_context.c"" ""C:\Development\Libraries
  \glfw-3.3.4\src\osmesa_context.c""
  context.c
  init.c
  input.c
  monitor.c
  vulkan.c
  window.c
  win32_init.c
C:\Development\Libraries\glfw-3.3.4\src\win32_init.c(43,1): fatal error C1021: invalid preprocessor command 'warning' [
C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj]
  win32_joystick.c
  win32_monitor.c
  win32_time.c
  win32_thread.c
  win32_window.c
  wgl_context.c
  egl_context.c
  osmesa_context.c
  Generating Code...
Done Building Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj"" (default targets) -- FAILED.

Done Building Project ""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (default targets) -- FAILED.

Done Building Project ""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (Build target(s)) -- FAILED.


Build FAILED.

""C:\Development\Build\glfw-3.3.4\GLFW.sln"" (Build target) (1) ->
""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj.metaproj"" (default target) (3) ->
""C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj"" (default target) (4) ->
(ClCompile target) ->
  C:\Development\Libraries\glfw-3.3.4\src\win32_init.c(43,1): fatal error C1021: invalid preprocessor command 'warning'
 [C:\Development\Build\glfw-3.3.4\src\glfw.vcxproj]

    0 Warning(s)
    1 Error(s)

Time Elapsed 00:00:02.54",Thank you for the fix!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1958,2021-08-30T19:59:15Z,2021-10-13T20:44:48Z,2021-10-13T23:48:15Z,CLOSED,False,3720,2607,68,https://github.com/elmindreda,Runtime selection of platform (or window system),17,"['enhancement', 'macOS', 'Windows', 'X11', 'Wayland', 'documentation', 'build']",https://github.com/glfw/glfw/pull/1958,https://github.com/elmindreda,1,https://github.com/glfw/glfw/pull/1958,"This is an initial but mostly functional implementation of compiling GLFW for multiple platforms. It should be far enough along to both test further and gather feedback on its design, implementation and documentation.
By default the platform is detected and selected automatically by glfwInit but it can also be selected explicitly via the GLFW_PLATFORM initialization hint.  Most platform functions (but not all) are now called from shared code via the function pointer struct _GLFWplatform provided by the selected platform.
The timer, thread and module loading platform functions are still called directly by name and the implementation chosen at link-time.  These functions are the same for any backend on a given OS, including the Null backend. The Null backend is now always included but needs to be explicitly selected via init hint.
The other backends are now enabled via CMake dependent options following the GLFW_BUILD_<platform> pattern instead of a mix of automagic and ad-hoc option names.
Note that there is still work to do, including at least:

 The detection logic for X11 and Wayland is still placeholder.
 There is no guide documentation.
 The new functions have not been reviewed for thread safety.
 The changelog entries are incomplete.
 By default non-macOS Unix builds will currently not include Wayland support.
 The joystick implementation selection on non-macOS Unices is kludgy.","This is an initial but mostly functional implementation of compiling GLFW for multiple platforms. It should be far enough along to both test further and gather feedback on its design, implementation and documentation.
By default the platform is detected and selected automatically by glfwInit but it can also be selected explicitly via the GLFW_PLATFORM initialization hint.  Most platform functions (but not all) are now called from shared code via the function pointer struct _GLFWplatform provided by the selected platform.
The timer, thread and module loading platform functions are still called directly by name and the implementation chosen at link-time.  These functions are the same for any backend on a given OS, including the Null backend. The Null backend is now always included but needs to be explicitly selected via init hint.
The other backends are now enabled via CMake dependent options following the GLFW_BUILD_<platform> pattern instead of a mix of automagic and ad-hoc option names.
Note that there is still work to do, including at least:

 The detection logic for X11 and Wayland is still placeholder.
 There is no guide documentation.
 The new functions have not been reviewed for thread safety.
 The changelog entries are incomplete.
 By default non-macOS Unix builds will currently not include Wayland support.
 The joystick implementation selection on non-macOS Unices is kludgy.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1962,2021-09-05T20:09:20Z,2021-09-10T16:53:46Z,2021-09-12T18:00:14Z,CLOSED,False,1,1,1,https://github.com/Spasi,Cocoa: Fix cursor movement delay after restoring a GLFW_CURSOR_DISABLED cursor,1,"['bug', 'macOS', 'verified', 'input']",https://github.com/glfw/glfw/pull/1962,https://github.com/Spasi,1,https://github.com/glfw/glfw/pull/1962,"This patch fixes LWJGL/lwjgl3#576, which has been a long-standing issue in Minecraft.
The commit message includes some technical information. References to other projects facing the same problem and resolving it with this fix:

Hammerspoon/hammerspoon#2005
https://www.winehq.org/pipermail/wine-patches/2015-October/143826.html
https://stackoverflow.com/questions/8215413/why-is-cgwarpmousecursorposition-causing-a-delay-if-it-is-not-what-is/17559012#17559012","This patch fixes LWJGL/lwjgl3#576, which has been a long-standing issue in Minecraft.
The commit message includes some technical information. References to other projects facing the same problem and resolving it with this fix:

Hammerspoon/hammerspoon#2005
https://www.winehq.org/pipermail/wine-patches/2015-October/143826.html
https://stackoverflow.com/questions/8215413/why-is-cgwarpmousecursorposition-causing-a-delay-if-it-is-not-what-is/17559012#17559012",True,{}
glfw/glfw,https://github.com/glfw/glfw,1962,2021-09-05T20:09:20Z,2021-09-10T16:53:46Z,2021-09-12T18:00:14Z,CLOSED,False,1,1,1,https://github.com/Spasi,Cocoa: Fix cursor movement delay after restoring a GLFW_CURSOR_DISABLED cursor,1,"['bug', 'macOS', 'verified', 'input']",https://github.com/glfw/glfw/pull/1962,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1962#issuecomment-917681960,"This patch fixes LWJGL/lwjgl3#576, which has been a long-standing issue in Minecraft.
The commit message includes some technical information. References to other projects facing the same problem and resolving it with this fix:

Hammerspoon/hammerspoon#2005
https://www.winehq.org/pipermail/wine-patches/2015-October/143826.html
https://stackoverflow.com/questions/8215413/why-is-cgwarpmousecursorposition-causing-a-delay-if-it-is-not-what-is/17559012#17559012",This has been merged as 157ebb8. Thank you for the fix!,True,{'HEART': ['https://github.com/Spasi']}
glfw/glfw,https://github.com/glfw/glfw,1965,2021-09-15T12:26:55Z,2021-10-27T16:40:38Z,2021-10-27T18:39:29Z,CLOSED,False,4,4,3,https://github.com/luzpaz,Fix various typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1965,https://github.com/luzpaz,1,https://github.com/glfw/glfw/pull/1965,"Found via codespell -q 3 -S ./deps -L fo,numer,te,uint,wille","Found via codespell -q 3 -S ./deps -L fo,numer,te,uint,wille",True,{}
glfw/glfw,https://github.com/glfw/glfw,1965,2021-09-15T12:26:55Z,2021-10-27T16:40:38Z,2021-10-27T18:39:29Z,CLOSED,False,4,4,3,https://github.com/luzpaz,Fix various typos,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1965,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1965#issuecomment-953116500,"Found via codespell -q 3 -S ./deps -L fo,numer,te,uint,wille",This was merged as 0fe96ec. Some are missing as they got fixed in the compilation guide overhaul. Thank you!,True,{'THUMBS_UP': ['https://github.com/luzpaz']}
glfw/glfw,https://github.com/glfw/glfw,1972,2021-10-06T03:36:53Z,,2021-10-29T13:06:52Z,OPEN,False,4,0,1,https://github.com/RecursiveG,Properly discard filtered events by XFilterEvent(),1,['X11'],https://github.com/glfw/glfw/pull/1972,https://github.com/RecursiveG,1,https://github.com/glfw/glfw/pull/1972,"According to https://www.x.org/releases/current/doc/man/man3/XFilterEvent.3.xhtml,
an event should be discarded if XFilterEvent returns True. Fix #1794.","According to https://www.x.org/releases/current/doc/man/man3/XFilterEvent.3.xhtml,
an event should be discarded if XFilterEvent returns True. Fix #1794.",True,"{'THUMBS_UP': ['https://github.com/BenWoodworth', 'https://github.com/ArnaudLier']}"
glfw/glfw,https://github.com/glfw/glfw,1973,2021-10-06T09:33:12Z,2021-10-06T09:33:27Z,2021-10-24T16:15:25Z,CLOSED,False,1,1,1,https://github.com/joe-rogan-0001,DISREGARD,1,['wontfix'],https://github.com/glfw/glfw/pull/1973,https://github.com/joe-rogan-0001,1,https://github.com/glfw/glfw/pull/1973,Disregard,Disregard,True,{}
glfw/glfw,https://github.com/glfw/glfw,1974,2021-10-09T19:42:32Z,,2021-10-25T21:47:22Z,OPEN,False,70,0,3,https://github.com/jwoodie,Add cursor position to mouse button callback,2,['enhancement'],https://github.com/glfw/glfw/pull/1974,https://github.com/jwoodie,1,https://github.com/glfw/glfw/pull/1974,"Use of the mouse button callback generally requires the mouse position. By adding the cursor position to mouse button callback, it reduces redundancy.
See #752","Use of the mouse button callback generally requires the mouse position. By adding the cursor position to mouse button callback, it reduces redundancy.
See #752",True,{}
glfw/glfw,https://github.com/glfw/glfw,1979,2021-10-23T13:24:10Z,2021-10-27T16:40:39Z,2021-10-27T16:50:34Z,MERGED,True,9,9,5,https://github.com/Spasi,Fix context API checks in native access functions,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1979,https://github.com/Spasi,1,https://github.com/glfw/glfw/pull/1979,Changed to check context.source instead of context.client.,Changed to check context.source instead of context.client.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1979,2021-10-23T13:24:10Z,2021-10-27T16:40:39Z,2021-10-27T16:50:34Z,MERGED,True,9,9,5,https://github.com/Spasi,Fix context API checks in native access functions,1,"['bug', 'verified']",https://github.com/glfw/glfw/pull/1979,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1979#issuecomment-953115484,Changed to check context.source instead of context.client.,Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1980,2021-10-25T23:16:36Z,2021-10-27T21:19:02Z,2021-12-05T03:41:42Z,CLOSED,False,9,2,2,https://github.com/joshcodd,Fix kIOMasterPortDefault deprecation - MacOS 12.0,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1980,https://github.com/joshcodd,1,https://github.com/glfw/glfw/pull/1980,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1980,2021-10-25T23:16:36Z,2021-10-27T21:19:02Z,2021-12-05T03:41:42Z,CLOSED,False,9,2,2,https://github.com/joshcodd,Fix kIOMasterPortDefault deprecation - MacOS 12.0,2,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1980,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1980#issuecomment-953320481,,This was merged as f75c251. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1982,2021-10-28T18:44:02Z,2021-11-25T22:44:47Z,2021-11-29T01:49:36Z,CLOSED,False,1,1,1,https://github.com/luzpaz,Fix source comment typo,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1982,https://github.com/luzpaz,1,https://github.com/glfw/glfw/pull/1982,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,1982,2021-10-28T18:44:02Z,2021-11-25T22:44:47Z,2021-11-29T01:49:36Z,CLOSED,False,1,1,1,https://github.com/luzpaz,Fix source comment typo,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1982,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1982#issuecomment-979697816,,Thank you for the fix!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/slimsag,1,https://github.com/glfw/glfw/pull/1986,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com",True,"{'HOORAY': ['https://github.com/s5bug', 'https://github.com/ducdetronquito', 'https://github.com/sin-ack', 'https://github.com/g-w1', 'https://github.com/Avokadoen', 'https://github.com/iKlsR', 'https://github.com/elmindreda', 'https://github.com/phase', 'https://github.com/InKryption']}"
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/Maato,2,https://github.com/glfw/glfw/pull/1986#issuecomment-955784179,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","The explanation of why this is undefined behavior is incorrect.
In an expression such as this: images[i].pixels[j * 4 + 0] << 16, the integer promotions are performed on each of the operands. So the left operand, which starts out as unsigned char, will get promoted to int. Shifting a value known to be at most 255 to the left by 16 bits will not cause undefined behavior in this case.
Instead the undefined behavior comes from the following expression: images[i].pixels[j * 4 + 3] << 24. Again the left operand will be promoted to int. If the value happens to be >= 0x80 shifting left by 24 will cause the sign bit of the int to be set (or really, the mathematical result of the shift operation will not be representable in the int).
The standard says the following (E1 is the left operand and E2 is the right operand of the << operator):

If E1 has a signed type and nonnegative value, and E1x2^E2 is representable in the result type, then that is the resulting value; otherwise, the behavior is undefined.",True,"{'LAUGH': ['https://github.com/Andoryuuta', 'https://github.com/slimsag'], 'HEART': ['https://github.com/slimsag', 'https://github.com/Andoryuuta', 'https://github.com/ploxiln', 'https://github.com/dcousens', 'https://github.com/McSinyx', 'https://github.com/bobvanderlinden'], 'THUMBS_UP': ['https://github.com/slimsag', 'https://github.com/Andoryuuta', 'https://github.com/Joefish', 'https://github.com/rakiru', 'https://github.com/alexadhy', 'https://github.com/bombcar', 'https://github.com/nickelpro', 'https://github.com/dcousens', 'https://github.com/McSinyx', 'https://github.com/abainbridge', 'https://github.com/bobvanderlinden']}"
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/slimsag,3,https://github.com/glfw/glfw/pull/1986#issuecomment-955784660,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Oh wow, I totally missed that @Maato - thank you for pointing that out. I should've caught that, too, because I knew << 24 was the shift directly before the crash but I guess I muddied the water and got confused :)",True,"{'THUMBS_UP': ['https://github.com/Maato', 'https://github.com/InKryption']}"
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/martinhath,4,https://github.com/glfw/glfw/pull/1986#issuecomment-955795280,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Wouldn't it be better to cast to unsigned int or something similar (like uint32_t), since long can still be 32 bits? If the size of long and int is the same, wouldn't the cast as proposed in the PR be semantically identical to the current state?",True,"{'THUMBS_UP': ['https://github.com/nyanpasu64', 'https://github.com/raphlinus', 'https://github.com/dcousens', 'https://github.com/johan-bolmsjo', 'https://github.com/drfuchs', 'https://github.com/InKryption'], 'HEART': ['https://github.com/dcousens']}"
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/dcousens,5,https://github.com/glfw/glfw/pull/1986#issuecomment-955996572,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","If the size of long and int is the same, wouldn't the cast as proposed in the PR be semantically identical to the current state?

// gcc -fsanitize=undefined
#include <stdint.h>
#include <stdio.h>

int main () {
	unsigned char foo = 0x80;
	int x =
		(((int) foo) << 16) |
		(((int) foo) <<  8) |
		(((int) foo) <<  0) |
		(((int) foo) << 24);

	printf(""x: %i \n"", x);
	return 0;
}
// test.c:10:16: runtime error: left shift of 128 by 24 places cannot be represented in type 'int'
//   x: -2139062144
Yes
I wonder if there is a set of warning flags that could have helped with this.
Unfortunately -Wconversion misses the mark.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/drfuchs,6,https://github.com/glfw/glfw/pull/1986#issuecomment-956365276,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Wouldn't it be better to cast to unsigned int or something similar (like uint32_t), since long can still be 32 bits? If the size of long and int is the same, wouldn't the cast as proposed in the PR be semantically identical to the current state?

In case there's a thought of fixing the incorrect ""cast to long"" fix by casting to ""long long"" instead (which would at least work properly everywhere), another reason that this suggestion by martinhath (to cast to unsigned int) is the correct solution is that it's potentially more efficient in various architectures and optimization levels, with zero extra machine code generated for widening into a 64-bit value, never mind 64-bit shifts being slower in some situations.  It also more clearly indicates what the real issue is (shifting a one into the sign bit, which an unsigned int doesn't have).",True,{}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/slimsag,7,https://github.com/glfw/glfw/pull/1986#issuecomment-956402085,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Pushed a commit to switch to unsigned int, I really appreciate the corrections to my understanding & feedback here everyone!",True,"{'THUMBS_UP': ['https://github.com/RickWong', 'https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/Validark,8,https://github.com/glfw/glfw/pull/1986#issuecomment-957879658,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","To repeat what @Maato said but in arithmetic terms:
(byte ≥ 2⁷) × 2²⁴ ⟹ (result ≥ 2³¹)
The maximum signed 32-bit integer is 2³¹- 1, hence you get an overflow.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/linkmauve,9,https://github.com/glfw/glfw/pull/1986#issuecomment-958000246,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Hi, the proper type for an unsigned 32-bit integer is uint32_t.
Not that it matters much here because GLFW is unlikely to ever be compiled for a 16-bit CPU, but the C standard only guarantees unsigned int to be at least 16-bit wide, which would still make two of these values not representable.
Also note that target is still a long*, which means the conversion from uint32_t to long still happens, and on 32-bit platforms (or platforms using LLP64) the sign bit will still be the most significant bit of the alpha value.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/elmindreda,10,https://github.com/glfw/glfw/pull/1986#issuecomment-961502733,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Thank you @slimsag and @Andoryuuta for making and documenting this bug fix, and thank you everyone for helping to refine it!
I agree that uint32_t is a more appropriate type to cast to before shifting, even if unsigned int is probably okay for anything we will run on.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/slimsag,11,https://github.com/glfw/glfw/pull/1986#issuecomment-961634910,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Appreciate the feedback, I've swapped the cast for uint32_t and also changed target and icon from long to uint32_t types which if I understand correctly should be more correct due to XChangeProperty accepting a 32-bit format regardless of platform.
Let me know what you think!",True,{}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/linkmauve,12,https://github.com/glfw/glfw/pull/1986#issuecomment-962424054,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Hi, I believe the change from long to uint32_t is incorrect, Xlib defines the data as a series of long, which would be 64-bit on ILP64 platforms like Linux.",True,"{'THUMBS_UP': ['https://github.com/elmindreda', 'https://github.com/rofrol']}"
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/martinhath,13,https://github.com/glfw/glfw/pull/1986#issuecomment-962444318,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","Hi, I believe the change from long to uint32_t is incorrect, Xlib defines the data as a series of long, which would be 64-bit on ILP64 platforms like Linux.

I'm not sure this is true, do you have a source for this? Here is, from what I can tell, the spec, and it says (under _NET_WM_ICON):

This is an array of 32bit packed CARDINAL ARGB with high byte being A, low byte being B. The first two cardinals are width, height. Data is in rows, left to right and top to bottom.

Further, this is reflected in the actual call to X that GLFW already does:
XChangeProperty(_glfw.x11.display, window->x11.handle,
                _glfw.x11.NET_WM_ICON,
                XA_CARDINAL, 32,
                PropModeReplace,
                (unsigned char*) icon,
                elements);
where we explicitly specify that we're passing in unsigned 32-bit numbers.
I'm no Xpert though, so I might be mistaken :)",True,{}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/slimsag,14,https://github.com/glfw/glfw/pull/1986#issuecomment-962445299,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","I thought similar to what @martinhath said above based on the XChangeProperty docs, as we pass 32 for the format which is defined as:

Specifies whether the data should be viewed as a list of 8-bit, 16-bit, or 32-bit quantities. Possible values are 8, 16, and 32. This information allows the X server to correctly perform byte-swap operations as necessary. If the format is 16-bit or 32-bit, you must explicitly cast your data pointer to an (unsigned char *) in the call to XChangeProperty().

And because the signature takes unsigned char* not long*.
However, looking into it more it seems like Xlib casts the pointer back to long*, and passes it to this Data32 function internally right here:
Data32 (dpy, (_Xconst long *) data, len);

And on IL64 platforms that ends up defined as a function which takes long* data and converts the 64-bit longs to 32-bit data:
https://sourcegraph.com/github.com/mirror/libX11@2356e59/-/blob/src/XlibInt.c?L1670-1697
So it would seem the Xlib docs are wrong, the function does take long* data despite the signature being unsigned char* data, and despite it claiming to take 32-bit data.
Will update soon.",True,"{'EYES': ['https://github.com/martinhath'], 'THUMBS_UP': ['https://github.com/elmindreda']}"
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/slimsag,15,https://github.com/glfw/glfw/pull/1986#issuecomment-969495481,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com","OK, I believe this is finally good to go, we now cast to unsigned long. The unsigned should avoid the UBSan complaint about overflowing into the sign bit, while long should match the internal expectations of Xlib which internally treats the pointer as a long (64-bit integer on IL64 platforms, even if the data is only 32-bit.)
I have tested with UBSan as well and this passes.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1986,2021-10-31T18:38:24Z,2021-12-01T20:57:07Z,2021-12-02T17:55:06Z,CLOSED,False,13,6,1,https://github.com/slimsag,do not rely on undefined behavior in glfwSetWindowIcon for X11,4,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1986,https://github.com/elmindreda,16,https://github.com/glfw/glfw/pull/1986#issuecomment-984861698,"While working on Zig bindings for GLFW me and @Andoryuuta noticed that glfwSetWindowIcon was crashing. I wrote about debugging this and the cause in an article but the summary is that when compiling with UBSan (which Zig does by default) clang will insert asm { ud1 } traps when it thinks there is undefined behavior. This code in particular is problematic:
                *target++ = (images[i].pixels[j * 4 + 0] << 16) |
                            (images[i].pixels[j * 4 + 1] <<  8) |
                            (images[i].pixels[j * 4 + 2] <<  0) |
                            (images[i].pixels[j * 4 + 3] << 24);
We see in IDA Pro that clang inserted a jump (pictured below) to an asm { ud1 } instruction:

What is happening here is that:

images[i].pixels[j * 4 + 0] is returning an unsigned char (8 bits)
It is then being shifted left by << 16 bits. !!! That's further than an 8-bit number can be shifted left by, hence undefined behavior. See #1986 (comment)

In an equal snippet of code in Godbolt, we can see that without UBSan clang merely uses the 32-bit EAX register as an optimization. It loads the 8-bit number into the 32-bit register, and then performs the left shift. Although the shift exceeds 8 bits, it does not get truncated to zero - instead it is effectively as if the number was converted to a long (32 bits) prior to the left-shift operation.
This explains why nobody has caught this UB in GLFW yet, too: it works by nature of compilers liking to use 32-bit registers in this context.
So, to fix this, ensure we cast to long first before shifting.
Helps hexops/mach#20
Signed-off-by: Stephen Gutekanst stephen@hexops.com",Thank you everyone for the fix!,True,"{'HOORAY': ['https://github.com/InKryption', 'https://github.com/slimsag', 'https://github.com/nektro']}"
glfw/glfw,https://github.com/glfw/glfw,1989,2021-11-11T10:10:51Z,2022-03-11T12:52:55Z,2022-03-11T12:53:10Z,CLOSED,False,1,1,1,https://github.com/silversquirl,Fix undefined behaviour in X11 keypress handling,1,"['bug', 'duplicate', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1989,https://github.com/silversquirl,1,https://github.com/glfw/glfw/pull/1989,"1 << 31 is undefined because 1 is an int, so the shift would set the sign bit
Related to (and discovered in the same way as) #1986","1 << 31 is undefined because 1 is an int, so the shift would set the sign bit
Related to (and discovered in the same way as) #1986",True,"{'THUMBS_UP': ['https://github.com/slimsag', 'https://github.com/alichraghi']}"
glfw/glfw,https://github.com/glfw/glfw,1989,2021-11-11T10:10:51Z,2022-03-11T12:52:55Z,2022-03-11T12:53:10Z,CLOSED,False,1,1,1,https://github.com/silversquirl,Fix undefined behaviour in X11 keypress handling,1,"['bug', 'duplicate', 'X11', 'verified']",https://github.com/glfw/glfw/pull/1989,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1989#issuecomment-1065086444,"1 << 31 is undefined because 1 is an int, so the shift would set the sign bit
Related to (and discovered in the same way as) #1986",Thank you for the PR! This should finally be fixed now with b54fb0a from #1951.,True,{}
glfw/glfw,https://github.com/glfw/glfw,1992,2021-11-15T22:52:59Z,2021-11-25T22:44:48Z,2021-11-26T04:56:57Z,CLOSED,False,1,1,1,https://github.com/slimsag,update docstring which inaccurately says GLFW_CONTEXT_REVISION is a window hint,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1992,https://github.com/slimsag,1,https://github.com/glfw/glfw/pull/1992,"This docstring previously indicated that GLFW_CONTEXT_REVISION was a window
hint and attribute, but in fact it is only a window attribute (there is no code
which uses this constant in any other context.)
We noticed this in https://github.com/hexops/mach/pull/71/files#r749741814
Signed-off-by: Stephen Gutekanst stephen@hexops.com","This docstring previously indicated that GLFW_CONTEXT_REVISION was a window
hint and attribute, but in fact it is only a window attribute (there is no code
which uses this constant in any other context.)
We noticed this in https://github.com/hexops/mach/pull/71/files#r749741814
Signed-off-by: Stephen Gutekanst stephen@hexops.com",True,{}
glfw/glfw,https://github.com/glfw/glfw,1992,2021-11-15T22:52:59Z,2021-11-25T22:44:48Z,2021-11-26T04:56:57Z,CLOSED,False,1,1,1,https://github.com/slimsag,update docstring which inaccurately says GLFW_CONTEXT_REVISION is a window hint,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1992,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1992#issuecomment-979697102,"This docstring previously indicated that GLFW_CONTEXT_REVISION was a window
hint and attribute, but in fact it is only a window attribute (there is no code
which uses this constant in any other context.)
We noticed this in https://github.com/hexops/mach/pull/71/files#r749741814
Signed-off-by: Stephen Gutekanst stephen@hexops.com",Thank you for the fix!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1994,2021-11-18T22:40:34Z,2021-11-22T20:46:07Z,2021-11-22T21:27:10Z,CLOSED,False,2,9,2,https://github.com/jeeb,cocoa: fixup move to non-deprecated default IOKit mach port,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1994,https://github.com/jeeb,1,https://github.com/glfw/glfw/pull/1994,"f75c251 was a valiant attempt, but unfortunately  kIOMasterPortDefault and kIOMainPortDefault are not enum values, but instead external mach_port_t symbols.
Thus just checking if the SDK is new enough to support this symbol's definition is not enough, and will cause compilation warnings with f.ex. SDK from Xcode 13.1 and the target being macOS <12.0. This is due to the new symbol being utilized unconditionally without @available runtime conditions (unguarded-availability-new warnings, which I wonder why they're not just errors by default). And during runtime it doesn't find the symbol and crashes :)
This PR contains the ""three stages of grief"" I went through when figuring out how to best fix this, and thus I am posting them so that one of them could be picked for upstream inclusion.


Just switch the #define check to target version instead of SDK version.
Pros: compiles without warnings for both targets.
Cons: if the old external symbol is removed, a build built against an older target doesn't work on a newer system any more.


Properly utilize @available for runtime checking and utilization of new or old symbol depending on its availability.
Pros: compiles without warnings for both targets, utilizes new symbol for new OS versions (although I think I am missing another elif for target > 12.0 where only the new symbol is utilized).
Cons: requires both ifdefs and a function.


Notice a comment in the definition of the symbol that:

When specifying a primary port to IOKit functions, the NULL argument indicates ""use the default"". This is a synonym for NULL, if you'd rather use a named constant.

... and thus just utilizing MACH_PORT_NULL should be good enough?
Pros: simplest if it works.
Cons: I am not sure if I got proper values out of my macOS 11.6 system with either kIOMasterPortDefault or MACH_PORT_NULL within libplacebo's plplay that I was testing things against.


I'm pretty sure versions 1 and 2 should work as expected (I will have to adjust the ifdeffery if that ends up being the preferred route), for version 3 I would like someone who does get values out of these APIs to verify that MACH_PORT_NULL works just like documentation hints that it does.","f75c251 was a valiant attempt, but unfortunately  kIOMasterPortDefault and kIOMainPortDefault are not enum values, but instead external mach_port_t symbols.
Thus just checking if the SDK is new enough to support this symbol's definition is not enough, and will cause compilation warnings with f.ex. SDK from Xcode 13.1 and the target being macOS <12.0. This is due to the new symbol being utilized unconditionally without @available runtime conditions (unguarded-availability-new warnings, which I wonder why they're not just errors by default). And during runtime it doesn't find the symbol and crashes :)
This PR contains the ""three stages of grief"" I went through when figuring out how to best fix this, and thus I am posting them so that one of them could be picked for upstream inclusion.


Just switch the #define check to target version instead of SDK version.
Pros: compiles without warnings for both targets.
Cons: if the old external symbol is removed, a build built against an older target doesn't work on a newer system any more.


Properly utilize @available for runtime checking and utilization of new or old symbol depending on its availability.
Pros: compiles without warnings for both targets, utilizes new symbol for new OS versions (although I think I am missing another elif for target > 12.0 where only the new symbol is utilized).
Cons: requires both ifdefs and a function.


Notice a comment in the definition of the symbol that:

When specifying a primary port to IOKit functions, the NULL argument indicates ""use the default"". This is a synonym for NULL, if you'd rather use a named constant.

... and thus just utilizing MACH_PORT_NULL should be good enough?
Pros: simplest if it works.
Cons: I am not sure if I got proper values out of my macOS 11.6 system with either kIOMasterPortDefault or MACH_PORT_NULL within libplacebo's plplay that I was testing things against.


I'm pretty sure versions 1 and 2 should work as expected (I will have to adjust the ifdeffery if that ends up being the preferred route), for version 3 I would like someone who does get values out of these APIs to verify that MACH_PORT_NULL works just like documentation hints that it does.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1994,2021-11-18T22:40:34Z,2021-11-22T20:46:07Z,2021-11-22T21:27:10Z,CLOSED,False,2,9,2,https://github.com/jeeb,cocoa: fixup move to non-deprecated default IOKit mach port,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1994,https://github.com/jeeb,2,https://github.com/glfw/glfw/pull/1994#issuecomment-975355618,"f75c251 was a valiant attempt, but unfortunately  kIOMasterPortDefault and kIOMainPortDefault are not enum values, but instead external mach_port_t symbols.
Thus just checking if the SDK is new enough to support this symbol's definition is not enough, and will cause compilation warnings with f.ex. SDK from Xcode 13.1 and the target being macOS <12.0. This is due to the new symbol being utilized unconditionally without @available runtime conditions (unguarded-availability-new warnings, which I wonder why they're not just errors by default). And during runtime it doesn't find the symbol and crashes :)
This PR contains the ""three stages of grief"" I went through when figuring out how to best fix this, and thus I am posting them so that one of them could be picked for upstream inclusion.


Just switch the #define check to target version instead of SDK version.
Pros: compiles without warnings for both targets.
Cons: if the old external symbol is removed, a build built against an older target doesn't work on a newer system any more.


Properly utilize @available for runtime checking and utilization of new or old symbol depending on its availability.
Pros: compiles without warnings for both targets, utilizes new symbol for new OS versions (although I think I am missing another elif for target > 12.0 where only the new symbol is utilized).
Cons: requires both ifdefs and a function.


Notice a comment in the definition of the symbol that:

When specifying a primary port to IOKit functions, the NULL argument indicates ""use the default"". This is a synonym for NULL, if you'd rather use a named constant.

... and thus just utilizing MACH_PORT_NULL should be good enough?
Pros: simplest if it works.
Cons: I am not sure if I got proper values out of my macOS 11.6 system with either kIOMasterPortDefault or MACH_PORT_NULL within libplacebo's plplay that I was testing things against.


I'm pretty sure versions 1 and 2 should work as expected (I will have to adjust the ifdeffery if that ends up being the preferred route), for version 3 I would like someone who does get values out of these APIs to verify that MACH_PORT_NULL works just like documentation hints that it does.","Alright, did a short verification and it seems like the note in the documentation holds true, and MACH_PORT_NULL can be utilized instead of this extern symbol.
Code:
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <IOKit/IOKitLib.h>

int main(int argc, char const *argv[])
{
	const mach_port_t null_port = MACH_PORT_NULL;

	fprintf(stderr, ""MACH_PORT_NULL: %u, kIOMasterPortDefault: %u\n"", null_port, kIOMasterPortDefault);
	return 0;
}
Compilation
cc -o iokit_test iokit_test.c  -framework IOKit

Result:
./iokit_test
MACH_PORT_NULL: 0, kIOMasterPortDefault: 0

I will simplify this PR then to only have the last commit :) .",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1994,2021-11-18T22:40:34Z,2021-11-22T20:46:07Z,2021-11-22T21:27:10Z,CLOSED,False,2,9,2,https://github.com/jeeb,cocoa: fixup move to non-deprecated default IOKit mach port,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1994,https://github.com/jeeb,3,https://github.com/glfw/glfw/pull/1994#issuecomment-975844636,"f75c251 was a valiant attempt, but unfortunately  kIOMasterPortDefault and kIOMainPortDefault are not enum values, but instead external mach_port_t symbols.
Thus just checking if the SDK is new enough to support this symbol's definition is not enough, and will cause compilation warnings with f.ex. SDK from Xcode 13.1 and the target being macOS <12.0. This is due to the new symbol being utilized unconditionally without @available runtime conditions (unguarded-availability-new warnings, which I wonder why they're not just errors by default). And during runtime it doesn't find the symbol and crashes :)
This PR contains the ""three stages of grief"" I went through when figuring out how to best fix this, and thus I am posting them so that one of them could be picked for upstream inclusion.


Just switch the #define check to target version instead of SDK version.
Pros: compiles without warnings for both targets.
Cons: if the old external symbol is removed, a build built against an older target doesn't work on a newer system any more.


Properly utilize @available for runtime checking and utilization of new or old symbol depending on its availability.
Pros: compiles without warnings for both targets, utilizes new symbol for new OS versions (although I think I am missing another elif for target > 12.0 where only the new symbol is utilized).
Cons: requires both ifdefs and a function.


Notice a comment in the definition of the symbol that:

When specifying a primary port to IOKit functions, the NULL argument indicates ""use the default"". This is a synonym for NULL, if you'd rather use a named constant.

... and thus just utilizing MACH_PORT_NULL should be good enough?
Pros: simplest if it works.
Cons: I am not sure if I got proper values out of my macOS 11.6 system with either kIOMasterPortDefault or MACH_PORT_NULL within libplacebo's plplay that I was testing things against.


I'm pretty sure versions 1 and 2 should work as expected (I will have to adjust the ifdeffery if that ends up being the preferred route), for version 3 I would like someone who does get values out of these APIs to verify that MACH_PORT_NULL works just like documentation hints that it does.","Alright, simplified and added a reference to #1985 .",True,{'HEART': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,1994,2021-11-18T22:40:34Z,2021-11-22T20:46:07Z,2021-11-22T21:27:10Z,CLOSED,False,2,9,2,https://github.com/jeeb,cocoa: fixup move to non-deprecated default IOKit mach port,1,"['bug', 'macOS', 'verified']",https://github.com/glfw/glfw/pull/1994,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/1994#issuecomment-975904572,"f75c251 was a valiant attempt, but unfortunately  kIOMasterPortDefault and kIOMainPortDefault are not enum values, but instead external mach_port_t symbols.
Thus just checking if the SDK is new enough to support this symbol's definition is not enough, and will cause compilation warnings with f.ex. SDK from Xcode 13.1 and the target being macOS <12.0. This is due to the new symbol being utilized unconditionally without @available runtime conditions (unguarded-availability-new warnings, which I wonder why they're not just errors by default). And during runtime it doesn't find the symbol and crashes :)
This PR contains the ""three stages of grief"" I went through when figuring out how to best fix this, and thus I am posting them so that one of them could be picked for upstream inclusion.


Just switch the #define check to target version instead of SDK version.
Pros: compiles without warnings for both targets.
Cons: if the old external symbol is removed, a build built against an older target doesn't work on a newer system any more.


Properly utilize @available for runtime checking and utilization of new or old symbol depending on its availability.
Pros: compiles without warnings for both targets, utilizes new symbol for new OS versions (although I think I am missing another elif for target > 12.0 where only the new symbol is utilized).
Cons: requires both ifdefs and a function.


Notice a comment in the definition of the symbol that:

When specifying a primary port to IOKit functions, the NULL argument indicates ""use the default"". This is a synonym for NULL, if you'd rather use a named constant.

... and thus just utilizing MACH_PORT_NULL should be good enough?
Pros: simplest if it works.
Cons: I am not sure if I got proper values out of my macOS 11.6 system with either kIOMasterPortDefault or MACH_PORT_NULL within libplacebo's plplay that I was testing things against.


I'm pretty sure versions 1 and 2 should work as expected (I will have to adjust the ifdeffery if that ends up being the preferred route), for version 3 I would like someone who does get values out of these APIs to verify that MACH_PORT_NULL works just like documentation hints that it does.",Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,1998,2021-11-22T23:36:18Z,2021-11-25T22:44:47Z,2021-11-26T14:53:50Z,CLOSED,False,1,1,1,https://github.com/InKryption,Add possible error comment,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1998,https://github.com/InKryption,1,https://github.com/glfw/glfw/pull/1998,"Add 'GLFW_FORMAT_UNAVAILABLE' as possible error in comment for 'glfwGetClipboardString', which can set it on wayland.","Add 'GLFW_FORMAT_UNAVAILABLE' as possible error in comment for 'glfwGetClipboardString', which can set it on wayland.",True,{}
glfw/glfw,https://github.com/glfw/glfw,1998,2021-11-22T23:36:18Z,2021-11-25T22:44:47Z,2021-11-26T14:53:50Z,CLOSED,False,1,1,1,https://github.com/InKryption,Add possible error comment,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/1998,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/1998#issuecomment-979697480,"Add 'GLFW_FORMAT_UNAVAILABLE' as possible error in comment for 'glfwGetClipboardString', which can set it on wayland.",Thank you for the fix!,True,{'THUMBS_UP': ['https://github.com/InKryption']}
glfw/glfw,https://github.com/glfw/glfw,2000,2021-11-27T15:04:08Z,,2021-11-27T15:10:04Z,OPEN,False,7,0,1,https://github.com/McSinyx,Explicitly link X11 libraries,1,[],https://github.com/glfw/glfw/pull/2000,https://github.com/McSinyx,1,https://github.com/glfw/glfw/pull/2000,This fixes broken library loading on NixOS/nixpkgs#142583.  It's OK if this should be patched downstream though.,This fixes broken library loading on NixOS/nixpkgs#142583.  It's OK if this should be patched downstream though.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2007,2021-12-05T16:52:47Z,2021-12-09T19:22:01Z,2021-12-09T20:17:06Z,CLOSED,False,2,0,1,https://github.com/InKryption,Add possible errors comment,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/2007,https://github.com/InKryption,1,https://github.com/glfw/glfw/pull/2007,The top-level source for glfwGetGamepadName shows it is possible for it to set GLFW_NOT_INITIALIZED and GLFW_INVALID_ENUM.,The top-level source for glfwGetGamepadName shows it is possible for it to set GLFW_NOT_INITIALIZED and GLFW_INVALID_ENUM.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2015,2021-12-23T17:59:34Z,2021-12-24T07:35:31Z,2021-12-24T12:38:29Z,CLOSED,False,14,23,2,https://github.com/Snowiiii,Update and rename LICENSE.md to LICENSE,1,"['enhancement', 'wontfix', 'documentation']",https://github.com/glfw/glfw/pull/2015,https://github.com/Snowiiii,1,https://github.com/glfw/glfw/pull/2015,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2015,2021-12-23T17:59:34Z,2021-12-24T07:35:31Z,2021-12-24T12:38:29Z,CLOSED,False,14,23,2,https://github.com/Snowiiii,Update and rename LICENSE.md to LICENSE,1,"['enhancement', 'wontfix', 'documentation']",https://github.com/glfw/glfw/pull/2015,https://github.com/thedmd,2,https://github.com/glfw/glfw/pull/2015#issuecomment-1000464572,,Why?,True,{}
glfw/glfw,https://github.com/glfw/glfw,2015,2021-12-23T17:59:34Z,2021-12-24T07:35:31Z,2021-12-24T12:38:29Z,CLOSED,False,14,23,2,https://github.com/Snowiiii,Update and rename LICENSE.md to LICENSE,1,"['enhancement', 'wontfix', 'documentation']",https://github.com/glfw/glfw/pull/2015,https://github.com/Snowiiii,3,https://github.com/glfw/glfw/pull/2015#issuecomment-1000465055,,Looks better,True,{}
glfw/glfw,https://github.com/glfw/glfw,2015,2021-12-23T17:59:34Z,2021-12-24T07:35:31Z,2021-12-24T12:38:29Z,CLOSED,False,14,23,2,https://github.com/Snowiiii,Update and rename LICENSE.md to LICENSE,1,"['enhancement', 'wontfix', 'documentation']",https://github.com/glfw/glfw/pull/2015,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/2015#issuecomment-1000582089,,"The .md extension is to help file managers suggest a good editor. The year does need to be updated, though! I will accept a PR that does that.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2017,2021-12-24T07:37:58Z,2021-12-24T16:24:12Z,2021-12-24T16:24:12Z,CLOSED,False,6,16,1,https://github.com/Snowiiii,Update LICENSE.md,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/2017,https://github.com/Snowiiii,1,https://github.com/glfw/glfw/pull/2017,,,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,2017,2021-12-24T07:37:58Z,2021-12-24T16:24:12Z,2021-12-24T16:24:12Z,CLOSED,False,6,16,1,https://github.com/Snowiiii,Update LICENSE.md,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/2017,https://github.com/Snowiiii,2,https://github.com/glfw/glfw/pull/2017#issuecomment-1000800710,,#2015 (comment),True,{}
glfw/glfw,https://github.com/glfw/glfw,2017,2021-12-24T07:37:58Z,2021-12-24T16:24:12Z,2021-12-24T16:24:12Z,CLOSED,False,6,16,1,https://github.com/Snowiiii,Update LICENSE.md,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/2017,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/2017#issuecomment-1000824477,,Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,2017,2021-12-24T07:37:58Z,2021-12-24T16:24:12Z,2021-12-24T16:24:12Z,CLOSED,False,6,16,1,https://github.com/Snowiiii,Update LICENSE.md,1,"['enhancement', 'documentation']",https://github.com/glfw/glfw/pull/2017,https://github.com/Snowiiii,4,https://github.com/glfw/glfw/pull/2017#issuecomment-1000827514,,np,True,{}
glfw/glfw,https://github.com/glfw/glfw,2018,2021-12-29T14:32:12Z,2022-03-03T22:57:23Z,2022-03-11T13:08:41Z,CLOSED,False,2,2,1,https://github.com/lb90,Windows: avoid modifying the global keyboard state with ToUnicode,1,"['bug', 'Windows', 'verified', 'input']",https://github.com/glfw/glfw/pull/2018,https://github.com/lb90,1,https://github.com/glfw/glfw/pull/2018,"Since Windows 10 version 1607 we can make use of a new flag that
makes ToUnicode operate on a process-private keyboard state.
Reference:
https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tounicode
Note: this is a coordinated effort across various open source projects

GTK
Chromium","Since Windows 10 version 1607 we can make use of a new flag that
makes ToUnicode operate on a process-private keyboard state.
Reference:
https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tounicode
Note: this is a coordinated effort across various open source projects

GTK
Chromium",True,{'HEART': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,2018,2021-12-29T14:32:12Z,2022-03-03T22:57:23Z,2022-03-11T13:08:41Z,CLOSED,False,2,2,1,https://github.com/lb90,Windows: avoid modifying the global keyboard state with ToUnicode,1,"['bug', 'Windows', 'verified', 'input']",https://github.com/glfw/glfw/pull/2018,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2018#issuecomment-1065098275,"Since Windows 10 version 1607 we can make use of a new flag that
makes ToUnicode operate on a process-private keyboard state.
Reference:
https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tounicode
Note: this is a coordinated effort across various open source projects

GTK
Chromium",This should be fixed now with ad01c1b. Thank you!,True,{}
glfw/glfw,https://github.com/glfw/glfw,2020,2021-12-29T22:11:27Z,2021-12-29T22:13:53Z,2022-01-20T17:30:43Z,CLOSED,False,36,18,1,https://github.com/Snowiiii,Added some switches,1,[],https://github.com/glfw/glfw/pull/2020,https://github.com/Snowiiii,1,https://github.com/glfw/glfw/pull/2020,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2021,2021-12-29T22:17:42Z,2021-12-29T22:19:31Z,2022-01-20T17:30:27Z,CLOSED,False,35,16,1,https://github.com/Snowiiii,Added some switches,2,[],https://github.com/glfw/glfw/pull/2021,https://github.com/Snowiiii,1,https://github.com/glfw/glfw/pull/2021,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2022,2021-12-29T22:32:20Z,2022-05-09T19:35:40Z,2022-05-09T19:35:40Z,CLOSED,False,91,53,3,https://github.com/Snowiiii,Added some switches,6,[],https://github.com/glfw/glfw/pull/2022,https://github.com/Snowiiii,1,https://github.com/glfw/glfw/pull/2022,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2024,2022-01-04T02:44:38Z,2022-03-03T22:57:24Z,2022-03-03T23:38:13Z,CLOSED,False,33,8,2,https://github.com/illustris,X11: Fix segfault when _glfw.x11.display is higher than 1024,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/2024,https://github.com/illustris,1,https://github.com/glfw/glfw/pull/2024,"FD_SETSIZE is hardcoded to 1024 in glibc. See the bugs section of the select call for more info.
In some cases, it is possible for _glfw.x11.display to be larger than FD_SETSIZE, causing a segfault or buffer overflow.
Replacing select() with poll() seems to be the recommended solution:

https://www.man7.org/linux/man-pages/man2/select.2.html#BUGS
https://access.redhat.com/solutions/488623
https://stackoverflow.com/questions/7976388/increasing-limit-of-fd-setsize-and-select/7977082#7977082","FD_SETSIZE is hardcoded to 1024 in glibc. See the bugs section of the select call for more info.
In some cases, it is possible for _glfw.x11.display to be larger than FD_SETSIZE, causing a segfault or buffer overflow.
Replacing select() with poll() seems to be the recommended solution:

https://www.man7.org/linux/man-pages/man2/select.2.html#BUGS
https://access.redhat.com/solutions/488623
https://stackoverflow.com/questions/7976388/increasing-limit-of-fd-setsize-and-select/7977082#7977082",True,"{'THUMBS_UP': ['https://github.com/kiranshila', 'https://github.com/DRM-Free', 'https://github.com/top-sekret']}"
glfw/glfw,https://github.com/glfw/glfw,2024,2022-01-04T02:44:38Z,2022-03-03T22:57:24Z,2022-03-03T23:38:13Z,CLOSED,False,33,8,2,https://github.com/illustris,X11: Fix segfault when _glfw.x11.display is higher than 1024,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/2024,https://github.com/illustris,2,https://github.com/glfw/glfw/pull/2024#issuecomment-1048445972,"FD_SETSIZE is hardcoded to 1024 in glibc. See the bugs section of the select call for more info.
In some cases, it is possible for _glfw.x11.display to be larger than FD_SETSIZE, causing a segfault or buffer overflow.
Replacing select() with poll() seems to be the recommended solution:

https://www.man7.org/linux/man-pages/man2/select.2.html#BUGS
https://access.redhat.com/solutions/488623
https://stackoverflow.com/questions/7976388/increasing-limit-of-fd-setsize-and-select/7977082#7977082",Whoops... didn't notice the above commit wasn't on glfw/glfw. Reopening to track that commit getting merged here.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2024,2022-01-04T02:44:38Z,2022-03-03T22:57:24Z,2022-03-03T23:38:13Z,CLOSED,False,33,8,2,https://github.com/illustris,X11: Fix segfault when _glfw.x11.display is higher than 1024,2,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/2024,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/2024#issuecomment-1058670354,"FD_SETSIZE is hardcoded to 1024 in glibc. See the bugs section of the select call for more info.
In some cases, it is possible for _glfw.x11.display to be larger than FD_SETSIZE, causing a segfault or buffer overflow.
Replacing select() with poll() seems to be the recommended solution:

https://www.man7.org/linux/man-pages/man2/select.2.html#BUGS
https://access.redhat.com/solutions/488623
https://stackoverflow.com/questions/7976388/increasing-limit-of-fd-setsize-and-select/7977082#7977082",Sorry for the confusion. Forgot that GH notifies of issue tags in forks. Thank you for the PR! This should be fixed now with d3e4fcf.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2032,2022-01-25T06:49:21Z,2022-04-28T20:20:37Z,2022-04-28T20:23:28Z,CLOSED,False,4,68,3,https://github.com/warisb,Fix compilation when GLFW_BUILD_WAYLAND is on,1,"['bug', 'verified', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/2032,https://github.com/warisb,1,https://github.com/glfw/glfw/pull/2032,"should fix #2016
Problems found:

These lines should produce a source file (.c) not a header. So there's no need to include these files in wl_init.c
After that, hitting undefined symbols around these lines. I don't quite know the purpose of these lines but removing these lines don't seem to cause any harm
wayland-client include paths are included but its libraries are not linked

I have tested the change by first building with GLFW_BUILD_WAYLAND=On then, adding this line to cursor.c
    glfwInitHint(GLFW_PLATFORM, GLFW_PLATFORM_WAYLAND);

then testing the cursor program with the mutter compositor on Ubuntu 18.04","should fix #2016
Problems found:

These lines should produce a source file (.c) not a header. So there's no need to include these files in wl_init.c
After that, hitting undefined symbols around these lines. I don't quite know the purpose of these lines but removing these lines don't seem to cause any harm
wayland-client include paths are included but its libraries are not linked

I have tested the change by first building with GLFW_BUILD_WAYLAND=On then, adding this line to cursor.c
    glfwInitHint(GLFW_PLATFORM, GLFW_PLATFORM_WAYLAND);

then testing the cursor program with the mutter compositor on Ubuntu 18.04",True,{}
glfw/glfw,https://github.com/glfw/glfw,2032,2022-01-25T06:49:21Z,2022-04-28T20:20:37Z,2022-04-28T20:23:28Z,CLOSED,False,4,68,3,https://github.com/warisb,Fix compilation when GLFW_BUILD_WAYLAND is on,1,"['bug', 'verified', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/2032,https://github.com/TheBrokenRail,2,https://github.com/glfw/glfw/pull/2032#issuecomment-1065996395,"should fix #2016
Problems found:

These lines should produce a source file (.c) not a header. So there's no need to include these files in wl_init.c
After that, hitting undefined symbols around these lines. I don't quite know the purpose of these lines but removing these lines don't seem to cause any harm
wayland-client include paths are included but its libraries are not linked

I have tested the change by first building with GLFW_BUILD_WAYLAND=On then, adding this line to cursor.c
    glfwInitHint(GLFW_PLATFORM, GLFW_PLATFORM_WAYLAND);

then testing the cursor program with the mutter compositor on Ubuntu 18.04",Any updates on this?,True,{}
glfw/glfw,https://github.com/glfw/glfw,2032,2022-01-25T06:49:21Z,2022-04-28T20:20:37Z,2022-04-28T20:23:28Z,CLOSED,False,4,68,3,https://github.com/warisb,Fix compilation when GLFW_BUILD_WAYLAND is on,1,"['bug', 'verified', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/2032,https://github.com/TheBrokenRail,3,https://github.com/glfw/glfw/pull/2032#issuecomment-1107703841,"should fix #2016
Problems found:

These lines should produce a source file (.c) not a header. So there's no need to include these files in wl_init.c
After that, hitting undefined symbols around these lines. I don't quite know the purpose of these lines but removing these lines don't seem to cause any harm
wayland-client include paths are included but its libraries are not linked

I have tested the change by first building with GLFW_BUILD_WAYLAND=On then, adding this line to cursor.c
    glfwInitHint(GLFW_PLATFORM, GLFW_PLATFORM_WAYLAND);

then testing the cursor program with the mutter compositor on Ubuntu 18.04",@elmindreda How long until 65617b9 can be merged into master? In my testing it works great! Thanks!,True,{}
glfw/glfw,https://github.com/glfw/glfw,2032,2022-01-25T06:49:21Z,2022-04-28T20:20:37Z,2022-04-28T20:23:28Z,CLOSED,False,4,68,3,https://github.com/warisb,Fix compilation when GLFW_BUILD_WAYLAND is on,1,"['bug', 'verified', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/2032,https://github.com/elmindreda,4,https://github.com/glfw/glfw/pull/2032#issuecomment-1112619517,"should fix #2016
Problems found:

These lines should produce a source file (.c) not a header. So there's no need to include these files in wl_init.c
After that, hitting undefined symbols around these lines. I don't quite know the purpose of these lines but removing these lines don't seem to cause any harm
wayland-client include paths are included but its libraries are not linked

I have tested the change by first building with GLFW_BUILD_WAYLAND=On then, adding this line to cursor.c
    glfwInitHint(GLFW_PLATFORM, GLFW_PLATFORM_WAYLAND);

then testing the cursor program with the mutter compositor on Ubuntu 18.04",@TheBrokenRail Thank you for the reminder!,True,{}
glfw/glfw,https://github.com/glfw/glfw,2033,2022-01-25T21:51:24Z,2022-03-03T22:57:25Z,2022-03-10T21:37:12Z,CLOSED,False,91,6,4,https://github.com/joaodasilva,Fix #1281: glfwPostEmptyEvent sometimes doesn't wake up glfwWaitEvents on X11,1,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/2033,https://github.com/joaodasilva,1,https://github.com/glfw/glfw/pull/2033,"This is a rare race that triggers often when running GLFW programs on GitHub Actions with Xvfb.
The underlying issue is internal to Xlib: XSendEvent races with an external select() call and may get dispatched before select() has blocked on the display fd.
The fix observes a pipe in the select() call, and writes to that pipe from glfwPostEmptyEvent to make select() return.
The original issue reproduces locally once per minute when running the windowjs/windowjs tests in a loop;
The bug hasn't triggered after running for several hours with the fix.","This is a rare race that triggers often when running GLFW programs on GitHub Actions with Xvfb.
The underlying issue is internal to Xlib: XSendEvent races with an external select() call and may get dispatched before select() has blocked on the display fd.
The fix observes a pipe in the select() call, and writes to that pipe from glfwPostEmptyEvent to make select() return.
The original issue reproduces locally once per minute when running the windowjs/windowjs tests in a loop;
The bug hasn't triggered after running for several hours with the fix.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2033,2022-01-25T21:51:24Z,2022-03-03T22:57:25Z,2022-03-10T21:37:12Z,CLOSED,False,91,6,4,https://github.com/joaodasilva,Fix #1281: glfwPostEmptyEvent sometimes doesn't wake up glfwWaitEvents on X11,1,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/2033,https://github.com/joaodasilva,2,https://github.com/glfw/glfw/pull/2033#issuecomment-1021645477,"This is a rare race that triggers often when running GLFW programs on GitHub Actions with Xvfb.
The underlying issue is internal to Xlib: XSendEvent races with an external select() call and may get dispatched before select() has blocked on the display fd.
The fix observes a pipe in the select() call, and writes to that pipe from glfwPostEmptyEvent to make select() return.
The original issue reproduces locally once per minute when running the windowjs/windowjs tests in a loop;
The bug hasn't triggered after running for several hours with the fix.","Hi GLFW maintainers. This is my first PR on GitHub; please advise if this isn't the right way to contribute fixes.
I'm using GLFW for windowjs.org and spent quite some time chasing this down, mainly due to flakes in the GitHub Actions test runners due to the issue.
The discussion in #1281 already mentioned using a self-pipe to fix the issue but activity seems stale; I've just updated and polished the patch, and addressed just the issue at hand (i.e. this doesn't replace select() with poll() to reduce risk).
This is applied manually to windowjs/windowjs now, would be great to have it fixed upstream :-)",True,{}
glfw/glfw,https://github.com/glfw/glfw,2033,2022-01-25T21:51:24Z,2022-03-03T22:57:25Z,2022-03-10T21:37:12Z,CLOSED,False,91,6,4,https://github.com/joaodasilva,Fix #1281: glfwPostEmptyEvent sometimes doesn't wake up glfwWaitEvents on X11,1,"['bug', 'X11', 'verified', 'input']",https://github.com/glfw/glfw/pull/2033,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/2033#issuecomment-1064527327,"This is a rare race that triggers often when running GLFW programs on GitHub Actions with Xvfb.
The underlying issue is internal to Xlib: XSendEvent races with an external select() call and may get dispatched before select() has blocked on the display fd.
The fix observes a pipe in the select() call, and writes to that pipe from glfwPostEmptyEvent to make select() return.
The original issue reproduces locally once per minute when running the windowjs/windowjs tests in a loop;
The bug hasn't triggered after running for several hours with the fix.","Thank you for the PR! This should be fixed now with cd22e28, which was partly based on it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2035,2022-01-30T00:14:27Z,,2022-01-31T20:36:34Z,OPEN,False,4,3,2,https://github.com/cbix,Platform: Prefer Wayland over X11,1,"['enhancement', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/2035,https://github.com/cbix,1,https://github.com/glfw/glfw/pull/2035,"When GLFW_ANY_PLATFORM is used (which is the default) native
Wayland would previously never be chosen if XWayland is also available.
Another idea (TBD) would be to control this behavior by an environment variable (see Qt or Firefox) and otherwise default to X11.","When GLFW_ANY_PLATFORM is used (which is the default) native
Wayland would previously never be chosen if XWayland is also available.
Another idea (TBD) would be to control this behavior by an environment variable (see Qt or Firefox) and otherwise default to X11.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2035,2022-01-30T00:14:27Z,,2022-01-31T20:36:34Z,OPEN,False,4,3,2,https://github.com/cbix,Platform: Prefer Wayland over X11,1,"['enhancement', 'X11', 'Wayland']",https://github.com/glfw/glfw/pull/2035,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2035#issuecomment-1026184041,"When GLFW_ANY_PLATFORM is used (which is the default) native
Wayland would previously never be chosen if XWayland is also available.
Another idea (TBD) would be to control this behavior by an environment variable (see Qt or Firefox) and otherwise default to X11.","When GLFW_ANY_PLATFORM is used (which is the default) native Wayland would previously never be chosen if XWayland is also available.

This is on purpose, as the X11 backend is still much more complete than the Wayland one. Working on bringing the Wayland one up to speed now. The change in this PR will be made once the Wayland backend is sufficiently complete. (This is why Wayland is listed before X11 everywhere in the runtime platform selection other than in this array).
Thank you for the PR! Hope to be able to merge it soon.

Another idea (TBD) would be to control this behavior by an environment variable (see Qt or Firefox) and otherwise default to X11.

Yeah, a GLFW_PLATFORM environment variable may be a good addition. Note that you can select Wayland already by un-setting the DISPLAY environment variable.
env -u DISPLAY ./my/app",True,{'THUMBS_UP': ['https://github.com/cbix']}
glfw/glfw,https://github.com/glfw/glfw,2040,2022-02-04T18:18:22Z,2022-04-03T18:31:33Z,2022-04-03T18:37:36Z,CLOSED,False,153,5,2,https://github.com/Pilzschaf,Wayland Drag and Drop,2,"['bug', 'enhancement', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/2040,https://github.com/Pilzschaf,1,https://github.com/glfw/glfw/pull/2040,"Implements Drag and Drop for the Wayland backend.
This actually also fixes a bug in the previous implementation for the clipboard.
As the clipboard and drag and drop both use the wl_data_device, the dataDeviceHandleDataOffer callback is called for new clipboard and new drag and drop requests. So previously while an item has been hovered over the window the glfwGetClipboardString function would return the current drag and drop payload. The new version uses dataDeviceHandleSelection and dataDeviceHandleEnter to distinguish between clipboard and drag-and-drop data respectively.
Similar to the other backends, only the text/uri-list mimetype is handled. The uri-list is parsed with the parseUriList function which has been copied from the X11 backend. This function could be moved to a general utility file to remove this duplication.","Implements Drag and Drop for the Wayland backend.
This actually also fixes a bug in the previous implementation for the clipboard.
As the clipboard and drag and drop both use the wl_data_device, the dataDeviceHandleDataOffer callback is called for new clipboard and new drag and drop requests. So previously while an item has been hovered over the window the glfwGetClipboardString function would return the current drag and drop payload. The new version uses dataDeviceHandleSelection and dataDeviceHandleEnter to distinguish between clipboard and drag-and-drop data respectively.
Similar to the other backends, only the text/uri-list mimetype is handled. The uri-list is parsed with the parseUriList function which has been copied from the X11 backend. This function could be moved to a general utility file to remove this duplication.",True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,2040,2022-02-04T18:18:22Z,2022-04-03T18:31:33Z,2022-04-03T18:37:36Z,CLOSED,False,153,5,2,https://github.com/Pilzschaf,Wayland Drag and Drop,2,"['bug', 'enhancement', 'verified', 'Wayland', 'input']",https://github.com/glfw/glfw/pull/2040,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2040#issuecomment-1086924675,"Implements Drag and Drop for the Wayland backend.
This actually also fixes a bug in the previous implementation for the clipboard.
As the clipboard and drag and drop both use the wl_data_device, the dataDeviceHandleDataOffer callback is called for new clipboard and new drag and drop requests. So previously while an item has been hovered over the window the glfwGetClipboardString function would return the current drag and drop payload. The new version uses dataDeviceHandleSelection and dataDeviceHandleEnter to distinguish between clipboard and drag-and-drop data respectively.
Similar to the other backends, only the text/uri-list mimetype is handled. The uri-list is parsed with the parseUriList function which has been copied from the X11 backend. This function could be moved to a general utility file to remove this duplication.",Thank you! There was a lot to address in the clipboard and drop paths so the final commit ended up a bit different but this PR was very helpful!,True,{}
glfw/glfw,https://github.com/glfw/glfw,2043,2022-02-06T12:35:19Z,,2022-02-09T22:32:05Z,OPEN,False,1,1,1,https://github.com/heliflieger,#2042 Joystick without buttons are not working,1,"['bug', 'Linux', 'input']",https://github.com/glfw/glfw/pull/2043,https://github.com/heliflieger,1,https://github.com/glfw/glfw/pull/2043,"Joysticks in linux without buttons are not working.
Remove the mandatory button attribute from detection.","Joysticks in linux without buttons are not working.
Remove the mandatory button attribute from detection.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2045,2022-02-13T14:40:18Z,,2022-04-04T19:04:53Z,OPEN,False,40,0,4,https://github.com/knokko,Add glfwGetEGLConfig,2,"['enhancement', 'EGL']",https://github.com/glfw/glfw/pull/2045,https://github.com/knokko,1,https://github.com/glfw/glfw/pull/2045,"This merge request adds the function glfwGetEGLConfig. This function is useful for creating an OpenGL rendering session in OpenXR.
The LWJGL project maintains its own GLFW fork that already has this commit. This works fine, but it could be useful for other people in the future if this merge request is accepted and this function is added to 'core GLFW'.","This merge request adds the function glfwGetEGLConfig. This function is useful for creating an OpenGL rendering session in OpenXR.
The LWJGL project maintains its own GLFW fork that already has this commit. This works fine, but it could be useful for other people in the future if this merge request is accepted and this function is added to 'core GLFW'.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2048,2022-02-19T09:47:14Z,2022-03-02T08:14:23Z,2022-03-10T18:49:24Z,CLOSED,False,0,109642,159,https://github.com/MaroueneBoughoufa,Added premake5 file,4,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/2048,https://github.com/MaroueneBoughoufa,1,https://github.com/glfw/glfw/pull/2048,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2053,2022-03-04T17:05:29Z,,2022-04-29T15:45:45Z,OPEN,False,6,2,1,https://github.com/ffontaine,src/CMakeLists.txt: allow override of wayland pkgdatadir,1,"['enhancement', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/2053,https://github.com/ffontaine,1,https://github.com/glfw/glfw/pull/2053,"Allow the user to override WAYLAND_{PROTOCOLS_BASE,CLIENT_PKGDATADIR} (needed when cross-compiling)
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Allow the user to override WAYLAND_{PROTOCOLS_BASE,CLIENT_PKGDATADIR} (needed when cross-compiling)
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
glfw/glfw,https://github.com/glfw/glfw,2053,2022-03-04T17:05:29Z,,2022-04-29T15:45:45Z,OPEN,False,6,2,1,https://github.com/ffontaine,src/CMakeLists.txt: allow override of wayland pkgdatadir,1,"['enhancement', 'Wayland', 'build']",https://github.com/glfw/glfw/pull/2053,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2053#issuecomment-1113465235,"Allow the user to override WAYLAND_{PROTOCOLS_BASE,CLIENT_PKGDATADIR} (needed when cross-compiling)
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Hmm, yes, this could be useful. Thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,2054,2022-03-05T08:31:40Z,2022-03-05T08:32:07Z,2022-03-07T17:41:35Z,CLOSED,False,65,0,1,https://github.com/ZMen9,Temp,5,"['enhancement', 'wontfix', 'build']",https://github.com/glfw/glfw/pull/2054,https://github.com/ZMen9,1,https://github.com/glfw/glfw/pull/2054,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2058,2022-03-17T14:36:02Z,2022-05-04T10:50:12Z,2022-05-04T10:50:12Z,CLOSED,False,45,0,1,https://github.com/LesterDigital,rgrgrgrg,1,"['wontfix', 'waiting for reply', 'build']",https://github.com/glfw/glfw/pull/2058,https://github.com/LesterDigital,1,https://github.com/glfw/glfw/pull/2058,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2058,2022-03-17T14:36:02Z,2022-05-04T10:50:12Z,2022-05-04T10:50:12Z,CLOSED,False,45,0,1,https://github.com/LesterDigital,rgrgrgrg,1,"['wontfix', 'waiting for reply', 'build']",https://github.com/glfw/glfw/pull/2058,https://github.com/gracicot,2,https://github.com/glfw/glfw/pull/2058#issuecomment-1070977331,,I wonder why there is so many of those weird pull requests always adding premake files?,True,{'THUMBS_UP': ['https://github.com/elmindreda']}
glfw/glfw,https://github.com/glfw/glfw,2058,2022-03-17T14:36:02Z,2022-05-04T10:50:12Z,2022-05-04T10:50:12Z,CLOSED,False,45,0,1,https://github.com/LesterDigital,rgrgrgrg,1,"['wontfix', 'waiting for reply', 'build']",https://github.com/glfw/glfw/pull/2058,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/2058#issuecomment-1071115218,,"@LesterDigital Thank you for this PR. I won't merge additional build setups unless they also come with an active maintainer, but I am working on making it easier to build GLFW without the official CMake files.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2061,2022-03-22T23:28:10Z,,2022-05-09T06:59:07Z,OPEN,False,387,2,8,https://github.com/vmedea,wayland: Add window hint to render as shell layer (e.g. desktop background),1,[],https://github.com/glfw/glfw/pull/2061,https://github.com/vmedea,1,https://github.com/glfw/glfw/pull/2061,"This adds a wayland specific hint GLFW_WAYLAND_SHELL_LAYER to make it possible to render to one of wayland's full screen layers using the wlr-layer-shell-unstable-v1 wayland interface. This can be used to, for example, render to the desktop background, or as an overlay.
It can take any of the values from zwlr_layer_shell_v1::layer, or -1 (default) to create an application window.
I've included the protocol xml file (similar to what swaybg does) because it doesn't seem to be generally available in package managers, like debian's wayland-protocols package.
Edit: I'm not entirely sure I like this interface much from a user point of view, it is the most specific and flexible for wayland, but something like a ""render to desktop wallpaper"" hint could be cross-platform.","This adds a wayland specific hint GLFW_WAYLAND_SHELL_LAYER to make it possible to render to one of wayland's full screen layers using the wlr-layer-shell-unstable-v1 wayland interface. This can be used to, for example, render to the desktop background, or as an overlay.
It can take any of the values from zwlr_layer_shell_v1::layer, or -1 (default) to create an application window.
I've included the protocol xml file (similar to what swaybg does) because it doesn't seem to be generally available in package managers, like debian's wayland-protocols package.
Edit: I'm not entirely sure I like this interface much from a user point of view, it is the most specific and flexible for wayland, but something like a ""render to desktop wallpaper"" hint could be cross-platform.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2061,2022-03-22T23:28:10Z,,2022-05-09T06:59:07Z,OPEN,False,387,2,8,https://github.com/vmedea,wayland: Add window hint to render as shell layer (e.g. desktop background),1,[],https://github.com/glfw/glfw/pull/2061,https://github.com/vmedea,2,https://github.com/glfw/glfw/pull/2061#issuecomment-1120713386,"This adds a wayland specific hint GLFW_WAYLAND_SHELL_LAYER to make it possible to render to one of wayland's full screen layers using the wlr-layer-shell-unstable-v1 wayland interface. This can be used to, for example, render to the desktop background, or as an overlay.
It can take any of the values from zwlr_layer_shell_v1::layer, or -1 (default) to create an application window.
I've included the protocol xml file (similar to what swaybg does) because it doesn't seem to be generally available in package managers, like debian's wayland-protocols package.
Edit: I'm not entirely sure I like this interface much from a user point of view, it is the most specific and flexible for wayland, but something like a ""render to desktop wallpaper"" hint could be cross-platform.","It appears the layer-shell protocol extension is supported in Sway, as well as every Wayland compositor based on wlroots. But It doesn't exist on GNOME, there are no plans to implement it , nor is there (as far as i could find) any equivalent there.
For X11 there's the _NET_WM_WINDOW_TYPE property that can be set to _NET_WM_WINDOW_TYPE_DESKTOP.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2064,2022-03-30T08:27:59Z,2022-03-30T08:28:37Z,2022-03-30T16:10:42Z,CLOSED,False,1,0,1,https://github.com/dotxnc,"Change to nightly. Need to remove the dependency,",1,['accidental'],https://github.com/glfw/glfw/pull/2064,https://github.com/dotxnc,1,https://github.com/glfw/glfw/pull/2064,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2064,2022-03-30T08:27:59Z,2022-03-30T08:28:37Z,2022-03-30T16:10:42Z,CLOSED,False,1,0,1,https://github.com/dotxnc,"Change to nightly. Need to remove the dependency,",1,['accidental'],https://github.com/glfw/glfw/pull/2064,https://github.com/dotxnc,2,https://github.com/glfw/glfw/pull/2064#issuecomment-1082780019,,this wasn't supposed to go here woops,True,{}
glfw/glfw,https://github.com/glfw/glfw,2065,2022-03-30T20:43:46Z,,2022-04-02T07:23:49Z,OPEN,False,22,0,2,https://github.com/Frostie314159,Added glfwIsInitialized function,1,[],https://github.com/glfw/glfw/pull/2065,https://github.com/Frostie314159,1,https://github.com/glfw/glfw/pull/2065,"This adds a glfwIsInitialized function, that just accesses the internal initialized paramter of the GLFWlibrary object.
This makes it more direct and convenient to check if glfw is already initialized.
As requested in glfw#2036","This adds a glfwIsInitialized function, that just accesses the internal initialized paramter of the GLFWlibrary object.
This makes it more direct and convenient to check if glfw is already initialized.
As requested in glfw#2036",True,{}
glfw/glfw,https://github.com/glfw/glfw,2065,2022-03-30T20:43:46Z,,2022-04-02T07:23:49Z,OPEN,False,22,0,2,https://github.com/Frostie314159,Added glfwIsInitialized function,1,[],https://github.com/glfw/glfw/pull/2065,https://github.com/wintertime,2,https://github.com/glfw/glfw/pull/2065#issuecomment-1086574358,"This adds a glfwIsInitialized function, that just accesses the internal initialized paramter of the GLFWlibrary object.
This makes it more direct and convenient to check if glfw is already initialized.
As requested in glfw#2036","There is more than one way to help users with the underlying problem:

I'd guess, having this function would be the simplest addition to code around mutliple libraries in one application not knowing if they still need to initialize GLFW. It would just be a higher burden on users to always check.
If glfwInit would just error out with something like GLFW_ERROR_ALREADY_INITIALIZED (instead of silently ignoring the call) that would solve the problem without having to add a new function. Users would then just check this and avoid calling glfwTerminate if some other part already initialized GLFW. I'm just not sure if that meets compatibility requirements. User code would be about as complicated as 1.
The most convenient way for users without making the implementation much more complicated than now would be to make initialized a counter. On glfwInit check the counter then only call the initialization code if it was 0, but always increase it by 1. On glfwTerminate error (or maybe ignore) if the counter is 0, decrease it by 1 and call termination code when it reaches 0 after it was decresed. That would be compatible with current user code and enable very easy use (just call glfwInit and glfwTerminate irregardless of other users).",True,{}
glfw/glfw,https://github.com/glfw/glfw,2066,2022-03-31T08:40:06Z,2022-04-03T18:28:46Z,2022-04-03T18:29:11Z,CLOSED,False,105,12,3,https://github.com/Frostie314159,Added a glfwGetVulkanResultString,1,"['enhancement', 'wontfix', 'Vulkan']",https://github.com/glfw/glfw/pull/2066,https://github.com/Frostie314159,1,https://github.com/glfw/glfw/pull/2066,"This adds a public glfwGetVulkanResultString function, improves the already existing internal _glfwGetVulkanResultString function by adding all official error code descriptions and updating the internal VkResult enum to the Vulkan 1.3 definition
The internal function is just exposed by this patch, but preserved to not break the internal API.","This adds a public glfwGetVulkanResultString function, improves the already existing internal _glfwGetVulkanResultString function by adding all official error code descriptions and updating the internal VkResult enum to the Vulkan 1.3 definition
The internal function is just exposed by this patch, but preserved to not break the internal API.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2066,2022-03-31T08:40:06Z,2022-04-03T18:28:46Z,2022-04-03T18:29:11Z,CLOSED,False,105,12,3,https://github.com/Frostie314159,Added a glfwGetVulkanResultString,1,"['enhancement', 'wontfix', 'Vulkan']",https://github.com/glfw/glfw/pull/2066,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2066#issuecomment-1086923366,"This adds a public glfwGetVulkanResultString function, improves the already existing internal _glfwGetVulkanResultString function by adding all official error code descriptions and updating the internal VkResult enum to the Vulkan 1.3 definition
The internal function is just exposed by this patch, but preserved to not break the internal API.","Thank you for this PR but I will not merge this. As I see it utility function like this should not be in a library a slow-moving as GLFW currently is and would be better as a stand-alone library, possibly in header-only form. That way it could be useful to people that create their windows in other ways as well. GLFW takes care of (most? some?) platform-specific aspects of using Vulkan but platform-independent things like this do not need to be tied to it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2068,2022-04-01T10:59:07Z,,2022-04-05T19:44:17Z,OPEN,False,98,1,7,https://github.com/gregorburger,Add support for context priority,1,"['enhancement', 'waiting for reply', 'EGL']",https://github.com/glfw/glfw/pull/2068,https://github.com/gregorburger,1,https://github.com/glfw/glfw/pull/2068,"Allows to specify context priority low, medium, high or realtime if
the extension is available. This is currently only implemented for
the EGL context creation API.
Currently only implemented for EGL, but equivalent extensions
exist for GLX and Vulkan.","Allows to specify context priority low, medium, high or realtime if
the extension is available. This is currently only implemented for
the EGL context creation API.
Currently only implemented for EGL, but equivalent extensions
exist for GLX and Vulkan.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2068,2022-04-01T10:59:07Z,,2022-04-05T19:44:17Z,OPEN,False,98,1,7,https://github.com/gregorburger,Add support for context priority,1,"['enhancement', 'waiting for reply', 'EGL']",https://github.com/glfw/glfw/pull/2068,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2068#issuecomment-1086117443,"Allows to specify context priority low, medium, high or realtime if
the extension is available. This is currently only implemented for
the EGL context creation API.
Currently only implemented for EGL, but equivalent extensions
exist for GLX and Vulkan.",This is a very well made PR but it seems this EGL extension is only available on mobile platforms?,True,{}
glfw/glfw,https://github.com/glfw/glfw,2068,2022-04-01T10:59:07Z,,2022-04-05T19:44:17Z,OPEN,False,98,1,7,https://github.com/gregorburger,Add support for context priority,1,"['enhancement', 'waiting for reply', 'EGL']",https://github.com/glfw/glfw/pull/2068,https://github.com/gregorburger,3,https://github.com/glfw/glfw/pull/2068#issuecomment-1086335869,"Allows to specify context priority low, medium, high or realtime if
the extension is available. This is currently only implemented for
the EGL context creation API.
Currently only implemented for EGL, but equivalent extensions
exist for GLX and Vulkan.",I use it with nvidia drivers on desktop linux. I saw some commits that intel mesa drivers are supporting it as well. Could not figure out if amd drivers are supporting it.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2068,2022-04-01T10:59:07Z,,2022-04-05T19:44:17Z,OPEN,False,98,1,7,https://github.com/gregorburger,Add support for context priority,1,"['enhancement', 'waiting for reply', 'EGL']",https://github.com/glfw/glfw/pull/2068,https://github.com/gregorburger,4,https://github.com/glfw/glfw/pull/2068#issuecomment-1086341138,"Allows to specify context priority low, medium, high or realtime if
the extension is available. This is currently only implemented for
the EGL context creation API.
Currently only implemented for EGL, but equivalent extensions
exist for GLX and Vulkan.","and as mentioned this could be extended to be used by vulkan context creation as well.
https://www.khronos.org/blog/vulkan-1.3-and-roadmap-2022
VK_KHR_global_priority",True,{}
glfw/glfw,https://github.com/glfw/glfw,2069,2022-04-01T12:28:34Z,,2022-04-01T16:27:15Z,OPEN,False,431,379,1,https://github.com/Frostie314159,Convert defines to enums,2,[],https://github.com/glfw/glfw/pull/2069,https://github.com/Frostie314159,1,https://github.com/glfw/glfw/pull/2069,This PR attempts to migrate most defines to enums.,This PR attempts to migrate most defines to enums.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2069,2022-04-01T12:28:34Z,,2022-04-01T16:27:15Z,OPEN,False,431,379,1,https://github.com/Frostie314159,Convert defines to enums,2,[],https://github.com/glfw/glfw/pull/2069,https://github.com/Frostie314159,2,https://github.com/glfw/glfw/pull/2069#issuecomment-1085917499,This PR attempts to migrate most defines to enums.,I just noticed the build errors. They come from a change I made aiming to make function attributes and return values more logical(i.e. uint32_t instead of int in places where it made sense). I'll make a separate PR with those changes sometime soon.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2069,2022-04-01T12:28:34Z,,2022-04-01T16:27:15Z,OPEN,False,431,379,1,https://github.com/Frostie314159,Convert defines to enums,2,[],https://github.com/glfw/glfw/pull/2069,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/2069#issuecomment-1086091661,This PR attempts to migrate most defines to enums.,"Thank you for this PR but I will not merge this. The GLFW 3 API needs to remain stable, including the macros the public header provides. The next major version will likely use enums for numerical constants, which will require renaming symbols and changing function parameter types.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2069,2022-04-01T12:28:34Z,,2022-04-01T16:27:15Z,OPEN,False,431,379,1,https://github.com/Frostie314159,Convert defines to enums,2,[],https://github.com/glfw/glfw/pull/2069,https://github.com/Frostie314159,4,https://github.com/glfw/glfw/pull/2069#issuecomment-1086094609,This PR attempts to migrate most defines to enums.,But with enums nothing should change since they refer to the same value. So this would be non-breaking. This was also meant to be used for the next major version.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2069,2022-04-01T12:28:34Z,,2022-04-01T16:27:15Z,OPEN,False,431,379,1,https://github.com/Frostie314159,Convert defines to enums,2,[],https://github.com/glfw/glfw/pull/2069,https://github.com/Frostie314159,5,https://github.com/glfw/glfw/pull/2069#issuecomment-1086113583,This PR attempts to migrate most defines to enums.,"The GLFW 3 API needs to remain stable, including the macros the public header provides.

I see what you mean, but I tested it with the provided tests and it worked without issues.
This change shouldn't even be noticed by most users.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2070,2022-04-02T12:39:03Z,,2022-04-02T12:39:04Z,OPEN,False,25,13,4,https://github.com/wintertime,Improve init and termination with counting,1,[],https://github.com/glfw/glfw/pull/2070,https://github.com/wintertime,1,https://github.com/glfw/glfw/pull/2070,"Counts additional calls to glfwInit and waits with termination until the same
amount of calls to glfwTerminate is done.
For normal users nothing should change.
For libraries/plug-ins they can now call glfwInit and glfwTerminate additional
times as long as the calls are balanced. This avoids the problem that they
would terminate GLFW completely when the main application is still using it.
This should fix the underlying problem of #2036 . It may still be useful to additionally merge #2065 .","Counts additional calls to glfwInit and waits with termination until the same
amount of calls to glfwTerminate is done.
For normal users nothing should change.
For libraries/plug-ins they can now call glfwInit and glfwTerminate additional
times as long as the calls are balanced. This avoids the problem that they
would terminate GLFW completely when the main application is still using it.
This should fix the underlying problem of #2036 . It may still be useful to additionally merge #2065 .",True,{}
glfw/glfw,https://github.com/glfw/glfw,2072,2022-04-03T16:12:15Z,2022-04-07T18:54:39Z,2022-04-07T18:54:39Z,CLOSED,False,65,30,2,https://github.com/bugravirgomercury,"Closes #2071, implementing glfwGetErrorDescription",3,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/2072,https://github.com/bugravirgomercury,1,https://github.com/glfw/glfw/pull/2072,This PR implements the const char *glfwGetErrorDescription(int code); function that I proposed in the linked issue.,This PR implements the const char *glfwGetErrorDescription(int code); function that I proposed in the linked issue.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2072,2022-04-03T16:12:15Z,2022-04-07T18:54:39Z,2022-04-07T18:54:39Z,CLOSED,False,65,30,2,https://github.com/bugravirgomercury,"Closes #2071, implementing glfwGetErrorDescription",3,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/2072,https://github.com/bugravirgomercury,2,https://github.com/glfw/glfw/pull/2072#issuecomment-1086955745,This PR implements the const char *glfwGetErrorDescription(int code); function that I proposed in the linked issue.,"Switched from const char *glfwGetErrorDescription(int code) to void glfwGetErrorDescription(int code, char *description, int descriptionLength) reimplementing the function.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2072,2022-04-03T16:12:15Z,2022-04-07T18:54:39Z,2022-04-07T18:54:39Z,CLOSED,False,65,30,2,https://github.com/bugravirgomercury,"Closes #2071, implementing glfwGetErrorDescription",3,"['enhancement', 'wontfix']",https://github.com/glfw/glfw/pull/2072,https://github.com/elmindreda,3,https://github.com/glfw/glfw/pull/2072#issuecomment-1092092518,This PR implements the const char *glfwGetErrorDescription(int code); function that I proposed in the linked issue.,Closing this based on the conclusion of #2071.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2085,2022-04-16T01:31:06Z,,2022-04-19T21:29:21Z,OPEN,False,35,35,11,https://github.com/TheChocolateOre,Fixed typos in docs,1,"['bug', 'verified', 'documentation']",https://github.com/glfw/glfw/pull/2085,https://github.com/TheChocolateOre,1,https://github.com/glfw/glfw/pull/2085,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2103,2022-05-06T22:11:16Z,2022-05-31T19:54:40Z,2022-05-31T19:54:44Z,CLOSED,False,1,1,1,https://github.com/linkmauve,Fix build error message with removed OSMesa option,1,"['wontfix', 'build']",https://github.com/glfw/glfw/pull/2103,https://github.com/linkmauve,1,https://github.com/glfw/glfw/pull/2103,The correct hint wasn’t GLFW_PLATFORM but GLFW_OSMESA_CONTEXT_API.,The correct hint wasn’t GLFW_PLATFORM but GLFW_OSMESA_CONTEXT_API.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2103,2022-05-06T22:11:16Z,2022-05-31T19:54:40Z,2022-05-31T19:54:44Z,CLOSED,False,1,1,1,https://github.com/linkmauve,Fix build error message with removed OSMesa option,1,"['wontfix', 'build']",https://github.com/glfw/glfw/pull/2103,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2103#issuecomment-1120464450,The correct hint wasn’t GLFW_PLATFORM but GLFW_OSMESA_CONTEXT_API.,"The main purpose of the GLFW_USE_OSMESA CMake option in 3.3 is to select the Null backend, and only briefly during the development of 3.3 was it to select OSMesa as context creation API.
Story time!
The Null backend was originally called OSMesa, because it was created by someone at Google for the sole purpose of being a testing stub with OSMesa for context creation. The CMake option for enabling this was GLFW_USE_OSMESA and it kept that name for compatibility reasons when the backend was renamed to Null. GLFW_OSMESA_CONTEXT_API was added later in 3.3, enabling runtime support for OSMesa for other backends. I would have added a better synonym for GLFW_USE_OSMESA in what will be 3.4 but then runtime platform selection allowed me to remove it entirely instead.
This why GLFW_USE_OSMESA points people at GLFW_PLATFORM and not GLFW_OSMESA_CONTEXT_API.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2106,2022-05-07T14:37:07Z,,2022-05-25T19:42:24Z,OPEN,False,2,2,1,https://github.com/sasichkamega,Rename USE_MSVC_RUNTIME_LIBRARY_DLL to GLFW_USE_MSVC_RUNTIME_LIBRARY_DLL,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/2106,https://github.com/sasichkamega,1,https://github.com/glfw/glfw/pull/2106,More structured.,More structured.,True,{}
glfw/glfw,https://github.com/glfw/glfw,2106,2022-05-07T14:37:07Z,,2022-05-25T19:42:24Z,OPEN,False,2,2,1,https://github.com/sasichkamega,Rename USE_MSVC_RUNTIME_LIBRARY_DLL to GLFW_USE_MSVC_RUNTIME_LIBRARY_DLL,1,"['enhancement', 'build']",https://github.com/glfw/glfw/pull/2106,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2106#issuecomment-1137767286,More structured.,"In isolation I agree that this is a better name. The current name was picked because other projects (for example Bullet) were already using this one and it seemed possible that CMake would make this variable official, like they had already done for BUILD_SHARED_LIBS.
Instead CMake added CMAKE_MSVC_RUNTIME_LIBRARY, which should be used instead on newer versions of CMake.
At this point we only offer USE_MSVC_RUNTIME_LIBRARY_DLL for backward compatibility with existing projects that embed GLFW. Because of this I won't merge this PR.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2107,2022-05-08T17:53:25Z,,2022-05-08T17:53:26Z,OPEN,False,51,0,10,https://github.com/lsr0,Draft/RFC: Add window blur hint/attribute,1,[],https://github.com/glfw/glfw/pull/2107,https://github.com/lsr0,1,https://github.com/glfw/glfw/pull/2107,"This adds very basic support for a new GLFW_BLURRED window
hint/attribute, and support in the X11 and null platforms. It is
intended to get feedback on whether this is the right API for this
feature, before diving into the other per-platform
implementations/stubs and documenting.
Note that setting blur at least on X11 is reasonably blind, we set a prop, but have no idea if a compositor is respecting it. As such I haven't tried to implement validated feedback here. We probably could do so for some platforms, however. It is of course likely meaningless on all platforms without transparency/opacity set and will state that in the documentation if & when.
Intended to fix #1823","This adds very basic support for a new GLFW_BLURRED window
hint/attribute, and support in the X11 and null platforms. It is
intended to get feedback on whether this is the right API for this
feature, before diving into the other per-platform
implementations/stubs and documenting.
Note that setting blur at least on X11 is reasonably blind, we set a prop, but have no idea if a compositor is respecting it. As such I haven't tried to implement validated feedback here. We probably could do so for some platforms, however. It is of course likely meaningless on all platforms without transparency/opacity set and will state that in the documentation if & when.
Intended to fix #1823",True,{}
glfw/glfw,https://github.com/glfw/glfw,2108,2022-05-10T08:45:31Z,,2022-05-25T18:32:39Z,OPEN,False,16,16,4,https://github.com/MartinPulec,Save and restore original X11 error handler,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/2108,https://github.com/MartinPulec,1,https://github.com/glfw/glfw/pull/2108,"Greetings, I am proposing a patch to save&restore the X11 error handler that user might have set instead of restoring the default one. The point is that default X11 error handler is a bit ugly because it exits the program unconditionally, so the glfw user may override this (as GLFW also does).","Greetings, I am proposing a patch to save&restore the X11 error handler that user might have set instead of restoring the default one. The point is that default X11 error handler is a bit ugly because it exits the program unconditionally, so the glfw user may override this (as GLFW also does).",True,{}
glfw/glfw,https://github.com/glfw/glfw,2108,2022-05-10T08:45:31Z,,2022-05-25T18:32:39Z,OPEN,False,16,16,4,https://github.com/MartinPulec,Save and restore original X11 error handler,1,"['bug', 'X11', 'verified']",https://github.com/glfw/glfw/pull/2108,https://github.com/elmindreda,2,https://github.com/glfw/glfw/pull/2108#issuecomment-1122513026,"Greetings, I am proposing a patch to save&restore the X11 error handler that user might have set instead of restoring the default one. The point is that default X11 error handler is a bit ugly because it exits the program unconditionally, so the glfw user may override this (as GLFW also does).","Oh, yes, this needs fixing. Thank you!",True,{}
glfw/glfw,https://github.com/glfw/glfw,2112,2022-05-15T14:51:58Z,2022-05-15T14:52:22Z,2022-05-15T16:07:11Z,CLOSED,False,46,0,1,https://github.com/Timothyoung97,Integrate with kaz engine,2,"['enhancement', 'build', 'accidental']",https://github.com/glfw/glfw/pull/2112,https://github.com/Timothyoung97,1,https://github.com/glfw/glfw/pull/2112,,,True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/daipom,1,https://github.com/glfw/glfw/pull/2117,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/daipom,2,https://github.com/glfw/glfw/pull/2117#issuecomment-1135459286,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","@ashie 's comment on #2097 about TSF support.
original:  #2097 (comment)


Windows: TSF support
In addition to Imm32, we need to consider supporting TSF (Text Service Framework).
A comment on the original PR pointed out that the TSF needs to be supported instead of Imm32.
However, Imm32 seems to work well for now, so it may be enough to support only Imm32 at first?
Can we think of a direction to have this merged into upstream without TSF support, and then consider TSF later if necessary?

I'm working on this task with @daipom
TSF is nice to have, but we decided that we won't include it in our first pull request. Here is the reason:


Windows have a compatible layer ""CUAS"" (Cicero Unaware Application Support: TSF is formerly known as Cinero) that converts TSF <-> Imm32, so that we can use TSF input methods from Imm32 applications.

CUAS is enabled by default on Windows Vista or later.
Although older CUAS was buggy (at least on Windows XP), recent version of CUAS seems stable enough.



Although Windows 8's Metro style didn't allow Imm32 and CUAS, Windows 10's tablet mode seems supporting it. We confirmed the actual behavior.


Although UWP applications can't use Imm32, It's not concerned with GLFW becuase GLFW is a library which depends on Win32.


We confirmed actual behavior with various input methods of Windows 10, and most of them works fine with Imm32 application.

Microsoft IME (Japanese)
ATOK Passport (Japanese)
Google Japanese Input
Microsoft Pinyin (Simplified Chinese)
Microsoft Bopomofo (Traditional Chinese)
Chinese Traditional Array (Traditional Chinese)



We don't use TSF specific features yet.


Since TSF requires COM (Component Object Model), we can't build it by MinGW.

Even when we use Visual Studio, we have to greatly change the project configuration.



We think the comment Imm32 is problematic on Window10 as Microsoft has dropped support of it. is incorrect as mentioned above.
refs:


https://bugs.chromium.org/p/chromium/issues/detail?id=225189#c1


https://nyaruru.hatenablog.com/entry/20070308/p1 (Written in Japanese)


https://nyaruru.hatenablog.com/entry/20070309/p1 (Written in Japanese)


https://game.watch.impress.co.jp/docs/20070927/wv.htm (Written in Japanese)


https://ascii.jp/elem/000/000/757/757721/2/ (Written in Japanese)",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/daipom,3,https://github.com/glfw/glfw/pull/2117#issuecomment-1135460232,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","@ashie 's comment on #2097 about Wayland support.
original:  #2097 (comment)


GNU/Linux: Wayland support
In addition to XIM, we need to consider supporting Wayland.
There is an idea supporting Fcitx directly in a comment on the original PR. However, we are not considering this direction because over-the-spot style seems to work well on XIM and we can support Wayland if needed.
What we would like to discuss is whether there is any possibility to go in the direction of only supporting XIM at first?

Wayland support is a bit complicated but we think we need to support it. Because recent major distributions are migrating from X11 to Wayland, and Wayland doesn't have global positioning protocol or API, so that it's always needed to support Wayland's text input protocol to show candidate window in correct position. Supporting Fcitx or IBus directly doesn't resolve this issue.
An complicated issue of Wayland is that there are some protocols and each of them are incompatible:


text-input-v1


text-input-v3


gtk-text-input


I'm not sure but it seems that gtk-text-input doesn't seem used in recent days (It's not included in GTK4, probably dropped). To support 2 major desktop environment ""GNOME"" and ""KDE"" on GNU/Linux, probably supporting text-input-v3 is enough. But another major window system ""Weston"" is also used widely on embedded systems and it supports only text-input-v1. So we may need to support both text-input-v1 and text-input-v3.
We have experience to implement them (e.g. https://github.com/ashie/gtk-wayland-textinputv1) so that we can implement it in GLFW as well, but not yet start to work on it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/daipom,4,https://github.com/glfw/glfw/pull/2117#issuecomment-1135473652,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting


This is caused by _glfwInputKey being called even if the result of XFilterEvent is True.

https://github.com/clear-code/glfw/blob/5d7a89e5690600e4bb88f06c5721a18f01fea131/src/x11_window.c#L1325
https://github.com/clear-code/glfw/blob/5d7a89e5690600e4bb88f06c5721a18f01fea131/src/x11_window.c#L1437

I confirmed that inserting the following codes before the _glfwInputKey solved this issue.
if (filtered)
    return;
Could you please teach me why _glfwInputKey is called even if the result of XFilterEvent is True?
There seems to be a reason for this and I am wondering how to solve it.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/daipom,5,https://github.com/glfw/glfw/pull/2117#issuecomment-1135497822,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","Remaining issues
* The candidate window doesn't display correctly with fullscreen mode

About the fullscreen issue on X11:
Changing NET_WM_BYPASS_COMPOSITOR value to 2 from 1 solves this issue on X11.

NET_WM_BYPASS_COMPOSITOR: https://specifications.freedesktop.org/wm-spec/wm-spec-latest.html#idm45446104333040

diff --git a/src/x11_window.c b/src/x11_window.c
index 5eec344f..c2214509 100644
--- a/src/x11_window.c
+++ b/src/x11_window.c
@@ -362,7 +362,7 @@ static void updateWindowMode(_GLFWwindow* window)
         // Enable compositor bypass
         if (!window->x11.transparent)
         {
-            const unsigned long value = 1;
+            const unsigned long value = 2;
 
             XChangeProperty(_glfw.x11.display,  window->x11.handle,
                             _glfw.x11.NET_WM_BYPASS_COMPOSITOR, XA_CARDINAL, 32,
This change may slightly worsen rendering performance.
Instead of always changing it to 2, should I make it possible to specify the value by Hint or something?",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/daipom,6,https://github.com/glfw/glfw/pull/2117#issuecomment-1135524777,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","Remaining issues
* The candidate window doesn't display correctly with fullscreen mode

About the fullscreen issue on Windows and macOS:
It seems to be caused by the way creating a window on these platforms.
Windows
On Windows, the IME display flashes the screen,
similar to the problem of transparency not working with fullscreen mode.
Weirdly, these problems occur when the window size exactly matches the screen size.
We can solve this problem by making the window height or width 1 larger than the screen size,
at the same time enabling transparency to work with fullscreen mode.
If you can tolerate this weird solution,
we can solve it by adding a new hint to make the window height or width 1 larger than the screen size.
(Maybe windows-only glfwWindowHint such as GLFW_WIN32_FULLSCREEN_IME)
macOS
On macOS, the candidate window can't be displayed on fullscreen.
However, if we make it fullscreen by pressing the green button on the window, it works fine.
if we want IME input on fullscreen, we can use the green button to make it fullscreen instead of the GLFW function.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/ashie,7,https://github.com/glfw/glfw/pull/2117#issuecomment-1139292876,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","Remaining issues
* X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting

* Block-sizes of preedit-callback don't take into account the UTF-32 encoding

* The candidate window doesn't display correctly with fullscreen mode


In addition, we need to add a way to get caret position of preedit string.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/daipom,8,https://github.com/glfw/glfw/pull/2117#issuecomment-1140725076,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","In addition, we need to add a way to get caret position of preedit string.

I added this at 0ba4b36.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/ronchaine,9,https://github.com/glfw/glfw/pull/2117#issuecomment-1140877606,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","Wayland IME is a bit of a mess.  Besides text-input-v1 and text-input-v3, there's also unstable input-method-v2, used by wlroots (which is pretty much everything not Weston, KDE or GNOME)
fcitx/fcitx5#206  fcitx5 has some more details, and a blog post https://www.csslayer.info/wordpress/fcitx-dev/chrome-state-of-input-method-on-wayland/ has some good info as well (in Chinese).",True,{}
glfw/glfw,https://github.com/glfw/glfw,2117,2022-05-24T06:12:19Z,,2022-06-01T00:07:13Z,OPEN,False,2131,46,26,https://github.com/daipom,Draft: Add IME support for each platform,63,[],https://github.com/glfw/glfw/pull/2117,https://github.com/ashie,10,https://github.com/glfw/glfw/pull/2117#issuecomment-1140925752,"This is a fix to the matter we discussed earlier in the issue: #2097.
This fix is based on @shibukawa's  #658 PR.
In that PR, there were some problems with each platform.
This PR fixed its major problems and now works mostly correctly on each platform.
(Minor fixes still need to be made, but we will continue to do so.)
The new APIs are the same as this PR and they are as follows.

About preedit

glfwSetPreeditCallback: callback to notify the preedit text
glfwSetPreeditCursorPos: set the candidate window position
glfwGetPreeditCursorPos: get the candidate window position
glfwResetPreeditText: reset the preedit text


About IME status

glfwSetIMEStatusCallback: callback to notify the change of ON/OFF of the IME
glfwSetInputMode: switch ON/OFF of the IME by using new mode GLFW_IME
glfwGetInputMode: get ON/OFF of the IME by using new mode GLFW_IME



Supported platforms: Win32, macOS, X11
(We need to consider supporting Wayland, but we would like to support these first.)
You can confirm the behavior by tests/input_text.
tests/input_text on X11:

Win32

Use Imm32 (dynamic load)
All APIs work fine on Windows10

macOS

All APIs work fine on M1 Monterey 12.3.1.

X11

Environment: Ubuntu 20.04 LTS, X11, ibus
Adopted over-the-spot style by default because on-the-spot style of XIM doesn't work well.

You can change the style to on-the-spot by glfwInitHint(GLFW_X11_ONTHESPOT, GLFW_TRUE).


Over-the-spot style

Only glfwSetPreeditCursorPos and glfwGetPreeditCursorPos work and other APIs don't work.
This is OK for this style because the input method side manages the preedit, so the application side doesn't need to manage it except for the candidate window position.


On-the-spot style

glfwSetPreeditCursorPos and glfwGetPreeditCursorPos don't work, so we can't manage the candidate window position.
All APIs of IME status doesn't work too.



Remaining issues

X11: Some keys (arrow, Enter, BackSpace, ...) are passed to applications during preediting
Block-sizes of preedit-callback don't take into account the UTF-32 encoding
The candidate window doesn't display correctly with fullscreen mode","AFAIK input-method-v2 is a protocol for input methods, not affected to applications.",True,{'THUMBS_UP': ['https://github.com/ronchaine']}
glfw/glfw,https://github.com/glfw/glfw,2120,2022-05-26T06:35:30Z,,2022-05-26T06:35:30Z,OPEN,False,10,2,1,https://github.com/cfnptr,Fix macOS libvulkan.1.dylib loading,1,[],https://github.com/glfw/glfw/pull/2120,https://github.com/cfnptr,1,https://github.com/glfw/glfw/pull/2120,"Fix for #2113.
Changed libvulkan.1.dylib search directory to the Frameworks.","Fix for #2113.
Changed libvulkan.1.dylib search directory to the Frameworks.",True,{}
glfw/glfw,https://github.com/glfw/glfw,2122,2022-05-27T04:47:28Z,,2022-06-02T12:14:23Z,OPEN,False,35,0,9,https://github.com/michaelpennington,Add a window hint for setting app_id on wayland,3,[],https://github.com/glfw/glfw/pull/2122,https://github.com/michaelpennington,1,https://github.com/glfw/glfw/pull/2122,"Simple change to support setting app_id on wayland windows, closes #2121 .","Simple change to support setting app_id on wayland windows, closes #2121 .",True,{}
