SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,1,https://github.com/SuperHouse/esp-open-rtos/pull/114,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-194504023,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","This looks good at a glance, thanks for submitting it.
I know you mentioned something about trying to integrate with newlib/libc timezone support. Have you also tried implementing _time_r and _gettimeofday_r syscalls?
If you add these functions to your sntp_fun.c file then it should be possible to use libc time() and gettimeofday(), etc. calls.
The prototypes for those syscalls can be found here:
https://github.com/projectgus/newlib-xtensa/blob/xtensa-2_2_0-lock/newlib/libc/include/reent.h#L155",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/foogod,3,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-194531197,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Note that if you're going to implement the *_r versions, you need to make sure your code is thread-safe.  It is alternately possible (and I suspect much easier in this case) to just implement the non-_r versions, which as I understand, newlib will then by default automatically call wrapped appropriately to make sure you don't have to deal with multithreading issues..
(I actually just noticed recently that I think some of the file-IO stuff we've implemented with *_r variants is not, in reality, actually threadsafe, and so should not have been implemented as *_r as well.. I was meaning to go back and double-check this and possibly open up a bug for it, but then didn't follow through)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/projectgus,4,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-194541253,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Note that if you're going to implement the *_r versions, you need to make sure your code is thread-safe.

I'm fairly sure newlib's locking mechanism (which we employ) provides thread safety as required at the libc level, so we don't generally need to add locking primitives to the syscall implementations themselves. For example, malloc locking means that only one task can call into sbrk_r() at a time, and file descriptor locking means that only one task will call read()/write() with the same file descriptor at a given time.
The primary reason newlib requires you to implement *_r instead of the other style is to set errno suitably for the calling context. Any other global state would also need storing in the r parameter, but I think we meet that requirement now.
I could be wrong though, please open another issue to discuss this if you think it needs fixing.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,5,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-194716832,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","I suspected something like _time_r() and _gettimeofday_r() syscalls would exist, but I'm not a newlib expert and I couldn't find documentation searching on the net. I'll have a look and try using them.
Thanks for the feedback and tips!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,6,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-194964120,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Had a quick look to syscalls. I'll try implementing gettimeofday_r(), but I cannot find _time_r(). There's a _times_r() syscall, but it looks like it's for process times measurements.
It also looks like there isn't a settimeofday() syscall, but I might try renaming the function I coded to set the time to settimeofday() for clarity.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,7,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-195342997,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Who is supposed to call _gettimeofday_r()? I wrote a dirty test implementation, but I cannot find a newlib function using it, to test the interaction. I'm starting to suspect that maybe no newlib functions use _gettimeofday_r()...",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,8,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-196013012,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Did some code cleanup. Also implemented time() and modified some routines to be a bit nearer to the POSIX standard implementation. The main difference now is that tz_dsttime from struct timezone doesn't work the same.
When set to nonzero on POSIX implementation, daylight savings will be applied according to tzset. When set to 1 on this patch, an hour offset will be directly applied, until set to 0. So basically you have to manually manage when daylight savings are applied. Doing it correctly would require implementing tzset and friends, since it doesn't look like newlib provides this functionality. And I think doing it might be overkill.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/projectgus,9,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-196086568,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Hi,
Thanks for all this work!
You should be able to use the time() from newlib, as it's available and implemented in terms of the gettimeofday_r() syscall:
https://github.com/projectgus/newlib-xtensa/blob/xtensa-2_2_0-lock/newlib/libc/time/time.c#L40
... it should be as simple as #include <time.h> and then calling it. Let me know if that doesn't work though, maybe some pieces are missing still.
Timezone support on newlib seems... interesting. You can call tzset() which will use the getenv_r syscall (unimplemented for us so far) to read a TZ environment variable. There's a discussion on the mailing list about adding a key/value store to esp-open-rtos, so it'd be interesting to some day extend that to implementing ""environment variables"" and you can set the timezone that way. But I don't think it's useful right now.
tzset() sets 3 global variables as described here:
https://github.com/projectgus/newlib-xtensa/blob/xtensa-2_2_0-lock/newlib/libc/time/tzset.c#L21
... including _timezone and _daylight, but it also references a global tzinfo strcture _gettzinfo().
A mixture of these seem to be used by other local time implementations, for example localtime() uses both. strftime() uses _gettzinfo() only.
I'm not suggesting you necessarily need to go down the rabbit hole of supporting all the newlib libc timezone stuff though, it seems pretty confusing! Although I think it'd be good use the libc time() rather than reimplementing it, if we can. Even better if we can use the same shared timezone info data structures that the libc uses, but only if you feel like it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,10,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-196182221,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","I'll have another look to it when I get some time. I already did some experiments manually setting _tzset and _tz, but couldn't get these settings to affect the output of ctime(). Other things I tried: calling clock_gettime() and clock_getres() after implementing _gettimeofday_r(). They both are unimplemented (I got unresolved externals).
Also, if we get some kind of support for global variables, the usual way of defining timezones on Unix is to point TZ variable to a binary file with timezone information. I don't know the format of these files, and I doubt newlib will use it. But there must be other way of doing it, as, as you can see, I'm not an expert when it comes to newlib and POSIX implementation of clocks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/projectgus,11,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-196183743,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Cool, let me know how you get on. I don't mind helping debug if you could use a second pair of eyes.

I don't know the format if these files, and I doubt newlib will use it

newlib just expects TZ to be a string with a format specified by POSIX, there's format information at the link I posted above. In glibc tzset() supports either that string format or a filename pointing to a binary file.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/projectgus,12,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-196183997,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","PS I think you're correct about clock_gettime and friends, grepping the newlib source shows there's a Linux implementation but not a platform-agnostic one.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,13,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-203964435,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","I've been pretty busy lately, but at last had some time to continue digging into this. I have removed my implementation of time() and I'm using the one from newlib. Couldn't test the code (I have not an ESP lying around right now), but it builds and it should work (I'll test it ASAP).
Now, what's the suggested route? Implementing _getenv_r() to return the configured timezone string when querying TZ env variable?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,14,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-216861847,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","I have been pretty busy lately, and almost forgot about this. Is there still interest? How can we proceed?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/projectgus,15,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-217613112,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","I'm very interested. I haven't had time to test yet though, in your last comment you said you planned to - I'm guessing you haven't had time either?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,16,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-217856839,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","I'm not 100% sure, because this was over a month ago, but I think I already tested it and worked. I'll try testing it again and report.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/projectgus,17,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-219277964,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.","Gave this another review and a test, looks great! Thanks for submitting it, sorry about all the delays.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,114,2016-03-09T16:21:58Z,2016-05-15T10:42:36Z,2016-05-31T09:14:44Z,MERGED,True,1029,0,6,https://github.com/doragasu,Added sntp support and example,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/114,https://github.com/doragasu,18,https://github.com/SuperHouse/esp-open-rtos/pull/114#issuecomment-222634554,"Added SNTP support, using lwIP SNTP contribution, plus the code needed to set and read the RTC.
I suppose I'll have to do a lot of code style changes (like using /* */ for comments), but I'm sending right now the PR to get feedback.",Great to read it has finally been merged! Sorry for not being able to pull some minutes to test it again.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,117,2016-03-17T22:31:09Z,2016-03-18T22:19:56Z,2017-10-25T11:21:47Z,MERGED,True,86,15,2,https://github.com/UncleRus,"SPI big endian swap bug fix, spi_get_settings()/spi_set_settings()",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/117,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/117,"Bugfix and some new functionality:
static const spi_settings_t my_settings = {
    .mode = SPI_MODE0,
    .freq_divider = SPI_FREQ_DIV_4M,
    .msb = true,
    .endianness = SPI_LITTLE_ENDIAN,
    .minimal_pins = true
};
....
spi_settings_t old;
spi_get_settings(1, &old); // save current settings
spi_set_settings(1, &my_settings);
// work with spi here
....
spi_set_settings(1, &old); // restore saved settings","Bugfix and some new functionality:
static const spi_settings_t my_settings = {
    .mode = SPI_MODE0,
    .freq_divider = SPI_FREQ_DIV_4M,
    .msb = true,
    .endianness = SPI_LITTLE_ENDIAN,
    .minimal_pins = true
};
....
spi_settings_t old;
spi_get_settings(1, &old); // save current settings
spi_set_settings(1, &my_settings);
// work with spi here
....
spi_set_settings(1, &old); // restore saved settings",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,117,2016-03-17T22:31:09Z,2016-03-18T22:19:56Z,2017-10-25T11:21:47Z,MERGED,True,86,15,2,https://github.com/UncleRus,"SPI big endian swap bug fix, spi_get_settings()/spi_set_settings()",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/117,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/117#issuecomment-198111363,"Bugfix and some new functionality:
static const spi_settings_t my_settings = {
    .mode = SPI_MODE0,
    .freq_divider = SPI_FREQ_DIV_4M,
    .msb = true,
    .endianness = SPI_LITTLE_ENDIAN,
    .minimal_pins = true
};
....
spi_settings_t old;
spi_get_settings(1, &old); // save current settings
spi_set_settings(1, &my_settings);
// work with spi here
....
spi_set_settings(1, &old); // restore saved settings","This looks very nice, I like the idea of a settings data type. Just out of curiosity, what SPI hardware are you testing this with?
@foogod , I'm good to merge this if you are.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,117,2016-03-17T22:31:09Z,2016-03-18T22:19:56Z,2017-10-25T11:21:47Z,MERGED,True,86,15,2,https://github.com/UncleRus,"SPI big endian swap bug fix, spi_get_settings()/spi_set_settings()",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/117,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/117#issuecomment-198122534,"Bugfix and some new functionality:
static const spi_settings_t my_settings = {
    .mode = SPI_MODE0,
    .freq_divider = SPI_FREQ_DIV_4M,
    .msb = true,
    .endianness = SPI_LITTLE_ENDIAN,
    .minimal_pins = true
};
....
spi_settings_t old;
spi_get_settings(1, &old); // save current settings
spi_set_settings(1, &my_settings);
// work with spi here
....
spi_set_settings(1, &old); // restore saved settings","what SPI hardware are you testing this with?

MFRC522 - 13.56 MHz RFID reader/writer
MAX7456 - TV OSD
logic analyzer",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,117,2016-03-17T22:31:09Z,2016-03-18T22:19:56Z,2017-10-25T11:21:47Z,MERGED,True,86,15,2,https://github.com/UncleRus,"SPI big endian swap bug fix, spi_get_settings()/spi_set_settings()",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/117,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/117#issuecomment-198126888,"Bugfix and some new functionality:
static const spi_settings_t my_settings = {
    .mode = SPI_MODE0,
    .freq_divider = SPI_FREQ_DIV_4M,
    .msb = true,
    .endianness = SPI_LITTLE_ENDIAN,
    .minimal_pins = true
};
....
spi_settings_t old;
spi_get_settings(1, &old); // save current settings
spi_set_settings(1, &my_settings);
// work with spi here
....
spi_set_settings(1, &old); // restore saved settings","And I plan to make a PR with example of using MFRC522 over SPI, something like wifi door lock.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,118,2016-03-21T20:55:03Z,2016-03-22T02:27:12Z,2016-03-22T02:27:33Z,MERGED,True,8,0,1,https://github.com/UncleRus,esp/gpio.h c++ linker compatibility,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/118,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/118,Same as afd58bc,Same as afd58bc,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,118,2016-03-21T20:55:03Z,2016-03-22T02:27:12Z,2016-03-22T02:27:33Z,MERGED,True,8,0,1,https://github.com/UncleRus,esp/gpio.h c++ linker compatibility,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/118,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/118#issuecomment-199591045,Same as afd58bc,"Good catch, thanks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,121,2016-04-05T17:33:05Z,2016-04-06T22:42:02Z,2016-04-06T22:42:02Z,MERGED,True,862,515,6,https://github.com/foogod,DS18B20 API Improvements,5,[],https://github.com/SuperHouse/esp-open-rtos/pull/121,https://github.com/foogod,1,https://github.com/SuperHouse/esp-open-rtos/pull/121,"The original DS18B20 API was functional, but not ideal for working with multiple sensors on the same bus.  In addition to a bunch of misc cleanup (use of open-drain mode, removing unnecessary critical sections, etc), this update adds several new API functions for identifying and accessing DS18B20 devices in more flexible (and much faster!) ways.","The original DS18B20 API was functional, but not ideal for working with multiple sensors on the same bus.  In addition to a bunch of misc cleanup (use of open-drain mode, removing unnecessary critical sections, etc), this update adds several new API functions for identifying and accessing DS18B20 devices in more flexible (and much faster!) ways.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,121,2016-04-05T17:33:05Z,2016-04-06T22:42:02Z,2016-04-06T22:42:02Z,MERGED,True,862,515,6,https://github.com/foogod,DS18B20 API Improvements,5,[],https://github.com/SuperHouse/esp-open-rtos/pull/121,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/121#issuecomment-206184222,"The original DS18B20 API was functional, but not ideal for working with multiple sensors on the same bus.  In addition to a bunch of misc cleanup (use of open-drain mode, removing unnecessary critical sections, etc), this update adds several new API functions for identifying and accessing DS18B20 devices in more flexible (and much faster!) ways.","This looks very good to me. I also like that it moves away from function wrapper macros and has more typedefs for known types.
@hetii, @darksv  - you both used the older DS18B20 API. Any comments regarding merging this?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,121,2016-04-05T17:33:05Z,2016-04-06T22:42:02Z,2016-04-06T22:42:02Z,MERGED,True,862,515,6,https://github.com/foogod,DS18B20 API Improvements,5,[],https://github.com/SuperHouse/esp-open-rtos/pull/121,https://github.com/hetii,3,https://github.com/SuperHouse/esp-open-rtos/pull/121#issuecomment-206288246,"The original DS18B20 API was functional, but not ideal for working with multiple sensors on the same bus.  In addition to a bunch of misc cleanup (use of open-drain mode, removing unnecessary critical sections, etc), this update adds several new API functions for identifying and accessing DS18B20 devices in more flexible (and much faster!) ways.","From my side all looks fine, especially when works faster ;)
BTW, thanks for info that new API is available.
Regards.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,122,2016-04-05T23:50:28Z,2016-04-06T22:13:22Z,2016-04-06T22:13:22Z,MERGED,True,14,4,3,https://github.com/foogod,Add WARNINGS_AS_ERRORS make flag,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/122,https://github.com/foogod,1,https://github.com/SuperHouse/esp-open-rtos/pull/122,"Previous behavior was all warnings were treated as errors.  This is now
controllable via a make variable and defaults to off (but can be turned on in
local.mk for those who still want the old behavior)","Previous behavior was all warnings were treated as errors.  This is now
controllable via a make variable and defaults to off (but can be turned on in
local.mk for those who still want the old behavior)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,122,2016-04-05T23:50:28Z,2016-04-06T22:13:22Z,2016-04-06T22:13:22Z,MERGED,True,14,4,3,https://github.com/foogod,Add WARNINGS_AS_ERRORS make flag,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/122,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/122#issuecomment-206181504,"Previous behavior was all warnings were treated as errors.  This is now
controllable via a make variable and defaults to off (but can be turned on in
local.mk for those who still want the old behavior)","Looks good!
Only one thing, could you please add WARNINGS_AS_ERRORS=1 to the Travis make line as well (it's the last line in .travis.yml). You can check the Travis log here after you push the branch to verify it's building with -Werror)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,122,2016-04-05T23:50:28Z,2016-04-06T22:13:22Z,2016-04-06T22:13:22Z,MERGED,True,14,4,3,https://github.com/foogod,Add WARNINGS_AS_ERRORS make flag,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/122,https://github.com/foogod,3,https://github.com/SuperHouse/esp-open-rtos/pull/122#issuecomment-206496931,"Previous behavior was all warnings were treated as errors.  This is now
controllable via a make variable and defaults to off (but can be turned on in
local.mk for those who still want the old behavior)","Ah, ok.. I wasn't actually sure where the Travis build config was located (since it was hidden in a dot-file)..  I've added that now.
I did also just realize that currently in ssid_config.h we have a #warning line to make folks update it with their own info, but under the new default config that won't stop the build anymore.  Do we want to change that to #error instead, or is it ok if we just emit a warning message and continue on (and assume people are going to actually read the output of the compilation if they don't get what they expect)?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,122,2016-04-05T23:50:28Z,2016-04-06T22:13:22Z,2016-04-06T22:13:22Z,MERGED,True,14,4,3,https://github.com/foogod,Add WARNINGS_AS_ERRORS make flag,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/122,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/122#issuecomment-206500359,"Previous behavior was all warnings were treated as errors.  This is now
controllable via a make variable and defaults to off (but can be turned on in
local.mk for those who still want the old behavior)",Good point. I think it should be changed to #error to make it easy for newcomers to find where they need to put their wifi credentials to get the example programs to run. Pretty much in the same manner people are reminded to clone the submodules if LWIP is missing.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,124,2016-04-07T18:36:59Z,2016-04-15T01:19:57Z,2016-04-15T20:12:50Z,MERGED,True,505,130,9,https://github.com/kanflo,Updated rboot to #75ca33b including the flash write bug.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/124,https://github.com/kanflo,1,https://github.com/SuperHouse/esp-open-rtos/pull/124,"I merged the latest rboot code (#75ca33b) with the ""flash write bugfix"" into EOR. Default rboot configuration is BOOT_BIG_FLASH and BOOT_RTC_ENABLED.
I have tested the ota_basic demo several times observing that the roms get overwritten and that the system works.
Side note. The rename of extras/rboot-ota/rboot-ota.c → extras/rboot-ota/rboot-integration.c was not my intention. Dunno where git got that idea from.","I merged the latest rboot code (#75ca33b) with the ""flash write bugfix"" into EOR. Default rboot configuration is BOOT_BIG_FLASH and BOOT_RTC_ENABLED.
I have tested the ota_basic demo several times observing that the roms get overwritten and that the system works.
Side note. The rename of extras/rboot-ota/rboot-ota.c → extras/rboot-ota/rboot-integration.c was not my intention. Dunno where git got that idea from.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,124,2016-04-07T18:36:59Z,2016-04-15T01:19:57Z,2016-04-15T20:12:50Z,MERGED,True,505,130,9,https://github.com/kanflo,Updated rboot to #75ca33b including the flash write bug.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/124,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/124#issuecomment-210235409,"I merged the latest rboot code (#75ca33b) with the ""flash write bugfix"" into EOR. Default rboot configuration is BOOT_BIG_FLASH and BOOT_RTC_ENABLED.
I have tested the ota_basic demo several times observing that the roms get overwritten and that the system works.
Side note. The rename of extras/rboot-ota/rboot-ota.c → extras/rboot-ota/rboot-integration.c was not my intention. Dunno where git got that idea from.","Hi @kanflo,
Sorry for the slow reply. This looks good to me, the build failure is unrelated and should be fixed on master. The OTA example builds for me locally, so I'm going to merge this.
Thanks!
Angus",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,124,2016-04-07T18:36:59Z,2016-04-15T01:19:57Z,2016-04-15T20:12:50Z,MERGED,True,505,130,9,https://github.com/kanflo,Updated rboot to #75ca33b including the flash write bug.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/124,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/124#issuecomment-210622823,"I merged the latest rboot code (#75ca33b) with the ""flash write bugfix"" into EOR. Default rboot configuration is BOOT_BIG_FLASH and BOOT_RTC_ENABLED.
I have tested the ota_basic demo several times observing that the roms get overwritten and that the system works.
Side note. The rename of extras/rboot-ota/rboot-ota.c → extras/rboot-ota/rboot-integration.c was not my intention. Dunno where git got that idea from.","Great, thanks!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,129,2016-04-20T22:05:32Z,2016-04-25T04:28:01Z,2016-05-19T20:12:21Z,MERGED,True,221,0,5,https://github.com/jsuiker,Added DHT library to extras and sample code to examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/129,https://github.com/jsuiker,1,https://github.com/SuperHouse/esp-open-rtos/pull/129,"Just getting my feet wet with the ESP8266 and the FreeRTOS code you all have been building.  Thanks for all the work and please feel free to critique what I've done here.
~Jonathan","Just getting my feet wet with the ESP8266 and the FreeRTOS code you all have been building.  Thanks for all the work and please feel free to critique what I've done here.
~Jonathan",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,129,2016-04-20T22:05:32Z,2016-04-25T04:28:01Z,2016-05-19T20:12:21Z,MERGED,True,221,0,5,https://github.com/jsuiker,Added DHT library to extras and sample code to examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/129,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/129#issuecomment-212658486,"Just getting my feet wet with the ESP8266 and the FreeRTOS code you all have been building.  Thanks for all the work and please feel free to critique what I've done here.
~Jonathan","Thanks @jsuiker ! This looks good to me apart fomr the couple of minor things I mentioned inline, although I'm going to ask @foogod for a second opinion as he's more involved with the sensor-library type stuff.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,129,2016-04-20T22:05:32Z,2016-04-25T04:28:01Z,2016-05-19T20:12:21Z,MERGED,True,221,0,5,https://github.com/jsuiker,Added DHT library to extras and sample code to examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/129,https://github.com/foogod,3,https://github.com/SuperHouse/esp-open-rtos/pull/129#issuecomment-213017850,"Just getting my feet wet with the ESP8266 and the FreeRTOS code you all have been building.  Thanks for all the work and please feel free to critique what I've done here.
~Jonathan","The updated version looks much better!  I left a couple of inline suggestions, but really neither of those is a blocker for merging, in my opinion (mainly they would just make the API a bit cleaner/easier to use)..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,129,2016-04-20T22:05:32Z,2016-04-25T04:28:01Z,2016-05-19T20:12:21Z,MERGED,True,221,0,5,https://github.com/jsuiker,Added DHT library to extras and sample code to examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/129,https://github.com/foogod,4,https://github.com/SuperHouse/esp-open-rtos/pull/129#issuecomment-213092732,"Just getting my feet wet with the ESP8266 and the FreeRTOS code you all have been building.  Thanks for all the work and please feel free to critique what I've done here.
~Jonathan","I'm pretty good with this at this point..  @projectgus, do you have any remaining issues?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,129,2016-04-20T22:05:32Z,2016-04-25T04:28:01Z,2016-05-19T20:12:21Z,MERGED,True,221,0,5,https://github.com/jsuiker,Added DHT library to extras and sample code to examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/129,https://github.com/projectgus,5,https://github.com/SuperHouse/esp-open-rtos/pull/129#issuecomment-213917677,"Just getting my feet wet with the ESP8266 and the FreeRTOS code you all have been building.  Thanks for all the work and please feel free to critique what I've done here.
~Jonathan","Looks great to me! A couple of really minor housekeeping things:

There's no newlines at the ends of the files.
Please squash your commits as described at this link, and re-push so they appear as a single commit.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,129,2016-04-20T22:05:32Z,2016-04-25T04:28:01Z,2016-05-19T20:12:21Z,MERGED,True,221,0,5,https://github.com/jsuiker,Added DHT library to extras and sample code to examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/129,https://github.com/jsuiker,6,https://github.com/SuperHouse/esp-open-rtos/pull/129#issuecomment-214093209,"Just getting my feet wet with the ESP8266 and the FreeRTOS code you all have been building.  Thanks for all the work and please feel free to critique what I've done here.
~Jonathan","Should be ready, lemme know!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,129,2016-04-20T22:05:32Z,2016-04-25T04:28:01Z,2016-05-19T20:12:21Z,MERGED,True,221,0,5,https://github.com/jsuiker,Added DHT library to extras and sample code to examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/129,https://github.com/projectgus,7,https://github.com/SuperHouse/esp-open-rtos/pull/129#issuecomment-214123576,"Just getting my feet wet with the ESP8266 and the FreeRTOS code you all have been building.  Thanks for all the work and please feel free to critique what I've done here.
~Jonathan","Terrific, thanks!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,134,2016-04-28T04:01:42Z,2016-05-28T05:21:50Z,2016-05-28T05:21:50Z,CLOSED,False,2,2,1,https://github.com/RLuckom,correct timebase in sys_arch.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/134,https://github.com/RLuckom,1,https://github.com/SuperHouse/esp-open-rtos/pull/134,sys_now() now returns ms.,sys_now() now returns ms.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,134,2016-04-28T04:01:42Z,2016-05-28T05:21:50Z,2016-05-28T05:21:50Z,CLOSED,False,2,2,1,https://github.com/RLuckom,correct timebase in sys_arch.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/134,https://github.com/RLuckom,2,https://github.com/SuperHouse/esp-open-rtos/pull/134#issuecomment-215304643,sys_now() now returns ms.,See #123 for the long-winded rationale.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,134,2016-04-28T04:01:42Z,2016-05-28T05:21:50Z,2016-05-28T05:21:50Z,CLOSED,False,2,2,1,https://github.com/RLuckom,correct timebase in sys_arch.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/134,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/134#issuecomment-215620147,sys_now() now returns ms.,"Welcome to the project, thanks for looking into this so thoroughly!
Looks good! And you don't think we've accidentally depended on the existing behaviour in any other places?
The one place I know about is here:
https://github.com/SuperHouse/esp-open-rtos/blob/master/extras/paho_mqtt_c/MQTTESP8266.c#L73
... but that might be the only one?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,134,2016-04-28T04:01:42Z,2016-05-28T05:21:50Z,2016-05-28T05:21:50Z,CLOSED,False,2,2,1,https://github.com/RLuckom,correct timebase in sys_arch.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/134,https://github.com/RLuckom,4,https://github.com/SuperHouse/esp-open-rtos/pull/134#issuecomment-215914897,sys_now() now returns ms.,"Thanks for pointing that out.
I haven't actually found a reason for the select() bug referenced in issue 123. As far as I can tell, select calls sys_arch_sem_wait (which handles ms correctly), and sys_arch_sem_wait converts ms to ticks and then calls into xSemaphoreTake, which is defined to be an invocation of xQueueGenericReceive (and is supposed to take a timeout in ticks).
Because the mqtt extra is calling select, and I haven't found a connection between this change and select, I'm not sure I should add that change. However I'll keep looking into it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,134,2016-04-28T04:01:42Z,2016-05-28T05:21:50Z,2016-05-28T05:21:50Z,CLOSED,False,2,2,1,https://github.com/RLuckom,correct timebase in sys_arch.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/134,https://github.com/projectgus,5,https://github.com/SuperHouse/esp-open-rtos/pull/134#issuecomment-222290993,sys_now() now returns ms.,"Thanks for the detailed investigation and explanation @RLuckom . Sorry I didn't get back to you earlier.
As I commented on the parent issue, I agree with you that there isn't actually a bug with select(). However I think this is also a legitimate bug fix, so I've cherry-picked it into master as 0734fa4.
Thanks again!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,135,2016-05-03T00:15:24Z,2016-05-15T21:51:44Z,2016-05-15T21:51:44Z,MERGED,True,770,40,8,https://github.com/projectgus,PHY management features,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/135,https://github.com/projectgus,1,https://github.com/SuperHouse/esp-open-rtos/pull/135,"I've started digging into the PHY management, both in the SDK and a bit at the hardware register.
These two commits have what I've figured out so far - including an esp-open-rtos implementation for configuration the default SDK PHY settings.","I've started digging into the PHY management, both in the SDK and a bit at the hardware register.
These two commits have what I've figured out so far - including an esp-open-rtos implementation for configuration the default SDK PHY settings.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,135,2016-05-03T00:15:24Z,2016-05-15T21:51:44Z,2016-05-15T21:51:44Z,MERGED,True,770,40,8,https://github.com/projectgus,PHY management features,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/135,https://github.com/pfalcon,2,https://github.com/SuperHouse/esp-open-rtos/pull/135#issuecomment-216619424,"I've started digging into the PHY management, both in the SDK and a bit at the hardware register.
These two commits have what I've figured out so far - including an esp-open-rtos implementation for configuration the default SDK PHY settings.","Nice work. As a random gossip, I wanted to post announcement of https://github.com/pfalcon/esp-open-headers/ to RE list, but figured there's little to post about, as I don't want to keep doing it manually. My biggest interest is in esf_bug module https://github.com/pfalcon/esp-open-headers/blob/master/pp/esf_buf.h , which is the biggest source of esp8266 instability (as the exhaustion of send/receive buffers leads to deadlocks).",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,135,2016-05-03T00:15:24Z,2016-05-15T21:51:44Z,2016-05-15T21:51:44Z,MERGED,True,770,40,8,https://github.com/projectgus,PHY management features,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/135,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/135#issuecomment-216683282,"I've started digging into the PHY management, both in the SDK and a bit at the hardware register.
These two commits have what I've figured out so far - including an esp-open-rtos implementation for configuration the default SDK PHY settings.","Thanks for the review comments @pfalcon. Pushed new version just now.
I also realised the MCS index table was based on old information (first version of the structure was just based on the Arduino header file), so I updated it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,135,2016-05-03T00:15:24Z,2016-05-15T21:51:44Z,2016-05-15T21:51:44Z,MERGED,True,770,40,8,https://github.com/projectgus,PHY management features,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/135,https://github.com/projectgus,4,https://github.com/SuperHouse/esp-open-rtos/pull/135#issuecomment-216696103,"I've started digging into the PHY management, both in the SDK and a bit at the hardware register.
These two commits have what I've figured out so far - including an esp-open-rtos implementation for configuration the default SDK PHY settings.","wanted to post announcement of https://github.com/pfalcon/esp-open-headers/ to RE list, but figured there's little to post about

Interesting work, thanks for sharing that. It'll be interesting to see how the data structures in rtos sdk libpp compare to those ones.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,135,2016-05-03T00:15:24Z,2016-05-15T21:51:44Z,2016-05-15T21:51:44Z,MERGED,True,770,40,8,https://github.com/projectgus,PHY management features,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/135,https://github.com/foogod,5,https://github.com/SuperHouse/esp-open-rtos/pull/135#issuecomment-218532740,"I've started digging into the PHY management, both in the SDK and a bit at the hardware register.
These two commits have what I've figured out so far - including an esp-open-rtos implementation for configuration the default SDK PHY settings.","This looks really good.. aside from the ""coex"" vs ""coexist"" bit, everything else looks good to me!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,135,2016-05-03T00:15:24Z,2016-05-15T21:51:44Z,2016-05-15T21:51:44Z,MERGED,True,770,40,8,https://github.com/projectgus,PHY management features,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/135,https://github.com/projectgus,6,https://github.com/SuperHouse/esp-open-rtos/pull/135#issuecomment-219256930,"I've started digging into the PHY management, both in the SDK and a bit at the hardware register.
These two commits have what I've figured out so far - including an esp-open-rtos implementation for configuration the default SDK PHY settings.",Thanks @foogod. Changed coex to coexist everywhere.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,136,2016-05-03T01:15:27Z,2016-05-28T02:46:58Z,2016-05-28T02:47:24Z,MERGED,True,730,514,27,https://github.com/projectgus,"OTA improvements, always enable OTA mode",13,[],https://github.com/SuperHouse/esp-open-rtos/pull/136,https://github.com/projectgus,1,https://github.com/SuperHouse/esp-open-rtos/pull/136,"This is a grouping of OTA improvements to do with making the OTA support more usable and more secure.
These are some of the steps towards the discussed goal of making esp-open-rtos use OTA mode for all images. At the moment it just integrates rboot directly from @raburton, we may find in time that we diverge enough that we need to fork our own bootloader but for now it works OK after the recent excellent upstream rebasing job by @kanflo .
Comments from any interested parties, particularly those involved in the previous discussion about moving to OTA mode (@kanflo, @foogod) would be very welcome. :)","This is a grouping of OTA improvements to do with making the OTA support more usable and more secure.
These are some of the steps towards the discussed goal of making esp-open-rtos use OTA mode for all images. At the moment it just integrates rboot directly from @raburton, we may find in time that we diverge enough that we need to fork our own bootloader but for now it works OK after the recent excellent upstream rebasing job by @kanflo .
Comments from any interested parties, particularly those involved in the previous discussion about moving to OTA mode (@kanflo, @foogod) would be very welcome. :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,136,2016-05-03T01:15:27Z,2016-05-28T02:46:58Z,2016-05-28T02:47:24Z,MERGED,True,730,514,27,https://github.com/projectgus,"OTA improvements, always enable OTA mode",13,[],https://github.com/SuperHouse/esp-open-rtos/pull/136,https://github.com/raburton,2,https://github.com/SuperHouse/esp-open-rtos/pull/136#issuecomment-216598397,"This is a grouping of OTA improvements to do with making the OTA support more usable and more secure.
These are some of the steps towards the discussed goal of making esp-open-rtos use OTA mode for all images. At the moment it just integrates rboot directly from @raburton, we may find in time that we diverge enough that we need to fork our own bootloader but for now it works OK after the recent excellent upstream rebasing job by @kanflo .
Comments from any interested parties, particularly those involved in the previous discussion about moving to OTA mode (@kanflo, @foogod) would be very welcome. :)","I guess I qualify as an interested party, in some sense, as the author of rBoot. From my point of view it would be a shame to fork rBoot and if there are features you want I'm willing to take suggestions for consideration upstream. I know you're rewritten much of the API side, which seems entirely reasonable, to fit in with your framework code but if you change the bootloader it's another thing for you to maintain in your project and breaks compatibility with other users. At the moment rBoot allows you to boot roms created with the plain original SDK, plain RTOS SDK, your RTOS SDK, Sming, nodemcu, etc. because it is just one bootloader. Each framework can use it's own customised api to interact with it, but at the core they remain compatible allowing dual booting two or more completely different roms from different frameworks on the same device.
BTW the rBoot defines can be set via variables in environment/Makefiles the so you don't need to create extra header files for them (extras/rboot-ota/rboot.h) or you can just use this to enable the rboot integration option and then add your overrides to rboot.h options in there.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,136,2016-05-03T01:15:27Z,2016-05-28T02:46:58Z,2016-05-28T02:47:24Z,MERGED,True,730,514,27,https://github.com/projectgus,"OTA improvements, always enable OTA mode",13,[],https://github.com/SuperHouse/esp-open-rtos/pull/136,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/136#issuecomment-216636070,"This is a grouping of OTA improvements to do with making the OTA support more usable and more secure.
These are some of the steps towards the discussed goal of making esp-open-rtos use OTA mode for all images. At the moment it just integrates rboot directly from @raburton, we may find in time that we diverge enough that we need to fork our own bootloader but for now it works OK after the recent excellent upstream rebasing job by @kanflo .
Comments from any interested parties, particularly those involved in the previous discussion about moving to OTA mode (@kanflo, @foogod) would be very welcome. :)","Good work! I agree with @raburton that we should not fork rboot. I have been thinking about a boot and OTA strategy for my EOR projects with the industry knowledge I have regarding these things.
The current scheme relies on functional OTA functionality built into our application and if a buggy application gets flashed we are bricked. My plan is to create a secondary boot loader that can handle remote upgrades and that is never overwritten, freeing the main applicaton from needing remote upgrade support. It only needs to be able to detect that a remote upgrade is available, record this fact in an manner recoverable by rboot and restart. Rboot will then start the extended boot loader (""xboot""?) that will handle the upgrade. The current rboot/OTA scheme leaves the application running while it is downloading a new version, something that will not happen using this new scheme. Unless the new version is downloaded into a scratch area that is. The plan also includes having ""xboot"" calculate the application hash on each boot and only launching if found intact.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,136,2016-05-03T01:15:27Z,2016-05-28T02:46:58Z,2016-05-28T02:47:24Z,MERGED,True,730,514,27,https://github.com/projectgus,"OTA improvements, always enable OTA mode",13,[],https://github.com/SuperHouse/esp-open-rtos/pull/136,https://github.com/projectgus,4,https://github.com/SuperHouse/esp-open-rtos/pull/136#issuecomment-216704063,"This is a grouping of OTA improvements to do with making the OTA support more usable and more secure.
These are some of the steps towards the discussed goal of making esp-open-rtos use OTA mode for all images. At the moment it just integrates rboot directly from @raburton, we may find in time that we diverge enough that we need to fork our own bootloader but for now it works OK after the recent excellent upstream rebasing job by @kanflo .
Comments from any interested parties, particularly those involved in the previous discussion about moving to OTA mode (@kanflo, @foogod) would be very welcome. :)","Thanks for weighing in @raburton. I wasn't sure whether to ask you outright, as it's obviously a big ask for you to support yet another random framework. :). So I'm very happy to hear from you, I really appreciate it.
By way of context to the discussion, there's a couple of fairly sprawling discussions on the mailing list here:
https://groups.google.com/forum/#!searchin/esp-open-rtos/OTA/esp-open-rtos/_j7MffxhqsA/j0_Hw5ziBQAJ
and here:
https://groups.google.com/forum/#!searchin/esp-open-rtos/bootloader/esp-open-rtos/SnJeAkjBK8E/yiDx5z6gAQAJ
The core of which is:

Moving esp-open-rtos to always build images in ""OTA"" mode
Possibly augmenting/replacing Espressif's boot configuration modes (the 16-byte header) with something a bit more flexible regarding parameters

Depending on how far we get down that path, I can foresee we might have to discuss exactly which options make sense for upstreaming into rboot and which don't. But I'm happy to leave that discussion for later.

BTW the rBoot defines can be set via variables in environment/Makefiles the so you don't need to create extra header files for them (extras/rboot-ota/rboot.h) or you can just use this to enable the rboot integration option and then add your overrides to rboot.h options in there.

OK, thanks for the tip. I had a look, and I think I can unify everything in a fairly clean way with a small tweak to the Makefile in rboot. I'll make the change and send you a PR to consider.

Could we bump FLASH_SIZE to 32?

I don't really like any of this part of the Makefile, it'd be a lot better if we could inherit the esptool params from the top-level common.mk/local.mk - but I couldn't find a clean way to do that (maybe by splitting common.mk into parts, which might not be a bad refactor to do anyhow).

The current scheme relies on functional OTA functionality built into our application and if a buggy application gets flashed we are bricked.

Yes. This PR's changes came out of some work I'm doing for a client's commercial project as well. For it we've allocated a ""factory"" slot 0 firmware that we never overwrite via OTA, and then 2 ""user"" slot firmwares that we do overwrite via OTA. All of the SHA256/image verification stuff is used to make sure that we never switch to a new firmware slot without first confirming that it's SHA256 matches.
And there's also a check that we never erase sectors in the ""factory"" firmware region (AFAIK there's no way to enable sector erase protection via ESP8266).
As an anti-brick emergency measure against buggy application code, I added support to rboot to use any GPIO as the ""GPIO boot"" mode trigger in order to pull a pin low and force the factory slot 0 to boot. (I'll send that as a PR to rboot in the next few days, as well.)
Using a fully-featured factory firmware as the ""failsafe"" for OTA lets us leverage all of the trust/security features of the main application (because we're using the same trusted data source for application stuff as well.)
All that said, the xboot idea seems neat, I look forward to seeing more about it. :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,136,2016-05-03T01:15:27Z,2016-05-28T02:46:58Z,2016-05-28T02:47:24Z,MERGED,True,730,514,27,https://github.com/projectgus,"OTA improvements, always enable OTA mode",13,[],https://github.com/SuperHouse/esp-open-rtos/pull/136,https://github.com/kanflo,5,https://github.com/SuperHouse/esp-open-rtos/pull/136#issuecomment-216901276,"This is a grouping of OTA improvements to do with making the OTA support more usable and more secure.
These are some of the steps towards the discussed goal of making esp-open-rtos use OTA mode for all images. At the moment it just integrates rboot directly from @raburton, we may find in time that we diverge enough that we need to fork our own bootloader but for now it works OK after the recent excellent upstream rebasing job by @kanflo .
Comments from any interested parties, particularly those involved in the previous discussion about moving to OTA mode (@kanflo, @foogod) would be very welcome. :)","The core of which is:
Moving esp-open-rtos to always build images in ""OTA"" mode

I guess a makefile selectable OTA slot for make flash will come in handy.

And there's also a check that we never erase sectors in the ""factory"" firmware region

That is a nice idea.

As an anti-brick emergency measure against buggy application code, I added support to rboot to use any GPIO as the ""GPIO boot"" mode trigger in order to pull a pin low and force the factory slot 0 to boot.

I thought about this too and will put it in ""xboot"" (leaving rboot untouched). Which gpio pin will be read from @foogod's parameter framework (as well as wifi credentials and so on). I have begun adding ""master reset buttons"" to my new designs for this purpose.
Another idea is to never touch the rboot config area. Slot #0 (xboot) will be the permanent rboot target and when it has finished it will set slot #1 as a temporary rboot target and reboot. The overhead in time is minimal and rboot can be use as is.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,136,2016-05-03T01:15:27Z,2016-05-28T02:46:58Z,2016-05-28T02:47:24Z,MERGED,True,730,514,27,https://github.com/projectgus,"OTA improvements, always enable OTA mode",13,[],https://github.com/SuperHouse/esp-open-rtos/pull/136,https://github.com/raburton,6,https://github.com/SuperHouse/esp-open-rtos/pull/136#issuecomment-216909911,"This is a grouping of OTA improvements to do with making the OTA support more usable and more secure.
These are some of the steps towards the discussed goal of making esp-open-rtos use OTA mode for all images. At the moment it just integrates rboot directly from @raburton, we may find in time that we diverge enough that we need to fork our own bootloader but for now it works OK after the recent excellent upstream rebasing job by @kanflo .
Comments from any interested parties, particularly those involved in the previous discussion about moving to OTA mode (@kanflo, @foogod) would be very welcome. :)","@projectgus I'll do what I can to support what you need, but PRs are always appreciated! Especially as I have another set of professional exams coming up.
@kanflo this isn't a bad idea (and I know other people have done this, or at least said they were investigating/ doing this), if you need the extra functionality that can only be achieved in a full sdk-linked rom. The downside is the space used, and given that most of that space is taken up by the sdk code I think many people I've discussed this with previously decided it was easier to just include the functionality they wanted into the regular app rom, where it might only had a couple of kb (wouldn't be an option for some of your suggested uses though, so I think you would have to go the full rom route).",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,136,2016-05-03T01:15:27Z,2016-05-28T02:46:58Z,2016-05-28T02:47:24Z,MERGED,True,730,514,27,https://github.com/projectgus,"OTA improvements, always enable OTA mode",13,[],https://github.com/SuperHouse/esp-open-rtos/pull/136,https://github.com/projectgus,7,https://github.com/SuperHouse/esp-open-rtos/pull/136#issuecomment-221557206,"This is a grouping of OTA improvements to do with making the OTA support more usable and more secure.
These are some of the steps towards the discussed goal of making esp-open-rtos use OTA mode for all images. At the moment it just integrates rboot directly from @raburton, we may find in time that we diverge enough that we need to fork our own bootloader but for now it works OK after the recent excellent upstream rebasing job by @kanflo .
Comments from any interested parties, particularly those involved in the previous discussion about moving to OTA mode (@kanflo, @foogod) would be very welcome. :)","Reworked this quite substantially using latest upstream rboot from @raburton (with some new changes), and removed the option to not use OTA mode.
The ""bootloader"" directory also has a prebuilt firmware committed inside it, and ""make flash"" will write that firmware if no other bootloader was compiled. Each time the firmware is replaced esptool.py also flashes the firmware and erases the config (so you always get firmware slot 0.)

I guess a makefile selectable OTA slot for make flash will come in handy.

This could be a good addition. For now I'm happy with serial flashing always clearing the config (so it goes to slot 0). It's less flexible, but for development it should work OK. What do you think?
How does this all sound?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,137,2016-05-03T05:45:58Z,2016-05-16T23:38:19Z,2016-05-16T23:38:19Z,MERGED,True,1013,664,19,https://github.com/projectgus,Better crash dumps,10,[],https://github.com/SuperHouse/esp-open-rtos/pull/137,https://github.com/projectgus,1,https://github.com/SuperHouse/esp-open-rtos/pull/137,"Last PR for today, these are some changes to make crash dumps easier to debug (and two bugs that I found using the tools.)
New tool filteroutput.py will monitor the serial log and automatically call addr2line on anything that looks like a code address. This works surprisingly well, ie here's a sample from deliberately crashing the blink example:
Fatal exception (9):
epc1=0x40225575

0x40225575: crashy_mccrash at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:16
 (inlined by) user_init at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:65

epc2=0x00000000
epc3=0x00000000
excvaddr=0x5a5abdbd
depc=0x00000000
excsave1=0x40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

Registers:
a0 40220127 a1 3fff4a70 a2  5a5abdbd a3  abad1d3a

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

a4  00000001 a5  00000001 a6  3fff4d14 a7  00000008
a8  60000000 a9  000000a0 a10 3fff235c a11 0000000a
a12 00000000 a13 00000000 SAR 0000001f

Stack: SP=0x3fff4a70
0x3fff4a70: 00000000 00000000 00000000 00000000
0x3fff4a80: 3fff56d8 00000000 00000000 40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

0x3fff4a90: 00000000 00000000 00000000 00000000
0x3fff4aa0: 00000000 00000000 00000000 a5a5a5a5
0x3fff4ab0: 00000000 00000050 3fff4cb0 00000000
0x3fff4ac0: 3fff1b00 3fff1b00 3fff4ab8 3fff1af8
0x3fff4ad0: 0000000f a5a5a5a5 a5a5a5a5 3fff4ab8
0x3fff4ae0: 00000000 00000000 3fff4b08 454c4449


Line numbers directly in the serial output, no need to run an external tool (you can also pipe output from a log file into filteroutput.py if you need to.
Enough stack information to kind-of-infer the stack trace (we could probably stop at 0xa5a5a5a5 each time, but I go a bit further just in case that value comes up organically...
The register dump, combined with addrsource on the crashing address and the stack dump, mans you can reconstruct a pretty solid picture of what values were input to the function before it crashed.","Last PR for today, these are some changes to make crash dumps easier to debug (and two bugs that I found using the tools.)
New tool filteroutput.py will monitor the serial log and automatically call addr2line on anything that looks like a code address. This works surprisingly well, ie here's a sample from deliberately crashing the blink example:
Fatal exception (9):
epc1=0x40225575

0x40225575: crashy_mccrash at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:16
 (inlined by) user_init at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:65

epc2=0x00000000
epc3=0x00000000
excvaddr=0x5a5abdbd
depc=0x00000000
excsave1=0x40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

Registers:
a0 40220127 a1 3fff4a70 a2  5a5abdbd a3  abad1d3a

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

a4  00000001 a5  00000001 a6  3fff4d14 a7  00000008
a8  60000000 a9  000000a0 a10 3fff235c a11 0000000a
a12 00000000 a13 00000000 SAR 0000001f

Stack: SP=0x3fff4a70
0x3fff4a70: 00000000 00000000 00000000 00000000
0x3fff4a80: 3fff56d8 00000000 00000000 40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

0x3fff4a90: 00000000 00000000 00000000 00000000
0x3fff4aa0: 00000000 00000000 00000000 a5a5a5a5
0x3fff4ab0: 00000000 00000050 3fff4cb0 00000000
0x3fff4ac0: 3fff1b00 3fff1b00 3fff4ab8 3fff1af8
0x3fff4ad0: 0000000f a5a5a5a5 a5a5a5a5 3fff4ab8
0x3fff4ae0: 00000000 00000000 3fff4b08 454c4449


Line numbers directly in the serial output, no need to run an external tool (you can also pipe output from a log file into filteroutput.py if you need to.
Enough stack information to kind-of-infer the stack trace (we could probably stop at 0xa5a5a5a5 each time, but I go a bit further just in case that value comes up organically...
The register dump, combined with addrsource on the crashing address and the stack dump, mans you can reconstruct a pretty solid picture of what values were input to the function before it crashed.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,137,2016-05-03T05:45:58Z,2016-05-16T23:38:19Z,2016-05-16T23:38:19Z,MERGED,True,1013,664,19,https://github.com/projectgus,Better crash dumps,10,[],https://github.com/SuperHouse/esp-open-rtos/pull/137,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/137#issuecomment-216704364,"Last PR for today, these are some changes to make crash dumps easier to debug (and two bugs that I found using the tools.)
New tool filteroutput.py will monitor the serial log and automatically call addr2line on anything that looks like a code address. This works surprisingly well, ie here's a sample from deliberately crashing the blink example:
Fatal exception (9):
epc1=0x40225575

0x40225575: crashy_mccrash at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:16
 (inlined by) user_init at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:65

epc2=0x00000000
epc3=0x00000000
excvaddr=0x5a5abdbd
depc=0x00000000
excsave1=0x40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

Registers:
a0 40220127 a1 3fff4a70 a2  5a5abdbd a3  abad1d3a

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

a4  00000001 a5  00000001 a6  3fff4d14 a7  00000008
a8  60000000 a9  000000a0 a10 3fff235c a11 0000000a
a12 00000000 a13 00000000 SAR 0000001f

Stack: SP=0x3fff4a70
0x3fff4a70: 00000000 00000000 00000000 00000000
0x3fff4a80: 3fff56d8 00000000 00000000 40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

0x3fff4a90: 00000000 00000000 00000000 00000000
0x3fff4aa0: 00000000 00000000 00000000 a5a5a5a5
0x3fff4ab0: 00000000 00000050 3fff4cb0 00000000
0x3fff4ac0: 3fff1b00 3fff1b00 3fff4ab8 3fff1af8
0x3fff4ad0: 0000000f a5a5a5a5 a5a5a5a5 3fff4ab8
0x3fff4ae0: 00000000 00000000 3fff4b08 454c4449


Line numbers directly in the serial output, no need to run an external tool (you can also pipe output from a log file into filteroutput.py if you need to.
Enough stack information to kind-of-infer the stack trace (we could probably stop at 0xa5a5a5a5 each time, but I go a bit further just in case that value comes up organically...
The register dump, combined with addrsource on the crashing address and the stack dump, mans you can reconstruct a pretty solid picture of what values were input to the function before it crashed.","(Last commit 6767891 was needed because this PR contains ""the straw that broke the camels back"", our build output in verbose mode hit Travis' 4MB log limit. Ouch!)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,137,2016-05-03T05:45:58Z,2016-05-16T23:38:19Z,2016-05-16T23:38:19Z,MERGED,True,1013,664,19,https://github.com/projectgus,Better crash dumps,10,[],https://github.com/SuperHouse/esp-open-rtos/pull/137,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/137#issuecomment-217618812,"Last PR for today, these are some changes to make crash dumps easier to debug (and two bugs that I found using the tools.)
New tool filteroutput.py will monitor the serial log and automatically call addr2line on anything that looks like a code address. This works surprisingly well, ie here's a sample from deliberately crashing the blink example:
Fatal exception (9):
epc1=0x40225575

0x40225575: crashy_mccrash at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:16
 (inlined by) user_init at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:65

epc2=0x00000000
epc3=0x00000000
excvaddr=0x5a5abdbd
depc=0x00000000
excsave1=0x40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

Registers:
a0 40220127 a1 3fff4a70 a2  5a5abdbd a3  abad1d3a

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

a4  00000001 a5  00000001 a6  3fff4d14 a7  00000008
a8  60000000 a9  000000a0 a10 3fff235c a11 0000000a
a12 00000000 a13 00000000 SAR 0000001f

Stack: SP=0x3fff4a70
0x3fff4a70: 00000000 00000000 00000000 00000000
0x3fff4a80: 3fff56d8 00000000 00000000 40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

0x3fff4a90: 00000000 00000000 00000000 00000000
0x3fff4aa0: 00000000 00000000 00000000 a5a5a5a5
0x3fff4ab0: 00000000 00000050 3fff4cb0 00000000
0x3fff4ac0: 3fff1b00 3fff1b00 3fff4ab8 3fff1af8
0x3fff4ad0: 0000000f a5a5a5a5 a5a5a5a5 3fff4ab8
0x3fff4ae0: 00000000 00000000 3fff4b08 454c4449


Line numbers directly in the serial output, no need to run an external tool (you can also pipe output from a log file into filteroutput.py if you need to.
Enough stack information to kind-of-infer the stack trace (we could probably stop at 0xa5a5a5a5 each time, but I go a bit further just in case that value comes up organically...
The register dump, combined with addrsource on the crashing address and the stack dump, mans you can reconstruct a pretty solid picture of what values were input to the function before it crashed.","Added an additional commit that provides an abort() implementation that prints the calling address and also dumps stack in the same way the fatal exception handler does, before resetting.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,137,2016-05-03T05:45:58Z,2016-05-16T23:38:19Z,2016-05-16T23:38:19Z,MERGED,True,1013,664,19,https://github.com/projectgus,Better crash dumps,10,[],https://github.com/SuperHouse/esp-open-rtos/pull/137,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/137#issuecomment-217629086,"Last PR for today, these are some changes to make crash dumps easier to debug (and two bugs that I found using the tools.)
New tool filteroutput.py will monitor the serial log and automatically call addr2line on anything that looks like a code address. This works surprisingly well, ie here's a sample from deliberately crashing the blink example:
Fatal exception (9):
epc1=0x40225575

0x40225575: crashy_mccrash at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:16
 (inlined by) user_init at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:65

epc2=0x00000000
epc3=0x00000000
excvaddr=0x5a5abdbd
depc=0x00000000
excsave1=0x40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

Registers:
a0 40220127 a1 3fff4a70 a2  5a5abdbd a3  abad1d3a

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

a4  00000001 a5  00000001 a6  3fff4d14 a7  00000008
a8  60000000 a9  000000a0 a10 3fff235c a11 0000000a
a12 00000000 a13 00000000 SAR 0000001f

Stack: SP=0x3fff4a70
0x3fff4a70: 00000000 00000000 00000000 00000000
0x3fff4a80: 3fff56d8 00000000 00000000 40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

0x3fff4a90: 00000000 00000000 00000000 00000000
0x3fff4aa0: 00000000 00000000 00000000 a5a5a5a5
0x3fff4ab0: 00000000 00000050 3fff4cb0 00000000
0x3fff4ac0: 3fff1b00 3fff1b00 3fff4ab8 3fff1af8
0x3fff4ad0: 0000000f a5a5a5a5 a5a5a5a5 3fff4ab8
0x3fff4ae0: 00000000 00000000 3fff4b08 454c4449


Line numbers directly in the serial output, no need to run an external tool (you can also pipe output from a log file into filteroutput.py if you need to.
Enough stack information to kind-of-infer the stack trace (we could probably stop at 0xa5a5a5a5 each time, but I go a bit further just in case that value comes up organically...
The register dump, combined with addrsource on the crashing address and the stack dump, mans you can reconstruct a pretty solid picture of what values were input to the function before it crashed.",Nice work!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,137,2016-05-03T05:45:58Z,2016-05-16T23:38:19Z,2016-05-16T23:38:19Z,MERGED,True,1013,664,19,https://github.com/projectgus,Better crash dumps,10,[],https://github.com/SuperHouse/esp-open-rtos/pull/137,https://github.com/projectgus,5,https://github.com/SuperHouse/esp-open-rtos/pull/137#issuecomment-217698226,"Last PR for today, these are some changes to make crash dumps easier to debug (and two bugs that I found using the tools.)
New tool filteroutput.py will monitor the serial log and automatically call addr2line on anything that looks like a code address. This works surprisingly well, ie here's a sample from deliberately crashing the blink example:
Fatal exception (9):
epc1=0x40225575

0x40225575: crashy_mccrash at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:16
 (inlined by) user_init at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:65

epc2=0x00000000
epc3=0x00000000
excvaddr=0x5a5abdbd
depc=0x00000000
excsave1=0x40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

Registers:
a0 40220127 a1 3fff4a70 a2  5a5abdbd a3  abad1d3a

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

a4  00000001 a5  00000001 a6  3fff4d14 a7  00000008
a8  60000000 a9  000000a0 a10 3fff235c a11 0000000a
a12 00000000 a13 00000000 SAR 0000001f

Stack: SP=0x3fff4a70
0x3fff4a70: 00000000 00000000 00000000 00000000
0x3fff4a80: 3fff56d8 00000000 00000000 40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

0x3fff4a90: 00000000 00000000 00000000 00000000
0x3fff4aa0: 00000000 00000000 00000000 a5a5a5a5
0x3fff4ab0: 00000000 00000050 3fff4cb0 00000000
0x3fff4ac0: 3fff1b00 3fff1b00 3fff4ab8 3fff1af8
0x3fff4ad0: 0000000f a5a5a5a5 a5a5a5a5 3fff4ab8
0x3fff4ae0: 00000000 00000000 3fff4b08 454c4449


Line numbers directly in the serial output, no need to run an external tool (you can also pipe output from a log file into filteroutput.py if you need to.
Enough stack information to kind-of-infer the stack trace (we could probably stop at 0xa5a5a5a5 each time, but I go a bit further just in case that value comes up organically...
The register dump, combined with addrsource on the crashing address and the stack dump, mans you can reconstruct a pretty solid picture of what values were input to the function before it crashed.","Thanks @kanflo. I'm keen to merge this if noone else has any concerns. @foogod, do you have any time to look at this one? Cheers.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,137,2016-05-03T05:45:58Z,2016-05-16T23:38:19Z,2016-05-16T23:38:19Z,MERGED,True,1013,664,19,https://github.com/projectgus,Better crash dumps,10,[],https://github.com/SuperHouse/esp-open-rtos/pull/137,https://github.com/foogod,6,https://github.com/SuperHouse/esp-open-rtos/pull/137#issuecomment-218528765,"Last PR for today, these are some changes to make crash dumps easier to debug (and two bugs that I found using the tools.)
New tool filteroutput.py will monitor the serial log and automatically call addr2line on anything that looks like a code address. This works surprisingly well, ie here's a sample from deliberately crashing the blink example:
Fatal exception (9):
epc1=0x40225575

0x40225575: crashy_mccrash at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:16
 (inlined by) user_init at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:65

epc2=0x00000000
epc3=0x00000000
excvaddr=0x5a5abdbd
depc=0x00000000
excsave1=0x40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

Registers:
a0 40220127 a1 3fff4a70 a2  5a5abdbd a3  abad1d3a

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

a4  00000001 a5  00000001 a6  3fff4d14 a7  00000008
a8  60000000 a9  000000a0 a10 3fff235c a11 0000000a
a12 00000000 a13 00000000 SAR 0000001f

Stack: SP=0x3fff4a70
0x3fff4a70: 00000000 00000000 00000000 00000000
0x3fff4a80: 3fff56d8 00000000 00000000 40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

0x3fff4a90: 00000000 00000000 00000000 00000000
0x3fff4aa0: 00000000 00000000 00000000 a5a5a5a5
0x3fff4ab0: 00000000 00000050 3fff4cb0 00000000
0x3fff4ac0: 3fff1b00 3fff1b00 3fff4ab8 3fff1af8
0x3fff4ad0: 0000000f a5a5a5a5 a5a5a5a5 3fff4ab8
0x3fff4ae0: 00000000 00000000 3fff4b08 454c4449


Line numbers directly in the serial output, no need to run an external tool (you can also pipe output from a log file into filteroutput.py if you need to.
Enough stack information to kind-of-infer the stack trace (we could probably stop at 0xa5a5a5a5 each time, but I go a bit further just in case that value comes up organically...
The register dump, combined with addrsource on the crashing address and the stack dump, mans you can reconstruct a pretty solid picture of what values were input to the function before it crashed.","Looks like a really good improvement.  I'm all for adding this functionality.
One other suggestion might be while we're changing all this to have the ""Fatal exception"" line be preceeded by some easily-identifiable and unlikely-to-be-accidentally-generated text which can be used to reliably detect/identify the beginning of a crash dump, but that's kinda minor..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,137,2016-05-03T05:45:58Z,2016-05-16T23:38:19Z,2016-05-16T23:38:19Z,MERGED,True,1013,664,19,https://github.com/projectgus,Better crash dumps,10,[],https://github.com/SuperHouse/esp-open-rtos/pull/137,https://github.com/projectgus,7,https://github.com/SuperHouse/esp-open-rtos/pull/137#issuecomment-219579896,"Last PR for today, these are some changes to make crash dumps easier to debug (and two bugs that I found using the tools.)
New tool filteroutput.py will monitor the serial log and automatically call addr2line on anything that looks like a code address. This works surprisingly well, ie here's a sample from deliberately crashing the blink example:
Fatal exception (9):
epc1=0x40225575

0x40225575: crashy_mccrash at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:16
 (inlined by) user_init at /home/gus/dev/esp/rtos/open-rtos/examples/blink/blink.c:65

epc2=0x00000000
epc3=0x00000000
excvaddr=0x5a5abdbd
depc=0x00000000
excsave1=0x40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

Registers:
a0 40220127 a1 3fff4a70 a2  5a5abdbd a3  abad1d3a

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

a4  00000001 a5  00000001 a6  3fff4d14 a7  00000008
a8  60000000 a9  000000a0 a10 3fff235c a11 0000000a
a12 00000000 a13 00000000 SAR 0000001f

Stack: SP=0x3fff4a70
0x3fff4a70: 00000000 00000000 00000000 00000000
0x3fff4a80: 3fff56d8 00000000 00000000 40220127

0x40220127: sdk_user_init_task at /home/gus/dev/esp/rtos/open-rtos/core/app_main.c:341

0x3fff4a90: 00000000 00000000 00000000 00000000
0x3fff4aa0: 00000000 00000000 00000000 a5a5a5a5
0x3fff4ab0: 00000000 00000050 3fff4cb0 00000000
0x3fff4ac0: 3fff1b00 3fff1b00 3fff4ab8 3fff1af8
0x3fff4ad0: 0000000f a5a5a5a5 a5a5a5a5 3fff4ab8
0x3fff4ae0: 00000000 00000000 3fff4b08 454c4449


Line numbers directly in the serial output, no need to run an external tool (you can also pipe output from a log file into filteroutput.py if you need to.
Enough stack information to kind-of-infer the stack trace (we could probably stop at 0xa5a5a5a5 each time, but I go a bit further just in case that value comes up organically...
The register dump, combined with addrsource on the crashing address and the stack dump, mans you can reconstruct a pretty solid picture of what values were input to the function before it crashed.","Thanks @foogod. I added two more commits, 981c878 dumps some heap statistics and 1e9296f prevents a corner case where crashing inside the fatal exception handler (ie due to heap corruption) could have caused a crash loop.
I have some more changes in another branch, to dump state and stack information for all tasks. But it needs a bit more cleanup.
I'm going to merge this now, but if you see anything in those other two commits then please let me know and I'll send another PR.
I''ll update the Crash Dumps wiki page soon to explain the new information provided in the dumps.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/drasko,1,https://github.com/SuperHouse/esp-open-rtos/pull/138,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com","This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/foogod,2,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217001833,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com",Looks like you've also got a vim swapfile that got caught up in the commit (.simple.c.swp)..,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/drasko,3,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217003903,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com",@foogod thanks! Should be fixed now.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/drasko,4,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217005194,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com",On the other hand - I did no change in Jsmn code. Maybe this can be introduced as a git submodule?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/drasko,5,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217008342,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com","Yep, I just tested the version with submodule, and it works. Would you prefer PR with submodule version?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/projectgus,6,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217021200,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com","Thanks for this @drasko. I added a few minor comments inline.
The git submodule would be preferable, please.
Also, I think there's a solid chance we'll end up with more than one JSON library in the long term. Could you please name the example something like ""json_jsmn_simple""?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/drasko,7,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217024289,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com",@projectgus thanks for the review. I will close this PR and open new one with fixes and submodule approach.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/projectgus,8,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217025009,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com","Great! You don't need to close this PR, you can squash your commits and force push a new version of the PR on top of this one (as described here: http://eli.thegreenplace.net/2014/02/19/squashing-github-pull-requests-into-a-single-commit/ )
(Or alternatively just keep adding commits, and github's fancy web interface will let me squash them into one commit when I merge the PR.)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/drasko,9,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217033714,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com",Fixed and squashed.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/projectgus,10,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-217046473,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com","This looks good to me except you've somehow picked up two of my commits into the PR when you rebased - not sure how?
@foogod, are you OK with the rest of these changes? I can cherry-pick it into master by hand if need be.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/foogod,11,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-218516791,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com",Sorry I've been sorta sporadic lately..  Looks fine to me.  Feel free to merge however you think is best..,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,138,2016-05-04T20:46:18Z,2016-05-15T12:32:53Z,2016-05-15T12:32:53Z,CLOSED,False,164,46,9,https://github.com/drasko,Add JSON support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/138,https://github.com/projectgus,12,https://github.com/SuperHouse/esp-open-rtos/pull/138#issuecomment-219283235,"This commits adds JSON support by adding Jsmn
(http://zserge.com/jsmn.html), a minimalistic JSON parser.
Signed-off-by: Drasko DRASKOVIC drasko.draskovic@gmail.com","Thanks again for this, and sorry for the delay. I've cherry-picked it as e7607ff.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,141,2016-05-15T00:53:23Z,2016-05-15T12:20:40Z,2016-05-15T12:20:44Z,MERGED,True,60,23,5,https://github.com/projectgus,Fix Travis toolchain build (again),3,[],https://github.com/SuperHouse/esp-open-rtos/pull/141,https://github.com/projectgus,1,https://github.com/SuperHouse/esp-open-rtos/pull/141,"This is similar to #126 - git history was rewritten on a submodule of esp-open-sdk (esp-lwip this time) so historical commits on esp-open-sdk no longer check out cleanly, and our Travis builds broke.
Failure seems to be compounded by the 4MB log limit in Travis - toolchain plus all examples build with V=1 can blow the 4MB limit, so there's a commit here to only build V=1 on a failing example.
Long-term we may need to find a different way to include a toolchain in Travis, as the way we're using esp-open-sdk (including a historical commit) doesn't seem like it's sustainable.","This is similar to #126 - git history was rewritten on a submodule of esp-open-sdk (esp-lwip this time) so historical commits on esp-open-sdk no longer check out cleanly, and our Travis builds broke.
Failure seems to be compounded by the 4MB log limit in Travis - toolchain plus all examples build with V=1 can blow the 4MB limit, so there's a commit here to only build V=1 on a failing example.
Long-term we may need to find a different way to include a toolchain in Travis, as the way we're using esp-open-sdk (including a historical commit) doesn't seem like it's sustainable.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,142,2016-05-23T05:30:09Z,2016-05-28T01:25:45Z,2016-05-28T02:43:40Z,MERGED,True,92,56,1,https://github.com/projectgus,Store .rodata in flash by default,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/142,https://github.com/projectgus,1,https://github.com/SuperHouse/esp-open-rtos/pull/142,"This may not be ready for merging yet, but I wanted to put it up for discussion/review anyhow.
Moves most .rodata to flash by default. http_get_mbedtls example's RAM footprint shrinks by 5317 bytes (7284 byte .rodata -> 1967 byte.) blink example shrinks by 3981 bytes (5948 to 1967).
Most usefully, you can do things like compile in debug message strings without taking a RAM hit for them.
Fundamentally there's not a lot in this change, it draws on the code we've had in e-o-r for a while to do unaligned reads from flash. The main difference was testing various types of operation and watching for unwanted/risky accesses that might happen when the flash caching layer was disabled.
I'm not keen to merge yet because of potential performance implications. The GNU linker doesn't seem to place .rodata constants anywhere near the code which accesses them, and based on my experiments understanding the flash caching layer this could be a significant performance hit. I'm going to keep looking into that and I'll provide some more information soon.
(That said, I haven't yet benchmarked any actual applications before and after this change, so it may be that the difference is mostly academic.)","This may not be ready for merging yet, but I wanted to put it up for discussion/review anyhow.
Moves most .rodata to flash by default. http_get_mbedtls example's RAM footprint shrinks by 5317 bytes (7284 byte .rodata -> 1967 byte.) blink example shrinks by 3981 bytes (5948 to 1967).
Most usefully, you can do things like compile in debug message strings without taking a RAM hit for them.
Fundamentally there's not a lot in this change, it draws on the code we've had in e-o-r for a while to do unaligned reads from flash. The main difference was testing various types of operation and watching for unwanted/risky accesses that might happen when the flash caching layer was disabled.
I'm not keen to merge yet because of potential performance implications. The GNU linker doesn't seem to place .rodata constants anywhere near the code which accesses them, and based on my experiments understanding the flash caching layer this could be a significant performance hit. I'm going to keep looking into that and I'll provide some more information soon.
(That said, I haven't yet benchmarked any actual applications before and after this change, so it may be that the difference is mostly academic.)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,142,2016-05-23T05:30:09Z,2016-05-28T01:25:45Z,2016-05-28T02:43:40Z,MERGED,True,92,56,1,https://github.com/projectgus,Store .rodata in flash by default,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/142,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/142#issuecomment-222122351,"This may not be ready for merging yet, but I wanted to put it up for discussion/review anyhow.
Moves most .rodata to flash by default. http_get_mbedtls example's RAM footprint shrinks by 5317 bytes (7284 byte .rodata -> 1967 byte.) blink example shrinks by 3981 bytes (5948 to 1967).
Most usefully, you can do things like compile in debug message strings without taking a RAM hit for them.
Fundamentally there's not a lot in this change, it draws on the code we've had in e-o-r for a while to do unaligned reads from flash. The main difference was testing various types of operation and watching for unwanted/risky accesses that might happen when the flash caching layer was disabled.
I'm not keen to merge yet because of potential performance implications. The GNU linker doesn't seem to place .rodata constants anywhere near the code which accesses them, and based on my experiments understanding the flash caching layer this could be a significant performance hit. I'm going to keep looking into that and I'll provide some more information soon.
(That said, I haven't yet benchmarked any actual applications before and after this change, so it may be that the difference is mostly academic.)","I've tested this more thoroughly and done a few benchmarks and I think this is fine to merge.
EDIT: First time I ran these tests I forgot that .rodata for mbedtls.a was already in flash, because otherwise there's not enough free RAM for TLS to work.
First test was measuring how many RTOS ticks the ""handshake"" step in the http_get_mbedtls function took. From about 20 samples before/after I couldn't see any correlation, the error caused by the network was more than any performance difference.
Then this code to measure AES performance:
void user_init(void)
{
    uart_set_baud(0, 115200);
    static uint8_t data[1024];
    static uint8_t output[1024];
    static uint8_t iv[16];

    static uint8_t key[256 / 8];

    memset(data, 0, sizeof(data));
    memset(iv, 0, sizeof(iv));

    mbedtls_aes_context ctx;
    uint32_t before, after;
    RSR(before, CCOUNT)
    mbedtls_aes_init(&ctx);
    mbedtls_aes_setkey_enc(&ctx, key, 256);

    for(int r = 0; r < 10; r++) {
        mbedtls_aes_crypt_cbc(&ctx,
                              MBEDTLS_AES_ENCRYPT,
                              sizeof(data),
                              iv,
                              data,
                              output);
        memcpy(data, output, 1024);
    }
    RSR(after, CCOUNT);
    printf(""cycle count %d\n"", after - before);
    vPortExitCritical();
    while(1) {}
}

... AES is a good test because all the constant tables are stored in .rodata.
I re-ran the tests measuring the FRC2 timer as well, to make sure CCOUNT wasn't stalling during flash cache misses, The timer tick counts were similar.



Flash Mode
branch
CCOUNT delta
FRC2 delta




qio
master (mbedtls rodata in RAM)
1190655
74427


qio
master (mbedtls rodata in flash)
2800494
175041


qio
rodata_in_flash
2800808
175063


dio
master (mbedtls rodata in RAM)
1200243
75034


dio
master (mbedtls rodata in flash)
2828848
176822


dio
rodata_in_flash
2828861
176812



(WDEV.SYS_TIME also gave similar results.)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,142,2016-05-23T05:30:09Z,2016-05-28T01:25:45Z,2016-05-28T02:43:40Z,MERGED,True,92,56,1,https://github.com/projectgus,Store .rodata in flash by default,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/142,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/142#issuecomment-222124767,"This may not be ready for merging yet, but I wanted to put it up for discussion/review anyhow.
Moves most .rodata to flash by default. http_get_mbedtls example's RAM footprint shrinks by 5317 bytes (7284 byte .rodata -> 1967 byte.) blink example shrinks by 3981 bytes (5948 to 1967).
Most usefully, you can do things like compile in debug message strings without taking a RAM hit for them.
Fundamentally there's not a lot in this change, it draws on the code we've had in e-o-r for a while to do unaligned reads from flash. The main difference was testing various types of operation and watching for unwanted/risky accesses that might happen when the flash caching layer was disabled.
I'm not keen to merge yet because of potential performance implications. The GNU linker doesn't seem to place .rodata constants anywhere near the code which accesses them, and based on my experiments understanding the flash caching layer this could be a significant performance hit. I'm going to keep looking into that and I'll provide some more information soon.
(That said, I haven't yet benchmarked any actual applications before and after this change, so it may be that the difference is mostly academic.)","Remembered that the master branch already puts rodata in flash for mbedtls (otherwise TLS doesn't work), which explained why nothing significant changed. I've amended the table above with new numbers.
Seems that using RAM for AES data tables is 2.35x faster than using SPI flash, regardless of QIO or DIO flash modes. I think that's probably close to a worst-case slowdown for real world code (the AES functions use a lot of rodata constants.) Most code will see a much lower impact.
My view is that this is worth merging for the RAM it frees up, because RAM is such a scarce resource. I've recently been working on a project where we needed this change in order to have TLS as well as other features enabled concurrently.
If there was some way to modify/configure the linker so that the rodata sections stayed close in flash to the functions that used them, I'm pretty confident that the 2.35x slowdown could be brought down a lot, as well.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,142,2016-05-23T05:30:09Z,2016-05-28T01:25:45Z,2016-05-28T02:43:40Z,MERGED,True,92,56,1,https://github.com/projectgus,Store .rodata in flash by default,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/142,https://github.com/foogod,4,https://github.com/SuperHouse/esp-open-rtos/pull/142#issuecomment-222207624,"This may not be ready for merging yet, but I wanted to put it up for discussion/review anyhow.
Moves most .rodata to flash by default. http_get_mbedtls example's RAM footprint shrinks by 5317 bytes (7284 byte .rodata -> 1967 byte.) blink example shrinks by 3981 bytes (5948 to 1967).
Most usefully, you can do things like compile in debug message strings without taking a RAM hit for them.
Fundamentally there's not a lot in this change, it draws on the code we've had in e-o-r for a while to do unaligned reads from flash. The main difference was testing various types of operation and watching for unwanted/risky accesses that might happen when the flash caching layer was disabled.
I'm not keen to merge yet because of potential performance implications. The GNU linker doesn't seem to place .rodata constants anywhere near the code which accesses them, and based on my experiments understanding the flash caching layer this could be a significant performance hit. I'm going to keep looking into that and I'll provide some more information soon.
(That said, I haven't yet benchmarked any actual applications before and after this change, so it may be that the difference is mostly academic.)","If there was some way to modify/configure the linker so that the rodata sections stayed close in flash to the functions that used them, I'm pretty confident that the 2.35x slowdown could be brought down a lot, as well.

I think that's kinda a big assumption.. it would really depend a lot on the cacheline size and associativity in the flash cache, which as far as I know is still a complete black box (a while back I put a couple of ideas for ways to test/probe it on the RE wiki, but haven't had any time to try them out)..
If the cache is made up of a few large cachelines, then proximity could make a big difference.  If there's smaller cachelines with decent associativity, it would probably make little or no difference.  If the cachelines are smaller, but with low associativity, it could be a lot harder to predict (and in particularly bad cases, could completely change from one firmware to the next regardless of where we put things, just due to how the rest of the application code flow moves).
In any case, I have no problem with slowing things down a bit to make this change.. I think in general RAM availability is more critical to most people than raw execution speed.
I haven't had time to really look over the PR, but wanted to check.. do we have some way to tell the compiler/linker that a particular piece of static data should go in RAM instead?  (last I checked, the IRAM qualifier only worked for code, not data)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,142,2016-05-23T05:30:09Z,2016-05-28T01:25:45Z,2016-05-28T02:43:40Z,MERGED,True,92,56,1,https://github.com/projectgus,Store .rodata in flash by default,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/142,https://github.com/projectgus,5,https://github.com/SuperHouse/esp-open-rtos/pull/142#issuecomment-222278869,"This may not be ready for merging yet, but I wanted to put it up for discussion/review anyhow.
Moves most .rodata to flash by default. http_get_mbedtls example's RAM footprint shrinks by 5317 bytes (7284 byte .rodata -> 1967 byte.) blink example shrinks by 3981 bytes (5948 to 1967).
Most usefully, you can do things like compile in debug message strings without taking a RAM hit for them.
Fundamentally there's not a lot in this change, it draws on the code we've had in e-o-r for a while to do unaligned reads from flash. The main difference was testing various types of operation and watching for unwanted/risky accesses that might happen when the flash caching layer was disabled.
I'm not keen to merge yet because of potential performance implications. The GNU linker doesn't seem to place .rodata constants anywhere near the code which accesses them, and based on my experiments understanding the flash caching layer this could be a significant performance hit. I'm going to keep looking into that and I'll provide some more information soon.
(That said, I haven't yet benchmarked any actual applications before and after this change, so it may be that the difference is mostly academic.)","I think that's kinda a big assumption.. it would really depend a lot on the cacheline size and associativity in the flash cache, which as far as I know is still a complete black box

I didn't make it clear enough, but I've actually done some probing and I think I have a fairly good idea how the cache works now. I'm going to make a couple of checks to verify and then I'll post what I have somewhere.

In any case, I have no problem with slowing things down a bit to make this change.. I think in general RAM availability is more critical to most people than raw execution speed.

I agree.

do we have some way to tell the compiler/linker that a particular piece of static data should go in RAM instead?

I will check and add that to the PR. I'm not 100% sure we can do it for string literals as opposed to arrays/normal variables (storage modifier attributes don't apply directly to string literals), but I think ESP8266 Arduino does it somehow so I'll have a peek at how they manage it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,142,2016-05-23T05:30:09Z,2016-05-28T01:25:45Z,2016-05-28T02:43:40Z,MERGED,True,92,56,1,https://github.com/projectgus,Store .rodata in flash by default,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/142,https://github.com/projectgus,6,https://github.com/SuperHouse/esp-open-rtos/pull/142#issuecomment-222286048,"This may not be ready for merging yet, but I wanted to put it up for discussion/review anyhow.
Moves most .rodata to flash by default. http_get_mbedtls example's RAM footprint shrinks by 5317 bytes (7284 byte .rodata -> 1967 byte.) blink example shrinks by 3981 bytes (5948 to 1967).
Most usefully, you can do things like compile in debug message strings without taking a RAM hit for them.
Fundamentally there's not a lot in this change, it draws on the code we've had in e-o-r for a while to do unaligned reads from flash. The main difference was testing various types of operation and watching for unwanted/risky accesses that might happen when the flash caching layer was disabled.
I'm not keen to merge yet because of potential performance implications. The GNU linker doesn't seem to place .rodata constants anywhere near the code which accesses them, and based on my experiments understanding the flash caching layer this could be a significant performance hit. I'm going to keep looking into that and I'll provide some more information soon.
(That said, I haven't yet benchmarked any actual applications before and after this change, so it may be that the difference is mostly academic.)","Oops, accidentally merged without adding the macro - but it's there now.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,144,2016-05-28T07:42:35Z,2016-07-13T21:31:32Z,2016-07-13T21:31:32Z,CLOSED,False,292,1948,25,https://github.com/projectgus,"MQTT refactor, use submodule, fix select() bug",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/144,https://github.com/projectgus,1,https://github.com/SuperHouse/esp-open-rtos/pull/144,"Refactor MQTT client, replace select() with lower-impact LWIP features.
Changes the MQTT API a small amount, to bring it into line with upstream Paho MQTT C client.
@urx, do you have any thoughts about these changes?","Refactor MQTT client, replace select() with lower-impact LWIP features.
Changes the MQTT API a small amount, to bring it into line with upstream Paho MQTT C client.
@urx, do you have any thoughts about these changes?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,144,2016-05-28T07:42:35Z,2016-07-13T21:31:32Z,2016-07-13T21:31:32Z,CLOSED,False,292,1948,25,https://github.com/projectgus,"MQTT refactor, use submodule, fix select() bug",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/144,https://github.com/urx,2,https://github.com/SuperHouse/esp-open-rtos/pull/144#issuecomment-222453563,"Refactor MQTT client, replace select() with lower-impact LWIP features.
Changes the MQTT API a small amount, to bring it into line with upstream Paho MQTT C client.
@urx, do you have any thoughts about these changes?",@projectgus all this changes seems good for me. Code has become better than it was :),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,144,2016-05-28T07:42:35Z,2016-07-13T21:31:32Z,2016-07-13T21:31:32Z,CLOSED,False,292,1948,25,https://github.com/projectgus,"MQTT refactor, use submodule, fix select() bug",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/144,https://github.com/yesco,3,https://github.com/SuperHouse/esp-open-rtos/pull/144#issuecomment-222527645,"Refactor MQTT client, replace select() with lower-impact LWIP features.
Changes the MQTT API a small amount, to bring it into line with upstream Paho MQTT C client.
@urx, do you have any thoughts about these changes?","Should one really include changes in the file: include/ssid_config.h ?
I'm curious about using lwip instead of normal sockets, in my case I'd prefer normal sockets as the code would be the same (?) under linux. One of my reasons of using esp-open-rtos is that I prefer to have portable code that works cross platform. Helps for debugging too, in my experience.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,144,2016-05-28T07:42:35Z,2016-07-13T21:31:32Z,2016-07-13T21:31:32Z,CLOSED,False,292,1948,25,https://github.com/projectgus,"MQTT refactor, use submodule, fix select() bug",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/144,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/144#issuecomment-222540498,"Refactor MQTT client, replace select() with lower-impact LWIP features.
Changes the MQTT API a small amount, to bring it into line with upstream Paho MQTT C client.
@urx, do you have any thoughts about these changes?","Nice catch! Nope, ssid_config.h should not be included in the change.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,144,2016-05-28T07:42:35Z,2016-07-13T21:31:32Z,2016-07-13T21:31:32Z,CLOSED,False,292,1948,25,https://github.com/projectgus,"MQTT refactor, use submodule, fix select() bug",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/144,https://github.com/projectgus,5,https://github.com/SuperHouse/esp-open-rtos/pull/144#issuecomment-227972874,"Refactor MQTT client, replace select() with lower-impact LWIP features.
Changes the MQTT API a small amount, to bring it into line with upstream Paho MQTT C client.
@urx, do you have any thoughts about these changes?","Sorry for the delays, I've been on holidays for a while.

Nice catch! Nope, ssid_config.h should not be included in the change.

Yes, bit of a head/desk moment there. Fixed now.

I'm curious about using lwip instead of normal sockets, in my case I'd prefer normal sockets as the code would be the same (?) under linux. One of my reasons of using esp-open-rtos is that I prefer to have portable code that works cross platform. Helps for debugging too, in my experience.

I see where you're coming from here, it is good having the option of using the same BSD socket interface eveywhere. In the case of the Paho MQTT client, though, there is already a separate Linux implementation included in the main MQTTClient distribution - so you still get to use the same MQTTClient interface for both Linux & esp-open-rtos if you'd like, just the internals that are different. The existing esp-open-rtos BSD socket implementation wouldn't work on Linux either I don't think, without some modifications. And this LWIP-only implementation uses less RAM and yields a smaller compiled code side.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,144,2016-05-28T07:42:35Z,2016-07-13T21:31:32Z,2016-07-13T21:31:32Z,CLOSED,False,292,1948,25,https://github.com/projectgus,"MQTT refactor, use submodule, fix select() bug",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/144,https://github.com/projectgus,6,https://github.com/SuperHouse/esp-open-rtos/pull/144#issuecomment-232493082,"Refactor MQTT client, replace select() with lower-impact LWIP features.
Changes the MQTT API a small amount, to bring it into line with upstream Paho MQTT C client.
@urx, do you have any thoughts about these changes?","Since #158 this is out of date, because we needed to patch a bug in the upstream MQTTClient.c.
I'm going to close this for now, at least until that fix gets merged into the upstream repo.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,145,2016-05-31T19:12:29Z,2016-06-03T01:49:08Z,2016-06-03T05:55:31Z,MERGED,True,1,1,1,https://github.com/svenschwermer,Set correct base address for register HOST_INF_SEL,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/145,https://github.com/svenschwermer,1,https://github.com/SuperHouse/esp-open-rtos/pull/145,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,145,2016-05-31T19:12:29Z,2016-06-03T01:49:08Z,2016-06-03T05:55:31Z,MERGED,True,1,1,1,https://github.com/svenschwermer,Set correct base address for register HOST_INF_SEL,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/145,https://github.com/foogod,2,https://github.com/SuperHouse/esp-open-rtos/pull/145#issuecomment-222809525,,"I suppose this is probably a reasonable change..  Note, however, that eagle_soc.h is essentially an old ""compatibility"" header which is not really intended to be used directly by esp-open-rtos apps anyway.  The preferred way to access this register in esp-open-rtos is actually to include esp/dport_regs.h and access it as DPORT.PERI_IO (with the DPORT_PERI_IO_* bit constants, etc)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,146,2016-06-04T19:40:56Z,2016-12-28T00:16:03Z,2016-12-28T00:16:03Z,CLOSED,False,3906,1,26,https://github.com/luisbebop,Add websocket example,14,['example'],https://github.com/SuperHouse/esp-open-rtos/pull/146,https://github.com/luisbebop,1,https://github.com/SuperHouse/esp-open-rtos/pull/146,This is a small websocket client running on top of TLS 1.2 and supporting permessage-deflate extension.,This is a small websocket client running on top of TLS 1.2 and supporting permessage-deflate extension.,True,{'HOORAY': ['https://github.com/creationix']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,146,2016-06-04T19:40:56Z,2016-12-28T00:16:03Z,2016-12-28T00:16:03Z,CLOSED,False,3906,1,26,https://github.com/luisbebop,Add websocket example,14,['example'],https://github.com/SuperHouse/esp-open-rtos/pull/146,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/146#issuecomment-227971804,This is a small websocket client running on top of TLS 1.2 and supporting permessage-deflate extension.,"This looks really really neat functionality, thanks @luisbebop for contributing it! Sorry for the extended silence, I've been away on holidays and I think everyone else has been busy too.
Generally at a glance this looks great. I have a few minor comments:

As this includes on the sysparam functionality that @foogod wrote, I'd prefer to merge it after the sysparam stuff - and we might put sysparam through in a separate PR to make it easier to track what happened when. Seems like the sysparam stuff is close to being ready to merge, though.
The separate websocket functionality and the various bits of zlib-functionality might be good things to put into two separate ""components"" in extras/, so they're easier for people to reuse. What do you think?
Some of the original source files are missing Copyright/LICENSE notices. If you don't mind, our preferred licensing configuration is public domain/CC0 for examples and ""Copyright (C) 2015 xxx. Licensed under the new BSD License as described in the file LICENSE"" for other functionality.

Thanks again and sorry for the delayed reply.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,146,2016-06-04T19:40:56Z,2016-12-28T00:16:03Z,2016-12-28T00:16:03Z,CLOSED,False,3906,1,26,https://github.com/luisbebop,Add websocket example,14,['example'],https://github.com/SuperHouse/esp-open-rtos/pull/146,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/146#issuecomment-228036854,This is a small websocket client running on top of TLS 1.2 and supporting permessage-deflate extension.,Great add on @luisbebop. Regarding the sysparam I think it's ripe for a PR.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,146,2016-06-04T19:40:56Z,2016-12-28T00:16:03Z,2016-12-28T00:16:03Z,CLOSED,False,3906,1,26,https://github.com/luisbebop,Add websocket example,14,['example'],https://github.com/SuperHouse/esp-open-rtos/pull/146,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/146#issuecomment-238765027,This is a small websocket client running on top of TLS 1.2 and supporting permessage-deflate extension.,"@luisbebop, the sysparam is close to be merged. Would you have the time to review this PR?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,146,2016-06-04T19:40:56Z,2016-12-28T00:16:03Z,2016-12-28T00:16:03Z,CLOSED,False,3906,1,26,https://github.com/luisbebop,Add websocket example,14,['example'],https://github.com/SuperHouse/esp-open-rtos/pull/146,https://github.com/creationix,5,https://github.com/SuperHouse/esp-open-rtos/pull/146#issuecomment-239067023,This is a small websocket client running on top of TLS 1.2 and supporting permessage-deflate extension.,"I'm developing a robotics programming environment for kids and designing and implementing my own interpreter that runs on a microcontroller.  I've been looking for a good base and a good cheap chip for my image.  Once this open-rtos version gets native websockets I think it will be perfect!
In other words, I'm excited.  When this is ready to merge, I'll happily test it on any of my various esp8266 hardware boards, I've collected several variants in my research.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,146,2016-06-04T19:40:56Z,2016-12-28T00:16:03Z,2016-12-28T00:16:03Z,CLOSED,False,3906,1,26,https://github.com/luisbebop,Add websocket example,14,['example'],https://github.com/SuperHouse/esp-open-rtos/pull/146,https://github.com/hugows,6,https://github.com/SuperHouse/esp-open-rtos/pull/146#issuecomment-268229601,This is a small websocket client running on top of TLS 1.2 and supporting permessage-deflate extension.,"Hi @luisbebop , any updates on this?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,146,2016-06-04T19:40:56Z,2016-12-28T00:16:03Z,2016-12-28T00:16:03Z,CLOSED,False,3906,1,26,https://github.com/luisbebop,Add websocket example,14,['example'],https://github.com/SuperHouse/esp-open-rtos/pull/146,https://github.com/luisbebop,7,https://github.com/SuperHouse/esp-open-rtos/pull/146#issuecomment-269401711,This is a small websocket client running on top of TLS 1.2 and supporting permessage-deflate extension.,"Hi @hugows
Unfortunately didn't have time to keep changing and supporting the project.
Feel free to fork my changes and update on the branch master.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,None,1,https://github.com/SuperHouse/esp-open-rtos/pull/148,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,None,2,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-228597592,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","Thank you for the feedback. Changed the semaphore to be static.
I have since tried other ways to improve this code and think more could be done, but this PR fixes some significant issues. Fwiw I found the RTC and/or the calibrations to be rather unstable and gave up on using sntp for obtaining times for a data logging application and will log the rtc count and the calibration and have the time estimated when analysing the data.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,None,3,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-228599102,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","Just add a bit more. I also tried to use the sntp times to estimate the calibration, and only using the internal calibration to reset this if the time step was large. The corrections to the calibration were filtered and it did converge to give a lot better time than just using the internal calibration. However, it still received impulse errors larger than a second and then took time to settle. When there was a network outage it drifted significantly - the error had typically not settled so it had little chance.
I guess it needed to also take into account the jitter etc. Also resetting the time with each sntp response causes jumps in the time, and these can be backwards, so I think that is the wrong approach. When the time difference is within a small bounds it should probably just be making small periodic adjustments to avoid jumps and to avoid going backwards. Surely there is a lot of state-of-the-art NTP code that could be followed.
For my application at hand it seemed to be less demanding on the node to just log the times when the node interacts with the server etc, and it might even have GPS events logged with a time etc in some deployments. A smooth time line might then be fitted to the events during analysis.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,https://github.com/projectgus,4,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-229578053,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","Thanks for this fix and the comments. I think the suggestions you make sound sensible, although I agree that for a lot of purposes this is good enough.
I'm keen to merge this, but I just want to check first if @doragasu - who contributed the original SNTP implementation - has any comments.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,https://github.com/doragasu,5,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-229598733,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","I had a quick look and it looks good, thanks for the work! I already knew that synchronizing access to time keeping structures was needed, but wasn't brave enought to try because I don't know newlib internals, and I thought that it provided a built-in synchronization mechanism (instead of having to use semaphores). But after reading your patch, I suppose that's not the case.
Other than that, I'd like to throw a comment. Inside sntp_update_rtc() you are reading the timer value after xSemaphoreTake(). I think the order should be reversed, so the instant you read the timer is as close as possible to the instant the SNTP server sends you the updated time. Have in mind that as the semaphore might block, reading the timer after taking the semaphore might introduce very big differences.
If I get some time I'll try reviewing the code more in-depth and testing it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,None,6,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-229679095,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","Thank you for the feedback. @doragasu the mutex protects the state that handles the counter wrapping too, so if the RTC counter were read before taking the mutex then another task might win a race to update the tim_ref in sntp_get_rtc_time() in which case the time difference in sntp_update_rtc would be negative which is not handled there. It might need some more design work.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,https://github.com/doragasu,7,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-229874228,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","@Iosen I understand, thanks for explaining. If I read the timer inside sntp_update_rtc(), then after I enter the critical section, the timer wraps and sntp_get_rtc_time() gets executed, tim_ref will be updated and when finally sntp_update_rtc() enters the critical section, things will go nuts.
OK, having that cleared, I have absolutely no problem with the changes, they look good to me.
BTW, when I did some tests of the implementation accuracy, I saw that it is heavily dependent on the network you use. When I did tests at my worplace, I got much lower correction values each time SNTP was updated that when I did the same tests at home (my home network is slower and has greater ping). As SNTP does not take RTT into account, I suppose this is expected.
I don't think it makes too much sense trying to improve this implementation accuracy: if you want better accuracy maybe the correct thing would be implementing a full blown NTP client.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,None,8,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-229969973,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.",@doragasu See #157 for an alternative design which seems to be more stable. The results of sdk_system_rtc_clock_cali_proc() seem so noisy here that it is not great for calibration.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,https://github.com/funnydog,9,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-286829619,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","About the accuracy of the algorithm, I was looking at the relevant RFC4330 and in section 5 there is a simple algorithm that compensates for the round trip time of the packets.
I've hacked together a proof of concept and it seems to work well here: I converted every timestamp to int64_t and changed sntp_update_rtc() to take an int64_t offset instead.
However I deeply changed also the source of sntp.c because it's a mess of #ifdefs and I wanted to understand the code before doing anything, so I'm afraid the changes I made are not directly appliable.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,https://github.com/funnydog,10,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-286903521,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","After a lot of experiments this is how it converges with an update interval of 15 sec (Delay and Offset are in usecs):
Delay: 33945, Offset: 2041547930, Cali: 25804
Delay: 33737, Offset: 13475, Cali: 25827
Delay: 36122, Offset: 9730, Cali: 25843
Delay: 14981, Offset: 186, Cali: 25843
Delay: 17382, Offset: 5573, Cali: 25852
Delay: 15722, Offset: 3952, Cali: 25858
Delay: 15534, Offset: 167, Cali: 25858
Delay: 15403, Offset: 6756, Cali: 25869
Delay: 15337, Offset: 1585, Cali: 25871
Delay: 16062, Offset: -417, Cali: 25871

While the offsets become very small it seems to me that the embedded RTC is quite unstable. The calibration value keeps increasing and still cannot compensate the offsets; and then suddenly the same calibration value is too big.
With longer update intervals the situation gets worse.
Besides my code updates the RTC.SCRATCH[0..1] locations directly so the clock is not monotonic. I tried to adjust gradually but with those fluctuations it doesn't really work.
For the record this is how the sntp_update_rtc() function looks right now:
void sntp_update_rtc(int64_t offset)
{
	static uint32_t last_cal_tim = 0;

	xSemaphoreTake(sntp_sem, portMAX_DELAY);
	uint32_t tim = RTC.COUNTER;
	uint32_t diff = tim - tim_ref;
	tim_ref = tim;

	uint64_t diff_us = ((uint64_t)diff * sntp_cali) >> 12;
	sntp_base = sntp_base + diff_us + offset;
	if (-100000 < offset && offset <= 100000) {
		sntp_cali += offset * 4096 / (tim - last_cal_tim);
	}
	last_cal_tim = tim;

	xSemaphoreGive(sntp_sem);
}",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,148,2016-06-20T11:16:23Z,,2020-02-27T07:07:49Z,OPEN,False,68,65,2,None,sntp: fix the handling of the rtc counter wrapping,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/148,https://github.com/Rutger798,11,https://github.com/SuperHouse/esp-open-rtos/pull/148#issuecomment-591817248,"This reworks the accounting of the time to address the wrapping of the
rtc counter. It currently assumes that the time is accessed more
frequently than the counter would wrap. It also adds a semaphore to
synchronize access to the time storage.","I see there is a fix for the race conditions in the sntp_fun, but nobody merged them?
is the SuperHouse/esp-open-rtos EndOfLife or could you please merge this?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,149,2016-06-21T13:17:42Z,2016-06-28T07:10:01Z,2016-06-28T07:10:05Z,MERGED,True,2,0,1,None,sntp: free the pbuf after sending the request,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/149,None,1,https://github.com/SuperHouse/esp-open-rtos/pull/149,Fixes a memory leak.,Fixes a memory leak.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,149,2016-06-21T13:17:42Z,2016-06-28T07:10:01Z,2016-06-28T07:10:05Z,MERGED,True,2,0,1,None,sntp: free the pbuf after sending the request,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/149,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/149#issuecomment-227535725,Fixes a memory leak.,"Nice catch, thanks!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,149,2016-06-21T13:17:42Z,2016-06-28T07:10:01Z,2016-06-28T07:10:05Z,MERGED,True,2,0,1,None,sntp: free the pbuf after sending the request,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/149,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/149#issuecomment-228593544,Fixes a memory leak.,"This looks like a good fix, thanks for contributing it. I think we could bypass the check of bpuf->ref - the pbuf is allocated inside the function so it should always have ref count 1. What do you think?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,149,2016-06-21T13:17:42Z,2016-06-28T07:10:01Z,2016-06-28T07:10:05Z,MERGED,True,2,0,1,None,sntp: free the pbuf after sending the request,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/149,None,4,https://github.com/SuperHouse/esp-open-rtos/pull/149#issuecomment-228597089,Fixes a memory leak.,Thanks for the feedback. Removed the 'bpuf->ref'.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,149,2016-06-21T13:17:42Z,2016-06-28T07:10:01Z,2016-06-28T07:10:05Z,MERGED,True,2,0,1,None,sntp: free the pbuf after sending the request,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/149,https://github.com/projectgus,5,https://github.com/SuperHouse/esp-open-rtos/pull/149#issuecomment-228969347,Fixes a memory leak.,Thanks!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,150,2016-06-21T18:44:20Z,2016-06-23T07:23:24Z,2016-06-23T07:23:24Z,MERGED,True,1,0,1,https://github.com/kanflo,Call DisconnectNetwork(...) before MQTT reconnect,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/150,https://github.com/kanflo,1,https://github.com/SuperHouse/esp-open-rtos/pull/150,I noticed I could not reconnect to my RasPi MQTT server following a disconnect. Adding DisconnectNetwork(...) did the trick.,I noticed I could not reconnect to my RasPi MQTT server following a disconnect. Adding DisconnectNetwork(...) did the trick.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,150,2016-06-21T18:44:20Z,2016-06-23T07:23:24Z,2016-06-23T07:23:24Z,MERGED,True,1,0,1,https://github.com/kanflo,Call DisconnectNetwork(...) before MQTT reconnect,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/150,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/150#issuecomment-227970496,I noticed I could not reconnect to my RasPi MQTT server following a disconnect. Adding DisconnectNetwork(...) did the trick.,"Looks good to me, thanks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,154,2016-06-30T06:12:53Z,2016-07-13T21:29:28Z,2016-07-13T22:32:31Z,MERGED,True,1566,78,38,https://github.com/projectgus,"First open_esplibs batch, libmain (most of libmain open sourced)",9,[],https://github.com/SuperHouse/esp-open-rtos/pull/154,https://github.com/projectgus,1,https://github.com/SuperHouse/esp-open-rtos/pull/154,"@foogod has done great work with this and I think now is a good time to merge it. I originally wanted to get automated tests running firsts, but that's been too long coming (my fault) and there are issues (#147, possibly #80) that it covers.
I've tested many of the more complex examples (http_get_mbedtls, ota_basic, mqtt-client) with this and they all seem fine. There may be more subtle bugs introduced, but I think the only way to find them will be if people start using these changes.
@foogod has made an excellent set of compile-time selection switches, so if there are bugs they should be easy to isolate.","@foogod has done great work with this and I think now is a good time to merge it. I originally wanted to get automated tests running firsts, but that's been too long coming (my fault) and there are issues (#147, possibly #80) that it covers.
I've tested many of the more complex examples (http_get_mbedtls, ota_basic, mqtt-client) with this and they all seem fine. There may be more subtle bugs introduced, but I think the only way to find them will be if people start using these changes.
@foogod has made an excellent set of compile-time selection switches, so if there are bugs they should be easy to isolate.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,154,2016-06-30T06:12:53Z,2016-07-13T21:29:28Z,2016-07-13T22:32:31Z,MERGED,True,1566,78,38,https://github.com/projectgus,"First open_esplibs batch, libmain (most of libmain open sourced)",9,[],https://github.com/SuperHouse/esp-open-rtos/pull/154,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/154#issuecomment-229572451,"@foogod has done great work with this and I think now is a good time to merge it. I originally wanted to get automated tests running firsts, but that's been too long coming (my fault) and there are issues (#147, possibly #80) that it covers.
I've tested many of the more complex examples (http_get_mbedtls, ota_basic, mqtt-client) with this and they all seem fine. There may be more subtle bugs introduced, but I think the only way to find them will be if people start using these changes.
@foogod has made an excellent set of compile-time selection switches, so if there are bugs they should be easy to isolate.","Hmm, I've done something wrong with the merge here - it's pulled in a bunch of double commits ie 3688641 vs b0844b0.
@foogod, if I rebase this whole branch against current master then will that make things hard for you in any way?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,154,2016-06-30T06:12:53Z,2016-07-13T21:29:28Z,2016-07-13T22:32:31Z,MERGED,True,1566,78,38,https://github.com/projectgus,"First open_esplibs batch, libmain (most of libmain open sourced)",9,[],https://github.com/SuperHouse/esp-open-rtos/pull/154,https://github.com/foogod,3,https://github.com/SuperHouse/esp-open-rtos/pull/154#issuecomment-230643187,"@foogod has done great work with this and I think now is a good time to merge it. I originally wanted to get automated tests running firsts, but that's been too long coming (my fault) and there are issues (#147, possibly #80) that it covers.
I've tested many of the more complex examples (http_get_mbedtls, ota_basic, mqtt-client) with this and they all seem fine. There may be more subtle bugs introduced, but I think the only way to find them will be if people start using these changes.
@foogod has made an excellent set of compile-time selection switches, so if there are bugs they should be easy to isolate.","Feel free to rebase the branch (I don't think it'll screw up anything for me at this point, but if it does, I can deal with it :) )",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,154,2016-06-30T06:12:53Z,2016-07-13T21:29:28Z,2016-07-13T22:32:31Z,MERGED,True,1566,78,38,https://github.com/projectgus,"First open_esplibs batch, libmain (most of libmain open sourced)",9,[],https://github.com/SuperHouse/esp-open-rtos/pull/154,https://github.com/projectgus,4,https://github.com/SuperHouse/esp-open-rtos/pull/154#issuecomment-230756361,"@foogod has done great work with this and I think now is a good time to merge it. I originally wanted to get automated tests running firsts, but that's been too long coming (my fault) and there are issues (#147, possibly #80) that it covers.
I've tested many of the more complex examples (http_get_mbedtls, ota_basic, mqtt-client) with this and they all seem fine. There may be more subtle bugs introduced, but I think the only way to find them will be if people start using these changes.
@foogod has made an excellent set of compile-time selection switches, so if there are bugs they should be easy to isolate.","Thanks, rebased. This looks ready to merge to me.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,155,2016-06-30T06:57:18Z,2016-07-06T07:18:45Z,2016-07-06T07:18:45Z,MERGED,True,3,0,1,https://github.com/projectgus,Seed libc PRNG from hardware RNG on reset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/155,https://github.com/projectgus,1,https://github.com/SuperHouse/esp-open-rtos/pull/155,"This should have been done ages ago as part of #3, it's my fault I overlooked it. Without this PR, rand() produces a very predictable series of numbers after reset.
The only place I know that it's used by default is for the WPA Key Nonce, which is currently identical following each reset. This does not have any bearing on TLS - mbedTLS uses its own entropy engine, which is tied directly to the hardware random number generator.
A better long term fix would be to make srand() a no-op and have rand() return hwrand() each time its called, but newlib doesn't provide an easy mechanism (that I can see, anyhow) to replace rand(). So sticking with this for now.
If you're relying on rand() heavily in your own code, suggest having a task regularly call srand(hwrand() ^ rand()); in order to mix it up a bit - or just use hwrand().
I was going to push this fix directly as it's minor, but I thought it best to make some noise about it and also get some review if possible - does anyone have other thoughts/comments/suggestions about how we're managing entropy?","This should have been done ages ago as part of #3, it's my fault I overlooked it. Without this PR, rand() produces a very predictable series of numbers after reset.
The only place I know that it's used by default is for the WPA Key Nonce, which is currently identical following each reset. This does not have any bearing on TLS - mbedTLS uses its own entropy engine, which is tied directly to the hardware random number generator.
A better long term fix would be to make srand() a no-op and have rand() return hwrand() each time its called, but newlib doesn't provide an easy mechanism (that I can see, anyhow) to replace rand(). So sticking with this for now.
If you're relying on rand() heavily in your own code, suggest having a task regularly call srand(hwrand() ^ rand()); in order to mix it up a bit - or just use hwrand().
I was going to push this fix directly as it's minor, but I thought it best to make some noise about it and also get some review if possible - does anyone have other thoughts/comments/suggestions about how we're managing entropy?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,155,2016-06-30T06:57:18Z,2016-07-06T07:18:45Z,2016-07-06T07:18:45Z,MERGED,True,3,0,1,https://github.com/projectgus,Seed libc PRNG from hardware RNG on reset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/155,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/155#issuecomment-230696907,"This should have been done ages ago as part of #3, it's my fault I overlooked it. Without this PR, rand() produces a very predictable series of numbers after reset.
The only place I know that it's used by default is for the WPA Key Nonce, which is currently identical following each reset. This does not have any bearing on TLS - mbedTLS uses its own entropy engine, which is tied directly to the hardware random number generator.
A better long term fix would be to make srand() a no-op and have rand() return hwrand() each time its called, but newlib doesn't provide an easy mechanism (that I can see, anyhow) to replace rand(). So sticking with this for now.
If you're relying on rand() heavily in your own code, suggest having a task regularly call srand(hwrand() ^ rand()); in order to mix it up a bit - or just use hwrand().
I was going to push this fix directly as it's minor, but I thought it best to make some noise about it and also get some review if possible - does anyone have other thoughts/comments/suggestions about how we're managing entropy?",Going to go ahead and merge this one.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,157,2016-07-01T14:47:44Z,,2016-11-29T15:26:05Z,OPEN,False,131,77,3,None,sntp: calibrate to the ntp times rather than the system function.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/157,None,1,https://github.com/SuperHouse/esp-open-rtos/pull/157,"WIP, not for merge yet.
The system sdk_system_rtc_clock_cali_proc() is rather noisy, so this patch calibrates the RTC count to the NTP time responses.
An average of many calls to sdk_system_rtc_clock_cali_proc() is used for initialization.
The system calibration value is used to limit the calibration value computed via the ntp times, to 1/16 either way.
A 64 bit RTC counter is implemented, and used in the calculations, but might be of some use on its own.
The ratio of the ntp time differences and the RTC count differences is filtered a little to keep the changes relatively stable and to filter the jitter.","WIP, not for merge yet.
The system sdk_system_rtc_clock_cali_proc() is rather noisy, so this patch calibrates the RTC count to the NTP time responses.
An average of many calls to sdk_system_rtc_clock_cali_proc() is used for initialization.
The system calibration value is used to limit the calibration value computed via the ntp times, to 1/16 either way.
A 64 bit RTC counter is implemented, and used in the calculations, but might be of some use on its own.
The ratio of the ntp time differences and the RTC count differences is filtered a little to keep the changes relatively stable and to filter the jitter.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,158,2016-07-05T13:49:38Z,2016-07-13T21:30:35Z,2019-09-26T09:33:26Z,MERGED,True,21,13,2,https://github.com/baoshi,Handling MQTT read failure and send buffer length,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/158,https://github.com/baoshi,1,https://github.com/SuperHouse/esp-open-rtos/pull/158,"Try resolve issue #152
When a MQTT packet is being received but the packet length is larger than allocated buffer or reading timeout occurs, ignore that packet and reinitialize broker connection.
Caller have to pay attention to buffer size and timeout value in NewMQTTClient call. But at least ESP will not crash if timeout or receiving buffer overflow.
Also modified sending buffer length calculation bug.
I still don't like the way how Paho handles error. Seeking improvement in the future.","Try resolve issue #152
When a MQTT packet is being received but the packet length is larger than allocated buffer or reading timeout occurs, ignore that packet and reinitialize broker connection.
Caller have to pay attention to buffer size and timeout value in NewMQTTClient call. But at least ESP will not crash if timeout or receiving buffer overflow.
Also modified sending buffer length calculation bug.
I still don't like the way how Paho handles error. Seeking improvement in the future.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,158,2016-07-05T13:49:38Z,2016-07-13T21:30:35Z,2019-09-26T09:33:26Z,MERGED,True,21,13,2,https://github.com/baoshi,Handling MQTT read failure and send buffer length,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/158,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/158#issuecomment-230916991,"Try resolve issue #152
When a MQTT packet is being received but the packet length is larger than allocated buffer or reading timeout occurs, ignore that packet and reinitialize broker connection.
Caller have to pay attention to buffer size and timeout value in NewMQTTClient call. But at least ESP will not crash if timeout or receiving buffer overflow.
Also modified sending buffer length calculation bug.
I still don't like the way how Paho handles error. Seeking improvement in the future.","HI @baoshi,
Thanks for submitting this, and for generally getting involved in our project. Really appreciate having you here. :)
I'm keen to merge this. As it's a bug in the upstream library, have you considered also sending a patch to the paho-dev mailing list? They'd probably appreciate the fix, the embedded C Paho library doesn't seem to be seeing much love at the moment. https://dev.eclipse.org/mailman/listinfo/paho-dev
Eventually I'd like to refactor the ""upstream"" source files from the MQTT client into a git submodule, to track the upstream source - as per #144. But it looks like that won't be happening for a while, at least until this fix is merged upstream. No big deal, though.
Angus",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,158,2016-07-05T13:49:38Z,2016-07-13T21:30:35Z,2019-09-26T09:33:26Z,MERGED,True,21,13,2,https://github.com/baoshi,Handling MQTT read failure and send buffer length,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/158,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/158#issuecomment-231606445,"Try resolve issue #152
When a MQTT packet is being received but the packet length is larger than allocated buffer or reading timeout occurs, ignore that packet and reinitialize broker connection.
Caller have to pay attention to buffer size and timeout value in NewMQTTClient call. But at least ESP will not crash if timeout or receiving buffer overflow.
Also modified sending buffer length calculation bug.
I still don't like the way how Paho handles error. Seeking improvement in the future.",Nice catch @baoshi! I am all in for merging this one.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,159,2016-07-06T18:14:10Z,2016-07-10T06:07:44Z,2016-07-10T06:07:44Z,MERGED,True,183,107,3,https://github.com/sheinz,DHT11/DHT22 sensor library fixed.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/159,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/159,"Fixed DHT library.
Tested with DHT11 and DHT22 modules.","Fixed DHT library.
Tested with DHT11 and DHT22 modules.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,159,2016-07-06T18:14:10Z,2016-07-10T06:07:44Z,2016-07-10T06:07:44Z,MERGED,True,183,107,3,https://github.com/sheinz,DHT11/DHT22 sensor library fixed.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/159,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/159#issuecomment-230915066,"Fixed DHT library.
Tested with DHT11 and DHT22 modules.","Thanks @sheinz, this looks really good.
@jsuiker sent the original DHT implementation - do you have any comments on this?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,159,2016-07-06T18:14:10Z,2016-07-10T06:07:44Z,2016-07-10T06:07:44Z,MERGED,True,183,107,3,https://github.com/sheinz,DHT11/DHT22 sensor library fixed.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/159,https://github.com/jsuiker,3,https://github.com/SuperHouse/esp-open-rtos/pull/159#issuecomment-230947284,"Fixed DHT library.
Tested with DHT11 and DHT22 modules.","If it works, it's good in my book :)  I'm glad someone got a chance to test both units and make some improvements...",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,160,2016-07-08T10:05:12Z,2016-07-18T22:22:14Z,2016-07-19T11:22:41Z,MERGED,True,615,0,6,https://github.com/sheinz,BMP280 pressure sensor driver and example.,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/160,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/160,"BMP280 is a successor of BMP180 pressure sensor. But it has different communication protocol. It has different registers and different operation modes.
At first I thought about extending existing BMP180 driver but there would have been two many preprocessor conditions or run-time branching.
So, here's my implementation of BMP280 driver.
I tested it with my BMP280 module. The output data is the same as with ArduinoUNO + BMP280.","BMP280 is a successor of BMP180 pressure sensor. But it has different communication protocol. It has different registers and different operation modes.
At first I thought about extending existing BMP180 driver but there would have been two many preprocessor conditions or run-time branching.
So, here's my implementation of BMP280 driver.
I tested it with my BMP280 module. The output data is the same as with ArduinoUNO + BMP280.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,160,2016-07-08T10:05:12Z,2016-07-18T22:22:14Z,2016-07-19T11:22:41Z,MERGED,True,615,0,6,https://github.com/sheinz,BMP280 pressure sensor driver and example.,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/160,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/160#issuecomment-231572774,"BMP280 is a successor of BMP180 pressure sensor. But it has different communication protocol. It has different registers and different operation modes.
At first I thought about extending existing BMP180 driver but there would have been two many preprocessor conditions or run-time branching.
So, here's my implementation of BMP280 driver.
I tested it with my BMP280 module. The output data is the same as with ArduinoUNO + BMP280.","Thanks for this, looks very good to me.
Does anyone have any other review comments?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,160,2016-07-08T10:05:12Z,2016-07-18T22:22:14Z,2016-07-19T11:22:41Z,MERGED,True,615,0,6,https://github.com/sheinz,BMP280 pressure sensor driver and example.,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/160,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/160#issuecomment-233446756,"BMP280 is a successor of BMP180 pressure sensor. But it has different communication protocol. It has different registers and different operation modes.
At first I thought about extending existing BMP180 driver but there would have been two many preprocessor conditions or run-time branching.
So, here's my implementation of BMP280 driver.
I tested it with my BMP280 module. The output data is the same as with ArduinoUNO + BMP280.",I think this one is good for merging Thanks @sheinz!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,160,2016-07-08T10:05:12Z,2016-07-18T22:22:14Z,2016-07-19T11:22:41Z,MERGED,True,615,0,6,https://github.com/sheinz,BMP280 pressure sensor driver and example.,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/160,https://github.com/projectgus,4,https://github.com/SuperHouse/esp-open-rtos/pull/160#issuecomment-233477297,"BMP280 is a successor of BMP180 pressure sensor. But it has different communication protocol. It has different registers and different operation modes.
At first I thought about extending existing BMP180 driver but there would have been two many preprocessor conditions or run-time branching.
So, here's my implementation of BMP280 driver.
I tested it with my BMP280 module. The output data is the same as with ArduinoUNO + BMP280.","Merged. @sheinz if you have time could you please confirm that the BMP280 example works as expected with the current master? (there's been changes to the i2c driver & the esp-open-rtos core since the PR went up. The merge is clean and the example builds, but I don't have a sensor to test with.)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,160,2016-07-08T10:05:12Z,2016-07-18T22:22:14Z,2016-07-19T11:22:41Z,MERGED,True,615,0,6,https://github.com/sheinz,BMP280 pressure sensor driver and example.,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/160,https://github.com/sheinz,5,https://github.com/SuperHouse/esp-open-rtos/pull/160#issuecomment-233603731,"BMP280 is a successor of BMP180 pressure sensor. But it has different communication protocol. It has different registers and different operation modes.
At first I thought about extending existing BMP180 driver but there would have been two many preprocessor conditions or run-time branching.
So, here's my implementation of BMP280 driver.
I tested it with my BMP280 module. The output data is the same as with ArduinoUNO + BMP280.",I've just verified. My bmp280 module works with esp-open-rtos master head.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/163,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-233450461,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","I am glad we're finally getting this ""must have"" into EOR. My merge finger is itching on the trigger, do you have any comments @projectgus?
One thing that could be discussed later but I still want to bring up now is how the location of the FS is stored. I think we might find we need something like a partition table or storing start and size of SPIFFS, @foogod's param area and so on.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-233572540,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Just a quick update.
I've refactored SPI flash access. It doesn't use SDK/open_esplib access to flash. It uses SPI registers directly to perform read/write/erase operations. This eliminated unnecessary addresses/buffers/sizes alignment. The only alignment that was really needed is for writing into 32 bits registers SPI(0).W
There're currently two issues.

SPI(x).W[16]  are data registers for SPI operation. Each data registers is 32 bit long. So, the total 16x4 = 64 bytes memory blocks can be read/written from/to SPI at a time. The bootrom code uses only 32 bytes blocks for read/write SPI flash memory. Why?
I tried to use larger blocks for SPI flash read/write with the following results. The write operations with blocks up to 64 bytes works perfectly. The read operations works for blocks up to 63 bytes. For 64 bytes blocks read operation hangs.

I created an isolated test to check this issue spi-flash-test.
Also asked on Espressif forum.

No file system speed improvement after switching to low lever SPI flash access. The slowest part of file system operation is the actual flash read/write so the time on processing data is negligible comparing to flash read/write.
But what I don't understand it seems like file system speed has degraded after refactoring :(
No idea why... Still figuring out...
SPI flash access is not completely clear to me.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-234271863,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","I finally managed to reach the desired speed performance.
The problem was with accessing memory with 8 bits load/store operations. They seem to slow everything quite a bit.
I had to write a couple of functions in assembler to perform optimal read/write from/to unaligned memory buffer.
The speed increase is not that great. But in my opinion the clear open source flash access is much more valuable.
Speed test results
Flash access via SDK + bootrom:
Read speed: 718229 bytes/s
Write speed: 12293 bytes/s

Read speed: 707842 bytes/s
Write speed: 11875 bytes/s

Read speed: 720278 bytes/s 
Write speed: 12356 bytes/s

Flash access using own implementation:
Read speed: 749858 bytes/s
Write speed: 12759 bytes/s

Read speed: 747860 bytes/s
Write speed: 12650 bytes/s

Read speed: 742006 bytes/s
Write speed: 12490 bytes/s

The problem with 64 bytes chunks read remains. Current implementation uses 64 bytes blocks for write and 60 bytes blocks for read.
My implementation here is finished. Please review/comment.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/sheinz,5,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-234564535,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Thanks @pellepl for the review. Updated the PR. Nobody knows spiffs better than the author, so it's supper awesome to have such a reviewer :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/projectgus,6,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-235272028,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Hi @sheinz ,
Thanks so much for this, it looks really impressive! Very nicely integrated into the build system, and being able to do unaligned flash access is a huge boon.
Thanks also @pellepl for reviewing! And @kanflo for some good suggestions to look at down the line.
I had a quick look through the code, and a quick test on my nodemcu board here, and everything looks good to me. Once you're done with any remaining discussions/considerations then I'm happy to merge.
One minor thing I noticed is that my go-to target 'make test' didn't build the spiffs. Neither does 'make flash', because these don't depend on 'all'. This would be an easy thing to fix in common.mk (looks like 'all' has too many dependencies as well!), but maybe it's better this way if it avoids unnecessarily regenerating the file?

I had to write a couple of functions in assembler to perform optimal read/write from/to unaligned memory buffer.

Nice. I'm impressed these are so much faster than newlib's memcpy. I even went to look if flash caching might be the reason, but your implementation is in IROM and newlib's is in IRAM! So not that. Perhaps we should swap your function (or an extended version) in place of the current memcpy?

Unfortunately newlib is configured the way that O_DIRECT is not available in esp-open-rtos.

FWIW, if you'd like to reconfigure/recompile newlib then this is possible. There's a wiki page that explains how it's set up: https://github.com/SuperHouse/esp-open-rtos/wiki/libc-configuration
Depends on what you think about the possible benefits, I guess.
Cheers,
Angus",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-235395518,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Hi Angus,

One minor thing I noticed is that my go-to target 'make test' didn't build the spiffs. Neither does 'make flash', because these don't depend on 'all'. This would be an easy thing to fix in common.mk (looks like 'all' has too many dependencies as well!), but maybe it's better this way if it avoids unnecessarily regenerating the file?

Fixed spiffs image build in 'make test' and 'make flash'.

Nice. I'm impressed these are so much faster than newlib's memcpy. I even went to look if flash caching might be the reason, but your implementation is in IROM and newlib's is in IRAM! So not that. Perhaps we should swap your function (or an extended version) in place of the current memcpy?

My implementation of unaligned memcpy is in IRAM .section .iram1.text, ""x""
newlib's memcpy might be slow if it uses byte length load/store operations. I don't know why but they seem slow. My experiments also show that memcpy from the bootrom is pretty fast. There's also xthal_memcpy version from lx106-hal which handles unaligned source and destination and pretty fast as well. It is also available in the bootrom.
Adding support of O_DIRECT might be a topic for a new PR.
Thanks for the review.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/projectgus,8,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-235458289,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Nice!

My implementation of unaligned memcpy is in IRAM .section .iram1.text, ""x""

Derp. I must have been pretty tired when I was looking at this last night!

newlib's memcpy might be slow if it uses byte length load/store operations. I don't know why but they seem slow.

It does, at least up until the first 4 byte aligned address: https://github.com/projectgus/newlib-xtensa/blob/xtensa-2_2_0-lock/newlib/libc/machine/xtensa/memcpy.S
This will be very slow reading from instruction space because ESP8266 doesn't support unaligned loads there, so there's a routine in core/exception_vectors.S which catches what would otherwise be a fatal CPU exception and completes it via an aligned load (with the associated performance hit).
If it's slow when reading from data RAM then that's less expected, but I guess it's not totally surprising.
I'll open another issue to track the idea of swapping in a faster memcpy implementation.
Rest of this looks good to me. Time to merge?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/pellepl,9,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-235488394,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","@sheinz, sorry for being late about this, but it seems performance would be a wee bit better having 8kB logical blocksize and 256 byte page size.
In fact, instead of hard coding these settings they could perhaps be defaulted and modifiable from local.mk if wanted?
These are all suggestions, from my point of view it could very well be merged. Great work, @sheinz!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/kanflo,10,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-235489958,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Lovely work @sheinz, please go ahead and merge @projectgus.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/sheinz,11,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-235514709,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","it seems performance would be a wee bit better having 8kB logical blocksize and 256 byte page size.

Indeed the performance slightly increases with 8kB logical block size. I have changed it to 8kB.

In fact, instead of hard coding these settings they could perhaps be defaulted and modifiable from local.mk if wanted?

It is a good idea. It might be a separate PR as the build process is getting a little bit tricky. Both firmware and mkspiffs use those configurations. And mkspiffs must be rebuilt if any configuration is changed.
I've found a standalone utility with the same name (what a coincidence) mkspiffs . I might have not written my own if I found it earlier. But the problem is that igrr's mkspiffs uses older version of spiffs and uses dynamic configuration whereas   firmware is configured to use spiffs as a singleton. I'm not sure if the image produced with spiffs dynamically configured would be compatible with spiffs as a singleton.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/pellepl,12,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-235516453,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Ah, I thought you've got inspired from @igrr when you wrote it. :) If you want to use @igrr's version you can go ahead - the singleton config is only a runtime thing and do not affect the structure of the actual file system. On the other hand, what you have now works fine - the mkspiffs part (any of them) are neither big or very complex, so I'd say go for a merge now.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/alainmaes,13,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-235765116,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","@sheinz, As rboot is integrated in esp-open-rtos it would be nice to have 2 spiffs partitions next to the 2 rom partitions. That would allow to safely install a new filesystem together with the new rom. Basically it would come down to adding an optional parameter to the mount function to select the base address based on the rom that is loaded. Would that be possible?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/pellepl,14,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-236005623,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Unfortunately newlib is configured the way that O_DIRECT is not available in esp-open-rtos.
FWIW, if you'd like to reconfigure/recompile newlib then this is possible. There's a wiki page that explains how it's set up: https://github.com/SuperHouse/esp-open-rtos/wiki/libc-configuration

Depends on what you think about the possible benefits, I guess.

From spiffs point of view using O_DIRECT would be a very special case. Not something one would normally do on a spi flash as may it mess with wear. I'd gather the work is a lot deal greater than the benefits of it. Also, this feature can be reached by using the spiffs api directly. As the fd offsets now are handled by spiffs itself, a posix fd equals a spiffs fd, meaning it is pretty seamless.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/sheinz,15,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-236100929,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","As rboot is integrated in esp-open-rtos it would be nice to have 2 spiffs partitions next to the 2 rom partitions. That would allow to safely install a new filesystem together with the new rom. Basically it would come down to adding an optional parameter to the mount function to select the base address based on the rom that is loaded. Would that be possible?

Currently spiffs is configured as a singleton and spiffs base address with size are compile time defined. I didn't think more than one instance of spiffs might be needed at that time. As it turned out I was wrong :) Nevertheless I would leave this PR as it is and suggest dynamic spiffs configuration for another PR.
You can still use single spiff partition with both roms unless your applications require different set of spiffs files.
@pellepl What do you think, should we switch to dynamic spiffs configuration by default? Or, maybe, provide compile time option to select how spiffs should be configured?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/kanflo,16,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-236140762,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!",I would prefer dynamic base address and size but with a compile time option we could cater for both flavors.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/pellepl,17,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-236155341,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","@pellepl What do you think, should we switch to dynamic spiffs
configuration by default? Or, maybe, provide compile time option to select
how spiffs should be configured?

Well, based on how I seen people use spiffs I'd say it is hard to do it
right for every need. Some people use only one plain vanilla fs instance,
others want two instances simultaneously, yet others want one per boot
image etc etc. I have even come across a quadruple case.
Then again, the majority is one vanilla system of course.
I think skipping the singleton config is a good idea. When populating the
spiffs config struct, take values from the local makefile as you do now for
location and size. Page- and blocksizes can be defaulted to the values you
have today, unless overridden in makefile.
This way you have a working vanilla as of today, but also a skeleton of how
to tinker with it if needed.
Or, just push current and we can fix above in a future PR.😉",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/kanflo,18,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-236807927,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","@sheinz, could you consider adding the submodule posix_fs/fs-test to feature/spiffs? I think it would be cleaner to have everything EOR related directly in the EOR git and only use submodules for 3rd party libraries such as LWIP, SPIFFS etc.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/sheinz,19,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-236840245,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Hi @kanflo,
fs-test is not esp8266 or eor specific. It is general POSIX file operation test. As it lives in its own repository it has its own Travis CI. It might be useful for testing not only spiffs but any other file system that comply with POSIX specification. I can copy fs-test to eor but new tests that might be added into fs-test would be harder to integrate into eor later.
What disadvantages do you see having fs-test as a submodule?
Another point is that examples/posix_fs is not really an example. It's more like a test. I think I've seen someone suggested having set of tests that might run automatically on the real hardware to ensure regression free development.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/kanflo,20,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-236907628,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!","Hi @sheinz. Oh, I had missed that. In that case it should be a submodule. As it is a test it could go into a separate directory but examples/ is good for now. I will go ahead and merge. Your effort is much appreciated.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,163,2016-07-15T13:24:26Z,2016-08-02T13:42:22Z,2016-08-02T14:29:43Z,MERGED,True,1709,9,22,https://github.com/sheinz,File system support. SPIFFS integration.,22,[],https://github.com/SuperHouse/esp-open-rtos/pull/163,https://github.com/projectgus,21,https://github.com/SuperHouse/esp-open-rtos/pull/163#issuecomment-236922040,"This PR includes:

SPIFFS as a submodule in extras/spiffs
SPIFFS configuration and flash read/write access in extras/spiffs
mkspiffs utility to create SPIFFS image for flashing
example in examples/spiffs
POSIX file system test fs-test as a submodule in example/posix_fs
file system test example in example/posix_fs
build-process integration for image creation and flashing

POSIX file operations support:

open/close
read/write
lseek
stat/fstat (only size field is available)

File system test includes two tests:

Load test. Performs various file system operations in random order and verifies data validity.
Speed test. Simple speed benchmark.

The main motivation for writing speed test was the need for some baseline for future SPI flash access optimization. Currently flash is accessed via SDK/bootrom functions which require buffers/addresses/size alignment. The wrapper functions handle unaligned access from SPIFFS but they introduce overhead.
I intend to rewrite access to flash to eliminate unaligned access overhead or to make it as minimal as possible. Or prove that it is not possible :)
I already reverse engineered flash write functions from bootrom and results are promising.
So, tests will help with messing around with flash access.
Comments/suggestions are welcome!",Nice work everyone!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,164,2016-07-16T12:24:06Z,2016-07-18T20:01:34Z,2016-07-18T20:01:38Z,MERGED,True,17,5,1,https://github.com/ourairquality,i2c: use open drain outputs.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/164,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/164,"The code appeared to be forcing the outputs high rather than using an open drain to let them float high and this attempts to correct this.
Initialize the pins when the driver is initialized.
Enable the internal pull-ups to prevent them floating too high if not connected and damaging the circuit.","The code appeared to be forcing the outputs high rather than using an open drain to let them float high and this attempts to correct this.
Initialize the pins when the driver is initialized.
Enable the internal pull-ups to prevent them floating too high if not connected and damaging the circuit.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,164,2016-07-16T12:24:06Z,2016-07-18T20:01:34Z,2016-07-18T20:01:38Z,MERGED,True,17,5,1,https://github.com/ourairquality,i2c: use open drain outputs.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/164,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/164#issuecomment-233202578,"The code appeared to be forcing the outputs high rather than using an open drain to let them float high and this attempts to correct this.
Initialize the pins when the driver is initialized.
Enable the internal pull-ups to prevent them floating too high if not connected and damaging the circuit.","Hi,
Thanks for getting involved in this project and sending the change! Looks good to me.
I think the reason for the behaviour you were seeing is that GPIO_OUT_OPEN_DRAIN was only added after the i2c driver. A push/pull output driven low is functionally the same as an open drain output driven low, hence the swapping between OUTPUT/LOW and INPUT. But I think this is a good change - it makes the intention clearer, and removes the possibility of accidentally driving the output high.
Have you tested this with any i2c devices?
Fwiw,  I think it may be possible to never set the pin mode to GPIO_INPUT and have the code still work. Reading gpio_input() on an open drain pin should read the state of the input buffer, so it will register if the pin is pulled low from the other end. I think. So if you feel like tweaking the driver some more, you could explore that. :)
@kanflo, as the original i2c driver author do you have any comments on this?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,164,2016-07-16T12:24:06Z,2016-07-18T20:01:34Z,2016-07-18T20:01:38Z,MERGED,True,17,5,1,https://github.com/ourairquality,i2c: use open drain outputs.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/164,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/164#issuecomment-233228247,"The code appeared to be forcing the outputs high rather than using an open drain to let them float high and this attempts to correct this.
Initialize the pins when the driver is initialized.
Enable the internal pull-ups to prevent them floating too high if not connected and damaging the circuit.","@projectgus Thank you for explaining this, and I had misunderstood how it was working and the patch has been updated adding some comments. It still might be a useful to initialize the pins in i2c_init and it seems unnecessary to be writing a 0 to the output each time the clear_s* functions are called because the output state should always be 0. The revised patch proposes some changes for these points.
Also tried a different approach of leaving the pins as open-drain outputs and just reading the inputs without re-configuring them as inputs and that worked too, but shall leave it as-is switching the pin configuration.
Tested on the bmp180 and also sht21.
Have some reservations about the approach used in the bmp180 driver, of creating a separate task, as the i2c driver does not appear to be task-safe so it might not support multiple drivers using this approach. The bmp180 driver also seems to support only one device as it keeps state in global variables. The i2c driver also appears to only supports one set of pins. Issues for another PR!
Some code for the sht2x is available at https://github.com/ourairquality/oaq-esp-open-rtos which might be possible to refactor out into the esp-open-rtos extras and a simple example.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,164,2016-07-16T12:24:06Z,2016-07-18T20:01:34Z,2016-07-18T20:01:38Z,MERGED,True,17,5,1,https://github.com/ourairquality,i2c: use open drain outputs.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/164,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/164#issuecomment-233441200,"The code appeared to be forcing the outputs high rather than using an open drain to let them float high and this attempts to correct this.
Initialize the pins when the driver is initialized.
Enable the internal pull-ups to prevent them floating too high if not connected and damaging the circuit.",Thanks for the PR @ourairquality and welcome to the project. I think this PR is a fine improvement of the initial i2c driver so I will go ahead and merge it. Adding the possibility to use several instances of the driver on different pins is a great idea.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,165,2016-07-18T14:51:38Z,2016-08-05T21:39:43Z,2016-08-05T21:39:43Z,MERGED,True,230,194,3,https://github.com/ourairquality,bmp180: make a lower level interface available and support oversampling.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/165,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/165,"An application using multiple I2C devices will need it's own
loop. This reworks the code to make the detection, calibration
constant loading, and measurment functions available too without
having to use the bmp810 task which is still retained.
Adds support for oversampling.
Fixes a bug in the calculation of the temperature.
Better error handling. Checks for I2C errors and errors in the loading
of the calibration constants and propagates these up.","An application using multiple I2C devices will need it's own
loop. This reworks the code to make the detection, calibration
constant loading, and measurment functions available too without
having to use the bmp810 task which is still retained.
Adds support for oversampling.
Fixes a bug in the calculation of the temperature.
Better error handling. Checks for I2C errors and errors in the loading
of the calibration constants and propagates these up.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,165,2016-07-18T14:51:38Z,2016-08-05T21:39:43Z,2016-08-05T21:39:43Z,MERGED,True,230,194,3,https://github.com/ourairquality,bmp180: make a lower level interface available and support oversampling.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/165,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/165#issuecomment-233628226,"An application using multiple I2C devices will need it's own
loop. This reworks the code to make the detection, calibration
constant loading, and measurment functions available too without
having to use the bmp810 task which is still retained.
Adds support for oversampling.
Fixes a bug in the calculation of the temperature.
Better error handling. Checks for I2C errors and errors in the loading
of the calibration constants and propagates these up.","I think it is good to have a simple interface for accessing pressure/temperature. Just a function call.
Having a task and a queue is good but it's more like an application layer. An application might have a different approach and not need a task for fetching measurements. I believe that was @ourairquality motivation for this PR.
I would suggest separating driver and application layers. If necessary have a separate component that fetches measurements in a task and feed them to an application. But its more like an application logic. In my opinion example is a nice place for such logic.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,165,2016-07-18T14:51:38Z,2016-08-05T21:39:43Z,2016-08-05T21:39:43Z,MERGED,True,230,194,3,https://github.com/ourairquality,bmp180: make a lower level interface available and support oversampling.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/165,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/165#issuecomment-233820594,"An application using multiple I2C devices will need it's own
loop. This reworks the code to make the detection, calibration
constant loading, and measurment functions available too without
having to use the bmp810 task which is still retained.
Adds support for oversampling.
Fixes a bug in the calculation of the temperature.
Better error handling. Checks for I2C errors and errors in the loading
of the calibration constants and propagates these up.","I think this refactor looks generally good, but I agree with @sheinz that task structure is often better as an application-layer thing, or at least a higher layer than the device driver.
We might want to think about adding a really basic device driver interface that somehow allows you to structure a driver task? I don't know. For now this looks like a good chance to merge anyhow, as it moves what we already have in that general direction.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,165,2016-07-18T14:51:38Z,2016-08-05T21:39:43Z,2016-08-05T21:39:43Z,MERGED,True,230,194,3,https://github.com/ourairquality,bmp180: make a lower level interface available and support oversampling.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/165,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/165#issuecomment-233890789,"An application using multiple I2C devices will need it's own
loop. This reworks the code to make the detection, calibration
constant loading, and measurment functions available too without
having to use the bmp810 task which is still retained.
Adds support for oversampling.
Fixes a bug in the calculation of the temperature.
Better error handling. Checks for I2C errors and errors in the loading
of the calibration constants and propagates these up.","@sheinz Fixed thanks. Also separated the task-and-queue api from the lower level api but still within the same file, leaving it as future work to consider removing the higher level api or moving it to an example.",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,165,2016-07-18T14:51:38Z,2016-08-05T21:39:43Z,2016-08-05T21:39:43Z,MERGED,True,230,194,3,https://github.com/ourairquality,bmp180: make a lower level interface available and support oversampling.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/165,https://github.com/sheinz,5,https://github.com/SuperHouse/esp-open-rtos/pull/165#issuecomment-237968958,"An application using multiple I2C devices will need it's own
loop. This reworks the code to make the detection, calibration
constant loading, and measurment functions available too without
having to use the bmp810 task which is still retained.
Adds support for oversampling.
Fixes a bug in the calculation of the temperature.
Better error handling. Checks for I2C errors and errors in the loading
of the calibration constants and propagates these up.","I've verified low level API from this PR and it works fine for me.
I thinks it's good for merge.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,165,2016-07-18T14:51:38Z,2016-08-05T21:39:43Z,2016-08-05T21:39:43Z,MERGED,True,230,194,3,https://github.com/ourairquality,bmp180: make a lower level interface available and support oversampling.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/165,https://github.com/kanflo,6,https://github.com/SuperHouse/esp-open-rtos/pull/165#issuecomment-237971145,"An application using multiple I2C devices will need it's own
loop. This reworks the code to make the detection, calibration
constant loading, and measurment functions available too without
having to use the bmp810 task which is still retained.
Adds support for oversampling.
Fixes a bug in the calculation of the temperature.
Better error handling. Checks for I2C errors and errors in the loading
of the calibration constants and propagates these up.","Great @sheinz, then please go ahead with your new merge super powers :D",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,166,2016-07-18T18:03:00Z,2016-07-19T07:01:52Z,2016-07-19T09:34:49Z,CLOSED,False,503,0,6,https://github.com/bhuvanchandra,DS3231 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/166,https://github.com/bhuvanchandra,1,https://github.com/SuperHouse/esp-open-rtos/pull/166,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,166,2016-07-18T18:03:00Z,2016-07-19T07:01:52Z,2016-07-19T09:34:49Z,CLOSED,False,503,0,6,https://github.com/bhuvanchandra,DS3231 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/166,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/166#issuecomment-233477903,,"Thanks for contributing this @bhuvanchandra . Looks good to me apart from the comment about copyright headers, although I agree with @UncleRus's comments about preferring enums over macros where possible.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,167,2016-07-19T06:56:36Z,2016-07-19T09:34:32Z,2016-07-19T09:34:40Z,CLOSED,False,527,0,6,https://github.com/bhuvanchandra,DS3231 v2,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/167,https://github.com/bhuvanchandra,1,https://github.com/SuperHouse/esp-open-rtos/pull/167,"Changes since #166  :

Use enums instead of defines.
Add license string in the ds3231 driver.","Changes since #166  :

Use enums instead of defines.
Add license string in the ds3231 driver.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,167,2016-07-19T06:56:36Z,2016-07-19T09:34:32Z,2016-07-19T09:34:40Z,CLOSED,False,527,0,6,https://github.com/bhuvanchandra,DS3231 v2,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/167,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/167#issuecomment-233558088,"Changes since #166  :

Use enums instead of defines.
Add license string in the ds3231 driver.","I'm not sure if we follow any coding style here in EOR,  but using tabs for indentation is not recommended, at least for C programming.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,167,2016-07-19T06:56:36Z,2016-07-19T09:34:32Z,2016-07-19T09:34:40Z,CLOSED,False,527,0,6,https://github.com/bhuvanchandra,DS3231 v2,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/167,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/167#issuecomment-233563701,"Changes since #166  :

Use enums instead of defines.
Add license string in the ds3231 driver.","Coding style requirements are described in readme:
https://github.com/SuperHouse/esp-open-rtos#coding-style",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/bhuvanchandra,1,https://github.com/SuperHouse/esp-open-rtos/pull/168,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-233819990,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","Hi @bhuvanchandra,
Thanks for these changes, looks good. The only other change, as mentioned in the other PR, is to change tabs to spaces (I missed this when looking at the original PR.) There are some coding guidelines here: https://github.com/SuperHouse/esp-open-rtos/#coding-style
Also, thanks for re-squashing your commits to keep the history clean & logical. You don't need to start a new PR each time, though. You can force push (git push -f) to the old PR branch and the PR will automatically update. I know it's considered a bad habit to force push, but for ""your"" PR branches it's OK. :)
Angus",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/bhuvanchandra,3,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-233843916,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","Hi @projectgus,
Fixed the tab indents and force pushed the changes.

Bhuvan",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/bhuvanchandra,4,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-233883256,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","Hi @projectgus,
Also pushed the changes as per @sheinz comments.

Bhuvan",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-236534874,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","Started testing this and it looks ok so far. It seems fine to merge it.
One request is to change ds3231_getTempInteger to return an int16_t and include all the 12 bits available rather than truncating to 8 bits. Then ds3231_getTempFloat could reuse the same code, or perhaps even be removed leaving it to the caller to convert to a float if they need to.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-236575785,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","The casting '(signed)data[0]' in ds3231_getTempFloat might not be correct. Here's a suggestion that also returns all 12 bits for the integer version which could be used for the float version too:
bool ds3231_getTempInteger(int16_t *temp)
{
    uint8_t data[2];

    data[0] = DS3231_ADDR_TEMP;
    if (ds3231_send(data, 1) && ds3231_recv(data, 2)) {
        *temp = (int16_t)(int8_t)data[0] << 2 | data[1] >> 6;
        return true;
    }
    return false;
}",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-236595233,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","I agree with @ourairquality that (signed)data[0] is not correct. But it will work nevertheless as *temp is int8.
With suggested by @ourairquality code I would suggest multiply the result by 25 and specify in the comment that function returns temperature in hundredth of a °C, for example 2525 is 25.25°C.
From the datasheet:

Temperature is represented as a 10-bit code with a
resolution of 0.25°C and is accessible at location 11h and
12h. The temperature is encoded in two’s complement
format. The upper 8 bits, the integer portion, are at location
11h and the lower 2 bits, the fractional portion, are in
the upper nibble at location 12h. For example, 00011001
01b = +25.25°C.

@bhuvanchandra Have you tested the negative temperature values? I'm not sure if the temperature in a register is a signed integer. It might just flip the sign bit without inverting the data bits. I haven't found information in the datasheet.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/bhuvanchandra,8,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-236689688,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","@ourairquality and @sheinz, thanks! for your feedback and suggestions.
@ourairquality, agreed, will update it accordingly.
@sheinz i didn't test at negative temperature, i guess it will flip the sign bit for negative values. The only clue we have is that the temperature value(10-bit) is encoded in 2's complement.
How about this snippet:
bool ds3231_getTemperature(int16_t *temp)
{
    uint8_t data[2];

    data[0] = DS3231_ADDR_TEMP;

    if (ds3231_send(data, 1) && ds3231_recv(data, 2)) {
        /* Check the sign bit */
        if (data[0] >> 7) {
            *temp = (int16_t) ((((data[0] & 0x7F) << 2) | ((data[1] & 0XC0) >> 6)) - 1024) * 25;
            return true;
        }

        *temp = (int16_t) ((data[0] << 2) | ((data[1] & 0XC0) >> 6)) * 25;
        return true;
    }
    return false;
}",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/ourairquality,9,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-236725200,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","@sheinz Could an API that returns the binary fixed point representation generated by the device please be included as a minimum. Multiplying by 25 just frustrates most callers, causes premature overflow and loss of precision in subsequent integer computation. Personally I would not even include the *25 and float API, but just request the binary fixed point API from which the other two variants can easily reuse.
@bhuvanchandra The encoding of the sign appears to be twos-complement (but I shall try to test) and the suggested code did work on some examples and is much simple. It's not necessary to mask out the low bits before the right shifts etc, lots of unnecessary code. I think the C standard guarantees that int16_t has a two's complement representation, but not certain, but it seems fine to me to assume all target devices use two's complement.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/ourairquality,10,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-236789194,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","Just to be sure on the negative temperatures, put it in the freezer and with the above suggested code it made a clean transition below zero and back above zero which is consistent with it being two's complement and supports my code suggestion above.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/sheinz,11,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-236843604,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","Could an API that returns the binary fixed point representation generated by the device please be included as a minimum. Multiplying by 25 just frustrates most callers, causes premature overflow and loss of precision in subsequent integer computation. Personally I would not even include the *25 and float API, but just request the binary fixed point API from which the other two variants can easily reuse.

Then provide additional function, that might be named something like ds3231_getRawTemperature which would return pure data from the registers.
In my opinion having those three function would cover all the users needs for the temperature:
ds3231_getRawTemperature - will return pure register data(shifted)
ds3231_getIntegerTemperature  -  will return only integer part of the temperature
ds3231_getFloatTemperature


names are just for reference, feel free to name it as you see appropriate",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/projectgus,12,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-236922508,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.",Supplying those three options sounds ideal to me. I can see different use cases for each.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/bhuvanchandra,13,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-237014930,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","@ourairquality yes, your code suggestion works nicely at negative temperatures also. I also tested it at my end today.
@sheinz, @projectgus, will add the three options.

Bhuvan",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/bhuvanchandra,14,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-237025822,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.",Pushed the changes.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,168,2016-07-19T09:34:16Z,2016-08-05T21:38:30Z,2016-08-05T21:38:30Z,MERGED,True,558,0,6,https://github.com/bhuvanchandra,DS3231 v3,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/168,https://github.com/kanflo,15,https://github.com/SuperHouse/esp-open-rtos/pull/168#issuecomment-237972365,"Changes since #167  :
Fix typo in comment.

Changes since #166  :
Use enums instead of defines.
Add license string in the ds3231 driver.","Thanks @bhuvanchandra, this looks good so I'll go ahead and merge it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,169,2016-07-20T23:02:25Z,2016-10-26T13:14:50Z,2016-10-26T13:14:50Z,CLOSED,False,20817,13816,53,https://github.com/sasdf,Upgrade to FreeRTOS v9.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/169,https://github.com/sasdf,1,https://github.com/SuperHouse/esp-open-rtos/pull/169,"After we have open_esplibs, we are able to upgrade to latest FreeRTOS.
Some function in libmain.a and libpp.a will call xTaskCreateGeneric, which has been removed in v9.0.0, so I wrote a proxy function to xTaskCreate in port.c. It can be remove after all reverse engineering works are done.
Another difference is the type of parameter pcName in xTaskCreate and xTimerCreate is const char * const instead of signed char *.","After we have open_esplibs, we are able to upgrade to latest FreeRTOS.
Some function in libmain.a and libpp.a will call xTaskCreateGeneric, which has been removed in v9.0.0, so I wrote a proxy function to xTaskCreate in port.c. It can be remove after all reverse engineering works are done.
Another difference is the type of parameter pcName in xTaskCreate and xTimerCreate is const char * const instead of signed char *.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,169,2016-07-20T23:02:25Z,2016-10-26T13:14:50Z,2016-10-26T13:14:50Z,CLOSED,False,20817,13816,53,https://github.com/sasdf,Upgrade to FreeRTOS v9.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/169,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/169#issuecomment-235262906,"After we have open_esplibs, we are able to upgrade to latest FreeRTOS.
Some function in libmain.a and libpp.a will call xTaskCreateGeneric, which has been removed in v9.0.0, so I wrote a proxy function to xTaskCreate in port.c. It can be remove after all reverse engineering works are done.
Another difference is the type of parameter pcName in xTaskCreate and xTimerCreate is const char * const instead of signed char *.","\o/ nice work! Ping #80 where an upgrade was previously discussed.
Interesting that so few places in the code actually needed changing. I'm guessing the compatibility headers take care of a lot of it at compile time? There's probably clean up we can eventually do in port.c, etc., to update to the latest APIs.
Can you confirm if this line definitely didn't need changing: https://github.com/SuperHouse/esp-open-rtos/blob/master/open_esplibs/libmain/timers.c#L74 Though we should probably fix that regardless, given it's such a hack.
How much testing have you done? I'm interesting in merging in this, but as it's a big change it'd be ideal if a few people can put it through its paces before we pull it in.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,169,2016-07-20T23:02:25Z,2016-10-26T13:14:50Z,2016-10-26T13:14:50Z,CLOSED,False,20817,13816,53,https://github.com/sasdf,Upgrade to FreeRTOS v9.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/169,https://github.com/rodrigopex,3,https://github.com/SuperHouse/esp-open-rtos/pull/169#issuecomment-235366858,"After we have open_esplibs, we are able to upgrade to latest FreeRTOS.
Some function in libmain.a and libpp.a will call xTaskCreateGeneric, which has been removed in v9.0.0, so I wrote a proxy function to xTaskCreate in port.c. It can be remove after all reverse engineering works are done.
Another difference is the type of parameter pcName in xTaskCreate and xTimerCreate is const char * const instead of signed char *.","Angus and sasdf what do you suggest? I can help on testing this.
Best regards,
Rodrigo Peixoto.
On Tue, Jul 26, 2016 at 10:13 AM Angus Gratton notifications@github.com
wrote:

\o/ nice work! Ping #80
#80 where an upgrade
was previously discussed.
Interesting that so few places in the code actually needed changing. I'm
guessing the compatibility headers take care of a lot of it at compile
time? There's probably clean up we can eventually do in port.c, etc., to
update to the latest APIs.
Can you confirm if this line definitely didn't need changing:
https://github.com/SuperHouse/esp-open-rtos/blob/master/open_esplibs/libmain/timers.c#L74
Though we should probably fix that regardless, given it's such a hack.
How much testing have you done? I'm interesting in merging in this, but as
it's a big change it'd be ideal if a few people can put it through its
paces before we pull it in.
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#169 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AACJ0OYrAc2LR489EkN9viQ46TYa6Seuks5qZgfmgaJpZM4JRSy_
.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,169,2016-07-20T23:02:25Z,2016-10-26T13:14:50Z,2016-10-26T13:14:50Z,CLOSED,False,20817,13816,53,https://github.com/sasdf,Upgrade to FreeRTOS v9.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/169,https://github.com/projectgus,4,https://github.com/SuperHouse/esp-open-rtos/pull/169#issuecomment-235459445,"After we have open_esplibs, we are able to upgrade to latest FreeRTOS.
Some function in libmain.a and libpp.a will call xTaskCreateGeneric, which has been removed in v9.0.0, so I wrote a proxy function to xTaskCreate in port.c. It can be remove after all reverse engineering works are done.
Another difference is the type of parameter pcName in xTaskCreate and xTimerCreate is const char * const instead of signed char *.","@rodrigopex , great! @sasdf  may have some other suggestions, but for now I'd suggest testing this as much as you can and letting us know what you find.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,169,2016-07-20T23:02:25Z,2016-10-26T13:14:50Z,2016-10-26T13:14:50Z,CLOSED,False,20817,13816,53,https://github.com/sasdf,Upgrade to FreeRTOS v9.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/169,https://github.com/sasdf,5,https://github.com/SuperHouse/esp-open-rtos/pull/169#issuecomment-235554582,"After we have open_esplibs, we are able to upgrade to latest FreeRTOS.
Some function in libmain.a and libpp.a will call xTaskCreateGeneric, which has been removed in v9.0.0, so I wrote a proxy function to xTaskCreate in port.c. It can be remove after all reverse engineering works are done.
Another difference is the type of parameter pcName in xTaskCreate and xTimerCreate is const char * const instead of signed char *.","@projectgus , I have no idea about the line in timer.c, sorry.
I haven't done any test, but it works for my project.
Basic things like tasks, semaphore, queue, notification, uart ,and socket works fine.
@rodrigopex , Thanks for your help!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,169,2016-07-20T23:02:25Z,2016-10-26T13:14:50Z,2016-10-26T13:14:50Z,CLOSED,False,20817,13816,53,https://github.com/sasdf,Upgrade to FreeRTOS v9.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/169,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/169#issuecomment-254039015,"After we have open_esplibs, we are able to upgrade to latest FreeRTOS.
Some function in libmain.a and libpp.a will call xTaskCreateGeneric, which has been removed in v9.0.0, so I wrote a proxy function to xTaskCreate in port.c. It can be remove after all reverse engineering works are done.
Another difference is the type of parameter pcName in xTaskCreate and xTimerCreate is const char * const instead of signed char *.","Gave this a test with the wificfg and an app I am working on and it seems to be running ok. Not extensive testing but it seems to run ok, and tested the AP and Station modes. A few changes were needed:

some more uses of xTaskCreate() in the examples needed updating to cast the task name to (const char * const).
In FreeRTOS.h need to change to #include <FreeRTOSConfig.h> to get the per-project FreeRTOSConfig.h override file included first.

Is that enough confidence to merge this now.
Did anyone else have any freeback?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,169,2016-07-20T23:02:25Z,2016-10-26T13:14:50Z,2016-10-26T13:14:50Z,CLOSED,False,20817,13816,53,https://github.com/sasdf,Upgrade to FreeRTOS v9.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/169,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/169#issuecomment-256343365,"After we have open_esplibs, we are able to upgrade to latest FreeRTOS.
Some function in libmain.a and libpp.a will call xTaskCreateGeneric, which has been removed in v9.0.0, so I wrote a proxy function to xTaskCreate in port.c. It can be remove after all reverse engineering works are done.
Another difference is the type of parameter pcName in xTaskCreate and xTimerCreate is const char * const instead of signed char *.","Thanks @sasdf, @ourairquality and everybody who helped testing this. The PR is merged with #245",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/171,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/foogod,2,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-234658458,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","system_uart_swap is actually one of a large hunk of functions in user_interface.c which I've been working on finishing up decompiling but haven't yet made it into the mainline..  I haven't had a lot of time lately but I'm gonna see if I can get some of that finished up so we can work on merging it in (but I'm not opposed to adding this implementation in the meantime)
Interestingly, system_uart_de_swap exists in the header file, but apparently does not exist at all in the 0.9.9 version of the libraries (it was apparently added to later versions, though).  Given that this is apparently an oversight on Espressif's part, I'll agree it does seem reasonable to add it here even though it's not in the binary version of the library..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-235258005,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","@ourairquality, this looks like a good addition. Thanks.
The only request I have is, could you please use the constants defined in iomux_regs.h for the ""function"" numbering instead of plain numbers? If it's also possible to also use the GPIO constants in some way to avoid the plain numbers for the IOMUX numbering then that would also be great, although we might need to make some tweaks to iomux.h & iomux_regs.h for that (when I've worked with it, it seems a little clunky at the moment.) Feel free to take a run at that if you want, or not if you don't. :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-235264621,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","@projectgus I would like to have used some defines, but I can't see any that are usable. For example, IOMUX_GPIO1_FUNC_UART0_TXD is not a function number that can be passed to iomux_set_function and IOMUX_GPIO1 is not a pin number that can be passed to iomux_set_function.  What could be done is to use gpio_to_iomux to at least make it clearer which GPIO pin numbers were being modified? Other than that it looks like a new set of defines are needed here?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/projectgus,5,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-235267241,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","@ourairquality , yeah you're right. I remembered it was a bit awkward, but not quite that awkward!
The philosophy between the xxx_regs.h/xxx.h headers for peripherals is to have a registers-only interface and then a compatible wrapper around that interface. However in this case they're not really cross-compatible. I'd be open to changes that did make them cross-compatible, though.
You can use the register interface entirely, but you lose the fact that iomux_set_function() masks out the non-function-related pins in the iomux so you can keep those other parts of the iomux set as-is.
Hmm, yeah. I think it must be possible to refactor these functions to be more harmonious. Just probably fiddly as well! Any suggestions welcome, otherwise I'm OK with merging this as-is and I'll open a separate Issue to track the problem of the iomux/iomux_reg incompatibility.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-235543514,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.",@projectgus The iomux pin functions have been split out in the header file in an attempt to move this along. Would appreciate it if someone else with a good command of what they want could rework the header file in a follow up PR.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-238789734,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","I would prefer to have a single definition for GPIO_FUNC*. Having both GPIO0_FUNC_SPI0_CS2 and IOMUX_GPIO0_FUNC_SPI0_CS2 might be confusing. User might use one in place of another.
As I suggested in Issue#179 the solution might be to just remove IOMUX_FUNC in iomux_set_function, so the current definitions of IOMUX_GPIOn_FUNC* would fit. (iomux_set_gpio_func should be adjusted as well)
But another point that I don't like is the first parameter iomux_num:
inline static void iomux_set_function(uint8_t iomux_num, uint32_t func)
When I first used function iomux_set_function I wrote:
iomux_set_function(IOMUX_GPIO3, IOMUX_GPIO3_FUNC_I2SO_DATA);
Which is obviously wrong but at the first glance of header files it seemed right to me.
May be we should rename the function (and change its implementation) to something like:
inline static void gpio_set_function(uint8_t gpio_num, uint32_t iomux_func)
And use it like:
gpio_set_function(3, IOMUX_GPIO3_FUNC_I2SO_DATA);",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/projectgus,8,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-238792154,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","This seems like a good change, although I'd suggest naming such a function gpio_set_iomux_function() to be more explicit how we're changing iomux not just the gpio peripheral.
I think the reason I shied away from this originally was performance (either you do ugly inlining tricks or you have to have a look up table in code), but that's probably a premature optimisation - noone's going to be calling this in a tight loop.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/sheinz,9,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-238823292,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","The functions might look like:
/**
 * Set IOMUX function.
 *
 * @param iomux_num Index of IOMUX register. Can be converted from GPIO number
 * with gpio_to_iomux.
 * @param iomux_func GPIO function definition IOMUX_GPIOn_FUNC_* 
 */
inline static void iomux_set_function(uint8_t iomux_num, uint32_t iomux_func)
{
    uint32_t prev = IOMUX.PIN[iomux_num] & ~IOMUX_PIN_FUNC_MASK;
    IOMUX.PIN[iomux_num] = func | prev;
}
/**
 * Set GPIO pin function by changing corresponding IOMUX register.
 *
 * @param gpio_num GPIO pin number: 0-15
 * @param iomux_func GPIO function definition IOMUX_GPIOn_FUNC_* 
 */
inline static void gpio_set_iomux_function(uint8_t gpio_num, uint32_t iomux_func)
{
    iomux_set_function(gpio_to_iomux(gpio_num, iomux_func));
}

And in iomux_set_gpio_function:
iomux_set_function(iomux_num, IOMUX_FUNC(func));
But I still don't like to expose functions with iomux_num parameter to a user as it is not obvious what value to pass there. It would be better to have a set of functions visible to a user that accept only GPIO number.
Naming is still a little bit awkward as we have two different functions with almost identical names: iomux_set_gpio_function and gpio_set_iomux_function.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/sheinz,10,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-238826855,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","Another suggestion is to move gpio_set_iomux_function to gpio.h file. As it is more high level GPIO manipulation.
A user might look there first when he needs to figure out how to work with GPIO and never needs to look into iomux.h for low level IOMUX register manipulation. The user still needs to look into iomux_regs.h though for a parameter to pass into gpio_set_iomux_function.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/ourairquality,11,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-240393466,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.",Updated to use the definitions made usable in #187 PTAL,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/sheinz,12,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-242905428,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.",I checked the functions on my device. They work as expected. In my opinion the PR is good for merging.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,171,2016-07-22T04:49:19Z,2016-08-27T20:18:13Z,2016-08-27T20:18:13Z,MERGED,True,34,0,1,https://github.com/ourairquality,libmain: add sdk_system_uart_swap and sdk_system_uart_de_swap,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/171,https://github.com/kanflo,13,https://github.com/SuperHouse/esp-open-rtos/pull/171#issuecomment-242938536,"Could see system_uart_de_swap define in the header file but not in libmain, but added it anyway.","Thanks all, I'll merge this one.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/rongsaws,1,https://github.com/SuperHouse/esp-open-rtos/pull/173,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-235460266,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","Very exciting! Can't wait to test this.
Do you think we could wrap some of this functionality into a component/library? I know people have tried to port the actual AWS IoT SDK, but this looks like it might be an easier approach as the AWS SDK itself makes a lot of assumptions about the system you're using.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/rongsaws,3,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-235469472,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","We could definitely wrap portion of the code into a library, however the MQTT task and SSL connection are not abstracted enough to be consumed as a library. Given this example, I think it's just matter of time before someone eventually ports the AWS IoT device SDK to this project, which may make more sense to be consumed as a library.
I guess a lot of applications probably just want basic pub/sub function like this sample does so they can save more memory for other uses. I could potentially port the AWS IoT device SDK over if it turns out more people want to use it that way.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/rongsaws,4,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-236060276,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","I added two more commits, specifically around handling over-sized messages received - one is to fix the issue reported in #152 (after the fix, connection will still get reset for sanity purpose but the system won't crash) and the other one is to reset SSL upon read/write errors, such as over-sized record received.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/TheSkorm,5,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-241722075,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","This example is perfect for our use case. Adding basic support for IoT shadows would be nice but as stated, most people just need pub/sub.
Only suggestion is maybe add some comments around the NewMQTTClient on what the values are how you would change them for larger messages.
NewMQTTClient(&client, &network, 5000, mqtt_buf, 100, mqtt_readbuf, 100);",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/toashwin,6,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-243048015,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","This is awesome.. I was able to test it out today, and its all working.
Now, I think I will need the thing-shadows capability.. In my project I will need to check if my device is ON/OFF from a  website. Looks like this feature is still missing? Is there something I can do myself? Any recommendations?
(PS: But very glad I got this far. I almost gave up 2months ago. Then I had to go on a vacation. By the time I am back its all implemented. Super excited.)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/kanflo,7,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-243201134,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","Thanks @rongsaws and @toashwin. I will merge this one, sorry it took so long.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/rongsaws,8,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-243207589,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","@toashwin, for simple shadow interactions from the device, you could publish the below shadow update message to topic $aws/things/thingName/shadow/update:
{
    ""state"": {
        ""reported"": {
            ""switch"": ""ON"",
        }
    }
}

More details can be found here. Please let me know whether this works for you. Thanks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/toashwin,9,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-243360001,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","@rongsaws,
Cool. Thank you. That seem to be working when tested with MQTT-Client from the AWS-IOT website. I will test with ESP8266 tonight.
I got few questions:
This is what I did:
I created a thing. It had following values:
REST API Endpoint: https://.iot.us-east-1.amazonaws.com/things/mybutton/shadow
MQTT topic: ""$aws/things/mybutton/shadow/update""
Question 1: I wonder why $aws in the topic name? Is it like a variable? In the c-code, do I just replace the value in ( #define MQTT_PUB_TOPIC ""esp8266/status"" ) with ""$aws/things/mybutton/shadow/update"" along with $sign?
Question 2: For the client endpoint, would it be:
const char *client_endpoint =""https://.iot.us-east-1.amazonaws.com/things/mybutton/shadow "";
OR
const char *client_endpoint =""https://.iot.us-east-1.amazonaws.com/ "";
Question 3: Not related to ESP8266. From the AWS IOT user guide, I see that AWS IOT Button has ARN:
arn:aws:iot:us-east-1:123456789012:topic/iotbutton/G030JF055364XVRB
For me, ARN has, ""things"" or ""policy"" in the path. but I dont see ""topic"" as in the guide.
And how can I create a device ID into the path? I can do something like:
iotbutton_G030JF055364XVRB
but not
iotbutton/G030JF055364XVRB
Thanks a lot.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/rongsaws,10,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-243571465,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","@toashwin, I answered your questions below. If you have any other AWS IoT specific questions, I encourage you to post them on the AWS IoT forum here, so we can stay focused on ESP8266 here. Thanks.

Question 1: I wonder why $aws in the topic name? Is it like a variable? In the c-code, do I just replace the value in ( #define MQTT_PUB_TOPIC ""esp8266/status"" ) with ""$aws/things/mybutton/shadow/update"" along with $sign?

Topics beginning with '$' are called reserved topics, and no, it's not a variable. You can subscribe to these reserved shadow topics just as you do with other regular topics. See here for more details.

Question 2: For the client endpoint, would it be:
const char *client_endpoint =""https://.iot.us-east-1.amazonaws.com/things/mybutton/shadow "";
OR
const char *client_endpoint =""https://.iot.us-east-1.amazonaws.com/ "";

The client_endpoint variable defined in client_config.c should just be the host name, without https scheme or path.

Question 3: Not related to ESP8266. From the AWS IOT user guide, I see that AWS IOT Button has ARN:
arn:aws:iot:us-east-1:123456789012:topic/iotbutton/G030JF055364XVRB

Different resource types have different ARNs, such as topic ARN, client ID ARN, and thing ARN, see here  for more details. Don't confuse ARN with REST API endpoint path as they are different things. When you access shadow using REST APIs, you use the provided API endpoint, and in this case, no MQTT topics are involved; and when you use MQTT to access the shadows, you publish updates to the reserved shadow topics (as the aws_iot example does) to archive the same purpose as you do with REST APIs.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/toashwin,11,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-244868384,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","@rongsaws  - Thanks for your suggestions.. Made very good progress.
How can I retrieve the latest stored data? I want to access that in the device, at start up.
From the code, I see you are only doing subscribe/publish. Do we need something like a ""get""?
Thanks
Ashwin",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/toashwin,12,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-244870286,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","@rongsaws  Thank you so much! This was the last thing missing in my project. I was almost about to move away from ESP8266.
I got the whole project working now..
My device is connecting to AWS IOT over MQTT.  I got it hooked up to Alexa as well. And even thats working perfectly.
Next I am going  to approach Alexa Fund for some financial help to take this project to the next step.  So I can do field testing, get some real customer feedback!  Hopefully that goes through. :(
Thank you.
PS: Please answer my previous question. I have a workaround for that. But still good to know.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/rongsaws,13,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-245026085,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","@toashwin,

How can I retrieve the latest stored data? I want to access that in the device, at start up.
From the code, I see you are only doing subscribe/publish. Do we need something like a ""get""?

Yes, you can make a Get request by sending an empty message to topic _$aws/things/ThingName/shadow/update, the shadow content will be published to topic **$aws/things/ThingName/shadow/get/accepted**_.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/toashwin,14,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-254423844,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","Hi
Do you have any plans to support AWS IOT for ESP8266 on Arduino SDK?
Thanks
Ashwin",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/only1chi,15,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-255408903,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","I'm struggling to get AWS IOT working for my application.
I copied the AWT_IOT files to my project rather than build it directly in examples/aws_iot
I get compile erros such as:
conflicting types for 'sdk_wifi_station_get_connect_status'
/home/chiz/share/esp-open-rtos/include/espressif/esp_sta.h:73:9: note: previous declaration of 'sdk_wifi_station_get_connect_status' was here
uint8_t sdk_wifi_station_get_connect_status(void);
Apparently sdk_wifi_station_get_connect_status(void) is already defined in MQTTClient.h as follows:
void sdk_wifi_station_get_connect_status(mqtt_client_t*, mqtt_network_t*, unsigned int, unsigned char*, size_t, unsigned char*, size_t);
How does this get resolved?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/vlad-ivanov-name,16,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-255419279,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:",@only1chi there's no such definition in MQTTClient.h? https://github.com/SuperHouse/esp-open-rtos/blob/master/extras/paho_mqtt_c/MQTTClient.h,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/only1chi,17,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-255431395,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","@resetnow I needed to update my local repository for esp-open-rtos.
Thanks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,173,2016-07-26T23:41:45Z,2016-08-29T17:55:33Z,2017-01-27T02:36:22Z,MERGED,True,725,2,9,https://github.com/rongsaws,Added a MQTT pub/sub example of using AWS IoT,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/173,https://github.com/tbinswirls,18,https://github.com/SuperHouse/esp-open-rtos/pull/173#issuecomment-275575701,"This example demonstrates ESP8266 is capable of working with the AWS IoT service through TLS1.2 based MQTT connection.
Readme file included.
Some memory usage stats of the example:","Hello @toashwin

I got the whole project working now..
My device is connecting to AWS IOT over MQTT. I got it hooked up to Alexa as well. And even thats working perfectly.

Glad to read about your progress. I also trying to subsribe/publish to AWS IOT thing topics, however I am having some issues. I have posted about this in a separate topic as well (#329), below is an excert from that:
I have gotten far enough to be able to publish messages to the shadow. However, there seems to be an issue when ESP is subscribed to the 'thing/shadow/update/delta' topic. The error happens when AWS detects a difference between 'desired' and 'reported' states of the thing shadow and it sends a message to the '/delta' topic. The error message is:
'Connection dropped, request restart'
I am sure that the message being sent to the '/delta' topic reaches ESP because this error happens only when there is a difference between 'desired' and 'reported' states.
I have been successful in subscribing and receiving messages from 'non-thing' topics, but got stuck with receiving the messages from any of the 'thing shadow topics'.
Could it be the size of the payload? The messages received by ESP from 'non-thing' topics were just 'on' and 'off'.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,178,2016-08-08T17:46:27Z,2016-08-09T20:32:37Z,2016-08-09T20:32:37Z,MERGED,True,195,97,10,https://github.com/sheinz,SPIFFS: Selectable configuration of SPIFFS,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/178,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/178,"In PR#163 was suggested to have ability to select how SPIFFS is configured, as a singleton during compile-time or during run-time. This PR adds this feature.
By default SPIFFS is configured as before at compile-time. If run-time configuration is needed SPIFFS_SINGLETON=0 should be specified in program's Makefile. In that case esp_spiffs_init accepts two arguments: address and size of spiffs flash region.
Logical page size, block size and erase block size is still a compile time defined parameters. I don't see a use case when those parameters needs to be changed in run-time. If needed they can be redefined in program's Makefile as well.","In PR#163 was suggested to have ability to select how SPIFFS is configured, as a singleton during compile-time or during run-time. This PR adds this feature.
By default SPIFFS is configured as before at compile-time. If run-time configuration is needed SPIFFS_SINGLETON=0 should be specified in program's Makefile. In that case esp_spiffs_init accepts two arguments: address and size of spiffs flash region.
Logical page size, block size and erase block size is still a compile time defined parameters. I don't see a use case when those parameters needs to be changed in run-time. If needed they can be redefined in program's Makefile as well.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,178,2016-08-08T17:46:27Z,2016-08-09T20:32:37Z,2016-08-09T20:32:37Z,MERGED,True,195,97,10,https://github.com/sheinz,SPIFFS: Selectable configuration of SPIFFS,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/178,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/178#issuecomment-238321087,"In PR#163 was suggested to have ability to select how SPIFFS is configured, as a singleton during compile-time or during run-time. This PR adds this feature.
By default SPIFFS is configured as before at compile-time. If run-time configuration is needed SPIFFS_SINGLETON=0 should be specified in program's Makefile. In that case esp_spiffs_init accepts two arguments: address and size of spiffs flash region.
Logical page size, block size and erase block size is still a compile time defined parameters. I don't see a use case when those parameters needs to be changed in run-time. If needed they can be redefined in program's Makefile as well.","Good addition. I only have a small comment, otherwise this one is good for merging.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,178,2016-08-08T17:46:27Z,2016-08-09T20:32:37Z,2016-08-09T20:32:37Z,MERGED,True,195,97,10,https://github.com/sheinz,SPIFFS: Selectable configuration of SPIFFS,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/178,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/178#issuecomment-238364260,"In PR#163 was suggested to have ability to select how SPIFFS is configured, as a singleton during compile-time or during run-time. This PR adds this feature.
By default SPIFFS is configured as before at compile-time. If run-time configuration is needed SPIFFS_SINGLETON=0 should be specified in program's Makefile. In that case esp_spiffs_init accepts two arguments: address and size of spiffs flash region.
Logical page size, block size and erase block size is still a compile time defined parameters. I don't see a use case when those parameters needs to be changed in run-time. If needed they can be redefined in program's Makefile as well.","@pellepl I've removed SPIFFS_BLOCK_ERASE_SIZE option from Makefile and from mkspiffs utility.
Pushed the changes.
Thanks for the suggestion.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/kanflo,1,https://github.com/SuperHouse/esp-open-rtos/pull/180,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-238794711,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","I haven't looked it through but at the first glance it seems like a really quality piece of software.
I will try to review it more thoroughly later.
For now I only have one comment. Do we really need it inside core and be available unconditionally? The user might not need it but it will still be compiled, linked and checking sysparam region at system start.
Would it be possible to include it as the rest of the add-ons in extras directory? So a user might turn it on as needed.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-238976844,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","You have a point. For my part though, I think sysparam is an essential part of EOR and therefore should be included in core.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/foogod,4,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-239231303,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","A large part of the original reason I developed this was to have a consistent mechanism to configure system-related parameters (hence the name), such as boot options, WiFi parameters, timezone settings, etc.  While those bits of integration haven't been done yet, most of them will require it to be part of core, which is why it was originally written that way.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-239997769,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","This is interesting but it looks too heavy weight for a required core module.

Thread safety does not appear to be addressed. If used in the core then it might be entered in unexpected paths, be a deadlock hazard etc. Core sysparam needs to be light weight.
It supports use cases such as frequently updating parameters that are not needed in many applications, and perhaps not even in the core. These use cases might make it interesting for 'extras' as a parameter database.
It's not clear that it handles failing sectors. It tries to zero the index, but what if the length is wrong then it can not skip an entry. For infrequently updated parameters, a sector level 'clean' flag might be more robust.

Thus I suggest this be an 'extras' component and that core sysparams use something very simple such as fixed sized fields and compile-time defined offsets, and sector level redundancy. For thread safety perhaps having just one old sector is adequate safety, assuming updates do not occur in quick succession, so that readers use the current sector while a new sector is written and then flags are changed to switch new readers to the latest sector while existing reads can complete reading from the old sector, with no locking except for writers.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/foogod,6,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-240227589,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","Sigh..  So I'm realizing that folks here may not have been around when I was discussing a lot of this on the maillist a couple of months ago, so for context, here's the contents of the last update message I sent out there (back in May):

A new version of the sysparam stuff is up in the 'sysparam' branch of my repo (https://github.com/foogod/esp-open-rtos/tree/sysparam).  I think this one is actually pretty close to being ready for prime time, but would love to hear any input folks have before I put together a PR for it.
Changes from the previous version:

Atomic updates:  Even if the system loses power or otherwise fails in the middle of a sysparam write, no corruption of the flash data should occur.
Fully validated writes (data is written, then read back and checked before being committed)
Keys and values can now be up to 65535 bytes (previously 255) in length (provided you create a sysparam area big enough to put them in)
Up to 4095 different keys can be stored at the same time (previously 126)
Key/value overhead is still the same as before (4 bytes each)
Values can be stored as ""text"" (default) or ""binary"" to indicate non-printable data (useful to know when printing/dumping arbitrary key/values)
It is now possible for sysparam_init() to identify and use a sysparam region even if it was created with a different size/position than are expected (as long as it's not too far away from where it's expecting to find it).  For example, if the code is expecting a sysparam region that's two sectors in size, but there was one created (by a previous firmware, etc) that's four sectors in size in roughly the same location, it will find and continue to use the existing region with no problem.
sysparam initialization has been added to system startup (no need to call sysparam_init() from the app anymore)

Outstanding issues:

Sysparam reads should be fully MT-safe (even writing and reading at the same time should be safe, due to the atomic-update nature of the system), but multiple concurrent writes are not MT-safe and can potentially cause corruption.  It would be good to put some synchronization around this to make it fully threadsafe.
There is also a potential race condition such that if a read call is issued from one task, while another task's write triggers a compaction, then a deletion occurs, then enough additional data is written such that another write causes yet another compaction, all before the other task's read completes (that is two successive compactions happening within the span of executing a single read call), the read may erroneously fail or return bad data.  Unfortunately, I think efficiently protecting against that scenario will actually require inventing some locking constructs that do not currently exist in FreeRTOS (luckily, it seems fairly unlikely to happen in practice)..


Regarding thread-safety, as I mentioned, reads are already completely MT-safe (and realistically I think that's all that should be required to address your concerns about concurrent use within core system routines).  Writes currently are not, but it probably would not be too hard to make it so, I just haven't had time to work on any of this stuff for quite a while (so if somebody else wants to tackle it, feel free).
Note also that the read routines and writing code are fairly independent and you can use the read portion without needing to include any of the writing code in the linked result.  If the core only reads values and does not write them, then any app which does not use the writing capability will not pull in the writing code at all, so it ultimately is not as heavy as it looks for most apps.
Regarding handling failing sectors, currently absolutely nothing in esp-open-rtos (or Espressif's SDK) really handles failing sectors very well either, so I think that's kinda an unreasonable requirement.  Please note that using sysparam has a much much lower wear footprint than the sort of simplistic mechanisms currently used (and which you advocate continuing to use), so sector failure is actually far less likely to occur in the first place.  Considering that with the current design of the OS in pretty much all cases if sectors start failing your module is pretty much hosed anyway, and considering that sysparam can actually detect and recover from a large variety of flash write failures already, I'd say sysparam is ultimately a substantial improvement in this regard.
Frankly, if this isn't a core component, I think it loses a substantial amount of its potential value, and I've basically wasted my time writing it.  Is it absolutely perfect?  No.  Is it a hell of a lot better in almost every way than what we have now, and does it have the potential to add a huge benefit to both core functionality and most user apps?  I believe so.  That, in my opinion should be plenty of reason to put it in the core.  (Honestly, given the code quality of most of the other stuff that's in there currently, I feel the level of perfection people seem to be demanding here is a bit unreasonable, too.)
I joined this project because I wanted to help make something that was substantially better than Espressif's offerings, not just a not-quite-identical clone of an old version of some incomplete stuff somebody else actually wrote most of.  I am beginning to wonder a bit if I'm the only one...",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-240303831,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","Took another good look over the code and understand now that it supports multiple readers and a single writer, thank you.
I recognize that your code is designed to reduce erase cycles but it does not really seem to handle bad sectors, and perhaps a note on this could be added just so code does not depend on it for frequent updates.
Perhaps it could also be noted that writes need to be synchronised and that this is a burden for the application code. But if this is necessary then is there any problem adding a mutual exclusion semaphore for the sysparam code now and using it in the write paths?
Can the double-compaction-while-reading failure be triggered by a single write, or does it need two separate writes? Can an application protect against this somewhat with a yield-delay after each write, and could this be built into the code now?
Guess we need a multi-reader-single-writer lock here, and if freertos does not have this then can a simpler reader count be used protected by the same semaphore as used by the write paths. The readers could check this on entry and if negative just spin waiting for the writer to finish or otherwise increase it, and decreases it on exit. The writers would spin waiting for it to be zero and decrease it until done or just hold the lock.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/kanflo,8,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-240312932,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","As I mentioned before I agree with @foogod that this needs to be part of core. Right now about the only ""setting"" in a typical EOR application is the wifi credentials and that needs to be moved to sysparam if one wants to do anything more with EOR that one off demo applications (I sure do :). Among other the things that need to be stored ""out of bounds"" of the application we have wifi mode (AP/client), AP name, node id and name, node private key, IP/port of FOTA server and optional core dump server. I nailed it down to about 30 parameters needing to be stored in sysparam.
MT needs to be fixed (with one big semaphore to start with if nothing else) and IMHO we are very much better off with this framework than without it. It marks an important step towards building what I consider ""real devices"" using EOR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/ourairquality,9,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-240322855,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","Ok, I suggest merging it and patch in thread safety later. I'd like this sorted too.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/ourairquality,10,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-240654256,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","Gave this a quick try. Used a constant string for the key, and the writes failed, writing all zeros. Added a quick hack buffer in _do_write and wrote to the flash from this buffer and it worked. Could it be that the key string is stored in the flash and that is the problem?
Also tried copying the key string to a buffer in the caller, but this failed too, perhaps gcc being too smart. Guessing this could be a problem for the data too. Do all writes need to be buffered.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/ourairquality,11,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-240669384,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","Here is a suggestion. There was already a buffer allocated for verifying writes which can be used as a write buffer too. If this PR could be landed it would be easier to submit patches.
static inline IRAM sysparam_status_t _do_write(uint32_t addr, const void *data, void *buffer, size_t data_size) {
    memcpy(buffer, data, data_size);
    CHECK_FLASH_OP(sdk_spi_flash_write(addr, buffer, data_size));
    return SYSPARAM_OK;
}

static IRAM sysparam_status_t _write_and_verify(uint32_t addr, const void *data, size_t data_size) {
    int i;
    size_t count;
    sysparam_status_t status = SYSPARAM_OK;
    uint8_t *buf = malloc(VERIFY_BUF_SIZE);

    if (!buf) return SYSPARAM_ERR_NOMEM;
    for (i = 0; i < data_size; i += VERIFY_BUF_SIZE) {
        count = min(data_size - i, VERIFY_BUF_SIZE);
        status = _do_write(addr + i, data + i, buf, count);
        if (status != SYSPARAM_OK) break;
        status = _do_verify(addr + i, data + i, buf, count);
        if (status != SYSPARAM_OK) {
            debug(1, ""Flash write (@ 0x%08x) verify failed!"", addr);
            break;
        }
    }
    free(buf);
    return status;
}",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/kanflo,12,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-240680848,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.",Thanks @ourairquality. I am merging this one so we can start improving it.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,180,2016-08-09T18:20:44Z,2016-08-18T10:07:46Z,2016-08-19T01:10:49Z,MERGED,True,1740,0,6,https://github.com/kanflo,Sysparam by @foogod,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/180,https://github.com/foogod,13,https://github.com/SuperHouse/esp-open-rtos/pull/180#issuecomment-240901954,"As @foogod is restricted on time I got his permission to create a PR for his excellent sysparam framework. I have rebased his branch, squashed his commits and added licensing information as well as fixed a few compiler warnings.","Sorry I didn't have a chance to respond earlier, but regarding a couple of the above questions:

Can the double-compaction-while-reading failure be triggered by a single write, or does it need two separate writes?

It actually requires a series of several very specific things to occur:

A write must occur which triggers a compaction
The compaction must actually free enough space for the write to be successful
There must subsequently be at least one delete which frees additional potential space
There must be another write which triggers another compaction
The second compaction must actually free enough space for the second write to be successful.

So it actually requires (at the very least) a write-delete-write combination, all within the span of a single read in another thread.  What's more, these write and delete operations must be of just the right sizes to trigger two successful compactions in that period.  (Frankly, this all seems unlikely enough in practice that I think it's not worth spending a huge amount of effort on fixing it.. there are far worse issues with some other existing ESP8266 functionality which would probably be a better use of people's time to fix).

Can an application protect against this somewhat with a yield-delay after each write, and could this be built into the code now?

I suppose that's possible, but frankly the only way I see this as likely to happen in the first place is if the write task has higher priority than the reader, and in that case I'm pretty sure taskYIELD will pick the highest-priority available task, which would be the write task again, so I doubt it would actually achieve anything.

Guess we need a multi-reader-single-writer lock here, and if freertos does not have this

Yup, and it doesn't (I checked)

then can a simpler reader count be used protected by the same semaphore as used by the write paths. The readers could check this on entry and if negative just spin waiting for the writer to finish or otherwise increase it, and decreases it on exit. The writers would spin waiting for it to be zero and decrease it until done or just hold the lock.

Maybe, though frankly what you're describing there only needs a little more logic to be a full-fledged (proper) reader-writer lock anyway, so if we're gonna spend the effort to do this I'd recommend just implementing a correct reader-writer lock, which could then potentially be used by apps, etc, as well.

Gave this a quick try. Used a constant string for the key, and the writes failed, writing all zeros. Added a quick hack buffer in _do_write and wrote to the flash from this buffer and it worked. Could it be that the key string is stored in the flash and that is the problem?

Hmm, you know what, when I was first developing this, it was before we had actually implemented the ""move constant strings to flash"" change, which is probably why I never encountered that issue.. it's quite possible now that I think about it that trying to use strings stored in flash would fail in this way.  Yeah, that will definitely need to be fixed.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,181,2016-08-09T18:38:14Z,2016-08-09T20:31:47Z,2016-08-09T20:31:48Z,MERGED,True,1,1,1,https://github.com/kanflo,Updated SPIFFS to 0.3.6,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/181,https://github.com/kanflo,1,https://github.com/SuperHouse/esp-open-rtos/pull/181,As @pellepl just updated SPIFFS to 0.3.6 I saw it fitting to update the submodule in EOR. I currently  have no HW to test on though.,As @pellepl just updated SPIFFS to 0.3.6 I saw it fitting to update the submodule in EOR. I currently  have no HW to test on though.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,181,2016-08-09T18:38:14Z,2016-08-09T20:31:47Z,2016-08-09T20:31:48Z,MERGED,True,1,1,1,https://github.com/kanflo,Updated SPIFFS to 0.3.6,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/181,https://github.com/pellepl,2,https://github.com/SuperHouse/esp-open-rtos/pull/181#issuecomment-238654843,As @pellepl just updated SPIFFS to 0.3.6 I saw it fitting to update the submodule in EOR. I currently  have no HW to test on though.,"Don't fret Johan, it's backwards compatible. Hope you get back to a working
adapter soon 😉",True,{'LAUGH': ['https://github.com/kanflo']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,181,2016-08-09T18:38:14Z,2016-08-09T20:31:47Z,2016-08-09T20:31:48Z,MERGED,True,1,1,1,https://github.com/kanflo,Updated SPIFFS to 0.3.6,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/181,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/181#issuecomment-238679925,As @pellepl just updated SPIFFS to 0.3.6 I saw it fitting to update the submodule in EOR. I currently  have no HW to test on though.,"I have verified. Both examples(spiffs, posix_fs) work ok.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,181,2016-08-09T18:38:14Z,2016-08-09T20:31:47Z,2016-08-09T20:31:48Z,MERGED,True,1,1,1,https://github.com/kanflo,Updated SPIFFS to 0.3.6,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/181,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/181#issuecomment-238681458,As @pellepl just updated SPIFFS to 0.3.6 I saw it fitting to update the submodule in EOR. I currently  have no HW to test on though.,Thanks @sheinz!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,185,2016-08-14T13:18:33Z,2016-08-14T16:50:54Z,2016-08-14T16:50:54Z,MERGED,True,31,0,1,https://github.com/pellepl,spiffs: enable temporal cache for spiffs v 0.3.6,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/185,https://github.com/pellepl,1,https://github.com/SuperHouse/esp-open-rtos/pull/185,"In spiffs 0.3.6, it is recommended to enable the temporal fd cache feature. This optimizes the opening of frequently opened files. The cost is 6 extra bytes per file descriptor.","In spiffs 0.3.6, it is recommended to enable the temporal fd cache feature. This optimizes the opening of frequently opened files. The cost is 6 extra bytes per file descriptor.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,185,2016-08-14T13:18:33Z,2016-08-14T16:50:54Z,2016-08-14T16:50:54Z,MERGED,True,31,0,1,https://github.com/pellepl,spiffs: enable temporal cache for spiffs v 0.3.6,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/185,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/185#issuecomment-239683793,"In spiffs 0.3.6, it is recommended to enable the temporal fd cache feature. This optimizes the opening of frequently opened files. The cost is 6 extra bytes per file descriptor.","Thanks @pellepl for the PR.
I looked into spiffs wiki for this feature details. Really impressive numbers for the esp8266 web server example. And as a web server is the most common use case for spiffs in esp8266 it is good to have the temporal cache enabled.
On my hardware everything works fine, so I will merge it right away.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/186,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.","The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/186#issuecomment-239738074,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.","Hi @ourairquality,
Thanks for the PR. I actually ordered a BME280 module and thought about extending the driver with the support myself :) but haven't received the module yet.
I like the ability to have multiple devices on the same i2c bus!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/186#issuecomment-239741257,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.",Any ideas how to rename the driver to reflect that it is no longer just bmp280 but bme280 as well? May be bmx280 ?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/186#issuecomment-239742787,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.","I suggest renaming it to the bme280 driver, or just leaving it named the bmp280 driver. Our group has chosen the bme280 for our first trial run and it includes the humidity so I am guessing it will be much more popular than the bmp280. The http://purpleair.org/ group appear to have also chosen the bme280 for their stations, and I have seen other reports that it has relatively good accuracy.
Would you like me to renaming it for this PR?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/186#issuecomment-240397052,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.","Renamed bmp280_calib_t to bmp280_t, and removed read_register8.
Do you have any preference for renaming this to the bme280 driver? Using bmx280 might be a problem if a different device with that name is ever released, and I think people will look for 'bme280' support and it might be just a little easier to find if it is all renamed?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/sheinz,6,https://github.com/SuperHouse/esp-open-rtos/pull/186#issuecomment-240399024,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.","Do you have any preference for renaming this to the bme280 driver? Using bmx280 might be a problem if a different device with that name is ever released, and I think people will look for 'bme280' support and it might be just a little easier to find if it is all renamed?

I also though that a new device with name 'bmx...' might be released and we will have to rename it again. I think it's ok to keep it as it is.
There's a README.md with outdated information. Would it be possible to update it to reflect BME280 support?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/186#issuecomment-240412321,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.",Documentation updated. ptal,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/sheinz,8,https://github.com/SuperHouse/esp-open-rtos/pull/186#issuecomment-240472221,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.",I checked the changes with my bmp280 module and it works ok. It's good for merging in my opinion.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,186,2016-08-15T05:46:57Z,2016-08-19T07:31:21Z,2016-08-19T07:32:03Z,MERGED,True,363,173,4,https://github.com/ourairquality,BME280 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/186,https://github.com/sheinz,9,https://github.com/SuperHouse/esp-open-rtos/pull/186#issuecomment-240948644,"The BME280 is close to compatible with the existing BMP280 and extends it with support for measuring humidity, so support has been bundled into the bmp280 driver.
The example now auto-detects the device and displays the humidity for the BME280.
The I2C bus initialization has been moved out of the bmp280 driver to support multiple devices.
The check-id and reset logic has been bundled into the driver initialization. It needs to be re-initialized after reset anyway and the chip-id is need to initialize it, just re-initialize to reset.
Support has been added for multiple devices. The calibration data storage needs to be managed by the caller rather than static data. The caller can choose the I2C address to allow two BMx280 devices to be used on the same I2C bus.
An interface has been added to return the measurement values in an integer fixed float format. The float format interface is still there.
All the values are read in one I2C transaction to ensure they are a consistent set.",Thanks @ourairquality!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,187,2016-08-15T11:01:50Z,2016-08-17T11:41:26Z,2016-08-17T11:41:27Z,MERGED,True,30,24,4,https://github.com/ourairquality,iomux_set_function: remove the IOMUX_FUNC transform of the func argument,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/187,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/187,The allows the IOMUX_GPIOFUNC definitions to be used here which seems to be the result of discussions in #171,The allows the IOMUX_GPIOFUNC definitions to be used here which seems to be the result of discussions in #171,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,189,2016-08-16T08:32:35Z,2016-08-17T04:59:31Z,2016-08-17T04:59:31Z,MERGED,True,877,3,14,https://github.com/sheinz,"i2s_dma wrapper, ws2812_i2s driver and examples.",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/189,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/189,"This PR includes:

Wrapper library i2s_dma that encapsulates i2s + dma initialization.
ws2812_i2s driver. It uses i2s_dma library to control strip of WS2812 leds.
ws2812_i2s example. It demonstrates usage of ws2812_i2s driver.
i2s_audio example. It demonstrates usage of i2s_dma library to output sound using I2S DAC chip.

There's a video of ws2812_i2s example.","This PR includes:

Wrapper library i2s_dma that encapsulates i2s + dma initialization.
ws2812_i2s driver. It uses i2s_dma library to control strip of WS2812 leds.
ws2812_i2s example. It demonstrates usage of ws2812_i2s driver.
i2s_audio example. It demonstrates usage of i2s_dma library to output sound using I2S DAC chip.

There's a video of ws2812_i2s example.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,189,2016-08-16T08:32:35Z,2016-08-17T04:59:31Z,2016-08-17T04:59:31Z,MERGED,True,877,3,14,https://github.com/sheinz,"i2s_dma wrapper, ws2812_i2s driver and examples.",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/189,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/189#issuecomment-240313625,"This PR includes:

Wrapper library i2s_dma that encapsulates i2s + dma initialization.
ws2812_i2s driver. It uses i2s_dma library to control strip of WS2812 leds.
ws2812_i2s example. It demonstrates usage of ws2812_i2s driver.
i2s_audio example. It demonstrates usage of i2s_dma library to output sound using I2S DAC chip.

There's a video of ws2812_i2s example.","A useful addition, thanks! I have no LEDs to test with but definitely need to order some.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,190,2016-08-17T13:53:13Z,2016-08-19T07:28:10Z,2016-08-19T07:28:10Z,MERGED,True,14,2,2,https://github.com/sheinz,Fix for system_deep_sleep ignoring argument,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/190,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/190,"Fix for #176.
The problem was  that sdk_os_timer_ timers use FreeRTOS timers underneath which do not pass a timer argument to the callback function. They pass FreeRTOS timer handle which should be used in function pvTimerGetTimerID to extract the actual argument.
sdk_ets_timer_ timers do not use FreeRTOS timers and pass a timer argument directly into a callback function.","Fix for #176.
The problem was  that sdk_os_timer_ timers use FreeRTOS timers underneath which do not pass a timer argument to the callback function. They pass FreeRTOS timer handle which should be used in function pvTimerGetTimerID to extract the actual argument.
sdk_ets_timer_ timers do not use FreeRTOS timers and pass a timer argument directly into a callback function.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,190,2016-08-17T13:53:13Z,2016-08-19T07:28:10Z,2016-08-19T07:28:10Z,MERGED,True,14,2,2,https://github.com/sheinz,Fix for system_deep_sleep ignoring argument,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/190,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/190#issuecomment-240422525,"Fix for #176.
The problem was  that sdk_os_timer_ timers use FreeRTOS timers underneath which do not pass a timer argument to the callback function. They pass FreeRTOS timer handle which should be used in function pvTimerGetTimerID to extract the actual argument.
sdk_ets_timer_ timers do not use FreeRTOS timers and pass a timer argument directly into a callback function.","This looks like a good fix to me, at least until some later time when more of this can be rewritten.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,191,2016-08-18T10:44:40Z,2016-08-25T12:30:39Z,2016-08-25T12:31:47Z,CLOSED,False,5,6,1,https://github.com/ourairquality,"iomux_set_function: fix merge, code comments.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/191,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/191,Fixes the merge from #187 Just a code comment correction.,Fixes the merge from #187 Just a code comment correction.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,191,2016-08-18T10:44:40Z,2016-08-25T12:30:39Z,2016-08-25T12:31:47Z,CLOSED,False,5,6,1,https://github.com/ourairquality,"iomux_set_function: fix merge, code comments.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/191,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/191#issuecomment-242366993,Fixes the merge from #187 Just a code comment correction.,I don't see much difference between those comment blocks. Also the names of the parameter func and iomux_func are pretty much the same. So. I would prefer to leave the function as it is now.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,191,2016-08-18T10:44:40Z,2016-08-25T12:30:39Z,2016-08-25T12:31:47Z,CLOSED,False,5,6,1,https://github.com/ourairquality,"iomux_set_function: fix merge, code comments.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/191,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/191#issuecomment-242368941,Fixes the merge from #187 Just a code comment correction.,"Ok, thought it was a merge error, perhaps you improved it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,192,2016-08-18T10:53:33Z,2016-08-21T06:03:51Z,2016-08-21T06:03:51Z,CLOSED,False,17,17,1,https://github.com/ourairquality,sysparam: buffer writes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/192,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/192,"If the source is in the flash then the write to the flash seems to just write zeros, and since it is common for the key to be a constant string, buffer all writes.
Perhaps someone could check if this makes sense?","If the source is in the flash then the write to the flash seems to just write zeros, and since it is common for the key to be a constant string, buffer all writes.
Perhaps someone could check if this makes sense?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,192,2016-08-18T10:53:33Z,2016-08-21T06:03:51Z,2016-08-21T06:03:51Z,CLOSED,False,17,17,1,https://github.com/ourairquality,sysparam: buffer writes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/192,https://github.com/foogod,2,https://github.com/SuperHouse/esp-open-rtos/pull/192#issuecomment-240903169,"If the source is in the flash then the write to the flash seems to just write zeros, and since it is common for the key to be a constant string, buffer all writes.
Perhaps someone could check if this makes sense?","Aside from my comment about unnecessarily removing useful braces, this looks like a reasonable approach to solving the problem..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,192,2016-08-18T10:53:33Z,2016-08-21T06:03:51Z,2016-08-21T06:03:51Z,CLOSED,False,17,17,1,https://github.com/ourairquality,sysparam: buffer writes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/192,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/192#issuecomment-241240715,"If the source is in the flash then the write to the flash seems to just write zeros, and since it is common for the key to be a constant string, buffer all writes.
Perhaps someone could check if this makes sense?",Moved this along a lot further in #195,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,193,2016-08-18T10:59:30Z,2016-08-19T02:08:13Z,2016-08-19T02:08:13Z,CLOSED,False,3,3,1,https://github.com/ourairquality,sysparam: remove IRAM declarations.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/193,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/193,"Not sure why some of the functions had IRAM declarations, it appears unnecessary. These were in the flash write path but well above the critical section, and writes are expected to be a cold path, so perhaps it would be better to save some RAM.","Not sure why some of the functions had IRAM declarations, it appears unnecessary. These were in the flash write path but well above the critical section, and writes are expected to be a cold path, so perhaps it would be better to save some RAM.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,193,2016-08-18T10:59:30Z,2016-08-19T02:08:13Z,2016-08-19T02:08:13Z,CLOSED,False,3,3,1,https://github.com/ourairquality,sysparam: remove IRAM declarations.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/193,https://github.com/foogod,2,https://github.com/SuperHouse/esp-open-rtos/pull/193#issuecomment-240904242,"Not sure why some of the functions had IRAM declarations, it appears unnecessary. These were in the flash write path but well above the critical section, and writes are expected to be a cold path, so perhaps it would be better to save some RAM.","These were set IRAM as a performance optimization.  Since (I believe) flash writes completely blow away the IROM cache, switching back and forth between IROM and flash IO routines repeatedly can potentially be quite a performance hit.  The _write_and_verify process can potentially involve quite a number of these calls depending on the size of the data being written.
These routines are not very large.  I would expect the savings to be on the order of a couple of tens of bytes..  At the very least, I would recommend we do some performance tests to see whether the speed impact is significant or not first.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,193,2016-08-18T10:59:30Z,2016-08-19T02:08:13Z,2016-08-19T02:08:13Z,CLOSED,False,3,3,1,https://github.com/ourairquality,sysparam: remove IRAM declarations.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/193,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/193#issuecomment-240904972,"Not sure why some of the functions had IRAM declarations, it appears unnecessary. These were in the flash write path but well above the critical section, and writes are expected to be a cold path, so perhaps it would be better to save some RAM.","But these are slow paths, called a few times in the life of the device, so it's not worth bothering about. If there were any significant performance impact then these would be updating too quickly and the flash would wear out in a short period.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,193,2016-08-18T10:59:30Z,2016-08-19T02:08:13Z,2016-08-19T02:08:13Z,CLOSED,False,3,3,1,https://github.com/ourairquality,sysparam: remove IRAM declarations.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/193,https://github.com/foogod,4,https://github.com/SuperHouse/esp-open-rtos/pull/193#issuecomment-240907985,"Not sure why some of the functions had IRAM declarations, it appears unnecessary. These were in the flash write path but well above the critical section, and writes are expected to be a cold path, so perhaps it would be better to save some RAM.","That's not necessarily true, and it's making some big assumptions about usage patterns.
Keep in mind that the Winbond flash chips on these devices are rated to a minimum of 100,000 erase cycles (and I've heard reports that most actually last many times longer than the minimum).  Even using a modest 8-sector sysparam region (16KB of usable parameter space), with the default 64 byte read/write buffer we're using, that comes out to over 50 million calls to the flash read/write functions before we're in danger of wearing anything out (and more realistically may be closer to 500 million in practice).  If even a small portion of those 50 million happen to be part of a single write-and-verify, performance could be an issue.
It's quite possible that somebody would develop an application that might write a lot of data to a larger sysparam region intermittently (i.e. ""burstily"") and not wear out the flash for years, but still have its performance during peak (likely most critical) times substantially impeded if the sysparam write routines are unnecessarily slow.  Before we try to save a measly couple of bytes of IRAM, I'd like to at least know how much of an impact that might incur (and how much IRAM space it actually saves).
It's possible that it's all irrelevant and the speed difference is not that significant, but I haven't tested it so I don't think we can just assume that.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,193,2016-08-18T10:59:30Z,2016-08-19T02:08:13Z,2016-08-19T02:08:13Z,CLOSED,False,3,3,1,https://github.com/ourairquality,sysparam: remove IRAM declarations.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/193,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/193#issuecomment-240909328,"Not sure why some of the functions had IRAM declarations, it appears unnecessary. These were in the flash write path but well above the critical section, and writes are expected to be a cold path, so perhaps it would be better to save some RAM.","Even if it added 1 second and was updated each hour it would still be insignificant. Anyway it's not a big issue, nothing broken.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,194,2016-08-18T11:38:58Z,2016-08-21T05:47:40Z,2016-08-24T05:45:45Z,MERGED,True,17,2,1,https://github.com/ourairquality,sysparam: add a semaphore to synchronize writers.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/194,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/194,"This synchronizes writers, but not yet readers.
It appears the code supports multiple readers and a single writer. There seems to be an issue with multiple compaction still to be explored, but this PR is start to at least synchronize the writers.","This synchronizes writers, but not yet readers.
It appears the code supports multiple readers and a single writer. There seems to be an issue with multiple compaction still to be explored, but this PR is start to at least synchronize the writers.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,194,2016-08-18T11:38:58Z,2016-08-21T05:47:40Z,2016-08-24T05:45:45Z,MERGED,True,17,2,1,https://github.com/ourairquality,sysparam: add a semaphore to synchronize writers.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/194,https://github.com/foogod,2,https://github.com/SuperHouse/esp-open-rtos/pull/194#issuecomment-240905086,"This synchronizes writers, but not yet readers.
It appears the code supports multiple readers and a single writer. There seems to be an issue with multiple compaction still to be explored, but this PR is start to at least synchronize the writers.","This seems reasonable to me.  Note that there shouldn't be any need to synchronize readers, since with the atomic update process they are entirely threadsafe, even when there is a writer making updates at the same time, so we should only need to protect against multiple simultaneous writes..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,194,2016-08-18T11:38:58Z,2016-08-21T05:47:40Z,2016-08-24T05:45:45Z,MERGED,True,17,2,1,https://github.com/ourairquality,sysparam: add a semaphore to synchronize writers.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/194,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/194#issuecomment-240906793,"This synchronizes writers, but not yet readers.
It appears the code supports multiple readers and a single writer. There seems to be an issue with multiple compaction still to be explored, but this PR is start to at least synchronize the writers.","Looking over the read paths there seem to be more thread safety issues, and I think readers need locking too. For example consider _find_entry accessing _sysparam_info.cur_base which a writer could change.
I don't buy the argument that other code has more significant issues so this code need not be safe, and I doubt other people do either.
Locking readers might mean that the sysparam_iter_* functions need to go, or be some separate reflective debug code and not for production use. Perhaps better to change the API to return a list of the key names, rather than an iterator, or to return a key matching a given index, anything atomic.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,194,2016-08-18T11:38:58Z,2016-08-21T05:47:40Z,2016-08-24T05:45:45Z,MERGED,True,17,2,1,https://github.com/ourairquality,sysparam: add a semaphore to synchronize writers.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/194,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/194#issuecomment-241240307,"This synchronizes writers, but not yet readers.
It appears the code supports multiple readers and a single writer. There seems to be an issue with multiple compaction still to be explored, but this PR is start to at least synchronize the writers.","Thanks for this fix @ourairquality. I guess you considered one single semaphore for the entire sysparam? I guess it boils down to what usage one sees in sysparam. Personally, I do not regard it as a high traffic data store. Thus, having a global lock would be fine by me. Others may of course have a different view of sysparam and therefore want a more fine grain locking, for performance.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,194,2016-08-18T11:38:58Z,2016-08-21T05:47:40Z,2016-08-24T05:45:45Z,MERGED,True,17,2,1,https://github.com/ourairquality,sysparam: add a semaphore to synchronize writers.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/194,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/194#issuecomment-241240670,"This synchronizes writers, but not yet readers.
It appears the code supports multiple readers and a single writer. There seems to be an issue with multiple compaction still to be explored, but this PR is start to at least synchronize the writers.",@kanflo The changes in #195 include better thread safety support also for reads. Perhaps I should have closed this.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,194,2016-08-18T11:38:58Z,2016-08-21T05:47:40Z,2016-08-24T05:45:45Z,MERGED,True,17,2,1,https://github.com/ourairquality,sysparam: add a semaphore to synchronize writers.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/194,https://github.com/kanflo,6,https://github.com/SuperHouse/esp-open-rtos/pull/194#issuecomment-241963508,"This synchronizes writers, but not yet readers.
It appears the code supports multiple readers and a single writer. There seems to be an issue with multiple compaction still to be explored, but this PR is start to at least synchronize the writers.","Bummer, I was coming to #195. Perhaps those changes could be broken out of that PR?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,195,2016-08-19T05:04:28Z,2016-08-23T00:15:30Z,2016-08-24T10:40:41Z,CLOSED,False,185,209,3,https://github.com/ourairquality,sysparam: rework.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/195,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/195,"Here's my wip changes to the sysparam code fwiw:
Adds a semaphore used by readers are writers.
Fixes writing to the flash from constant data stored in the flash, using a bounce buffer.
Removed memory allocation from most read and write paths. Only read paths that return a blob of data allocate memory now, and the iterator.
Store small integers as binary values, avoiding parsing and formatting in these paths.","Here's my wip changes to the sysparam code fwiw:
Adds a semaphore used by readers are writers.
Fixes writing to the flash from constant data stored in the flash, using a bounce buffer.
Removed memory allocation from most read and write paths. Only read paths that return a blob of data allocate memory now, and the iterator.
Store small integers as binary values, avoiding parsing and formatting in these paths.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,195,2016-08-19T05:04:28Z,2016-08-23T00:15:30Z,2016-08-24T10:40:41Z,CLOSED,False,185,209,3,https://github.com/ourairquality,sysparam: rework.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/195,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/195#issuecomment-241241214,"Here's my wip changes to the sysparam code fwiw:
Adds a semaphore used by readers are writers.
Fixes writing to the flash from constant data stored in the flash, using a bounce buffer.
Removed memory allocation from most read and write paths. Only read paths that return a blob of data allocate memory now, and the iterator.
Store small integers as binary values, avoiding parsing and formatting in these paths.","There are dependent overlapping changes here, that is why I gave up on smaller patches. I doubt I have time to split it all up and incrementally get this from A to B, it's just my working version fwiw.
This set does design for small size and safety, probably at the expense of performance, for example it uses small stack allocated bounce buffers which allows it to avoid dynamic memory allocation in most paths, and this in turn allowed other simplifications.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,195,2016-08-19T05:04:28Z,2016-08-23T00:15:30Z,2016-08-24T10:40:41Z,CLOSED,False,185,209,3,https://github.com/ourairquality,sysparam: rework.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/195,https://github.com/foogod,3,https://github.com/SuperHouse/esp-open-rtos/pull/195#issuecomment-241584914,"Here's my wip changes to the sysparam code fwiw:
Adds a semaphore used by readers are writers.
Fixes writing to the flash from constant data stored in the flash, using a bounce buffer.
Removed memory allocation from most read and write paths. Only read paths that return a blob of data allocate memory now, and the iterator.
Store small integers as binary values, avoiding parsing and formatting in these paths.","I haven't had a chance to look over all of this in thorough detail, but a couple of things I noticed:

I see you've re-removed the IRAM declarations we had already been discussing in the other PR which you withdrew.  I'm assuming this was inadvertent rather than a deliberate attempt to sneak something in that I'd already mentioned I had some issues with.
The locking around the basic read routines is, I'm fairly certain, completely unnecessary (at least as I originally wrote them, not sure if your changes change any of that), but I suppose ultimately it doesn't really hurt anything too much..  Earlier you had mentioned the iter routines, which I haven't had a chance to go back and look at, but I acknowledge may have some thread issues, but it looks like you haven't attempted to tackle that here?

I understand the issues with multiple interdependent changes, but the size of this PR makes it really hard to evaluate properly.  If you could find some way to break it up even a bit it might help make the process move quicker, otherwise it may take a while for folks to have enough time to properly review this mass of changes..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,195,2016-08-19T05:04:28Z,2016-08-23T00:15:30Z,2016-08-24T10:40:41Z,CLOSED,False,185,209,3,https://github.com/ourairquality,sysparam: rework.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/195,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/195#issuecomment-241590040,"Here's my wip changes to the sysparam code fwiw:
Adds a semaphore used by readers are writers.
Fixes writing to the flash from constant data stored in the flash, using a bounce buffer.
Removed memory allocation from most read and write paths. Only read paths that return a blob of data allocate memory now, and the iterator.
Store small integers as binary values, avoiding parsing and formatting in these paths.","Sorry, I don't like the tone of this discussion. We don't have to agree, I just need something that works and fits my needs so I'll keep it elsewhere. Again, thank you for the sysparam contribution, it's a great step to be able to get all the parameters in this database.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,195,2016-08-19T05:04:28Z,2016-08-23T00:15:30Z,2016-08-24T10:40:41Z,CLOSED,False,185,209,3,https://github.com/ourairquality,sysparam: rework.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/195,https://github.com/kanflo,5,https://github.com/SuperHouse/esp-open-rtos/pull/195#issuecomment-241966243,"Here's my wip changes to the sysparam code fwiw:
Adds a semaphore used by readers are writers.
Fixes writing to the flash from constant data stored in the flash, using a bounce buffer.
Removed memory allocation from most read and write paths. Only read paths that return a blob of data allocate memory now, and the iterator.
Store small integers as binary values, avoiding parsing and formatting in these paths.","I am sorry for feel that way @ourairquality. Very often we just need something that works as you say. Going the extra mile and turning ""what I need"" into ""something that others may benefit from"" is IMHO sometimes painful but in the end quite rewarding. One of the hurdles you need to pass is the scrutinization of your work and that can also be a painful experience. For my part I have always found that the result actually was better code than what I originally submitted.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,195,2016-08-19T05:04:28Z,2016-08-23T00:15:30Z,2016-08-24T10:40:41Z,CLOSED,False,185,209,3,https://github.com/ourairquality,sysparam: rework.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/195,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/195#issuecomment-242023006,"Here's my wip changes to the sysparam code fwiw:
Adds a semaphore used by readers are writers.
Fixes writing to the flash from constant data stored in the flash, using a bounce buffer.
Removed memory allocation from most read and write paths. Only read paths that return a blob of data allocate memory now, and the iterator.
Store small integers as binary values, avoiding parsing and formatting in these paths.","@kanflo It's not personal, I just don't have much time, perhaps some other small isolated patches. I took another look at it to see if something could be split out and it's another block of work, the read locking changes requires rewriting the functions, just trivial stuff to make sure the lock is released on all paths, but it's on top of other changes. Also you need to decide if you would want to follow the same direction and use the small stack allocated buffers, take the simplifications and safety, perhaps lose some performance - subjective matters I would rather sit out.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,196,2016-08-20T13:24:32Z,2016-08-22T04:58:38Z,2016-08-22T04:58:38Z,MERGED,True,4,1,2,https://github.com/pfalcon,esp8266 headers: A new interrupt no and a new WDT register,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/196,https://github.com/pfalcon,1,https://github.com/SuperHouse/esp-open-rtos/pull/196,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,196,2016-08-20T13:24:32Z,2016-08-22T04:58:38Z,2016-08-22T04:58:38Z,MERGED,True,4,1,2,https://github.com/pfalcon,esp8266 headers: A new interrupt no and a new WDT register,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/196,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/196#issuecomment-241228710,,"Thanks @pfalcon for the PR.
I checked WDT.VAL value on my device. And I discovered the following:

The value is decremented from 0x7FFFFFB. I think 0x7FFFFFF is the initial value after reset.
The decrement frequency is 80MHz and independent from the CPU clock.
Writes to this registers seems to be ignored.

Do you have more information on WDEV_FIQ interrupt?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,196,2016-08-20T13:24:32Z,2016-08-22T04:58:38Z,2016-08-22T04:58:38Z,MERGED,True,4,1,2,https://github.com/pfalcon,esp8266 headers: A new interrupt no and a new WDT register,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/196,https://github.com/pfalcon,3,https://github.com/SuperHouse/esp-open-rtos/pull/196#issuecomment-241229758,,"The decrement frequency is 80MHz and independent from the CPU clock.

How did you figure that out?

The value is decremented from 0x7FFFFFB. I think 0x7FFFFFF is the initial value after reset.

Well, it definitely counts from *F. One way you could measure frequency above is by reading consecutively and comparing wdt counter decrement with instruction cycles. But then you would allow for the fact that between feeding and next read it already counts down a bit. You can see *F value there by disable WDT countdown (0x38 to *_CTRL).

Do you have more information on WDEV_FIQ interrupt?

Nope. What more information you'd like to have? It's an IRQ from WiFi controller, definitely.
The idea is to enumerate all IRQs in ESP8266, According to bootrom, there're 14 interrupts, the last one however is level 3, not level 1.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,196,2016-08-20T13:24:32Z,2016-08-22T04:58:38Z,2016-08-22T04:58:38Z,MERGED,True,4,1,2,https://github.com/pfalcon,esp8266 headers: A new interrupt no and a new WDT register,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/196,https://github.com/pfalcon,4,https://github.com/SuperHouse/esp-open-rtos/pull/196#issuecomment-241230798,,"Well, that level 3 Interrupt is NMI (based on its handler in bootrom being ""rfi      0x3"").",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,196,2016-08-20T13:24:32Z,2016-08-22T04:58:38Z,2016-08-22T04:58:38Z,MERGED,True,4,1,2,https://github.com/pfalcon,esp8266 headers: A new interrupt no and a new WDT register,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/196,https://github.com/pfalcon,5,https://github.com/SuperHouse/esp-open-rtos/pull/196#issuecomment-241231073,,"And level 2 is debug interrupt, all fits nicely with Xtensa arch refman.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,196,2016-08-20T13:24:32Z,2016-08-22T04:58:38Z,2016-08-22T04:58:38Z,MERGED,True,4,1,2,https://github.com/pfalcon,esp8266 headers: A new interrupt no and a new WDT register,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/196,https://github.com/sheinz,6,https://github.com/SuperHouse/esp-open-rtos/pull/196#issuecomment-241240571,,"How did you figure that out?

WDT.FEED = WDT_FEED_MAGIC;
prev = WDT.VAL;
sdk_os_delay_us(100);
uint32_t diff = prev - WDT.VAL;
printf(""wdt diff: %d\n"",);

Which outputs WDT decrements for roughly 100 us. I tried different delays and the result is consistent with 80 WDT ticks per 1 us.
I also tried changing CPU frequency but WDT decrements didn't change.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,198,2016-08-21T20:57:04Z,2016-08-27T20:23:27Z,2016-08-27T20:23:27Z,MERGED,True,1,4,2,https://github.com/vlad-ivanov-name,FreeRTOS: Drop reference to xthal_set_intset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/198,https://github.com/vlad-ivanov-name,1,https://github.com/SuperHouse/esp-open-rtos/pull/198,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,198,2016-08-21T20:57:04Z,2016-08-27T20:23:27Z,2016-08-27T20:23:27Z,MERGED,True,1,4,2,https://github.com/vlad-ivanov-name,FreeRTOS: Drop reference to xthal_set_intset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/198,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/198#issuecomment-241964046,,Hi @resetnow. Could you please elaborate on the need for removing xthal_set_intset?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,198,2016-08-21T20:57:04Z,2016-08-27T20:23:27Z,2016-08-27T20:23:27Z,MERGED,True,1,4,2,https://github.com/vlad-ivanov-name,FreeRTOS: Drop reference to xthal_set_intset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/198,https://github.com/vlad-ivanov-name,3,https://github.com/SuperHouse/esp-open-rtos/pull/198#issuecomment-241983653,,"Hi @kanflo — I saw it being discussed here, and since xthal_set_intset is just one instruction, I thought that eliminating a library dependency could be good for the code size.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,198,2016-08-21T20:57:04Z,2016-08-27T20:23:27Z,2016-08-27T20:23:27Z,MERGED,True,1,4,2,https://github.com/vlad-ivanov-name,FreeRTOS: Drop reference to xthal_set_intset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/198,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/198#issuecomment-242541536,,Thanks for the pointer @resetnow. Do you have any input @foogod as you where part of the original discussion?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,198,2016-08-21T20:57:04Z,2016-08-27T20:23:27Z,2016-08-27T20:23:27Z,MERGED,True,1,4,2,https://github.com/vlad-ivanov-name,FreeRTOS: Drop reference to xthal_set_intset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/198,https://github.com/projectgus,5,https://github.com/SuperHouse/esp-open-rtos/pull/198#issuecomment-242639785,,"This looks good, it'd be nice not to have to link libhal (some toolchains don't ship it.)
We have a convenience macro for using WSR from C here: core/include/xtensa_ops.h - is it possible to use this? (I noticed you used register contraint 'a' not 'r' in the PR, but I'm not sure if this makes any difference to the output on xtensa.)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,198,2016-08-21T20:57:04Z,2016-08-27T20:23:27Z,2016-08-27T20:23:27Z,MERGED,True,1,4,2,https://github.com/vlad-ivanov-name,FreeRTOS: Drop reference to xthal_set_intset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/198,https://github.com/jcmvbkbc,6,https://github.com/SuperHouse/esp-open-rtos/pull/198#issuecomment-242641655,,"I noticed you used register contraint 'a' not 'r' in the PR, but I'm not sure if this makes any difference to the output on xtensa

There's no difference in call0 ABI. In windowed ABI 'a' constraint is 'all registers except the stack pointer'.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,198,2016-08-21T20:57:04Z,2016-08-27T20:23:27Z,2016-08-27T20:23:27Z,MERGED,True,1,4,2,https://github.com/vlad-ivanov-name,FreeRTOS: Drop reference to xthal_set_intset,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/198,https://github.com/vlad-ivanov-name,7,https://github.com/SuperHouse/esp-open-rtos/pull/198#issuecomment-242670414,,I have updated the code to use the macro from xtensa_ops.h,True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,199,2016-08-24T10:33:52Z,2016-08-25T21:11:59Z,2016-08-26T02:18:50Z,MERGED,True,14,1,1,https://github.com/ourairquality,sysparam editor: add an echo command.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/199,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/199,"Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.","Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,199,2016-08-24T10:33:52Z,2016-08-25T21:11:59Z,2016-08-26T02:18:50Z,MERGED,True,14,1,1,https://github.com/ourairquality,sysparam editor: add an echo command.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/199,https://github.com/yesco,2,https://github.com/SuperHouse/esp-open-rtos/pull/199#issuecomment-242267818,"Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.","Hi
I would suggest that it doesn't toggle as the state may not be known.
Better to provide on off methods for predictable behavior.
One issue with the Hayes commands for esp8266 is that it's difficult to
assert a state or make sure something starts in the state you want to have,
when using it programmatically.
Anyway just an idea,
cheers
On Aug 24, 2016 3:34 AM, ""Our Air Quality"" notifications@github.com wrote:

Helpful to be able to disable echo when sending commands fast, so that the
editor can consume them faster than they arrive. This adds and 'echo'
command to toggle echo on and off.
You can view, comment on, or merge this pull request online at:
#199
Commit Summary

sysparam editor: add an echo command.

File Changes

M examples/sysparam_editor/sysparam_editor.c
https://github.com/SuperHouse/esp-open-rtos/pull/199/files#diff-0
(11)

Patch Links:

https://github.com/SuperHouse/esp-open-rtos/pull/199.patch
https://github.com/SuperHouse/esp-open-rtos/pull/199.diff

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#199, or mute the thread
https://github.com/notifications/unsubscribe-auth/ACBfmt5bwiSoA07KgmYv8jgTZSWAAXivks5qjB4SgaJpZM4Jr3hj
.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,199,2016-08-24T10:33:52Z,2016-08-25T21:11:59Z,2016-08-26T02:18:50Z,MERGED,True,14,1,1,https://github.com/ourairquality,sysparam editor: add an echo command.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/199,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/199#issuecomment-242283237,"Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.",@yesco Sounds like a good idea thanks. Do you have a suggestion: echo-on echo-off or echo 0 echo 1 etc?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,199,2016-08-24T10:33:52Z,2016-08-25T21:11:59Z,2016-08-26T02:18:50Z,MERGED,True,14,1,1,https://github.com/ourairquality,sysparam editor: add an echo command.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/199,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/199#issuecomment-242296783,"Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.",@yesco Changed to echo-on and echo-off fwiw.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,199,2016-08-24T10:33:52Z,2016-08-25T21:11:59Z,2016-08-26T02:18:50Z,MERGED,True,14,1,1,https://github.com/ourairquality,sysparam editor: add an echo command.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/199,https://github.com/sheinz,5,https://github.com/SuperHouse/esp-open-rtos/pull/199#issuecomment-242365566,"Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.",This looks good to me. I've tried the example. Works great.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,199,2016-08-24T10:33:52Z,2016-08-25T21:11:59Z,2016-08-26T02:18:50Z,MERGED,True,14,1,1,https://github.com/ourairquality,sysparam editor: add an echo command.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/199,https://github.com/kanflo,6,https://github.com/SuperHouse/esp-open-rtos/pull/199#issuecomment-242541922,"Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.","Thanks @ourairquality. Just out of curiosity, are you testing sysparam for speed since you need to turn off echoing?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,199,2016-08-24T10:33:52Z,2016-08-25T21:11:59Z,2016-08-26T02:18:50Z,MERGED,True,14,1,1,https://github.com/ourairquality,sysparam editor: add an echo command.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/199,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/199#issuecomment-242567822,"Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.","@kanflo Not looking at performance. My application loads parameters into RAM at startup, and writes very infrequently, performance is not an issue for me, just needed it lightweight and safe. The echo was a problem using the editor to quickly get some automation running because the delay caused the uart input buffer to overflow.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,199,2016-08-24T10:33:52Z,2016-08-25T21:11:59Z,2016-08-26T02:18:50Z,MERGED,True,14,1,1,https://github.com/ourairquality,sysparam editor: add an echo command.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/199,https://github.com/yesco,8,https://github.com/SuperHouse/esp-open-rtos/pull/199#issuecomment-242606985,"Helpful to be able to disable echo when sending commands fast, so that the editor can consume them faster than they arrive. This adds and 'echo' command to toggle echo on and off.",Good. Cheers,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/202,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-242903874,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","Hi @Zaltora,
Thanks for contributing!
I didn't quite get why is our current i2c library slow? What is the bottleneck in it?
If there is a key that allows you to write a fast i2c library can we apply it in our current library?
I'm not sure if we need two libraries that do the same but one is fast and another is slow.
Another suggestion is to have at least one example with each new library that uses it. So, the library code is actually compiled during Travis CI check.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-242938490,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","Thanks for the i2c improvement @Zaltora . Looking at the old driver (that I actually submitted but I do not feel religious about these things) it seems this one inlines i2c_[read|write]_bit and optionally uses a volatile for loop for short delays. I agree with @sheinz we should not have two separate i2c drivers but the nice improvements from this one could easily go into the current one. One thing I like about the original ""Wikipedia i2c driver"" is the multitude of comments explaining how i2c actually works.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-243779860,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","i Think it is Clock stretching and multi master support than make original lib slow.  wikipedia describe all case but they are very uncommon. Integrate them slow everything.
Into fast lib clock stretching still exist but only at the end of the transmission because the slave device generally stretch the line to be able to compute without interrupt after receive data. Orignial lib test it all time when transmitting.
Multi master is maybe used on I2C but it is not the principal purpose of this link.
I doing some test on lib with different delay:
sdk_os_delay_us(1);
original lib : ~90kHz
fast lib : ~370kHz
for (volatile uint32_t __j = 4; __j > 0; __j--) ; at 160 MHz
original lib : ~110kHz
fast lib : ~900kHz
I do one fix and create an example (a i2c scan) . It is my first pull request, i am not sure what to do. What you suggest ?
replace original lib and just keep the principal I2C transmission purpose (one master , multiple slaves) ?
trying to improve the original (i dont think to had same performance) ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-244022632,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","It's not clear that clock stretching is causing the performance issue, the loops exit as soon as the SCL is read as high. Could the overhead of just reading the SCL line cause such a performance issue? If so then some inlining might help. I think the current driver should be improved to the limited, using inlining etc, and the performance bottlenecks understood before compromising the generality.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-244050211,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock",@Zaltora Could you give the change in PR #214 a try. It seems to make a big improvement here. You might also want to change the delay. Testing on only a single i2c device so far.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-245257337,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock",@Zaltora Might be best to create an new branch and an new PR for changes to the bmp280 driver.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/Zaltora,8,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-245257965,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","OOO, sry, i want create a new pull request for bmp280. I am pretty new with git and github. I don't remenber validate this !! i will fix it",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/ourairquality,9,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-245272380,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","@Zaltora So git checkout master, git checkout -b <new branch name>, edit, git commit, git push origin <new branch name>",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/projectgus,10,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-246511584,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","All commits in this branch seem to have been merged or reverted, should we close this PR @Zaltora ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,202,2016-08-26T08:56:59Z,2016-10-16T21:38:32Z,2016-10-16T21:38:32Z,CLOSED,False,0,0,0,https://github.com/Zaltora,faster i2c library,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/202,https://github.com/Zaltora,11,https://github.com/SuperHouse/esp-open-rtos/pull/202#issuecomment-247261809,"I create a new i2c library based on other library that exist for esp8266. API is similar with the current i2C library to easily change. I made this library for faster communication (example: ssd1306, sensors )
It is not as complete as the original and there are improvements to do. It is an alternative to the current i2c, not a replacement.
You can use ""for loop"" (from ws2812 library) and select , 400kHz, 700kHZ ,... ,1.5MHz ( CPU clock dependency )
You can use sdk_os_delay_us() and go up to 300kHz.
I will do measurement for each significant value and upload it as enum for CPU 80Mhz and 160Mhz clock","Yes, i will probably propose change on current i2c library now :) (if needed)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/203,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?","Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/203#issuecomment-242723210,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?","A lot of boards are 32Mbit, but only some are DIO (and it's a performance regression for anyone who supports QIO, only half the SPI flash read performance.)
Did you know you can create a local.mk file in your esp-open-rtos directory and set any defaults you want to override in there?",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/203#issuecomment-242734102,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?","@projectgus Ok, thanks, so now just proposing to change the size to 32M, keeping the mode as QIO. All the nodemcu style boards I have work with QIO. The intention was to just reduce the number of configuration issues for people getting started in the common cases.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/203#issuecomment-242938715,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?",I second changing to 32M as default.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/foogod,5,https://github.com/SuperHouse/esp-open-rtos/pull/203#issuecomment-243500022,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?","The problem with this is that if the user is using a device that is not 32Mbit (only 16), and builds something that needs more space than what their hardware can support, with this change esp-open-rtos will happily build it, saying there's no problems and (last I checked) esptool.py will happily flash it (saying there's no problems) and then it will just crash in usually bizarre (or sometimes subtle) and hard-to-diagnose ways when they actually try to run it.  This is not good user experience (particularly for people just getting started) IMHO..
The advantage of setting the default low is that if the user tries to build too large an image the build process will complain and then they have to think about ""can my hardware support this code?"" (and if so override the setting), instead of just breaking horribly for no apparent reason.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/203#issuecomment-243646381,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?","@foogod Ok, thanks, shall just add a local.mk file for examples that depend on 32Mbit.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/203#issuecomment-244004632,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?",Problem with using local.mk is that it is currently in the .gitignore so if examples requiring 32M are to be include this then can it be removed from .gitignore ?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/ourairquality,8,https://github.com/SuperHouse/esp-open-rtos/pull/203#issuecomment-244006178,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?","Sorry for the noise, it's possible to override the .gitignore with a local .gitignore including !locak.mk",True,{'THUMBS_UP': ['https://github.com/kanflo']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,203,2016-08-26T09:05:18Z,2016-08-31T03:12:06Z,2016-09-05T07:23:01Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Default flash parameters for 32M bit.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/203,https://github.com/kanflo,9,https://github.com/SuperHouse/esp-open-rtos/pull/203#issuecomment-244675587,"Suits the Nodemcu and Witty, and many other common boards.
All the boards I am using are 32M bit and DIO. Might there be support to change these defaults?",You have a point @foogod. I would rather have esptool.py check if the image can be flashed by checking flash size but that falls outside the scope of our project. Perhaps the 32M configuration should be mentioned somewhere on the wiki?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,204,2016-08-26T11:45:24Z,2016-09-15T17:52:57Z,2016-09-15T17:52:57Z,MERGED,True,489,471,18,https://github.com/vlad-ivanov-name,paho_mqtt_c: refactor: rename symbols so they all have same prefix,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/204,https://github.com/vlad-ivanov-name,1,https://github.com/SuperHouse/esp-open-rtos/pull/204,"$ nm -g build/paho_mqtt_c.a | grep "" T ""
00000068 T mqtt_packet_decode
000000f4 T mqtt_packet_decode_buf
0000002c T mqtt_packet_encode
0000027c T mqtt_packet_equals
000000c4 T mqtt_packet_len
000002d4 T mqtt_packet_read
00000330 T mqtt_packet_readnb
00000120 T mqtt_read_char
0000010c T mqtt_read_int
00000208 T mqtt_read_str_len
00000254 T mqtt_strlen
00000130 T mqtt_write_char
00000180 T mqtt_write_cstr
00000144 T mqtt_write_int
000001c4 T mqtt_write_mqqt_str
000000f8 T mqtt_serialize_ack
00000170 T mqtt_serialize_puback
000001a4 T mqtt_serialize_pubcomp
0000001c T mqtt_serialize_publish
00000188 T mqtt_serialize_pubrel
00000420 T mqtt_client_new
000004cc T mqtt_connect
00000840 T mqtt_disconnect
00000730 T mqtt_publish
00000590 T mqtt_subscribe
00000688 T mqtt_unsubscribe
00000468 T mqtt_yield
00000108 T mqtt_deserialize_suback
0000001c T mqtt_serialize_subscribe
000000d0 T mqtt_deserialize_ack
00000010 T mqtt_deserialize_publish
000000e8 T mqtt_deserialize_unsuback
00000018 T mqtt_serialize_unsubscribe
0000000c T mqtt_esp_read
000000a8 T mqtt_esp_write
00000228 T mqtt_network_connect
000002d4 T mqtt_network_disconnect
00000200 T mqtt_network_new
0000019c T mqtt_timer_countdown
00000168 T mqtt_timer_countdown_ms
0000013c T mqtt_timer_expired
000001f0 T mqtt_timer_init
000001c0 T mqtt_timer_left_ms
0000023c T mqtt_deserialize_connack
00000050 T mqtt_serialize_connect
000002ec T mqtt_serialize_disconnect
00000300 T mqtt_serialize_pingreq
000002a8 T mqtt_serialize_zero

Also, renamed enum values (DISCONNECTED, FAILURE, SUCCESS are too generic to be in the global namespace). Added static qualifier where it is applicable.","$ nm -g build/paho_mqtt_c.a | grep "" T ""
00000068 T mqtt_packet_decode
000000f4 T mqtt_packet_decode_buf
0000002c T mqtt_packet_encode
0000027c T mqtt_packet_equals
000000c4 T mqtt_packet_len
000002d4 T mqtt_packet_read
00000330 T mqtt_packet_readnb
00000120 T mqtt_read_char
0000010c T mqtt_read_int
00000208 T mqtt_read_str_len
00000254 T mqtt_strlen
00000130 T mqtt_write_char
00000180 T mqtt_write_cstr
00000144 T mqtt_write_int
000001c4 T mqtt_write_mqqt_str
000000f8 T mqtt_serialize_ack
00000170 T mqtt_serialize_puback
000001a4 T mqtt_serialize_pubcomp
0000001c T mqtt_serialize_publish
00000188 T mqtt_serialize_pubrel
00000420 T mqtt_client_new
000004cc T mqtt_connect
00000840 T mqtt_disconnect
00000730 T mqtt_publish
00000590 T mqtt_subscribe
00000688 T mqtt_unsubscribe
00000468 T mqtt_yield
00000108 T mqtt_deserialize_suback
0000001c T mqtt_serialize_subscribe
000000d0 T mqtt_deserialize_ack
00000010 T mqtt_deserialize_publish
000000e8 T mqtt_deserialize_unsuback
00000018 T mqtt_serialize_unsubscribe
0000000c T mqtt_esp_read
000000a8 T mqtt_esp_write
00000228 T mqtt_network_connect
000002d4 T mqtt_network_disconnect
00000200 T mqtt_network_new
0000019c T mqtt_timer_countdown
00000168 T mqtt_timer_countdown_ms
0000013c T mqtt_timer_expired
000001f0 T mqtt_timer_init
000001c0 T mqtt_timer_left_ms
0000023c T mqtt_deserialize_connack
00000050 T mqtt_serialize_connect
000002ec T mqtt_serialize_disconnect
00000300 T mqtt_serialize_pingreq
000002a8 T mqtt_serialize_zero

Also, renamed enum values (DISCONNECTED, FAILURE, SUCCESS are too generic to be in the global namespace). Added static qualifier where it is applicable.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,204,2016-08-26T11:45:24Z,2016-09-15T17:52:57Z,2016-09-15T17:52:57Z,MERGED,True,489,471,18,https://github.com/vlad-ivanov-name,paho_mqtt_c: refactor: rename symbols so they all have same prefix,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/204,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/204#issuecomment-242938974,"$ nm -g build/paho_mqtt_c.a | grep "" T ""
00000068 T mqtt_packet_decode
000000f4 T mqtt_packet_decode_buf
0000002c T mqtt_packet_encode
0000027c T mqtt_packet_equals
000000c4 T mqtt_packet_len
000002d4 T mqtt_packet_read
00000330 T mqtt_packet_readnb
00000120 T mqtt_read_char
0000010c T mqtt_read_int
00000208 T mqtt_read_str_len
00000254 T mqtt_strlen
00000130 T mqtt_write_char
00000180 T mqtt_write_cstr
00000144 T mqtt_write_int
000001c4 T mqtt_write_mqqt_str
000000f8 T mqtt_serialize_ack
00000170 T mqtt_serialize_puback
000001a4 T mqtt_serialize_pubcomp
0000001c T mqtt_serialize_publish
00000188 T mqtt_serialize_pubrel
00000420 T mqtt_client_new
000004cc T mqtt_connect
00000840 T mqtt_disconnect
00000730 T mqtt_publish
00000590 T mqtt_subscribe
00000688 T mqtt_unsubscribe
00000468 T mqtt_yield
00000108 T mqtt_deserialize_suback
0000001c T mqtt_serialize_subscribe
000000d0 T mqtt_deserialize_ack
00000010 T mqtt_deserialize_publish
000000e8 T mqtt_deserialize_unsuback
00000018 T mqtt_serialize_unsubscribe
0000000c T mqtt_esp_read
000000a8 T mqtt_esp_write
00000228 T mqtt_network_connect
000002d4 T mqtt_network_disconnect
00000200 T mqtt_network_new
0000019c T mqtt_timer_countdown
00000168 T mqtt_timer_countdown_ms
0000013c T mqtt_timer_expired
000001f0 T mqtt_timer_init
000001c0 T mqtt_timer_left_ms
0000023c T mqtt_deserialize_connack
00000050 T mqtt_serialize_connect
000002ec T mqtt_serialize_disconnect
00000300 T mqtt_serialize_pingreq
000002a8 T mqtt_serialize_zero

Also, renamed enum values (DISCONNECTED, FAILURE, SUCCESS are too generic to be in the global namespace). Added static qualifier where it is applicable.",Thanks @resetnow. There is one thing I would like to discuss and perhaps you have some input @projectgus. How should we deal with this kind of EOR refactoring in the future? While I personally like this PR it might upset someone building an MQTT app using EOR who's binary suddenly won't build. Should we provide optional backward compatibility header files with #define Old_Func new_func?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,204,2016-08-26T11:45:24Z,2016-09-15T17:52:57Z,2016-09-15T17:52:57Z,MERGED,True,489,471,18,https://github.com/vlad-ivanov-name,paho_mqtt_c: refactor: rename symbols so they all have same prefix,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/204,https://github.com/vlad-ivanov-name,3,https://github.com/SuperHouse/esp-open-rtos/pull/204#issuecomment-246475577,"$ nm -g build/paho_mqtt_c.a | grep "" T ""
00000068 T mqtt_packet_decode
000000f4 T mqtt_packet_decode_buf
0000002c T mqtt_packet_encode
0000027c T mqtt_packet_equals
000000c4 T mqtt_packet_len
000002d4 T mqtt_packet_read
00000330 T mqtt_packet_readnb
00000120 T mqtt_read_char
0000010c T mqtt_read_int
00000208 T mqtt_read_str_len
00000254 T mqtt_strlen
00000130 T mqtt_write_char
00000180 T mqtt_write_cstr
00000144 T mqtt_write_int
000001c4 T mqtt_write_mqqt_str
000000f8 T mqtt_serialize_ack
00000170 T mqtt_serialize_puback
000001a4 T mqtt_serialize_pubcomp
0000001c T mqtt_serialize_publish
00000188 T mqtt_serialize_pubrel
00000420 T mqtt_client_new
000004cc T mqtt_connect
00000840 T mqtt_disconnect
00000730 T mqtt_publish
00000590 T mqtt_subscribe
00000688 T mqtt_unsubscribe
00000468 T mqtt_yield
00000108 T mqtt_deserialize_suback
0000001c T mqtt_serialize_subscribe
000000d0 T mqtt_deserialize_ack
00000010 T mqtt_deserialize_publish
000000e8 T mqtt_deserialize_unsuback
00000018 T mqtt_serialize_unsubscribe
0000000c T mqtt_esp_read
000000a8 T mqtt_esp_write
00000228 T mqtt_network_connect
000002d4 T mqtt_network_disconnect
00000200 T mqtt_network_new
0000019c T mqtt_timer_countdown
00000168 T mqtt_timer_countdown_ms
0000013c T mqtt_timer_expired
000001f0 T mqtt_timer_init
000001c0 T mqtt_timer_left_ms
0000023c T mqtt_deserialize_connack
00000050 T mqtt_serialize_connect
000002ec T mqtt_serialize_disconnect
00000300 T mqtt_serialize_pingreq
000002a8 T mqtt_serialize_zero

Also, renamed enum values (DISCONNECTED, FAILURE, SUCCESS are too generic to be in the global namespace). Added static qualifier where it is applicable.","who's binary suddenly won't build

The MQTT example contains about 10 symbol changes in total of ≈20 lines of code, it's surely upsetting but not the end of the world.
Anyway, can I please have yes or no on the PR so I can either close it or fix the conflicts.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,204,2016-08-26T11:45:24Z,2016-09-15T17:52:57Z,2016-09-15T17:52:57Z,MERGED,True,489,471,18,https://github.com/vlad-ivanov-name,paho_mqtt_c: refactor: rename symbols so they all have same prefix,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/204,https://github.com/projectgus,4,https://github.com/SuperHouse/esp-open-rtos/pull/204#issuecomment-246511158,"$ nm -g build/paho_mqtt_c.a | grep "" T ""
00000068 T mqtt_packet_decode
000000f4 T mqtt_packet_decode_buf
0000002c T mqtt_packet_encode
0000027c T mqtt_packet_equals
000000c4 T mqtt_packet_len
000002d4 T mqtt_packet_read
00000330 T mqtt_packet_readnb
00000120 T mqtt_read_char
0000010c T mqtt_read_int
00000208 T mqtt_read_str_len
00000254 T mqtt_strlen
00000130 T mqtt_write_char
00000180 T mqtt_write_cstr
00000144 T mqtt_write_int
000001c4 T mqtt_write_mqqt_str
000000f8 T mqtt_serialize_ack
00000170 T mqtt_serialize_puback
000001a4 T mqtt_serialize_pubcomp
0000001c T mqtt_serialize_publish
00000188 T mqtt_serialize_pubrel
00000420 T mqtt_client_new
000004cc T mqtt_connect
00000840 T mqtt_disconnect
00000730 T mqtt_publish
00000590 T mqtt_subscribe
00000688 T mqtt_unsubscribe
00000468 T mqtt_yield
00000108 T mqtt_deserialize_suback
0000001c T mqtt_serialize_subscribe
000000d0 T mqtt_deserialize_ack
00000010 T mqtt_deserialize_publish
000000e8 T mqtt_deserialize_unsuback
00000018 T mqtt_serialize_unsubscribe
0000000c T mqtt_esp_read
000000a8 T mqtt_esp_write
00000228 T mqtt_network_connect
000002d4 T mqtt_network_disconnect
00000200 T mqtt_network_new
0000019c T mqtt_timer_countdown
00000168 T mqtt_timer_countdown_ms
0000013c T mqtt_timer_expired
000001f0 T mqtt_timer_init
000001c0 T mqtt_timer_left_ms
0000023c T mqtt_deserialize_connack
00000050 T mqtt_serialize_connect
000002ec T mqtt_serialize_disconnect
00000300 T mqtt_serialize_pingreq
000002a8 T mqtt_serialize_zero

Also, renamed enum values (DISCONNECTED, FAILURE, SUCCESS are too generic to be in the global namespace). Added static qualifier where it is applicable.","I think this is a good fix. The naming conventions in the Paho MQTT C port always bugged me, and the upstream project seems to be abandoned now. @baoshi might have some comment on this, as he did the original ESP8266 support.
Regarding backward compatibility, the ""right way"" would be to add an mqtt_compat.h header (or similar) that #defines all of the old symbol names to the new names, so it's a one-line addition for people to compile their old code.
I don't know if we really need that here, though.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,204,2016-08-26T11:45:24Z,2016-09-15T17:52:57Z,2016-09-15T17:52:57Z,MERGED,True,489,471,18,https://github.com/vlad-ivanov-name,paho_mqtt_c: refactor: rename symbols so they all have same prefix,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/204,https://github.com/kanflo,5,https://github.com/SuperHouse/esp-open-rtos/pull/204#issuecomment-247245378,"$ nm -g build/paho_mqtt_c.a | grep "" T ""
00000068 T mqtt_packet_decode
000000f4 T mqtt_packet_decode_buf
0000002c T mqtt_packet_encode
0000027c T mqtt_packet_equals
000000c4 T mqtt_packet_len
000002d4 T mqtt_packet_read
00000330 T mqtt_packet_readnb
00000120 T mqtt_read_char
0000010c T mqtt_read_int
00000208 T mqtt_read_str_len
00000254 T mqtt_strlen
00000130 T mqtt_write_char
00000180 T mqtt_write_cstr
00000144 T mqtt_write_int
000001c4 T mqtt_write_mqqt_str
000000f8 T mqtt_serialize_ack
00000170 T mqtt_serialize_puback
000001a4 T mqtt_serialize_pubcomp
0000001c T mqtt_serialize_publish
00000188 T mqtt_serialize_pubrel
00000420 T mqtt_client_new
000004cc T mqtt_connect
00000840 T mqtt_disconnect
00000730 T mqtt_publish
00000590 T mqtt_subscribe
00000688 T mqtt_unsubscribe
00000468 T mqtt_yield
00000108 T mqtt_deserialize_suback
0000001c T mqtt_serialize_subscribe
000000d0 T mqtt_deserialize_ack
00000010 T mqtt_deserialize_publish
000000e8 T mqtt_deserialize_unsuback
00000018 T mqtt_serialize_unsubscribe
0000000c T mqtt_esp_read
000000a8 T mqtt_esp_write
00000228 T mqtt_network_connect
000002d4 T mqtt_network_disconnect
00000200 T mqtt_network_new
0000019c T mqtt_timer_countdown
00000168 T mqtt_timer_countdown_ms
0000013c T mqtt_timer_expired
000001f0 T mqtt_timer_init
000001c0 T mqtt_timer_left_ms
0000023c T mqtt_deserialize_connack
00000050 T mqtt_serialize_connect
000002ec T mqtt_serialize_disconnect
00000300 T mqtt_serialize_pingreq
000002a8 T mqtt_serialize_zero

Also, renamed enum values (DISCONNECTED, FAILURE, SUCCESS are too generic to be in the global namespace). Added static qualifier where it is applicable.","@resetnow, could you please check the conflict and I will merge this. Thanks!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,204,2016-08-26T11:45:24Z,2016-09-15T17:52:57Z,2016-09-15T17:52:57Z,MERGED,True,489,471,18,https://github.com/vlad-ivanov-name,paho_mqtt_c: refactor: rename symbols so they all have same prefix,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/204,https://github.com/vlad-ivanov-name,6,https://github.com/SuperHouse/esp-open-rtos/pull/204#issuecomment-247383898,"$ nm -g build/paho_mqtt_c.a | grep "" T ""
00000068 T mqtt_packet_decode
000000f4 T mqtt_packet_decode_buf
0000002c T mqtt_packet_encode
0000027c T mqtt_packet_equals
000000c4 T mqtt_packet_len
000002d4 T mqtt_packet_read
00000330 T mqtt_packet_readnb
00000120 T mqtt_read_char
0000010c T mqtt_read_int
00000208 T mqtt_read_str_len
00000254 T mqtt_strlen
00000130 T mqtt_write_char
00000180 T mqtt_write_cstr
00000144 T mqtt_write_int
000001c4 T mqtt_write_mqqt_str
000000f8 T mqtt_serialize_ack
00000170 T mqtt_serialize_puback
000001a4 T mqtt_serialize_pubcomp
0000001c T mqtt_serialize_publish
00000188 T mqtt_serialize_pubrel
00000420 T mqtt_client_new
000004cc T mqtt_connect
00000840 T mqtt_disconnect
00000730 T mqtt_publish
00000590 T mqtt_subscribe
00000688 T mqtt_unsubscribe
00000468 T mqtt_yield
00000108 T mqtt_deserialize_suback
0000001c T mqtt_serialize_subscribe
000000d0 T mqtt_deserialize_ack
00000010 T mqtt_deserialize_publish
000000e8 T mqtt_deserialize_unsuback
00000018 T mqtt_serialize_unsubscribe
0000000c T mqtt_esp_read
000000a8 T mqtt_esp_write
00000228 T mqtt_network_connect
000002d4 T mqtt_network_disconnect
00000200 T mqtt_network_new
0000019c T mqtt_timer_countdown
00000168 T mqtt_timer_countdown_ms
0000013c T mqtt_timer_expired
000001f0 T mqtt_timer_init
000001c0 T mqtt_timer_left_ms
0000023c T mqtt_deserialize_connack
00000050 T mqtt_serialize_connect
000002ec T mqtt_serialize_disconnect
00000300 T mqtt_serialize_pingreq
000002a8 T mqtt_serialize_zero

Also, renamed enum values (DISCONNECTED, FAILURE, SUCCESS are too generic to be in the global namespace). Added static qualifier where it is applicable.",Rebased and updated AWS example.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,205,2016-08-26T12:13:10Z,2016-09-15T06:26:39Z,2016-09-15T06:26:39Z,MERGED,True,47,7,2,https://github.com/vlad-ivanov-name,core: exception_vectors: initial esp-gdbstub support,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/205,https://github.com/vlad-ivanov-name,1,https://github.com/SuperHouse/esp-open-rtos/pull/205,"This commit adds initial support for esp-gdbstub (which is based on Espressif implementation and adapted to esp-open-rtos).
A thing I'd like to hear an opinion on: two global symbols were added: debug_exception_handler and debug_saved_ctx. I'll take any suggestion regarding renaming them to suit some existing namespace.
Implementation notes:

Default debug exception vector now calls the address stored in debug_exception_handler. It's fatal_exception_handler by default, and gdbstub changes it during initialization.
debug_saved_ctx is used to save a0 — a4 at the start of debug vector. Also, it stores a0 — a1 in the interrupt vector (the rest of registers is saved later on the stack). The latter allows to use Ctrl-C in GDB.","This commit adds initial support for esp-gdbstub (which is based on Espressif implementation and adapted to esp-open-rtos).
A thing I'd like to hear an opinion on: two global symbols were added: debug_exception_handler and debug_saved_ctx. I'll take any suggestion regarding renaming them to suit some existing namespace.
Implementation notes:

Default debug exception vector now calls the address stored in debug_exception_handler. It's fatal_exception_handler by default, and gdbstub changes it during initialization.
debug_saved_ctx is used to save a0 — a4 at the start of debug vector. Also, it stores a0 — a1 in the interrupt vector (the rest of registers is saved later on the stack). The latter allows to use Ctrl-C in GDB.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,205,2016-08-26T12:13:10Z,2016-09-15T06:26:39Z,2016-09-15T06:26:39Z,MERGED,True,47,7,2,https://github.com/vlad-ivanov-name,core: exception_vectors: initial esp-gdbstub support,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/205,https://github.com/vlad-ivanov-name,2,https://github.com/SuperHouse/esp-open-rtos/pull/205#issuecomment-246477503,"This commit adds initial support for esp-gdbstub (which is based on Espressif implementation and adapted to esp-open-rtos).
A thing I'd like to hear an opinion on: two global symbols were added: debug_exception_handler and debug_saved_ctx. I'll take any suggestion regarding renaming them to suit some existing namespace.
Implementation notes:

Default debug exception vector now calls the address stored in debug_exception_handler. It's fatal_exception_handler by default, and gdbstub changes it during initialization.
debug_saved_ctx is used to save a0 — a4 at the start of debug vector. Also, it stores a0 — a1 in the interrupt vector (the rest of registers is saved later on the stack). The latter allows to use Ctrl-C in GDB.",@projectgus could you please confirm whether or not this change can be merged in esp-open-rtos and what possibly should be changed?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,205,2016-08-26T12:13:10Z,2016-09-15T06:26:39Z,2016-09-15T06:26:39Z,MERGED,True,47,7,2,https://github.com/vlad-ivanov-name,core: exception_vectors: initial esp-gdbstub support,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/205,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/205#issuecomment-246508861,"This commit adds initial support for esp-gdbstub (which is based on Espressif implementation and adapted to esp-open-rtos).
A thing I'd like to hear an opinion on: two global symbols were added: debug_exception_handler and debug_saved_ctx. I'll take any suggestion regarding renaming them to suit some existing namespace.
Implementation notes:

Default debug exception vector now calls the address stored in debug_exception_handler. It's fatal_exception_handler by default, and gdbstub changes it during initialization.
debug_saved_ctx is used to save a0 — a4 at the start of debug vector. Also, it stores a0 — a1 in the interrupt vector (the rest of registers is saved later on the stack). The latter allows to use Ctrl-C in GDB.","Sorry for the slow reply!
In principle I think this is good groundwork to merge (whether or not we merge the full esp-gdbstub into esp-open-rtos or not.) I left a few minor comments on the diff.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,205,2016-08-26T12:13:10Z,2016-09-15T06:26:39Z,2016-09-15T06:26:39Z,MERGED,True,47,7,2,https://github.com/vlad-ivanov-name,core: exception_vectors: initial esp-gdbstub support,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/205,https://github.com/vlad-ivanov-name,4,https://github.com/SuperHouse/esp-open-rtos/pull/205#issuecomment-246578990,"This commit adds initial support for esp-gdbstub (which is based on Espressif implementation and adapted to esp-open-rtos).
A thing I'd like to hear an opinion on: two global symbols were added: debug_exception_handler and debug_saved_ctx. I'll take any suggestion regarding renaming them to suit some existing namespace.
Implementation notes:

Default debug exception vector now calls the address stored in debug_exception_handler. It's fatal_exception_handler by default, and gdbstub changes it during initialization.
debug_saved_ctx is used to save a0 — a4 at the start of debug vector. Also, it stores a0 — a1 in the interrupt vector (the rest of registers is saved later on the stack). The latter allows to use Ctrl-C in GDB.","Thanks for the review! I'll update the PR.
As for merging esp-gdbstub itself, unfortunately, it's licensed under restrictive ""Espressif MIT"" license. There was a point when the code in their repo was without a license, but I don't know what are legal implications of this.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,205,2016-08-26T12:13:10Z,2016-09-15T06:26:39Z,2016-09-15T06:26:39Z,MERGED,True,47,7,2,https://github.com/vlad-ivanov-name,core: exception_vectors: initial esp-gdbstub support,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/205,https://github.com/vlad-ivanov-name,5,https://github.com/SuperHouse/esp-open-rtos/pull/205#issuecomment-246770598,"This commit adds initial support for esp-gdbstub (which is based on Espressif implementation and adapted to esp-open-rtos).
A thing I'd like to hear an opinion on: two global symbols were added: debug_exception_handler and debug_saved_ctx. I'll take any suggestion regarding renaming them to suit some existing namespace.
Implementation notes:

Default debug exception vector now calls the address stored in debug_exception_handler. It's fatal_exception_handler by default, and gdbstub changes it during initialization.
debug_saved_ctx is used to save a0 — a4 at the start of debug vector. Also, it stores a0 — a1 in the interrupt vector (the rest of registers is saved later on the stack). The latter allows to use Ctrl-C in GDB.",I have updated the debug exception handler symbol to be weak and have an alias.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,205,2016-08-26T12:13:10Z,2016-09-15T06:26:39Z,2016-09-15T06:26:39Z,MERGED,True,47,7,2,https://github.com/vlad-ivanov-name,core: exception_vectors: initial esp-gdbstub support,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/205,https://github.com/kanflo,6,https://github.com/SuperHouse/esp-open-rtos/pull/205#issuecomment-247246217,"This commit adds initial support for esp-gdbstub (which is based on Espressif implementation and adapted to esp-open-rtos).
A thing I'd like to hear an opinion on: two global symbols were added: debug_exception_handler and debug_saved_ctx. I'll take any suggestion regarding renaming them to suit some existing namespace.
Implementation notes:

Default debug exception vector now calls the address stored in debug_exception_handler. It's fatal_exception_handler by default, and gdbstub changes it during initialization.
debug_saved_ctx is used to save a0 — a4 at the start of debug vector. Also, it stores a0 — a1 in the interrupt vector (the rest of registers is saved later on the stack). The latter allows to use Ctrl-C in GDB.","Thanks @resetnow, I'll look forward to testing this.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,207,2016-08-27T09:37:27Z,2016-10-25T14:22:00Z,2016-10-25T14:22:01Z,CLOSED,False,597,20,19,https://github.com/sheinz,[WIP] Automatic tests.,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/207,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/207,"I think it was discussed several times that it would be nice to have some automatic test system that would check for regression. It's common for any software project to have such a system. Unfortunately when it comes to an embedded system it's no that trivial as it requires some hardware manipulations.
Here's my attempt to bring some basic automatic testing to EOR. It's currently in very draft state.
The idea is to have one or two modules connected to the host PC. Each test is built and flashed into the module. Than a python script checks the serial output of the test. The script will report with its return code whether the test succeeded or failed.
There's a support for several modules that are tested simultaneously. For example to test wifi communication two modules connect to each other and send/receive test data (wifi basic test).
The modules should have automatic reset/boot-mode support like nodemcu modules. In order to be flashed without pressing any buttons on the device. I currently don't have such modules :(
Such testing system allows easier rewriting of some binary libraries as a test can be written first and than rewritten implementation can be verified. Or just for general regression testing during optimization or other improvement.
Usage
To build all the tests run make in the test directory:
cd tests
make

To build and run all the tests run make test in the test directory:
cd tests
make test

To build and run a single test run make flash run_test in the specific test directory:
cd tests/spiffs
make flash run_test

For example:
> make flash run_test
   ...
Read speed: 732562 bytes/s
Write speed: 50123 bytes/s
Test finished successfully
Test: SUCCESS","I think it was discussed several times that it would be nice to have some automatic test system that would check for regression. It's common for any software project to have such a system. Unfortunately when it comes to an embedded system it's no that trivial as it requires some hardware manipulations.
Here's my attempt to bring some basic automatic testing to EOR. It's currently in very draft state.
The idea is to have one or two modules connected to the host PC. Each test is built and flashed into the module. Than a python script checks the serial output of the test. The script will report with its return code whether the test succeeded or failed.
There's a support for several modules that are tested simultaneously. For example to test wifi communication two modules connect to each other and send/receive test data (wifi basic test).
The modules should have automatic reset/boot-mode support like nodemcu modules. In order to be flashed without pressing any buttons on the device. I currently don't have such modules :(
Such testing system allows easier rewriting of some binary libraries as a test can be written first and than rewritten implementation can be verified. Or just for general regression testing during optimization or other improvement.
Usage
To build all the tests run make in the test directory:
cd tests
make

To build and run all the tests run make test in the test directory:
cd tests
make test

To build and run a single test run make flash run_test in the specific test directory:
cd tests/spiffs
make flash run_test

For example:
> make flash run_test
   ...
Read speed: 732562 bytes/s
Write speed: 50123 bytes/s
Test finished successfully
Test: SUCCESS",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,207,2016-08-27T09:37:27Z,2016-10-25T14:22:00Z,2016-10-25T14:22:01Z,CLOSED,False,597,20,19,https://github.com/sheinz,[WIP] Automatic tests.,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/207,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/207#issuecomment-242938680,"I think it was discussed several times that it would be nice to have some automatic test system that would check for regression. It's common for any software project to have such a system. Unfortunately when it comes to an embedded system it's no that trivial as it requires some hardware manipulations.
Here's my attempt to bring some basic automatic testing to EOR. It's currently in very draft state.
The idea is to have one or two modules connected to the host PC. Each test is built and flashed into the module. Than a python script checks the serial output of the test. The script will report with its return code whether the test succeeded or failed.
There's a support for several modules that are tested simultaneously. For example to test wifi communication two modules connect to each other and send/receive test data (wifi basic test).
The modules should have automatic reset/boot-mode support like nodemcu modules. In order to be flashed without pressing any buttons on the device. I currently don't have such modules :(
Such testing system allows easier rewriting of some binary libraries as a test can be written first and than rewritten implementation can be verified. Or just for general regression testing during optimization or other improvement.
Usage
To build all the tests run make in the test directory:
cd tests
make

To build and run all the tests run make test in the test directory:
cd tests
make test

To build and run a single test run make flash run_test in the specific test directory:
cd tests/spiffs
make flash run_test

For example:
> make flash run_test
   ...
Read speed: 732562 bytes/s
Write speed: 50123 bytes/s
Test finished successfully
Test: SUCCESS","Very nice @sheinz, I will go through this in detail as soon as possible.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,207,2016-08-27T09:37:27Z,2016-10-25T14:22:00Z,2016-10-25T14:22:01Z,CLOSED,False,597,20,19,https://github.com/sheinz,[WIP] Automatic tests.,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/207,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/207#issuecomment-246509970,"I think it was discussed several times that it would be nice to have some automatic test system that would check for regression. It's common for any software project to have such a system. Unfortunately when it comes to an embedded system it's no that trivial as it requires some hardware manipulations.
Here's my attempt to bring some basic automatic testing to EOR. It's currently in very draft state.
The idea is to have one or two modules connected to the host PC. Each test is built and flashed into the module. Than a python script checks the serial output of the test. The script will report with its return code whether the test succeeded or failed.
There's a support for several modules that are tested simultaneously. For example to test wifi communication two modules connect to each other and send/receive test data (wifi basic test).
The modules should have automatic reset/boot-mode support like nodemcu modules. In order to be flashed without pressing any buttons on the device. I currently don't have such modules :(
Such testing system allows easier rewriting of some binary libraries as a test can be written first and than rewritten implementation can be verified. Or just for general regression testing during optimization or other improvement.
Usage
To build all the tests run make in the test directory:
cd tests
make

To build and run all the tests run make test in the test directory:
cd tests
make test

To build and run a single test run make flash run_test in the specific test directory:
cd tests/spiffs
make flash run_test

For example:
> make flash run_test
   ...
Read speed: 732562 bytes/s
Write speed: 50123 bytes/s
Test finished successfully
Test: SUCCESS","@sheinz, this looks pretty good to me!
This probably predates your involvement with the project, but I also started some automated test support:
https://github.com/SuperHouse/esp-open-rtos/tree/feature/tests
I never finished it though (there are working tests that run on a single ESP, but multi-ESP tests I never finished implementing).
You can probably consider that branch ""abandoned"" now, I'm not going to pick it back up. But there might be some bits of code or tests there that you would find useful to roll into your efforts. Not a problem if you don't want to dig through it, though. :)
Nice work! :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,207,2016-08-27T09:37:27Z,2016-10-25T14:22:00Z,2016-10-25T14:22:01Z,CLOSED,False,597,20,19,https://github.com/sheinz,[WIP] Automatic tests.,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/207,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/207#issuecomment-256048893,"I think it was discussed several times that it would be nice to have some automatic test system that would check for regression. It's common for any software project to have such a system. Unfortunately when it comes to an embedded system it's no that trivial as it requires some hardware manipulations.
Here's my attempt to bring some basic automatic testing to EOR. It's currently in very draft state.
The idea is to have one or two modules connected to the host PC. Each test is built and flashed into the module. Than a python script checks the serial output of the test. The script will report with its return code whether the test succeeded or failed.
There's a support for several modules that are tested simultaneously. For example to test wifi communication two modules connect to each other and send/receive test data (wifi basic test).
The modules should have automatic reset/boot-mode support like nodemcu modules. In order to be flashed without pressing any buttons on the device. I currently don't have such modules :(
Such testing system allows easier rewriting of some binary libraries as a test can be written first and than rewritten implementation can be verified. Or just for general regression testing during optimization or other improvement.
Usage
To build all the tests run make in the test directory:
cd tests
make

To build and run all the tests run make test in the test directory:
cd tests
make test

To build and run a single test run make flash run_test in the specific test directory:
cd tests/spiffs
make flash run_test

For example:
> make flash run_test
   ...
Read speed: 732562 bytes/s
Write speed: 50123 bytes/s
Test finished successfully
Test: SUCCESS",Closed in favour of #253,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/208,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-243204806,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","A nice add-on @ourairquality and a must have for creating anything else than one-off ESP nodes. I was just embarking on creating the same so I'll be happy to contribute. @projectgus, would you mind having this ""sub project"" evolve inside the EOR repository?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-243323804,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.",Add more parameters for the AP and STA modes. Not having much luck with an attempt to allow STA static IP addresses. Also added a 'restart' button.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/foogod,4,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-243589686,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","This looks potentially really cool..  I'm actually wondering if we might be able to pull out some portions of this into a more generic ""simple HTTP server"" for other apps to use as well?  (doesn't necessarily have to be now, just an interesting thought for the future)
The plan was originally once sysparam got merged in to define a bunch of ""system"" parameters for these sorts of wifi/etc settings and have the core routines read them and configure everything on startup (instead of having the app have to do it itself)..  The convention we'd discussed was for core system parameters to be in all-upper-case in sysparam (and mixed/lower-case parameters are for apps to play with as they see fit)..  I'm thinking if we want to just define a bunch of these wifi parameters as ""system"" (uppercase) parameters here and now, then we could work on integrating support for them more directly into the core going forward as well..
(As a side-note, looks like this is built on #209 so there's a merge-dependency there..  Don't think that will be a big sticking point, though..)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-243595168,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Thank you for the feedback. Yes I would like to make this more generic, perhaps in the extras, that project can include and then customize. Shall keep working on that.
I am also considering using it as a basic web server beyond configuration. For example to present sensor readings, and the AP mode will be great when mobile and away from a base wifi connection. Also some people might not have a wifi AP but still be able to use a phone or tablet to download and present data. The code will need to be better abstracted to support this.
If it is to operate as a web server then I think the configuration pages need to be protected, a password. One thought is an option to disable the configuration once working, and one 'restore' page with a password, or just use a hardware button to re-enable wifi configuration but that would not work so well if the device is installed out of easy reach.
Also people want to be able to erase the flash of their passwords. e.g. Loan out a device, people enter AP passwords, even if they change it then it is still likely in the flash. Perhaps exposing an api to compress the sysparam area would help.
I'm not sure about all the plans to use these parameters internally, it seems a black box at present, but would like to see this more transparent. Subjective, but upper case pokes me in the eye :) but internal naming seems a small matter I can follow.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-244379736,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Reworked to move most of the code into extras/wificfg/ and abstracted the path matching and dispatch to allow extra web pages to be added by the application with a small example. Still many issues with the wifi management, more todo, and the restart is also not reliable and can lock up.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/kanflo,7,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-244673107,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Thumbs up for moving it to extras/. I would like to have this merged as soon as your change to int32/int8 in sysparam is merged if no one disagree. Have you thought of the idea of moving the list of configurable parameters to the main application? I think if could be useful as some nodes might require MQTT configuration, some not and so on.
Regarding restart being unreliable I have seen that too (would not want to add an ATTiny as external watchdog but if I have to...).",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/robertfoss,8,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-244805908,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","I'm not sure how license compatible this project is with the NodeMCU project, but I wrote the first versions of their configuration portal and would happily donate that.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,9,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-244971784,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Made another pass over this code. Added flags to enable/disable the Station and AP mode separately, and a flag to enable or disable the configuration pages (with a password to re-enable). Moved the list of URLs and handlers to extras/ to hide it from the app, adding a separate optional dispatch list for apps.
@kanflo Not clear on your suggestion to 'moving the list of configurable parameters to the main application'. Do you mean to use these in the core startup code etc? It seems a bit of a black box to me at this point, and I am just trying to have some code to init the network in the extras. Could use some help here. Can it be layered on the existing code for a start.
@robertfoss If you could offer a link then I would be interested to take a look?
A quick search for other esp wifi config tools found this: https://github.com/jeelabs/esp-link
The HTML in the current code need lol.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/robertfoss,10,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-244985395,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality This is the last commit which contained only contributions from me, and that you are welcome to use however you like.
There's a simple dns hijacker in that file too, that might be useful, if the current code doesn't already contain one.
https://github.com/nodemcu/nodemcu-firmware/blob/d19c350ead89c629d8ee9e85bac8502a40033ce7/app/modules/enduser_setup.c",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,11,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-246318994,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","The dhcp server seems to tickle or cause some memory spikes, seemed to be crashing with OOM when used along with other memory demanding code. Works better with this disabled, and rules out this dhcp server code causing other problem noted. Just need to support a static IP address when setting up the wifi connection.
SoftAP mode is frustratingly unreliable. Hitting this crash #115 and Android devices are losing connections probably #140
Make another round or updates, got it working with Chrome, added AP IP address and netmask to the sysparams and the config interface, trimmed the task stack size.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/kanflo,12,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-247244456,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality, my idea was that some parameters are ""core"" and some are application specific. It would be nice to have both parameter sets configurable via the web interface. If nothing else, I will have a look at this when I find the time.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,13,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-247302392,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Add a definition of sdk_hostap_handle_timer to address the timer callback argument issue, just does an extra indirection.
Took a pass over the html style, responsive menu, html structure, example css and gradient background and svg favicon!
Survived a day of load testing in station mode. Seems usable enough in softap mode now to get it configured.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/toashwin,14,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-247832187,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Hi
This is a cool project. I have been waiting for this.
If I understand right, the purpose of this project is to have the user provide wifi ssid/password over a website - using esp8266 act as a webserver.
Is there a document on how to use this example?
What is the website I need to visit to configure the device?
Where will it store the ssid/password? How can I boot the device again with this new ssid/password?
Thanks",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,15,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-247846891,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@toashwin No documentation yet. There is example/wificfg/ which you could try. It will create an AP that you can connect to, the default password is in the source code. There is no DNS yet, so connect to http://172.16.0.1/ then follow the menu options to reconfigure the AP and/or configure the 'station' mode too.
I am not sure if there is enough RAM to run a DNS server too, getting very low here just running the DHCP server. But it will depend on what else the device is doing. It seems ok to me to ask people to connect to an IP address, not too much of a barrier, if that is too hard then configuring the device is probably beyond people too.
Have seen some other options, like Mozilla Flyweb that seems to use mDNS to advertise.
If you could report how you go it would help - I would like it to be usable by people in general.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/toashwin,16,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-247876326,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality
I think DNS is not needed. DHCP should be good enough....  If we have an app, we can have it directly go to that IP address.
I will try out your code, will keep you posted.
Have you tried out, libesphttpd? why not use this?
It is released part of Spritetm.
Library: https://github.com/Spritetm/libesphttpd
Example: https://github.com/Spritetm/esphttpd-freertos
I was having difficulty integrating this code into SuperHouse/esp-open-rtos.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/robertfoss,17,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-247880753,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","DNS redirection is rather helpful.
Especially for having smartphones autodetect that the device it is
connected to has to be configured.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,18,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-247908280,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@toashwin The URL dispatch is similar to libesphttpd. The wificfg uses sockets and threading, not the lower level lwip interface, so a large response can be sent without coding callbacks etc. it also uses a single small stack allocated buffer for most work, so probably has lower memory usage. It also uses const storage for responses, could use a C structure to break it up with codes etc, this is lighter. People can write the interface in another web server and re-use the same sysparams if they wish, but perhaps as-is it is about a light weight as practical.
@robertfoss I've seen Android pop up the config option, not sure how that works? Would need a really lightweight DNS. It does not seem to be necessary, rather just nice, so perhaps it is something to explore in future and could be a compile-time option. Also mDNS might be even better.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/robertfoss,19,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-247982571,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Included in the code I linked above is a ~100 line dns server that only
replies to some queries and only replies with the IP of the ESP.
On Android and IOS internet connectivity is determined by making http
queries to some host, if those fail, a captive portal is assumed.
Have a look at line 1111 here:
https://github.com/nodemcu/nodemcu-firmware/blob/master/app/modules/enduser_setup.c
Really, the config module is what a noob using an ESP would interact with
first, and knowing which ip (or anything about ip addresses for that
matter) reduces the utility of any config module in my mind.
On Mon, Sep 19, 2016 at 12:06 AM, Our Air Quality notifications@github.com
wrote:

@toashwin https://github.com/toashwin The URL dispatch is similar to
libesphttpd. The wifisfg uses sockets and threading, not the lower level
lwip interface, so a large response can be sent without coding callbacks
etc. it also uses a single small stack allocated buffer for most work, so
probably has lower memory usage. It also uses const storage for responses,
could use a C structure to break it up with codes etc, this is lighter.
People can write the interface in another web server and re-use the same
sysparams if they wish, but perhaps as-is it is about a light weight as
practical.
@robertfoss https://github.com/robertfoss I've seen Android pop up the
config option, not sure how that works? Would need a really lightweight
DNS. It does not seem to be necessary, rather just nice, so perhaps it is
something to explore in future and could be a compile-time option. Also
mDNS might be even better.
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#208 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AAf7_L_xOTAP-OiLnmTVFZxiYwr4jEt1ks5qrgo9gaJpZM4Jvc0_
.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/toashwin,20,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248215373,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality @robertfoss
I was able to flash my ESP8266 with your example.
When I scan the available networks on my computer/ Android phone – I see the network name:  “ESP_D1DE60”
When I try to connect to this wifi network:
On Android, it says “Obtaining IP Address”.. after some time it gives up.
On Windows, it connects and the status says “No Internet, Open”.  But when I try to visit the website: http://172.16.0.1/ , chrome browser it says, “site cant be reached”",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,21,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248220878,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.",@toashwin The PR here includes an example that defaults the ssid to 'esp-open-rtos AP' so if you are not seeing that then something has gone wrong. The ssid ESP_D1DE60 must be from some other code.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/toashwin,22,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248231413,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality  Here is some debug data I was able to print from the device.
It seem to be getting into the code to set the SSID and PSWD. Not sure if it was really able to set.
Also, I wonder, why is it connecting to my home wifi at the end? Thought it will only act as a server..
-gSDK version:0.9.9
Here1   => sysparam_set_string SSID esp-open-rtos AP
Here4  => sysparam_set_string PSWD esp-open-rtos
sleep enable,type: 2
mode : sta(xx:fe:34:yy🇩🇪60) + softAP(zz:fe:34:yy🇩🇪60)
add if0
add if1
bcn 100
scandone
add 0
aid 8
cnt
connected with “My Home Wireless”, channel 7
dhcp client start...
ip:xxx.yyy.0.9,mask:255.255.255.0,gw:xxx.yyy.0.1",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,23,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248235609,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@toashwin Looks like a good idea to default the ssid based on the chipid, see the latest update, now the ssid is eor<chip id>. Also reworked the validation and initialization of the wifi modes. Tested on an erased esp connecting from an Android device and it all worked ok. Also moved the defaulting of the ssid and password into the extras.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/toashwin,24,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248528712,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality  Couple of things

Do I need to erase the ESP, before I flash wificfg? The example was not working for me. So, ran command ""esptool.py erase_flash"". After that I could not even connect through USB serial. I am not able to reflash it either.

For now I changed the board.
2) My new board is already programmed for a different application. And wifi might have been enabled before in that application.
Now when I flash it, with wificfg. And try to check my android phone.. I dont see this device.  I think this code is crashing..  I put debug statements. I added following lines @1463 in function wificfg_init in extras/wificfg.c
printf(""Here0 init\n"");
printf(""wifi_sta_ssid:%s\n"", wifi_sta_ssid);

And it would crash, while printing wifi_sta_ssid.
Then I made following debug messages:
if (wifi_ap_enable) {
/* Default AP ssid and password. */
printf(""Here1 wifi_ap_enable\n"");
    if (!wifi_ap_ssid) {
        uint32_t chip_id = sdk_system_get_chip_id();
        char ssid[13];
        snprintf(ssid, sizeof(ssid), ""eor%08x"", chip_id);
        sysparam_set_string(""wifi_ap_ssid"", ssid);
        sysparam_get_string(""wifi_ap_ssid"", &wifi_ap_ssid);
printf(""Here2 set_ssid\n"");


        if (!wifi_ap_password) {
         printf(""Here3 if wifi_ap_password\n"");
            sysparam_set_string(""wifi_ap_password"", ""esp-open-rtos"");
            sysparam_get_string(""wifi_ap_password"", &wifi_ap_password);
         printf(""Here3.5 if wifi_ap_password\n"");

        }
    }

    if (strlen(wifi_ap_ssid) <= 0 || strlen(wifi_ap_ssid) >= 32 ||
        strlen(wifi_ap_password) >= 64) {
        printf(""Here4 strlen\n"");
        wifi_ap_enable = 0;
    }
}
printf(""Here5 after if - wifi_ap_enable\n"");

It is not reaching Here4 and Here5. Not sure if the ""if strlen"", and access any variables causing a problem.
Below is the crash
SDK version:0.9.9
sleep enable,type: 2
Here0 init
Here1 wifi_ap_enable
Here2 set_ssid
Here3 if wifi_ap_password
Here3.5 if wifi_ap_password
Fatal exception (28):
epc1=0x4020b05f
epc2=0x00000000
epc3=0x4021573d
excvaddr=0x00000000
depc=0x00000000
excsave1=0x4020b05c
Registers:
a0 4020b05c a1 3fff3c70 a2  00000000 a3  3fff135c
a4  00000001 a5  00000001 a6  0000007f a7  60000000
a8  3ffe8cb6 a9  0000000d a10 3ffe8cb6 a11 0000000a
a12 40218010 a13 00000050 SAR 0000001d
Stack: SP=0x3fff3c70
0x3fff3c70: 00000005 00000012 00302073 40100990
0x3fff3c80: 30726f65 38316430 00326566 401007c1
0x3fff3c90: 00000001 0000000d 00000000 00002884
0x3fff3ca0: 3fff3d00 3fff3cf0 00000004 00000001
0x3fff3cb0: 4021be65 00000001 00000000 4020946c
0x3fff3cc0: 3fff3d20 3fff3d10 00000008 0000002d
0x3fff3cd0: 00000067 4021be64 3ffe800c 40106806
0x3fff3ce0: 3fff3d00 3fff3cf0 00000004 0000002d
Free Heap: 43844
_heap_start 0x3fff1498 brk 0x3fff4fc4 supervisor sp 0x3ffffae0 sp-brk 43804 bytes
arena (total_size) 15148 fordblks (free_size) 40 uordblocks (used_size) 15108
ets Jan  8 2013,rst cause:2, boot mode:(3,6)
load 0x40100000, len 2292, room 16
tail 4
chksum 0x57
load 0x3ffe8000, len 772, room 4
tail 0
chksum 0x0b
csum 0x0b
rBoot v1.4.0 - richardaburton@gmail.com
Flash Size:   16 Mbit
Flash Mode:   QIO
Flash Speed:  40 MHz
rBoot Option: Big flash
rBoot Option: RTC data
Booting rom 0.
W[00]B[13]lŒ|ò#[04]äûoûpƒ[02]ŒooßlNnì�[12]nàp[12]n�[1B][02]ì[12]r[03][12]b[1B]’N|[00][04]bpc$l`[02]€[03]û[12]Ÿà�rN[1B]oœNŒ[1F][00]äŒÜœœpœŒ[02][04]b[0C]b[13]oo[1E]‚[0C]Žp[04]ì|�[12]r{o>²$Œ[1C]{l€Ûo[13]ßà�rN[1B]oœnŒ[1F][00]äŒÜœœ[1C]€[0C]Ž[04]b[0C]""[12]no>‚[04]bì‚[13]{rN[1E]‚ì��[0E]l[1C]b{Bä[1B]¾c’NâŒúÑ…Í­}¡‘±é3fff4ba0, prio:12, stack:200
ESP-Open-SDK ver: 0.0.1 compiled @ Sep 20 2016 22:17:18
phy ver: 273, pp ver: 8.3",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,25,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248557107,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@toashwin Thank you for testing this. Note wifi_sta_ssid will be NULL until initialized, so the string can not be printed - this is the likely cause of the crash reported. Sorry, I don't know what is going wrong after erasing the flash but it has always worked here. It might be that if something else had written to the sysparam area of the flash that it is not usable.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,26,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248608614,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@robertfoss Thank you. Added AP DNS support, and support to redirect host names to ip addresses. On Android the 'sign in to network' appears, but the landing page is not great yet.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/toashwin,27,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248702987,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality
Even if it do not print wifi_sta_ssid, it is crashing...  I suspect it is crashing at the following if statement. It is never reaching either of the print statements. Let me debug further. Thank you for all the work..
And even without any print-statements, I dont see a wifi ssid from ESP on my phone.. I suspect it is because it crashed.
    if (strlen(wifi_ap_ssid) <= 0 || strlen(wifi_ap_ssid) >= 32 ||
        strlen(wifi_ap_password) >= 64) {
        printf(""Here4 strlen\n"");
        wifi_ap_enable = 0;
}
printf(""Here5 after if - wifi_ap_enable\n"");",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,28,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248781057,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@toashwin Thank you. Could you please check if ""WARNING: Could not initialize sysparams"" is being printed on startup? This might explain the crash as the wificfg currently assumes it has been initialized. I can't see this working usefully if the sysparams can not be initialized. Another explanation is a bug in the sysparam code, and I work on a different fork of that sorry.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/toashwin,29,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248824342,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality - My problem is somewhat related to sysparams initialization. And making some modifications in wificfg will avoid crashes.
I was experimenting with examples/sysparam_editor. What I understood is that my device has no sysparam defined. So I used sysparam_editor ""reformat"" option to create a sysparam region. Since then sysparam_editor worked for me.
But I still see hangs with wificfg. It may be because, wifi_ap_ssid is not yet defined for me. So it was crashing on following line.
if (!wifi_ap_ssid) {
sysparam_editor, does the checks following way. It uses the status value from the sysparam_get_string as below
status = sysparam_get_string(cmd_buffer, &value);
If you do that, you may avoid the crashes.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,30,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-248928278,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@toashwin Added a check to make sure the sysparams database is initialized. if !wifi_ap_ssid then it writes one so it's not clear how it is failing unless sysparams is failing. You might need to debug this yourself. Double check you are using the latest version, with the rebasing it might be necessary to delete the branch and checkout again. If you have the patience then you could try my fork at https://github.com/ourairquality/esp-open-rtos",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/toashwin,31,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-250366595,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@ourairquality  I have verified code from your fork.. it works now.. (https://github.com/ourairquality/esp-open-rtos)
I have verified that the AP is enabled. And I can see the wifi ssid on Android. I briefly looked at the webpage.. But did not verify the functionality. Will check it this weekend.
But I felt the webpage can be made little bit cleaner.. Also Instead of making the webpage as a char string, can we make it a html file?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,32,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-250380233,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@toashwin Great, thank you for giving it a try. Split out the web content into separate files, still included as the content of C char strings so it still needs to be escaped correctly, but it is a least separated a little. Might be possible to write a script to escape the html into a C string and even do this in the build process but I'll have to leave that to someone else to explore.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,33,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-250452401,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Added a FreeRTOS tasks list page that gets compiled with the wificfg when configUSE_TRACE_FACILITY is defined, see the example which now uses this. Found this very helpful for checking that the stack depths were ok, and the task runtimes were interesting too.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/vlad-ivanov-name,34,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-250684896,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Might be possible to write a script to escape the html into a C string and even do this in the build process but I'll have to leave that to someone else to explore.

GNU linker feature can also be used to link data files directly into the binary as described here http://stackoverflow.com/a/4865249",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/sheinz,35,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-262619008,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","I tried this PR and I'm getting a crash:
ESP-Open-SDK ver: 0.0.1 compiled @ Nov 23 2016 22:06:20
phy ver: 273, pp ver: 8.3

SDK version:0.9.9
sleep enable,type: 2
Fatal exception (28):
epc1=0x4020ad1c

0x4020ad1c: wificfg_init at /Volumes/esp8266/esp-open-rtos/extras/wificfg/wificfg.c:1438

epc2=0x00000000
epc3=0x00000000
excvaddr=0x00000000
depc=0x00000000
excsave1=0x4020ad19

0x4020ad19: wificfg_init at /Volumes/esp8266/esp-open-rtos/extras/wificfg/wificfg.c:1434

Registers:
a0 4020ad19 a1 3fff3c90 a2  00000000 a3  3fff1324

0x4020ad19: wificfg_init at /Volumes/esp8266/esp-open-rtos/extras/wificfg/wificfg.c:1434

a4  00000001 a5  3fff5048 a6  04000002 a7  3feffe00
a8  00000100 a9  0000001a a10 00000018 a11 04000102
a12 40218548 a13 00000050 SAR 00000014

0x40218548: _malloc_usable_size_r at ??:?


Stack: SP=0x3fff3c90
0x3fff3c90: 30726f65 64616330 00356261 00000000
0x3fff3ca0: 00320001 0000000d 33302064 34666666
0x3fff3cb0: 00303032 a5a578a5 00000000 a5a5a5a5
0x3fff3cc0: 3fff3d20 3fff3d10 00000004 00000001
0x3fff3cd0: 4021c955 00000001 00000000 00000003

0x4021c955: strchr at ??:?

0x3fff3ce0: 3fff3d40 3fff3d30 00000008 00000000
0x3fff3cf0: 00000000 4021c954 3ffe800c 4010606a

0x4021c954: strchr at ??:?


0x4010606a: printf at /home/gus/dev/esp/rtos/newlib/build/xtensa-lx106-elf/newlib/libc/stdio/../../../../../newlib/libc/stdio/printf.c:61

0x3fff3d00: 3fff3d20 3fff3d10 00000004 00000000

Free Heap: 43828
_heap_start 0x3fff1460 brk 0x3fff5048 supervisor sp 0x3ffffb00 sp-brk 43704 bytes
arena (total_size) 15336 fordblks (free_size) 124 uordblocks (used_size) 15212",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,36,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-262656312,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.",@sheinz Updated this PR with the latest code. If it still crashes then one likely difference is the sysparam code. If you had the time then you could try to cherry-pick the sysparam commit from https://github.com/ourairquality/esp-open-rtos and see if that fixes the crash.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/sheinz,37,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-262981785,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.",@ourairquality I pulled sysparam changes from your fork and wificfg seems to work fine. Do you mind if I open a PR for your sysparam changes? Because this PR without updated sysparam will not work. Moreover you've added a really good stuff in the sysparam and it would be nice to have it here.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,38,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-263035736,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@sheinz Yes, you are welcome to make whatever use you want of the code, and if you can finesse landing some improvement that would be great. Many of the changes were to work around alignment issues with the SPI flash code, but it was later pointed out that there are other functions that have already addressed this and it might be better to someday re-factor the code to use them.
On your sysparm branch: I think it is better to not use strings for bool values because even reading a sysparam string requires dynamic memory allocation which might require locking and may well fail, so it seems much better to just use a numeric value which can be safely read in more contexts. Also my fork uses a single byte of storage for a uint8 parameter value, rather than a uint32. But I have my own fork, so do what you wish, and if the API can be compatible then that would be great, and I can add a bool API for my fork that uses an uint8 for storage to keep other code compatible.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/malachib,39,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-310274951,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Very late in the game I know, but I must chime in and say it is critical for a provisioning feature like this (passwords, station ids, etc) to go over some kind of encryption channel.  With @ourairquality awesome LWIPv2 work, that moves us closer .
LWIPv2 contains lwip/apps/httpd code with an HTTPS mode -- BUT it is not working out of the box and will need our attention",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,40,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-310285819,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@malachib There are probably many use cases in which the wifi security is more than adequate, and the device ram is very limited, so this wificfg option is not planned to use https and rather be one very lightweight option.
It seems secure to setup the device when it is running as a secure access point and then there is an option to disable the configuration. It also seems adequate on a trusted local network. The logic could be extended to allow configuration only via the AP netif.
I am not even sure if running a web server on the device is a great solution. It should be possible to keep all the web side code on another device in a web app. But people have many different uses. I am interested to learn more about standards that emerge.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/malachib,41,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-310289595,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","For non-provisioning use cases, I agree, which I surmise covers at least 75% of this thread.  The thing is, the inbuilt WiFi security isn't specifically the issue.
Let's look at provisioning use cases using HTTP:
Case 1: Open AP, user configures ssid + pass.
--Pass travels in plaintext, so this use case fails immediately
Case 2: Closed AP, user configures ssid + pass over secured WiFi AP.   Mass produced product
--In this case, password is distributed to get into the AP.  This widens attack surface, and likelihood someone discovers the password is high (think DeCSS).  Not a fail outright, but problematic
Case 3: Closed AP, user configures ssid + pass over secured WiFi AP.   One-off/hobby product
--In this case, password distribution is a very tight loop.  So Case 3 is tenable.
Evaluating these cases we see that the only case where provisioning is protected is a low-volume one-off scenario
EDIT:  There is a variant on Case 2 which I've seen big companies like AT&T do:
Case 2a: Closed AP, user configures ssid + pass over secured WiFi AP.   Mass produced product.  Serialized password
--In this case, password is unique per device and a sticker is present with said password.  This satisfies security requirements, but presents a logistical challenge.  I.E. now your firmware burning process gets more complicated, and of course you gotta print and apply those stickers",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,42,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-310294809,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@malachib I basically agree with you, but I am at the 'case 3' at present. I recall seeing some work that had the station mode configured from a web browser and it was almost automated, see https://wiki.mozilla.org/FlyWeb and this involved mdns, but that work might have all been canned. Sorry I am just not an expert on where things are heading but I am keen to follow solutions.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/malachib,43,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-310296887,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","I plan to open a separate issue/pull request to really get into the nuts and bolts of this rather than hijacking your thread, but to summarize: HTTPS RAM usage is actually very manageable because it can be shut off most of the time.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/ourairquality,44,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-310302206,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","@malachib fwiw I think I can get you around 8k more ram, but it is sdk static memory at known offset from the sdk_wDevCtrl - the sdk seems to allocate 8k of TX buffers that are not used!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,208,2016-08-29T13:00:24Z,2017-08-14T08:12:42Z,2017-08-14T08:12:45Z,CLOSED,False,2109,5,19,https://github.com/ourairquality,Wifi web based configuration.,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/208,https://github.com/malachib,45,https://github.com/SuperHouse/esp-open-rtos/pull/208#issuecomment-310320980,"Practically our project needs some web based configuration support as most users would be challenged to run the sysparam editor. This is a quick start. Sharing it here in case other people need something similar and might be able to help, but happy to maintain elsewhere. It implements a minimal http server, attempts to be robust to user input by using a fixed sized stack allocated working buffer, truncating fields if unexpectedly large etc. One benefit of maintaining this here is that the support for this might be refined as the project develops, for example the control of the network management seems rather a black box at present and this might open up in future.","Wow, that's a lot! Sounds too good to be true...
You should get on the esp-open-rtos irc channel on freenode...",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/209,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.","Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/foogod,2,https://github.com/SuperHouse/esp-open-rtos/pull/209#issuecomment-243502668,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.","Changing the name of the get/set_int to int32 is fine by me.. I'm not sure what kind of ""more efficient"" implementation you have in mind for int8, though, since even if we read/write it as a single binary byte, it will still take up 4 bytes of payload space (due to limitations in the ESP8266 flash write routines/hardware), so it will still not be any smaller or more efficient than an int32..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/209#issuecomment-243590736,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.","@foogod We can write and read a single byte from the flash, so an int8 is more efficient in terms of storage. There is an alignment restriction on the source pointer for sdk_spi_flash_write but no restriction on the destination alignment or the size. One suggestion is to use a bounce buffer to overcome the source alignment restriction.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/foogod,4,https://github.com/SuperHouse/esp-open-rtos/pull/209#issuecomment-243614030,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.","That is actually not true (I've tested it).  Regardless of what length you specify, the flash write routines will always write a multiple of 4 bytes out to the flash (including trailing garbage if you haven't set anything for those bytes in the source buffer).  I did a little bit of digging into the routines and it appears this is actually a limitation of the dedicated SPI flash write-from-memory hardware built into the ESP8266 which the routines use.  This is why sysparam always writes everything (including payloads) in multiples of 4 bytes, because otherwise it resulted in corruptions due to this limitation.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/foogod,5,https://github.com/SuperHouse/esp-open-rtos/pull/209#issuecomment-243615036,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.","Though it does occur to me that now that we're doing all writes through the bounce buffer, we could conceivably do short writes by padding the extra bytes with 0xFF in the bounce buffer before submitting the write call..  They would technically still get written, but would have no effect..  (would want to do a fair bit of testing to verify that works as expected, and would require changing several other places in the code where it rounds-up payload sizes, etc..)
If we could get that working, then yeah, maybe an int8 version of the routines would make more sense..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/209#issuecomment-243730997,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.","@foogod Ok, thank you again, I see a lot of alignment issues now. So the flash address needs to be aligned if the write can cross a flash page boundary, the source address and size need to be word aligned. The flash read need to be page aligned and multiples of the word size. Made some updates to my sysparam code using bounce buffers, so entries no long need to be word aligned and it can store a single byte payload more efficiently (if that is really significant), should also save a little payload space for strings hear and there.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/209#issuecomment-244668813,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.","There's already an alternative implementation of SPI flash read/write that was written for SPIFFS integration. It doesn't require any alignment and allows read/write with byte precision.
Can it be of any use for sysparams?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/kanflo,8,https://github.com/SuperHouse/esp-open-rtos/pull/209#issuecomment-244671257,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.","@sheinz, I for one hade missed your alternative implementation. It could for sure be used in sysparam (PRs welcome :) and we might need to do more advertisement for it. I would not mind having it moved to core.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,209,2016-08-29T14:11:40Z,2016-09-15T06:17:26Z,2016-09-15T06:17:26Z,MERGED,True,68,13,2,https://github.com/ourairquality,sysparams: get/set int32 and int8 apis.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/209,https://github.com/kanflo,9,https://github.com/SuperHouse/esp-open-rtos/pull/209#issuecomment-244671425,"Rename the get/set_int api functions to get/set_int32.
Add get/set_int8 api functions too in anticipation of more efficient implementations for these.",I think this one could be merged if others agree. I think we should merge sooner rather than later and agree on a frozen sysparam API before it sees widespread use.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/211,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/211#issuecomment-243420656,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","Perhaps performance would not be impacted if the gpio number is a constant, because the comparison and dead code would be optimized away. Happy to just bundle this in the gpio_read and gpio_write if that is what people want?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/vlad-ivanov-name,3,https://github.com/SuperHouse/esp-open-rtos/pull/211#issuecomment-243463172,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","For static inline functions (read/write) yes, branching should be eliminated as a part of constant propagation. And gpio_enable is unlikely to be called very often so I think performance impact will be minimal.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/foogod,4,https://github.com/SuperHouse/esp-open-rtos/pull/211#issuecomment-243558757,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","Yeah, I think including it as a conditional in the standard gpio_read/gpio_write would be fine, actually..  If someone's concerned about speed there they should already be using a compile-time constant for pin number (as it optimizes out a lot of the other internals of those functions anyway) and so this would be just another compile-time optimization, so that should be fine..
(Alternately, I'm fine with merging this in as-is for now too if you don't want to make that change for some reason.. just let me know)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/211#issuecomment-243599415,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","Thank you for the feedback. Actually the i2c driver might be an example that is compromised by poor performance in these paths and uses a dynamic pin configuration, and it also uses the gpio_enable function to toggle pins high an low rather than using open drain. There is already an open PR to write a separate 'fast' i2c driver.
I was even thinking of abstracting the i2c driver to support multiple i2c buses so wanted to keep the dynamic pin definitions. The gpio16 pin seems to be in a different class, so perhaps it's fine with separate api functions.
So have split out gpio16_enable too for now. Perhaps we need to add inline api functions to switch between input and output on a pin quickly too, without all the configuration too.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/foogod,6,https://github.com/SuperHouse/esp-open-rtos/pull/211#issuecomment-243620821,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","Hmm, actually now that you mention it, things like the i2c driver also seem to be a good argument for including GPIO16 into the main routines if we can manage it.  It would be really nice if somebody could, for example, do I2C over GPIO16 by just passing ""16"" to the i2c driver, which they can't do if we keep things separate..
I haven't actually looked at the i2c driver in a while, but if it's using gpio_enable to switch modes instead of open-drain then that's probably something we should fix in the i2c driver (and shouldn't be using that bad design as a reason for design decisions elsewhere in the code)..
Having an extra conditional in these routines probably isn't the end of the world either, even if the value isn't a compile-time constant, using things like __builtin_expect we should be able to ensure that the GPIO0-15 code remains the fast-path and it will only introduce an extra 2 opcodes (25ns at 80MHz) into that path.  For something like the i2c driver I really doubt that will make any difference to anyone (and if it does we can probably more than make up for it with improvements in the i2c driver (like not using gpio_enable to switch modes) instead)..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/211#issuecomment-243633160,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","@foogod Ok, thanks. Changed the PR to bundle the gpio16 support into the existing api functions. Looking at the I2C driver I also don't think the overhead is significant, and it has delays after changes anyway. Fir the I2C driver, changing the pin from input to output rather than using open drain was a feature, there was a discussion somewhere on the merits of the approach.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/vlad-ivanov-name,8,https://github.com/SuperHouse/esp-open-rtos/pull/211#issuecomment-243682636,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","Speaking about performance, I have seen mentions of rather slow MMIO register access — people say it takes about 17 cycles to write a peripheral register — this is probably an overstatement and there are different measurements down there (about 5 cycles), but still more than 1 cycle. Pure speculation here, but I think cycles could be lost in the glue logic between lx106 memory interface and peripheral bus, which probably doesn't have pipeline support implemented. So these extra branch delays are quite small compared to IO access time.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,211,2016-08-30T11:24:56Z,2016-09-05T06:20:26Z,2016-09-05T06:20:26Z,MERGED,True,27,4,2,https://github.com/ourairquality,GPIO16 support.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/211,https://github.com/projectgus,9,https://github.com/SuperHouse/esp-open-rtos/pull/211#issuecomment-244601376,"Need this to blink the LED on nodemcu boards! Was discussed here #60 Have not integrated this with the other gpio functions to avoid a performance regression, and if desired then perhaps that could be a separate PR.","This looks good to me, thanks @ourairquality . +1 to merge here if noone has any other concerns.
@resetnow , probably the most relevant thing about the ESP8266 CPU is that it has the xtensa ""write buffer"" feature, with buffer size one. So there can always be one peripheral write ""in flight"" at a given time without blocking the CPU, as long as it doesn't issue another write that blocks behind it (or a MEMW instruction). This means that some additional conditional tests like the one mentioned may not cause any performance overhead, even if they're not known at compile time, because in a tight loop the conditional can be evaluated during the window when the write buffer is still flushing. I wouldn't guarantee this without measuring it, but that's my suspicion!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,212,2016-08-30T22:53:36Z,2016-09-04T12:33:46Z,2016-09-04T12:33:46Z,MERGED,True,1,0,1,https://github.com/pfalcon,esp/interrupts.h: Add RTC interrupt number.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/212,https://github.com/pfalcon,1,https://github.com/SuperHouse/esp-open-rtos/pull/212,"40002a58     $a3 = rtc_intr_handler
40002a5e     $a4 = 0x0
40002a60     $a2 = 0x3
40002a62     call ets_isr_attach","40002a58     $a3 = rtc_intr_handler
40002a5e     $a4 = 0x0
40002a60     $a2 = 0x3
40002a62     call ets_isr_attach",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,212,2016-08-30T22:53:36Z,2016-09-04T12:33:46Z,2016-09-04T12:33:46Z,MERGED,True,1,0,1,https://github.com/pfalcon,esp/interrupts.h: Add RTC interrupt number.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/212,https://github.com/pfalcon,2,https://github.com/SuperHouse/esp-open-rtos/pull/212#issuecomment-243607564,"40002a58     $a3 = rtc_intr_handler
40002a5e     $a4 = 0x0
40002a60     $a2 = 0x3
40002a62     call ets_isr_attach","With this, asisgnment of interrupt numbers 0-10, are known, which is pretty good. Per BootROM functions, there's 14 total settable interrupt vectors, 13 level1 + NMI. So, we know 11 of 13 level1 vector assignments.. Unknown vectors 11, 12. Of course, they can be unused actually.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,212,2016-08-30T22:53:36Z,2016-09-04T12:33:46Z,2016-09-04T12:33:46Z,MERGED,True,1,0,1,https://github.com/pfalcon,esp/interrupts.h: Add RTC interrupt number.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/212,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/212#issuecomment-244601102,"40002a58     $a3 = rtc_intr_handler
40002a5e     $a4 = 0x0
40002a60     $a2 = 0x3
40002a62     call ets_isr_attach","Great, thanks!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,213,2016-08-31T10:47:36Z,2016-11-23T22:41:39Z,2016-11-23T22:41:39Z,MERGED,True,38,7,3,https://github.com/ourairquality,"sysparam: export the 'compact' function, added it to the editor.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/213,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/213,"Useful after editing parameters to get best read performance. Also to clear out the history, such as old passwords, but would take two calls for that.","Useful after editing parameters to get best read performance. Also to clear out the history, such as old passwords, but would take two calls for that.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,213,2016-08-31T10:47:36Z,2016-11-23T22:41:39Z,2016-11-23T22:41:39Z,MERGED,True,38,7,3,https://github.com/ourairquality,"sysparam: export the 'compact' function, added it to the editor.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/213,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/213#issuecomment-262646047,"Useful after editing parameters to get best read performance. Also to clear out the history, such as old passwords, but would take two calls for that.","Fixed, thank you for the reminded.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,214,2016-09-01T11:20:39Z,2016-09-05T06:22:19Z,2016-09-05T07:31:12Z,MERGED,True,16,17,1,https://github.com/ourairquality,i2c: use open drain for output rather than flipping between input and output.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/214,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/214,"Using gpio_enable and flipping the configuration appears to be a major cause of poor performance in the i2c driver, so this changes to using the outputs as open-drain only.","Using gpio_enable and flipping the configuration appears to be a major cause of poor performance in the i2c driver, so this changes to using the outputs as open-drain only.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,214,2016-09-01T11:20:39Z,2016-09-05T06:22:19Z,2016-09-05T07:31:12Z,MERGED,True,16,17,1,https://github.com/ourairquality,i2c: use open drain for output rather than flipping between input and output.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/214,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/214#issuecomment-244360178,"Using gpio_enable and flipping the configuration appears to be a major cause of poor performance in the i2c driver, so this changes to using the outputs as open-drain only.","Great fix, the performance gain is significant. I did a test with DS3231 example with a delay of 1 us from sdk :
old i2c lib = >  90kHz   ;  1787 us process time
fix i2c lib => 300 kHz ;  940 us process time  (current fix #214)
fast i2c lib =>  370 kHz ;  570 us process time ( the alternative lib #202 )",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,214,2016-09-01T11:20:39Z,2016-09-05T06:22:19Z,2016-09-05T07:31:12Z,MERGED,True,16,17,1,https://github.com/ourairquality,i2c: use open drain for output rather than flipping between input and output.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/214,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/214#issuecomment-244601071,"Using gpio_enable and flipping the configuration appears to be a major cause of poor performance in the i2c driver, so this changes to using the outputs as open-drain only.","Thanks @ourairquality, this looks good to me! 👍",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,214,2016-09-01T11:20:39Z,2016-09-05T06:22:19Z,2016-09-05T07:31:12Z,MERGED,True,16,17,1,https://github.com/ourairquality,i2c: use open drain for output rather than flipping between input and output.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/214,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/214#issuecomment-244666978,"Using gpio_enable and flipping the configuration appears to be a major cause of poor performance in the i2c driver, so this changes to using the outputs as open-drain only.","Thanks @ourairquality.
Has anyone tried GPIO 16 with i2c already?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,214,2016-09-01T11:20:39Z,2016-09-05T06:22:19Z,2016-09-05T07:31:12Z,MERGED,True,16,17,1,https://github.com/ourairquality,i2c: use open drain for output rather than flipping between input and output.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/214,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/214#issuecomment-244676470,"Using gpio_enable and flipping the configuration appears to be a major cause of poor performance in the i2c driver, so this changes to using the outputs as open-drain only.",@sheinz It's not expected for work on GPIO 16 now as GPIO 16 has no open drain support (or at least it's not in the code yet).,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,214,2016-09-01T11:20:39Z,2016-09-05T06:22:19Z,2016-09-05T07:31:12Z,MERGED,True,16,17,1,https://github.com/ourairquality,i2c: use open drain for output rather than flipping between input and output.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/214,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/214#issuecomment-244677008,"Using gpio_enable and flipping the configuration appears to be a major cause of poor performance in the i2c driver, so this changes to using the outputs as open-drain only.","One other inconvenient of GPIO 16, this pin is very slow to switch between state.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,215,2016-09-04T20:22:34Z,2016-09-05T06:23:56Z,2016-09-05T06:27:15Z,MERGED,True,16,0,1,https://github.com/pfalcon,esp/gpio_regs.h: Add info about strapping pins captured in GPIO.IN register.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/215,https://github.com/pfalcon,1,https://github.com/SuperHouse/esp-open-rtos/pull/215,"Specifically, in the high 16 bits of GPIO.IN register.","Specifically, in the high 16 bits of GPIO.IN register.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,215,2016-09-04T20:22:34Z,2016-09-05T06:23:56Z,2016-09-05T06:27:15Z,MERGED,True,16,0,1,https://github.com/pfalcon,esp/gpio_regs.h: Add info about strapping pins captured in GPIO.IN register.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/215,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/215#issuecomment-244667424,"Specifically, in the high 16 bits of GPIO.IN register.",@pfalcon Thank you for the contribution!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,217,2016-09-06T14:24:55Z,2016-09-15T06:16:54Z,2016-09-15T06:16:54Z,MERGED,True,4,4,1,https://github.com/ourairquality,Comment the sdk_station_config slots.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/217,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/217,See mention in some other esp code that if the bssid_set value is not zero then the bssid must be set. Should the examples be initializing this to zero explicitly?,See mention in some other esp code that if the bssid_set value is not zero then the bssid must be set. Should the examples be initializing this to zero explicitly?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,217,2016-09-06T14:24:55Z,2016-09-15T06:16:54Z,2016-09-15T06:16:54Z,MERGED,True,4,4,1,https://github.com/ourairquality,Comment the sdk_station_config slots.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/217,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/217#issuecomment-246513160,See mention in some other esp code that if the bssid_set value is not zero then the bssid must be set. Should the examples be initializing this to zero explicitly?,"The C99 standard specifies that if there's an intiializer list for an aggregate type (aggregates include structs) then any non-specified fields are initialized to zero. So this PR doesn't change the compiler output.
That said, there is a bit of a gap around understanding of these structures. I think it would be really useful to have some comments in include/espressif/esp_sta.h explaining what each field should be set to (including details like ""bssid_set should be 0 if using SSID, 1 if using bssid"").",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,217,2016-09-06T14:24:55Z,2016-09-15T06:16:54Z,2016-09-15T06:16:54Z,MERGED,True,4,4,1,https://github.com/ourairquality,Comment the sdk_station_config slots.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/217,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/217#issuecomment-246577072,See mention in some other esp code that if the bssid_set value is not zero then the bssid must be set. Should the examples be initializing this to zero explicitly?,Thanks. Changed the PR to just add some comments as suggested.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,218,2016-09-08T13:34:54Z,2016-11-14T10:13:38Z,2016-11-15T02:29:36Z,MERGED,True,14,2,2,https://github.com/ourairquality,wifi_get/set_sleep_type: add source code implementations plus fixes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/218,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/218,"wifi_set_sleep_type returns a bool success flag.
wifi_get_sleep_type seemed useless, just returning an argument. Added an implementation using sdk_pm_get_sleep_type.","wifi_set_sleep_type returns a bool success flag.
wifi_get_sleep_type seemed useless, just returning an argument. Added an implementation using sdk_pm_get_sleep_type.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,218,2016-09-08T13:34:54Z,2016-11-14T10:13:38Z,2016-11-15T02:29:36Z,MERGED,True,14,2,2,https://github.com/ourairquality,wifi_get/set_sleep_type: add source code implementations plus fixes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/218,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/218#issuecomment-246514176,"wifi_set_sleep_type returns a bool success flag.
wifi_get_sleep_type seemed useless, just returning an argument. Added an implementation using sdk_pm_get_sleep_type.","This looks good to me. @foogod do you have any thoughts on this?
Power management in version 0.9.9 of the Espressif SDK wasn't very well documented. Do you know if using these functions has much effect on power consumption?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,218,2016-09-08T13:34:54Z,2016-11-14T10:13:38Z,2016-11-15T02:29:36Z,MERGED,True,14,2,2,https://github.com/ourairquality,wifi_get/set_sleep_type: add source code implementations plus fixes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/218,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/218#issuecomment-260150868,"wifi_set_sleep_type returns a bool success flag.
wifi_get_sleep_type seemed useless, just returning an argument. Added an implementation using sdk_pm_get_sleep_type.","Yes, updated the name but the definitions added seems to be best placed in libmain.h and were moved there in #267 so this depends on #267 landing first. Once we get the definitions landed it will be possible to start landing some of these.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,220,2016-09-15T08:48:58Z,2016-11-23T15:16:03Z,2016-11-23T15:16:03Z,MERGED,True,6,6,2,https://github.com/Zaltora,Bmp280 option,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/220,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/220,Add skip option and possibility to select oversampling for temperature with bmp/bme280  (see datasheet),Add skip option and possibility to select oversampling for temperature with bmp/bme280  (see datasheet),True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,221,2016-09-15T13:16:21Z,2016-09-22T06:56:06Z,2016-09-22T06:56:20Z,MERGED,True,7,1,1,https://github.com/ourairquality,timers: esp library timer callbacks expect their argument not a xTimerHandle,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/221,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/221,Fixes #140 and probably lots of other issues.,Fixes #140 and probably lots of other issues.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,221,2016-09-15T13:16:21Z,2016-09-22T06:56:06Z,2016-09-22T06:56:20Z,MERGED,True,7,1,1,https://github.com/ourairquality,timers: esp library timer callbacks expect their argument not a xTimerHandle,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/221,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/221#issuecomment-247343675,Fixes #140 and probably lots of other issues.,"I also discovered this issue and it was discussed in #176
We might eventually leave single implementation of timers. Currently there are two kind of timers: sdk_os_timer_ and sdk_ets_timer_
For now the fix is good for me. Thanks @ourairquality!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,221,2016-09-15T13:16:21Z,2016-09-22T06:56:06Z,2016-09-22T06:56:20Z,MERGED,True,7,1,1,https://github.com/ourairquality,timers: esp library timer callbacks expect their argument not a xTimerHandle,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/221,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/221#issuecomment-248826957,Fixes #140 and probably lots of other issues.,Thanks @ourairquality!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,222,2016-09-15T19:40:01Z,2016-10-10T19:16:46Z,2016-10-10T19:16:47Z,MERGED,True,74,0,1,https://github.com/vlad-ivanov-name,core: add phy regs definition,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/222,https://github.com/vlad-ivanov-name,1,https://github.com/SuperHouse/esp-open-rtos/pull/222,"I plan to implement some of libphy functions in C later, so I thought it would be good to have an attempt of phy registers description.
Also, if somebody is interested in doing something similar, radare2 has recently been updated with better xtensa support — I posted a message here.","I plan to implement some of libphy functions in C later, so I thought it would be good to have an attempt of phy registers description.
Also, if somebody is interested in doing something similar, radare2 has recently been updated with better xtensa support — I posted a message here.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,222,2016-09-15T19:40:01Z,2016-10-10T19:16:46Z,2016-10-10T19:16:47Z,MERGED,True,74,0,1,https://github.com/vlad-ivanov-name,core: add phy regs definition,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/222,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/222#issuecomment-252719194,"I plan to implement some of libphy functions in C later, so I thought it would be good to have an attempt of phy registers description.
Also, if somebody is interested in doing something similar, radare2 has recently been updated with better xtensa support — I posted a message here.",Thanks @resetnow!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,224,2016-09-16T02:29:33Z,2016-10-20T23:37:27Z,2016-10-20T23:37:29Z,CLOSED,False,107,2,5,https://github.com/ourairquality,libnet80211: start an open_esplib library.,2,['help wanted'],https://github.com/SuperHouse/esp-open-rtos/pull/224,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/224,"Would like to start add some functions for libraries other than libmain, and here's two I wrote recently.
Need help with how to actually get this to be linked. It seems to get built ok, just not used?","Would like to start add some functions for libraries other than libmain, and here's two I wrote recently.
Need help with how to actually get this to be linked. It seems to get built ok, just not used?",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,224,2016-09-16T02:29:33Z,2016-10-20T23:37:27Z,2016-10-20T23:37:29Z,CLOSED,False,107,2,5,https://github.com/ourairquality,libnet80211: start an open_esplib library.,2,['help wanted'],https://github.com/SuperHouse/esp-open-rtos/pull/224,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/224#issuecomment-247547632,"Would like to start add some functions for libraries other than libmain, and here's two I wrote recently.
Need help with how to actually get this to be linked. It seems to get built ok, just not used?","Solved the makefile problem, sorry for the noise. The *_DEFAULT_ROOT was not correct, but we have open_esplibs_ROOT so using that.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,224,2016-09-16T02:29:33Z,2016-10-20T23:37:27Z,2016-10-20T23:37:29Z,CLOSED,False,107,2,5,https://github.com/ourairquality,libnet80211: start an open_esplib library.,2,['help wanted'],https://github.com/SuperHouse/esp-open-rtos/pull/224,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/224#issuecomment-247569262,"Would like to start add some functions for libraries other than libmain, and here's two I wrote recently.
Need help with how to actually get this to be linked. It seems to get built ok, just not used?","Unfortunately still got problems here, the new functions are not used in preference to the sdk functions. Have been able to get them to be used, buy adding a dummy function in the same object file, and referencing it from the application. Linker challenge I assume?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,224,2016-09-16T02:29:33Z,2016-10-20T23:37:27Z,2016-10-20T23:37:29Z,CLOSED,False,107,2,5,https://github.com/ourairquality,libnet80211: start an open_esplib library.,2,['help wanted'],https://github.com/SuperHouse/esp-open-rtos/pull/224,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/224#issuecomment-247573454,"Would like to start add some functions for libraries other than libmain, and here's two I wrote recently.
Need help with how to actually get this to be linked. It seems to get built ok, just not used?","Added some hack references to demonstrate how I've seen these used. Perhaps someone with good knowledge of the linker can spot the problem? But anyway there is a hack workaround. Once a complete object file had open definitions I presume removing it would also address the problem, so the hack might only be temporary.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,224,2016-09-16T02:29:33Z,2016-10-20T23:37:27Z,2016-10-20T23:37:29Z,CLOSED,False,107,2,5,https://github.com/ourairquality,libnet80211: start an open_esplib library.,2,['help wanted'],https://github.com/SuperHouse/esp-open-rtos/pull/224,https://github.com/sheinz,5,https://github.com/SuperHouse/esp-open-rtos/pull/224#issuecomment-255234460,"Would like to start add some functions for libraries other than libmain, and here's two I wrote recently.
Need help with how to actually get this to be linked. It seems to get built ok, just not used?","I have no idea why those functions are not linked instead of the Espressif's.
The build stage 2 that renames symbols in the Espressif's libraries are also weakens the symbols, so they should be replaced with no-weak versions.
SDK processing stage 2: Renaming symbols in SDK library build/sdklib/libnet80211_stage1.a -> build/sdklib/libnet80211.a
xtensa-lx106-elf-objcopy --redefine-syms ../../lib/allsymbols.rename --weaken build/sdklib/libnet80211_stage1.a build/sdklib/libnet80211.a

The linking workaround might get unnecessary eventually when enough of libnet80211 will be open source and it will be directly referenced from other source code.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,228,2016-09-24T11:06:57Z,2016-10-12T13:41:52Z,2016-10-12T15:05:44Z,MERGED,True,512,0,5,https://github.com/bschwind,Add a TSL2561 driver and example usage,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/228,https://github.com/bschwind,1,https://github.com/SuperHouse/esp-open-rtos/pull/228,"This pull request adds support for the TSL2561 Light Sensor
It uses the I2C module from the extras directory of this project.
This driver supports setting an integration time from the presets of (13ms, 101ms, and 402ms), as well as a 1X and 16X gain. The driver uses vTaskDelay when the lux value is requested from the sensor so it has time to integrate the sensors and get a reading. The sensor remains in a ""powered down"" mode when not in use.
Interrupts and custom integration times are not supported in this PR.","This pull request adds support for the TSL2561 Light Sensor
It uses the I2C module from the extras directory of this project.
This driver supports setting an integration time from the presets of (13ms, 101ms, and 402ms), as well as a 1X and 16X gain. The driver uses vTaskDelay when the lux value is requested from the sensor so it has time to integrate the sensors and get a reading. The sensor remains in a ""powered down"" mode when not in use.
Interrupts and custom integration times are not supported in this PR.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,228,2016-09-24T11:06:57Z,2016-10-12T13:41:52Z,2016-10-12T15:05:44Z,MERGED,True,512,0,5,https://github.com/bschwind,Add a TSL2561 driver and example usage,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/228,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/228#issuecomment-252718217,"This pull request adds support for the TSL2561 Light Sensor
It uses the I2C module from the extras directory of this project.
This driver supports setting an integration time from the presets of (13ms, 101ms, and 402ms), as well as a 1X and 16X gain. The driver uses vTaskDelay when the lux value is requested from the sensor so it has time to integrate the sensors and get a reading. The sensor remains in a ""powered down"" mode when not in use.
Interrupts and custom integration times are not supported in this PR.","Thanks @bschwind for the contribution!
This looks good apart from a few minor comments.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,228,2016-09-24T11:06:57Z,2016-10-12T13:41:52Z,2016-10-12T15:05:44Z,MERGED,True,512,0,5,https://github.com/bschwind,Add a TSL2561 driver and example usage,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/228,https://github.com/bschwind,3,https://github.com/SuperHouse/esp-open-rtos/pull/228#issuecomment-252899006,"This pull request adds support for the TSL2561 Light Sensor
It uses the I2C module from the extras directory of this project.
This driver supports setting an integration time from the presets of (13ms, 101ms, and 402ms), as well as a 1X and 16X gain. The driver uses vTaskDelay when the lux value is requested from the sensor so it has time to integrate the sensors and get a reading. The sensor remains in a ""powered down"" mode when not in use.
Interrupts and custom integration times are not supported in this PR.","@sheinz Thanks for the review!
I addressed your comments and updated the PR. When it's ready to merge I'll squash it back down to one commit, if that's preferred.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,228,2016-09-24T11:06:57Z,2016-10-12T13:41:52Z,2016-10-12T15:05:44Z,MERGED,True,512,0,5,https://github.com/bschwind,Add a TSL2561 driver and example usage,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/228,https://github.com/bschwind,4,https://github.com/SuperHouse/esp-open-rtos/pull/228#issuecomment-252925743,"This pull request adds support for the TSL2561 Light Sensor
It uses the I2C module from the extras directory of this project.
This driver supports setting an integration time from the presets of (13ms, 101ms, and 402ms), as well as a 1X and 16X gain. The driver uses vTaskDelay when the lux value is requested from the sensor so it has time to integrate the sensors and get a reading. The sensor remains in a ""powered down"" mode when not in use.
Interrupts and custom integration times are not supported in this PR.","@sheinz @UncleRus @resetnow, Thanks for your reviews and suggestions",True,"{'THUMBS_UP': ['https://github.com/UncleRus', 'https://github.com/vlad-ivanov-name']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,232,2016-10-09T09:29:06Z,2016-10-12T21:46:43Z,2017-10-25T11:21:48Z,MERGED,True,335,0,5,https://github.com/UncleRus,DS1307 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/232,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/232,Driver for the most common RTC DS1307.,Driver for the most common RTC DS1307.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,232,2016-10-09T09:29:06Z,2016-10-12T21:46:43Z,2017-10-25T11:21:48Z,MERGED,True,335,0,5,https://github.com/UncleRus,DS1307 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/232,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/232#issuecomment-252516593,Driver for the most common RTC DS1307.,"There is already a ds3231 driver, and I understood these were largely compatible, so is a separate driver really necessary?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,232,2016-10-09T09:29:06Z,2016-10-12T21:46:43Z,2017-10-25T11:21:48Z,MERGED,True,335,0,5,https://github.com/UncleRus,DS1307 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/232,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/232#issuecomment-252519593,Driver for the most common RTC DS1307.,"Yes, they looks similar, but:

register maps are the same only at lower addresses (0x00 - 0x06)
DS1307 has no alarms
DS1307 has no temperature sensor
Status and control registers are completely different

and so on.
I think specialized drivers for DS1307 and DS3231 is better.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,232,2016-10-09T09:29:06Z,2016-10-12T21:46:43Z,2017-10-25T11:21:48Z,MERGED,True,335,0,5,https://github.com/UncleRus,DS1307 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/232,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/232#issuecomment-252713687,Driver for the most common RTC DS1307.,"Thanks @UncleRus for the driver!
This looks really good to me.
Even though generic driver that supports both ds1307 and ds3231 seems like a reasonable approach. Most likely in a real project only one kind of chip will be used and a simple clean driver that supports only the hardware you have seems like a good thing. Nevertheless I don't think theres only one right way. For now this driver looks good as it is.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,232,2016-10-09T09:29:06Z,2016-10-12T21:46:43Z,2017-10-25T11:21:48Z,MERGED,True,335,0,5,https://github.com/UncleRus,DS1307 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/232,https://github.com/UncleRus,5,https://github.com/SuperHouse/esp-open-rtos/pull/232#issuecomment-253167511,Driver for the most common RTC DS1307.,Please review,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,232,2016-10-09T09:29:06Z,2016-10-12T21:46:43Z,2017-10-25T11:21:48Z,MERGED,True,335,0,5,https://github.com/UncleRus,DS1307 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/232,https://github.com/sheinz,6,https://github.com/SuperHouse/esp-open-rtos/pull/232#issuecomment-253215395,Driver for the most common RTC DS1307.,I've looked through the code and apart from a small comment about I2C initialisation everything looks good to me.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,232,2016-10-09T09:29:06Z,2016-10-12T21:46:43Z,2017-10-25T11:21:48Z,MERGED,True,335,0,5,https://github.com/UncleRus,DS1307 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/232,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/232#issuecomment-253303764,Driver for the most common RTC DS1307.,"I've just checked it on my hardware. The example worked from the first try :)
@UncleRus Could you squash your commits for this PR, and I will merge it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,232,2016-10-09T09:29:06Z,2016-10-12T21:46:43Z,2017-10-25T11:21:48Z,MERGED,True,335,0,5,https://github.com/UncleRus,DS1307 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/232,https://github.com/UncleRus,8,https://github.com/SuperHouse/esp-open-rtos/pull/232#issuecomment-253308275,Driver for the most common RTC DS1307.,Done,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,235,2016-10-11T04:31:16Z,2016-10-12T21:50:55Z,2017-10-25T11:21:48Z,MERGED,True,179,0,5,https://github.com/UncleRus,Driver for ultrasonic range meters + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/235,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/235,"Driver for ultrasonic range meters like HC-SR04, HY-SRF05 and so on.","Driver for ultrasonic range meters like HC-SR04, HY-SRF05 and so on.",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,235,2016-10-11T04:31:16Z,2016-10-12T21:50:55Z,2017-10-25T11:21:48Z,MERGED,True,179,0,5,https://github.com/UncleRus,Driver for ultrasonic range meters + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/235,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/235#issuecomment-252831189,"Driver for ultrasonic range meters like HC-SR04, HY-SRF05 and so on.","That is great!
I actually had in mind a little project involving ultrasonic distance measurement and esp8266 but hadn't have time to start working on it.
I will definitely check out this PR today evening.
Thanks @UncleRus!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,235,2016-10-11T04:31:16Z,2016-10-12T21:50:55Z,2017-10-25T11:21:48Z,MERGED,True,179,0,5,https://github.com/UncleRus,Driver for ultrasonic range meters + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/235,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/235#issuecomment-253212731,"Driver for ultrasonic range meters like HC-SR04, HY-SRF05 and so on.","I have tried the PR with the module I have and it works OK.
It would be interesting to try it under heavy WiFi traffic. I suspect the reading might be inconsistent due to WiFi interrupts.
In my opinion the PR is good for merge.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,237,2016-10-12T18:19:58Z,2016-10-16T09:52:43Z,2017-10-25T11:21:48Z,MERGED,True,461,0,5,https://github.com/UncleRus,HMC5883L driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/237,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/237,HMC5883L is most common 3-axis digital compass IC.,HMC5883L is most common 3-axis digital compass IC.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,237,2016-10-12T18:19:58Z,2016-10-16T09:52:43Z,2017-10-25T11:21:48Z,MERGED,True,461,0,5,https://github.com/UncleRus,HMC5883L driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/237,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/237#issuecomment-253366887,HMC5883L is most common 3-axis digital compass IC.,Please review,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,237,2016-10-12T18:19:58Z,2016-10-16T09:52:43Z,2017-10-25T11:21:48Z,MERGED,True,461,0,5,https://github.com/UncleRus,HMC5883L driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/237,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/237#issuecomment-254037597,HMC5883L is most common 3-axis digital compass IC.,Looks really good to me. Thanks @UncleRus,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/239,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.","Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.",True,"{'THUMBS_UP': ['https://github.com/sheinz', 'https://github.com/vlad-ivanov-name']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-254497340,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.","Very cool addition, thanks @UncleRus !",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-254526878,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.","Basic FatFs integration:
https://gist.github.com/UncleRus/e5ee407ec92b96df7964fd75b80df69f",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-254731035,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.",Is this driver intended to be used with SD card modules like this?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/vlad-ivanov-name,5,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-254763882,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.",I assume any module will do the job (although the first one has a voltage shifter which isn't required with esp8266),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/UncleRus,6,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-254773377,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.","Yes, I'm using module like this one and it works just fine.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-254777493,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.","I have laying around a bare microSD card holder without any components. So, as far as I understand I don't really need any additional circuitry to connect it to esp8266? Both esp8266 and sd card are 3.3V, so no voltage regulator and no level sifters. Is it correct?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/vlad-ivanov-name,8,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-254788053,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.",You only need a bypass capacitor near the card and pullup resistors for SPI lines (SD card will start in SPI mode if these lines are pulled up).,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/sheinz,9,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-254789850,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.","Thanks @resetnow! I will try it out today evening.
Also thanks @UncleRus for the wiring diagram!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,239,2016-10-18T11:34:34Z,2016-10-20T07:03:05Z,2017-10-25T11:18:29Z,MERGED,True,829,0,7,https://github.com/UncleRus,Driver for SD/MMC cards,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/239,https://github.com/UncleRus,10,https://github.com/SuperHouse/esp-open-rtos/pull/239#issuecomment-255016073,"Low-level read/write/erase for MMC/SD/SDHC on SPI.
Good base for FatFs integration.","@sheinz I'm ready to create a PR with FatFs integration after you merge this one :)
https://github.com/UncleRus/esp-open-rtos/tree/extras/fatfs/extras/fatfs",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,242,2016-10-20T07:52:23Z,2016-10-24T19:30:51Z,2017-10-25T11:21:48Z,MERGED,True,38479,0,23,https://github.com/UncleRus,FatFs integration (SDIO backend) + examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/242,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/242,"It's easy to use :)
Connect your SD card to the ESP8266:



SD pin
ESP8266




1. DAT2
-


2. /CS
Any accessible GPIO (15, 5, 4, 0, 2, 16)


3. DI
HMOSI (GPIO13)


4. VDD
+3V3


5. CLK
HCLK (GPIO14)


6. VSS
GND


7. DO
HMISO (GPIO12)


8. RSV
-



Use const char *f_gpio_to_volume(uint8_t gpio) function to get FatFs volume ID by CS GPIO number and mount it using f_mount(). You can also set this volume default by f_chdrive().
You may want to overwrite default FatFs parameters in your Makefile. See extras/fatfs/defaults.mk to get the parameters list and their descriptions.","It's easy to use :)
Connect your SD card to the ESP8266:



SD pin
ESP8266




1. DAT2
-


2. /CS
Any accessible GPIO (15, 5, 4, 0, 2, 16)


3. DI
HMOSI (GPIO13)


4. VDD
+3V3


5. CLK
HCLK (GPIO14)


6. VSS
GND


7. DO
HMISO (GPIO12)


8. RSV
-



Use const char *f_gpio_to_volume(uint8_t gpio) function to get FatFs volume ID by CS GPIO number and mount it using f_mount(). You can also set this volume default by f_chdrive().
You may want to overwrite default FatFs parameters in your Makefile. See extras/fatfs/defaults.mk to get the parameters list and their descriptions.",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,242,2016-10-20T07:52:23Z,2016-10-24T19:30:51Z,2017-10-25T11:21:48Z,MERGED,True,38479,0,23,https://github.com/UncleRus,FatFs integration (SDIO backend) + examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/242,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/242#issuecomment-255468972,"It's easy to use :)
Connect your SD card to the ESP8266:



SD pin
ESP8266




1. DAT2
-


2. /CS
Any accessible GPIO (15, 5, 4, 0, 2, 16)


3. DI
HMOSI (GPIO13)


4. VDD
+3V3


5. CLK
HCLK (GPIO14)


6. VSS
GND


7. DO
HMISO (GPIO12)


8. RSV
-



Use const char *f_gpio_to_volume(uint8_t gpio) function to get FatFs volume ID by CS GPIO number and mount it using f_mount(). You can also set this volume default by f_chdrive().
You may want to overwrite default FatFs parameters in your Makefile. See extras/fatfs/defaults.mk to get the parameters list and their descriptions.","I checked this PR on my hardware and everything works fine.
I also looked through the code and it looks good to me.
Thanks @UncleRus for another useful contribution.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,242,2016-10-20T07:52:23Z,2016-10-24T19:30:51Z,2017-10-25T11:21:48Z,MERGED,True,38479,0,23,https://github.com/UncleRus,FatFs integration (SDIO backend) + examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/242,https://github.com/oleg-golovanov,3,https://github.com/SuperHouse/esp-open-rtos/pull/242#issuecomment-255672413,"It's easy to use :)
Connect your SD card to the ESP8266:



SD pin
ESP8266




1. DAT2
-


2. /CS
Any accessible GPIO (15, 5, 4, 0, 2, 16)


3. DI
HMOSI (GPIO13)


4. VDD
+3V3


5. CLK
HCLK (GPIO14)


6. VSS
GND


7. DO
HMISO (GPIO12)


8. RSV
-



Use const char *f_gpio_to_volume(uint8_t gpio) function to get FatFs volume ID by CS GPIO number and mount it using f_mount(). You can also set this volume default by f_chdrive().
You may want to overwrite default FatFs parameters in your Makefile. See extras/fatfs/defaults.mk to get the parameters list and their descriptions.",Also checked this PR. I think it's ready to merge.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,242,2016-10-20T07:52:23Z,2016-10-24T19:30:51Z,2017-10-25T11:21:48Z,MERGED,True,38479,0,23,https://github.com/UncleRus,FatFs integration (SDIO backend) + examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/242,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/242#issuecomment-255806845,"It's easy to use :)
Connect your SD card to the ESP8266:



SD pin
ESP8266




1. DAT2
-


2. /CS
Any accessible GPIO (15, 5, 4, 0, 2, 16)


3. DI
HMOSI (GPIO13)


4. VDD
+3V3


5. CLK
HCLK (GPIO14)


6. VSS
GND


7. DO
HMISO (GPIO12)


8. RSV
-



Use const char *f_gpio_to_volume(uint8_t gpio) function to get FatFs volume ID by CS GPIO number and mount it using f_mount(). You can also set this volume default by f_chdrive().
You may want to overwrite default FatFs parameters in your Makefile. See extras/fatfs/defaults.mk to get the parameters list and their descriptions.","Squashed and ready to merge, I think :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,244,2016-10-21T08:17:05Z,2016-10-21T08:48:22Z,2016-10-21T08:48:26Z,CLOSED,False,10569,3595,60,https://github.com/ourairquality,FreeRTOS v9.0.0 upgrade.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/244,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/244,"Here's my wip on this upgrade, based on #169 by @sasdf with minor changes to rebase and fix line terminations etc. Happy for some or any of this to be pulled back to the origin PR.","Here's my wip on this upgrade, based on #169 by @sasdf with minor changes to rebase and fix line terminations etc. Happy for some or any of this to be pulled back to the origin PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,245,2016-10-21T09:45:19Z,2016-10-26T13:09:44Z,2016-10-26T13:09:44Z,MERGED,True,10565,3594,60,https://github.com/ourairquality,FreeRTOS v9.0.0 upgrade,1,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/245,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/245,"Let me try again, sorry for all the github noise.","Let me try again, sorry for all the github noise.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,245,2016-10-21T09:45:19Z,2016-10-26T13:09:44Z,2016-10-26T13:09:44Z,MERGED,True,10565,3594,60,https://github.com/ourairquality,FreeRTOS v9.0.0 upgrade,1,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/245,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/245#issuecomment-255356020,"Let me try again, sorry for all the github noise.","Thanks @ourairquality for bringing FreeRTOS upgrade up again! Also thanks @sasdf for the original work! #169
I've done a few tests and it works fine.
I'll switch my current project to this PR and see how it's holding.
Nevertheless I think it's already been tested enough by numerous people. So, it should be good for merge.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,245,2016-10-21T09:45:19Z,2016-10-26T13:09:44Z,2016-10-26T13:09:44Z,MERGED,True,10565,3594,60,https://github.com/ourairquality,FreeRTOS v9.0.0 upgrade,1,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/245,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/245#issuecomment-256011365,"Let me try again, sorry for all the github noise.","I've created a release with the old version of FreeRTOS. If anybody is really affected by the upgrade they can stick to the release with the old version for now.
If there's no objections, I'm going to merge this PR.",True,"{'THUMBS_UP': ['https://github.com/UncleRus', 'https://github.com/vlad-ivanov-name']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,246,2016-10-22T02:28:58Z,2016-10-26T13:21:56Z,2017-10-25T11:18:28Z,MERGED,True,457,0,9,https://github.com/UncleRus,Driver for HD44780 LCDs + examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/246,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/246,"Driver allows to choose GPIO expander to LCD pinout.
Example of most common module:","Driver allows to choose GPIO expander to LCD pinout.
Example of most common module:",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,246,2016-10-22T02:28:58Z,2016-10-26T13:21:56Z,2017-10-25T11:18:28Z,MERGED,True,457,0,9,https://github.com/UncleRus,Driver for HD44780 LCDs + examples,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/246,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/246#issuecomment-255543424,"Driver allows to choose GPIO expander to LCD pinout.
Example of most common module:",Thanks @resetnow! Driver supports now both direct LCD connection to GPIO and I2C GPIO expanders.,True,"{'THUMBS_UP': ['https://github.com/sheinz', 'https://github.com/vlad-ivanov-name']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/249,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/SaimenSays,2,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255586509,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","Tried this code, but it seems as new function _read_stdin_r() from stdin_uart_interrupt.c does not overwrite function defined in newlib_syscalls.c. In my case I get a blocking read instead of an interrupt driven.
Done my own implementation now, with function a function for single byte read from semaphore.
So please allow varable uart0_sem extern accessible, if you ever will put the interrupt functionality into core!
But I think it should not be in core, because semaphores should not be enabled by default.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255595184,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","@SaimenSays is right. A new function _read_stdin_r is not called.
I have not idea why :(",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255614395,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","The only way to make a strong function definition replace a weak one is to link the whole library with a strong function definition.
If anybody knows a better way, please tell.
I updated the PR with changes that link stdin_uart_interrupt with --whole-archive option.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/vlad-ivanov-name,5,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255615192,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.",Is it possible to check whether any of extra components is enabled in core and change core _read_r implementation accordingly?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/sheinz,6,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255745063,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","Is it possible to check whether any of extra components is enabled in core and change core _read_r implementation accordingly?

I think so. Some definition flag might be added and checked in core. If the flag is defined _read_r would be skipped in core. This definition flag might be declared in extras/component/component.mk
It is possible but the weak symbol feature of gcc is designed to do exactly the same during linkage stage without any additional flags.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/vlad-ivanov-name,7,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255809281,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","(I replied via email and it didn't go through for some reason, if it did but was deleted let me know)

the weak symbol feature of gcc is designed to do exactly the same during linkage stage without any additional flags.

Maybe the order of linked libraries makes difference then? I did essentially the same thing for esp-gdbstub and it worked. As far as I understand, when linking static libraries, ld stops looking for a symbol after a first occurrence unless a flag is specified. So it's possible moving extra libraries to the start of -l list would help.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/sheinz,8,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255817174,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","@resetnow I also thought that the order might count but my tests didn't prove that.
Here's a small example that shows when a weak function is replaced by a strong one:
main.c:
#include <stdio.h>

__attribute__((weak)) void some_func()
{
    printf(""Weak func\n"");
}

int main(int argc, char *argv[])
{
    printf(""Main function\n"");

    some_func();

    return 0;
}

test.c:
#include <stdio.h>

void some_func()
{
    printf(""Strong func\n"");
}

Makefile:
all: test

test.o: test.c

main.o: main.c

# case 1: weak function is not replaced
test: main.a test.a 
    gcc $^ -o $@

# case 2: weak function is not replaced
#test: main.a test.a 
#   gcc test.a main.a -o $@

## case 3: weak function is not replaced
#test: main.a test.a 
#   gcc -Wl,--start-group $^ -Wl,--end-group -o $@

## case 4: weak function is replaced
#test: main.a test.a 
#   gcc -Wl,--whole-archive test.a -Wl,--no-whole-archive main.a -o $@

%.a: %.o 
    ar rcs $@ $^

clean:
    -rm -f test.o test test.a main.a main.o

So, a weak function is only replaced if the library with the strong definition is linked as a whole archive.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/vlad-ivanov-name,9,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255823932,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","I think I figured out why it worked for me: I replaced a weak symbol with an alias. So a possible solution is to define _read_r in core as a weak symbol with alias to _read_r_core which could be overridden when needed.
I still don't see how it would help with multiple symbols, it would be better to have _r_read in core to call other implementations depending on the project configuration.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/sheinz,10,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-255839212,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","Still can't make the example above to replace a weak symbol. Even if I declare a weak alias to a function:
__attribute__((weak, alias(""main_some_func""))) void some_func();

void main_some_func()
{
    printf(""Weak func\n"");
}

I don't think that there's a way to make it work from the source code. Because the static libraries are generated correctly:
> nm main.a

main.o:
00000000 r .LC0
0000000c r .LC1
00000014 T main
00000000 T main_some_func
         U puts
00000000 W some_func

> nm test.a

test.o:
00000000 r .LC0
         U puts
00000000 T some_func

Please note the W in main.a, which indicates that a symbol is weak and should be replaced with T from test.o.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/projectgus,11,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-256164944,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","Something that might explain some of this behaviour, referencing another symbol in the same object file as the strong replacement symbol will cause the linker to examine the whole object file, and pull in the replacement symbol. (May explain the esp-gdbstub case, I don't know.)
For my 2c, I think --whole-archive is what is wanted here. Combined with --gc-sections I don't think it will create larger binaries, just a slower link pass.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/sheinz,12,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-256317035,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","@projectgus is absolutely right!
Just adding another regular function and referencing it from the main causes the linker to examine the archive for weak symbols replacement!
main.c:
__attribute__((weak)) void some_func()
{
    printf(""Weak func\n"");
}
int main(int argc, char *argv[])
{
    some_func();
    other_func();
    return 0;
}

test.c:
void some_func()
{
    printf(""Strong func\n"");
}
void other_func()
{
}

So, if the linker doesn't find any references to the library it skips it entirely and do not consider any symbols from the library as weak symbols replacement.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/ourairquality,13,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-256547073,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","Saw the same when trying to start an open libnet80211but recall that it might have been per-object file within a library, not just per library, so a reference to a function in each object file was required. Would be great to get a workaround for this in the linking of the open libraries too.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/vlad-ivanov-name,14,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-256558100,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.",I think this issue may become more relevant over time if more functions are implemented in source. So adding  --whole-archive by default makes sense.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,249,2016-10-23T11:14:11Z,2016-11-01T15:14:34Z,2016-11-01T15:14:34Z,MERGED,True,34,24,6,https://github.com/sheinz,Fix spiff and stdin_uart_interrupt overiding the same read function,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/249,https://github.com/phlemoine,15,https://github.com/SuperHouse/esp-open-rtos/pull/249#issuecomment-256685255,"Fix for #248
In this PR function _read_r makes additional call to _read_stdin_r.
So, stdin_uart_interrupt can override only part that it is interested in.
Also spiffs overrides _read_r, handles file descriptors and leave stdin to _read_stdin_r whoever overrides it.","I have been facing a similar issue when using spiffs and lwip with the the
read and write functions. I solved this by a correct order of #include and
defining LWIP_POSIX_SOCKETS_IO_NAMES to 0
On Oct 26, 2016 11:32 PM, ""Vlad Ivanov"" notifications@github.com wrote:

I think this issue may become more relevant over time if more functions
will be implemented in source. So adding --whole-archive by default makes
sense.
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#249 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/ATZ3zBicfa-AhntkX0hwxTOq4NyaxL3bks5q4EVkgaJpZM4KeGxC
.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,250,2016-10-24T13:15:29Z,2016-10-24T20:41:43Z,2017-10-25T11:18:28Z,MERGED,True,134,33,12,https://github.com/UncleRus,Make headers in extras more cpp friendly,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/250,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/250,"Basically ""extern ""C"" was added to some of the extras headers.","Basically ""extern ""C"" was added to some of the extras headers.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,252,2016-10-25T06:51:04Z,2016-10-26T13:41:08Z,2017-10-25T11:21:47Z,MERGED,True,38,36,5,https://github.com/UncleRus,Extras/DHT improvements,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/252,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/252,"Makefile fix, DHT_TYPE macro replaced by function argument.","Makefile fix, DHT_TYPE macro replaced by function argument.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,253,2016-10-25T14:20:52Z,2016-11-05T20:12:14Z,2016-11-05T20:12:14Z,MERGED,True,1563,46,19,https://github.com/sheinz,Unit testing for esp-open-rtos,11,[],https://github.com/SuperHouse/esp-open-rtos/pull/253,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/253,"This testing system is mostly implemented by @projectgus
With #207 I proposed my own testing system but after reviewing @projectgus implementation I decided to continue his work.
I added test cases from #207 to this PR.
What I added to the original implementation:

Fixed dual testing support
Run selected test cases
Device reset retries
List test cases from the device
Add basic WiFi test case (access point with station communication)
Add spiff test
Add timers test
Add README","This testing system is mostly implemented by @projectgus
With #207 I proposed my own testing system but after reviewing @projectgus implementation I decided to continue his work.
I added test cases from #207 to this PR.
What I added to the original implementation:

Fixed dual testing support
Run selected test cases
Device reset retries
List test cases from the device
Add basic WiFi test case (access point with station communication)
Add spiff test
Add timers test
Add README",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,253,2016-10-25T14:20:52Z,2016-11-05T20:12:14Z,2016-11-05T20:12:14Z,MERGED,True,1563,46,19,https://github.com/sheinz,Unit testing for esp-open-rtos,11,[],https://github.com/SuperHouse/esp-open-rtos/pull/253,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/253#issuecomment-256365621,"This testing system is mostly implemented by @projectgus
With #207 I proposed my own testing system but after reviewing @projectgus implementation I decided to continue his work.
I added test cases from #207 to this PR.
What I added to the original implementation:

Fixed dual testing support
Run selected test cases
Device reset retries
List test cases from the device
Add basic WiFi test case (access point with station communication)
Add spiff test
Add timers test
Add README","I have it running on Raspberry PI. It took 24 hours to build a tool-chain there :)
It would be nice to integrate it with GitHub and have tests automatically run on pull requests :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,254,2016-10-26T14:59:39Z,2016-10-28T12:08:37Z,2016-10-28T12:08:37Z,MERGED,True,644,0,9,https://github.com/urx,Driver and example for SSD1306 128x64 I2C display,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/254,https://github.com/urx,1,https://github.com/SuperHouse/esp-open-rtos/pull/254,Hi there. I wrote simple library for deal with SSD1306 128x64 display connected via I2C. It allows you to configure SSD1306 display and load an image in XBM format.,Hi there. I wrote simple library for deal with SSD1306 128x64 display connected via I2C. It allows you to configure SSD1306 display and load an image in XBM format.,True,"{'THUMBS_UP': ['https://github.com/UncleRus', 'https://github.com/sheinz']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,254,2016-10-26T14:59:39Z,2016-10-28T12:08:37Z,2016-10-28T12:08:37Z,MERGED,True,644,0,9,https://github.com/urx,Driver and example for SSD1306 128x64 I2C display,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/254,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/254#issuecomment-256381947,Hi there. I wrote simple library for deal with SSD1306 128x64 display connected via I2C. It allows you to configure SSD1306 display and load an image in XBM format.,"Very cool addition! Thank you, @urx!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,254,2016-10-26T14:59:39Z,2016-10-28T12:08:37Z,2016-10-28T12:08:37Z,MERGED,True,644,0,9,https://github.com/urx,Driver and example for SSD1306 128x64 I2C display,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/254,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/254#issuecomment-256583588,Hi there. I wrote simple library for deal with SSD1306 128x64 display connected via I2C. It allows you to configure SSD1306 display and load an image in XBM format.,"Thanks @urx! Apart from a few cosmetic comments this PR looks really good to me.
I was just wandering what is the picture in the file? :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,254,2016-10-26T14:59:39Z,2016-10-28T12:08:37Z,2016-10-28T12:08:37Z,MERGED,True,644,0,9,https://github.com/urx,Driver and example for SSD1306 128x64 I2C display,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/254,https://github.com/urx,4,https://github.com/SuperHouse/esp-open-rtos/pull/254#issuecomment-256644610,Hi there. I wrote simple library for deal with SSD1306 128x64 display connected via I2C. It allows you to configure SSD1306 display and load an image in XBM format.,@sheinz pic in the file not so interesting :) you can view it here,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,255,2016-10-27T01:53:33Z,2016-10-28T12:29:47Z,2017-10-25T11:21:47Z,MERGED,True,39,13,2,https://github.com/UncleRus,DS18x20 dirver fix,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/255,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/255,"Added support for DS18S20 (DS1820)
Bus scan fixed: now it searches only DS18x20","Added support for DS18S20 (DS1820)
Bus scan fixed: now it searches only DS18x20",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,255,2016-10-27T01:53:33Z,2016-10-28T12:29:47Z,2017-10-25T11:21:47Z,MERGED,True,39,13,2,https://github.com/UncleRus,DS18x20 dirver fix,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/255,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/255#issuecomment-256572127,"Added support for DS18S20 (DS1820)
Bus scan fixed: now it searches only DS18x20",It looks good to me. Thanks @UncleRus again :),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,256,2016-10-27T07:58:38Z,2016-10-27T08:12:27Z,2016-10-27T08:12:28Z,MERGED,True,2,0,1,https://github.com/UncleRus,Add mkspiffs binary to .gitignore,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/256,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/256,mkspiffs binaries added to .gitignore.,mkspiffs binaries added to .gitignore.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,256,2016-10-27T07:58:38Z,2016-10-27T08:12:27Z,2016-10-27T08:12:28Z,MERGED,True,2,0,1,https://github.com/UncleRus,Add mkspiffs binary to .gitignore,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/256,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/256#issuecomment-256575963,mkspiffs binaries added to .gitignore.,"Arghh, I was planing to move the build artifacts of mkspiffs into the application's build directory but hadn't have time for that so far. There's an issue about it #210
But adding those in .gitignore wouldn't hurt.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,257,2016-10-28T17:09:07Z,2016-10-30T09:26:29Z,2016-10-30T09:26:29Z,MERGED,True,2,2,1,https://github.com/DanielCerejo,dhcpserver.c corrections.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/257,https://github.com/DanielCerejo,1,https://github.com/SuperHouse/esp-open-rtos/pull/257,"initialize dhcpserver_task_handle = NULL
corrert error printf ""OTA TFTP"" to ""DHCP Server Error""","initialize dhcpserver_task_handle = NULL
corrert error printf ""OTA TFTP"" to ""DHCP Server Error""",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,257,2016-10-28T17:09:07Z,2016-10-30T09:26:29Z,2016-10-30T09:26:29Z,MERGED,True,2,2,1,https://github.com/DanielCerejo,dhcpserver.c corrections.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/257,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/257#issuecomment-256991756,"initialize dhcpserver_task_handle = NULL
corrert error printf ""OTA TFTP"" to ""DHCP Server Error""",Thanks @DanielCerejo  for the fix!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,258,2016-10-31T19:31:36Z,2016-11-05T10:12:16Z,2017-10-25T11:21:47Z,MERGED,True,377,0,5,https://github.com/UncleRus,DS1302 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/258,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/258,Driver for yet another widely spread RTC,Driver for yet another widely spread RTC,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,258,2016-10-31T19:31:36Z,2016-11-05T10:12:16Z,2017-10-25T11:21:47Z,MERGED,True,377,0,5,https://github.com/UncleRus,DS1302 RTC driver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/258,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/258#issuecomment-257524733,Driver for yet another widely spread RTC,"Thanks @UncleRus, looks good to me.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,259,2016-10-31T19:41:30Z,2016-11-01T09:40:19Z,2017-10-25T11:15:02Z,MERGED,True,17,16,3,https://github.com/UncleRus,RTC drivers fix,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/259,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/259,"AM/PM mode hours reading, zero based month","AM/PM mode hours reading, zero based month",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,261,2016-11-02T02:52:49Z,2016-11-05T10:04:03Z,2016-11-05T10:04:03Z,MERGED,True,151,148,53,https://github.com/ourairquality,FreeRTOS type updates.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/261,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/261,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,261,2016-11-02T02:52:49Z,2016-11-05T10:04:03Z,2016-11-05T10:04:03Z,MERGED,True,151,148,53,https://github.com/ourairquality,FreeRTOS type updates.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/261,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/261#issuecomment-258078718,,"Thanks @ourairquality.
As far as I can see only types definitions are changed. Looks good to me.
This is a nice addition to #245",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,261,2016-11-02T02:52:49Z,2016-11-05T10:04:03Z,2016-11-05T10:04:03Z,MERGED,True,151,148,53,https://github.com/ourairquality,FreeRTOS type updates.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/261,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/261#issuecomment-258102975,,"I checked the PR with the tests and everything seems good. I will merge it if there's no objections.
It's better to merge it quicker so the following PRs are based on the new types.",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,262,2016-11-02T06:16:58Z,2016-11-03T10:01:18Z,2017-10-25T11:15:48Z,MERGED,True,119,0,5,https://github.com/UncleRus,HD44780 documentation,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/262,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/262,Info about different display types.,Info about different display types.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,262,2016-11-02T06:16:58Z,2016-11-03T10:01:18Z,2017-10-25T11:15:48Z,MERGED,True,119,0,5,https://github.com/UncleRus,HD44780 documentation,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/262,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/262#issuecomment-258077198,Info about different display types.,Great addition. Documentation PRs are rare but really valuable.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,263,2016-11-05T01:01:05Z,2016-11-23T15:58:02Z,2017-10-25T11:21:48Z,MERGED,True,15,0,3,https://github.com/UncleRus,HTTP parser intergation,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/263,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/263,"This is a parser for HTTP messages written in C. It parses both requests and responses. The parser is designed to be used in performance HTTP applications. It does not make any syscalls nor allocations, it does not buffer data, it can be interrupted at anytime. Depending on your architecture, it only requires about 40 bytes of data per message stream (in a web server that is per connection).


Features:



No dependencies
Handles persistent streams (keep-alive).
Decodes chunked encoding.
Upgrade support
Defends against buffer overflow attacks.


Good base for HTTP client and server.","This is a parser for HTTP messages written in C. It parses both requests and responses. The parser is designed to be used in performance HTTP applications. It does not make any syscalls nor allocations, it does not buffer data, it can be interrupted at anytime. Depending on your architecture, it only requires about 40 bytes of data per message stream (in a web server that is per connection).


Features:



No dependencies
Handles persistent streams (keep-alive).
Decodes chunked encoding.
Upgrade support
Defends against buffer overflow attacks.


Good base for HTTP client and server.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,263,2016-11-05T01:01:05Z,2016-11-23T15:58:02Z,2017-10-25T11:21:48Z,MERGED,True,15,0,3,https://github.com/UncleRus,HTTP parser intergation,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/263,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/263#issuecomment-260216874,"This is a parser for HTTP messages written in C. It parses both requests and responses. The parser is designed to be used in performance HTTP applications. It does not make any syscalls nor allocations, it does not buffer data, it can be interrupted at anytime. Depending on your architecture, it only requires about 40 bytes of data per message stream (in a web server that is per connection).


Features:



No dependencies
Handles persistent streams (keep-alive).
Decodes chunked encoding.
Upgrade support
Defends against buffer overflow attacks.


Good base for HTTP client and server.","Good base for HTTP client and server.

I agree.
@UncleRus Do you plan to continue work in this direction? I mean to bring some http server/client functionality into esp-open-rtos that is based on this parser? It was actually discussed here #133
If it is just this PR without following higher lever library it would be nice to have an example for it as we usually have for each driver/library.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,263,2016-11-05T01:01:05Z,2016-11-23T15:58:02Z,2017-10-25T11:21:48Z,MERGED,True,15,0,3,https://github.com/UncleRus,HTTP parser intergation,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/263,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/263#issuecomment-261480458,"This is a parser for HTTP messages written in C. It parses both requests and responses. The parser is designed to be used in performance HTTP applications. It does not make any syscalls nor allocations, it does not buffer data, it can be interrupted at anytime. Depending on your architecture, it only requires about 40 bytes of data per message stream (in a web server that is per connection).


Features:



No dependencies
Handles persistent streams (keep-alive).
Decodes chunked encoding.
Upgrade support
Defends against buffer overflow attacks.


Good base for HTTP client and server.","@sheinz Yes, currently I'm working on http-server that allows flexible requests/handlers routing, like other web frameworks does.
After it I plan to start work on http-client library based on lwip sockets and http-parser.",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,264,2016-11-05T01:11:50Z,2016-11-05T10:12:47Z,2017-10-25T11:15:02Z,MERGED,True,2,2,1,https://github.com/UncleRus,DS1307 set month & weekday fix,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/264,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/264,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,265,2016-11-05T02:38:32Z,2016-11-05T10:19:36Z,2017-10-25T11:21:47Z,MERGED,True,76,0,2,https://github.com/UncleRus,WiFi scan example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/265,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/265,Just a simple example.,Just a simple example.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,265,2016-11-05T02:38:32Z,2016-11-05T10:19:36Z,2017-10-25T11:21:47Z,MERGED,True,76,0,2,https://github.com/UncleRus,WiFi scan example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/265,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/265#issuecomment-258602125,Just a simple example.,"Thanks @UncleRus.
That functionality we have been missing in the examples. Will come in handy for new users.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,266,2016-11-11T02:14:02Z,2016-11-12T18:54:24Z,2016-11-12T18:54:24Z,MERGED,True,297,21,21,https://github.com/ourairquality,open_esplibs: add a skeleton for code in more libraries.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/266,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/266,"Have a backlog of a small amount of sdk code converted to source code, basically code needed to support lwip v2, and it might help submit this incrementally if a skeleton could be added for the other libraries and some of their files first. This is still using a linker hack.","Have a backlog of a small amount of sdk code converted to source code, basically code needed to support lwip v2, and it might help submit this incrementally if a skeleton could be added for the other libraries and some of their files first. This is still using a linker hack.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,266,2016-11-11T02:14:02Z,2016-11-12T18:54:24Z,2016-11-12T18:54:24Z,MERGED,True,297,21,21,https://github.com/ourairquality,open_esplibs: add a skeleton for code in more libraries.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/266,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/266#issuecomment-259926044,"Have a backlog of a small amount of sdk code converted to source code, basically code needed to support lwip v2, and it might help submit this incrementally if a skeleton could be added for the other libraries and some of their files first. This is still using a linker hack.","Submitted about all that can be for now to here until the skeleton and definitions land. The follow up commits can be seen at https://github.com/ourairquality/esp-open-rtos/commits/ourairquality
This lot gives us code for the paths allocating the struct netif, so the size can be changed.
It also gives us code for most of the paths accessing the netif->flags. Only one read appears to remain in wl_cnx.o:sdk_cnx_sta_leave which checks the NETIF_FLAG_DHCP flag. The NETIF_FLAG_DHCP has been removed in lwip v2, so some lwip hacks are needed to handle this for now until wl_cnx.o is converted to source code too which looks like a big job.
Some uses of netif->hwaddr and netif->state also have code now, but for now it seems more practical to just arrange for their offset to not change. The state is accessed in ieee80211_output_pbuf and perhaps ieee80211_mgmt_output and if there are not too many more references then perhaps it would be practical in time to get code for them all.
The commits are ordered from simple and hopefully safer conversions to the biggest and most likely to have problems namely the hostap code which had a lot of static definitions so required code for many functions. But it seems to work fine with the wificfg example in station and softap modes, and moving the netif slots showed no other writes into netif, and a quick attempt at lwip v2 gave working code too.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,266,2016-11-11T02:14:02Z,2016-11-12T18:54:24Z,2016-11-12T18:54:24Z,MERGED,True,297,21,21,https://github.com/ourairquality,open_esplibs: add a skeleton for code in more libraries.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/266,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/266#issuecomment-259980305,"Have a backlog of a small amount of sdk code converted to source code, basically code needed to support lwip v2, and it might help submit this incrementally if a skeleton could be added for the other libraries and some of their files first. This is still using a linker hack.","Hi @ourairquality,
I'm really glad that work on open sourcing binary libraries continues! I will help as much as possible with it.
The hack with linking libraries can be removed if link libraries as a whole archives.
Adding those lines in component.mk makes the linker replace weak symbols in binary libraries with open-source ones:
INCLUDE_SRC_IN_AR = 0

...

WHOLE_ARCHIVES = $(open_esplibs_libnet80211_AR)
WHOLE_ARCHIVES += $(open_esplibs_libphy_AR)
WHOLE_ARCHIVES += $(open_esplibs_libwpa_AR)

EXTRA_LDFLAGS += -Wl,--whole-archive $(WHOLE_ARCHIVES) -Wl,--no-whole-archive
I tried it and it works. I'm not sure if this approach will not cause some other issues.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,266,2016-11-11T02:14:02Z,2016-11-12T18:54:24Z,2016-11-12T18:54:24Z,MERGED,True,297,21,21,https://github.com/ourairquality,open_esplibs: add a skeleton for code in more libraries.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/266,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/266#issuecomment-260106137,"Have a backlog of a small amount of sdk code converted to source code, basically code needed to support lwip v2, and it might help submit this incrementally if a skeleton could be added for the other libraries and some of their files first. This is still using a linker hack.","@sheinz Thank you for the suggestion. The PR now includes a suggestion to use -Wl,--whole-archive adding a per-component WHOLE_ARCHIVES flag which is now also used to omit the source code in only these archives.",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,266,2016-11-11T02:14:02Z,2016-11-12T18:54:24Z,2016-11-12T18:54:24Z,MERGED,True,297,21,21,https://github.com/ourairquality,open_esplibs: add a skeleton for code in more libraries.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/266,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/266#issuecomment-260109938,"Have a backlog of a small amount of sdk code converted to source code, basically code needed to support lwip v2, and it might help submit this incrementally if a skeleton could be added for the other libraries and some of their files first. This is still using a linker hack.","@sheinz Yes, forgot to remove those, fixed thanks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,266,2016-11-11T02:14:02Z,2016-11-12T18:54:24Z,2016-11-12T18:54:24Z,MERGED,True,297,21,21,https://github.com/ourairquality,open_esplibs: add a skeleton for code in more libraries.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/266,https://github.com/sheinz,6,https://github.com/SuperHouse/esp-open-rtos/pull/266#issuecomment-260110875,"Have a backlog of a small amount of sdk code converted to source code, basically code needed to support lwip v2, and it might help submit this incrementally if a skeleton could be added for the other libraries and some of their files first. This is still using a linker hack.","Everything looks good to me except test build is failing due to source files inclusion in an archive.
To fit it in a new approach I would suggest building all test cases as a library with 'WHOLE_ARCHIVE' option set. And link them to the main program.
As the tests are not built by Travis currently. If you don't feel like fixing them within this PR it's ok to do it as a separate PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,266,2016-11-11T02:14:02Z,2016-11-12T18:54:24Z,2016-11-12T18:54:24Z,MERGED,True,297,21,21,https://github.com/ourairquality,open_esplibs: add a skeleton for code in more libraries.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/266,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/266#issuecomment-260113005,"Have a backlog of a small amount of sdk code converted to source code, basically code needed to support lwip v2, and it might help submit this incrementally if a skeleton could be added for the other libraries and some of their files first. This is still using a linker hack.","@sheinz Fixed the building of the tests, thanks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,267,2016-11-11T03:03:53Z,2016-11-13T22:05:13Z,2016-11-13T22:05:13Z,MERGED,True,513,99,9,https://github.com/ourairquality,Update and re-organise the sdk internal definitions.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/267,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/267,"This update adds some new sdk internal structures and updates the existing ones. The global definitions have been moved into the include/esplibs/ directory and sorted per library and per source object file. These are needed to support sdk code to be submitted and if this could be landed first then it would help split them up and might avoid some merge ordering problems. If this were to move a slot then it might break the code, but it's a small part of what it is to be submitted and some extra checks have been added to the structure layouts to try to detect edit problems.  Checks have also been added for the lwip netif slots offsets known to be used by the sdk binary code which should help other people using esp-open-rtos as a lwip development platform.","This update adds some new sdk internal structures and updates the existing ones. The global definitions have been moved into the include/esplibs/ directory and sorted per library and per source object file. These are needed to support sdk code to be submitted and if this could be landed first then it would help split them up and might avoid some merge ordering problems. If this were to move a slot then it might break the code, but it's a small part of what it is to be submitted and some extra checks have been added to the structure layouts to try to detect edit problems.  Checks have also been added for the lwip netif slots offsets known to be used by the sdk binary code which should help other people using esp-open-rtos as a lwip development platform.",True,"{'THUMBS_UP': ['https://github.com/sheinz', 'https://github.com/UncleRus']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,267,2016-11-11T03:03:53Z,2016-11-13T22:05:13Z,2016-11-13T22:05:13Z,MERGED,True,513,99,9,https://github.com/ourairquality,Update and re-organise the sdk internal definitions.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/267,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/267#issuecomment-259984088,"This update adds some new sdk internal structures and updates the existing ones. The global definitions have been moved into the include/esplibs/ directory and sorted per library and per source object file. These are needed to support sdk code to be submitted and if this could be landed first then it would help split them up and might avoid some merge ordering problems. If this were to move a slot then it might break the code, but it's a small part of what it is to be submitted and some extra checks have been added to the structure layouts to try to detect edit problems.  Checks have also been added for the lwip netif slots offsets known to be used by the sdk binary code which should help other people using esp-open-rtos as a lwip development platform.","The work with reverse-engineering SDK internals is tedious and prone to introduce regression.
When I did work on reverse engineering and rewriting SPI flash access the automatic tests helped me a lot. That is why I started work on brining some automatic testing to EOR. So, the basic functionality can be quickly checked with rewritten (open sourced) libraries.
On my side, I will continue to improve testing and help with opening binary libraries.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,267,2016-11-11T03:03:53Z,2016-11-13T22:05:13Z,2016-11-13T22:05:13Z,MERGED,True,513,99,9,https://github.com/ourairquality,Update and re-organise the sdk internal definitions.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/267,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/267#issuecomment-260144991,"This update adds some new sdk internal structures and updates the existing ones. The global definitions have been moved into the include/esplibs/ directory and sorted per library and per source object file. These are needed to support sdk code to be submitted and if this could be landed first then it would help split them up and might avoid some merge ordering problems. If this were to move a slot then it might break the code, but it's a small part of what it is to be submitted and some extra checks have been added to the structure layouts to try to detect edit problems.  Checks have also been added for the lwip netif slots offsets known to be used by the sdk binary code which should help other people using esp-open-rtos as a lwip development platform.","From the first glance looks good to me.
I will merge it if there's not objections.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,268,2016-11-11T03:27:21Z,2016-11-12T20:24:29Z,2016-11-12T20:24:29Z,MERGED,True,8,22,4,https://github.com/ourairquality,Use a separate file for the private SSID config.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/268,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/268,"This patch moves the private SSID config to a file not included in the git repo. The current setup is a real foot gun for developer. Non-developers can almost as easily create a separate file as editing the ssid_config.h file. Alternatively a template file could be included. When developers are dealing with many git repo copies and trying to test things, it's just too much of a burden to have to manually config git for the ssid_config.h file, and we need to commit to the master branch and test that so can not deal with this in a local branch. As a developer, don't expect more contributions from me here if this is not fixed.","This patch moves the private SSID config to a file not included in the git repo. The current setup is a real foot gun for developer. Non-developers can almost as easily create a separate file as editing the ssid_config.h file. Alternatively a template file could be included. When developers are dealing with many git repo copies and trying to test things, it's just too much of a burden to have to manually config git for the ssid_config.h file, and we need to commit to the master branch and test that so can not deal with this in a local branch. As a developer, don't expect more contributions from me here if this is not fixed.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,268,2016-11-11T03:27:21Z,2016-11-12T20:24:29Z,2016-11-12T20:24:29Z,MERGED,True,8,22,4,https://github.com/ourairquality,Use a separate file for the private SSID config.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/268,https://github.com/projectgus,2,https://github.com/SuperHouse/esp-open-rtos/pull/268#issuecomment-259877009,"This patch moves the private SSID config to a file not included in the git repo. The current setup is a real foot gun for developer. Non-developers can almost as easily create a separate file as editing the ssid_config.h file. Alternatively a template file could be included. When developers are dealing with many git repo copies and trying to test things, it's just too much of a burden to have to manually config git for the ssid_config.h file, and we need to commit to the master branch and test that so can not deal with this in a local branch. As a developer, don't expect more contributions from me here if this is not fixed.","A suggestion to go one further, add private_ssid_config.h to .gitignore so you have to ""git add -f"" to add it to the index.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,268,2016-11-11T03:27:21Z,2016-11-12T20:24:29Z,2016-11-12T20:24:29Z,MERGED,True,8,22,4,https://github.com/ourairquality,Use a separate file for the private SSID config.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/268,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/268#issuecomment-259922744,"This patch moves the private SSID config to a file not included in the git repo. The current setup is a real foot gun for developer. Non-developers can almost as easily create a separate file as editing the ssid_config.h file. Alternatively a template file could be included. When developers are dealing with many git repo copies and trying to test things, it's just too much of a burden to have to manually config git for the ssid_config.h file, and we need to commit to the master branch and test that so can not deal with this in a local branch. As a developer, don't expect more contributions from me here if this is not fixed.","This is a good addition. It can be merged as it is.
I agree with @ourairquality that it is burden to configure each repository clone to test some features.
It would be even better to be able to just clone a repo, build an example and flash it straight away without having to modify or create any additional files.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,269,2016-11-11T07:14:11Z,2016-11-15T02:46:45Z,2016-11-15T02:46:45Z,CLOSED,False,117,2,2,https://github.com/ourairquality,open_esplibs user_interface: source code for functions touching the struct netif.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/269,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/269,"Add source code for functions touching the struct netif to better support lwip development: sdk_wifi_get_ip_info, sdk_wifi_set_ip_info, sdk_wifi_get_macaddr, sdk_wifi_set_macaddr.
Also code for sdk_wifi_station_get_connect_status.
Also code for wifi_get_sleep_type and set_sleep_type, noting wifi_set_sleep_type returns a bool success flag, and implement wifi_get_sleep_type using sdk_pm_get_sleep_type.","Add source code for functions touching the struct netif to better support lwip development: sdk_wifi_get_ip_info, sdk_wifi_set_ip_info, sdk_wifi_get_macaddr, sdk_wifi_set_macaddr.
Also code for sdk_wifi_station_get_connect_status.
Also code for wifi_get_sleep_type and set_sleep_type, noting wifi_set_sleep_type returns a bool success flag, and implement wifi_get_sleep_type using sdk_pm_get_sleep_type.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,271,2016-11-12T22:16:18Z,2016-11-13T08:53:11Z,2016-11-13T08:53:11Z,CLOSED,False,270,7,8,https://github.com/sheinz,[WIP] Travis running tests,19,[],https://github.com/SuperHouse/esp-open-rtos/pull/271,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/271,"This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).
This will allow to check basic functionality with each PR.
My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.","This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).
This will allow to check basic functionality with each PR.
My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,271,2016-11-12T22:16:18Z,2016-11-13T08:53:11Z,2016-11-13T08:53:11Z,CLOSED,False,270,7,8,https://github.com/sheinz,[WIP] Travis running tests,19,[],https://github.com/SuperHouse/esp-open-rtos/pull/271,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/271#issuecomment-260154017,"This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).
This will allow to check basic functionality with each PR.
My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.","For some reason Travis can't decrypt the key. With my fork everything works fine.
I tried to encrypt it specially for SuperHose/esp-open-rtos Travis repo but without luck.
Need to investigate it more...",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,271,2016-11-12T22:16:18Z,2016-11-13T08:53:11Z,2016-11-13T08:53:11Z,CLOSED,False,270,7,8,https://github.com/sheinz,[WIP] Travis running tests,19,[],https://github.com/SuperHouse/esp-open-rtos/pull/271,https://github.com/vlad-ivanov-name,3,https://github.com/SuperHouse/esp-open-rtos/pull/271#issuecomment-260172873,"This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).
This will allow to check basic functionality with each PR.
My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.","I wonder how many write cycles will the flash chip survive until errors start to appear. Branded ones like Micron have a life of about 100k cycles, but I think most esp have noname chips.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,271,2016-11-12T22:16:18Z,2016-11-13T08:53:11Z,2016-11-13T08:53:11Z,CLOSED,False,270,7,8,https://github.com/sheinz,[WIP] Travis running tests,19,[],https://github.com/SuperHouse/esp-open-rtos/pull/271,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/271#issuecomment-260173832,"This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).
This will allow to check basic functionality with each PR.
My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.","I wonder how many write cycles will the flash chip survive until errors start to appear. Branded ones like Micron have a life of about 100k cycles, but I think most esp have noname chips.

Yes, I also though about it when testing spiffs. At that time I had several modules constantly running spiffs tests on them. Those tests were constantly overwriting flash. So far I haven't had a single faulty module.
Nevertheless, the modules are cheap, so for testing purposes if one fails we can easily replace it.
By the way, the current testing approach, which is based on @projectgus original work is less cruel to flash, because it only flashes one firmware for all test cases. My first implementation had a separate firmware for each test case.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,271,2016-11-12T22:16:18Z,2016-11-13T08:53:11Z,2016-11-13T08:53:11Z,CLOSED,False,270,7,8,https://github.com/sheinz,[WIP] Travis running tests,19,[],https://github.com/SuperHouse/esp-open-rtos/pull/271,https://github.com/sheinz,5,https://github.com/SuperHouse/esp-open-rtos/pull/271#issuecomment-260174002,"This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).
This will allow to check basic functionality with each PR.
My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.","It appears that I can't provide encrypted key for Travis via a PR from a fork:

Please note that encrypted files are not available for pull requests from forks.

I will create another PR from the branch on the original repository.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,272,2016-11-13T08:57:25Z,2016-11-19T10:32:38Z,2016-11-19T10:32:38Z,MERGED,True,270,7,8,https://github.com/sheinz,Travis running tests,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/272,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/272,"This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).


This will allow to check basic functionality with each PR.


My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.

Adding encrypted keys for Travis can be done only from the original repository.
This PR is essentially #271","This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).


This will allow to check basic functionality with each PR.


My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.

Adding encrypted keys for Travis can be done only from the original repository.
This PR is essentially #271",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,272,2016-11-13T08:57:25Z,2016-11-19T10:32:38Z,2016-11-19T10:32:38Z,MERGED,True,270,7,8,https://github.com/sheinz,Travis running tests,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/272,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/272#issuecomment-261479675,"This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).


This will allow to check basic functionality with each PR.


My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.

Adding encrypted keys for Travis can be done only from the original repository.
This PR is essentially #271","Any comments, objections on this one?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,272,2016-11-13T08:57:25Z,2016-11-19T10:32:38Z,2016-11-19T10:32:38Z,MERGED,True,270,7,8,https://github.com/sheinz,Travis running tests,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/272,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/272#issuecomment-261488959,"This PR adds additional step in Travis CI. This step is running tests on a real hardware connected to a test server(currently only one).


This will allow to check basic functionality with each PR.


My test server is running 24/7 at my place but in any case if a test server is down the Travis build will not fail. The travis build will only fail if the tests fail.

Adding encrypted keys for Travis can be done only from the original repository.
This PR is essentially #271","Looks like a good step forward, really good contribution, thanks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,274,2016-11-15T02:32:20Z,2016-11-18T09:34:03Z,2016-11-18T09:34:03Z,MERGED,True,27,6,2,https://github.com/ourairquality,Flush the uart tx fifo before a restart.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/274,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/274,"Otherwise a restart ends up in a wdt halt. This change improves things.
Also comment the point at which the bus clock that drives the uart changes on startup and comment out the change in the uart divisor. This at least allows a consistent uart baud rate during a restart if using the rate 115200. When restarting the bus clock does not change and the rom resets the rate to 115200 so if using a rate of 115200 the rate is consistent and the startup messages can be see without corruption.","Otherwise a restart ends up in a wdt halt. This change improves things.
Also comment the point at which the bus clock that drives the uart changes on startup and comment out the change in the uart divisor. This at least allows a consistent uart baud rate during a restart if using the rate 115200. When restarting the bus clock does not change and the rom resets the rate to 115200 so if using a rate of 115200 the rate is consistent and the startup messages can be see without corruption.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,274,2016-11-15T02:32:20Z,2016-11-18T09:34:03Z,2016-11-18T09:34:03Z,MERGED,True,27,6,2,https://github.com/ourairquality,Flush the uart tx fifo before a restart.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/274,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/274#issuecomment-260638851,"Otherwise a restart ends up in a wdt halt. This change improves things.
Also comment the point at which the bus clock that drives the uart changes on startup and comment out the change in the uart divisor. This at least allows a consistent uart baud rate during a restart if using the rate 115200. When restarting the bus clock does not change and the rom resets the rate to 115200 so if using a rate of 115200 the rate is consistent and the startup messages can be see without corruption.","I'm not sure if this is related. If I programatically reset a device after the flashing it stucks after wdt reset:
ets Jan  8 2013,rst cause:2, boot mode:(1,6)


ets Jan  8 2013,rst cause:4, boot mode:(1,6)

wdt reset

After the first hardware reset the device starts to reset properly. I reset the device by calling sdk_system_restart();",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,274,2016-11-15T02:32:20Z,2016-11-18T09:34:03Z,2016-11-18T09:34:03Z,MERGED,True,27,6,2,https://github.com/ourairquality,Flush the uart tx fifo before a restart.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/274,https://github.com/projectgus,3,https://github.com/SuperHouse/esp-open-rtos/pull/274#issuecomment-260800047,"Otherwise a restart ends up in a wdt halt. This change improves things.
Also comment the point at which the bus clock that drives the uart changes on startup and comment out the change in the uart divisor. This at least allows a consistent uart baud rate during a restart if using the rate 115200. When restarting the bus clock does not change and the rom resets the rate to 115200 so if using a rate of 115200 the rate is consistent and the startup messages can be see without corruption.","I'm not sure if this is related. If I programatically reset a device after the flashing it stucks after wdt reset:

The reason for this (I believe) is that the GPIO strapping pin register remains set for the UART bootloader, so it resets back to the bootloader. This can be useful in some cases (for example, if your ESP8266 doesn't have an auto-reset circuit and you want to be able to re-program it any time it crashes without toggling GPIO0), but it's also kind of annoying. One of the features I want to do add in esptool.py v2.0 is a programmable ""after flashing reset"" mode.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,274,2016-11-15T02:32:20Z,2016-11-18T09:34:03Z,2016-11-18T09:34:03Z,MERGED,True,27,6,2,https://github.com/ourairquality,Flush the uart tx fifo before a restart.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/274,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/274#issuecomment-260813951,"Otherwise a restart ends up in a wdt halt. This change improves things.
Also comment the point at which the bus clock that drives the uart changes on startup and comment out the change in the uart divisor. This at least allows a consistent uart baud rate during a restart if using the rate 115200. When restarting the bus clock does not change and the rom resets the rate to 115200 so if using a rate of 115200 the rate is consistent and the startup messages can be see without corruption.","@projectgus Thank you I see the issue after flashing now - the strapping pins were captured when it cold booted and it does not appear to be possible to clear them. So the workaround for this was to change esptool to hard reset when done.
def write_flash(esp, args):
   ...
    print 'Reset into firmware...'
    time.sleep(0.05)
    esp._port.setDTR(False)
    esp._port.setRTS(True)
    time.sleep(0.05)
    esp._port.setRTS(False)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,274,2016-11-15T02:32:20Z,2016-11-18T09:34:03Z,2016-11-18T09:34:03Z,MERGED,True,27,6,2,https://github.com/ourairquality,Flush the uart tx fifo before a restart.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/274,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/274#issuecomment-260817427,"Otherwise a restart ends up in a wdt halt. This change improves things.
Also comment the point at which the bus clock that drives the uart changes on startup and comment out the change in the uart divisor. This at least allows a consistent uart baud rate during a restart if using the rate 115200. When restarting the bus clock does not change and the rom resets the rate to 115200 so if using a rate of 115200 the rate is consistent and the startup messages can be see without corruption.","@sheinz Thank you, it does seem to be a post-flash issue, and I am having trouble reproducing the issue taking more care on that point! There may be no compelling reason to make these changes now, but the flushing might still be prudent and has been updated, and the other changes at least give a clear warm boot log when running at 115200 baud.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,274,2016-11-15T02:32:20Z,2016-11-18T09:34:03Z,2016-11-18T09:34:03Z,MERGED,True,27,6,2,https://github.com/ourairquality,Flush the uart tx fifo before a restart.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/274,https://github.com/projectgus,6,https://github.com/SuperHouse/esp-open-rtos/pull/274#issuecomment-260820811,"Otherwise a restart ends up in a wdt halt. This change improves things.
Also comment the point at which the bus clock that drives the uart changes on startup and comment out the change in the uart divisor. This at least allows a consistent uart baud rate during a restart if using the rate 115200. When restarting the bus clock does not change and the rom resets the rate to 115200 so if using a rate of 115200 the rate is consistent and the startup messages can be see without corruption.","FWIW, the high 16 bits of the GPIO.IN register contain strapping information:
https://github.com/SuperHouse/esp-open-rtos/blob/master/core/include/esp/gpio_regs.h#L44
and I believe you can write to them to set the bit corresponding to GPIO0, and therefore change the reset mode. I haven't tested this though.
The workaround you have (hard reset) is a good one and will be added to esptool.py (with an option to disable) in v2.0.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,274,2016-11-15T02:32:20Z,2016-11-18T09:34:03Z,2016-11-18T09:34:03Z,MERGED,True,27,6,2,https://github.com/ourairquality,Flush the uart tx fifo before a restart.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/274,https://github.com/projectgus,7,https://github.com/SuperHouse/esp-open-rtos/pull/274#issuecomment-260820894,"Otherwise a restart ends up in a wdt halt. This change improves things.
Also comment the point at which the bus clock that drives the uart changes on startup and comment out the change in the uart divisor. This at least allows a consistent uart baud rate during a restart if using the rate 115200. When restarting the bus clock does not change and the rom resets the rate to 115200 so if using a rate of 115200 the rate is consistent and the startup messages can be see without corruption.","(I agree that flushing UART FIFOs before reset is still good practice, though.)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,275,2016-11-15T02:46:08Z,2016-11-21T14:05:34Z,2016-11-21T14:05:35Z,MERGED,True,103,0,1,https://github.com/ourairquality,open_esplibs user_interface: source code for functions touching the struct netif.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/275,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/275,"Add source code for functions touching the struct netif to better support lwip development: sdk_wifi_get_ip_info, sdk_wifi_set_ip_info, sdk_wifi_get_macaddr, sdk_wifi_set_macaddr.
Also code for sdk_wifi_station_get_connect_status.","Add source code for functions touching the struct netif to better support lwip development: sdk_wifi_get_ip_info, sdk_wifi_set_ip_info, sdk_wifi_get_macaddr, sdk_wifi_set_macaddr.
Also code for sdk_wifi_station_get_connect_status.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,276,2016-11-15T03:19:39Z,2016-11-16T23:48:45Z,2016-11-16T23:48:49Z,CLOSED,False,17,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_ieee80211_getmgtframe.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/276,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/276,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,276,2016-11-15T03:19:39Z,2016-11-16T23:48:45Z,2016-11-16T23:48:49Z,CLOSED,False,17,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_ieee80211_getmgtframe.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/276,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/276#issuecomment-261110234,,"Sorry, I don't think this one was needed for the LwIPv2 support, so not compelling.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,277,2016-11-15T03:20:38Z,2016-11-21T14:05:57Z,2016-11-21T14:05:57Z,MERGED,True,20,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_ieee80211_deliver_data.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/277,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/277,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,278,2016-11-15T03:22:40Z,2016-11-21T19:31:54Z,2016-11-21T19:31:54Z,MERGED,True,65,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_wifi_station_start and stop.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/278,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/278,"The function sdk_wifi_station_start is one of two paths that allocates a lwip struct netif and also accesses the netif->hwaddr slot so this is required for lwip development.
Also code for sdk_wifi_station_stop and sdk_sta_status_set to better understand the status state.","The function sdk_wifi_station_start is one of two paths that allocates a lwip struct netif and also accesses the netif->hwaddr slot so this is required for lwip development.
Also code for sdk_wifi_station_stop and sdk_sta_status_set to better understand the status state.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,279,2016-11-15T03:25:12Z,2016-11-23T15:55:48Z,2016-11-23T15:55:48Z,MERGED,True,112,0,1,https://github.com/ourairquality,open_esplibs libwpa: source code for some struct netif paths.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/279,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/279,"Function sdk_eagle_auth_done accesses the netif-flags and the NETIF_FLAG_DHCP flag removed in lwip v2, and also the netif->ip_addr so is needed for lwip development.
Function sdk_wpa_config_bss accesses the netif->hwaddr.
Also code for a few other trivial functions that help debug the dhcpc paths.","Function sdk_eagle_auth_done accesses the netif-flags and the NETIF_FLAG_DHCP flag removed in lwip v2, and also the netif->ip_addr so is needed for lwip development.
Function sdk_wpa_config_bss accesses the netif->hwaddr.
Also code for a few other trivial functions that help debug the dhcpc paths.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,280,2016-11-15T03:27:37Z,2016-11-23T15:56:05Z,2016-11-23T15:56:05Z,MERGED,True,95,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_cnx_node_search.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/280,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/280,"Also code for sdk_cnx_sta_leave, although disabled due to accessing static date, but it shows a reference to the netif->flags and the NETIF_FLAG_DHCP flag removed in lwip v2.","Also code for sdk_cnx_sta_leave, although disabled due to accessing static date, but it shows a reference to the netif->flags and the NETIF_FLAG_DHCP flag removed in lwip v2.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,281,2016-11-15T03:27:51Z,2016-11-17T00:22:29Z,2016-11-17T00:22:32Z,CLOSED,False,18,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_hostap_handle_timer.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/281,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/281,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,281,2016-11-15T03:27:51Z,2016-11-17T00:22:29Z,2016-11-17T00:22:32Z,CLOSED,False,18,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_hostap_handle_timer.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/281,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/281#issuecomment-261116155,,"Sorry, we don't really need this either.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,283,2016-11-15T10:08:30Z,2016-11-23T15:56:34Z,2016-11-23T15:56:34Z,MERGED,True,49,0,5,https://github.com/ourairquality,open_esplibs libwpa: source code for os_xtensa.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/283,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/283,Interesting support functions that we might want or need to re-implement. Hope WPA does not depend on the time returned by os_get_time as it does not fill the value at all.,Interesting support functions that we might want or need to re-implement. Hope WPA does not depend on the time returned by os_get_time as it does not fill the value at all.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,283,2016-11-15T10:08:30Z,2016-11-23T15:56:34Z,2016-11-23T15:56:34Z,MERGED,True,49,0,5,https://github.com/ourairquality,open_esplibs libwpa: source code for os_xtensa.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/283,https://github.com/vlad-ivanov-name,2,https://github.com/SuperHouse/esp-open-rtos/pull/283#issuecomment-260603480,Interesting support functions that we might want or need to re-implement. Hope WPA does not depend on the time returned by os_get_time as it does not fill the value at all.,"Out of curiosity, does original binary use rand() as well? Wouldn't it make more sense to use hardware RNG?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,283,2016-11-15T10:08:30Z,2016-11-23T15:56:34Z,2016-11-23T15:56:34Z,MERGED,True,49,0,5,https://github.com/ourairquality,open_esplibs libwpa: source code for os_xtensa.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/283,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/283#issuecomment-260610441,Interesting support functions that we might want or need to re-implement. Hope WPA does not depend on the time returned by os_get_time as it does not fill the value at all.,"@resetnow Yes, this is just a straight translation of the binary code, faults and all, just a start.",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,284,2016-11-15T12:06:42Z,2017-02-13T09:19:39Z,2017-02-13T09:19:39Z,CLOSED,False,696,0,9,https://github.com/stschake,Add BearSSL extra,4,"['enhancement', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/284,https://github.com/stschake,1,https://github.com/SuperHouse/esp-open-rtos/pull/284,"Hey,
this adds the BearSSL library (https://bearssl.org/) to extras/ and adds a client/server TLS example similar to the existing ones for mbedTLS.
The main benefits in this library over mbedTLS are 1) a complete lack of dynamic memory allocation, so there are no free heap surprises as you might encounter with mbedTLS, 2) secure by default choices, the library doesn't support insecure communication setups (such as SSL 3.0) and 3) a significantly smaller flash footprint than mbedTLS. As BSD it's also more liberally licensed.
However, it is still an experimental library (version 0.1). This pull request doesn't modify upstream in any way, so it should be very straightforward to update.
Regards,
Stefan","Hey,
this adds the BearSSL library (https://bearssl.org/) to extras/ and adds a client/server TLS example similar to the existing ones for mbedTLS.
The main benefits in this library over mbedTLS are 1) a complete lack of dynamic memory allocation, so there are no free heap surprises as you might encounter with mbedTLS, 2) secure by default choices, the library doesn't support insecure communication setups (such as SSL 3.0) and 3) a significantly smaller flash footprint than mbedTLS. As BSD it's also more liberally licensed.
However, it is still an experimental library (version 0.1). This pull request doesn't modify upstream in any way, so it should be very straightforward to update.
Regards,
Stefan",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,284,2016-11-15T12:06:42Z,2017-02-13T09:19:39Z,2017-02-13T09:19:39Z,CLOSED,False,696,0,9,https://github.com/stschake,Add BearSSL extra,4,"['enhancement', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/284,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/284#issuecomment-261227009,"Hey,
this adds the BearSSL library (https://bearssl.org/) to extras/ and adds a client/server TLS example similar to the existing ones for mbedTLS.
The main benefits in this library over mbedTLS are 1) a complete lack of dynamic memory allocation, so there are no free heap surprises as you might encounter with mbedTLS, 2) secure by default choices, the library doesn't support insecure communication setups (such as SSL 3.0) and 3) a significantly smaller flash footprint than mbedTLS. As BSD it's also more liberally licensed.
However, it is still an experimental library (version 0.1). This pull request doesn't modify upstream in any way, so it should be very straightforward to update.
Regards,
Stefan","Hi @stschake,
Thanks for the contribution!
It's always nice to have options to choose from.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,284,2016-11-15T12:06:42Z,2017-02-13T09:19:39Z,2017-02-13T09:19:39Z,CLOSED,False,696,0,9,https://github.com/stschake,Add BearSSL extra,4,"['enhancement', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/284,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/284#issuecomment-279332646,"Hey,
this adds the BearSSL library (https://bearssl.org/) to extras/ and adds a client/server TLS example similar to the existing ones for mbedTLS.
The main benefits in this library over mbedTLS are 1) a complete lack of dynamic memory allocation, so there are no free heap surprises as you might encounter with mbedTLS, 2) secure by default choices, the library doesn't support insecure communication setups (such as SSL 3.0) and 3) a significantly smaller flash footprint than mbedTLS. As BSD it's also more liberally licensed.
However, it is still an experimental library (version 0.1). This pull request doesn't modify upstream in any way, so it should be very straightforward to update.
Regards,
Stefan",Closed in favor #340,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/285,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261179953,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","Great work. I agree that the unknown structures are dead code. We now have the task notify support in FreeRTOS which is claimed to be lighter, and the suggestions in ourairquality@0dcd801 use this feature and remove the dead code. Also tried just using the os_timer for these and it seems to work in a quick test, and do you think there is a real need for the ets_timer now, was it more accurate etc?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261187223,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@ourairquality I also though that task notification is a good fit for the purpose in this case.
I'm not sure about the accuracy but suspect it is not that great because of the event transfer from the ISR to the task and task switching. But it should be better than FreeRTOS timers as they have resolution of 10ms.
I agree that having two implementations of the same concept has no benefits and might be confusing for a newcomers.
There's at least one drawback of ets_timer.o implementation. As it running a task that handles timers processing if a task with more priority is consuming CPU and not allowing other tasks to run,
the timer event will not be delivered. I'm not sure what is the situation with FreeRTOS timers in this case.
Update:
FreeRTOS timers operate in a similar way. They have a running task underneath that processes timers. And the priority for eor is configured: configTIMER_TASK_PRIORITY ( tskIDLE_PRIORITY + 2 )",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261208561,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","Some test results in microseconds:
ets_timer.o:
13000 delay: 13033
13000 delay: 12983
13000 delay: 12997
13000 delay: 12997
53000 delay: 53037
13000 delay: 12997

timers.o:
13000 delay: 8408
13000 delay: 9981
13000 delay: 9997
13000 delay: 9997
53000 delay: 48432
13000 delay: 10203

So, ets_timers.o is definitely more accurate.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261216951,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","Interesting.
There appears to be only one ets_timer remaining in the sdk, and it is converted to source code here ourairquality@c3ff68a.
So we know it does not use the repeat argument and times are in milli-seconds which would simplify the computation of the number of ticks to just a multiplication by 5000. We also know there is only one timer, and this could simplify the code a lot too.
So do we need a high priority timer with that level of accuracy for general use, or should we simplify it as much as possible to the single use remaining?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/pfalcon,6,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261375964,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@sheinz : I wonder, how was decompilation handled here?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261479304,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@pfalcon I just use xtobjdis to disassembler object files.
There's also useful build option FLAVOR = sdklike to build the project with the same compile argument as the original SDK libraries was built. So, the output of RE part can be compared on the assembler level.
I know that there's ScratchABit but unfortunately I haven't figured out how to use it.
I actually wanted to ask the same question other people involved in RE, @ourairquality in particular. What are the best practices to do it? How to do it easiest and quickest?
It usually takes a lot of time for me :(",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/vlad-ivanov-name,8,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261491568,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","radare2 supports xtensa analysis with emulation, and as a result it resolves some load/store locations (asm.cmtrefs) and register calls (https://asciinema.org/a/1n8wfswmadc5ly8jg9r9di5fn). I was hoping it would be useful with radeco, but unfortunately radeco-lib is in a very early stage of development, is written in Rust and doesn't produce any human-readable output.
Also, radare2 is kind of crashy and you may need to try several git revisions (perhaps with git bisect) if it crashes on your binary.
It would be great to partially automate the decompilation. Another idea I had was to translate xtensa code to mips code (since they are very similar) and then run it through Retargetable Decompiler, but I think the decompiler won't be happy about ABI changes.",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/ourairquality,9,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261505574,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","I've just been using xtobjdi and manually translating to C code. It is difficult were the data structures and function arguments and results are unknown. Some things that help: data flow analysis putting it into C blocks and looking for DAG patterns and diamond patterns and loops etc; work backwards renaming the registers SSA style so uses can be connected to definitions more easily in big functions; note if loads are doing sign or zero extensions and the sign of comparisons; look for the result register being loaded and unused as a clue that a function returns a result; note which argument passing locations are live at the start to determine which arguments are used which gives a good clue to the function arguments; look for pointer dereferencing to spot pointers; a memw indicates a load from a volatile location; match calls to their uses to get more clues about function results and arguments. Surely a lot of this could be automated, but are there tools to do this?
Another thought was if we could convert to assembler source code. Can the output of xtobjdi be converted to valid assembler code relatively easily. For some files we might only need the C code from a few function but many more are needed due to referencing static data, so could we convert most to assembler code mechanically and just a few to C code?
Could we embed the assembler code in C functions? There are examples in the source code already doing this but I have not looked into how to pass the arguments and results, and might the function stack handling be trouble.
Could we mechanically translate instructions to C code, coercing each argument as need, using goto and labels for branches. The code would be really ugly, but perhaps a more reliable start?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/pfalcon,10,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261601737,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@pfalcon I just use xtobjdis to disassembler object files.

So, decompilation (to C code) is done manually, right? I kinda expected that to be the case, was just confused by things like if ((delta - 40) < 1) {.

I know that there's ScratchABit but unfortunately I haven't figured out how to use it.

Note that ScratchABit is still a disassembler, not a decompiler. Regarding how to use, @projectgus contributed this section to make it easier: https://github.com/pfalcon/ScratchABit#using-plugins when looked into it. Btw, ScratchABit is finally (1.5 years of intemittent development) feature-complete regarding the core features I wanted it to have, keeping in mind that one of such features is being able to offload any adhoc functionality to a plugin. As such, I actually started to use for incremental (not try-and-throw-away) work: https://github.com/pfalcon/xtensa-subjects .

It usually takes a lot of time for me :(

I fully agree, and as this isn't my first RE project, and I saw a lot from other people, I rejected an idea of manual decompilation (or adhoc RE in general) myself. That's why I set to write ScratchABit, and I also work on a decompilation tool, https://github.com/pfalcon/ScratchABlock . But comparing to ScratchABit, which I truly tried to make usable by other people (dunno how much I succeeded), ScratchABlock is a research tool and unlikely will be useful in the hands of someone else so far. But here's a kind of decompilation output I achieved with one of working versions:
From this PseudoC (which is C-like assembler, produced by ScratchABit, idea is due to Radare):
; Start of 'fun_40002f14' function
fun_40002f14:
    if ($a2 == 0x3) goto loc_40002f26
    if ($a2 == 0x6) goto loc_40002f2a
    $a4 = $a2 - 0xc
    $a3 = 0xd
    $a2 = 0x0
    if ($a4 == 0) $a2 = $a3
    return
loc_40002f26:
    $a2 = 0xb
    return
loc_40002f2a:
    $a2 = 0xc
    return
; End of 'fun_40002f14' function (as detected)

to:
if ($arg_a2 == 0x3) {
  $a2 = 0xb
} else if ($arg_a2 == 0x6) {
  $a2 = 0xc
} else if (($arg_a2 - 0xc) == 0) {
  $a2 = 0xd
} else {
  $a2 = 0x0
}

As you can see, it still doesn't do complete expression simplification, similar to the code you posted, but was able to recover switch-like semantics of the underlying code. Caveat: handholding via manually selected set of transformation passes to achieve that.
Anyway, great work, guys, just wanted to make sure that I didn't miss everyone using some magic decompiler already.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/pfalcon,11,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261609284,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","Surely a lot of this could be automated, but are there tools to do this?

A lot. My projects-3rdparty/RevEng/Decompilers/ subdirectory contains 22 projects. After looking thru them, I concluded that the only way someone can progress with a generic task of a decompilation is to write another one from scratch (and I kinda consider duplicating effort to be the 8th mortal sin wrt to Open Source). ScratchABlock does just what you write about, automatically. So far it's just a set of individual transformation passes, which need to be stitched together manually in a ""decompilation script"". Where I paused so far (last work session in August) is the global dataflow analysis for arguments/returns recovery.

Could we mechanically translate instructions to C code, coercing each argument as need, using goto and labels for branches. The code would be really ugly, but perhaps a more reliable start?

ScratchABit disassembler does just that: it produces C-like assembler (well, not ScratchABit itself, it's completely agnostic to any assembler or assembler syntax, but an Xtensa disassembling plugin: https://github.com/pfalcon/ida-xtensa2 , fork of https://github.com/themadinventor/ida-xtensa). A ScrtachABlock pass can output that as a (would-be) valid C function. No proof of: compiling AES, disassembling it to such PseudoC, compiling again, running unittests, repeating with 100 other algorithms - was done so far, but I would go there some time (perhaps when I retire, decompilation is a lifetime project).",True,"{'THUMBS_UP': ['https://github.com/vlad-ivanov-name', 'https://github.com/UncleRus', 'https://github.com/tawonga']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/vlad-ivanov-name,12,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261698455,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@pfalcon

individual transformation passes

Are these passes xtensa-specific or generic? I wonder how this compares to radare2 decompilation where most transformations are abstracted from the target architecture details.
As a side note, it would be great if retdec had some kind of plugin API.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/sheinz,13,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261715963,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@resetnow I tried radare2 and it seems like a really nice tool but it doesn't resolve strings and function calls (or I miss something)
So, xtobjdis is still produce more readable output as for me.
here's how I used radare2",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/vlad-ivanov-name,14,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-261717355,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@sheinz I tried your example and radare doesn't mark the string for me as well. The address is resolved correctly, though: http://pastebin.com/raw/nbr1TiFU
Register call wasn't resolved either, which is interesting. It's possible a function pointer is used and it's initialized dynamically.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/sheinz,15,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-262013398,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@resetnow How did you get whose comments to show up?
0x402126a8      21f8ff         l32r a2, 0x40212688        ; a2=0x40211570 -> 0x206d7200",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/vlad-ivanov-name,16,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-262014984,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@sheinz e asm.emustr=false
You can also try assembly stepping (s) while in visual mode (make sure to enable io.cache).",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/ourairquality,17,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-262648271,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","Looks good.
Might it be appropriate to add etc_timer.o to lib/libmain.remove now? One problem would be if someone did not compile in the source code version, but is that an issue to hold back removing these.
Btw: I am looking at some of the mentioned tools to help with some more require code translations, thanks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/sheinz,18,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-262649365,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","@ourairquality I would suggest not removing objects from sdk libs for now. Sometimes it's useful to check the behaviour without open implementation to rule out reverse engineering errors.
I also spent some time looking for other RE tools. radare2 looks pretty cool but the disassembly with comments are still the best in xtobjdis in my opinion. radare2 support for xtensa is not complete. radare2 can be handy to visually see the graph of branches in a function.
Another useful thing is running esp-gdbstub which allows stepping through the assembly code and analyse the data in real time.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/Maijin,19,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-266583767,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.",@sheinz that's probably a one-line fix CC @radare,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/radare,20,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-266673368,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","Please fill bugs with tests or show cases comparing xtobj and such in the radare repo, i'm always open to listen to the users for new proposals and enhancements
…
 On 13 Dec 2016, at 00:12, Maijin ***@***.***> wrote:

 @sheinz that's probably a one-line fix CC @radare

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/ourairquality,21,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-308909021,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","This seemed a great piece of work to have, and moves closer to completing the libmain, and it is often useful to have the code to help understand problems or just need to see how these worked etc. I've been using it for some time now and it seems well ready to land.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,285,2016-11-17T00:28:35Z,,2017-10-02T11:55:31Z,OPEN,False,320,0,2,https://github.com/sheinz,Reverse engineered ets_timers.o,3,"['reverse engineering', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/285,https://github.com/ourairquality,22,https://github.com/SuperHouse/esp-open-rtos/pull/285#issuecomment-333512993,"Recreation of ets_timer.o from libmain.a
Preliminary testing passed.
We currently have two timers implementation in eor from Espressif: ets_timer.o and timers.o
ets_timer.o are based on FRC2 hardware timer.
timers.o are based on FreeRTOS timers implementation (which are also use FRC2 timer underneath)
They both provide identical interface, so can be used interchangeably.
The recent version of FreeRTOS SDK from Espressif completely removed timers.o from their libraries.","This has now landed when the lwip v2 branch was merged, thank you.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,286,2016-11-17T13:23:15Z,2017-06-16T01:37:32Z,2017-06-16T01:37:38Z,CLOSED,False,308,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_wifi_softap_start paths.,1,"['reverse engineering', 'core']",https://github.com/SuperHouse/esp-open-rtos/pull/286,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/286,"The function sdk_wifi_softap_start is one of two paths that allocates a struct netif and also accesses the netif->hwaddr so is needed for lwip development. This function depends on static data and functions so a good bit so other code was needed.
This was a difficult set, challenging to review, but it gets us the allocation of the netif structure needed for LwIP development, plus the remaining uses of the ets_timer, so feedback welcomed.","The function sdk_wifi_softap_start is one of two paths that allocates a struct netif and also accesses the netif->hwaddr so is needed for lwip development. This function depends on static data and functions so a good bit so other code was needed.
This was a difficult set, challenging to review, but it gets us the allocation of the netif structure needed for LwIP development, plus the remaining uses of the ets_timer, so feedback welcomed.",True,"{'THUMBS_UP': ['https://github.com/vlad-ivanov-name', 'https://github.com/UncleRus']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,286,2016-11-17T13:23:15Z,2017-06-16T01:37:32Z,2017-06-16T01:37:38Z,CLOSED,False,308,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_wifi_softap_start paths.,1,"['reverse engineering', 'core']",https://github.com/SuperHouse/esp-open-rtos/pull/286,https://github.com/vlad-ivanov-name,2,https://github.com/SuperHouse/esp-open-rtos/pull/286#issuecomment-261698538,"The function sdk_wifi_softap_start is one of two paths that allocates a struct netif and also accesses the netif->hwaddr so is needed for lwip development. This function depends on static data and functions so a good bit so other code was needed.
This was a difficult set, challenging to review, but it gets us the allocation of the netif structure needed for LwIP development, plus the remaining uses of the ets_timer, so feedback welcomed.","By the way, some of decompiled net80211 functions can be found at https://github.com/ernacktob/esp8266_wifi_raw",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,286,2016-11-17T13:23:15Z,2017-06-16T01:37:32Z,2017-06-16T01:37:38Z,CLOSED,False,308,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_wifi_softap_start paths.,1,"['reverse engineering', 'core']",https://github.com/SuperHouse/esp-open-rtos/pull/286,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/286#issuecomment-263439484,"The function sdk_wifi_softap_start is one of two paths that allocates a struct netif and also accesses the netif->hwaddr so is needed for lwip development. This function depends on static data and functions so a good bit so other code was needed.
This was a difficult set, challenging to review, but it gets us the allocation of the netif structure needed for LwIP development, plus the remaining uses of the ets_timer, so feedback welcomed.","@sheinz Testing is limited, it appears to work in all the code I am working with, but some of these functions were a struggle to translate by hand so I would like to re-check them. Very hard to review these. I am exploring some automation to help translate the code, it still needs a lot of manual work, but might give a different view for comparison. Still need to get the wl_cnx.o translated for lwip v2 to be practical, which could take time, so there is no rush on this PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,286,2016-11-17T13:23:15Z,2017-06-16T01:37:32Z,2017-06-16T01:37:38Z,CLOSED,False,308,0,1,https://github.com/ourairquality,open_esplibs libnet80211: source code for sdk_wifi_softap_start paths.,1,"['reverse engineering', 'core']",https://github.com/SuperHouse/esp-open-rtos/pull/286,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/286#issuecomment-308909314,"The function sdk_wifi_softap_start is one of two paths that allocates a struct netif and also accesses the netif->hwaddr so is needed for lwip development. This function depends on static data and functions so a good bit so other code was needed.
This was a difficult set, challenging to review, but it gets us the allocation of the netif structure needed for LwIP development, plus the remaining uses of the ets_timer, so feedback welcomed.","Have been over this many times so hope it is all ok, and it was necessary to bundle it in with the lwip v2 support #389 so closing this PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,288,2016-11-19T16:29:23Z,2016-11-21T20:46:48Z,2017-10-25T11:18:28Z,MERGED,True,256,0,5,https://github.com/UncleRus,Driver + example for MCP4725 12-bit I2C DAC,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/288,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/288,"The MCP4725 is a low-power, high accuracy, single channel, 12-bit buffered voltage output Digital-to-Ana-
log Convertor (DAC) with non-volatile memory (EEPROM). Its on-board precision output amplifier allows it to achieve rail-to-rail analog output swing.","The MCP4725 is a low-power, high accuracy, single channel, 12-bit buffered voltage output Digital-to-Ana-
log Convertor (DAC) with non-volatile memory (EEPROM). Its on-board precision output amplifier allows it to achieve rail-to-rail analog output swing.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,288,2016-11-19T16:29:23Z,2016-11-21T20:46:48Z,2017-10-25T11:18:28Z,MERGED,True,256,0,5,https://github.com/UncleRus,Driver + example for MCP4725 12-bit I2C DAC,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/288,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/288#issuecomment-261726442,"The MCP4725 is a low-power, high accuracy, single channel, 12-bit buffered voltage output Digital-to-Ana-
log Convertor (DAC) with non-volatile memory (EEPROM). Its on-board precision output amplifier allows it to achieve rail-to-rail analog output swing.","Hi @UncleRus,
Thanks for another contribution.
Unfortunately running tests with Travis for PRs doesn't work :( When Travis runs a build for PR it seems to not have access to encrypted SSH key for accessing the test server :(
I actually don't know how to solve it and not sure if it is even possible...",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,288,2016-11-19T16:29:23Z,2016-11-21T20:46:48Z,2017-10-25T11:18:28Z,MERGED,True,256,0,5,https://github.com/UncleRus,Driver + example for MCP4725 12-bit I2C DAC,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/288,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/288#issuecomment-261917324,"The MCP4725 is a low-power, high accuracy, single channel, 12-bit buffered voltage output Digital-to-Ana-
log Convertor (DAC) with non-volatile memory (EEPROM). Its on-board precision output amplifier allows it to achieve rail-to-rail analog output swing.",Closed/reopened to trigger Travis build,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,288,2016-11-19T16:29:23Z,2016-11-21T20:46:48Z,2017-10-25T11:18:28Z,MERGED,True,256,0,5,https://github.com/UncleRus,Driver + example for MCP4725 12-bit I2C DAC,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/288,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/288#issuecomment-262059323,"The MCP4725 is a low-power, high accuracy, single channel, 12-bit buffered voltage output Digital-to-Ana-
log Convertor (DAC) with non-volatile memory (EEPROM). Its on-board precision output amplifier allows it to achieve rail-to-rail analog output swing.",I'm going to merge this one if no objections.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,290,2016-11-20T19:29:26Z,2016-11-28T22:57:22Z,2017-10-25T11:21:48Z,MERGED,True,704,337,11,https://github.com/UncleRus,SSD1306 OLED Display driver refactored,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/290,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/290,"Support for SPI connection and different display sizes added, functions documented, example refactored.
@urx Please review.","Support for SPI connection and different display sizes added, functions documented, example refactored.
@urx Please review.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,290,2016-11-20T19:29:26Z,2016-11-28T22:57:22Z,2017-10-25T11:21:48Z,MERGED,True,704,337,11,https://github.com/UncleRus,SSD1306 OLED Display driver refactored,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/290,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/290#issuecomment-262065191,"Support for SPI connection and different display sizes added, functions documented, example refactored.
@urx Please review.",still waiting for my display module to arrive so I can try the driver :),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,290,2016-11-20T19:29:26Z,2016-11-28T22:57:22Z,2017-10-25T11:21:48Z,MERGED,True,704,337,11,https://github.com/UncleRus,SSD1306 OLED Display driver refactored,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/290,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/290#issuecomment-262206016,"Support for SPI connection and different display sizes added, functions documented, example refactored.
@urx Please review.","Mine arrived in 10 days :) bought it here: https://www.aliexpress.com/item/1pcs-0-96-White-OLED-module-0-96-OLED-New-128X64-OLED-LCD-LED-Display-Module/32595230501.html
And the best part of this module is configurable connection: you can select I2C, 8 or 9 bit SPI.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,290,2016-11-20T19:29:26Z,2016-11-28T22:57:22Z,2017-10-25T11:21:48Z,MERGED,True,704,337,11,https://github.com/UncleRus,SSD1306 OLED Display driver refactored,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/290,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/290#issuecomment-262243550,"Support for SPI connection and different display sizes added, functions documented, example refactored.
@urx Please review.","Hi @UncleRus ,  Verify if it is a SH1106 or a SSD1306. I don't know if the lib is compatible with both. I had modify my lib from :
_command(0x21); // SSD1306_COLUMNADDR
_command(0);    // column start
_command(127);  // column end
_command(0x22); // SSD1306_PAGEADDR
_command(0);    // page start
_command(7);    // page end (8 pages for 64 rows OLED)
for (k = 0; k < 1024; k++)
{
	for (j = 0; j < 16; ++j)
	{
	spi_tx8(HSPI,ctx->buffer[k]);
		++k;
	}
	--k;
}

to:
#define M_COL 2
for (i = 0 ; i < 8 ; i++) {
	_command(M_COL & 0xf);
	_command(0x10 | (M_COL >> 4));
	_command(0xB0 | (i & 0x0F));
	for (k = 0; k < 132; k++)
	{
		spi_tx8(HSPI,ctx->buffer[i*132+k]);
	}
}

for my screen.
I will test the lib when i will got time with my SH1106.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,290,2016-11-20T19:29:26Z,2016-11-28T22:57:22Z,2017-10-25T11:21:48Z,MERGED,True,704,337,11,https://github.com/UncleRus,SSD1306 OLED Display driver refactored,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/290,https://github.com/UncleRus,5,https://github.com/SuperHouse/esp-open-rtos/pull/290#issuecomment-262267930,"Support for SPI connection and different display sizes added, functions documented, example refactored.
@urx Please review.","@Zaltora, It would be great if you add compatibilty with SH1106! Unfortunately I have only SSD1306 and can't do this. Or you can wait until I buy SH1106, it will take about three weeks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,290,2016-11-20T19:29:26Z,2016-11-28T22:57:22Z,2017-10-25T11:21:48Z,MERGED,True,704,337,11,https://github.com/UncleRus,SSD1306 OLED Display driver refactored,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/290,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/290#issuecomment-262449554,"Support for SPI connection and different display sizes added, functions documented, example refactored.
@urx Please review.","I had work to add some additional features with SPI.  I will pull these functions fast as beta, it will allow SPI3 protocol. I will do some test on SH1106 when i will get time, probably next week but not sure :( .
One suggest, add I2C addr to allow 0x3C and 0x3D selection.
typedef struct
{
    ssd1306_protocol_t protocol;
#if (SSD1306_I2C_SUPPORT)
    uint8_t dev_addr;               //!< I2C address, used by SSD1306_PROTO_I2C
#endif
    uint8_t cs_pin;               //!< Chip Select GPIO pin, used by SSD1306_PROTO_SPI3, SSD1306_PROTO_SPI4
    uint8_t dc_pin;               //!< Data/Command GPIO pin, used by SSD1306_PROTO_SPI4
    uint8_t width;                //!< Screen width, currently only 128px supported
    uint8_t height;               //!< Screen height, currently supported 16px, 32px, 64px
} ssd1306_t;",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,290,2016-11-20T19:29:26Z,2016-11-28T22:57:22Z,2017-10-25T11:21:48Z,MERGED,True,704,337,11,https://github.com/UncleRus,SSD1306 OLED Display driver refactored,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/290,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/290#issuecomment-262935061,"Support for SPI connection and different display sizes added, functions documented, example refactored.
@urx Please review.","I've just received my display module, will definitely try this driver out.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,291,2016-11-21T09:07:28Z,2016-11-21T09:39:13Z,2016-11-21T12:03:34Z,MERGED,True,7,270,8,https://github.com/sheinz,"Revert ""Travis running tests""",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/291,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/291,Reverts #272,Reverts #272,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,292,2016-11-22T15:18:31Z,2016-11-29T05:37:50Z,2017-10-25T11:18:28Z,MERGED,True,555,0,5,https://github.com/UncleRus,ADS1113/ADS1114/ADS1115 I2C ADC driver + example,1,"['enhancement', 'help wanted']",https://github.com/SuperHouse/esp-open-rtos/pull/292,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/292,"The ADS1113, ADS1114, and ADS1115 are precision analog-to-digital converters (ADCs) with 16 bits of resolution offered in an ultra-small, leadless QFN-10 package or an MSOP-10 package.

Unfortunately I overvoltaged my ADS1115 during tests, so I hope someone can help me with testing.","The ADS1113, ADS1114, and ADS1115 are precision analog-to-digital converters (ADCs) with 16 bits of resolution offered in an ultra-small, leadless QFN-10 package or an MSOP-10 package.

Unfortunately I overvoltaged my ADS1115 during tests, so I hope someone can help me with testing.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,292,2016-11-22T15:18:31Z,2016-11-29T05:37:50Z,2017-10-25T11:18:28Z,MERGED,True,555,0,5,https://github.com/UncleRus,ADS1113/ADS1114/ADS1115 I2C ADC driver + example,1,"['enhancement', 'help wanted']",https://github.com/SuperHouse/esp-open-rtos/pull/292,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/292#issuecomment-263423330,"The ADS1113, ADS1114, and ADS1115 are precision analog-to-digital converters (ADCs) with 16 bits of resolution offered in an ultra-small, leadless QFN-10 package or an MSOP-10 package.

Unfortunately I overvoltaged my ADS1115 during tests, so I hope someone can help me with testing.","I think we can merge it even if it is untested.
It will not break anything as it is a new driver. If it is in the master branch it has more chances to be used. And if it doesn't work properly somebody might open an issue.
I've ordered this module but it will take a month till I receive it and can test it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,292,2016-11-22T15:18:31Z,2016-11-29T05:37:50Z,2017-10-25T11:18:28Z,MERGED,True,555,0,5,https://github.com/UncleRus,ADS1113/ADS1114/ADS1115 I2C ADC driver + example,1,"['enhancement', 'help wanted']",https://github.com/SuperHouse/esp-open-rtos/pull/292,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/292#issuecomment-263433032,"The ADS1113, ADS1114, and ADS1115 are precision analog-to-digital converters (ADCs) with 16 bits of resolution offered in an ultra-small, leadless QFN-10 package or an MSOP-10 package.

Unfortunately I overvoltaged my ADS1115 during tests, so I hope someone can help me with testing.","I agree with being less demanding on code reviews for code in the extras. Writing a driver for the ADS1115 was on my TODO list, so it's great to see this, and I'll also give it some testing. The other one I have on hand is the MCP3424 which I will write a driver for in time unless someone beats me to it. Both look promising for hooking up to electro-chem air quality sensors.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,295,2016-11-25T20:11:55Z,2016-11-25T22:25:18Z,2016-11-25T22:25:18Z,MERGED,True,12,12,1,https://github.com/sheinz,ds18b20 fix for temperature below zero,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/295,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/295,Fix for #294,Fix for #294,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,296,2016-11-26T11:47:23Z,2016-11-27T14:32:55Z,2016-11-27T14:32:55Z,MERGED,True,238,5,4,https://github.com/Zaltora,Spi features,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/296,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/296,"Hello, i wrote some new functions to spi. Inspired from multiple spi drivers i had like this one : https://github.com/MetalPhreak/ESP8266_SPI_Driver.
New funtions:
spi_set_command(uint8_t bus,uint8_t bits, uint16_t data);
spi_set_address(uint8_t bus,uint8_t bits, uint32_t data);
spi_set_dummy_bits(uint8_t bus, uint8_t bits, bool pos);
spi_clear_address(uint8_t bus);
spi_clear_command(uint8_t bus);
spi_clear_dummy(uint8_t bus);
void spi_repeat_send_8(uint8_t bus, uint8_t data, int32_t repeats);
void spi_repeat_send_16(uint8_t bus, uint16_t data, int32_t repeats);
void spi_repeat_send_32(uint8_t bus, uint32_t data, int32_t repeats);

I tested these functions on the oscilloscope. all work fine but you can do some test to check.
I had some strange behavior with memcpy so i used this code,
SPI(bus).W[i] = *dword; 
instead of,
memcpy((void *)&SPI(bus).W[i], dword, SPI_32BIT);
Maybe need test again ?
It will allow SPI3 protocol for SSD1306 driver and more.","Hello, i wrote some new functions to spi. Inspired from multiple spi drivers i had like this one : https://github.com/MetalPhreak/ESP8266_SPI_Driver.
New funtions:
spi_set_command(uint8_t bus,uint8_t bits, uint16_t data);
spi_set_address(uint8_t bus,uint8_t bits, uint32_t data);
spi_set_dummy_bits(uint8_t bus, uint8_t bits, bool pos);
spi_clear_address(uint8_t bus);
spi_clear_command(uint8_t bus);
spi_clear_dummy(uint8_t bus);
void spi_repeat_send_8(uint8_t bus, uint8_t data, int32_t repeats);
void spi_repeat_send_16(uint8_t bus, uint16_t data, int32_t repeats);
void spi_repeat_send_32(uint8_t bus, uint32_t data, int32_t repeats);

I tested these functions on the oscilloscope. all work fine but you can do some test to check.
I had some strange behavior with memcpy so i used this code,
SPI(bus).W[i] = *dword; 
instead of,
memcpy((void *)&SPI(bus).W[i], dword, SPI_32BIT);
Maybe need test again ?
It will allow SPI3 protocol for SSD1306 driver and more.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,296,2016-11-26T11:47:23Z,2016-11-27T14:32:55Z,2016-11-27T14:32:55Z,MERGED,True,238,5,4,https://github.com/Zaltora,Spi features,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/296,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/296#issuecomment-263062658,"Hello, i wrote some new functions to spi. Inspired from multiple spi drivers i had like this one : https://github.com/MetalPhreak/ESP8266_SPI_Driver.
New funtions:
spi_set_command(uint8_t bus,uint8_t bits, uint16_t data);
spi_set_address(uint8_t bus,uint8_t bits, uint32_t data);
spi_set_dummy_bits(uint8_t bus, uint8_t bits, bool pos);
spi_clear_address(uint8_t bus);
spi_clear_command(uint8_t bus);
spi_clear_dummy(uint8_t bus);
void spi_repeat_send_8(uint8_t bus, uint8_t data, int32_t repeats);
void spi_repeat_send_16(uint8_t bus, uint16_t data, int32_t repeats);
void spi_repeat_send_32(uint8_t bus, uint32_t data, int32_t repeats);

I tested these functions on the oscilloscope. all work fine but you can do some test to check.
I had some strange behavior with memcpy so i used this code,
SPI(bus).W[i] = *dword; 
instead of,
memcpy((void *)&SPI(bus).W[i], dword, SPI_32BIT);
Maybe need test again ?
It will allow SPI3 protocol for SSD1306 driver and more.","Hi @Zaltora,
Thanks for the contribution.

I had some strange behavior with memcpy so i used this code,
SPI(bus).W[i] = *dword;
instead of,
memcpy((void *)&SPI(bus).W[i], dword, SPI_32BIT);

The problem with memcpy might be that it discards volatile qualifier of SPI(bus).W which causes that memw instructions are not placed before accessing registers.
I noticed tabs in the code, we don't use tabs in eor.
Overall looks like a useful addition, but I haven't checked the code in details yet.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,296,2016-11-26T11:47:23Z,2016-11-27T14:32:55Z,2016-11-27T14:32:55Z,MERGED,True,238,5,4,https://github.com/Zaltora,Spi features,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/296,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/296#issuecomment-263065736,"Hello, i wrote some new functions to spi. Inspired from multiple spi drivers i had like this one : https://github.com/MetalPhreak/ESP8266_SPI_Driver.
New funtions:
spi_set_command(uint8_t bus,uint8_t bits, uint16_t data);
spi_set_address(uint8_t bus,uint8_t bits, uint32_t data);
spi_set_dummy_bits(uint8_t bus, uint8_t bits, bool pos);
spi_clear_address(uint8_t bus);
spi_clear_command(uint8_t bus);
spi_clear_dummy(uint8_t bus);
void spi_repeat_send_8(uint8_t bus, uint8_t data, int32_t repeats);
void spi_repeat_send_16(uint8_t bus, uint16_t data, int32_t repeats);
void spi_repeat_send_32(uint8_t bus, uint32_t data, int32_t repeats);

I tested these functions on the oscilloscope. all work fine but you can do some test to check.
I had some strange behavior with memcpy so i used this code,
SPI(bus).W[i] = *dword; 
instead of,
memcpy((void *)&SPI(bus).W[i], dword, SPI_32BIT);
Maybe need test again ?
It will allow SPI3 protocol for SSD1306 driver and more.","Sry about tab, forget to change my auto-formater in eclipse. BSD style come back !",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,296,2016-11-26T11:47:23Z,2016-11-27T14:32:55Z,2016-11-27T14:32:55Z,MERGED,True,238,5,4,https://github.com/Zaltora,Spi features,3,['enhancement'],https://github.com/SuperHouse/esp-open-rtos/pull/296,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/296#issuecomment-263070891,"Hello, i wrote some new functions to spi. Inspired from multiple spi drivers i had like this one : https://github.com/MetalPhreak/ESP8266_SPI_Driver.
New funtions:
spi_set_command(uint8_t bus,uint8_t bits, uint16_t data);
spi_set_address(uint8_t bus,uint8_t bits, uint32_t data);
spi_set_dummy_bits(uint8_t bus, uint8_t bits, bool pos);
spi_clear_address(uint8_t bus);
spi_clear_command(uint8_t bus);
spi_clear_dummy(uint8_t bus);
void spi_repeat_send_8(uint8_t bus, uint8_t data, int32_t repeats);
void spi_repeat_send_16(uint8_t bus, uint16_t data, int32_t repeats);
void spi_repeat_send_32(uint8_t bus, uint32_t data, int32_t repeats);

I tested these functions on the oscilloscope. all work fine but you can do some test to check.
I had some strange behavior with memcpy so i used this code,
SPI(bus).W[i] = *dword; 
instead of,
memcpy((void *)&SPI(bus).W[i], dword, SPI_32BIT);
Maybe need test again ?
It will allow SPI3 protocol for SSD1306 driver and more.","Very useful functions! Repeating send is needed in most SPI protocols.
Going to merge it tomorrow if no objections.
@Zaltora Thank you, great contribution!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,299,2016-11-28T15:55:11Z,2017-03-21T21:18:04Z,2017-03-21T21:18:04Z,MERGED,True,722,404,10,https://github.com/sheinz,"sysparam fixes, tests, spi flash refactoring",6,"['extra', 'core']",https://github.com/SuperHouse/esp-open-rtos/pull/299,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/299,"This PR includes:

Sysparam fixes for thread safety by @ourairquality
Sysparam unit tests
Fix for negative int8 values
Sysparam bools without heap memory allocation
SPI flash refactoring, so spiffs and sysparam use the same flash access
spiflash test for unaligned access
switch from hand-written memcpy to the newlib's as discussed in #174 for spiflash

This PR allows #208 to be merged. I tested it and it works.","This PR includes:

Sysparam fixes for thread safety by @ourairquality
Sysparam unit tests
Fix for negative int8 values
Sysparam bools without heap memory allocation
SPI flash refactoring, so spiffs and sysparam use the same flash access
spiflash test for unaligned access
switch from hand-written memcpy to the newlib's as discussed in #174 for spiflash

This PR allows #208 to be merged. I tested it and it works.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,299,2016-11-28T15:55:11Z,2017-03-21T21:18:04Z,2017-03-21T21:18:04Z,MERGED,True,722,404,10,https://github.com/sheinz,"sysparam fixes, tests, spi flash refactoring",6,"['extra', 'core']",https://github.com/SuperHouse/esp-open-rtos/pull/299,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/299#issuecomment-288201156,"This PR includes:

Sysparam fixes for thread safety by @ourairquality
Sysparam unit tests
Fix for negative int8 values
Sysparam bools without heap memory allocation
SPI flash refactoring, so spiffs and sysparam use the same flash access
spiflash test for unaligned access
switch from hand-written memcpy to the newlib's as discussed in #174 for spiflash

This PR allows #208 to be merged. I tested it and it works.",I think this one has been dormant for too long. It looks good to me and can be merged if no-one has any different opinion.,True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,301,2016-11-29T20:08:40Z,2016-12-04T03:52:20Z,2017-10-25T11:21:48Z,MERGED,True,67,92,4,https://github.com/UncleRus,More convenient GPIO interrupt handlers,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/301,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/301,"Then:
void gpio00_interrupt_handler(void) //< Weak function override
{}

void gpio01_interrupt_handler(void) //< Weak function override
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY);
Now:
void handler(uint8_t gpio_num)
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY, handler);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY, handler);","Then:
void gpio00_interrupt_handler(void) //< Weak function override
{}

void gpio01_interrupt_handler(void) //< Weak function override
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY);
Now:
void handler(uint8_t gpio_num)
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY, handler);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY, handler);",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,301,2016-11-29T20:08:40Z,2016-12-04T03:52:20Z,2017-10-25T11:21:48Z,MERGED,True,67,92,4,https://github.com/UncleRus,More convenient GPIO interrupt handlers,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/301,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/301#issuecomment-263700308,"Then:
void gpio00_interrupt_handler(void) //< Weak function override
{}

void gpio01_interrupt_handler(void) //< Weak function override
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY);
Now:
void handler(uint8_t gpio_num)
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY, handler);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY, handler);","Hi @UncleRus,
I would say it's a controversial PR :)
What pros I see in the PR:

More easy/usual usage style. (you just pass what you want to be called)
No extra overhead on a single GPIO interrupt handler. (the same extra call as with the implementation before)
Interrupt handlers run-time reconfiguration. The handler can be changed in run-time.

Cons:

Uses extra 16 * 4 = 64 bytes of RAM
Mandatory extra call for each interrupt handler for time critical applications. (The previous implementation allows to replace a main interrupt handler, to be called straight away)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,301,2016-11-29T20:08:40Z,2016-12-04T03:52:20Z,2017-10-25T11:21:48Z,MERGED,True,67,92,4,https://github.com/UncleRus,More convenient GPIO interrupt handlers,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/301,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/301#issuecomment-263712391,"Then:
void gpio00_interrupt_handler(void) //< Weak function override
{}

void gpio01_interrupt_handler(void) //< Weak function override
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY);
Now:
void handler(uint8_t gpio_num)
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY, handler);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY, handler);",@sheinz PTAL,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,301,2016-11-29T20:08:40Z,2016-12-04T03:52:20Z,2017-10-25T11:21:48Z,MERGED,True,67,92,4,https://github.com/UncleRus,More convenient GPIO interrupt handlers,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/301,https://github.com/sheinz,4,https://github.com/SuperHouse/esp-open-rtos/pull/301#issuecomment-264261295,"Then:
void gpio00_interrupt_handler(void) //< Weak function override
{}

void gpio01_interrupt_handler(void) //< Weak function override
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY);
Now:
void handler(uint8_t gpio_num)
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY, handler);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY, handler);","The changes look good.
But I'm still not totally convinced :)
If not taking into account the syntaxes of handling the interrupts.
What functionality does this PR brings? It allows to dynamically change the individual interrupt handlers for single GPIOs in run-time. But how often such a need arises in a project?
And this functionality costs 64 bytes of RAM regardless of it's usage. Not much, but still...
It would be nice to hear other users of eor so, we could decide what approach is better.
The other idea is to make handling of interrupts configurable during compile-time. So, a user might decide what is best for his project: more clear to read code or RAM optimised but somewhat tricky.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,301,2016-11-29T20:08:40Z,2016-12-04T03:52:20Z,2017-10-25T11:21:48Z,MERGED,True,67,92,4,https://github.com/UncleRus,More convenient GPIO interrupt handlers,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/301,https://github.com/UncleRus,5,https://github.com/SuperHouse/esp-open-rtos/pull/301#issuecomment-264269379,"Then:
void gpio00_interrupt_handler(void) //< Weak function override
{}

void gpio01_interrupt_handler(void) //< Weak function override
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY);
Now:
void handler(uint8_t gpio_num)
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY, handler);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY, handler);","Dynamic interrupt handling very useful in drivers (e.g. software UART).
So I think that the possibility of a dynamic interrupt handling is definitely worth the 64 bytes of RAM.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,301,2016-11-29T20:08:40Z,2016-12-04T03:52:20Z,2017-10-25T11:21:48Z,MERGED,True,67,92,4,https://github.com/UncleRus,More convenient GPIO interrupt handlers,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/301,https://github.com/vlad-ivanov-name,6,https://github.com/SuperHouse/esp-open-rtos/pull/301#issuecomment-264275226,"Then:
void gpio00_interrupt_handler(void) //< Weak function override
{}

void gpio01_interrupt_handler(void) //< Weak function override
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY);
Now:
void handler(uint8_t gpio_num)
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY, handler);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY, handler);","I like dynamic interrupt handler setup too.
Minimizing interrupt response time is important for real-time applications. The thing is any ESP8266 firmware is far from realtime since there is a whole lot of code running in the background. Since the actual interrupt handler is still weak, the user can replace it.
By the way, isn't const gpio_interrupt_handler_t gpio_interrupt_handlers (as it is now) placed in the const data section? If so, then interrupt handling may produce SPI flash read and in this case this PR could actually improve response time and, more importantly, its value distribution.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,301,2016-11-29T20:08:40Z,2016-12-04T03:52:20Z,2017-10-25T11:21:48Z,MERGED,True,67,92,4,https://github.com/UncleRus,More convenient GPIO interrupt handlers,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/301,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/301#issuecomment-264278912,"Then:
void gpio00_interrupt_handler(void) //< Weak function override
{}

void gpio01_interrupt_handler(void) //< Weak function override
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY);
Now:
void handler(uint8_t gpio_num)
{}

...
gpio_set_interrupt(0, GPIO_INTTYPE_EDGE_ANY, handler);
gpio_set_interrupt(1, GPIO_INTTYPE_EDGE_ANY, handler);","@resetnow Good point! Thanks for stepping in.
Then, I'm ok with this PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,302,2016-12-01T09:33:51Z,2016-12-05T13:08:17Z,2016-12-05T13:08:17Z,MERGED,True,25,1,2,https://github.com/Zaltora,Fixes SPI Bug(s),4,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/302,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/302,"Hi i discovered 2 bug with the new SPI API, one is fixed. I still think the way for resolve the second.
First Bug:
Wrong address was set, just swap instructions order to solve it.
Second Bug:
It is a special case that the API does not take into account.
If CS is software , If Address/command/dummy is set and if data transfered is greater than SPI_BUFFER, it will send a second time (or more) addr/dummy/cmd as data :(.
I have some idea to solve it.
1 - If addr/dummy/cmd set, limit transfert to BUF SIZE  ( not sure if it is a good idea )
2 - add extras instructions to clear and  rearm dummy/addr/cmd.
But maybe an other way to solve it is better, some suggestion ?","Hi i discovered 2 bug with the new SPI API, one is fixed. I still think the way for resolve the second.
First Bug:
Wrong address was set, just swap instructions order to solve it.
Second Bug:
It is a special case that the API does not take into account.
If CS is software , If Address/command/dummy is set and if data transfered is greater than SPI_BUFFER, it will send a second time (or more) addr/dummy/cmd as data :(.
I have some idea to solve it.
1 - If addr/dummy/cmd set, limit transfert to BUF SIZE  ( not sure if it is a good idea )
2 - add extras instructions to clear and  rearm dummy/addr/cmd.
But maybe an other way to solve it is better, some suggestion ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,302,2016-12-01T09:33:51Z,2016-12-05T13:08:17Z,2016-12-05T13:08:17Z,MERGED,True,25,1,2,https://github.com/Zaltora,Fixes SPI Bug(s),4,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/302,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/302#issuecomment-264172758,"Hi i discovered 2 bug with the new SPI API, one is fixed. I still think the way for resolve the second.
First Bug:
Wrong address was set, just swap instructions order to solve it.
Second Bug:
It is a special case that the API does not take into account.
If CS is software , If Address/command/dummy is set and if data transfered is greater than SPI_BUFFER, it will send a second time (or more) addr/dummy/cmd as data :(.
I have some idea to solve it.
1 - If addr/dummy/cmd set, limit transfert to BUF SIZE  ( not sure if it is a good idea )
2 - add extras instructions to clear and  rearm dummy/addr/cmd.
But maybe an other way to solve it is better, some suggestion ?","IMHO the second way is better, it's more predictable behavior.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,302,2016-12-01T09:33:51Z,2016-12-05T13:08:17Z,2016-12-05T13:08:17Z,MERGED,True,25,1,2,https://github.com/Zaltora,Fixes SPI Bug(s),4,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/302,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/302#issuecomment-264790674,"Hi i discovered 2 bug with the new SPI API, one is fixed. I still think the way for resolve the second.
First Bug:
Wrong address was set, just swap instructions order to solve it.
Second Bug:
It is a special case that the API does not take into account.
If CS is software , If Address/command/dummy is set and if data transfered is greater than SPI_BUFFER, it will send a second time (or more) addr/dummy/cmd as data :(.
I have some idea to solve it.
1 - If addr/dummy/cmd set, limit transfert to BUF SIZE  ( not sure if it is a good idea )
2 - add extras instructions to clear and  rearm dummy/addr/cmd.
But maybe an other way to solve it is better, some suggestion ?","Hi, Second bug fixe and tested.  Maybe need some review or optimization.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,302,2016-12-01T09:33:51Z,2016-12-05T13:08:17Z,2016-12-05T13:08:17Z,MERGED,True,25,1,2,https://github.com/Zaltora,Fixes SPI Bug(s),4,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/302,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/302#issuecomment-264849585,"Hi i discovered 2 bug with the new SPI API, one is fixed. I still think the way for resolve the second.
First Bug:
Wrong address was set, just swap instructions order to solve it.
Second Bug:
It is a special case that the API does not take into account.
If CS is software , If Address/command/dummy is set and if data transfered is greater than SPI_BUFFER, it will send a second time (or more) addr/dummy/cmd as data :(.
I have some idea to solve it.
1 - If addr/dummy/cmd set, limit transfert to BUF SIZE  ( not sure if it is a good idea )
2 - add extras instructions to clear and  rearm dummy/addr/cmd.
But maybe an other way to solve it is better, some suggestion ?",@Zaltora Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,303,2016-12-01T19:07:21Z,2016-12-01T20:10:48Z,2016-12-01T20:10:48Z,MERGED,True,2,2,1,https://github.com/otopetrik,Fix ignored offset in rtc_mem access.,1,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/303,https://github.com/otopetrik,1,https://github.com/SuperHouse/esp-open-rtos/pull/303,"Fix sdk_system_rtc_mem_write and sdk_system_rtc_mem_read,
the functions did not use the user-provided offsets to rtc_mem.
Without using offset, rboot's rtcdata access, and its
temp_rom handling were broken.","Fix sdk_system_rtc_mem_write and sdk_system_rtc_mem_read,
the functions did not use the user-provided offsets to rtc_mem.
Without using offset, rboot's rtcdata access, and its
temp_rom handling were broken.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,303,2016-12-01T19:07:21Z,2016-12-01T20:10:48Z,2016-12-01T20:10:48Z,MERGED,True,2,2,1,https://github.com/otopetrik,Fix ignored offset in rtc_mem access.,1,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/303,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/303#issuecomment-264274654,"Fix sdk_system_rtc_mem_write and sdk_system_rtc_mem_read,
the functions did not use the user-provided offsets to rtc_mem.
Without using offset, rboot's rtcdata access, and its
temp_rom handling were broken.","Hi @otopetrik,
Thanks you very much!
Just checked the disassembly of the binary libraries. It was a mistake during reverse engineering. The original SDK uses the offset.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/otopetrik,1,https://github.com/SuperHouse/esp-open-rtos/pull/304,"It is required for working console output redirect.
Should fix #300.","It is required for working console output redirect.
Should fix #300.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/304#issuecomment-264277632,"It is required for working console output redirect.
Should fix #300.","Yes, it looks like an obvious solution.
But, I don't like too much function calls. For a single character of printf there's a chain of calls and now it's getting even longer:
printf->_write_r->sdk_os_putc->default_putc->uart_putc(0)
Currently this chain is two calls shorter:
printf->_write_r->uart_putc(0)
I agree that the fix is needed by there must be a better way to handle this.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/otopetrik,3,https://github.com/SuperHouse/esp-open-rtos/pull/304#issuecomment-264926597,"It is required for working console output redirect.
Should fix #300.","Found another issue with original commit - it failed when using spiffs.
New version redirects on block level, and spiffs does not need to know about stdin/stdout handling.
Sdk_os_putc is not used for block level stdout redirection, not sure if it is used anywhere else...
May be worth removing it to avoid confusion.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/otopetrik,4,https://github.com/SuperHouse/esp-open-rtos/pull/304#issuecomment-265240073,"It is required for working console output redirect.
Should fix #300.","Fixed missing ""return"" when calling to _read_filesystem_r, reading from SPIFFS now works.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/otopetrik,5,https://github.com/SuperHouse/esp-open-rtos/pull/304#issuecomment-266588182,"It is required for working console output redirect.
Should fix #300.","Thank you for the initial review @sheinz.
Last version fixes the long chain issue - it redirects block instead of single character:
_write_r -> _current_stdout_write_r (pointer-to-function)
It does not break when linked with SPIFFS:
_write_r -> _write_filesystem_r (weak symbol, esp_spiffs.c overrides) -> SPIFFS_write
Could you please review it ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/UncleRus,6,https://github.com/SuperHouse/esp-open-rtos/pull/304#issuecomment-267860906,"It is required for working console output redirect.
Should fix #300.",@sheinz Can this PR be merged? It looks good to me.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/sheinz,7,https://github.com/SuperHouse/esp-open-rtos/pull/304#issuecomment-267998041,"It is required for working console output redirect.
Should fix #300.","@UncleRus Yes, I think so. Looks good for me too.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/skcks,8,https://github.com/SuperHouse/esp-open-rtos/pull/304#issuecomment-361163793,"It is required for working console output redirect.
Should fix #300.","If want to redirect stdout to a file in SPIFFS, what is need to do?any clue will be helpful, thanks",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,304,2016-12-01T19:35:57Z,2016-12-19T15:55:27Z,2018-01-29T08:36:24Z,MERGED,True,90,28,3,https://github.com/otopetrik,Allow changing write function of stdout,2,['core'],https://github.com/SuperHouse/esp-open-rtos/pull/304,https://github.com/skcks,9,https://github.com/SuperHouse/esp-open-rtos/pull/304#issuecomment-361173741,"It is required for working console output redirect.
Should fix #300.","is correct  the code?  @otopetrik @sheinz
ssize_t log_writer(struct _reent *r, int fd, const void *ptr, size_t len) {
    int fd_log = open(""excinfo.log"", O_WRONLY | O_CREAT | O_APPEND, 0);
    if (fd_log < 0) {
        return 0;
    }

    len = write(fd_log, (uint8_t *)ptr, len);
    close(fd_log);

    return len;
}

set_write_stdout(log_writer);",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/mr-nice,1,https://github.com/SuperHouse/esp-open-rtos/pull/307,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart","This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-264699536,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart","Thank you.
But I think this contribution will be incomplete without the TX part.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-279334027,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart","Any news about the TX part, @mr-nice ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-279962395,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart","error at  softuart_init(uint32_t baudrate) with sdk_os_delay_us(100000);.
This delay is not necessary, i guess ? . Use vTaskDelay for large delay as discussed at #323 when you need it.
Nice addition @mr-nice  !",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/mr-nice,5,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-279966548,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart","Thanks for your comment I will change this part to use vTaskDelay.
To be honest I did not know that pull requests are tracking the branches. But if you know it it is a nice feature :) The TX part is from lzzbhad  and unfortunately I have no other device to test the TX part. Maybe someone with a second device can test it?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-279975899,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart","You can test it with your computer ? just use hardware pin as software pin. I will try to test it this week if i got time.
I dont think this delay is usefull.  I dont found timing specification for UART.  You can remove it or reduce time to 1 ms. ( If no objections )",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/UncleRus,7,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-281457072,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart","@mr-nice Could you please allow maintainers to edit this PR?
Enabling repository maintainer permissions on existing pull requests",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/mr-nice,8,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-281458251,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart","I think you are right about the delay. I am not sure why it is there maybe to wait that the GPIO is long enought high after the gpio_write(1) at //Set Tx  to trigger a edge. But the gpio_write should be blocking anyways and I think a shorter delay could work.
I hope I am able to find some time to test it this week :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/mr-nice,9,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-281459529,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart",@UncleRus I clicked the [] Allow edits from maintainers and the checkbox is now OK. Please tell me if it works out for you :),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,307,2016-12-04T11:06:28Z,2017-03-06T17:28:20Z,2017-03-06T17:28:20Z,MERGED,True,463,0,7,https://github.com/mr-nice,Softuart,5,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/307,https://github.com/UncleRus,10,https://github.com/SuperHouse/esp-open-rtos/pull/307#issuecomment-281464713,"This is a port of esp8266-software-uart [1] to esp-open-rtos.
For now only RX is working and it must be configured at the softuart.h file. This can now be easily fixed with the new gpio_inter handlers.
The license is MIT which should be compatible with BSD.
1 https://github.com/plieningerweb/esp8266-software-uart",@mr-nice Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,308,2016-12-04T11:26:16Z,2016-12-24T17:08:43Z,2016-12-24T17:08:43Z,MERGED,True,366,0,5,https://github.com/mr-nice,Feature/ms561101ba03,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/308,https://github.com/mr-nice,1,https://github.com/SuperHouse/esp-open-rtos/pull/308,"This is a driver for the ms561101ba03 barometric pressure sensor with second order temperature compensation. The code is tested from 5 to 27 C with reasonable results.
The calculations could be rewritten to use shifts. But my integer shifting and multiplication skills for mixed integer sizes and signed/unsigned got a bit rusty. So for now it uses constants and let the compiler do the shifting.","This is a driver for the ms561101ba03 barometric pressure sensor with second order temperature compensation. The code is tested from 5 to 27 C with reasonable results.
The calculations could be rewritten to use shifts. But my integer shifting and multiplication skills for mixed integer sizes and signed/unsigned got a bit rusty. So for now it uses constants and let the compiler do the shifting.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,308,2016-12-04T11:26:16Z,2016-12-24T17:08:43Z,2016-12-24T17:08:43Z,MERGED,True,366,0,5,https://github.com/mr-nice,Feature/ms561101ba03,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/308,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/308#issuecomment-264699435,"This is a driver for the ms561101ba03 barometric pressure sensor with second order temperature compensation. The code is tested from 5 to 27 C with reasonable results.
The calculations could be rewritten to use shifts. But my integer shifting and multiplication skills for mixed integer sizes and signed/unsigned got a bit rusty. So for now it uses constants and let the compiler do the shifting.","Thank you, great contribution!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,309,2016-12-05T13:35:23Z,2016-12-29T14:42:44Z,2016-12-29T14:42:44Z,MERGED,True,146450,69,54,https://github.com/Zaltora,SPI3 support ssd1306,22,"['help wanted', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/309,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/309,"Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible","Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,309,2016-12-05T13:35:23Z,2016-12-29T14:42:44Z,2016-12-29T14:42:44Z,MERGED,True,146450,69,54,https://github.com/Zaltora,SPI3 support ssd1306,22,"['help wanted', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/309,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/309#issuecomment-265377630,"Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible","Hi, i have tested  with my sh1106/SPI4 . Was working. but unfortunately, my screen is dead...
So i will wait to receive new Sh1106 to test it with all protocols and fix what missing if needed.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,309,2016-12-05T13:35:23Z,2016-12-29T14:42:44Z,2016-12-29T14:42:44Z,MERGED,True,146450,69,54,https://github.com/Zaltora,SPI3 support ssd1306,22,"['help wanted', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/309,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/309#issuecomment-265684229,"Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible","@Zaltora Great contrbution, thank you!
I have tested my SSD1306 in SPI3 mode and it works ok.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,309,2016-12-05T13:35:23Z,2016-12-29T14:42:44Z,2016-12-29T14:42:44Z,MERGED,True,146450,69,54,https://github.com/Zaltora,SPI3 support ssd1306,22,"['help wanted', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/309,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/309#issuecomment-265806843,"Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible",I tested I2C with ssd1306. Work fine.  Need test with sh1106 (all protocols) to valid.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,309,2016-12-05T13:35:23Z,2016-12-29T14:42:44Z,2016-12-29T14:42:44Z,MERGED,True,146450,69,54,https://github.com/Zaltora,SPI3 support ssd1306,22,"['help wanted', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/309,https://github.com/UncleRus,5,https://github.com/SuperHouse/esp-open-rtos/pull/309#issuecomment-267910110,"Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible",Hi @Zaltora! Is there any news on testing with SH1106?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,309,2016-12-05T13:35:23Z,2016-12-29T14:42:44Z,2016-12-29T14:42:44Z,MERGED,True,146450,69,54,https://github.com/Zaltora,SPI3 support ssd1306,22,"['help wanted', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/309,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/309#issuecomment-267924302,"Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible",I will receive my screen soon! :),True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,309,2016-12-05T13:35:23Z,2016-12-29T14:42:44Z,2016-12-29T14:42:44Z,MERGED,True,146450,69,54,https://github.com/Zaltora,SPI3 support ssd1306,22,"['help wanted', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/309,https://github.com/Zaltora,7,https://github.com/SuperHouse/esp-open-rtos/pull/309#issuecomment-269321117,"Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible","Hi @UncleRus,  just tested my screen . Need to rework communication spi for sh1106 . After this it will work. Problems are :
-Page/Addr Command: For ssh1106, we need send command between data transfert but when we doing this, command function will put CS high. ( didn't noticed this when writing it ^^ )
-3-wire protocol difference : SSD1306 and sh1106 dont get same SPI3 protocol. We need send C/D bit command for each byte with sh1106. ssd1306 is apparently fine and need just one with first byte ( cf : your test on ssd1306 ).
i fixed them (commit soon, need rewrote ^^)",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,309,2016-12-05T13:35:23Z,2016-12-29T14:42:44Z,2016-12-29T14:42:44Z,MERGED,True,146450,69,54,https://github.com/Zaltora,SPI3 support ssd1306,22,"['help wanted', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/309,https://github.com/Zaltora,8,https://github.com/SuperHouse/esp-open-rtos/pull/309#issuecomment-269469174,"Add SPI3 protocol for ssd1306.
replace 'spi_tranfert_8' by new API 'spi_repeat' to send many 0 ;
'cs_pin' and 'addr' share same byte in struct because we dont need both in same time.

I don't get ssd1306 to test it. Need feedback.
I will add SH1106 support as soon as possible","hum, i doing wrong i guess.  i had rebase this branch  with master, then solves conflict, then update this PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/310,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-265806552,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","It is true, totaly forget about font license. I will search new font to replace them.  Any idea ?
It exist a lot of font. Add most popular open font can be great.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-265823408,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","For example Roboto, Droid Sans. Both distributed under Apache license.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-265967886,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","I used Roboto, Hesited with Lato :)
Need improve font part and add more. Can be used by other screen library, i guess.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/UncleRus,5,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266136056,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","Now we have simple tool to convert .pcf/.bdf files to source/
Preparing:
$ pip3 install pillow jinja2

Converting PCF/BDF font to PIL:
$ pilfont ter-u16b_iso-8859-1.pcf

Generating source:
$ ./create_font.py -f ter-u16b_iso-8859-1.pil -n ""Terminus"" -c iso-8859-1 > ../data/font_terminus_16x32_iso-8859-1.h

Proportional fonts are not working, both of Roboto. I didn't try to generate my own proportional font and I believe error can be somewhere in font data, not in the code.",True,{'THUMBS_UP': ['https://github.com/Zaltora']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266181235,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","It is totally what i imagine. a tool, include system, improvements.
Very nice @UncleRus !
I will test it next week.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/UncleRus,7,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266286366,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.",And one more TODO: we also need correct and fast clipping in ssd1306_draw_char().,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,8,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266378067,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","Just added HW scrolling.
Question about setting system : Where app user define font he want and font he dont want ? (Makefile app file? ,  this own config.h file ? He dont need change config.h or componen.mk from  font directory ?
What is best way to set font or protocol avaible ?
Nice addition @UncleRus  :) .",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/UncleRus,9,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266435119,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","We have scrolling now! That's great :)
Any font can be selected or de-selected in the app makefile like this:
PROGRAM=SSD1306_fps
EXTRA_COMPONENTS = extras/ssd1306 extras/i2c extras/fonts

FONTS_BITOCRA_6X11 = 1

include ../../common.mk

We had to disable all fonts by default in fonts/defaults.mk before merging this PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,10,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266475450,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","Great, I will review exemple part tomorow ( clear high part screen )  before change font.
I see that fps drop when font is huge. Maybe need break loop if drawpixel is out of screen",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,11,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266664889,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.",Now draw a character can return negative value if write outside of the screen.,True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/UncleRus,12,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266704214,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","@Zaltora Awesome work!
I'm going to squash & merge it after you add licensing information to headers.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,13,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266722687,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","Well, i am new with license. It is good ?
I see just one header to change. ssd1306 part is already ok.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/UncleRus,14,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266724614,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.",Excellent!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/UncleRus,15,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266724966,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.",Could you please squash this PR?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,16,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266734742,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","I squash all commit from ""ssd1306 2D and font"" to ""Licence fix"".
When i  doing this, it is added these commits :
-Fixes Bug(s)
-Second bug. fix attempt.
-Fix status with bus.
-Readable option
from #302 , i dont no why :( .  i Need force rebase ?  What happen ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,310,2016-12-08T12:27:49Z,2016-12-13T13:42:23Z,2016-12-13T13:53:50Z,MERGED,True,145365,5,39,https://github.com/Zaltora,ssd1306 more functions,23,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/310,https://github.com/Zaltora,17,https://github.com/SuperHouse/esp-open-rtos/pull/310#issuecomment-266743808,"Hi, It is a lot of new functions for ssd1306 driver. Adapted from other libs. this PR add:
-An new example.
-2D graphical functions.
-Font system (need more option to choice what to compile, just initial )
Make a new font with this tool: http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator/
Source: https://github.com/baoshi/ESP-I2C-OLED and some functions from adafruits lib.","Thank you, need more training with git :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,314,2016-12-17T16:01:17Z,2016-12-17T16:10:06Z,2016-12-17T16:10:06Z,MERGED,True,8,0,1,https://github.com/UncleRus,Fix #313,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/314,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/314,Fix for #313,Fix for #313,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,315,2016-12-19T00:56:00Z,2016-12-21T05:38:00Z,2017-10-25T11:15:02Z,MERGED,True,409,0,5,https://github.com/UncleRus,Driver for PCA9685 + example,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/315,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/315,The PCA9685 is an I2C-bus controlled 16-channel LED controller optimized for Red/Green/Blue/Amber (RGBA) color backlighting applications. Each LED output has its own 12-bit resolution (4096 steps) fixed frequency individual PWM controller that operates at a programmable frequency from a typical of 24 Hz to 1526 Hz with a duty cycle that is adjustable from 0 % to 100 % to allow the LED to be set to a specific brightness value. All outputs are set to the same PWM frequency.,The PCA9685 is an I2C-bus controlled 16-channel LED controller optimized for Red/Green/Blue/Amber (RGBA) color backlighting applications. Each LED output has its own 12-bit resolution (4096 steps) fixed frequency individual PWM controller that operates at a programmable frequency from a typical of 24 Hz to 1526 Hz with a duty cycle that is adjustable from 0 % to 100 % to allow the LED to be set to a specific brightness value. All outputs are set to the same PWM frequency.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,315,2016-12-19T00:56:00Z,2016-12-21T05:38:00Z,2017-10-25T11:15:02Z,MERGED,True,409,0,5,https://github.com/UncleRus,Driver for PCA9685 + example,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/315,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/315#issuecomment-268213452,The PCA9685 is an I2C-bus controlled 16-channel LED controller optimized for Red/Green/Blue/Amber (RGBA) color backlighting applications. Each LED output has its own 12-bit resolution (4096 steps) fixed frequency individual PWM controller that operates at a programmable frequency from a typical of 24 Hz to 1526 Hz with a duty cycle that is adjustable from 0 % to 100 % to allow the LED to be set to a specific brightness value. All outputs are set to the same PWM frequency.,I'm going to merge this one tomorrow if no objections.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,317,2016-12-24T17:27:59Z,2016-12-24T17:28:15Z,2017-10-25T11:21:48Z,MERGED,True,42,38,2,https://github.com/UncleRus,Code style fixes for MS5611,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/317,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/317,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,318,2016-12-29T08:07:13Z,2016-12-29T14:45:26Z,2016-12-29T14:45:26Z,MERGED,True,674,0,5,https://github.com/Zaltora,Ina3221,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/318,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/318,"Driver for ina3221 voltage and current sensor.
tested with example. work well.","Driver for ina3221 voltage and current sensor.
tested with example. work well.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,318,2016-12-29T08:07:13Z,2016-12-29T14:45:26Z,2016-12-29T14:45:26Z,MERGED,True,674,0,5,https://github.com/Zaltora,Ina3221,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/318,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/318#issuecomment-269639817,"Driver for ina3221 voltage and current sensor.
tested with example. work well.","Hi, @Zaltora ! Great contribution, thank you!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,319,2016-12-29T16:22:10Z,2017-01-02T22:40:55Z,2017-01-03T13:28:27Z,MERGED,True,8,1,6,https://github.com/tuanpmt,add some missing include & fixed display output on sh1104,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/319,https://github.com/tuanpmt,1,https://github.com/SuperHouse/esp-open-rtos/pull/319,I got some errors when build with esphttpd,I got some errors when build with esphttpd,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,319,2016-12-29T16:22:10Z,2017-01-02T22:40:55Z,2017-01-03T13:28:27Z,MERGED,True,8,1,6,https://github.com/tuanpmt,add some missing include & fixed display output on sh1104,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/319,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/319#issuecomment-269875867,I got some errors when build with esphttpd,"What problem you got with SH1106 ?   It is display good with me.
Maybe you forget to change DISPLAY_WIDTH  to  132  because SH1106 got  132X64 buffer, even if screen is 128X64.
Need maybe update example with this details.
I dont test in I2C anyway, maybe a fix is required.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,319,2016-12-29T16:22:10Z,2017-01-02T22:40:55Z,2017-01-03T13:28:27Z,MERGED,True,8,1,6,https://github.com/tuanpmt,add some missing include & fixed display output on sh1104,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/319,https://github.com/tuanpmt,3,https://github.com/SuperHouse/esp-open-rtos/pull/319#issuecomment-269890641,I got some errors when build with esphttpd,"My display is 128x64, as the datasheet, sh1106_go_coordinate execute every page = 128bytes width. I can not using this library without this condition i%dev->width == 0
https://github.com/tuanpmt/esp-audio-player/blob/master/extras/player/eq.c#L35",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,319,2016-12-29T16:22:10Z,2017-01-02T22:40:55Z,2017-01-03T13:28:27Z,MERGED,True,8,1,6,https://github.com/tuanpmt,add some missing include & fixed display output on sh1104,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/319,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/319#issuecomment-269894723,I got some errors when build with esphttpd,"This fix make sense, because currently go_coordinate is call every 16 bytes. Great fix @tuanpmt
Just a point, i checked datasheet, the sh1106 got a 132 X 64 bits SRAM.
ref: https://www.elecrow.com/download/SH1106%20datasheet.pdf
That why in sh1106_go_coordinate, you got +2 offset. To center for 128X64  true screen format. I didn't know what happens if i use 128  in DISPLAY_WIDTH. If it is work well for you, maybe this part of ram is ignored. I will test that with SPI protocols.",True,{'THUMBS_UP': ['https://github.com/tuanpmt']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,319,2016-12-29T16:22:10Z,2017-01-02T22:40:55Z,2017-01-03T13:28:27Z,MERGED,True,8,1,6,https://github.com/tuanpmt,add some missing include & fixed display output on sh1104,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/319,https://github.com/Zaltora,5,https://github.com/SuperHouse/esp-open-rtos/pull/319#issuecomment-269937853,I got some errors when build with esphttpd,It is work well. ^^,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,320,2017-01-01T06:04:50Z,2017-01-12T12:57:50Z,2017-01-12T12:58:07Z,MERGED,True,13,3,1,https://github.com/tuanpmt,Process recursive folder for spiffs images,4,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/320,https://github.com/tuanpmt,1,https://github.com/SuperHouse/esp-open-rtos/pull/320,"Process recursive folder
+files
    +--folder1
    |   \---file1.txt
    |   \---file2.txt
    \--file3.txt

to spiffs filename:
+ folder1/file1.txt
+ folder1/file2.txt
+ file3.txt","Process recursive folder
+files
    +--folder1
    |   \---file1.txt
    |   \---file2.txt
    \--file3.txt

to spiffs filename:
+ folder1/file1.txt
+ folder1/file2.txt
+ file3.txt",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,320,2017-01-01T06:04:50Z,2017-01-12T12:57:50Z,2017-01-12T12:58:07Z,MERGED,True,13,3,1,https://github.com/tuanpmt,Process recursive folder for spiffs images,4,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/320,https://github.com/tuanpmt,2,https://github.com/SuperHouse/esp-open-rtos/pull/320#issuecomment-272070022,"Process recursive folder
+files
    +--folder1
    |   \---file1.txt
    |   \---file2.txt
    \--file3.txt

to spiffs filename:
+ folder1/file1.txt
+ folder1/file2.txt
+ file3.txt",@sheinz as you said,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,320,2017-01-01T06:04:50Z,2017-01-12T12:57:50Z,2017-01-12T12:58:07Z,MERGED,True,13,3,1,https://github.com/tuanpmt,Process recursive folder for spiffs images,4,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/320,https://github.com/sheinz,3,https://github.com/SuperHouse/esp-open-rtos/pull/320#issuecomment-272156818,"Process recursive folder
+files
    +--folder1
    |   \---file1.txt
    |   \---file2.txt
    \--file3.txt

to spiffs filename:
+ folder1/file1.txt
+ folder1/file2.txt
+ file3.txt",Thanks @tuanpmt !,True,{'THUMBS_UP': ['https://github.com/tuanpmt']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/321,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/vlad-ivanov-name,2,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-269969797,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","I think using volatile variable for delay may produce different actual delay with different optimization levels. Even though it doesn't get any simpler than addi and s32i in a loop, compiler may still unroll the loop.
Something like this might produce more consistent results:
uint32_t delay;
__asm volatile (
	""movi %0, %1"" ""\n""
	""1: addi %0, %0, -1"" ""\n""
	""bnez %0, 1b"" ""\n""
: ""=a"" (delay) : ""i"" (5));
You can fine-tune the time by putting nop instructions after the loop.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270011779,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","thank you for your help @resetnow , i had hesitate to use asm because i got problem when trying to replace fix value 5 by a variable :(.
I think, asm delay can be applied to ws2812 driver too for same reason?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/vlad-ivanov-name,4,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270013426,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","i got problem when trying to replace fix value 5 by a variable :(.

That's because this snippet is made to explicitly accept immediate arguments. To avoid magic numbers, maybe it makes sense to make 5 a macro. Using a variable is also possible (the same movi instruction is now generated by the compiler) :
uint32_t delay = 5;
__asm volatile (
	""1: addi %0, %0, -1"" ""\n""
	""bnez %0, 1b"" ""\n""
:: ""a"" (delay));

asm delay can be applied to ws2812 driver too for same reason

Likely yes.",True,{'THUMBS_UP': ['https://github.com/sheinz']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,5,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270324469,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","Update WIP:
-Added ASM delay.
-Added 100KHz, 400Khz or 500 KHz selection  ( measured ok but its Approximate)
-Added 16 bits data transfert I2C ( tested with ina3221 ok!)
Need feedback for these points:
Rework transfert:
I had just created new api function for 16bits to show  prototype format and know if it is good for all to update 8bits functions like them and for all lib. I think this allows more choice of transfer for the library.
Added Improvement of error handling ( EBUSY and EIO ) : make sens or keep old system ?
bool i2c_slave_write(uint8_t slave_addr, uint8_t *buf, uint8_t len);
bool i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len);

to
int i2c_slave_write(uint8_t slave_addr, uint8_t *data, uint8_t *buf, uint8_t len);
int i2c_slave_read(uint8_t slave_addr, uint8_t *data, uint8_t *buf, uint32_t len);

Rework of flag system:
For test, i created a new flag variable, Level 0 API dont check it right now. reason: dont include transfert timing when i prevent task change here:
static int i2c_bus_test(bool force)
{
    taskENTER_CRITICAL(); // To prevent task swaping after checking flag and before set it!
    bool status = flag ; // get current status
    if(force)
    {
        flag = true ; // force bus on
        taskEXIT_CRITICAL();
        if(status)
           i2c_stop(); //Bus was busy, stop it.
    }
    else
    {
        if (status)
        {
            taskEXIT_CRITICAL();
            debug(""busy"");
            taskYIELD(); // If bus busy, change task to try finish last com.
            return -EBUSY ;  // If bus busy, dont read
        }
        else
        {
            flag = true ; // Set Bus busy
            taskEXIT_CRITICAL();
        }
    }
    return 0 ;
}

I use this prevent to be sure than task don't change between a check and a set.I I dont want include time from "" i2c_stop()"", that why i created new flag. Everything is ok ? idea to improve this ? or maybe it is useless ?
only 16 bits transfert got the busy protection, i will update everything after feedback.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270325245,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","I had doing some test with ina3221 example reworked.
One task read flag every 10 ms ;
Second task read value if flag good ;
No EIO error,  bus busy detected",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,7,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270332149,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",I will remove 16 bits api after update 8 bits function. Is not really usefull.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,8,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270577871,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","The new api will look like this :
int i2c_slave_write(uint8_t slave_addr, uint8_t *data, uint8_t *buf, uint32_t len, bool force);
int i2c_slave_read(uint8_t slave_addr, uint8_t *data, uint8_t *buf, uint32_t len, bool force);

I think that all lib can be update with Level 1 API .  Level 0 API dont implement flag security. Even if we got i2c_status(), Level 1 API is more secure.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,9,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270628282,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",It is better that each lib do special treatment when I2C bus busy or that level 1 API  retry each time busy line detected ? Can be infinite loop if I2C bus permanently used by other task.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/vlad-ivanov-name,10,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270628792,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",Usually multiple tasks share a semaphore that restricts access to a single task. I don't think this should be implemented inside the library.,True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,11,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-270654716,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","WIP : Just basic replacement. Library dont manage busy line yet but detect it.  Not tested yet.
@resetnow :  Ok.  Component library  can do this  do {  error = (I2C link function) ;  } while (error ==  -EBUSY );   ? When i2C is busy, it is do a taskYield() ;",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,12,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-276012540,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","hi, i have done few fixes and test.  I think core I2C work well now. Need tests for some library to confirm that changes on  i2c components lib is good. i will do some test again on i2c frequency. Already tested with example:
-ssd1306  ok
-ds3231 lok
-ina3221 ok
-bmp280 ok",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/vlad-ivanov-name,13,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-276013911,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","I looked over this yesterday and here are my thoughts:

Do we really need to pass register address as a pointer? 90% of devices with i2c I worked follow the pattern slave_address — reg_address — data. For the few of those doing it differently the read/write sequence can be implemented separately.
Do we really need to pass force flag with every read/write? It seems to me that forcefully stopping existing communication isn't something you would want to do often.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,14,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-276018266,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","Hi @resetnow , thank you for your feedback. Interesting thing.
1- I have choice to create one function because i was thinking that is not so much less used like you said. I use many sensors that need raw reads and some components that use register can be read without specify a register to be faster when reading a lot of data ( when start from 0 or when you know already where is the current register pointer  for example ). I'm not against the option of having two functions because I hesitated to do it. If it is better, i can do it.
2- you are right,  we will not use this often. In my case i want do some priority reading on a specific sensor with a timer.  Just thinking to add 1 function like
i2c_force_bus();  => This function will force the next transaction level 1 api. you need rearm it or
i2c_force_bus(bool state); => This function will force all i2c until he is setting off
What did you think ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/vlad-ivanov-name,15,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-276021781,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",I'll wait for some feedback from others.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/andree182,16,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-279169137,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",Ad 1) - I vote for having the pointer. Just make it (const uint_8*). Same for the write.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/andree182,17,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-287607425,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",Is there some blocker regarding this? Or is it simply not going to get merged?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/vlad-ivanov-name,18,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-287607625,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",@sheinz @UncleRus what do you think?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/Zaltora,19,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-287684478,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","I use this PR in my project. No problem detected with library i use (ds3231, ina3221, bmp280, ...). I have done some test with multi-task I2C without using semaphore. Reading and writing work well. Busy line properly detected.
I have done some test with forced option too. Didn't see problems. ( I mostly read device than write into them)
Some frequency bus need to be adjusted but it is fine.
I got not time right now but i was thinking to add bus system like SPI lib or Softuart and remove all I2C init from some library. It can be done in an other PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/UncleRus,20,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-287690017,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)","@resetnow For me, this PR is good enough.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,321,2017-01-02T09:28:04Z,2017-03-21T06:41:48Z,2017-03-21T06:41:48Z,MERGED,True,423,333,24,https://github.com/Zaltora,I2c optimization and features,17,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/321,https://github.com/UncleRus,21,https://github.com/SuperHouse/esp-open-rtos/pull/321#issuecomment-287827070,"Hi, i do some work on i2c.
Currently done:
Add custom delay to get true 400kHz at 160Mhz and  320KHz at 80Mhz ( cant be faster with 80 MHz for now )
Add status flag check ( usefull when more than one task use i2c ) ( Level 1 API dont start if bus busy)
Rewrote comment (Update them)
Rework printf debug
My plans (need opinion):
-Selectable frequency. (100kHz / 400kHz )
-Add force option. ( if bus busy, stop com and start a new one  for level1 API)
-Add possibility to write and read 16 bit data.
-Change data from i2c_slave_read(uint8_t slave_addr, uint8_t data, uint8_t *buf, uint32_t len) to a data pointer. Function dont send register address when NULL.
-Optional (if time permit): Add multiple i2c setting support.
What is better:
Add new functions to include 16 bits possibility or add  data format to current function ?
Write a new ""read"" function without register data or change him to a pointer  ?   (other idea ?)",Going to merge it if no objections.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,324,2017-01-08T01:15:12Z,2017-01-27T08:38:02Z,2017-01-27T08:38:02Z,MERGED,True,5050,0,19,https://github.com/lujji,HTTP server,4,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/324,https://github.com/lujji,1,https://github.com/SuperHouse/esp-open-rtos/pull/324,"I've added extras/httpd from LwIP and created an example HTTP server with CGI and SSI handlers to demonstrate basic functionality (screenshot). Original code is MIT licensed.
The only issue is that build process depends on a perl script, which generates C structures from files inside 'fs' directory.","I've added extras/httpd from LwIP and created an example HTTP server with CGI and SSI handlers to demonstrate basic functionality (screenshot). Original code is MIT licensed.
The only issue is that build process depends on a perl script, which generates C structures from files inside 'fs' directory.",True,"{'THUMBS_UP': ['https://github.com/tuanpmt', 'https://github.com/UncleRus']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,324,2017-01-08T01:15:12Z,2017-01-27T08:38:02Z,2017-01-27T08:38:02Z,MERGED,True,5050,0,19,https://github.com/lujji,HTTP server,4,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/324,https://github.com/sheinz,2,https://github.com/SuperHouse/esp-open-rtos/pull/324#issuecomment-271532729,"I've added extras/httpd from LwIP and created an example HTTP server with CGI and SSI handlers to demonstrate basic functionality (screenshot). Original code is MIT licensed.
The only issue is that build process depends on a perl script, which generates C structures from files inside 'fs' directory.","Hi @lujji,
Thanks for the contribution.
esp-open-rtos have lacked http server support for a long time. It's really cool that finally there's some light in this direction.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,330,2017-01-26T11:16:12Z,2017-04-01T00:20:38Z,2017-04-01T00:20:38Z,MERGED,True,170,7,7,https://github.com/andree182,bh1750 i2c light sensor driver + pwm cleanup,3,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/330,https://github.com/andree182,1,https://github.com/SuperHouse/esp-open-rtos/pull/330,"Hi, this is a ""preliminary"" driver pull request - so that others know the driver already exist and they don't have to rewrite it (though it's trivial).
Since I did change extras/i2c lib a bit, and there's pull request #321 in the queue for similar functionality (but cleaner), I'll rebase this once #321 is merged - basically the commit 0b1197b can be dropped.","Hi, this is a ""preliminary"" driver pull request - so that others know the driver already exist and they don't have to rewrite it (though it's trivial).
Since I did change extras/i2c lib a bit, and there's pull request #321 in the queue for similar functionality (but cleaner), I'll rebase this once #321 is merged - basically the commit 0b1197b can be dropped.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,330,2017-01-26T11:16:12Z,2017-04-01T00:20:38Z,2017-04-01T00:20:38Z,MERGED,True,170,7,7,https://github.com/andree182,bh1750 i2c light sensor driver + pwm cleanup,3,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/330,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/330#issuecomment-275615949,"Hi, this is a ""preliminary"" driver pull request - so that others know the driver already exist and they don't have to rewrite it (though it's trivial).
Since I did change extras/i2c lib a bit, and there's pull request #321 in the queue for similar functionality (but cleaner), I'll rebase this once #321 is merged - basically the commit 0b1197b can be dropped.","It would be great if you'll add simple usage example.
Thank you for your contribution!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,330,2017-01-26T11:16:12Z,2017-04-01T00:20:38Z,2017-04-01T00:20:38Z,MERGED,True,170,7,7,https://github.com/andree182,bh1750 i2c light sensor driver + pwm cleanup,3,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/330,https://github.com/panoti,3,https://github.com/SuperHouse/esp-open-rtos/pull/330#issuecomment-287609979,"Hi, this is a ""preliminary"" driver pull request - so that others know the driver already exist and they don't have to rewrite it (though it's trivial).
Since I did change extras/i2c lib a bit, and there's pull request #321 in the queue for similar functionality (but cleaner), I'll rebase this once #321 is merged - basically the commit 0b1197b can be dropped.",Why isn't this pull-request merged?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,330,2017-01-26T11:16:12Z,2017-04-01T00:20:38Z,2017-04-01T00:20:38Z,MERGED,True,170,7,7,https://github.com/andree182,bh1750 i2c light sensor driver + pwm cleanup,3,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/330,https://github.com/andree182,4,https://github.com/SuperHouse/esp-open-rtos/pull/330#issuecomment-287614727,"Hi, this is a ""preliminary"" driver pull request - so that others know the driver already exist and they don't have to rewrite it (though it's trivial).
Since I did change extras/i2c lib a bit, and there's pull request #321 in the queue for similar functionality (but cleaner), I'll rebase this once #321 is merged - basically the commit 0b1197b can be dropped.","Waiting for #321 first (to rebase this...), then I'll also add an example..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,330,2017-01-26T11:16:12Z,2017-04-01T00:20:38Z,2017-04-01T00:20:38Z,MERGED,True,170,7,7,https://github.com/andree182,bh1750 i2c light sensor driver + pwm cleanup,3,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/330,https://github.com/andree182,5,https://github.com/SuperHouse/esp-open-rtos/pull/330#issuecomment-290531621,"Hi, this is a ""preliminary"" driver pull request - so that others know the driver already exist and they don't have to rewrite it (though it's trivial).
Since I did change extras/i2c lib a bit, and there's pull request #321 in the queue for similar functionality (but cleaner), I'll rebase this once #321 is merged - basically the commit 0b1197b can be dropped.","Hi guys. I reworked the patches to match new i2c, added example, and added a small cleanup of PWM. I didn't do the enum thing, since the flags can now be combined (for which enums are a bit dangerous - although here only 1 byte stuff is moved around).",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,331,2017-01-30T18:40:10Z,2017-02-02T06:17:54Z,2017-02-02T06:17:54Z,MERGED,True,3810,1363,16,https://github.com/lujji,httpd: WebSockets,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/331,https://github.com/lujji,1,https://github.com/SuperHouse/esp-open-rtos/pull/331,"WebSockets implementation on top of httpd. Binary and text modes are supported, opening multiple sockets is possible. Continuation frames are not implemented. Example code demonstrates streaming ADC readings, and controlling LED.","WebSockets implementation on top of httpd. Binary and text modes are supported, opening multiple sockets is possible. Continuation frames are not implemented. Example code demonstrates streaming ADC readings, and controlling LED.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,331,2017-01-30T18:40:10Z,2017-02-02T06:17:54Z,2017-02-02T06:17:54Z,MERGED,True,3810,1363,16,https://github.com/lujji,httpd: WebSockets,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/331,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/331#issuecomment-276633046,"WebSockets implementation on top of httpd. Binary and text modes are supported, opening multiple sockets is possible. Continuation frames are not implemented. Example code demonstrates streaming ADC readings, and controlling LED.","Thank you, great contribution!
Will merge it tomorrow if no objections.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,331,2017-01-30T18:40:10Z,2017-02-02T06:17:54Z,2017-02-02T06:17:54Z,MERGED,True,3810,1363,16,https://github.com/lujji,httpd: WebSockets,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/331,https://github.com/lujji,3,https://github.com/SuperHouse/esp-open-rtos/pull/331#issuecomment-276728101,"WebSockets implementation on top of httpd. Binary and text modes are supported, opening multiple sockets is possible. Continuation frames are not implemented. Example code demonstrates streaming ADC readings, and controlling LED.","Thanks. It just so happens that I've added large frames support recently, so I'd appreciate if you merge my next commit.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,334,2017-02-03T04:39:47Z,2017-02-03T05:31:14Z,2017-02-03T05:31:14Z,MERGED,True,69,31,3,https://github.com/lujji,httpd: support for large WebSocket frames,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/334,https://github.com/lujji,1,https://github.com/SuperHouse/esp-open-rtos/pull/334,"I wanted to merge yesterday, but was a bit late.
Changes:

support for WebSocket frames >125 bytes
fixed minor issue with timeout
updated readme

I'm not planning any major changes so it's safe to merge.","I wanted to merge yesterday, but was a bit late.
Changes:

support for WebSocket frames >125 bytes
fixed minor issue with timeout
updated readme

I'm not planning any major changes so it's safe to merge.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,337,2017-02-08T22:40:11Z,2017-02-11T19:51:38Z,2017-10-25T11:18:28Z,MERGED,True,383,0,6,https://github.com/UncleRus,MAX7219/MAX7221 dirver + example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/337,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/337,"MAX7219/MAX7221 - Serially Interfaced, 8-Digit LED Display Drivers.
Full support for 7-segment displays.
Basic support for other display types (8x8 matrix, 14-segment, bargraph).","MAX7219/MAX7221 - Serially Interfaced, 8-Digit LED Display Drivers.
Full support for 7-segment displays.
Basic support for other display types (8x8 matrix, 14-segment, bargraph).",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,339,2017-02-12T18:27:33Z,2017-02-21T19:44:04Z,2017-02-26T09:13:33Z,MERGED,True,173,0,6,https://github.com/Zaltora,CRC library,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/339,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/339,"Hi, i have finish the first release of my crc library based on many things found about CRC ( details in my repository). I post it as submodule because the code can be ported for other things.

This library can compute crc from 1 to 64 bit.
Every parameters of crc is present. (Poly,Init,RefIn,RefOut,XorOut )
Independent crc struct for multiple usage.
You can select algorithm you want use (4 at this moment. Thank to Sven Reifegerste original lib)
Sized functions ( 8bits, 16 bits, 32bits and 64 bits) for save RAM usage if needed.
Pre-generated  constant lookup table for many crc standard
Can generate  lookup table  for polynom multiple of 8bits ( 8,16,24,32,..)

It is the first release. Maybe some bugs are present for custom crc. Some code optimisation can be done too.  Someone got idea to add specific freertos headers to a config header ? i was thinking that library want  search a header in user application with a specific include like
#include ""config_crc_file.h""
and user need always create this files when he use the lib to specifies header dependant project and crc config options. Good idea ?
Optimised functions for specific crc not present. Custom hardware crc functions selection not present (not needed with esp8266). Other features like error management will be added later.","Hi, i have finish the first release of my crc library based on many things found about CRC ( details in my repository). I post it as submodule because the code can be ported for other things.

This library can compute crc from 1 to 64 bit.
Every parameters of crc is present. (Poly,Init,RefIn,RefOut,XorOut )
Independent crc struct for multiple usage.
You can select algorithm you want use (4 at this moment. Thank to Sven Reifegerste original lib)
Sized functions ( 8bits, 16 bits, 32bits and 64 bits) for save RAM usage if needed.
Pre-generated  constant lookup table for many crc standard
Can generate  lookup table  for polynom multiple of 8bits ( 8,16,24,32,..)

It is the first release. Maybe some bugs are present for custom crc. Some code optimisation can be done too.  Someone got idea to add specific freertos headers to a config header ? i was thinking that library want  search a header in user application with a specific include like
#include ""config_crc_file.h""
and user need always create this files when he use the lib to specifies header dependant project and crc config options. Good idea ?
Optimised functions for specific crc not present. Custom hardware crc functions selection not present (not needed with esp8266). Other features like error management will be added later.",True,"{'THUMBS_UP': ['https://github.com/sztanpet', 'https://github.com/Zaltora']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,339,2017-02-12T18:27:33Z,2017-02-21T19:44:04Z,2017-02-26T09:13:33Z,MERGED,True,173,0,6,https://github.com/Zaltora,CRC library,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/339,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/339#issuecomment-279333861,"Hi, i have finish the first release of my crc library based on many things found about CRC ( details in my repository). I post it as submodule because the code can be ported for other things.

This library can compute crc from 1 to 64 bit.
Every parameters of crc is present. (Poly,Init,RefIn,RefOut,XorOut )
Independent crc struct for multiple usage.
You can select algorithm you want use (4 at this moment. Thank to Sven Reifegerste original lib)
Sized functions ( 8bits, 16 bits, 32bits and 64 bits) for save RAM usage if needed.
Pre-generated  constant lookup table for many crc standard
Can generate  lookup table  for polynom multiple of 8bits ( 8,16,24,32,..)

It is the first release. Maybe some bugs are present for custom crc. Some code optimisation can be done too.  Someone got idea to add specific freertos headers to a config header ? i was thinking that library want  search a header in user application with a specific include like
#include ""config_crc_file.h""
and user need always create this files when he use the lib to specifies header dependant project and crc config options. Good idea ?
Optimised functions for specific crc not present. Custom hardware crc functions selection not present (not needed with esp8266). Other features like error management will be added later.","Very nice contribution, @Zaltora !

Good idea ?

Totally.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,339,2017-02-12T18:27:33Z,2017-02-21T19:44:04Z,2017-02-26T09:13:33Z,MERGED,True,173,0,6,https://github.com/Zaltora,CRC library,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/339,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/339#issuecomment-282540633,"Hi, i have finish the first release of my crc library based on many things found about CRC ( details in my repository). I post it as submodule because the code can be ported for other things.

This library can compute crc from 1 to 64 bit.
Every parameters of crc is present. (Poly,Init,RefIn,RefOut,XorOut )
Independent crc struct for multiple usage.
You can select algorithm you want use (4 at this moment. Thank to Sven Reifegerste original lib)
Sized functions ( 8bits, 16 bits, 32bits and 64 bits) for save RAM usage if needed.
Pre-generated  constant lookup table for many crc standard
Can generate  lookup table  for polynom multiple of 8bits ( 8,16,24,32,..)

It is the first release. Maybe some bugs are present for custom crc. Some code optimisation can be done too.  Someone got idea to add specific freertos headers to a config header ? i was thinking that library want  search a header in user application with a specific include like
#include ""config_crc_file.h""
and user need always create this files when he use the lib to specifies header dependant project and crc config options. Good idea ?
Optimised functions for specific crc not present. Custom hardware crc functions selection not present (not needed with esp8266). Other features like error management will be added later.","Hi, Can we reopen this branch ? i doing some update on current API and crc lib. I think this update need to be a part of this branch because it is do some fix ( specially on include )
Or i open a new one ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,339,2017-02-12T18:27:33Z,2017-02-21T19:44:04Z,2017-02-26T09:13:33Z,MERGED,True,173,0,6,https://github.com/Zaltora,CRC library,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/339,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/339#issuecomment-282543085,"Hi, i have finish the first release of my crc library based on many things found about CRC ( details in my repository). I post it as submodule because the code can be ported for other things.

This library can compute crc from 1 to 64 bit.
Every parameters of crc is present. (Poly,Init,RefIn,RefOut,XorOut )
Independent crc struct for multiple usage.
You can select algorithm you want use (4 at this moment. Thank to Sven Reifegerste original lib)
Sized functions ( 8bits, 16 bits, 32bits and 64 bits) for save RAM usage if needed.
Pre-generated  constant lookup table for many crc standard
Can generate  lookup table  for polynom multiple of 8bits ( 8,16,24,32,..)

It is the first release. Maybe some bugs are present for custom crc. Some code optimisation can be done too.  Someone got idea to add specific freertos headers to a config header ? i was thinking that library want  search a header in user application with a specific include like
#include ""config_crc_file.h""
and user need always create this files when he use the lib to specifies header dependant project and crc config options. Good idea ?
Optimised functions for specific crc not present. Custom hardware crc functions selection not present (not needed with esp8266). Other features like error management will be added later.",Just open the new one :),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,340,2017-02-13T02:28:49Z,2017-02-15T11:44:11Z,2017-02-15T11:44:11Z,MERGED,True,849,0,9,https://github.com/meriac,Add BearSSL extra,5,"['enhancement', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/340,https://github.com/meriac,1,https://github.com/SuperHouse/esp-open-rtos/pull/340,"Changes

Based on #284 by @stschake, resolved merge conflicts
Update subrepository to latest BearSSL version
Use full certificate chain verification
Add Let's-Encrypt root certificate (IdenTrust cross-signed) to support howsmyssl's trust anchor
Add workaround for missing date & time (use time of compilation for SSL for now as start date)
Add updated certificates for tls_server_bearssl example from BearSSL server example,
previous ones were expired
Verified both examples to work

Testing
Client verification
Example output on serial console at 115200 baud:
ESP-Open-SDK ver: 0.0.1 compiled @ Feb 13 2017 02:55:12
phy ver: 273, pp ver: 8.3

SDK version:0.9.9
mode : sta(a0:20:a6:00:ff:ab)
add if0
scandone
add 0
aid 3
cnt 

connected with OpenBeacon.org, channel 3
dhcp client start...
ip:10.254.1.247,mask:255.255.0.0,gw:10.254.0.1
Initializing BearSSL... done.
Connected
HTTP/1.1 200 OK
Content-Length: 1727
Access-Control-Allow-Origin: *
Connection: close
Content-Type: application/json
Date: Mon, 13 Feb 2017 03:05:39 GMT
Strict-Transport-Security: max-age=631138519; includeSubdomains; preload

{""given_cipher_suites"":[""TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"",""TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"",""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",""TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"",""TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"",""TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"",""TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"",""TLS_RSA_WITH_AES_128_GCM_SHA256"",""TLS_RSA_WITH_AES_256_GCM_SHA384"",""TLS_RSA_WITH_AES_128_CBC_SHA256"",""TLS_RSA_WITH_AES_256_CBC_SHA256"",""TLS_RSA_WITH_AES_128_CBC_SHA"",""TLS_RSA_WITH_AES_256_CBC_SHA"",""TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA"",""TLS_RSA_WITH_3DES_EDE_CBC_SHA""],""ephemeral_keys_supported"":true,""session_ticket_supported"":false,""tls_compression_supported"":false,""unknown_cipher_suite_supported"":false,""beast_vuln"":false,""able_to_detect_n_minus_one_splitting"":false,""insecure_cipher_suites"":{},""tls_version"":""TLS 1.2"",""rating"":""Improvable""}

free heap pre  = 12836
free heap post = 13128
successes = 1 failures = 0
10...
9...
8...
7...
6...
5...
4...
3...
2...
1...
0...
Starting again!

Server verification
Use OpenSSL s_client to verify connection on command line:
> openssl s_client -host 10.254.1.247 -port 800 -verify_hostname localhost
Example output on the terminal:
CONNECTED(00000003)
depth=0 C = CA, CN = localhost
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 C = CA, CN = localhost
verify error:num=21:unable to verify the first certificate
verify return:1
---
Certificate chain
 0 s:/C=CA/CN=localhost
   i:/C=CA/CN=Intermediate CA
 1 s:/C=CA/CN=Intermediate CA
   i:/C=CA/CN=Root
---
Server certificate
-----BEGIN CERTIFICATE-----
MIIDPDCCAiSgAwIBAgIUWNq6Ns3toNpcEDNzjgxkknmSrwMwDQYJKoZIhvcNAQEL
BQAwJzELMAkGA1UEBhMCQ0ExGDAWBgNVBAMTD0ludGVybWVkaWF0ZSBDQTAeFw0x
MDAxMDEwMDAwMDBaFw0zNzEyMzEyMzU5NTlaMCExCzAJBgNVBAYTAkNBMRIwEAYD
VQQDEwlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDU
eh0nuis6Z7KRavvng0TK7Rx1rd1Ng2LWqmiVsiQhexWuKploFe1m8LhY59P1LsbZ
Kl7nDi7n/GdZwMhhfUukb92f2ciFh2THuhoPKdSWqHiaa2IgqTLQ7qmMKGFHolAq
Y/Yh3trY1fB/xQCCcOajv1yJJ09RkncDw7DMLjvsI/IvU0GviZP/0oCxQ5fe1hmg
khJ6PWZ54cG84Xdwoos9RoRTP+ROQkE3kh4f/Tiz9++HOYDTVs/04BPeZLBypAOE
xEHtb/o+4soEINLX3CyCK3ribaEcSNvPiU80lz0oqFPa58HhcxWjMHZ/jyNCFD1R
NNJarTyby8j+f26OQPO9AgMBAAGjZjBkMB8GA1UdIwQYMBaAFMUBrXzmY8mcF1/F
oqfhUF/o9ajGMB0GA1UdDgQWBBTFAa185mPJnBdfxaKn4VBf6PWoxjAMBgNVHRMB
Af8EAjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDANBgkqhkiG9w0BAQsFAAOCAQEA
cbNdIcIO19DG+Epzh00iAifQx/j9Gm1iWIIIdiAHwEiS8+mYWusNTlaVY2hNq9QA
duA3zwsRYVlc3valFFnZJZ9Z2dNehqwdpiwyQhkyE0ALVM1nJra9tJakyh9/N9ao
des6gVEwuflKAW/R1u1P3z8wYAZnko5hhV8atYyzD2Gp+t9dxGQA6oexM199y6OF
JG4sZTvqcz+G0/3o5ALGYWomF1IBJVx/qM5pH6xhLLcEr/2kepnLJhVM/3TUcwxX
DCbr1yrcXMNBu8Lzzha9jnv76d+rIQ2Rs43Yz8j0SbnQ4xZwP7Pe1Acl+kZEUolN
icjiyrUzf8chvSjv/mZ0Aw==
-----END CERTIFICATE-----
subject=/C=CA/CN=localhost
issuer=/C=CA/CN=Intermediate CA
---
No client certificate CA names sent
Peer signing digest: SHA256
Server Temp Key: ECDH, P-256, 256 bits
---
SSL handshake has read 2143 bytes and written 327 bytes
---
New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-RSA-AES256-GCM-SHA384
    Session-ID: EF82CE24AE7A7C8ED88A98A38F395136F997C9A0C41D7A43D19330B54CA0840F
    Session-ID-ctx: 
    Master-Key: E269116E9FE6F12862FE2C6A45C9D48BFC2B426367A9604B0329660543E5439DCE5E850FCEB0EE53C7ECBF646CDF1F00
    Key-Arg   : None
    Krb5 Principal: None
    PSK identity: None
    PSK identity hint: None
    Start Time: 1486951219
    Timeout   : 300 (sec)
    Verify return code: 21 (unable to verify the first certificate)
---
O hai, client 10.254.0.8:52404
Free heap size is 16676 bytes
closed","Changes

Based on #284 by @stschake, resolved merge conflicts
Update subrepository to latest BearSSL version
Use full certificate chain verification
Add Let's-Encrypt root certificate (IdenTrust cross-signed) to support howsmyssl's trust anchor
Add workaround for missing date & time (use time of compilation for SSL for now as start date)
Add updated certificates for tls_server_bearssl example from BearSSL server example,
previous ones were expired
Verified both examples to work

Testing
Client verification
Example output on serial console at 115200 baud:
ESP-Open-SDK ver: 0.0.1 compiled @ Feb 13 2017 02:55:12
phy ver: 273, pp ver: 8.3

SDK version:0.9.9
mode : sta(a0:20:a6:00:ff:ab)
add if0
scandone
add 0
aid 3
cnt 

connected with OpenBeacon.org, channel 3
dhcp client start...
ip:10.254.1.247,mask:255.255.0.0,gw:10.254.0.1
Initializing BearSSL... done.
Connected
HTTP/1.1 200 OK
Content-Length: 1727
Access-Control-Allow-Origin: *
Connection: close
Content-Type: application/json
Date: Mon, 13 Feb 2017 03:05:39 GMT
Strict-Transport-Security: max-age=631138519; includeSubdomains; preload

{""given_cipher_suites"":[""TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"",""TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"",""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",""TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"",""TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"",""TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"",""TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"",""TLS_RSA_WITH_AES_128_GCM_SHA256"",""TLS_RSA_WITH_AES_256_GCM_SHA384"",""TLS_RSA_WITH_AES_128_CBC_SHA256"",""TLS_RSA_WITH_AES_256_CBC_SHA256"",""TLS_RSA_WITH_AES_128_CBC_SHA"",""TLS_RSA_WITH_AES_256_CBC_SHA"",""TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA"",""TLS_RSA_WITH_3DES_EDE_CBC_SHA""],""ephemeral_keys_supported"":true,""session_ticket_supported"":false,""tls_compression_supported"":false,""unknown_cipher_suite_supported"":false,""beast_vuln"":false,""able_to_detect_n_minus_one_splitting"":false,""insecure_cipher_suites"":{},""tls_version"":""TLS 1.2"",""rating"":""Improvable""}

free heap pre  = 12836
free heap post = 13128
successes = 1 failures = 0
10...
9...
8...
7...
6...
5...
4...
3...
2...
1...
0...
Starting again!

Server verification
Use OpenSSL s_client to verify connection on command line:
> openssl s_client -host 10.254.1.247 -port 800 -verify_hostname localhost
Example output on the terminal:
CONNECTED(00000003)
depth=0 C = CA, CN = localhost
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 C = CA, CN = localhost
verify error:num=21:unable to verify the first certificate
verify return:1
---
Certificate chain
 0 s:/C=CA/CN=localhost
   i:/C=CA/CN=Intermediate CA
 1 s:/C=CA/CN=Intermediate CA
   i:/C=CA/CN=Root
---
Server certificate
-----BEGIN CERTIFICATE-----
MIIDPDCCAiSgAwIBAgIUWNq6Ns3toNpcEDNzjgxkknmSrwMwDQYJKoZIhvcNAQEL
BQAwJzELMAkGA1UEBhMCQ0ExGDAWBgNVBAMTD0ludGVybWVkaWF0ZSBDQTAeFw0x
MDAxMDEwMDAwMDBaFw0zNzEyMzEyMzU5NTlaMCExCzAJBgNVBAYTAkNBMRIwEAYD
VQQDEwlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDU
eh0nuis6Z7KRavvng0TK7Rx1rd1Ng2LWqmiVsiQhexWuKploFe1m8LhY59P1LsbZ
Kl7nDi7n/GdZwMhhfUukb92f2ciFh2THuhoPKdSWqHiaa2IgqTLQ7qmMKGFHolAq
Y/Yh3trY1fB/xQCCcOajv1yJJ09RkncDw7DMLjvsI/IvU0GviZP/0oCxQ5fe1hmg
khJ6PWZ54cG84Xdwoos9RoRTP+ROQkE3kh4f/Tiz9++HOYDTVs/04BPeZLBypAOE
xEHtb/o+4soEINLX3CyCK3ribaEcSNvPiU80lz0oqFPa58HhcxWjMHZ/jyNCFD1R
NNJarTyby8j+f26OQPO9AgMBAAGjZjBkMB8GA1UdIwQYMBaAFMUBrXzmY8mcF1/F
oqfhUF/o9ajGMB0GA1UdDgQWBBTFAa185mPJnBdfxaKn4VBf6PWoxjAMBgNVHRMB
Af8EAjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDANBgkqhkiG9w0BAQsFAAOCAQEA
cbNdIcIO19DG+Epzh00iAifQx/j9Gm1iWIIIdiAHwEiS8+mYWusNTlaVY2hNq9QA
duA3zwsRYVlc3valFFnZJZ9Z2dNehqwdpiwyQhkyE0ALVM1nJra9tJakyh9/N9ao
des6gVEwuflKAW/R1u1P3z8wYAZnko5hhV8atYyzD2Gp+t9dxGQA6oexM199y6OF
JG4sZTvqcz+G0/3o5ALGYWomF1IBJVx/qM5pH6xhLLcEr/2kepnLJhVM/3TUcwxX
DCbr1yrcXMNBu8Lzzha9jnv76d+rIQ2Rs43Yz8j0SbnQ4xZwP7Pe1Acl+kZEUolN
icjiyrUzf8chvSjv/mZ0Aw==
-----END CERTIFICATE-----
subject=/C=CA/CN=localhost
issuer=/C=CA/CN=Intermediate CA
---
No client certificate CA names sent
Peer signing digest: SHA256
Server Temp Key: ECDH, P-256, 256 bits
---
SSL handshake has read 2143 bytes and written 327 bytes
---
New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-RSA-AES256-GCM-SHA384
    Session-ID: EF82CE24AE7A7C8ED88A98A38F395136F997C9A0C41D7A43D19330B54CA0840F
    Session-ID-ctx: 
    Master-Key: E269116E9FE6F12862FE2C6A45C9D48BFC2B426367A9604B0329660543E5439DCE5E850FCEB0EE53C7ECBF646CDF1F00
    Key-Arg   : None
    Krb5 Principal: None
    PSK identity: None
    PSK identity hint: None
    Start Time: 1486951219
    Timeout   : 300 (sec)
    Verify return code: 21 (unable to verify the first certificate)
---
O hai, client 10.254.0.8:52404
Free heap size is 16676 bytes
closed",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,340,2017-02-13T02:28:49Z,2017-02-15T11:44:11Z,2017-02-15T11:44:11Z,MERGED,True,849,0,9,https://github.com/meriac,Add BearSSL extra,5,"['enhancement', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/340,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/340#issuecomment-279333236,"Changes

Based on #284 by @stschake, resolved merge conflicts
Update subrepository to latest BearSSL version
Use full certificate chain verification
Add Let's-Encrypt root certificate (IdenTrust cross-signed) to support howsmyssl's trust anchor
Add workaround for missing date & time (use time of compilation for SSL for now as start date)
Add updated certificates for tls_server_bearssl example from BearSSL server example,
previous ones were expired
Verified both examples to work

Testing
Client verification
Example output on serial console at 115200 baud:
ESP-Open-SDK ver: 0.0.1 compiled @ Feb 13 2017 02:55:12
phy ver: 273, pp ver: 8.3

SDK version:0.9.9
mode : sta(a0:20:a6:00:ff:ab)
add if0
scandone
add 0
aid 3
cnt 

connected with OpenBeacon.org, channel 3
dhcp client start...
ip:10.254.1.247,mask:255.255.0.0,gw:10.254.0.1
Initializing BearSSL... done.
Connected
HTTP/1.1 200 OK
Content-Length: 1727
Access-Control-Allow-Origin: *
Connection: close
Content-Type: application/json
Date: Mon, 13 Feb 2017 03:05:39 GMT
Strict-Transport-Security: max-age=631138519; includeSubdomains; preload

{""given_cipher_suites"":[""TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"",""TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"",""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",""TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"",""TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"",""TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"",""TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"",""TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"",""TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"",""TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"",""TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"",""TLS_RSA_WITH_AES_128_GCM_SHA256"",""TLS_RSA_WITH_AES_256_GCM_SHA384"",""TLS_RSA_WITH_AES_128_CBC_SHA256"",""TLS_RSA_WITH_AES_256_CBC_SHA256"",""TLS_RSA_WITH_AES_128_CBC_SHA"",""TLS_RSA_WITH_AES_256_CBC_SHA"",""TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA"",""TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA"",""TLS_RSA_WITH_3DES_EDE_CBC_SHA""],""ephemeral_keys_supported"":true,""session_ticket_supported"":false,""tls_compression_supported"":false,""unknown_cipher_suite_supported"":false,""beast_vuln"":false,""able_to_detect_n_minus_one_splitting"":false,""insecure_cipher_suites"":{},""tls_version"":""TLS 1.2"",""rating"":""Improvable""}

free heap pre  = 12836
free heap post = 13128
successes = 1 failures = 0
10...
9...
8...
7...
6...
5...
4...
3...
2...
1...
0...
Starting again!

Server verification
Use OpenSSL s_client to verify connection on command line:
> openssl s_client -host 10.254.1.247 -port 800 -verify_hostname localhost
Example output on the terminal:
CONNECTED(00000003)
depth=0 C = CA, CN = localhost
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 C = CA, CN = localhost
verify error:num=21:unable to verify the first certificate
verify return:1
---
Certificate chain
 0 s:/C=CA/CN=localhost
   i:/C=CA/CN=Intermediate CA
 1 s:/C=CA/CN=Intermediate CA
   i:/C=CA/CN=Root
---
Server certificate
-----BEGIN CERTIFICATE-----
MIIDPDCCAiSgAwIBAgIUWNq6Ns3toNpcEDNzjgxkknmSrwMwDQYJKoZIhvcNAQEL
BQAwJzELMAkGA1UEBhMCQ0ExGDAWBgNVBAMTD0ludGVybWVkaWF0ZSBDQTAeFw0x
MDAxMDEwMDAwMDBaFw0zNzEyMzEyMzU5NTlaMCExCzAJBgNVBAYTAkNBMRIwEAYD
VQQDEwlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDU
eh0nuis6Z7KRavvng0TK7Rx1rd1Ng2LWqmiVsiQhexWuKploFe1m8LhY59P1LsbZ
Kl7nDi7n/GdZwMhhfUukb92f2ciFh2THuhoPKdSWqHiaa2IgqTLQ7qmMKGFHolAq
Y/Yh3trY1fB/xQCCcOajv1yJJ09RkncDw7DMLjvsI/IvU0GviZP/0oCxQ5fe1hmg
khJ6PWZ54cG84Xdwoos9RoRTP+ROQkE3kh4f/Tiz9++HOYDTVs/04BPeZLBypAOE
xEHtb/o+4soEINLX3CyCK3ribaEcSNvPiU80lz0oqFPa58HhcxWjMHZ/jyNCFD1R
NNJarTyby8j+f26OQPO9AgMBAAGjZjBkMB8GA1UdIwQYMBaAFMUBrXzmY8mcF1/F
oqfhUF/o9ajGMB0GA1UdDgQWBBTFAa185mPJnBdfxaKn4VBf6PWoxjAMBgNVHRMB
Af8EAjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDANBgkqhkiG9w0BAQsFAAOCAQEA
cbNdIcIO19DG+Epzh00iAifQx/j9Gm1iWIIIdiAHwEiS8+mYWusNTlaVY2hNq9QA
duA3zwsRYVlc3valFFnZJZ9Z2dNehqwdpiwyQhkyE0ALVM1nJra9tJakyh9/N9ao
des6gVEwuflKAW/R1u1P3z8wYAZnko5hhV8atYyzD2Gp+t9dxGQA6oexM199y6OF
JG4sZTvqcz+G0/3o5ALGYWomF1IBJVx/qM5pH6xhLLcEr/2kepnLJhVM/3TUcwxX
DCbr1yrcXMNBu8Lzzha9jnv76d+rIQ2Rs43Yz8j0SbnQ4xZwP7Pe1Acl+kZEUolN
icjiyrUzf8chvSjv/mZ0Aw==
-----END CERTIFICATE-----
subject=/C=CA/CN=localhost
issuer=/C=CA/CN=Intermediate CA
---
No client certificate CA names sent
Peer signing digest: SHA256
Server Temp Key: ECDH, P-256, 256 bits
---
SSL handshake has read 2143 bytes and written 327 bytes
---
New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-RSA-AES256-GCM-SHA384
    Session-ID: EF82CE24AE7A7C8ED88A98A38F395136F997C9A0C41D7A43D19330B54CA0840F
    Session-ID-ctx: 
    Master-Key: E269116E9FE6F12862FE2C6A45C9D48BFC2B426367A9604B0329660543E5439DCE5E850FCEB0EE53C7ECBF646CDF1F00
    Key-Arg   : None
    Krb5 Principal: None
    PSK identity: None
    PSK identity hint: None
    Start Time: 1486951219
    Timeout   : 300 (sec)
    Verify return code: 21 (unable to verify the first certificate)
---
O hai, client 10.254.0.8:52404
Free heap size is 16676 bytes
closed","Thank you, nice contribution!
As @sheinz already said in #284 it's always good to have options to choose from :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,343,2017-02-20T19:32:49Z,2017-02-21T16:30:34Z,2017-02-21T16:30:34Z,MERGED,True,6,0,2,https://github.com/kanflo,Added sdk_system_get_netif,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/343,https://github.com/kanflo,1,https://github.com/SuperHouse/esp-open-rtos/pull/343,I started playing with multicast and following this tread I realized the netif struct needed to be exported from user_interface.c. There was a static function _get_netif that I exported as sdk_system_get_netif (to follow the naming standard of user_interface.c) . A function prototype is available in esp_system.h.,I started playing with multicast and following this tread I realized the netif struct needed to be exported from user_interface.c. There was a static function _get_netif that I exported as sdk_system_get_netif (to follow the naming standard of user_interface.c) . A function prototype is available in esp_system.h.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,347,2017-02-26T14:47:26Z,2017-02-27T16:35:57Z,2017-02-27T16:35:57Z,MERGED,True,44,22,3,https://github.com/Zaltora,Crc fix and update,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/347,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/347,"Update API.
Fix include system.
Add example to submodule.","Update API.
Fix include system.
Add example to submodule.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,348,2017-03-08T03:49:50Z,2017-04-25T14:00:10Z,2017-11-17T01:45:38Z,MERGED,True,858,0,3,https://github.com/mjahamel,Feature/mdnsresponder,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/348,https://github.com/mjahamel,1,https://github.com/SuperHouse/esp-open-rtos/pull/348,"This is a basic multicast DNS responder which should be useful for locating ESP-based devices on the local LAN that have been assigned addresses by a DHCP server.
Limitations/bugs: it only advertises a single service on a single port, and it understands compressed DNS queries but does not generate them.","This is a basic multicast DNS responder which should be useful for locating ESP-based devices on the local LAN that have been assigned addresses by a DHCP server.
Limitations/bugs: it only advertises a single service on a single port, and it understands compressed DNS queries but does not generate them.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,348,2017-03-08T03:49:50Z,2017-04-25T14:00:10Z,2017-11-17T01:45:38Z,MERGED,True,858,0,3,https://github.com/mjahamel,Feature/mdnsresponder,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/348,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/348#issuecomment-286641687,"This is a basic multicast DNS responder which should be useful for locating ESP-based devices on the local LAN that have been assigned addresses by a DHCP server.
Limitations/bugs: it only advertises a single service on a single port, and it understands compressed DNS queries but does not generate them.","Nice contribution, thank you!
It would be great if you'll add example app.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,350,2017-03-14T19:40:31Z,2017-03-15T04:58:29Z,2017-03-15T07:59:41Z,MERGED,True,2,4,1,https://github.com/funnydog,extras/sntp: fix an off-by-one bug in sntp_set_servers(),1,[],https://github.com/SuperHouse/esp-open-rtos/pull/350,https://github.com/funnydog,1,https://github.com/SuperHouse/esp-open-rtos/pull/350,"The function sntp_set_servers() duplicates the strings supplied in the
server_url[] array into new strings but forgets to allocate the extra
byte needed for the \0 terminator for each string.
Fix the problem by using strdup(), which allocates the right amount of
memory and copies the string at once.

I also wonder why it's allocating heap space instead of just copying the pointers, which seems more efficient to me.","The function sntp_set_servers() duplicates the strings supplied in the
server_url[] array into new strings but forgets to allocate the extra
byte needed for the \0 terminator for each string.
Fix the problem by using strdup(), which allocates the right amount of
memory and copies the string at once.

I also wonder why it's allocating heap space instead of just copying the pointers, which seems more efficient to me.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,352,2017-03-15T12:43:08Z,2017-03-15T13:18:32Z,2017-04-20T06:47:50Z,MERGED,True,44,28,1,https://github.com/UncleRus,Fixed error of writing to SPI registers with memcpy,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/352,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/352,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,352,2017-03-15T12:43:08Z,2017-03-15T13:18:32Z,2017-04-20T06:47:50Z,MERGED,True,44,28,1,https://github.com/UncleRus,Fixed error of writing to SPI registers with memcpy,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/352,https://github.com/jkent,2,https://github.com/SuperHouse/esp-open-rtos/pull/352#issuecomment-288288585,,"This seems to have broken 16-bit transfers and I'm guessing 32-bit transfers as well.  spi_transfer_16(1, 0x8000) on scope results in 0x8080.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,352,2017-03-15T12:43:08Z,2017-03-15T13:18:32Z,2017-04-20T06:47:50Z,MERGED,True,44,28,1,https://github.com/UncleRus,Fixed error of writing to SPI registers with memcpy,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/352,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/352#issuecomment-288306778,,"I reverted this commit, but without it we have another issue.
Seems memcpy() incorrectly working when copying 3 bytes to hardware registers.
May be this is related with unaligned read from SPI flash.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,352,2017-03-15T12:43:08Z,2017-03-15T13:18:32Z,2017-04-20T06:47:50Z,MERGED,True,44,28,1,https://github.com/UncleRus,Fixed error of writing to SPI registers with memcpy,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/352,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/352#issuecomment-294292026,,"Where does this leave the state of the code, and any ideas on how to move forward?
The older aligned memcpy versions appear to use word sizes operations and also a memw after each access to the spi buffer. Are either or both needed, and would that resolve the problem? Would the fix be to bring back memcpy_unaligned_src and memcpy_unaligned_dst and add them to the core code now?
Looking at the code, in spi_transfer there is a call to _rearm_extras_bit in the following that looks like dead code and might this point to a problem too?
    for (size_t i = 0; i < blocks; i++)
    {
        size_t offset = i * _SPI_BUF_SIZE;
        _spi_buf_transfer(bus, (const uint8_t *)out_data + offset,
            in_data ? (uint8_t *)in_data + offset : NULL, buf_size, e, word_size);
        if (blocks) _rearm_extras_bit(bus, false);
    }",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,352,2017-03-15T12:43:08Z,2017-03-15T13:18:32Z,2017-04-20T06:47:50Z,MERGED,True,44,28,1,https://github.com/UncleRus,Fixed error of writing to SPI registers with memcpy,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/352,https://github.com/UncleRus,5,https://github.com/SuperHouse/esp-open-rtos/pull/352#issuecomment-295392400,,"This is a very strange bug in memcpy(): when copying three (exactly three!) bytes into the register area, for example SPI(1).W, the third byte is repeated three times:
const uint8_t data[] = {
	0x01, 0x02, 0x03
};
const size_t data_size = sizeof(data);
...
memset((void *)SPI(BUS).W, 0, sizeof(SPI(BUS).W));
dump(""ZERO"", (uint8_t *)SPI(BUS).W, data_size);
memcpy((void *)SPI(BUS).W, data, data_size);
dump(""SRC"", data, data_size);
dump(""DST"", (uint8_t *)SPI(BUS).W, data_size);
Output:
ZERO: 0x00 0x00 0x00 
SRC:  0x01 0x02 0x03 
DST:  0x03 0x03 0x03 

4 bytes output:
ZERO: 0x00 0x00 0x00 0x00
SRC:  0x01 0x02 0x03 0x04
DST:  0x01 0x02 0x03 0x04

Just tried memw before and/or after copying bytes, and nothing changes.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,352,2017-03-15T12:43:08Z,2017-03-15T13:18:32Z,2017-04-20T06:47:50Z,MERGED,True,44,28,1,https://github.com/UncleRus,Fixed error of writing to SPI registers with memcpy,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/352,https://github.com/pfalcon,6,https://github.com/SuperHouse/esp-open-rtos/pull/352#issuecomment-295399969,,"I believe that all esp8266 registers are 32-bit and require aligned access, i.e. using memcpy() to write (or read) anything to a register isn't correct as it doesn't provide such guarantees.",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,352,2017-03-15T12:43:08Z,2017-03-15T13:18:32Z,2017-04-20T06:47:50Z,MERGED,True,44,28,1,https://github.com/UncleRus,Fixed error of writing to SPI registers with memcpy,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/352,https://github.com/vlad-ivanov-name,7,https://github.com/SuperHouse/esp-open-rtos/pull/352#issuecomment-295600283,,"Most likely SPI registers don't process ""byte enable"" signal of system bus (AHB?) at all, therefore, subsequent byte writes still write the full 32 bit word which contains remains of a previous transaction.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,353,2017-03-15T16:10:31Z,2017-03-15T20:26:03Z,2017-10-25T11:21:48Z,MERGED,True,417,334,3,https://github.com/UncleRus,Update FatFS to R0.12c,1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/353,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/353,"Improved write throughput at the fragmented file on the exFAT volume.
Made memory usage for exFAT be able to be reduced as decreasing _MAX_LFN.
Fixed successive f_getfree() can return wrong count on the FAT12/16 volume. (appeared at R0.12)
Fixed configuration option _VOLUMES cannot be set 10. (appeared at R0.10c)","Improved write throughput at the fragmented file on the exFAT volume.
Made memory usage for exFAT be able to be reduced as decreasing _MAX_LFN.
Fixed successive f_getfree() can return wrong count on the FAT12/16 volume. (appeared at R0.12)
Fixed configuration option _VOLUMES cannot be set 10. (appeared at R0.10c)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,355,2017-03-20T20:03:04Z,2017-03-20T20:50:59Z,2017-03-20T20:51:33Z,MERGED,True,71,2,4,https://github.com/andrewclink,Give FreeRTOS Hooks weak linkage,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/355,https://github.com/andrewclink,1,https://github.com/SuperHouse/esp-open-rtos/pull/355,"Sometimes it's nice to have access to the FreeRTOS tick and idle hooks. This pull request enables that by allowing user code to override the default implementations provided in app_main.c.
To use this, include a file in your project called FreeRTOSConfig.h with (at least) the contents shown in the example. You may need to make clean to cause FreeRTOS to be rebuilt. Overrides for vApplicationIdleHook and vApplicationTickHook can now be provided.
One Caveat with this pull request specifically is that I do not yet fully understand the sleep functions provided in the SDK. I believe that if WIFI_SLEEP_LIGHT is passed in the idle hook, the wifi radio will sleep if connected (or the call will fail if not connected). Either way, the call is noisy and that makes timing and whether the sleep call is working at all difficult to discern. If it's easier to just pull out the example that's fine too.","Sometimes it's nice to have access to the FreeRTOS tick and idle hooks. This pull request enables that by allowing user code to override the default implementations provided in app_main.c.
To use this, include a file in your project called FreeRTOSConfig.h with (at least) the contents shown in the example. You may need to make clean to cause FreeRTOS to be rebuilt. Overrides for vApplicationIdleHook and vApplicationTickHook can now be provided.
One Caveat with this pull request specifically is that I do not yet fully understand the sleep functions provided in the SDK. I believe that if WIFI_SLEEP_LIGHT is passed in the idle hook, the wifi radio will sleep if connected (or the call will fail if not connected). Either way, the call is noisy and that makes timing and whether the sleep call is working at all difficult to discern. If it's easier to just pull out the example that's fine too.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,355,2017-03-20T20:03:04Z,2017-03-20T20:50:59Z,2017-03-20T20:51:33Z,MERGED,True,71,2,4,https://github.com/andrewclink,Give FreeRTOS Hooks weak linkage,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/355,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/355#issuecomment-287893845,"Sometimes it's nice to have access to the FreeRTOS tick and idle hooks. This pull request enables that by allowing user code to override the default implementations provided in app_main.c.
To use this, include a file in your project called FreeRTOSConfig.h with (at least) the contents shown in the example. You may need to make clean to cause FreeRTOS to be rebuilt. Overrides for vApplicationIdleHook and vApplicationTickHook can now be provided.
One Caveat with this pull request specifically is that I do not yet fully understand the sleep functions provided in the SDK. I believe that if WIFI_SLEEP_LIGHT is passed in the idle hook, the wifi radio will sleep if connected (or the call will fail if not connected). Either way, the call is noisy and that makes timing and whether the sleep call is working at all difficult to discern. If it's easier to just pull out the example that's fine too.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,356,2017-03-21T15:59:33Z,2017-03-21T19:09:18Z,2017-03-22T02:01:15Z,MERGED,True,291,2,6,https://github.com/bschwind,Add a TSL4531 driver and example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/356,https://github.com/bschwind,1,https://github.com/SuperHouse/esp-open-rtos/pull/356,"Hey I'm back again with another light sensor driver, this time the TSL4531.
TSL4531 Light Sensor
It uses the I2C module from the extras directory of this project.
This driver supports setting an integration time from the presets of (100ms, 200ms, and 400ms), as well as a ""skip power save"" mode which just comes straight from the data sheet. I played around with the ""skip power save"" mode a bit but didn't see any noticeable differences. Perhaps it draws less current but I'm not sure at the moment.
The driver uses vTaskDelay when the lux value is requested from the sensor so it has time to integrate the sensors and get a reading. The sensor remains in a ""powered down"" mode when not in use.
The cool thing about this sensor is it calculates the lux onboard so we can get it straight from the I2C bus. Very convenient, and takes up very little space.","Hey I'm back again with another light sensor driver, this time the TSL4531.
TSL4531 Light Sensor
It uses the I2C module from the extras directory of this project.
This driver supports setting an integration time from the presets of (100ms, 200ms, and 400ms), as well as a ""skip power save"" mode which just comes straight from the data sheet. I played around with the ""skip power save"" mode a bit but didn't see any noticeable differences. Perhaps it draws less current but I'm not sure at the moment.
The driver uses vTaskDelay when the lux value is requested from the sensor so it has time to integrate the sensors and get a reading. The sensor remains in a ""powered down"" mode when not in use.
The cool thing about this sensor is it calculates the lux onboard so we can get it straight from the I2C bus. Very convenient, and takes up very little space.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,356,2017-03-21T15:59:33Z,2017-03-21T19:09:18Z,2017-03-22T02:01:15Z,MERGED,True,291,2,6,https://github.com/bschwind,Add a TSL4531 driver and example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/356,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/356#issuecomment-288176157,"Hey I'm back again with another light sensor driver, this time the TSL4531.
TSL4531 Light Sensor
It uses the I2C module from the extras directory of this project.
This driver supports setting an integration time from the presets of (100ms, 200ms, and 400ms), as well as a ""skip power save"" mode which just comes straight from the data sheet. I played around with the ""skip power save"" mode a bit but didn't see any noticeable differences. Perhaps it draws less current but I'm not sure at the moment.
The driver uses vTaskDelay when the lux value is requested from the sensor so it has time to integrate the sensors and get a reading. The sensor remains in a ""powered down"" mode when not in use.
The cool thing about this sensor is it calculates the lux onboard so we can get it straight from the I2C bus. Very convenient, and takes up very little space.","Hi!
You need to refactor your code according to #321",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,358,2017-03-23T13:35:51Z,,2017-04-01T00:21:18Z,OPEN,False,2,2,1,https://github.com/hugows,"Use WEB_PORT define instead of hardcoded ""80"" string",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/358,https://github.com/hugows,1,https://github.com/SuperHouse/esp-open-rtos/pull/358,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,358,2017-03-23T13:35:51Z,,2017-04-01T00:21:18Z,OPEN,False,2,2,1,https://github.com/hugows,"Use WEB_PORT define instead of hardcoded ""80"" string",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/358,https://github.com/vlad-ivanov-name,2,https://github.com/SuperHouse/esp-open-rtos/pull/358#issuecomment-290790434,,@UncleRus could you please take a look at this?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,358,2017-03-23T13:35:51Z,,2017-04-01T00:21:18Z,OPEN,False,2,2,1,https://github.com/hugows,"Use WEB_PORT define instead of hardcoded ""80"" string",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/358,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/358#issuecomment-290877707,,Agreed with @ourairquality.,True,{'THUMBS_UP': ['https://github.com/kanflo']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,369,2017-04-19T20:54:17Z,2017-04-26T12:24:36Z,2017-10-25T11:14:24Z,MERGED,True,18,4,1,https://github.com/UncleRus,Fixes unaligned writes to SPI data register,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/369,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/369,"Seems it's OK to use memcpy() for unaligned read or aligned write to the register area, but we need a special method for unaligned writes.
See #352.","Seems it's OK to use memcpy() for unaligned read or aligned write to the register area, but we need a special method for unaligned writes.
See #352.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,369,2017-04-19T20:54:17Z,2017-04-26T12:24:36Z,2017-10-25T11:14:24Z,MERGED,True,18,4,1,https://github.com/UncleRus,Fixes unaligned writes to SPI data register,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/369,https://github.com/faryon93,2,https://github.com/SuperHouse/esp-open-rtos/pull/369#issuecomment-296437396,"Seems it's OK to use memcpy() for unaligned read or aligned write to the register area, but we need a special method for unaligned writes.
See #352.",+1 you saved my day! :),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,369,2017-04-19T20:54:17Z,2017-04-26T12:24:36Z,2017-10-25T11:14:24Z,MERGED,True,18,4,1,https://github.com/UncleRus,Fixes unaligned writes to SPI data register,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/369,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/369#issuecomment-297038318,"Seems it's OK to use memcpy() for unaligned read or aligned write to the register area, but we need a special method for unaligned writes.
See #352.",Going to merge it,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,370,2017-04-21T12:55:03Z,2017-04-25T13:57:44Z,2017-10-25T11:21:48Z,MERGED,True,23,16,3,https://github.com/UncleRus,Fix for counter overflow in delays based on sdk_system_get_time(),1,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/370,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/370,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,372,2017-04-25T17:00:33Z,2017-05-09T22:31:56Z,2017-05-09T22:31:56Z,MERGED,True,109,0,5,https://github.com/panoti,8-bit digital-to-analog conversion PCF8591 library,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/372,https://github.com/panoti,1,https://github.com/SuperHouse/esp-open-rtos/pull/372,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,372,2017-04-25T17:00:33Z,2017-05-09T22:31:56Z,2017-05-09T22:31:56Z,MERGED,True,109,0,5,https://github.com/panoti,8-bit digital-to-analog conversion PCF8591 library,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/372,https://github.com/panoti,2,https://github.com/SuperHouse/esp-open-rtos/pull/372#issuecomment-297105617,,"I have to change ""i2c_delay"" by ""sdk_os_delay_us(10)"" for working. Maybe pcf8591 can not work with high frequency.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,372,2017-04-25T17:00:33Z,2017-05-09T22:31:56Z,2017-05-09T22:31:56Z,MERGED,True,109,0,5,https://github.com/panoti,8-bit digital-to-analog conversion PCF8591 library,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/372,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/372#issuecomment-297331795,,"Yes, see  datasheet. max frequency is 100kHz.
try change
#define I2C_FREQUENCY_400K true // for test WIP
to
#define I2C_FREQUENCY_100K true // for test WIP
in i2c.h line 39",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,372,2017-04-25T17:00:33Z,2017-05-09T22:31:56Z,2017-05-09T22:31:56Z,MERGED,True,109,0,5,https://github.com/panoti,8-bit digital-to-analog conversion PCF8591 library,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/372,https://github.com/panoti,4,https://github.com/SuperHouse/esp-open-rtos/pull/372#issuecomment-297383805,,"Change into ""#define I2C_FREQUENCY_100K true"" may be equivalent with ""#define I2C_FREQUENCY_400K false"" which I have commented in my code. I also changed it but my program still catch some read errors (just a while). So, I use sdk_os_delay_us(10) instead. Are you sure this code
#define I2C_CUSTOM_DELAY_160MHZ   100
#define I2C_CUSTOM_DELAY_80MHZ    20

is equivalent with sdk_os_delay_us(10)?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,372,2017-04-25T17:00:33Z,2017-05-09T22:31:56Z,2017-05-09T22:31:56Z,MERGED,True,109,0,5,https://github.com/panoti,8-bit digital-to-analog conversion PCF8591 library,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/372,https://github.com/Zaltora,5,https://github.com/SuperHouse/esp-open-rtos/pull/372#issuecomment-297398463,,"No, is not equivalent. With 10us delay, you are at 50kHz  ( 20us per period)
The goal was to reproduce as most as possible i2c clock with 100kHz. But it can be faster (clock signal are not perfect). Maybe that why is not working
You can try to increase them by adding a new parameter 50KHZ and test:
#define I2C_CUSTOM_DELAY_160MHZ   200
#define I2C_CUSTOM_DELAY_80MHZ    40

If you get oscilloscope, you can adjust them.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,372,2017-04-25T17:00:33Z,2017-05-09T22:31:56Z,2017-05-09T22:31:56Z,MERGED,True,109,0,5,https://github.com/panoti,8-bit digital-to-analog conversion PCF8591 library,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/372,https://github.com/panoti,6,https://github.com/SuperHouse/esp-open-rtos/pull/372#issuecomment-297405813,,Great! It worked correctly. So can this branch be merge? I think frequency adjusting should have been done by each user. I just add new lib and example without editing anything in i2c lib.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,372,2017-04-25T17:00:33Z,2017-05-09T22:31:56Z,2017-05-09T22:31:56Z,MERGED,True,109,0,5,https://github.com/panoti,8-bit digital-to-analog conversion PCF8591 library,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/372,https://github.com/Zaltora,7,https://github.com/SuperHouse/esp-open-rtos/pull/372#issuecomment-297461369,,Yes it can be merge.  frequency system and measures for i2c can be done in an other PR,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,377,2017-05-05T15:53:06Z,,2017-05-09T22:31:10Z,OPEN,False,1,1,1,https://github.com/briantilley,add USER_LIBS to common.mk,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/377,https://github.com/briantilley,1,https://github.com/SuperHouse/esp-open-rtos/pull/377,This is to solve issue #376; libraries can now be added to a project with the addition of USER_LIBS=... to the Makefile without removing those from parameters.mk.,This is to solve issue #376; libraries can now be added to a project with the addition of USER_LIBS=... to the Makefile without removing those from parameters.mk.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,377,2017-05-05T15:53:06Z,,2017-05-09T22:31:10Z,OPEN,False,1,1,1,https://github.com/briantilley,add USER_LIBS to common.mk,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/377,https://github.com/vlad-ivanov-name,2,https://github.com/SuperHouse/esp-open-rtos/pull/377#issuecomment-299504192,This is to solve issue #376; libraries can now be added to a project with the addition of USER_LIBS=... to the Makefile without removing those from parameters.mk.,"Wouldn't the following do the same (libm is used as example)?
PROGRAM=test

include ../../common.mk

LIBS+=m",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,377,2017-05-05T15:53:06Z,,2017-05-09T22:31:10Z,OPEN,False,1,1,1,https://github.com/briantilley,add USER_LIBS to common.mk,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/377,https://github.com/briantilley,3,https://github.com/SuperHouse/esp-open-rtos/pull/377#issuecomment-299504981,This is to solve issue #376; libraries can now be added to a project with the addition of USER_LIBS=... to the Makefile without removing those from parameters.mk.,"Yes, the end effect is the same. To me, at least, having a USER_LIBS variable makes the solution clearer when trying to add a library.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,377,2017-05-05T15:53:06Z,,2017-05-09T22:31:10Z,OPEN,False,1,1,1,https://github.com/briantilley,add USER_LIBS to common.mk,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/377,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/377#issuecomment-300320597,This is to solve issue #376; libraries can now be added to a project with the addition of USER_LIBS=... to the Makefile without removing those from parameters.mk.,I believe that EXTRA_LIBS will be better name.,True,{'THUMBS_UP': ['https://github.com/kanflo']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,382,2017-05-16T14:15:48Z,2017-05-18T10:06:47Z,2017-05-18T21:25:14Z,MERGED,True,1,1,1,https://github.com/kanflo,Fix for #381,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/382,https://github.com/kanflo,1,https://github.com/SuperHouse/esp-open-rtos/pull/382,The URL on non gnu.org was changed as @Alge pointed out in in #381.,The URL on non gnu.org was changed as @Alge pointed out in in #381.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,388,2017-06-05T22:29:24Z,2017-06-06T02:39:01Z,2017-06-06T02:39:01Z,MERGED,True,2,2,1,https://github.com/luigifcruz,Change xTaskCreate priority.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/388,https://github.com/luigifcruz,1,https://github.com/SuperHouse/esp-open-rtos/pull/388,Priority #1 appears not to be working. Priority #2 works just fine.,Priority #1 appears not to be working. Priority #2 works just fine.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/389,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?",True,{'THUMBS_UP': ['https://github.com/malachib']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-306742301,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?",Closing/reopening this PR to trigger Travis CI build.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-306751414,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@UncleRus Thank you the build is looking much better now. Remains to update the extras/httpd to get this all building, but everything else builds here.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-306771350,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@lujji I took a quick look at updating your http server, and have had to disable it for now so the build checks pass. Btw lwip now includes httpd in the main source code. The addition of the websocket support makes it more of a challenge for me to update this example. One benefit of getting this updated might be that your code would be based off the lwip master branch and might be a candidate to integrate there. One reason I am so keen to get lwip updated is to try to avoid wasted resources working with the old 1.4 version. Would you be interested in updating your http server example? Would people accept landing the lwip v2 change with this example disabled?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/lujji,5,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-306898585,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@ourairquality Great job on bringing lwip v2 to the project! I'll definitely try porting the example code, in the meantime - feel free to disable it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/lujji,6,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-307207826,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?",@ourairquality could you point out where build checks fail? I get 3 warnings when I build the project - is that the problem?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-307260121,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@lujji Thank you for taking a look. Problems looked worse at first, and glad it was an easy fix. Re-enabled the http_server example and the checks all pass now.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/UncleRus,8,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-307531150,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","Awesome job.
Will merge it if no objections.",True,{'THUMBS_UP': ['https://github.com/horvathp']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,9,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-308910356,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","I am very excited about this. mdns is super convenient, and http(s)d included is the missing link.  Hopefully our devices have enough juice to to the https stuff..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,10,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-309686097,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","I am attempting to use the new lwip2 httpd server but experiencing linker issues:
/home/esp/esp-open-rtos/examples/project/src/PGFR-14/http_server.c:83: undefined reference to `http_set_cgi_handlers'
/home/esp/esp-open-rtos/examples/project/src/PGFR-14/http_server.c:196: undefined reference to `http_set_ssi_handler'
/home/esp/esp-open-rtos/examples/project/src/PGFR-14/http_server.c:202: undefined reference to `httpd_init'


I notice the lwip/src/apps are skipped during compilation in my environment, which would explain the linker errors.  Do I need to manually enable them similarly to an 'extra'?
@ourairquality thank you for your hard work
On a somewhat related note, I have adapted a docker image for easy use your fork of esp-open-rtos.  You can find it here: https://hub.docker.com/r/malachib/esp-open-rtos/ and use tag ""latest-lwip2""
Lastly, if you'd rather I put in these requests other than in the official pull request thread, please point me towards your preferred location.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,11,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-309702700,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@malachib Perhaps look at the current example/http_server and then either copy the httpd code into extras/ or add a lwip/lwip/src/apps/httpd/component.mk file and include it as an extra component from where it is. I was able to get it building quickly doing that and it shows an index page at least. I expect most people with an interest are following here, so I suggest keeping the discussion here.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,12,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-309718302,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","OK sounds great
I will start by chucking a component.mk file around.   Maybe we can do one for all of apps?  I'll see how it goes and put my results here.
EDIT:
Nitpicky, but those linking options are troubling for me:
Option 1: Place a component.mk file into lwip apps
This pollutes the pureness of our lwip port, thereby making further lwip updates clumsy and our lwip a bit ""magical"" in its operation with esp-open-rtos.
Option 2: Copy httpd code into extras/
In essence this is sort of what has happened already with the httpd module.  Because of this, you are experiencing the collisions of the two httpd entities.  Ideally, we prefer an httpd-websockets extra which merely stacks on your lwip/apps/httpd.
I attempted to make an extras/lwip-apps-httpd which points directly at lwip/apps/httpd but because of issue #312 it's not easily doable",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,13,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-309915904,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","I think I found an elegant solution for this particular challenge.
The LWIP apps appear by design to default to off unless you explicitly enable them, via flags like LWIP_HTTPD_SSI=1, etc.
The result of this is the apps don't seem to collide with anything if you always include them in the build.
I've added the line:
lwip_SRC_DIR += $(LWIP_DIR)apps/*
to the /lwip/component.mk file and so far things are compiling nicely
EDIT:

HTTPD works with this technique!  Runs great!  Very pleased
mDNS does not work :( It depends on LWIP_IGMP and when enabling that, we get this error:

esp-open-rtos/core/include/sdk_internal.h:369:1: error: static assertion failed: ""netif->hwaddr offset wrong!""
_Static_assert(offsetof(struct netif, hwaddr) == 42, ""netif->hwaddr offset wrong!"");

The error is surprising, because hwaddr field appears before any LWIP_IGMP enabled stuff in netif.h.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,14,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-309983059,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@malachib The state and hwaddr netif struct slots have been moved to the start before other optional code, so they are less likely to need to be moved again. Would be curious if you can get mdns working. Shall look in to the build change above that you suggest, to include the apps.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,15,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-309986364,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","Here's what I am fiddling with as we speak:
https://gist.github.com/malachib/82fb94734e0b85242231c3c99b7439b2
Things get interesting around line 237.  I did a minor amount of shuffling and brute forced on a few options ( i love callbacks anyway... so bonus there)
I didn't gut the ipv6. it's a gamble. we could brute force them OFF... make merges in the future easier...
Thus far I now can compile and run my mDNS code, but it's not showing up on avahi-discover...
EDIT: mDNS works!  A bit fiddly to get online, but not the fault of esp8266+lwip2 compat.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,16,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-310341009,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","Added a comment in wdev.c on the apparently unused buffers, so there appears to be 7980 bytes free at wDevCtrl + 0x21a4. Assuming these were just some planned buffers that were never used, and not some workaround for a hw issue, then it should be usable and perhaps this can help push the networking a bit further.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,17,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-310346718,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","You definitely know more than I do about their internal hackeries.  That would make me nervous, but if you're sure about it light it up!  Maybe #ifdef it?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,18,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-310350413,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@malachib There is no source code using this area. Only a comment has been added. I do think it is unused, but the sdk code in that area is very convoluted so I am not yet certain. I am not sure if such a chunk of memory can just be linked into the malloc poll, but I have not looked. Just wanted to point out that there might be a little extra spare ram.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,19,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-312493686,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","If you were having issues with a station with a static IP address then please give it another try - it never worked in the past for me either but it does now with some limited testing. We seem to have all the source code for that path now in wpa_main.c so it was possible to rewrite it, and the same code needed changing for lwip v2 anyway and has been cleaned up and a hack removed from the lwip code.",True,"{'THUMBS_UP': ['https://github.com/malachib', 'https://github.com/flannelhead', 'https://github.com/UncleRus', 'https://github.com/rameshKrSah']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,20,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-313971075,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","In all my own testing, this lwip2 branch has performed admirably.  Additionally, it looks like this build failure may have been a fluke.  If a rebuild passes, I motion we proceed forward and merge in this pull request.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,21,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-313990781,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?",Might be best to just wait a little longer. I am trying to get the same lwip v2 code running on the current SDK too and another pass over it might clean it up a little more.,True,{'THUMBS_UP': ['https://github.com/malachib']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,22,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-314003950,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","I respect that.  I've updated the docker images for a ready-to-go build environment.  They work great for me, but try them at your own risk :)  The one tagged ""latest-ourairquality"" points to your repo and branch of the same name",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,23,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-315800351,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","Had some luck getting ipv6 running, and the patch at https://github.com/ourairquality/esp-open-rtos has ipv6 enabled. Currently only the http-get example uses ipv6, so there is some work to go cleaning up the code. Not sure how well ipv6 is tested in lwip, dns was broken, and neighbor solicitation was broken (or I did not know how to get it running as is), but these have been patched. Could use help on this, and perhaps having something barely working might give some encouragement.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/SaimenSays,24,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-319130857,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","I have some serious problems with actual lwip or low level hardware adaption. After some time tcp_accept() callback gets never called anymore.
Hopefully this is fixed with this update. Does anybody know when this pull request will be ""official"" released?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,25,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-319226345,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@SaimenSays Sorry it's probably not ready yet, and the patch here is rather stale now. I think good progress has been made and issues are being found and fixed at a good rate, but there are still open issues such as the queuing of pbufs in the TX paths. The upstream lwip code is in general receiving fixes at a good rate, and a good number of issues have been in the upstream code, so perhaps it has a little way to go to the next stable release. If you want to help then please see the version at https://github.com/ourairquality/esp-open-rtos for now.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/SaimenSays,26,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-319720569,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@ourairquality I checked out your branch. Some modifications because of changed function arguments need tobe done. Now it compiles and seems to work on first sight.
One issue I figured out already before, is the delayed freeing of heap. On each new connection there are 168Bytes more heap used, also if TCP connection is closed. It takes sometimes up to ones second until RAM gets released and I can see previous value with 'sdk_system_get_free_heap_size()'.
It looks little amount, but in one minute many connections can be opened and we know ESP lacks in RAM size.
Any idea how this happens? Does anybody know if it is an issue of RTOS memory handling or is there a longer timeout in tcp task?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,27,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-319838498,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","@SaimenSays It might be the TCP time-wait state. I had to rework the wificfg http server to try to have the client close the connection first to avoid the server being left in a time-wait, and that change helped a lot. Is that an option in your application, so avoid the esp8266 closing the TCP connection until after the client has? Alternatively perhaps you can lower this wait time. Perhaps try enabling LWIP_STATS_DISPLAY and calling stats_display() in lwip, see if it gives some clues.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/ourairquality,28,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-322123716,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?","This patch has been updated to the latest code developed. Patch #430 had to be bundled in.
For practical reasons there will be no further development of this particular patch. I can't just keep rebasing as people using my fork need the history and having to deal with a rebased stack of patches is frustrating for them. So further work will build on this. It might still be possible to pick and bundle some follow up patches, but I expect it will become difficult due to conflicts.
This is as good as I have been able to get it in the time available.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/malachib,29,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-322826038,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?",I appreciate all your efforts @ourairquality .  Your lwip2 code was running great for me,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,389,2017-06-06T04:32:43Z,2017-08-14T08:12:21Z,2017-08-16T17:52:15Z,CLOSED,False,1350,1114,39,https://github.com/ourairquality,LwIP v2 support,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/389,https://github.com/flannelhead,30,https://github.com/SuperHouse/esp-open-rtos/pull/389#issuecomment-322849098,"Getting more confident with this change, and requesting wider testing and feedback. It is working fine here in limited testing, in station and softap modes, with a http server and dns server and the dhcp server and client.
Tracking the upstream lwip master as it is adding some useful changes that help, particularly for pbuf management that helps tracking the esp rx pbufs.
Couldn't get all the dependant code decompiled to source, so had to do some minor patching of the binaries. But double checked all the code that has been converted to source.
Could this ever make it back into this repo or will it always be too much of a step?",@malachib These patches still exist and now reside in a different PR :) #437,True,{'HOORAY': ['https://github.com/malachib']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,390,2017-06-07T08:09:43Z,2017-06-07T09:19:24Z,2017-06-07T09:41:32Z,MERGED,True,2,1,1,https://github.com/ourairquality,travis: update the esp-open-sdk version used.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/390,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/390,"Seeing odd build failures in lwip v2 with the old version of the tools chain used for travis, but it builds fine locally with more recent versions so give that a try.","Seeing odd build failures in lwip v2 with the old version of the tools chain used for travis, but it builds fine locally with more recent versions so give that a try.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,394,2017-06-13T23:05:09Z,2017-12-19T14:03:10Z,2017-12-19T14:03:10Z,CLOSED,False,7603,0,10,https://github.com/hetii,Add dirty port of irmp library.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/394,https://github.com/hetii,1,https://github.com/SuperHouse/esp-open-rtos/pull/394,"Hi :)
I wrote a port of irmp library that allow parse or send IR commands.
Here is a project site: https://www.mikrocontroller.net/articles/IRMP_-_english
Currently only receiving is implemented but I should add sending in day or two.
What I need to know is do we keep this library as much as its in original page or adopt it just for esp-open-rtos purpose?
General let me know if you want it and how and then I will try to prepare it.
Best Regards.","Hi :)
I wrote a port of irmp library that allow parse or send IR commands.
Here is a project site: https://www.mikrocontroller.net/articles/IRMP_-_english
Currently only receiving is implemented but I should add sending in day or two.
What I need to know is do we keep this library as much as its in original page or adopt it just for esp-open-rtos purpose?
General let me know if you want it and how and then I will try to prepare it.
Best Regards.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,394,2017-06-13T23:05:09Z,2017-12-19T14:03:10Z,2017-12-19T14:03:10Z,CLOSED,False,7603,0,10,https://github.com/hetii,Add dirty port of irmp library.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/394,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/394#issuecomment-337692845,"Hi :)
I wrote a port of irmp library that allow parse or send IR commands.
Here is a project site: https://www.mikrocontroller.net/articles/IRMP_-_english
Currently only receiving is implemented but I should add sending in day or two.
What I need to know is do we keep this library as much as its in original page or adopt it just for esp-open-rtos purpose?
General let me know if you want it and how and then I will try to prepare it.
Best Regards.",The sources in this PR has an incompatible license (GPLv2) for this project.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,397,2017-06-20T00:31:35Z,2017-06-21T20:09:46Z,2017-07-03T21:42:23Z,MERGED,True,2,0,1,https://github.com/Governa,MQTT ignores too many handlers registered,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/397,https://github.com/Governa,1,https://github.com/SuperHouse/esp-open-rtos/pull/397,"On MQTTClient.c function mqtt_subscribe, if more than MQTT_MAX_MESSAGE_HANDLERS are registered, the variable rc receives the value of grantedQoS.
If grantedQoS = 0, and all handlers are already occupied, it goes on and returns 0 to the caller.","On MQTTClient.c function mqtt_subscribe, if more than MQTT_MAX_MESSAGE_HANDLERS are registered, the variable rc receives the value of grantedQoS.
If grantedQoS = 0, and all handlers are already occupied, it goes on and returns 0 to the caller.",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,397,2017-06-20T00:31:35Z,2017-06-21T20:09:46Z,2017-07-03T21:42:23Z,MERGED,True,2,0,1,https://github.com/Governa,MQTT ignores too many handlers registered,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/397,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/397#issuecomment-310190811,"On MQTTClient.c function mqtt_subscribe, if more than MQTT_MAX_MESSAGE_HANDLERS are registered, the variable rc receives the value of grantedQoS.
If grantedQoS = 0, and all handlers are already occupied, it goes on and returns 0 to the caller.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,401,2017-07-03T18:58:34Z,2017-07-03T21:26:59Z,2017-07-03T21:42:10Z,MERGED,True,6,8,1,https://github.com/Governa,Mqtt timer not sleeping,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/401,https://github.com/Governa,1,https://github.com/SuperHouse/esp-open-rtos/pull/401,"Some timing functions of the ESP82668's MQTT client port seems to be using incorrect values. That was causing tasks to busy wait for a packet inside the cycle function, increasing power usage and not letting lower priority tasks execute.","Some timing functions of the ESP82668's MQTT client port seems to be using incorrect values. That was causing tasks to busy wait for a packet inside the cycle function, increasing power usage and not letting lower priority tasks execute.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,401,2017-07-03T18:58:34Z,2017-07-03T21:26:59Z,2017-07-03T21:42:10Z,MERGED,True,6,8,1,https://github.com/Governa,Mqtt timer not sleeping,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/401,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/401#issuecomment-312736531,"Some timing functions of the ESP82668's MQTT client port seems to be using incorrect values. That was causing tasks to busy wait for a packet inside the cycle function, increasing power usage and not letting lower priority tasks execute.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,403,2017-07-04T08:36:14Z,2017-07-06T06:16:33Z,2017-07-06T06:16:33Z,MERGED,True,327,86,6,https://github.com/ourairquality,Update mbed TLS to 2.5.1,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/403,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/403,"This is the latest stable version, so perhaps we should consider updating to this.","This is the latest stable version, so perhaps we should consider updating to this.",True,"{'HEART': ['https://github.com/malachib'], 'THUMBS_UP': ['https://github.com/UncleRus']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,403,2017-07-04T08:36:14Z,2017-07-06T06:16:33Z,2017-07-06T06:16:33Z,MERGED,True,327,86,6,https://github.com/ourairquality,Update mbed TLS to 2.5.1,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/403,https://github.com/malachib,2,https://github.com/SuperHouse/esp-open-rtos/pull/403#issuecomment-312957524,"This is the latest stable version, so perhaps we should consider updating to this.",Yes please!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,404,2017-07-04T13:18:49Z,2017-07-06T06:17:05Z,2017-07-06T06:17:05Z,MERGED,True,1,1,1,https://github.com/ourairquality,Update BearSSL,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/404,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/404,Might as well update this too. Updating to the current master as it looks alpha anyway.,Might as well update this too. Updating to the current master as it looks alpha anyway.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,410,2017-07-06T22:33:59Z,2017-07-09T22:42:43Z,2017-07-09T22:42:43Z,MERGED,True,363,0,5,https://github.com/UncleRus,Driver for AD7705/AD7706 SPI ADC,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/410,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/410,"Basic driver for AD7705/AD7706 (TM7705/7706) - 3 V/5 V, 1 mW, 2-/3-Channel, 16-Bit, Sigma-Delta ADCs with 3-wire serial interface.","Basic driver for AD7705/AD7706 (TM7705/7706) - 3 V/5 V, 1 mW, 2-/3-Channel, 16-Bit, Sigma-Delta ADCs with 3-wire serial interface.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,412,2017-07-12T11:44:56Z,2017-08-14T08:12:07Z,2017-08-14T08:12:10Z,CLOSED,False,1336,604,26,https://github.com/ourairquality,FreeRTOS 9.0.1 (dev),1,[],https://github.com/SuperHouse/esp-open-rtos/pull/412,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/412,"This is a development branch for now but it must be getting close. The patch has been derived from the new repo https://github.com/ourairquality/freertos which tracks the upstream code making it easier to keep up to date. That repo also has the sdk revisions in case that helps understand what might need to be looked into.
One feature in v9 that I had missed is integrated support for the new reent code. This is not currently used, but might be something to consider.","This is a development branch for now but it must be getting close. The patch has been derived from the new repo https://github.com/ourairquality/freertos which tracks the upstream code making it easier to keep up to date. That repo also has the sdk revisions in case that helps understand what might need to be looked into.
One feature in v9 that I had missed is integrated support for the new reent code. This is not currently used, but might be something to consider.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,412,2017-07-12T11:44:56Z,2017-08-14T08:12:07Z,2017-08-14T08:12:10Z,CLOSED,False,1336,604,26,https://github.com/ourairquality,FreeRTOS 9.0.1 (dev),1,[],https://github.com/SuperHouse/esp-open-rtos/pull/412,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/412#issuecomment-314774975,"This is a development branch for now but it must be getting close. The patch has been derived from the new repo https://github.com/ourairquality/freertos which tracks the upstream code making it easier to keep up to date. That repo also has the sdk revisions in case that helps understand what might need to be looked into.
One feature in v9 that I had missed is integrated support for the new reent code. This is not currently used, but might be something to consider.","Enabled the configUSE_NEWLIB_REENTRANT option in FreeRTOS. It works at least in part with the more recent newlib version I use. This would seem to be essential as we can't have multiple threads working on a common reent structure, sharing the same errno etc. Have not explored all the implications yet. One area to explore is the standard streams, and I immediately noticed the extra buffering with debug output not being flushed as usual.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,412,2017-07-12T11:44:56Z,2017-08-14T08:12:07Z,2017-08-14T08:12:10Z,CLOSED,False,1336,604,26,https://github.com/ourairquality,FreeRTOS 9.0.1 (dev),1,[],https://github.com/SuperHouse/esp-open-rtos/pull/412,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/412#issuecomment-314780343,"This is a development branch for now but it must be getting close. The patch has been derived from the new repo https://github.com/ourairquality/freertos which tracks the upstream code making it easier to keep up to date. That repo also has the sdk revisions in case that helps understand what might need to be looked into.
One feature in v9 that I had missed is integrated support for the new reent code. This is not currently used, but might be something to consider.",Current newlib adds the option --enable-newlib-global-stdio-streams which was reported to save memory and to address some other issues so might be something we want.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,412,2017-07-12T11:44:56Z,2017-08-14T08:12:07Z,2017-08-14T08:12:10Z,CLOSED,False,1336,604,26,https://github.com/ourairquality,FreeRTOS 9.0.1 (dev),1,[],https://github.com/SuperHouse/esp-open-rtos/pull/412,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/412#issuecomment-322124675,"This is a development branch for now but it must be getting close. The patch has been derived from the new repo https://github.com/ourairquality/freertos which tracks the upstream code making it easier to keep up to date. That repo also has the sdk revisions in case that helps understand what might need to be looked into.
One feature in v9 that I had missed is integrated support for the new reent code. This is not currently used, but might be something to consider.","Updated, and again the last of the work on this patch, updates will build on this.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,413,2017-07-13T07:47:29Z,2017-08-14T08:11:51Z,2017-08-14T08:11:55Z,CLOSED,False,4473,9966,77,https://github.com/ourairquality,libc: update to a recent newlib version.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/413,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/413,"Updates to the current newlib master version, which is 2.5.0 plus some other changes that we may well need. This is compiled from the source code at https://github.com/ourairquality/newlib from the esp-open-rtos branch, and there are instructions there for compiling from the source.","Updates to the current newlib master version, which is 2.5.0 plus some other changes that we may well need. This is compiled from the source code at https://github.com/ourairquality/newlib from the esp-open-rtos branch, and there are instructions there for compiling from the source.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,413,2017-07-13T07:47:29Z,2017-08-14T08:11:51Z,2017-08-14T08:11:55Z,CLOSED,False,4473,9966,77,https://github.com/ourairquality,libc: update to a recent newlib version.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/413,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/413#issuecomment-315030049,"Updates to the current newlib master version, which is 2.5.0 plus some other changes that we may well need. This is compiled from the source code at https://github.com/ourairquality/newlib from the esp-open-rtos branch, and there are instructions there for compiling from the source.","I think the lwip code is breaking this and a small change is needed with a more recent newlib, but that is in a different repo, so the lwip v2 PR will probably need to land first.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,415,2017-07-14T07:56:24Z,2017-07-24T11:17:31Z,2017-07-24T12:57:30Z,MERGED,True,60,3,5,https://github.com/ourairquality,Remove code from libgcc that is provided by the ROM.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/415,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/415,"This saves about 2k of iram. Perhaps there is another way, but this was necessary here. If someone has a nicer solution then please let us know. The imported libgcc.a was taken from a current build via the esp-open-sdk.","This saves about 2k of iram. Perhaps there is another way, but this was necessary here. If someone has a nicer solution then please let us know. The imported libgcc.a was taken from a current build via the esp-open-sdk.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,415,2017-07-14T07:56:24Z,2017-07-24T11:17:31Z,2017-07-24T12:57:30Z,MERGED,True,60,3,5,https://github.com/ourairquality,Remove code from libgcc that is provided by the ROM.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/415,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/415#issuecomment-315608933,"This saves about 2k of iram. Perhaps there is another way, but this was necessary here. If someone has a nicer solution then please let us know. The imported libgcc.a was taken from a current build via the esp-open-sdk.","Extended this to also remove a few of the libc functions that are in the rom, saving an extra 0.5k of iram. A libc/libc.remove file has been added to list the objects to be remove, rather than actually excluding them from the supplied newlib libc.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,415,2017-07-14T07:56:24Z,2017-07-24T11:17:31Z,2017-07-24T12:57:30Z,MERGED,True,60,3,5,https://github.com/ourairquality,Remove code from libgcc that is provided by the ROM.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/415,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/415#issuecomment-317392841,"This saves about 2k of iram. Perhaps there is another way, but this was necessary here. If someone has a nicer solution then please let us know. The imported libgcc.a was taken from a current build via the esp-open-sdk.",2K of IRAM! That's great!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,416,2017-07-20T06:29:18Z,2017-07-24T11:16:31Z,2017-07-24T11:16:31Z,MERGED,True,8,2,2,https://github.com/ourairquality,"Use hwrand for the sdk uses of rand, in particular with the NMI.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/416,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/416,"The fiq NMI calls rand() from lmac:lmac.a:sdk_lmacTxFrame and the NMI must not touch the newlib reent structure or enter critical regions etc, so just use the simple and safe hwrand implementation as a
substitute.","The fiq NMI calls rand() from lmac:lmac.a:sdk_lmacTxFrame and the NMI must not touch the newlib reent structure or enter critical regions etc, so just use the simple and safe hwrand implementation as a
substitute.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,416,2017-07-20T06:29:18Z,2017-07-24T11:16:31Z,2017-07-24T11:16:31Z,MERGED,True,8,2,2,https://github.com/ourairquality,"Use hwrand for the sdk uses of rand, in particular with the NMI.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/416,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/416#issuecomment-316717214,"The fiq NMI calls rand() from lmac:lmac.a:sdk_lmacTxFrame and the NMI must not touch the newlib reent structure or enter critical regions etc, so just use the simple and safe hwrand implementation as a
substitute.",Looks good to me. The Jenkins slave is missing pyserial :),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,418,2017-07-20T18:34:33Z,2017-07-24T11:26:38Z,2017-07-24T11:26:38Z,MERGED,True,778,0,8,https://github.com/apiel,Upnp example emulating a Wemo switch,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/418,https://github.com/apiel,1,https://github.com/SuperHouse/esp-open-rtos/pull/418,"I would like to share an example to create Upnp server. In this example I emulate a WeMo switch plug (wifi switch) recognizable by Amazon echo dot. It was not really easy to find a way to use a udp multicast, until I found a great example https://github.com/kanflo/uhej-example","I would like to share an example to create Upnp server. In this example I emulate a WeMo switch plug (wifi switch) recognizable by Amazon echo dot. It was not really easy to find a way to use a udp multicast, until I found a great example https://github.com/kanflo/uhej-example",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,418,2017-07-20T18:34:33Z,2017-07-24T11:26:38Z,2017-07-24T11:26:38Z,MERGED,True,778,0,8,https://github.com/apiel,Upnp example emulating a Wemo switch,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/418,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/418#issuecomment-317122313,"I would like to share an example to create Upnp server. In this example I emulate a WeMo switch plug (wifi switch) recognizable by Amazon echo dot. It was not really easy to find a way to use a udp multicast, until I found a great example https://github.com/kanflo/uhej-example","Great example, glad you found uHej of use. It's a pity travis is b0rken but since you are not changing anything in the common code I am giving this +1.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,418,2017-07-20T18:34:33Z,2017-07-24T11:26:38Z,2017-07-24T11:26:38Z,MERGED,True,778,0,8,https://github.com/apiel,Upnp example emulating a Wemo switch,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/418,https://github.com/apiel,3,https://github.com/SuperHouse/esp-open-rtos/pull/418#issuecomment-317166845,"I would like to share an example to create Upnp server. In this example I emulate a WeMo switch plug (wifi switch) recognizable by Amazon echo dot. It was not really easy to find a way to use a udp multicast, until I found a great example https://github.com/kanflo/uhej-example","Yes, I am wondering why it didn't pass the Travis test... by the way thanks for your udp multicast example, without it, I would had never manage to make this upnp example ;-)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,419,2017-07-21T00:21:01Z,2017-08-18T15:25:44Z,2017-08-18T15:25:48Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Include python3-serial,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/419,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/419,"Seem that including python-serial no longer works, so try python3-serial?","Seem that including python-serial no longer works, so try python3-serial?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,419,2017-07-21T00:21:01Z,2017-08-18T15:25:44Z,2017-08-18T15:25:48Z,CLOSED,False,1,1,1,https://github.com/ourairquality,Include python3-serial,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/419,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/419#issuecomment-316874350,"Seem that including python-serial no longer works, so try python3-serial?",Unfortunately this change has not resolved the problem.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,420,2017-07-22T12:04:47Z,2017-08-14T08:11:37Z,2017-08-14T08:11:39Z,CLOSED,False,87,59,16,https://github.com/ourairquality,Pass an argument to ISRs. Disable interrupts when masking them.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/420,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/420,"Recent SDKs add an argument to interrupt handler functions, and this patch changes esp-open-rtos to follow. Guess this helps with some abstractions, and it narrows the differences when trying to use the esp-open-rtos extensions with recent SDK binaries.
An argument is not added to the second level GPIO handlers in this patch.
_xt_get_intlevel() was unused but was broken and would not assemble, so there is a small fix there, and some comments have been added on the observed levels.
There are conflicting definitions for XCHAL_EXCM_LEVEL, newlib has 1 and xtensa_rtos.h has 3. Assuming the higher value is of more use, so updated the code to use that. Does anyone know what difference this has? Might it disable debug traps in critical sections when using 2 and above? I presume using 3 does not disable the NMI?
While here, _xt_isr_unmask() and _xt_isr_mask() have been corrected to be thread safe by disabiling interrupts while changing the masks, and the old mask is returned by both now in case it is of use.","Recent SDKs add an argument to interrupt handler functions, and this patch changes esp-open-rtos to follow. Guess this helps with some abstractions, and it narrows the differences when trying to use the esp-open-rtos extensions with recent SDK binaries.
An argument is not added to the second level GPIO handlers in this patch.
_xt_get_intlevel() was unused but was broken and would not assemble, so there is a small fix there, and some comments have been added on the observed levels.
There are conflicting definitions for XCHAL_EXCM_LEVEL, newlib has 1 and xtensa_rtos.h has 3. Assuming the higher value is of more use, so updated the code to use that. Does anyone know what difference this has? Might it disable debug traps in critical sections when using 2 and above? I presume using 3 does not disable the NMI?
While here, _xt_isr_unmask() and _xt_isr_mask() have been corrected to be thread safe by disabiling interrupts while changing the masks, and the old mask is returned by both now in case it is of use.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,421,2017-07-25T18:59:15Z,2017-10-02T13:02:24Z,2017-10-02T13:02:24Z,CLOSED,False,90,42,2,https://github.com/flannelhead,dhcpserver: optionally add router and DNS server fields to DHCP reply,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/421,https://github.com/flannelhead,1,https://github.com/SuperHouse/esp-open-rtos/pull/421,"This change allows the user of DHCP server to advertise the soft AP as a router and a DNS server. This behaviour is useful when setting up a captive DNS server.
The options are disabled by default.","This change allows the user of DHCP server to advertise the soft AP as a router and a DNS server. This behaviour is useful when setting up a captive DNS server.
The options are disabled by default.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,421,2017-07-25T18:59:15Z,2017-10-02T13:02:24Z,2017-10-02T13:02:24Z,CLOSED,False,90,42,2,https://github.com/flannelhead,dhcpserver: optionally add router and DNS server fields to DHCP reply,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/421,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/421#issuecomment-317945866,"This change allows the user of DHCP server to advertise the soft AP as a router and a DNS server. This behaviour is useful when setting up a captive DNS server.
The options are disabled by default.","fwiw the lwip v2 patches bundle in similar support which is used by wificfg, and there it was useful to have these be dynamic settings that could be changed at runtime rather than making them compile time options. The wificfg also has a very simple DNS that seems adequate - perhaps that could be split out as another alternative.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,421,2017-07-25T18:59:15Z,2017-10-02T13:02:24Z,2017-10-02T13:02:24Z,CLOSED,False,90,42,2,https://github.com/flannelhead,dhcpserver: optionally add router and DNS server fields to DHCP reply,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/421,https://github.com/flannelhead,3,https://github.com/SuperHouse/esp-open-rtos/pull/421#issuecomment-318065492,"This change allows the user of DHCP server to advertise the soft AP as a router and a DNS server. This behaviour is useful when setting up a captive DNS server.
The options are disabled by default.","@ourairquality, thanks for the heads-up! I wasn't aware of your own branch (for others reading this, it's here). The dhcpserver changes there seem to be indeed more useful than this patch due to the runtime configurability. I'll be happy to close this one if/when these changes enter upstream.
The DNS implementation also seems simple but sufficient. I'll try to use that in favour of my captdns patch and report back. Perhaps the DNS responder task could be even exposed as a separate module.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,421,2017-07-25T18:59:15Z,2017-10-02T13:02:24Z,2017-10-02T13:02:24Z,CLOSED,False,90,42,2,https://github.com/flannelhead,dhcpserver: optionally add router and DNS server fields to DHCP reply,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/421,https://github.com/flannelhead,4,https://github.com/SuperHouse/esp-open-rtos/pull/421#issuecomment-320152686,"This change allows the user of DHCP server to advertise the soft AP as a router and a DNS server. This behaviour is useful when setting up a captive DNS server.
The options are disabled by default.","Alright, so I backported the changes to dhcpserver from @ourairquality's fork - this allows configuring the router and DNS option fields at runtime.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,421,2017-07-25T18:59:15Z,2017-10-02T13:02:24Z,2017-10-02T13:02:24Z,CLOSED,False,90,42,2,https://github.com/flannelhead,dhcpserver: optionally add router and DNS server fields to DHCP reply,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/421,https://github.com/flannelhead,5,https://github.com/SuperHouse/esp-open-rtos/pull/421#issuecomment-331234170,"This change allows the user of DHCP server to advertise the soft AP as a router and a DNS server. This behaviour is useful when setting up a captive DNS server.
The options are disabled by default.",Closing and reopening to trigger rebuild.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,421,2017-07-25T18:59:15Z,2017-10-02T13:02:24Z,2017-10-02T13:02:24Z,CLOSED,False,90,42,2,https://github.com/flannelhead,dhcpserver: optionally add router and DNS server fields to DHCP reply,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/421,https://github.com/flannelhead,6,https://github.com/SuperHouse/esp-open-rtos/pull/421#issuecomment-333527616,"This change allows the user of DHCP server to advertise the soft AP as a router and a DNS server. This behaviour is useful when setting up a captive DNS server.
The options are disabled by default.","Closing, resolved by #437",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,422,2017-07-25T19:23:53Z,2017-10-24T06:35:09Z,2017-10-24T06:35:09Z,CLOSED,False,316,0,3,https://github.com/flannelhead,Add captdns to extras,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/422,https://github.com/flannelhead,1,https://github.com/SuperHouse/esp-open-rtos/pull/422,"Responds to any DNS request with the access point IP. To use this, you also need to enable router and DNS server option fields in dhcpserver (#421). Should I create an example of how to configure this?
Ported from Sprite_tm's libesphttpd, upstream at http://git.spritesserver.nl/libesphttpd.git/","Responds to any DNS request with the access point IP. To use this, you also need to enable router and DNS server option fields in dhcpserver (#421). Should I create an example of how to configure this?
Ported from Sprite_tm's libesphttpd, upstream at http://git.spritesserver.nl/libesphttpd.git/",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,422,2017-07-25T19:23:53Z,2017-10-24T06:35:09Z,2017-10-24T06:35:09Z,CLOSED,False,316,0,3,https://github.com/flannelhead,Add captdns to extras,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/422,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/422#issuecomment-323546405,"Responds to any DNS request with the access point IP. To use this, you also need to enable router and DNS server option fields in dhcpserver (#421). Should I create an example of how to configure this?
Ported from Sprite_tm's libesphttpd, upstream at http://git.spritesserver.nl/libesphttpd.git/",Closing/reopening to trigger CI build,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,422,2017-07-25T19:23:53Z,2017-10-24T06:35:09Z,2017-10-24T06:35:09Z,CLOSED,False,316,0,3,https://github.com/flannelhead,Add captdns to extras,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/422,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/422#issuecomment-330986376,"Responds to any DNS request with the access point IP. To use this, you also need to enable router and DNS server option fields in dhcpserver (#421). Should I create an example of how to configure this?
Ported from Sprite_tm's libesphttpd, upstream at http://git.spritesserver.nl/libesphttpd.git/",Thanks @flannelhead. I would really like to see an example on how to use this.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,422,2017-07-25T19:23:53Z,2017-10-24T06:35:09Z,2017-10-24T06:35:09Z,CLOSED,False,316,0,3,https://github.com/flannelhead,Add captdns to extras,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/422,https://github.com/flannelhead,4,https://github.com/SuperHouse/esp-open-rtos/pull/422#issuecomment-331050758,"Responds to any DNS request with the access point IP. To use this, you also need to enable router and DNS server option fields in dhcpserver (#421). Should I create an example of how to configure this?
Ported from Sprite_tm's libesphttpd, upstream at http://git.spritesserver.nl/libesphttpd.git/","@kanflo Thanks for reminding of this. Actually now I remember why I didn't add an example yet. Any meaningful, working example would depend on the ability to advertise the soft AP IP as a router via DHCP extra fields. Support for this in dhcpserver is added in #421 but also in ourairquality's patchset #437.
If eventually either of these gets merged, I'll be able to write an example, perhaps by expanding the access_point example which is the most logical location for such an example.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,422,2017-07-25T19:23:53Z,2017-10-24T06:35:09Z,2017-10-24T06:35:09Z,CLOSED,False,316,0,3,https://github.com/flannelhead,Add captdns to extras,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/422,https://github.com/kanflo,5,https://github.com/SuperHouse/esp-open-rtos/pull/422#issuecomment-331063668,"Responds to any DNS request with the access point IP. To use this, you also need to enable router and DNS server option fields in dhcpserver (#421). Should I create an example of how to configure this?
Ported from Sprite_tm's libesphttpd, upstream at http://git.spritesserver.nl/libesphttpd.git/","Great @flannelhead, looking forward to it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,422,2017-07-25T19:23:53Z,2017-10-24T06:35:09Z,2017-10-24T06:35:09Z,CLOSED,False,316,0,3,https://github.com/flannelhead,Add captdns to extras,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/422,https://github.com/flannelhead,6,https://github.com/SuperHouse/esp-open-rtos/pull/422#issuecomment-335681528,"Responds to any DNS request with the access point IP. To use this, you also need to enable router and DNS server option fields in dhcpserver (#421). Should I create an example of how to configure this?
Ported from Sprite_tm's libesphttpd, upstream at http://git.spritesserver.nl/libesphttpd.git/",This will be superseded by #458 if that PR gets merged - it contains the very same captive DNS code.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,422,2017-07-25T19:23:53Z,2017-10-24T06:35:09Z,2017-10-24T06:35:09Z,CLOSED,False,316,0,3,https://github.com/flannelhead,Add captdns to extras,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/422,https://github.com/flannelhead,7,https://github.com/SuperHouse/esp-open-rtos/pull/422#issuecomment-338888575,"Responds to any DNS request with the access point IP. To use this, you also need to enable router and DNS server option fields in dhcpserver (#421). Should I create an example of how to configure this?
Ported from Sprite_tm's libesphttpd, upstream at http://git.spritesserver.nl/libesphttpd.git/",#458 landed - closing this.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,423,2017-07-26T18:26:49Z,2017-08-04T10:47:21Z,2017-08-04T10:47:21Z,CLOSED,False,5,0,1,https://github.com/apiel,Set by default ESP8266 I2C pin for bmp280 example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/423,https://github.com/apiel,1,https://github.com/SuperHouse/esp-open-rtos/pull/423,I propose to use the I2C pin settings of the ESP8266 since it is much more common than ESP8285.,I propose to use the I2C pin settings of the ESP8266 since it is much more common than ESP8285.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,423,2017-07-26T18:26:49Z,2017-08-04T10:47:21Z,2017-08-04T10:47:21Z,CLOSED,False,5,0,1,https://github.com/apiel,Set by default ESP8266 I2C pin for bmp280 example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/423,https://github.com/k-korn,2,https://github.com/SuperHouse/esp-open-rtos/pull/423#issuecomment-318145594,I propose to use the I2C pin settings of the ESP8266 since it is much more common than ESP8285.,"ESP8266 ESP-01 module has only GPIO0 and GPIO2 available, so current default values seem reasonable.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,423,2017-07-26T18:26:49Z,2017-08-04T10:47:21Z,2017-08-04T10:47:21Z,CLOSED,False,5,0,1,https://github.com/apiel,Set by default ESP8266 I2C pin for bmp280 example,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/423,https://github.com/apiel,3,https://github.com/SuperHouse/esp-open-rtos/pull/423#issuecomment-318147320,I propose to use the I2C pin settings of the ESP8266 since it is much more common than ESP8285.,"Ok, I didn't know that. Thank you for the feedback. Actually I was assuming this by looking to the ESP-arduino since there are using GPIO4 and 5...",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,426,2017-07-29T00:21:27Z,2017-10-10T17:01:32Z,2017-10-11T10:15:04Z,MERGED,True,12012,12662,247,https://github.com/Governa,DHCP Allows selecting the DHCP server's network interface,45,[],https://github.com/SuperHouse/esp-open-rtos/pull/426,https://github.com/Governa,1,https://github.com/SuperHouse/esp-open-rtos/pull/426,Simple change allowing the selection of network interface on server start.,Simple change allowing the selection of network interface on server start.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,426,2017-07-29T00:21:27Z,2017-10-10T17:01:32Z,2017-10-11T10:15:04Z,MERGED,True,12012,12662,247,https://github.com/Governa,DHCP Allows selecting the DHCP server's network interface,45,[],https://github.com/SuperHouse/esp-open-rtos/pull/426,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/426#issuecomment-319190307,Simple change allowing the selection of network interface on server start.,Looks good to me.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,426,2017-07-29T00:21:27Z,2017-10-10T17:01:32Z,2017-10-11T10:15:04Z,MERGED,True,12012,12662,247,https://github.com/Governa,DHCP Allows selecting the DHCP server's network interface,45,[],https://github.com/SuperHouse/esp-open-rtos/pull/426,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/426#issuecomment-323546363,Simple change allowing the selection of network interface on server start.,Closing/reopening to trigger CI build,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,426,2017-07-29T00:21:27Z,2017-10-10T17:01:32Z,2017-10-11T10:15:04Z,MERGED,True,12012,12662,247,https://github.com/Governa,DHCP Allows selecting the DHCP server's network interface,45,[],https://github.com/SuperHouse/esp-open-rtos/pull/426,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/426#issuecomment-335763769,Simple change allowing the selection of network interface on server start.,Commit 5ee6c548 needs to be reverted.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,428,2017-07-31T23:23:32Z,2017-08-14T08:11:19Z,2017-08-14T08:11:23Z,CLOSED,False,7,5,3,https://github.com/ourairquality,sysparam: reserve one more flash sector before placing the sysparams,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/428,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/428,"This is to help work with recent SDKs that add a RF cal sector by
default in the fifth last sector - just so the sysparam sectors do not
jump around when using different SDK versions.","This is to help work with recent SDKs that add a RF cal sector by
default in the fifth last sector - just so the sysparam sectors do not
jump around when using different SDK versions.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,428,2017-07-31T23:23:32Z,2017-08-14T08:11:19Z,2017-08-14T08:11:23Z,CLOSED,False,7,5,3,https://github.com/ourairquality,sysparam: reserve one more flash sector before placing the sysparams,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/428,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/428#issuecomment-319452263,"This is to help work with recent SDKs that add a RF cal sector by
default in the fifth last sector - just so the sysparam sectors do not
jump around when using different SDK versions.","Should there not be a check for sysparams in the fourth sector and if found, move it to the fifth, for backwards compatibility with current sysparam nodes?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,428,2017-07-31T23:23:32Z,2017-08-14T08:11:19Z,2017-08-14T08:11:23Z,CLOSED,False,7,5,3,https://github.com/ourairquality,sysparam: reserve one more flash sector before placing the sysparams,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/428,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/428#issuecomment-319509182,"This is to help work with recent SDKs that add a RF cal sector by
default in the fifth last sector - just so the sysparam sectors do not
jump around when using different SDK versions.","@kanflo People will just have to rework their flash layout. Take this patch as a heads up to think ahead now. For example, I had been using all the prior sectors for data storage, so losing a sector broke the end of that storage anyway.
The flash sectors can be saved and moved with esptool, or examples/sysparam_editor/ can be used to dump them before this change and set them again.
I was not aware this was widely used, seems to still have problems, but if someone has significant deployments then they might just have to add another module to transition the sysparams (and any prior usage of the flash), or just keep a local back-out patch, but that could be an optional extra component.
Delaying the change is likely to make this a bigger problem in future if ever moving to a recent sdk. That seems to require flashing an extra params sector anyway, but if the sysparams do not have to move then that might be just a little easier.",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,428,2017-07-31T23:23:32Z,2017-08-14T08:11:19Z,2017-08-14T08:11:23Z,CLOSED,False,7,5,3,https://github.com/ourairquality,sysparam: reserve one more flash sector before placing the sysparams,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/428,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/428#issuecomment-319538451,"This is to help work with recent SDKs that add a RF cal sector by
default in the fifth last sector - just so the sysparam sectors do not
jump around when using different SDK versions.","@kanflo Sorry it does appear that it's ok, as sysparam_init can search forward for the start of its sectors, and app_main gives the flash_size as the top address to search, so it appear it will work in transition. I still think this would be a useful change, so people know that the fifth last sector may be used in future and plan for it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,430,2017-08-02T00:35:02Z,2017-08-14T07:53:48Z,2017-08-14T07:53:52Z,CLOSED,False,2,461,1,https://github.com/ourairquality,upnp example: strip down the lwipopts.h file,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/430,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/430,"@apiel Would this change suit, to make is cleaner to transition to lwip v2? A patch to get your upnp example compiling with lwip v2 is also now bundled in that patch at https://github.com/ourairquality/esp-open-rtos and if you happen to be able to actually test that it would be good to know.","@apiel Would this change suit, to make is cleaner to transition to lwip v2? A patch to get your upnp example compiling with lwip v2 is also now bundled in that patch at https://github.com/ourairquality/esp-open-rtos and if you happen to be able to actually test that it would be good to know.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,430,2017-08-02T00:35:02Z,2017-08-14T07:53:48Z,2017-08-14T07:53:52Z,CLOSED,False,2,461,1,https://github.com/ourairquality,upnp example: strip down the lwipopts.h file,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/430,https://github.com/apiel,2,https://github.com/SuperHouse/esp-open-rtos/pull/430#issuecomment-320082359,"@apiel Would this change suit, to make is cleaner to transition to lwip v2? A patch to get your upnp example compiling with lwip v2 is also now bundled in that patch at https://github.com/ourairquality/esp-open-rtos and if you happen to be able to actually test that it would be good to know.","At first look it seem to be no problem, but right now I don't have time to try out... I will try as soon as possible, hopefully this weekend and give you some feedback ;-)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,430,2017-08-02T00:35:02Z,2017-08-14T07:53:48Z,2017-08-14T07:53:52Z,CLOSED,False,2,461,1,https://github.com/ourairquality,upnp example: strip down the lwipopts.h file,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/430,https://github.com/apiel,3,https://github.com/SuperHouse/esp-open-rtos/pull/430#issuecomment-320735534,"@apiel Would this change suit, to make is cleaner to transition to lwip v2? A patch to get your upnp example compiling with lwip v2 is also now bundled in that patch at https://github.com/ourairquality/esp-open-rtos and if you happen to be able to actually test that it would be good to know.","You need to define LWIP_RAND
#define LWIP_IGMP 1
#include <esp/hwrand.h>
#define LWIP_RAND hwrand

/* Use the defaults for everything else */
#include_next <lwipopts.h>",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,430,2017-08-02T00:35:02Z,2017-08-14T07:53:48Z,2017-08-14T07:53:52Z,CLOSED,False,2,461,1,https://github.com/ourairquality,upnp example: strip down the lwipopts.h file,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/430,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/430#issuecomment-321428999,"@apiel Would this change suit, to make is cleaner to transition to lwip v2? A patch to get your upnp example compiling with lwip v2 is also now bundled in that patch at https://github.com/ourairquality/esp-open-rtos and if you happen to be able to actually test that it would be good to know.","@apiel Ok, thank you. Updated, but I've not included the hwrand change as it either seems misplaced and should be changed in lwip, or we need to also modify lwip to check if it is already defined to avoid compile warnings. Fwiw the lwip v2 patch switches over to hwrand anyway - it's also getting difficult to juggle all the patches, e.g. would this land first or at all?
Was there a good reason that upnp needed hwrand, apart from it being preferred? Was there some thread safety issue with the newlib rand reent struct etc?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,431,2017-08-02T00:40:08Z,2017-08-04T10:46:05Z,2017-08-04T10:46:05Z,MERGED,True,0,2,1,https://github.com/ourairquality,i2c: remove wip 400k define,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/431,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/431,"Looks like this was test wip code that should not have been included. Want to be able to set the i2c per-project rather than having to patch the driver.
@Zaltora What do you think about this change?
Did not check if some examples depended on a higher speed?","Looks like this was test wip code that should not have been included. Want to be able to set the i2c per-project rather than having to patch the driver.
@Zaltora What do you think about this change?
Did not check if some examples depended on a higher speed?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,431,2017-08-02T00:40:08Z,2017-08-04T10:46:05Z,2017-08-04T10:46:05Z,MERGED,True,0,2,1,https://github.com/ourairquality,i2c: remove wip 400k define,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/431,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/431#issuecomment-319679638,"Looks like this was test wip code that should not have been included. Want to be able to set the i2c per-project rather than having to patch the driver.
@Zaltora What do you think about this change?
Did not check if some examples depended on a higher speed?","I wanted later to add a simple way to select the frequency. I did not have time to do that.
I wanted to add an extra abstraction to create as the SPI, bus system and add the frequency configuration.
I'm not sure that all components work at low frequency but I'm sure some components do not work at high frequency.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,431,2017-08-02T00:40:08Z,2017-08-04T10:46:05Z,2017-08-04T10:46:05Z,MERGED,True,0,2,1,https://github.com/ourairquality,i2c: remove wip 400k define,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/431,https://github.com/vlad-ivanov-name,3,https://github.com/SuperHouse/esp-open-rtos/pull/431#issuecomment-320167671,"Looks like this was test wip code that should not have been included. Want to be able to set the i2c per-project rather than having to patch the driver.
@Zaltora What do you think about this change?
Did not check if some examples depended on a higher speed?","@UncleRus should we merge this? It's essentially a line of code that ended up in the repo by accident. Afterwards, we can see how it goes with @Zaltora's PR",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,432,2017-08-02T18:44:45Z,2017-09-01T09:29:33Z,2017-09-01T09:29:33Z,MERGED,True,911,808,57,https://github.com/Zaltora,I2C bus upgrade,24,[],https://github.com/SuperHouse/esp-open-rtos/pull/432,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/432,"I started to integrate a bus system for the i2c library.
It is in response to #429 and #431 .
With this upgrage, we can have several i2c bus and the desired frequency to each.
i dont get an esp8266 to testing. I changed the ds3231 sample to try compilation. All other libraries must be modified. I would do it later.
You will probably need to test and adjust the delay values to match the correct frequencies
const static uint8_t i2c_freq_array[3][2] = { {100,20}, {10,1}, {6,1} } ; 
Don't merge it now ^^","I started to integrate a bus system for the i2c library.
It is in response to #429 and #431 .
With this upgrage, we can have several i2c bus and the desired frequency to each.
i dont get an esp8266 to testing. I changed the ds3231 sample to try compilation. All other libraries must be modified. I would do it later.
You will probably need to test and adjust the delay values to match the correct frequencies
const static uint8_t i2c_freq_array[3][2] = { {100,20}, {10,1}, {6,1} } ; 
Don't merge it now ^^",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,432,2017-08-02T18:44:45Z,2017-09-01T09:29:33Z,2017-09-01T09:29:33Z,MERGED,True,911,808,57,https://github.com/Zaltora,I2C bus upgrade,24,[],https://github.com/SuperHouse/esp-open-rtos/pull/432,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/432#issuecomment-320363096,"I started to integrate a bus system for the i2c library.
It is in response to #429 and #431 .
With this upgrage, we can have several i2c bus and the desired frequency to each.
i dont get an esp8266 to testing. I changed the ds3231 sample to try compilation. All other libraries must be modified. I would do it later.
You will probably need to test and adjust the delay values to match the correct frequencies
const static uint8_t i2c_freq_array[3][2] = { {100,20}, {10,1}, {6,1} } ; 
Don't merge it now ^^","I have updated all libraries using the I2C.
I can't test hardware but all example compile fine.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,432,2017-08-02T18:44:45Z,2017-09-01T09:29:33Z,2017-09-01T09:29:33Z,MERGED,True,911,808,57,https://github.com/Zaltora,I2C bus upgrade,24,[],https://github.com/SuperHouse/esp-open-rtos/pull/432,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/432#issuecomment-323546276,"I started to integrate a bus system for the i2c library.
It is in response to #429 and #431 .
With this upgrage, we can have several i2c bus and the desired frequency to each.
i dont get an esp8266 to testing. I changed the ds3231 sample to try compilation. All other libraries must be modified. I would do it later.
You will probably need to test and adjust the delay values to match the correct frequencies
const static uint8_t i2c_freq_array[3][2] = { {100,20}, {10,1}, {6,1} } ; 
Don't merge it now ^^",Closing/reopening to trigger CI build,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,433,2017-08-04T04:23:58Z,2017-08-04T20:34:05Z,2017-08-04T20:34:05Z,MERGED,True,1,1,1,https://github.com/flannelhead,httpd: add missing typedef,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/433,https://github.com/flannelhead,1,https://github.com/SuperHouse/esp-open-rtos/pull/433,"Add a missing typedef to the httpd.h header. Before, the header would define a variable WS_MODE which caused linking errors when the header was included in multiple translation units. Now WS_MODE is a type alias which was the original intent according to my best understanding.","Add a missing typedef to the httpd.h header. Before, the header would define a variable WS_MODE which caused linking errors when the header was included in multiple translation units. Now WS_MODE is a type alias which was the original intent according to my best understanding.",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/437,"This is a combined patch set, which has been necessary due to the dependencies.","This is a combined patch set, which has been necessary due to the dependencies.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/vlad-ivanov-name,2,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-322527218,"This is a combined patch set, which has been necessary due to the dependencies.","Since that's a lot of stuff to merge and it's possible it won't be merged at all, I think we should ask maintainers (@kanflo, @projectgus) on what conditions this can be commited to master. Perhaps we could collect feedback from 2-3 people using e-o-r, and I assume @ourairquality already has a number of devices running constantly.
I have a couple of devices running MQTT clients 24/7 and I can test this PR with them.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,3,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-322555969,"This is a combined patch set, which has been necessary due to the dependencies.","@resetnow That's a good idea. I can volunteer as a tester and give some feedback. I've recently adopted these patches in my robotics project which uses quite intensive networking via websockets and also takes advantage of the RTOS features.
Right now I'm investigating an issue where the TCP thread apparently gets stuck somewhere, but that might be a bug in my code. I'll get back when I've got that issue resolved and give the patches some testing.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-322601845,"This is a combined patch set, which has been necessary due to the dependencies.","@flannelhead Enabling the tWIP_TCPIP_CORE_LOCKING_INPUT is causing problems for some projects, e.g. mdns, so please try this with the appended patch.
I am still interested in feedback and consider improvements, but people in my community need the revision history so I need to stop all the rebasing and this patch set is probably the cleanest it will ever be.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/kanflo,5,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-322613672,"This is a combined patch set, which has been necessary due to the dependencies.","I think there's a lot of improvements in this PR. Hopefully I will find the time this weekend to start reviewing and testing. Regarding LWIP2 support, I see you point that submodule to your own repo @ourairquality. I am afraid I have not kept up with the progress of LWIP2 but is there any reason not to use the SuperHouse master for LWIP2?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-322617319,"This is a combined patch set, which has been necessary due to the dependencies.","@kanflo Thank you. It is not possible to point to the SuperHouse lwip repo because it has not changed in a long time. Also my lwip repo is a fork off the main lwip repo git://git.savannah.nongnu.org/lwip.git with just a few changes and I have been working to minimize that set of changes and work to get fixes into the upstream code. I suggest you fork off lwip and create a branch for esp-open-rtos specific changes as I have done, you could just cherry pick the esp-open-rtos branch.
My hope is that by closing the gap between the esp-open-rtos lwip and the upstream code that it will help bring these communities closer. So when we find problems they are discussed and pushed upstream, and that perhaps some people from the wider lwip community will consider using esp-open-rtos.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-322619538,"This is a combined patch set, which has been necessary due to the dependencies.","In case it helps get other people interested in this, and helps get it across the line, IPV6 can be enabled, it is not the default and not well tested but simple examples work for me, just define LWIP_IPV6 in your project.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/vlad-ivanov-name,8,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-322676120,"This is a combined patch set, which has been necessary due to the dependencies.","If that helps, I think we could update SuperHouse LWIP2 fork and coordinate the merge across different projects.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,9,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-322682179,"This is a combined patch set, which has been necessary due to the dependencies.","@resetnow If the SuperHouse master branch can be updated to the upstream lwip git repo then that might work, otherwise I suggest just opening a fresh repo to track the upstream lwip with a branch for the few remaining patches specific to esp-open-rtos. If the barrier to having people tracking the upstream code can be lowered then that would be good.
I also created a repo for newlib to update that, and one for FreeRTOS, but it seemed easier to just bundle in a specific version of these.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/recursify,10,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-324144496,"This is a combined patch set, which has been necessary due to the dependencies.","@ourairquality - #151 has been open for a while, any thoughts on if this PR will help address it?  If so I'm happy to test it out.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,11,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-324210690,"This is a combined patch set, which has been necessary due to the dependencies.","@recursify This is a big update to lwip so it may well help. If you could re-test then that would be good to know. Might the lwip issue https://savannah.nongnu.org/bugs/?50837 be related to this problem, it talks about a client downloading and with delays? With this patch set it should be much easier for you to cherry-pick that proposed change and to see if it helps.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,12,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-325577526,"This is a combined patch set, which has been necessary due to the dependencies.","I've been testing these changes now for a while. Things seem to be working fine otherwise, but I'm having a problem with httpd WebSocket communication hanging up after a while. I'll try to come up with a minimal repro application during this week, so perhaps we'll get this fixed. I remember not having this issue though when I used the LwIP 2 PR code in late July, though.
It would be nice to get the WebSocket support in httpd introduced by lujji merged into the upstream LwIP httpd code. I see that code has got some improvements in upstream so it would make sense not to maintain an outdated version in esp-open-rtos. That would probably be quite an effort but I'm willing to lend a helping hand if I can spare some time for that.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,13,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-325873396,"This is a combined patch set, which has been necessary due to the dependencies.",@flannelhead @recursify The latest upstream lwip version has been merged and appears to include some improvements that would help avoid hung connections. If you could find an example to reproduce the problem then that would help.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,14,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326096856,"This is a combined patch set, which has been necessary due to the dependencies.","@ourairquality It seems my problem is related somehow to TCP_QUEUE_OOSEQ. It's enabled by default in this PR and it isn't enabled in current master. When use this patch and set TCP_QUEUE_OOSEQ=0, the hanging doesn't happen anymore... I wonder what should I do next to debug this further. For one, I'm not sure if it's something wrong with my code, httpd or LWIP.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,15,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326159423,"This is a combined patch set, which has been necessary due to the dependencies.","@flannelhead Thank you for narrowing this down. Could you please try adding the following to esp_interface.c:ethernetif_input() just before the call netif->input(p, netif). It will make a copy of the rx pool buffer (which are limited) and free that pool buffer immediately, and if that fixes the problem then it is likely that that rx pool is becoming exhausted, otherwise it is more likely a problem in lwip and the logic is likely in tcp_in.c.
    {
        struct pbuf *q = pbuf_clone(PBUF_RAW, PBUF_RAM, p);
        pbuf_free(p);
        if (q == NULL) {
            return;
        }
        p = q;
    }

Making a copy might not be the best solution as it increase peak memory usage, and it might still oom if there oos buffers are not well bound. There is code in lwip to limit the size of the oos buffers but it appears to be per-pcb and perhaps your app is building them up across multiple pcbs and a global limit might need to be added too. But firstly try narrowing it down using the code above.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,16,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326198438,"This is a combined patch set, which has been necessary due to the dependencies.","Thanks for the suggestion. This addition indeed seems to fix the hangups. To the small extent I understand the issue, it is reasonable to expect that the buffer would be exhausted - the application is doing signal processing at 1 kHz at a higher priority than the TCP thread but should be also receiving WebSocket frames 10 Hz.
In my application there is only one pcb involved at a time.
Please tell me if I can provide any further useful information. I'm not yet very deep into the LWIP internals myself.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,17,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326202252,"This is a combined patch set, which has been necessary due to the dependencies.","@flannelhead There is the TCP_OOSEQ_MAX_PBUFS option, that defaults to just 2, that appear to be intended to avoid this problem per-pcb. Could you confirm further that the rx pool is becoming exhausted, perhaps by adding a counter for how many lwip holds and increasing this counter in ethernetif_input() and decreasing it in pbuf.c: pbuf_free() around the call to sdk_system_pp_recycle_rx_pkt() which returns these to the internal pool. If such a counter is going over 4 then there is a problem, and perhaps you can track it down in tcp_in.c.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,18,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326577695,"This is a combined patch set, which has been necessary due to the dependencies.","@flannelhead I can now reproduce this problem with oos buffers. One problem was that I made a mess of the lwipopts TCP_OOSEQ_MAX_BYTES and TCP_OOSEQ_MAX_PBUFS and these were not being defined, but even with those set it's still not running very smoothly. Let me explore the problem further.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,19,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326582670,"This is a combined patch set, which has been necessary due to the dependencies.","@ourairquality Ok, thanks for digging deeper into this. I did some experiments myself yesterday but didn't get very far. I'm still available for testing so let me know when there's something to test.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,20,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326796225,"This is a combined patch set, which has been necessary due to the dependencies.","@flannelhead If you are prepared to retest then could you please try the updated patch set. The management of TCP OOSEQ buffers has been improved, and I found that the TCP SACK support also helps and enabled that too. The OOSEQ support alone, without SACK, performed really badly and I could not find a fault there. Filed an upstream bug for feedback see https://savannah.nongnu.org/bugs/index.php?51925 Perhaps OOSEQ support will just be disabled by default, but with SACK it seem significantly better, so feedback is welcomed.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,21,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326823545,"This is a combined patch set, which has been necessary due to the dependencies.","Hi,
That looks like some great work to be honest! At least it seems now more reliable, but still I managed to get it to hang by e.g. reloading a couple times the page which opens the websocket connection. I should finish the minimal repro which I've been making though... Which kind of test are you currently using for development?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,22,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326833370,"This is a combined patch set, which has been necessary due to the dependencies.","@flannelhead Found some more suspect errors in lwip. It was dropping pcbs due to errors maintaining the list. Filed a buf upstream for feedback https://savannah.nongnu.org/bugs/index.php?51930 This probably caused a lost of memory and importantly any rx pool buffers associated with the pcb which would bring the rx path to a halt. It appears to have only occurred when running multiple interfaces.
Apart from that, I might need more feedback on your problem as I can not yet reproduce it now. I had adapted the http_get example to download a large file over and over. Some code has been added to ethernetif_input() to simulate packet loss which you might want to try, and that had reproduced the problem here but it seems to keep running now. Could you please try a more conservative target in ooseq_max_pbufs(), lower the target number of ooseq buffers from 3 to 2, and see it that helps? Could you also print the level of pp_rx_pool_usage in ethernetif_input() to see that it does not get too hight, not over 4?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,23,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326891398,"This is a combined patch set, which has been necessary due to the dependencies.","@ourairquality Yes, let me test it for a couple of days and I'll report back to you. Thank you for your work so far, I hope to be able to help.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,24,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-326896540,"This is a combined patch set, which has been necessary due to the dependencies.","@resetnow Thank you. The intention was to set a practical limit, just forget to change that back after testing the limit.",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,25,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-327025953,"This is a combined patch set, which has been necessary due to the dependencies.","@ourairquality I don't know what I was doing wrong before, but now it seems I don't get those hangs anymore. The websocket connection seems to persist now, and I didn't manage to hang it despite trying like I did before (refreshing the page on the mobile phone etc.) Page refresh seems to have sometimes a small delay though, probably a timer then frees some pbufs.
I briefly also checked pp_rx_pool_usage values - they don't seem to exceed 4 in any situations I managed to produce.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,26,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-327296310,"This is a combined patch set, which has been necessary due to the dependencies.","After some more testing, it seems that reverting the two latest commits 893f715 and 730a0f4 the problem appears again and I can reproduce the hanging. So, it seems the hanging problem is finally fixed by these latest changes.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/recursify,27,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-327339992,"This is a combined patch set, which has been necessary due to the dependencies.","Okay, took a while to upgrade to the latest LWIP / FreeRTOS, but I'm now getting frequent errors with mbedtls_ssl_read returning 0x004c (MBEDTLS_ERR_NET_RECV_FAILED).  Usually it fails after a few successful reads/writes over a secure websocket connection.  Any pointers on how to debug this further?
I realize a minimal repro example might be most useful here, but it will take me a while to get to it!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,28,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-327455767,"This is a combined patch set, which has been necessary due to the dependencies.","@recursify I would take a look at the packets with wireshark to see if there are any clues there, see if there are any problems visible at the tcp/ip layer. Lwip also has some debug output that can be enabled, see lwipopts.h, and I would setup a test for which that log can be recorded. I don't use mbedtls and are not going to be working on problem reports at that layer.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,29,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-330242567,"This is a combined patch set, which has been necessary due to the dependencies.","FWIW, I've been now testing this changeset for a good while. After the fixes to lwIP done by @ourairquality, it's been working very well in my project.
It seems to me that it would probably be a good idea to merge these changes soon - after all, there are bugs in lwIP 1.4.1 in master as well, and lwIP 2 in this branch would fix some of them. The code would also get more exposure after merging and any potential bugs could be found out. But of course, all of this is up to the maintainers :)",True,"{'THUMBS_UP': ['https://github.com/vlad-ivanov-name', 'https://github.com/SaimenSays']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/kanflo,30,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-330984685,"This is a combined patch set, which has been necessary due to the dependencies.",I have tested with my Esparducam project and so far I only see issues with read(...) as mentioned in #445. Eg. examples/terminal buffer the entire line. I will dig further into this.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,31,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-330990692,"This is a combined patch set, which has been necessary due to the dependencies.","@kanflo There have been some changes to the newlib output buffering for the standard output streams and perhaps that is causing some confusion, and perhaps that path needs some attention. Newlib added an option to make these streams global rather than per-thread, but that option is not used, but it is there now in the update. Personally per-thread streams seems good, to limit the thread conflict a little (to the extent that they write to different buffers before flushing these). I don't think the actual output to the uart was ever thread safe and that needs some attention. Often these streams are used for debug dumps, and it is often important that this work when the image can be in a bad state, so a robust best effort solution for this thread safety issue might be best (rather than calling into FreeRTOS).
The newlib master branch has also moved to a 64 bit time_t and does anyone have thoughts on that?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/kanflo,32,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-331063529,"This is a combined patch set, which has been necessary due to the dependencies.","Thanks for the pointer @ourairquality, a time saver! I will look into fixing the input buffering. Concurrency protection on the UART would be nice but can be left out for the time being, I think.
Moving time_t to 64 bit is +2 for me :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/ourairquality,33,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-331161922,"This is a combined patch set, which has been necessary due to the dependencies.","@kanflo The initialization of the streams is in newlib/libc/stdio/findfp.c The initialization of stdout has not actually changed, but previously the reent structure was not even being switched on task switches so all tasks were using the same stream, really broken. With that fixed the stdout line buffering becomes visible. I am still not aware of an input buffering problem.
Newlib has been update to the master with the 64 bit time_t, so at least it is the latest code to work on.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/kosmonaffft,34,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-331856716,"This is a combined patch set, which has been necessary due to the dependencies.","Hello all...
Are there any chances that this patch will be integrated soon?
Or i should use ourairquality fork right now to test them?",True,"{'THUMBS_UP': ['https://github.com/SaimenSays', 'https://github.com/horvathp']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/UncleRus,35,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-333358595,"This is a combined patch set, which has been necessary due to the dependencies.",Going to merge this one if no objections,True,"{'THUMBS_UP': ['https://github.com/vlad-ivanov-name', 'https://github.com/flannelhead', 'https://github.com/kanflo']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,437,2017-08-14T08:10:52Z,2017-10-01T23:50:35Z,2017-10-01T23:50:35Z,MERGED,True,10752,11776,183,https://github.com/ourairquality,Merge the ourairquality fork,28,[],https://github.com/SuperHouse/esp-open-rtos/pull/437,https://github.com/flannelhead,36,https://github.com/SuperHouse/esp-open-rtos/pull/437#issuecomment-333366363,"This is a combined patch set, which has been necessary due to the dependencies.",One note: I just noticed esp_interface.c in this branch fails to build if TCP_QUEUE_OOSEQ=0. TCP_QUEUE_OOSEQ is now on by default but it would be good if the code would build without it.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,438,2017-08-18T15:07:02Z,2017-08-19T20:32:21Z,2017-09-20T21:28:59Z,MERGED,True,2,1,1,https://github.com/sheinz,Fix pyserial import on travis CI,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/438,https://github.com/sheinz,1,https://github.com/SuperHouse/esp-open-rtos/pull/438,"This is a quick fix for Travis build.
Travis upgraded their default build environment to ubuntu trusty which for some reason broke installation of pyserial.","This is a quick fix for Travis build.
Travis upgraded their default build environment to ubuntu trusty which for some reason broke installation of pyserial.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,438,2017-08-18T15:07:02Z,2017-08-19T20:32:21Z,2017-09-20T21:28:59Z,MERGED,True,2,1,1,https://github.com/sheinz,Fix pyserial import on travis CI,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/438,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/438#issuecomment-323546310,"This is a quick fix for Travis build.
Travis upgraded their default build environment to ubuntu trusty which for some reason broke installation of pyserial.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,438,2017-08-18T15:07:02Z,2017-08-19T20:32:21Z,2017-09-20T21:28:59Z,MERGED,True,2,1,1,https://github.com/sheinz,Fix pyserial import on travis CI,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/438,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/438#issuecomment-330986519,"This is a quick fix for Travis build.
Travis upgraded their default build environment to ubuntu trusty which for some reason broke installation of pyserial.","Somewhat late but still, thanks!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,439,2017-08-22T18:12:50Z,2017-08-24T13:41:03Z,2017-08-30T01:01:54Z,MERGED,True,13,3,1,https://github.com/Zaltora,Fix SPI3 protocol with SSD1306,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/439,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/439,SPI3 protocol with SSD1306 work now  ( test done),SPI3 protocol with SSD1306 work now  ( test done),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,439,2017-08-22T18:12:50Z,2017-08-24T13:41:03Z,2017-08-30T01:01:54Z,MERGED,True,13,3,1,https://github.com/Zaltora,Fix SPI3 protocol with SSD1306,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/439,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/439#issuecomment-325819425,SPI3 protocol with SSD1306 work now  ( test done),"Do you know what this fixed? It appears to just unroll calls to spi_transfer and spi_transfer_8 to send one byte at a time but why would that have been expected to fix a problem? Someone else would be expect to look at that and optimize that change away. Were those functions broken, or is it a timing issue, or is it just unknown in which case wouldn't it have been better to leave the original code but disabled with the working substitutes and a code comment. And where is the code review before merging?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,439,2017-08-22T18:12:50Z,2017-08-24T13:41:03Z,2017-08-30T01:01:54Z,MERGED,True,13,3,1,https://github.com/Zaltora,Fix SPI3 protocol with SSD1306,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/439,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/439#issuecomment-325847300,SPI3 protocol with SSD1306 work now  ( test done),"SPI3 SSD1306 protocol problem is that you need send 1 control bit for each byte. This bit replace D/C pin.  Before this change, transfert was this :
1bit + 8 bits + 8bits + 8bits + ....
The command bit is send with the full buffer.
That was totally wrong. SSD1306 didnt work at all in this config.
To send this bit every time, i need transfert 1 byte in SPI buffer.
Now it is:
1bit + 8 bits + 1bit + 8bits + ....
Sorry for miss some comment on it. A friend do some test with me. Before, the screen didn't work at all. Now it is ok.  SH1106 got the same problem but no misstake for this one.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,440,2017-08-29T07:24:36Z,2017-09-01T09:28:50Z,2017-09-01T13:00:52Z,MERGED,True,22,0,2,https://github.com/flannelhead,Add a hook for a user defined exception handler,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/440,https://github.com/flannelhead,1,https://github.com/SuperHouse/esp-open-rtos/pull/440,"If the software crashes, it is essential in some applications like robotics to e.g. shut down motors for safety. This PR adds an API for the user to add their own exception handler.","If the software crashes, it is essential in some applications like robotics to e.g. shut down motors for safety. This PR adds an API for the user to add their own exception handler.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,440,2017-08-29T07:24:36Z,2017-09-01T09:28:50Z,2017-09-01T13:00:52Z,MERGED,True,22,0,2,https://github.com/flannelhead,Add a hook for a user defined exception handler,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/440,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/440#issuecomment-326573936,"If the software crashes, it is essential in some applications like robotics to e.g. shut down motors for safety. This PR adds an API for the user to add their own exception handler.",It is possible to add an example ? ( To let the user know about this new feature and how to use it ),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,444,2017-09-14T12:46:31Z,2017-10-01T21:43:16Z,2017-10-01T21:55:51Z,CLOSED,False,1248,0,13,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor,38,[],https://github.com/SuperHouse/esp-open-rtos/pull/444,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/444,I have written a driver for Sensirion SHT3x temperature and humidity sensors connected via I2C and some examples how to use it. Please add it to the main repository.,I have written a driver for Sensirion SHT3x temperature and humidity sensors connected via I2C and some examples how to use it. Please add it to the main repository.,True,{'THUMBS_UP': ['https://github.com/Zaltora']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,444,2017-09-14T12:46:31Z,2017-10-01T21:43:16Z,2017-10-01T21:55:51Z,CLOSED,False,1248,0,13,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor,38,[],https://github.com/SuperHouse/esp-open-rtos/pull/444,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/444#issuecomment-329758920,I have written a driver for Sensirion SHT3x temperature and humidity sensors connected via I2C and some examples how to use it. Please add it to the main repository.,"Nice library and very complete :). Few questions/Improvements.
1)
I see you use multiple function for debug :
#ifdef SHT3x_DEBUG
#define DEBUG_PRINTF0(s)       printf(s);
#define DEBUG_PRINTF1(s,a)     printf(s,a);
#define DEBUG_PRINTF2(s,a,b)   printf(s,a,b);
#define DEBUG_PRINTF3(s,a,b,c) printf(s,a,b,c);
#else
#define DEBUG_PRINTF0(s)
#define DEBUG_PRINTF1(s,a)
#define DEBUG_PRINTF2(s,a,b)
#define DEBUG_PRINTF3(s,a,b,c)
#endif

Can be better to use this ?
#ifdef SHT3x_DEBUG
#define DEBUG_PRINTF(s, ...) printf(""%s: "" s ""\n"", ""SHT3x"", ## __VA_ARGS__)
#else
#define DEBUG_PRINTF(s, ...)
#endif



For each i2c transmission, you use
taskENTER_CRITICAL(); and taskEXIT_CRITICAL();
I read somewhere with FreeRTOS that not good to block task for a long time.
I think you can remove them. If it was to prevent conflict with multiple task, I2C bus got a ""busy system"" that prevent that error.


In example with 2 sensor, you use GPIO16. This pin is slow.  you can change it for a better one if you want :)


Regards",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,444,2017-09-14T12:46:31Z,2017-10-01T21:43:16Z,2017-10-01T21:55:51Z,CLOSED,False,1248,0,13,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor,38,[],https://github.com/SuperHouse/esp-open-rtos/pull/444,https://github.com/gschorcht,3,https://github.com/SuperHouse/esp-open-rtos/pull/444#issuecomment-329775800,I have written a driver for Sensirion SHT3x temperature and humidity sensors connected via I2C and some examples how to use it. Please add it to the main repository.,I changed the library as well as the example according to your suggestions. Thanks again :-),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,444,2017-09-14T12:46:31Z,2017-10-01T21:43:16Z,2017-10-01T21:55:51Z,CLOSED,False,1248,0,13,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor,38,[],https://github.com/SuperHouse/esp-open-rtos/pull/444,https://github.com/gschorcht,4,https://github.com/SuperHouse/esp-open-rtos/pull/444#issuecomment-329776518,I have written a driver for Sensirion SHT3x temperature and humidity sensors connected via I2C and some examples how to use it. Please add it to the main repository.,"This version of the library works now and is a good starting point. I will improve error handling next days. Furthermore, I will extend functionality a bit, e.g., the possibility to switch on/off the built-in heater of the sensor.",True,"{'THUMBS_UP': ['https://github.com/Zaltora', 'https://github.com/kanflo']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,444,2017-09-14T12:46:31Z,2017-10-01T21:43:16Z,2017-10-01T21:55:51Z,CLOSED,False,1248,0,13,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor,38,[],https://github.com/SuperHouse/esp-open-rtos/pull/444,https://github.com/gschorcht,5,https://github.com/SuperHouse/esp-open-rtos/pull/444#issuecomment-333409822,I have written a driver for Sensirion SHT3x temperature and humidity sensors connected via I2C and some examples how to use it. Please add it to the main repository.,"I closed the pull request for the moment because I'm thinking about a redesign of the drive before it is merged in the master branch. The redesign should make the driver interface clearer and easier to use. I'm not sure yet, a possible change could be to remove the implicit mean value computation during each measurement cycle and to make it the responsibility of the user, if this is required.
Since the driver was still not merged into the master branch there shouldn't be any compatibility problems.
I will readd the driver and open a new pull request once the redesign has been finished.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,447,2017-09-28T09:07:13Z,2017-10-08T06:47:23Z,2017-10-08T06:47:24Z,MERGED,True,10976,11779,185,https://github.com/Zaltora,example and dhcp debug,43,[],https://github.com/SuperHouse/esp-open-rtos/pull/447,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/447,"-I add the possibility to disable  DHCP debug using the option in lwip file ""lwip/include/lwipopts.h"" :
/**
 * DHCP_DEBUG: Enable debugging in dhcp.c.
 */
#define DHCP_DEBUG                      LWIP_DBG_OFF

If i am wrong, tell me.
-I add an example to know how manage TCP netconn without block a task and use events on netconn to react. I test it and it is work well. It is manage multiple local server and client. I am not sure if it is the best way to do it. I take any advice.","-I add the possibility to disable  DHCP debug using the option in lwip file ""lwip/include/lwipopts.h"" :
/**
 * DHCP_DEBUG: Enable debugging in dhcp.c.
 */
#define DHCP_DEBUG                      LWIP_DBG_OFF

If i am wrong, tell me.
-I add an example to know how manage TCP netconn without block a task and use events on netconn to react. I test it and it is work well. It is manage multiple local server and client. I am not sure if it is the best way to do it. I take any advice.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,448,2017-09-28T16:03:20Z,,2017-10-13T13:31:08Z,OPEN,False,706,1,9,https://github.com/cdbrkfxrpt,Implemented C++11 stype wrapper and example.,2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/448,https://github.com/cdbrkfxrpt,1,https://github.com/SuperHouse/esp-open-rtos/pull/448,"Implemented an interface which encapsulates task creation without having to use inheritance, which imho is cleaner to use. Also, deleting tasks is now encapsulated in the destructor so if object goes out of scope, its task is also destroyed - useful for cleaner init tasks.","Implemented an interface which encapsulates task creation without having to use inheritance, which imho is cleaner to use. Also, deleting tasks is now encapsulated in the destructor so if object goes out of scope, its task is also destroyed - useful for cleaner init tasks.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,449,2017-09-30T20:47:30Z,2017-10-08T18:02:40Z,2017-10-08T18:02:43Z,MERGED,True,32,12,3,https://github.com/eboskma,Added support for RGBW NeoPixels,31,[],https://github.com/SuperHouse/esp-open-rtos/pull/449,https://github.com/eboskma,1,https://github.com/SuperHouse/esp-open-rtos/pull/449,This adds support for RGBW NeoPixels with the SK6812 controller.,This adds support for RGBW NeoPixels with the SK6812 controller.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,449,2017-09-30T20:47:30Z,2017-10-08T18:02:40Z,2017-10-08T18:02:43Z,MERGED,True,32,12,3,https://github.com/eboskma,Added support for RGBW NeoPixels,31,[],https://github.com/SuperHouse/esp-open-rtos/pull/449,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/449#issuecomment-333698445,This adds support for RGBW NeoPixels with the SK6812 controller.,I believe that example should be left untouched (RGB mode by default),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,449,2017-09-30T20:47:30Z,2017-10-08T18:02:40Z,2017-10-08T18:02:43Z,MERGED,True,32,12,3,https://github.com/eboskma,Added support for RGBW NeoPixels,31,[],https://github.com/SuperHouse/esp-open-rtos/pull/449,https://github.com/eboskma,3,https://github.com/SuperHouse/esp-open-rtos/pull/449#issuecomment-334554782,This adds support for RGBW NeoPixels with the SK6812 controller.,I've updated the example to use RGB pixels.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,449,2017-09-30T20:47:30Z,2017-10-08T18:02:40Z,2017-10-08T18:02:43Z,MERGED,True,32,12,3,https://github.com/eboskma,Added support for RGBW NeoPixels,31,[],https://github.com/SuperHouse/esp-open-rtos/pull/449,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/449#issuecomment-334601895,This adds support for RGBW NeoPixels with the SK6812 controller.,I see a few people that seem to have not base patches off the current master branch. This can be corrected with a sequence such as: git checkout master git fetch upstream git merge upstream/master git push git checkout <mybanch> git rebase master git push -f <mybranch>. If your situation is more complex and you need to move just a few patches from some working branch then look at git rebase --onto master ...,True,"{'THUMBS_UP': ['https://github.com/kanflo', 'https://github.com/UncleRus', 'https://github.com/tgies']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,449,2017-09-30T20:47:30Z,2017-10-08T18:02:40Z,2017-10-08T18:02:43Z,MERGED,True,32,12,3,https://github.com/eboskma,Added support for RGBW NeoPixels,31,[],https://github.com/SuperHouse/esp-open-rtos/pull/449,https://github.com/UncleRus,5,https://github.com/SuperHouse/esp-open-rtos/pull/449#issuecomment-335026152,This adds support for RGBW NeoPixels with the SK6812 controller.,Squashed & merged,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,450,2017-10-01T00:01:10Z,2017-10-01T21:56:36Z,2017-10-01T21:56:36Z,CLOSED,False,5162,0,31,https://github.com/gschorcht,Driver for Bosch BME680 sensor added,41,[],https://github.com/SuperHouse/esp-open-rtos/pull/450,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/450,"I have written a driver for the brand new and famous product from Bosch Sensortronic's, the BME680 sensor. It integrates temperature, pressure, humidity and gas sensors with high accuracy within a single unit. It is a very low-power device developed specifically for mobile applications and wearables where size and low power consumption are key requirements.
Please add the library to the master branch of the repository.
p.s. Because I had to learn using github (I used CVS for more than 20 years :-( ) I made some mistakes, e.g., I did not create separate branches for my developments. So I uploaded SHT3x driver developed some weeks ago to the master branch from which I drew now a branch for uploading this BME680 driver. So I think uploaded files of the SHT3x driver that are part of an open pull request are probably also part of this pull request :-(","I have written a driver for the brand new and famous product from Bosch Sensortronic's, the BME680 sensor. It integrates temperature, pressure, humidity and gas sensors with high accuracy within a single unit. It is a very low-power device developed specifically for mobile applications and wearables where size and low power consumption are key requirements.
Please add the library to the master branch of the repository.
p.s. Because I had to learn using github (I used CVS for more than 20 years :-( ) I made some mistakes, e.g., I did not create separate branches for my developments. So I uploaded SHT3x driver developed some weeks ago to the master branch from which I drew now a branch for uploading this BME680 driver. So I think uploaded files of the SHT3x driver that are part of an open pull request are probably also part of this pull request :-(",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,450,2017-10-01T00:01:10Z,2017-10-01T21:56:36Z,2017-10-01T21:56:36Z,CLOSED,False,5162,0,31,https://github.com/gschorcht,Driver for Bosch BME680 sensor added,41,[],https://github.com/SuperHouse/esp-open-rtos/pull/450,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/450#issuecomment-333372519,"I have written a driver for the brand new and famous product from Bosch Sensortronic's, the BME680 sensor. It integrates temperature, pressure, humidity and gas sensors with high accuracy within a single unit. It is a very low-power device developed specifically for mobile applications and wearables where size and low power consumption are key requirements.
Please add the library to the master branch of the repository.
p.s. Because I had to learn using github (I used CVS for more than 20 years :-( ) I made some mistakes, e.g., I did not create separate branches for my developments. So I uploaded SHT3x driver developed some weeks ago to the master branch from which I drew now a branch for uploading this BME680 driver. So I think uploaded files of the SHT3x driver that are part of an open pull request are probably also part of this pull request :-(","@gschorcht Have you learnt about git rebase -i master yet? That makes it easy to squash multiple patches into just one, for example to clean it up to get it ready to submit. After that it will be necessary to do a force push git push -f bme680-drive. Also take a look a git cherry-pick, useful for moving some patches across to a new branch to split them and then git rebase -i can be used to removed them from the prior branch. You can use that to make a branch for the sht3x patches and get them off your master branch, then reset your master branch back to the upstream master.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,450,2017-10-01T00:01:10Z,2017-10-01T21:56:36Z,2017-10-01T21:56:36Z,CLOSED,False,5162,0,31,https://github.com/gschorcht,Driver for Bosch BME680 sensor added,41,[],https://github.com/SuperHouse/esp-open-rtos/pull/450,https://github.com/gschorcht,3,https://github.com/SuperHouse/esp-open-rtos/pull/450#issuecomment-333409867,"I have written a driver for the brand new and famous product from Bosch Sensortronic's, the BME680 sensor. It integrates temperature, pressure, humidity and gas sensors with high accuracy within a single unit. It is a very low-power device developed specifically for mobile applications and wearables where size and low power consumption are key requirements.
Please add the library to the master branch of the repository.
p.s. Because I had to learn using github (I used CVS for more than 20 years :-( ) I made some mistakes, e.g., I did not create separate branches for my developments. So I uploaded SHT3x driver developed some weeks ago to the master branch from which I drew now a branch for uploading this BME680 driver. So I think uploaded files of the SHT3x driver that are part of an open pull request are probably also part of this pull request :-(","I closed the pull request for the moment because I'm thinking about a redesign of the drive before it is merged in the master branch. The redesign should make the driver interface clearer and easier to use. I'm not sure yet, a possible change could be to remove the implicit mean value computation during each measurement cycle and to make it the responsibility of the user, if this is required.
Since the driver was still not merged into the master branch there shouldn't be any compatibility problems.
I will readd the driver and open a new pull request once the redesign has been finished.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,451,2017-10-02T08:44:13Z,2018-01-18T07:16:54Z,2018-01-18T07:16:54Z,CLOSED,False,58,3,10,https://github.com/ccbruce0812,Pull new stuffs from origin repo.,14,[],https://github.com/SuperHouse/esp-open-rtos/pull/451,https://github.com/ccbruce0812,1,https://github.com/SuperHouse/esp-open-rtos/pull/451,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,451,2017-10-02T08:44:13Z,2018-01-18T07:16:54Z,2018-01-18T07:16:54Z,CLOSED,False,58,3,10,https://github.com/ccbruce0812,Pull new stuffs from origin repo.,14,[],https://github.com/SuperHouse/esp-open-rtos/pull/451,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/451#issuecomment-334966323,,"Hi @ccbruce0812. When raising a pull request, please be descriptive of what you want to merge and keep one feature to each PR. There are some good stuff in this PR but also some that will never get merged, such as the change in lwip/lwip. To be nit picky, I also spotted some tab indentation.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/453,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-335000183,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","Could you please rebase this and squash it into a single commit because a lot has change, lot been deleted etc. So git rebase -i master, and then (except for the first commit) change the first letter to s, and the git push -f ... sht3x-driver. Back it up first, just in case, if new to this.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/gschorcht,3,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-335005953,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","@ourairquality
The version I commited on Oct 3rd were that one which had the wrong abstraction level from your point of view. Based on your suggestions, I changed it completly and checked in these changes on Oct 5th. I had to delete unsuitable examples. This version is therefore obsolete.
The version from Oct 5th has been reviewed by you, many thanks again. The changes I checked in yesterday do not consider your suggestion you made in this review. I would like to discuss some of them a bit before I start to change again a lot. Some of them I do not agree completely.
My problem with git is, that I don't have git and a checked out version locally. I just use the web front end for uploads. I'm not sure how to make an existing local directory to an checked out version of a repository without getting conflicts and preserves my local changes.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/gschorcht,4,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-336153957,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","@ourairquality
I have changed the driver interface according to most of your suggestions. Furthermore, I rebased the master as  asked for. I hope that everything is ok now for merging the driver into the master.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-336325959,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","Thank you for the changes. It looks usable in my own app now, so that makes me happy. I have some sht3x on hand and hope to find time to test this soon. There are some white space issues, lines end in white space, a small nit that could be cleaned up later.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/gschorcht,6,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-338265577,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","@ourairquality
Finally, I have squashed my last changes based on some of your suggestions and all small changes before into a single commit. Now, I would freeze the code for merging. I hope, you can live with it, it seems to be a compromise of your suggestions and my original code.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/gschorcht,7,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-338417909,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.",I changed all things according to your suggestions even though I am not really lucky with all of them. I hope it's ok now for merge.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/ourairquality,8,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-338437479,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","This is not my project and I do not decide what lands or not. I took a particular interest in this driver because I will be supporting the device. I had been trying to communicate that, that you should design it as you wish. Sorry I don't want to be seen as blocking such work and do not want to comment further on this.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/gschorcht,9,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-338469252,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","@ourairquality
I am really sorry that your are feeling to be the blocking, this wasn't my intention. I would like to thank you again for all the review work and your suggestions. I'm really very grateful. I appreciated it to discussed the different approaches with you. For me it is always very important to get a view from another perspective than my own. And I think the driver is now in a good state were it can be used by different users.
I hope that the driver as it is also somewhat usefull for you even though you would have designed it slightly different.
As you know, I like abstraction and to keep the user away from details. Therefore, I added one single function sht3x_measure that does the complete measurement in single shot mode with high repeatability. I believe that is the most easiest way to use the driver for users that don't want to know to many details how the sensor works.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,453,2017-10-03T11:38:21Z,2017-10-23T21:39:49Z,2017-10-23T21:39:49Z,MERGED,True,1236,0,7,https://github.com/gschorcht,Driver for Sensirion SHT3x temperature and humidity sensor readded,20,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/453,https://github.com/kanflo,10,https://github.com/SuperHouse/esp-open-rtos/pull/453#issuecomment-338804824,"I have written a driver and some examples for Sensirion SHT3x temperature and humidity sensors connected via I2C.
This is a redesigned version of the driver. The driver was already added temporarily some weeks ago. By pull request #444 I asked for merge into the master branch. However, due to some difficulties with separate development branches and a redesign of the drivers interface, I deleted the files and closed pull request #444 before the merge happened.
Now, the interface redesign has been finished and I am asking again for a merge into the master.","While I have no sensor to test with I'd like to thank both of you @gschorcht and @ourairquality for your hard work on this PR. I am impressed with the level of documentation on this ""extras""",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,455,2017-10-07T20:34:33Z,2017-10-10T13:37:44Z,2017-10-10T13:37:44Z,MERGED,True,5,0,1,https://github.com/kanflo,Added fflush for examples/terminal echo,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/455,https://github.com/kanflo,1,https://github.com/SuperHouse/esp-open-rtos/pull/455,"As the terminal example was meant to echo characters typed I added fflush since the line buffering policy has changed.
While on the topic, should we make IRQ driven stdin standard (which would fix #454)?","As the terminal example was meant to echo characters typed I added fflush since the line buffering policy has changed.
While on the topic, should we make IRQ driven stdin standard (which would fix #454)?",True,{'THUMBS_UP': ['https://github.com/ourairquality']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,457,2017-10-08T03:41:06Z,2017-10-18T17:33:33Z,2017-10-18T17:33:38Z,MERGED,True,102,13,12,https://github.com/ourairquality,lwip: define LWIP_POSIX_SOCKETS_IO_NAMES as zero,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/457,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/457,"This patch gets the newlib standard stream descriptors playing well with the lwip socket descriptors and the spiffs file descriptors. The LWIP_SOCKET_OFFSET is now defined to be 3, rather than zero, to avoid clashing with the standard stream descriptors, and the SPIFFS_FILEHDL_OFFSET is bumped up to start after the lwip descriptors.
This is not yet ready to merge. I need to seek help from upstream lwip on the error that was disabled to allow this to build, why LWIP_SOCKET_OFFSET can not be used with an external FD_SET. A quick inspection did not find many problems, so I am probably missing something. But perhaps this will allow progress and more testing and feedback.
See also #445","This patch gets the newlib standard stream descriptors playing well with the lwip socket descriptors and the spiffs file descriptors. The LWIP_SOCKET_OFFSET is now defined to be 3, rather than zero, to avoid clashing with the standard stream descriptors, and the SPIFFS_FILEHDL_OFFSET is bumped up to start after the lwip descriptors.
This is not yet ready to merge. I need to seek help from upstream lwip on the error that was disabled to allow this to build, why LWIP_SOCKET_OFFSET can not be used with an external FD_SET. A quick inspection did not find many problems, so I am probably missing something. But perhaps this will allow progress and more testing and feedback.
See also #445",True,{'THUMBS_UP': ['https://github.com/kanflo']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,457,2017-10-08T03:41:06Z,2017-10-18T17:33:33Z,2017-10-18T17:33:38Z,MERGED,True,102,13,12,https://github.com/ourairquality,lwip: define LWIP_POSIX_SOCKETS_IO_NAMES as zero,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/457,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/457#issuecomment-337212767,"This patch gets the newlib standard stream descriptors playing well with the lwip socket descriptors and the spiffs file descriptors. The LWIP_SOCKET_OFFSET is now defined to be 3, rather than zero, to avoid clashing with the standard stream descriptors, and the SPIFFS_FILEHDL_OFFSET is bumped up to start after the lwip descriptors.
This is not yet ready to merge. I need to seek help from upstream lwip on the error that was disabled to allow this to build, why LWIP_SOCKET_OFFSET can not be used with an external FD_SET. A quick inspection did not find many problems, so I am probably missing something. But perhaps this will allow progress and more testing and feedback.
See also #445","The lwip change has now been accepted upstream and merged, so this might now be considered for merging.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,457,2017-10-08T03:41:06Z,2017-10-18T17:33:33Z,2017-10-18T17:33:38Z,MERGED,True,102,13,12,https://github.com/ourairquality,lwip: define LWIP_POSIX_SOCKETS_IO_NAMES as zero,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/457,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/457#issuecomment-337667657,"This patch gets the newlib standard stream descriptors playing well with the lwip socket descriptors and the spiffs file descriptors. The LWIP_SOCKET_OFFSET is now defined to be 3, rather than zero, to avoid clashing with the standard stream descriptors, and the SPIFFS_FILEHDL_OFFSET is bumped up to start after the lwip descriptors.
This is not yet ready to merge. I need to seek help from upstream lwip on the error that was disabled to allow this to build, why LWIP_SOCKET_OFFSET can not be used with an external FD_SET. A quick inspection did not find many problems, so I am probably missing something. But perhaps this will allow progress and more testing and feedback.
See also #445",Great!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/nochkin,1,https://github.com/SuperHouse/esp-open-rtos/pull/458,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.","This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/458#issuecomment-335134643,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.","Might adding the package zlib1g-dev to the .travis.yml file fix the build error, the missing zlib.h?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/458#issuecomment-335338644,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.","make[2]: Entering directory `/home/travis/build/SuperHouse/esp-open-rtos/extras/libesphttpd/libesphttpd/espfs/mkespfsimage'
ccache xtensa-lx106-elf-gcc -I../../lib/heatshrink -I../../include/libesphttpd -I.. -std=gnu99 -DESPFS_GZIP -DESPFS_HEATSHRINK   -c -o main.o main.c
main.c:26:18: fatal error: zlib.h: No such file or directory
 #include <zlib.h>
                  ^
compilation terminated.

xtensa-lx106-elf-gcc
Wrong compiler for mkespfsimage",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/nochkin,4,https://github.com/SuperHouse/esp-open-rtos/pull/458#issuecomment-335339173,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.","Yes, I noticed that it's trying to use xtensa instead of local gcc. Trying to work it out.
I just call ""make -C"" in the component.mk, but I guess I need to pass some variable to force it. Maybe just doing CC=gcc, but not sure how portable it is.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/kanflo,5,https://github.com/SuperHouse/esp-open-rtos/pull/458#issuecomment-335492719,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.",Great work @nochkin. The CaptDNS does not work for me (tested on an iPhone and a Mac). Has anyone else tried?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/nochkin,6,https://github.com/SuperHouse/esp-open-rtos/pull/458#issuecomment-335523819,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.","@kanflo, kudos to @Spritetm mostly.
I did not try the CaptDNS, that's why I did not include it in the list.
I'll check it out maybe later today and see if I could debug/fix it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/kanflo,7,https://github.com/SuperHouse/esp-open-rtos/pull/458#issuecomment-335559700,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.","@nochkin,  FYI extras/wificfg include a fully functional (for me) captive DNS.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/nochkin,8,https://github.com/SuperHouse/esp-open-rtos/pull/458#issuecomment-335585011,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.","@kanflo, you are right. Now since you told me about it, I remember I saw it.
Frankly, I don't use this feature in my own projects, that's why I completely forgot about it.
I'm sure the CaptDNS works fine in libesphttpd initially. I'll see if it's easy to adapt/fix it, this way we'll have an alternative with http server embedded.
Thank you for pointing it out for me.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,458,2017-10-09T03:37:03Z,2017-10-23T21:59:14Z,2017-10-23T21:59:14Z,MERGED,True,1192,0,30,https://github.com/nochkin,Add libesphttpd to extras and supporting example,9,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/458,https://github.com/UncleRus,9,https://github.com/SuperHouse/esp-open-rtos/pull/458#issuecomment-335784746,"This is a fork based on the original work https://github.com/Spritetm/libesphttpd
It was modified to fit for esp-open-rtos.
Things currently work:

HTTP web server
Static files using heatshrink and gzip compression
Templates
CGI dynamic content
WebSocket
All built-in tests passed

""Bonus"" features:

WiFi configuration using web interface
OTA update over http using a simple curl command (implemented using extras/rboot-ota)

It includes an example to show the features.",Closing/reopening to trigger CI build,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,459,2017-10-10T14:03:29Z,,2017-10-12T21:20:50Z,OPEN,False,62,17,3,https://github.com/kanflo,wificfg bugfix and enhancements,2,['wifi'],https://github.com/SuperHouse/esp-open-rtos/pull/459,https://github.com/kanflo,1,https://github.com/SuperHouse/esp-open-rtos/pull/459,"I have started using the excellent wificfg code and found some ""undocumented features"". The Espressif code gets upset if the SSID contains certain characters or is less than 8 characters in length. This would result in an unsecured AP called ""ESP_<last_three_bytes_of_macaddr>""
Additionally, it is not possible to change the SSID following a first init unless the entire flash is erased. I added a note on that.
I took the liberty to redefine wificfg_init to return a bool indicating if the AP start was successful. My application would like to know this.
sanitize_ssid clears up the SSID so as not to upset the Espressif code.
A bug was fixed in the wifi_sta_enable / wifi_ap_enable logic.
While on the topic I would like to discuss extras/wificfg. I would very much like to move everything under content/ and the entire wificfg_dispatch_list to the application inexamples/wificfg. The reason is to be able to use a ""clean"" wificfg extras and add content per application.","I have started using the excellent wificfg code and found some ""undocumented features"". The Espressif code gets upset if the SSID contains certain characters or is less than 8 characters in length. This would result in an unsecured AP called ""ESP_<last_three_bytes_of_macaddr>""
Additionally, it is not possible to change the SSID following a first init unless the entire flash is erased. I added a note on that.
I took the liberty to redefine wificfg_init to return a bool indicating if the AP start was successful. My application would like to know this.
sanitize_ssid clears up the SSID so as not to upset the Espressif code.
A bug was fixed in the wifi_sta_enable / wifi_ap_enable logic.
While on the topic I would like to discuss extras/wificfg. I would very much like to move everything under content/ and the entire wificfg_dispatch_list to the application inexamples/wificfg. The reason is to be able to use a ""clean"" wificfg extras and add content per application.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,459,2017-10-10T14:03:29Z,,2017-10-12T21:20:50Z,OPEN,False,62,17,3,https://github.com/kanflo,wificfg bugfix and enhancements,2,['wifi'],https://github.com/SuperHouse/esp-open-rtos/pull/459,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/459#issuecomment-335529568,"I have started using the excellent wificfg code and found some ""undocumented features"". The Espressif code gets upset if the SSID contains certain characters or is less than 8 characters in length. This would result in an unsecured AP called ""ESP_<last_three_bytes_of_macaddr>""
Additionally, it is not possible to change the SSID following a first init unless the entire flash is erased. I added a note on that.
I took the liberty to redefine wificfg_init to return a bool indicating if the AP start was successful. My application would like to know this.
sanitize_ssid clears up the SSID so as not to upset the Espressif code.
A bug was fixed in the wifi_sta_enable / wifi_ap_enable logic.
While on the topic I would like to discuss extras/wificfg. I would very much like to move everything under content/ and the entire wificfg_dispatch_list to the application inexamples/wificfg. The reason is to be able to use a ""clean"" wificfg extras and add content per application.","Great work!
Just one note: sanItize, not sanEtize
https://www.merriam-webster.com/dictionary/sanitize",True,{'LAUGH': ['https://github.com/kanflo']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,459,2017-10-10T14:03:29Z,,2017-10-12T21:20:50Z,OPEN,False,62,17,3,https://github.com/kanflo,wificfg bugfix and enhancements,2,['wifi'],https://github.com/SuperHouse/esp-open-rtos/pull/459,https://github.com/kanflo,3,https://github.com/SuperHouse/esp-open-rtos/pull/459#issuecomment-335558985,"I have started using the excellent wificfg code and found some ""undocumented features"". The Espressif code gets upset if the SSID contains certain characters or is less than 8 characters in length. This would result in an unsecured AP called ""ESP_<last_three_bytes_of_macaddr>""
Additionally, it is not possible to change the SSID following a first init unless the entire flash is erased. I added a note on that.
I took the liberty to redefine wificfg_init to return a bool indicating if the AP start was successful. My application would like to know this.
sanitize_ssid clears up the SSID so as not to upset the Espressif code.
A bug was fixed in the wifi_sta_enable / wifi_ap_enable logic.
While on the topic I would like to discuss extras/wificfg. I would very much like to move everything under content/ and the entire wificfg_dispatch_list to the application inexamples/wificfg. The reason is to be able to use a ""clean"" wificfg extras and add content per application.","The mechanism behind changing SSID needs to be looked into. I tried #458 and noted the SSID changed. It could be that whenever AP/STA mode is changed, the Espressif code persists the SSID change that is used to name the AP.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,459,2017-10-10T14:03:29Z,,2017-10-12T21:20:50Z,OPEN,False,62,17,3,https://github.com/kanflo,wificfg bugfix and enhancements,2,['wifi'],https://github.com/SuperHouse/esp-open-rtos/pull/459,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/459#issuecomment-335667986,"I have started using the excellent wificfg code and found some ""undocumented features"". The Espressif code gets upset if the SSID contains certain characters or is less than 8 characters in length. This would result in an unsecured AP called ""ESP_<last_three_bytes_of_macaddr>""
Additionally, it is not possible to change the SSID following a first init unless the entire flash is erased. I added a note on that.
I took the liberty to redefine wificfg_init to return a bool indicating if the AP start was successful. My application would like to know this.
sanitize_ssid clears up the SSID so as not to upset the Espressif code.
A bug was fixed in the wifi_sta_enable / wifi_ap_enable logic.
While on the topic I would like to discuss extras/wificfg. I would very much like to move everything under content/ and the entire wificfg_dispatch_list to the application inexamples/wificfg. The reason is to be able to use a ""clean"" wificfg extras and add content per application.","It works for me. Setting the SSID to ""<_+- _>"" and Android shows a secure connection and it connects with the password. This is an SSID shorter than 8 character and using all the characters noted in the sanitiser list. If there is a problem then I think more information is needed. I also don't see any problem changing the SSID - it does need a restart to take effect.
Btw The goal with having a separate dispatch list and content for the code under extras is to allow all apps that uses this to benefit from fixes and improvements without each having to transfer these into their own local copy - that is the whole point of sharing code. If you want to make extensive app specific changes then perhaps it would be best to just copy the lot into an app specific location rather than using the generic version from extras.
Further it does firstly check the app specific dispatch first, so an app can opt in to overriding the default handlers.
I suggest you try to work with it a little before you start to rework it all.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,459,2017-10-10T14:03:29Z,,2017-10-12T21:20:50Z,OPEN,False,62,17,3,https://github.com/kanflo,wificfg bugfix and enhancements,2,['wifi'],https://github.com/SuperHouse/esp-open-rtos/pull/459,https://github.com/UncleRus,5,https://github.com/SuperHouse/esp-open-rtos/pull/459#issuecomment-335792741,"I have started using the excellent wificfg code and found some ""undocumented features"". The Espressif code gets upset if the SSID contains certain characters or is less than 8 characters in length. This would result in an unsecured AP called ""ESP_<last_three_bytes_of_macaddr>""
Additionally, it is not possible to change the SSID following a first init unless the entire flash is erased. I added a note on that.
I took the liberty to redefine wificfg_init to return a bool indicating if the AP start was successful. My application would like to know this.
sanitize_ssid clears up the SSID so as not to upset the Espressif code.
A bug was fixed in the wifi_sta_enable / wifi_ap_enable logic.
While on the topic I would like to discuss extras/wificfg. I would very much like to move everything under content/ and the entire wificfg_dispatch_list to the application inexamples/wificfg. The reason is to be able to use a ""clean"" wificfg extras and add content per application.",Closing/reopening to trigger CI build,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,459,2017-10-10T14:03:29Z,,2017-10-12T21:20:50Z,OPEN,False,62,17,3,https://github.com/kanflo,wificfg bugfix and enhancements,2,['wifi'],https://github.com/SuperHouse/esp-open-rtos/pull/459,https://github.com/kanflo,6,https://github.com/SuperHouse/esp-open-rtos/pull/459#issuecomment-336203549,"I have started using the excellent wificfg code and found some ""undocumented features"". The Espressif code gets upset if the SSID contains certain characters or is less than 8 characters in length. This would result in an unsecured AP called ""ESP_<last_three_bytes_of_macaddr>""
Additionally, it is not possible to change the SSID following a first init unless the entire flash is erased. I added a note on that.
I took the liberty to redefine wificfg_init to return a bool indicating if the AP start was successful. My application would like to know this.
sanitize_ssid clears up the SSID so as not to upset the Espressif code.
A bug was fixed in the wifi_sta_enable / wifi_ap_enable logic.
While on the topic I would like to discuss extras/wificfg. I would very much like to move everything under content/ and the entire wificfg_dispatch_list to the application inexamples/wificfg. The reason is to be able to use a ""clean"" wificfg extras and add content per application.","That is very strange. Obviously I tried the very simple example of changing a dash to an underscore in my SSID and reran the code. With the result of the ESP starting up in unsecured ESP_xxxxxx mode.
Regarding extras/wificfg it really should be done in two steps, the first being to include the code to handle the dispatch engine and the second step including all the vanilla HTML. The HTML obviously should be shared but one should not have to hack a copy of wificfg.c in order to get rid of it. That's not good code sharing ;)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,459,2017-10-10T14:03:29Z,,2017-10-12T21:20:50Z,OPEN,False,62,17,3,https://github.com/kanflo,wificfg bugfix and enhancements,2,['wifi'],https://github.com/SuperHouse/esp-open-rtos/pull/459,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/459#issuecomment-336274587,"I have started using the excellent wificfg code and found some ""undocumented features"". The Espressif code gets upset if the SSID contains certain characters or is less than 8 characters in length. This would result in an unsecured AP called ""ESP_<last_three_bytes_of_macaddr>""
Additionally, it is not possible to change the SSID following a first init unless the entire flash is erased. I added a note on that.
I took the liberty to redefine wificfg_init to return a bool indicating if the AP start was successful. My application would like to know this.
sanitize_ssid clears up the SSID so as not to upset the Espressif code.
A bug was fixed in the wifi_sta_enable / wifi_ap_enable logic.
While on the topic I would like to discuss extras/wificfg. I would very much like to move everything under content/ and the entire wificfg_dispatch_list to the application inexamples/wificfg. The reason is to be able to use a ""clean"" wificfg extras and add content per application.","The SSID works for me. Have you re-tested it with the fixes suggested to be adopted. There might be subtle bugs in libmain, and if so they need fixing, have you tried to trace the paths? Do other wpa_supplicants have any such limitations on the SSID?? Perhaps I am missing something, but why would the esp library specifically bother changing the security mode if these characters were used??
The wificfg http server is really minimal. It handles just one connection at a time. It uses one 54 byte stack allocated buffer for all its parsing and output. It does not rewrite html, no pattern matching etc, rather has the pieces in an array. All five of the html files included are just that, arrays of strings. There is no static html content.
As already noted, you can override the default content files per-application and individually, you do not have to copy the lot, but if you change the order or number of pieces in an any of the default content then yes you will need to change the code which is in a single file so you will need app specific code changes to the wificfg code. If people need some common changes then perhaps some flags can be added to effect that.
Perhaps you would prefer the esphttpd. I gave it a quick try, and it was in a very poor state, not usable, and was crashing the device running out of memory with only itself running. The wificfg is what it is for a reason, it is an extremely low overhead solution, and thus it might not ever meet your expectations in terms of abstraction. That's ok, just come up with another separate solution, however it would likely not be usable in my main app as memory is already very tight.
I really appreciate people looking over the code, and am glad you found some issues and reported them. But would not adopt everything in this patch, would not sanitise the strings, would not move the default content, and do not consider it an error if no wifi is started. You have not addressed any of this feedback.
The AP structures are not statically allocated, so is uses more memory when enabled. The station mode is more reliable, the main operating mode. Wificfg allows the AP mode to be disable when the station mode is working, but at the next restart, and that is a good thing.
People in my community do need to disable wifi routinely, walking around mapping, or locating next to sensitive equipment, and the wificfg allows both the AP and station modes to be disable for a number of restarts for such use cases.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,460,2017-10-10T15:08:00Z,2017-10-10T16:22:20Z,2017-10-25T11:21:47Z,MERGED,True,1,6,1,https://github.com/UncleRus,Minor fixes in dhcpserver.c,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/460,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/460,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,461,2017-10-10T20:12:57Z,2017-10-10T22:21:48Z,2017-10-25T11:21:47Z,MERGED,True,2,2,2,https://github.com/UncleRus,Fix example broken by DHCP update,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/461,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/461,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,462,2017-10-11T08:17:02Z,2017-10-12T12:42:35Z,2017-10-25T11:14:37Z,MERGED,True,94,87,3,https://github.com/UncleRus,"I2C code formatting, README fix",2,['extra'],https://github.com/SuperHouse/esp-open-rtos/pull/462,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/462,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,463,2017-10-11T10:43:22Z,2017-10-11T11:40:07Z,2017-10-25T11:21:47Z,MERGED,True,14,16,6,https://github.com/UncleRus,Revert #426,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/463,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/463,See #461 (comment),See #461 (comment),True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,464,2017-10-12T02:10:45Z,2017-10-18T18:56:18Z,2017-10-18T18:56:18Z,MERGED,True,9,7,1,https://github.com/ourairquality,wificfg: correct a few initialization issues,1,"['extra', 'wifi']",https://github.com/SuperHouse/esp-open-rtos/pull/464,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/464,"Correct checking of the AP password and SSID lengths.


Only enable AP mode if it is really configured enabled.


Only start the http server if wifi is enabled.


These are the fixes from #459 that I would adopt, thank you to @kanflo","Correct checking of the AP password and SSID lengths.


Only enable AP mode if it is really configured enabled.


Only start the http server if wifi is enabled.


These are the fixes from #459 that I would adopt, thank you to @kanflo",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,465,2017-10-12T19:58:10Z,2017-10-25T08:01:41Z,2017-10-25T11:15:48Z,MERGED,True,53,22,3,https://github.com/UncleRus,PCF8591 driver update,1,"['enhancement', 'extra']",https://github.com/SuperHouse/esp-open-rtos/pull/465,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/465,"Added support for configuring analog inputs
Added support for DAC output","Added support for configuring analog inputs
Added support for DAC output",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,466,2017-10-12T23:04:52Z,2017-10-18T19:25:49Z,2017-10-25T11:23:00Z,MERGED,True,623,608,28,https://github.com/UncleRus,"Code formatted, minor fixes",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/466,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/466,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,466,2017-10-12T23:04:52Z,2017-10-18T19:25:49Z,2017-10-25T11:23:00Z,MERGED,True,623,608,28,https://github.com/UncleRus,"Code formatted, minor fixes",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/466,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/466#issuecomment-336382256,,"Hi @UncleRus , i see you often do ""code format"".  Do you know source code beautifer  uncrustify ?
official link.
github.
This soft can format like you want the source with a presetting file ( A lot of settings to do).
I was asking myself if we can add a uncrustify config file (BSD style and more ) to esp open rtos repository.
Some tool can help to do this file like this one : tool
It is just a suggest, i am not sure if it is really usefull or the inconvenient to use it.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,466,2017-10-12T23:04:52Z,2017-10-18T19:25:49Z,2017-10-25T11:23:00Z,MERGED,True,623,608,28,https://github.com/UncleRus,"Code formatted, minor fixes",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/466,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/466#issuecomment-336446843,,fwiw the lwip project appears to be using http://astyle.sourceforge.net/ to clean up the code format,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,466,2017-10-12T23:04:52Z,2017-10-18T19:25:49Z,2017-10-25T11:23:00Z,MERGED,True,623,608,28,https://github.com/UncleRus,"Code formatted, minor fixes",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/466,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/466#issuecomment-337701348,,Thanks @UncleRus!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,469,2017-10-16T17:03:19Z,2017-11-07T07:47:59Z,2017-11-07T07:47:59Z,MERGED,True,3081,0,12,https://github.com/gschorcht,Driver for Bosch Sensortec BME680 added,12,[],https://github.com/SuperHouse/esp-open-rtos/pull/469,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/469,"I have written a driver for the brand new Bosch Sensortec BME680. BME680 is an ulta-low-power environmental sensor that integrates temperature, pressure, humidity and gas sensors in only one unit.
Please add it to the master branch.","I have written a driver for the brand new Bosch Sensortec BME680. BME680 is an ulta-low-power environmental sensor that integrates temperature, pressure, humidity and gas sensors in only one unit.
Please add it to the master branch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,469,2017-10-16T17:03:19Z,2017-11-07T07:47:59Z,2017-11-07T07:47:59Z,MERGED,True,3081,0,12,https://github.com/gschorcht,Driver for Bosch Sensortec BME680 added,12,[],https://github.com/SuperHouse/esp-open-rtos/pull/469,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/469#issuecomment-337206835,"I have written a driver for the brand new Bosch Sensortec BME680. BME680 is an ulta-low-power environmental sensor that integrates temperature, pressure, humidity and gas sensors in only one unit.
Please add it to the master branch.","Could I ask if you know if the BME680 is readily available yet on small breakout boards etc? I would like to transition from the bme280 to the bme680 to get the voc sensor data too, and currently get them on small breakout board such as https://www.aliexpress.com/item/3In1-BME280-GY-BME280-Digital-Sensor-SPI-I2C-Humidity-Temperature-and-Barometric-Pressure-Sensor-Module-1/32817812439.html",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,469,2017-10-16T17:03:19Z,2017-11-07T07:47:59Z,2017-11-07T07:47:59Z,MERGED,True,3081,0,12,https://github.com/gschorcht,Driver for Bosch Sensortec BME680 added,12,[],https://github.com/SuperHouse/esp-open-rtos/pull/469,https://github.com/gschorcht,3,https://github.com/SuperHouse/esp-open-rtos/pull/469#issuecomment-337240270,"I have written a driver for the brand new Bosch Sensortec BME680. BME680 is an ulta-low-power environmental sensor that integrates temperature, pressure, humidity and gas sensors in only one unit.
Please add it to the master branch.","The only small breakout board I found til now is that from http://www.watterott.com/index.php?page=product&info=4329. Unfortunately, it is an online shop in Germany and shipping costs to foreign countries are quite expensive. I know, that a lot of people are already waiting for an Adafruit productt. But, there is no official information when it becomes available or whether it becomes available at all.",True,{'THUMBS_UP': ['https://github.com/ourairquality']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,469,2017-10-16T17:03:19Z,2017-11-07T07:47:59Z,2017-11-07T07:47:59Z,MERGED,True,3081,0,12,https://github.com/gschorcht,Driver for Bosch Sensortec BME680 added,12,[],https://github.com/SuperHouse/esp-open-rtos/pull/469,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/469#issuecomment-340293351,"I have written a driver for the brand new Bosch Sensortec BME680. BME680 is an ulta-low-power environmental sensor that integrates temperature, pressure, humidity and gas sensors in only one unit.
Please add it to the master branch.",This PR seems ready for merging if no-one disagrees.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,469,2017-10-16T17:03:19Z,2017-11-07T07:47:59Z,2017-11-07T07:47:59Z,MERGED,True,3081,0,12,https://github.com/gschorcht,Driver for Bosch Sensortec BME680 added,12,[],https://github.com/SuperHouse/esp-open-rtos/pull/469,https://github.com/gschorcht,5,https://github.com/SuperHouse/esp-open-rtos/pull/469#issuecomment-341903703,"I have written a driver for the brand new Bosch Sensortec BME680. BME680 is an ulta-low-power environmental sensor that integrates temperature, pressure, humidity and gas sensors in only one unit.
Please add it to the master branch.",Travis CI build just failed because of timout :-(,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,474,2017-10-21T14:25:15Z,2017-10-23T21:55:12Z,2017-10-23T21:55:12Z,MERGED,True,2,2,1,https://github.com/dora38,Fix a printf issue.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/474,https://github.com/dora38,1,https://github.com/SuperHouse/esp-open-rtos/pull/474,"When I pass a multi-line string to printf, only the first line is printed after PR #437 .
This fixes it.","When I pass a multi-line string to printf, only the first line is printed after PR #437 .
This fixes it.",True,{'THUMBS_UP': ['https://github.com/ourairquality']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,474,2017-10-21T14:25:15Z,2017-10-23T21:55:12Z,2017-10-23T21:55:12Z,MERGED,True,2,2,1,https://github.com/dora38,Fix a printf issue.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/474,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/474#issuecomment-338414375,"When I pass a multi-line string to printf, only the first line is printed after PR #437 .
This fixes it.","Thank you, this was introduced in #457 sorry. There is a similar issue in _read_r and would you like to roll in a fix for that too?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,474,2017-10-21T14:25:15Z,2017-10-23T21:55:12Z,2017-10-23T21:55:12Z,MERGED,True,2,2,1,https://github.com/dora38,Fix a printf issue.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/474,https://github.com/dora38,3,https://github.com/SuperHouse/esp-open-rtos/pull/474#issuecomment-338415629,"When I pass a multi-line string to printf, only the first line is printed after PR #437 .
This fixes it.","Yes. #457 . sorry for misleading.
And yes. _read_r should be fixed. Thanks!",True,{'THUMBS_UP': ['https://github.com/ourairquality']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,474,2017-10-21T14:25:15Z,2017-10-23T21:55:12Z,2017-10-23T21:55:12Z,MERGED,True,2,2,1,https://github.com/dora38,Fix a printf issue.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/474,https://github.com/kanflo,4,https://github.com/SuperHouse/esp-open-rtos/pull/474#issuecomment-338808181,"When I pass a multi-line string to printf, only the first line is printed after PR #437 .
This fixes it.","Ooh, shame on us and kudos to you for catching it. Thanks!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,475,2017-10-24T19:52:11Z,2017-10-29T14:13:49Z,2017-10-29T14:14:11Z,MERGED,True,54,31,6,https://github.com/UncleRus,Configurable I2C clock stretching,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/475,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/475,Fix for #471,Fix for #471,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,475,2017-10-24T19:52:11Z,2017-10-29T14:13:49Z,2017-10-29T14:14:11Z,MERGED,True,54,31,6,https://github.com/UncleRus,Configurable I2C clock stretching,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/475,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/475#issuecomment-340037114,Fix for #471,"Going to merge this one if no objections.
@gschorcht any comments?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,475,2017-10-24T19:52:11Z,2017-10-29T14:13:49Z,2017-10-29T14:14:11Z,MERGED,True,54,31,6,https://github.com/UncleRus,Configurable I2C clock stretching,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/475,https://github.com/gschorcht,3,https://github.com/SuperHouse/esp-open-rtos/pull/475#issuecomment-340111785,Fix for #471,"@UncleRus
Many thanks for your changes and all the work you have done in conjunction with them. Perhaps it would be better to leave function i2c_init as it is and to add a new function i2c_set_clock_stretching (bus, clock_stretch_counter)? This would avoid having to change all existing examples. In addition, the clock stretching counter could be changed at runtime if necessary.
i2c_init(I2C_BUS, I2C_SCL_PIN, I2C_SDA_PIN, I2C_FREQ_100K);
i2c_set_clock_stretching (I2C_BUS, MY_CLK_STRETCH);",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,478,2017-10-27T14:14:01Z,2017-10-27T14:52:17Z,2017-10-27T14:53:40Z,MERGED,True,0,1,1,https://github.com/Petezah,Fix a typo in ssd1306 driver that prevents compiling with c++ compiler,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/478,https://github.com/Petezah,1,https://github.com/SuperHouse/esp-open-rtos/pull/478,Simple fix.  Discovered while working on a project and thought others would find it useful.,Simple fix.  Discovered while working on a project and thought others would find it useful.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,478,2017-10-27T14:14:01Z,2017-10-27T14:52:17Z,2017-10-27T14:53:40Z,MERGED,True,0,1,1,https://github.com/Petezah,Fix a typo in ssd1306 driver that prevents compiling with c++ compiler,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/478,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/478#issuecomment-339994289,Simple fix.  Discovered while working on a project and thought others would find it useful.,Nice catch!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,479,2017-10-29T17:24:40Z,2017-12-11T03:00:54Z,2017-12-11T03:00:54Z,MERGED,True,1989,0,11,https://github.com/gschorcht,CCS811 driver added,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/479,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/479,"I have added a driver for the CCS811 indoor air quality sensor. It was tested with the Adafruit CCS811 Air Quality Sensor Breakout. Examples are mostly using only this sensor. But there is also an example where the CCS811 is used together with a SHT3x to determine the ambient temperature for the CCS811 gas measurement.
It would be great if you would merge it to the master :-)","I have added a driver for the CCS811 indoor air quality sensor. It was tested with the Adafruit CCS811 Air Quality Sensor Breakout. Examples are mostly using only this sensor. But there is also an example where the CCS811 is used together with a SHT3x to determine the ambient temperature for the CCS811 gas measurement.
It would be great if you would merge it to the master :-)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,481,2017-11-02T00:32:13Z,2017-12-05T07:15:18Z,2017-12-05T07:15:18Z,MERGED,True,72,69,2,https://github.com/maximkulkin,Fix mdnsresponder compilation issues,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/481,https://github.com/maximkulkin,1,https://github.com/SuperHouse/esp-open-rtos/pull/481,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,481,2017-11-02T00:32:13Z,2017-12-05T07:15:18Z,2017-12-05T07:15:18Z,MERGED,True,72,69,2,https://github.com/maximkulkin,Fix mdnsresponder compilation issues,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/481,https://github.com/maximkulkin,2,https://github.com/SuperHouse/esp-open-rtos/pull/481#issuecomment-348746319,,Hello?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,481,2017-11-02T00:32:13Z,2017-12-05T07:15:18Z,2017-12-05T07:15:18Z,MERGED,True,72,69,2,https://github.com/maximkulkin,Fix mdnsresponder compilation issues,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/481,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/481#issuecomment-349184251,,"I suggest merging this as-is, and I'll follow up with a minor clean up patch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,483,2017-11-14T07:25:56Z,2017-12-09T17:30:27Z,2017-12-09T17:30:27Z,CLOSED,False,6,3,1,https://github.com/gschorcht,I2C clock timing improvements - fix of #480,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/483,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/483,"Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.","Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,483,2017-11-14T07:25:56Z,2017-12-09T17:30:27Z,2017-12-09T17:30:27Z,CLOSED,False,6,3,1,https://github.com/gschorcht,I2C clock timing improvements - fix of #480,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/483,https://github.com/gschorcht,2,https://github.com/SuperHouse/esp-open-rtos/pull/483#issuecomment-347425492,"Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.","Clock timing before the modifications for logical 0:

Clock timing before the modifications for logical 1:

Same transfer after the modifications:",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,483,2017-11-14T07:25:56Z,2017-12-09T17:30:27Z,2017-12-09T17:30:27Z,CLOSED,False,6,3,1,https://github.com/gschorcht,I2C clock timing improvements - fix of #480,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/483,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/483#issuecomment-348759833,"Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.","At 160MHz, what are the signals before and after ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,483,2017-11-14T07:25:56Z,2017-12-09T17:30:27Z,2017-12-09T17:30:27Z,CLOSED,False,6,3,1,https://github.com/gschorcht,I2C clock timing improvements - fix of #480,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/483,https://github.com/gschorcht,4,https://github.com/SuperHouse/esp-open-rtos/pull/483#issuecomment-348763207,"Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.",How can I test it at 160 MHz?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,483,2017-11-14T07:25:56Z,2017-12-09T17:30:27Z,2017-12-09T17:30:27Z,CLOSED,False,6,3,1,https://github.com/gschorcht,I2C clock timing improvements - fix of #480,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/483,https://github.com/Zaltora,5,https://github.com/SuperHouse/esp-open-rtos/pull/483#issuecomment-348800011,"Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.","Put this in your main:
 sdk_system_update_cpu_freq(160);",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,483,2017-11-14T07:25:56Z,2017-12-09T17:30:27Z,2017-12-09T17:30:27Z,CLOSED,False,6,3,1,https://github.com/gschorcht,I2C clock timing improvements - fix of #480,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/483,https://github.com/gschorcht,6,https://github.com/SuperHouse/esp-open-rtos/pull/483#issuecomment-348801976,"Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.","Thanks, I will try tomorrow.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,483,2017-11-14T07:25:56Z,2017-12-09T17:30:27Z,2017-12-09T17:30:27Z,CLOSED,False,6,3,1,https://github.com/gschorcht,I2C clock timing improvements - fix of #480,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/483,https://github.com/gschorcht,7,https://github.com/SuperHouse/esp-open-rtos/pull/483#issuecomment-349378150,"Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.","After tuning the delays for 160 MHz system clock the results are:
for I2C_FREQ_80K:

for I2C_FREQ_100K

I2C_FREQ_400K:

Not perfect but much better than before, e.g. for I2C_FREQ_100K:",True,{'THUMBS_UP': ['https://github.com/Zaltora']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,483,2017-11-14T07:25:56Z,2017-12-09T17:30:27Z,2017-12-09T17:30:27Z,CLOSED,False,6,3,1,https://github.com/gschorcht,I2C clock timing improvements - fix of #480,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/483,https://github.com/flannelhead,8,https://github.com/SuperHouse/esp-open-rtos/pull/483#issuecomment-350491996,"Suggestion for improving clock timing a lot, at least for 80 MHz system clock and 80 kHz and 100 kHz I2C SCL clock.",@gschorcht Thank you for your work on this! I incorporated these changes in #503 which was recently merged - hence this PR can be closed.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,484,2017-11-17T19:48:00Z,2017-11-22T11:43:40Z,2017-11-22T11:43:40Z,MERGED,True,15,11,3,https://github.com/Zaltora,Ina3221 crash with NULL fix,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/484,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/484,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,485,2017-11-18T14:02:30Z,2017-12-02T06:54:05Z,2017-12-02T06:54:05Z,MERGED,True,91,32,4,https://github.com/Zaltora,pwm fix ,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/485,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/485,"-Special duty state 0 and UINT16_MAX   crash when you change frequency  fix
-IRAM handler improvements
-Replace printf by debug system
I tested with a motor.
Can someone confirm to me this:
If i put handler on  IRAM, it is improvement performance.  pwm interupt is called often.
No need to load function on flash with SPI transaction?","-Special duty state 0 and UINT16_MAX   crash when you change frequency  fix
-IRAM handler improvements
-Replace printf by debug system
I tested with a motor.
Can someone confirm to me this:
If i put handler on  IRAM, it is improvement performance.  pwm interupt is called often.
No need to load function on flash with SPI transaction?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,485,2017-11-18T14:02:30Z,2017-12-02T06:54:05Z,2017-12-02T06:54:05Z,MERGED,True,91,32,4,https://github.com/Zaltora,pwm fix ,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/485,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/485#issuecomment-345647736,"-Special duty state 0 and UINT16_MAX   crash when you change frequency  fix
-IRAM handler improvements
-Replace printf by debug system
I tested with a motor.
Can someone confirm to me this:
If i put handler on  IRAM, it is improvement performance.  pwm interupt is called often.
No need to load function on flash with SPI transaction?",recent update fix a crash too if you use pwm_start() when duty is 0 or UINT16_MAX.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,485,2017-11-18T14:02:30Z,2017-12-02T06:54:05Z,2017-12-02T06:54:05Z,MERGED,True,91,32,4,https://github.com/Zaltora,pwm fix ,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/485,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/485#issuecomment-346480974,"-Special duty state 0 and UINT16_MAX   crash when you change frequency  fix
-IRAM handler improvements
-Replace printf by debug system
I tested with a motor.
Can someone confirm to me this:
If i put handler on  IRAM, it is improvement performance.  pwm interupt is called often.
No need to load function on flash with SPI transaction?","Reworked pwm to work with a better behavior.
Only pwm_start()  and pwm_stop() can enable/disable the pwm signal , even with special case.
Set duty and frequency  will not start the pwm but if the pwm is already on, duty and frequency will be dynamically set.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,485,2017-11-18T14:02:30Z,2017-12-02T06:54:05Z,2017-12-02T06:54:05Z,MERGED,True,91,32,4,https://github.com/Zaltora,pwm fix ,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/485,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/485#issuecomment-348533499,"-Special duty state 0 and UINT16_MAX   crash when you change frequency  fix
-IRAM handler improvements
-Replace printf by debug system
I tested with a motor.
Can someone confirm to me this:
If i put handler on  IRAM, it is improvement performance.  pwm interupt is called often.
No need to load function on flash with SPI transaction?","The API work fine.
Good to merge if no objections.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,486,2017-11-19T21:32:30Z,2017-12-02T09:45:46Z,2017-12-02T09:45:46Z,MERGED,True,0,2,1,https://github.com/ekalyvio,Fixed Repeated-start in I2C,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/486,https://github.com/ekalyvio,1,https://github.com/SuperHouse/esp-open-rtos/pull/486,"The i2c_stop should not be there.
We have to keep the bus started and then issue again the i2c_start in order for the function to handle correctly the repeated-start.","The i2c_stop should not be there.
We have to keep the bus started and then issue again the i2c_start in order for the function to handle correctly the repeated-start.",True,"{'THUMBS_UP': ['https://github.com/Zaltora', 'https://github.com/gschorcht']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,486,2017-11-19T21:32:30Z,2017-12-02T09:45:46Z,2017-12-02T09:45:46Z,MERGED,True,0,2,1,https://github.com/ekalyvio,Fixed Repeated-start in I2C,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/486,https://github.com/ekalyvio,2,https://github.com/SuperHouse/esp-open-rtos/pull/486#issuecomment-345914705,"The i2c_stop should not be there.
We have to keep the bus started and then issue again the i2c_start in order for the function to handle correctly the repeated-start.","Bellow is a picture of how it is currently handled (the repeated-start). Observe in the yellow circle the stop condition and in the blue the start one.

This is wrong.
Bellow is the correct one:

Observe the SDA going high while SCL is low. Then SCL goes high. And Finally, SDA goes low (before SCL) and later SCL follows.
Quick further info on repeated start contains here",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,486,2017-11-19T21:32:30Z,2017-12-02T09:45:46Z,2017-12-02T09:45:46Z,MERGED,True,0,2,1,https://github.com/ekalyvio,Fixed Repeated-start in I2C,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/486,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/486#issuecomment-348680874,"The i2c_stop should not be there.
We have to keep the bus started and then issue again the i2c_start in order for the function to handle correctly the repeated-start.","Great work, @ekalyvio !",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,490,2017-11-22T15:23:46Z,,2019-05-06T19:03:51Z,OPEN,False,1466,0,18,https://github.com/Petezah,Add Atmel CryptoAuthLib to extras,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/490,https://github.com/Petezah,1,https://github.com/SuperHouse/esp-open-rtos/pull/490,"This is Atmel/Microchip's official library for interfacing
to the Atmel ATECC508 chip.  The submodule points to their
repository in GitHub.
Additionally, this includes the HAL necessary to use this library
in esp_open_rtos using the i2c library in extras/i2c.  I have also
included a tool I wrote to play with the chip as an example under
examples/atcatool.
The extras module currently overrides atca_iface.h to fix bug in
cryptoauthlib (c11-only feature, which breaks c++ builds that want
to use cryptoauthlib)
This is submitted in response to #393.","This is Atmel/Microchip's official library for interfacing
to the Atmel ATECC508 chip.  The submodule points to their
repository in GitHub.
Additionally, this includes the HAL necessary to use this library
in esp_open_rtos using the i2c library in extras/i2c.  I have also
included a tool I wrote to play with the chip as an example under
examples/atcatool.
The extras module currently overrides atca_iface.h to fix bug in
cryptoauthlib (c11-only feature, which breaks c++ builds that want
to use cryptoauthlib)
This is submitted in response to #393.",True,{'HOORAY': ['https://github.com/copercini']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,491,2017-11-22T15:48:08Z,2017-12-02T09:41:42Z,2017-12-02T09:41:42Z,MERGED,True,1,1,1,https://github.com/funnydog,Fix the SPIFFS POSIX API (#489),1,[],https://github.com/SuperHouse/esp-open-rtos/pull/491,https://github.com/funnydog,1,https://github.com/SuperHouse/esp-open-rtos/pull/491,"The commit ebdd2f9 defined some offsets to differentiate between the
standard, socket and file descriptors.
SPIFFS_FILEHDL_OFFSET was updated accordingly but the code didn't use
that constant and this broke the SPIFFS POSIX API.
Fix it by initializing the fh_ix_offset field of the spiffs_config
structure to SPIFFS_FILEHDL_OFFSET.","The commit ebdd2f9 defined some offsets to differentiate between the
standard, socket and file descriptors.
SPIFFS_FILEHDL_OFFSET was updated accordingly but the code didn't use
that constant and this broke the SPIFFS POSIX API.
Fix it by initializing the fh_ix_offset field of the spiffs_config
structure to SPIFFS_FILEHDL_OFFSET.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,491,2017-11-22T15:48:08Z,2017-12-02T09:41:42Z,2017-12-02T09:41:42Z,MERGED,True,1,1,1,https://github.com/funnydog,Fix the SPIFFS POSIX API (#489),1,[],https://github.com/SuperHouse/esp-open-rtos/pull/491,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/491#issuecomment-348680691,"The commit ebdd2f9 defined some offsets to differentiate between the
standard, socket and file descriptors.
SPIFFS_FILEHDL_OFFSET was updated accordingly but the code didn't use
that constant and this broke the SPIFFS POSIX API.
Fix it by initializing the fh_ix_offset field of the spiffs_config
structure to SPIFFS_FILEHDL_OFFSET.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,492,2017-11-22T18:47:15Z,2018-07-26T13:56:23Z,2018-07-26T13:56:23Z,CLOSED,False,0,0,0,https://github.com/apiel,add rc-switch example,0,[],https://github.com/SuperHouse/esp-open-rtos/pull/492,https://github.com/apiel,1,https://github.com/SuperHouse/esp-open-rtos/pull/492,"This is an example to use the RC-switch library, for RF 433 emitter / receiver.","This is an example to use the RC-switch library, for RF 433 emitter / receiver.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,493,2017-11-24T14:08:25Z,2017-12-02T09:37:53Z,2017-12-02T09:37:53Z,MERGED,True,9,6,2,https://github.com/Zaltora,color and timing (ws2812_i2s),2,[],https://github.com/SuperHouse/esp-open-rtos/pull/493,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/493,"Add a way to set color with one variable, ""RGB888"" standard.

I discovered a bug or a problem with current i2s library.
When you do 2 update without delay, second update don't work.
ws2812_i2s_update(pixels, PIXEL_RGB);
ws2812_i2s_update(pixels, PIXEL_RGB);

Was thinking that this line : while (i2s_dma_processing) {};  will prevent this but not.
It is work when i add this:
sdk_os_delay_us(260 + 30 * (dma_buffer_size / type)); 
I can fix with a system that control the minimum time in us and return error is we cant update. (sdk api) but i wondering if i2s lib dont set flag correctly ? any clue ?","Add a way to set color with one variable, ""RGB888"" standard.

I discovered a bug or a problem with current i2s library.
When you do 2 update without delay, second update don't work.
ws2812_i2s_update(pixels, PIXEL_RGB);
ws2812_i2s_update(pixels, PIXEL_RGB);

Was thinking that this line : while (i2s_dma_processing) {};  will prevent this but not.
It is work when i add this:
sdk_os_delay_us(260 + 30 * (dma_buffer_size / type)); 
I can fix with a system that control the minimum time in us and return error is we cant update. (sdk api) but i wondering if i2s lib dont set flag correctly ? any clue ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,500,2017-12-01T11:59:02Z,2017-12-09T17:29:06Z,2017-12-09T17:29:06Z,MERGED,True,3805,1855,29,https://github.com/ourairquality,FreeRTOS v10.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/500,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/500,"FreeRTOS is now with Amazon and the license is more compatible. Here's an announcement
https://aws.amazon.com/blogs/opensource/announcing-freertos-kernel-v10/
Github repo:
https://github.com/aws/amazon-freertos
The code has not changed much. There are still a few issues to be followed up and addressed before this is ready to merge, e.g. the coroutine support is not include.","FreeRTOS is now with Amazon and the license is more compatible. Here's an announcement
https://aws.amazon.com/blogs/opensource/announcing-freertos-kernel-v10/
Github repo:
https://github.com/aws/amazon-freertos
The code has not changed much. There are still a few issues to be followed up and addressed before this is ready to merge, e.g. the coroutine support is not include.",True,"{'THUMBS_UP': ['https://github.com/flannelhead', 'https://github.com/UncleRus', 'https://github.com/gamer-cndg', 'https://github.com/jeffsf']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,500,2017-12-01T11:59:02Z,2017-12-09T17:29:06Z,2017-12-09T17:29:06Z,MERGED,True,3805,1855,29,https://github.com/ourairquality,FreeRTOS v10.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/500,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/500#issuecomment-348487971,"FreeRTOS is now with Amazon and the license is more compatible. Here's an announcement
https://aws.amazon.com/blogs/opensource/announcing-freertos-kernel-v10/
Github repo:
https://github.com/aws/amazon-freertos
The code has not changed much. There are still a few issues to be followed up and addressed before this is ready to merge, e.g. the coroutine support is not include.","There is a new feature in this release, stream buffers and message buffers.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,500,2017-12-01T11:59:02Z,2017-12-09T17:29:06Z,2017-12-09T17:29:06Z,MERGED,True,3805,1855,29,https://github.com/ourairquality,FreeRTOS v10.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/500,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/500#issuecomment-349823356,"FreeRTOS is now with Amazon and the license is more compatible. Here's an announcement
https://aws.amazon.com/blogs/opensource/announcing-freertos-kernel-v10/
Github repo:
https://github.com/aws/amazon-freertos
The code has not changed much. There are still a few issues to be followed up and addressed before this is ready to merge, e.g. the coroutine support is not include.",This could be consider for merging now. Based it on the svn repo rather than the amazona aws github repo as this seemed more complete and does not move files around.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,501,2017-12-02T09:00:49Z,2017-12-09T17:28:35Z,2017-12-09T17:28:35Z,CLOSED,False,23,5,2,https://github.com/UncleRus,Fix #472,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/501,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/501,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,502,2017-12-02T18:52:57Z,2018-04-26T20:53:53Z,2018-04-26T20:53:53Z,CLOSED,False,20,2,2,https://github.com/Zaltora,ws2812 i2s quick fix,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/502,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/502,"I found a problem when we do multiple following i2S_update.
I put a minimum control delay to prevent update do not work on led.
If someone get clue on i2s registers settings to avoid this. help welcome.","I found a problem when we do multiple following i2S_update.
I put a minimum control delay to prevent update do not work on led.
If someone get clue on i2s registers settings to avoid this. help welcome.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,502,2017-12-02T18:52:57Z,2018-04-26T20:53:53Z,2018-04-26T20:53:53Z,CLOSED,False,20,2,2,https://github.com/Zaltora,ws2812 i2s quick fix,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/502,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/502#issuecomment-384785640,"I found a problem when we do multiple following i2S_update.
I put a minimum control delay to prevent update do not work on led.
If someone get clue on i2s registers settings to avoid this. help welcome.","i close this one, It is buggy. I don't know how fix it properly right now.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,503,2017-12-05T08:59:08Z,2017-12-09T17:27:39Z,2017-12-09T17:27:39Z,MERGED,True,134,56,2,https://github.com/flannelhead,I2C optimization,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/503,https://github.com/flannelhead,1,https://github.com/SuperHouse/esp-open-rtos/pull/503,"In an effort to make the I2C driver operate faster, I noticed a few optimization opportunities in the code. This code goes over 1 MHz at 160 MHz clock speed and I suppose ~800 kHz would be achievable with 80 MHz clock speed.
After the refactoring to multiple coexisting I2C bus instances, the code was making a lot of lookups in the i2c_bus_descriptor structure during the transaction. Especially in i2c_delay(), that caused quite a bit of overhead. Therefore the delay is now looked up only once in i2c_start().
Furthermore, I noticed that in some occasions gccwith -O2 was optimizing i2c_delay() aggressively. Namely, the counter wasn't even assigned on every inline occurrence of i2c_delay() in the code. This resulted in an infinite loop due to the counter wrapping over. The delay variable is now declared volatile to force gcc to load the delay value to the corresponding register every time properly indicated as an output variable in the inline assembly block, which prevents gcc from doing these harmful optimizations.
Also, gpio_write() and gpio_read() have some overhead since they are checking if the GPIO number is 16 (and thus they would have to use the RTC registers). I decided to change it so that GPIO16 isn't allowed (it is a bit special anyway), and the ""normal"" GPIO registers are manipulated directly. Thus this is a breaking change, but I hope anyone hasn't been using GPIO16 for I2C. As an optimization, the SDA and SCL pin masks are precalculated in i2c_start().
read_sda() and read_scl() are changed such that they're not changing the pin state to HIGH when they're called. That is now done separately by set_sda() and set_scl().
I've already tested the driver with LSM6DS3 but of course it would benefit from testing by other people, too. The delay values will need retuning.
There are even more optimization opportunities. Mainly, I would like to assign the delay and the GPIO masks to global variables to save yet a few more cycles. Concurrent access by different bus instances would be protected by a mutex which is locked by i2c_start() and released by i2c_stop(). This would also improve the timing of transactions.
Just before I go further and perform the tuning (and possibly the optimization mentioned above), I would like to hear some opinions and discussion about this PR. I'll be also happy to introduce only a subset of this if all the changes are not desired.
This PR also incorporates the changes from PR #483.","In an effort to make the I2C driver operate faster, I noticed a few optimization opportunities in the code. This code goes over 1 MHz at 160 MHz clock speed and I suppose ~800 kHz would be achievable with 80 MHz clock speed.
After the refactoring to multiple coexisting I2C bus instances, the code was making a lot of lookups in the i2c_bus_descriptor structure during the transaction. Especially in i2c_delay(), that caused quite a bit of overhead. Therefore the delay is now looked up only once in i2c_start().
Furthermore, I noticed that in some occasions gccwith -O2 was optimizing i2c_delay() aggressively. Namely, the counter wasn't even assigned on every inline occurrence of i2c_delay() in the code. This resulted in an infinite loop due to the counter wrapping over. The delay variable is now declared volatile to force gcc to load the delay value to the corresponding register every time properly indicated as an output variable in the inline assembly block, which prevents gcc from doing these harmful optimizations.
Also, gpio_write() and gpio_read() have some overhead since they are checking if the GPIO number is 16 (and thus they would have to use the RTC registers). I decided to change it so that GPIO16 isn't allowed (it is a bit special anyway), and the ""normal"" GPIO registers are manipulated directly. Thus this is a breaking change, but I hope anyone hasn't been using GPIO16 for I2C. As an optimization, the SDA and SCL pin masks are precalculated in i2c_start().
read_sda() and read_scl() are changed such that they're not changing the pin state to HIGH when they're called. That is now done separately by set_sda() and set_scl().
I've already tested the driver with LSM6DS3 but of course it would benefit from testing by other people, too. The delay values will need retuning.
There are even more optimization opportunities. Mainly, I would like to assign the delay and the GPIO masks to global variables to save yet a few more cycles. Concurrent access by different bus instances would be protected by a mutex which is locked by i2c_start() and released by i2c_stop(). This would also improve the timing of transactions.
Just before I go further and perform the tuning (and possibly the optimization mentioned above), I would like to hear some opinions and discussion about this PR. I'll be also happy to introduce only a subset of this if all the changes are not desired.
This PR also incorporates the changes from PR #483.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,503,2017-12-05T08:59:08Z,2017-12-09T17:27:39Z,2017-12-09T17:27:39Z,MERGED,True,134,56,2,https://github.com/flannelhead,I2C optimization,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/503,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/503#issuecomment-349396372,"In an effort to make the I2C driver operate faster, I noticed a few optimization opportunities in the code. This code goes over 1 MHz at 160 MHz clock speed and I suppose ~800 kHz would be achievable with 80 MHz clock speed.
After the refactoring to multiple coexisting I2C bus instances, the code was making a lot of lookups in the i2c_bus_descriptor structure during the transaction. Especially in i2c_delay(), that caused quite a bit of overhead. Therefore the delay is now looked up only once in i2c_start().
Furthermore, I noticed that in some occasions gccwith -O2 was optimizing i2c_delay() aggressively. Namely, the counter wasn't even assigned on every inline occurrence of i2c_delay() in the code. This resulted in an infinite loop due to the counter wrapping over. The delay variable is now declared volatile to force gcc to load the delay value to the corresponding register every time properly indicated as an output variable in the inline assembly block, which prevents gcc from doing these harmful optimizations.
Also, gpio_write() and gpio_read() have some overhead since they are checking if the GPIO number is 16 (and thus they would have to use the RTC registers). I decided to change it so that GPIO16 isn't allowed (it is a bit special anyway), and the ""normal"" GPIO registers are manipulated directly. Thus this is a breaking change, but I hope anyone hasn't been using GPIO16 for I2C. As an optimization, the SDA and SCL pin masks are precalculated in i2c_start().
read_sda() and read_scl() are changed such that they're not changing the pin state to HIGH when they're called. That is now done separately by set_sda() and set_scl().
I've already tested the driver with LSM6DS3 but of course it would benefit from testing by other people, too. The delay values will need retuning.
There are even more optimization opportunities. Mainly, I would like to assign the delay and the GPIO masks to global variables to save yet a few more cycles. Concurrent access by different bus instances would be protected by a mutex which is locked by i2c_start() and released by i2c_stop(). This would also improve the timing of transactions.
Just before I go further and perform the tuning (and possibly the optimization mentioned above), I would like to hear some opinions and discussion about this PR. I'll be also happy to introduce only a subset of this if all the changes are not desired.
This PR also incorporates the changes from PR #483.","I agree for GPIO16, this pin not got the same behavior and can cause some problem. Need to be controlled  when bus is initialized and return error if pin 16 is set.
To be compatible with people than use GPIO16, i suggest to use a define like
#define GPIO_REGISTERS_CONTROL true  to swap between register/ gpio API.
. I will test your change with my i2c devices (ds3231, bme280, ina3221, ... )",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,503,2017-12-05T08:59:08Z,2017-12-09T17:27:39Z,2017-12-09T17:27:39Z,MERGED,True,134,56,2,https://github.com/flannelhead,I2C optimization,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/503,https://github.com/flannelhead,3,https://github.com/SuperHouse/esp-open-rtos/pull/503#issuecomment-349606454,"In an effort to make the I2C driver operate faster, I noticed a few optimization opportunities in the code. This code goes over 1 MHz at 160 MHz clock speed and I suppose ~800 kHz would be achievable with 80 MHz clock speed.
After the refactoring to multiple coexisting I2C bus instances, the code was making a lot of lookups in the i2c_bus_descriptor structure during the transaction. Especially in i2c_delay(), that caused quite a bit of overhead. Therefore the delay is now looked up only once in i2c_start().
Furthermore, I noticed that in some occasions gccwith -O2 was optimizing i2c_delay() aggressively. Namely, the counter wasn't even assigned on every inline occurrence of i2c_delay() in the code. This resulted in an infinite loop due to the counter wrapping over. The delay variable is now declared volatile to force gcc to load the delay value to the corresponding register every time properly indicated as an output variable in the inline assembly block, which prevents gcc from doing these harmful optimizations.
Also, gpio_write() and gpio_read() have some overhead since they are checking if the GPIO number is 16 (and thus they would have to use the RTC registers). I decided to change it so that GPIO16 isn't allowed (it is a bit special anyway), and the ""normal"" GPIO registers are manipulated directly. Thus this is a breaking change, but I hope anyone hasn't been using GPIO16 for I2C. As an optimization, the SDA and SCL pin masks are precalculated in i2c_start().
read_sda() and read_scl() are changed such that they're not changing the pin state to HIGH when they're called. That is now done separately by set_sda() and set_scl().
I've already tested the driver with LSM6DS3 but of course it would benefit from testing by other people, too. The delay values will need retuning.
There are even more optimization opportunities. Mainly, I would like to assign the delay and the GPIO masks to global variables to save yet a few more cycles. Concurrent access by different bus instances would be protected by a mutex which is locked by i2c_start() and released by i2c_stop(). This would also improve the timing of transactions.
Just before I go further and perform the tuning (and possibly the optimization mentioned above), I would like to hear some opinions and discussion about this PR. I'll be also happy to introduce only a subset of this if all the changes are not desired.
This PR also incorporates the changes from PR #483.","@Zaltora Thanks for the comments, please report back about your test results :) Please note that the delays are not yet tuned, so the clock speed might not be accurate. I agree about using a #define to allow falling back to enabling GPIO16.
Does anybody have comments about locking the bus during transactions? The current implementation allows for multiple concurrent bus instances (presumably on different pins). However running multiple simultaneous I2C transactions doesn't seem to make much sense to me since the timing is done entirely by software - thus the timing would become inaccurate if one switches context between two I2C transactions running at equal priorities.
Hence I would like to add some locking by a mutex to prevent multiple I2C transactions from running concurrently on different buses - that would also allow for some further optimization as mentioned above. This would both improve the timing of individual transactions and also reduce the amount of overhead. @Zaltora, IIRC you did the multi-bus refactor of the I2C driver. How are you using it? Specifically, are you running multiple simultaneous I2C transactions on different buses?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,503,2017-12-05T08:59:08Z,2017-12-09T17:27:39Z,2017-12-09T17:27:39Z,MERGED,True,134,56,2,https://github.com/flannelhead,I2C optimization,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/503,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/503#issuecomment-349772512,"In an effort to make the I2C driver operate faster, I noticed a few optimization opportunities in the code. This code goes over 1 MHz at 160 MHz clock speed and I suppose ~800 kHz would be achievable with 80 MHz clock speed.
After the refactoring to multiple coexisting I2C bus instances, the code was making a lot of lookups in the i2c_bus_descriptor structure during the transaction. Especially in i2c_delay(), that caused quite a bit of overhead. Therefore the delay is now looked up only once in i2c_start().
Furthermore, I noticed that in some occasions gccwith -O2 was optimizing i2c_delay() aggressively. Namely, the counter wasn't even assigned on every inline occurrence of i2c_delay() in the code. This resulted in an infinite loop due to the counter wrapping over. The delay variable is now declared volatile to force gcc to load the delay value to the corresponding register every time properly indicated as an output variable in the inline assembly block, which prevents gcc from doing these harmful optimizations.
Also, gpio_write() and gpio_read() have some overhead since they are checking if the GPIO number is 16 (and thus they would have to use the RTC registers). I decided to change it so that GPIO16 isn't allowed (it is a bit special anyway), and the ""normal"" GPIO registers are manipulated directly. Thus this is a breaking change, but I hope anyone hasn't been using GPIO16 for I2C. As an optimization, the SDA and SCL pin masks are precalculated in i2c_start().
read_sda() and read_scl() are changed such that they're not changing the pin state to HIGH when they're called. That is now done separately by set_sda() and set_scl().
I've already tested the driver with LSM6DS3 but of course it would benefit from testing by other people, too. The delay values will need retuning.
There are even more optimization opportunities. Mainly, I would like to assign the delay and the GPIO masks to global variables to save yet a few more cycles. Concurrent access by different bus instances would be protected by a mutex which is locked by i2c_start() and released by i2c_stop(). This would also improve the timing of transactions.
Just before I go further and perform the tuning (and possibly the optimization mentioned above), I would like to hear some opinions and discussion about this PR. I'll be also happy to introduce only a subset of this if all the changes are not desired.
This PR also incorporates the changes from PR #483.","Well i didnt get  oscilloscope. If i guess your refactoring is faster, i will take 400Khz setting and append value to approach 300KhZ.
For locking bus, level 1 Api got a flag to signal if bus is busy. Can be better to use global static flag instead of a flag busy by bus. only one i2c transaction will be allowed.
Actually, i use one bus and semaphore API to protect  each transaction between task.  i dont no if it is better to lets user or i2c lib manage mutex but if you do it, i think only level 1 api need this protection. Anyway each library of esp-open-rtos uses level 1 api.
the i2c lvl 1 api got a function ""force""  to force a i2c transaction to be shutdown if an other need to be started. It is usefull if a device is priority.  Actually, when a transaction is shutdown, ""i2c_stop"" detect it and return error.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,503,2017-12-05T08:59:08Z,2017-12-09T17:27:39Z,2017-12-09T17:27:39Z,MERGED,True,134,56,2,https://github.com/flannelhead,I2C optimization,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/503,https://github.com/flannelhead,5,https://github.com/SuperHouse/esp-open-rtos/pull/503#issuecomment-350343262,"In an effort to make the I2C driver operate faster, I noticed a few optimization opportunities in the code. This code goes over 1 MHz at 160 MHz clock speed and I suppose ~800 kHz would be achievable with 80 MHz clock speed.
After the refactoring to multiple coexisting I2C bus instances, the code was making a lot of lookups in the i2c_bus_descriptor structure during the transaction. Especially in i2c_delay(), that caused quite a bit of overhead. Therefore the delay is now looked up only once in i2c_start().
Furthermore, I noticed that in some occasions gccwith -O2 was optimizing i2c_delay() aggressively. Namely, the counter wasn't even assigned on every inline occurrence of i2c_delay() in the code. This resulted in an infinite loop due to the counter wrapping over. The delay variable is now declared volatile to force gcc to load the delay value to the corresponding register every time properly indicated as an output variable in the inline assembly block, which prevents gcc from doing these harmful optimizations.
Also, gpio_write() and gpio_read() have some overhead since they are checking if the GPIO number is 16 (and thus they would have to use the RTC registers). I decided to change it so that GPIO16 isn't allowed (it is a bit special anyway), and the ""normal"" GPIO registers are manipulated directly. Thus this is a breaking change, but I hope anyone hasn't been using GPIO16 for I2C. As an optimization, the SDA and SCL pin masks are precalculated in i2c_start().
read_sda() and read_scl() are changed such that they're not changing the pin state to HIGH when they're called. That is now done separately by set_sda() and set_scl().
I've already tested the driver with LSM6DS3 but of course it would benefit from testing by other people, too. The delay values will need retuning.
There are even more optimization opportunities. Mainly, I would like to assign the delay and the GPIO masks to global variables to save yet a few more cycles. Concurrent access by different bus instances would be protected by a mutex which is locked by i2c_start() and released by i2c_stop(). This would also improve the timing of transactions.
Just before I go further and perform the tuning (and possibly the optimization mentioned above), I would like to hear some opinions and discussion about this PR. I'll be also happy to introduce only a subset of this if all the changes are not desired.
This PR also incorporates the changes from PR #483.","I'd now consider this PR ready for merging. I squashed my commits and rebased them so they now properly apply on master.
I've now added a define I2C_USE_GPIO16 which will enable the gpio_write and gpio_read calls instead of direct register manipulation. The consequences are documented in the comments.
This is about as fast and accurate as I can get it. I've also now done a rough tuning of the delay values. I didn't see much value in implementing synchronization / mutexes in the library - it is good as it is.",True,{'THUMBS_UP': ['https://github.com/gschorcht']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,504,2017-12-06T04:38:44Z,2017-12-06T15:13:30Z,2017-12-06T15:13:30Z,MERGED,True,1,1,1,https://github.com/nochkin,Bringing libesphttpd up-to-date,13,[],https://github.com/SuperHouse/esp-open-rtos/pull/504,https://github.com/nochkin,1,https://github.com/SuperHouse/esp-open-rtos/pull/504,"This includes the following changes:

Fixed a bug when flashing user2
Enhance captive portal DNS, resolve only known addresses thus we could stop suffering DDoS from garbage attempts
Fix OTA with rBoot
Fix invalid accesses may occur under stress
Minor fixes regarding various compilation warnings","This includes the following changes:

Fixed a bug when flashing user2
Enhance captive portal DNS, resolve only known addresses thus we could stop suffering DDoS from garbage attempts
Fix OTA with rBoot
Fix invalid accesses may occur under stress
Minor fixes regarding various compilation warnings",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/505,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.","Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/505#issuecomment-349829341,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.","@maximkulkin This update fixes a good number of bugs, and might reduce memory usage a little. Testing and feedback welcomed.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/maximkulkin,3,https://github.com/SuperHouse/esp-open-rtos/pull/505#issuecomment-350769919,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.",I've tried this new code in my project and TXT records does not seem to be correct. I'm going to debug it.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/505#issuecomment-350856290,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.","The TXT records were completely broken, but an attempt was made to get them working and a simple example was working. It helped debugging to use wireshark to inspect the mdns packets - it gives a breakdown of the messages and even detected some that were broken. If you find an example that is broken then please post it and I'll take a look too.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/maximkulkin,5,https://github.com/SuperHouse/esp-open-rtos/pull/505#issuecomment-350857310,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.","Ok, I guess the problem was on my side. Still don't get why there is no API to add multiple entries to TXT record. Guess I need to add it. Here is API from esp-idf: http://esp-idf.readthedocs.io/en/latest/api-reference/protocols/mdns.html?highlight=mdns#_CPPv220mdns_service_txt_setP13mdns_server_tPKcPKc7uint8_tPPKc",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/ourairquality,6,https://github.com/SuperHouse/esp-open-rtos/pull/505#issuecomment-350882533,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.","For a more comprehensive implementation then perhaps it would be a better investment to work on the lwip mdns responder - it will have a wider community to work on it. Problem is that is uses a lot of stack space, allocates large buffers on the stack.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/maximkulkin,7,https://github.com/SuperHouse/esp-open-rtos/pull/505#issuecomment-350884373,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.","I tested this patch more and decided to keep old implementation. mDNS service does not work at all in my setup and I think it has something to do with initializing it before obtaining IP address (old implementation had a task to wait/check for that). I guess, it is not handled at all in new code.
I also checked lwip and while having a better API, it a) still requires you to initialize service AFTER IP was obtained; b) (more importantly) it requires a lot of configuration through preprocessor defines which kind of inconvenient in case you develop a component. I really do not want to provide a long documentation on which CFLAGS to provide in order to use my component from an application, it should be just component inclusion. But in that case it is tricky to set options without shadowing some user provided options.
Long story short, I decided to fork old mdnsresponder code and enhance it to my needs.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/maximkulkin,8,https://github.com/SuperHouse/esp-open-rtos/pull/505#issuecomment-350886817,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.","Ok, I take it back: I personally can leave with this patch. It's OK to merge.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,505,2017-12-07T01:12:15Z,2017-12-24T13:39:48Z,2017-12-24T13:39:48Z,MERGED,True,336,245,2,https://github.com/ourairquality,mDNS-responder: ipv6 support and fixes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/505,https://github.com/ourairquality,9,https://github.com/SuperHouse/esp-open-rtos/pull/505#issuecomment-350895330,"Adds ipv6 support. Compiles with ipv6 enabled and then accepts ipv6 connections and answers AAAA questions.


Fixes a few overflows of the reply buffer. Reduce the default reply buffer size, name it MDNS_RESPONDER_REPLY_SIZE, and allow overriding.


Fix mdns_add_TXT.


Prefer malloc to large stack buffers, to control stack sizes, and try to malloc only the buffer size needed where known in advance.


Determine the IP addresses when responding, eliminating the update function  and the update task.


Allow use in StationAP mode too, but bind to the station netif.


Fix to compile without the debug output.


Slightly better integration with lwip.


Some code style changes, not comprehensive.","The lwip mdns responder appeared to work well with lwip, it can work with the LWIP_NETIF_EXT_STATUS_CALLBACK option, so handle configuration changes to the interface, and thus work through a change in the IP. If these options are commonly used then lets consider enabling the support by default. Perhaps we could also enable the lwip dns client support for mdns too by default so code plays well with other mdns devices. Fwiw the mdns responder is not currently working with the softap interface, the multicast frames are not getting out, it's probably a trivial matter to fix if we had the source code but need to explore how best to deal with it as-is.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,507,2017-12-07T19:57:40Z,2017-12-09T17:26:54Z,2017-12-09T17:26:54Z,MERGED,True,2,2,2,https://github.com/imihajlow,Allow overrides of sntp.h,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/507,https://github.com/imihajlow,1,https://github.com/SuperHouse/esp-open-rtos/pull/507,"Changed quote marks with triangle brackets
for sntp.h to allow user creating a custom sntp.h","Changed quote marks with triangle brackets
for sntp.h to allow user creating a custom sntp.h",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,508,2017-12-08T01:33:28Z,2017-12-09T23:34:06Z,2017-12-09T23:34:06Z,CLOSED,False,1,1,1,https://github.com/ourairquality,lwip: update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/508,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/508,"Update to current master branch


Quietens unused variable warnings building mDNS.","Update to current master branch


Quietens unused variable warnings building mDNS.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,508,2017-12-08T01:33:28Z,2017-12-09T23:34:06Z,2017-12-09T23:34:06Z,CLOSED,False,1,1,1,https://github.com/ourairquality,lwip: update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/508,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/508#issuecomment-350513320,"Update to current master branch


Quietens unused variable warnings building mDNS.",Bundle into #509,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,509,2017-12-08T02:28:10Z,2017-12-11T02:32:37Z,2017-12-11T02:32:38Z,MERGED,True,249,41,5,https://github.com/ourairquality,wificfg: IPv6 and mDNS support,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/509,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/509,"When IPv6 is enabled the http server and the captive portal DNS now also accept IPv6 connections. The interface and peer IPv6 address are now also reported.


The http server no longer redirects .local to an IP address, for better integration with mDNS.


Add mDNS support, for the extras/mdnsresponder or the LWIP mDNS responder, and enable the LWIP mDNS responder for examples/wificfg.


The mDNS support works here on Linux, both IPv4 and IPv6 if enabled. It might also work on MacOS in Safari but that is not tested and feedback is welcomed? Unfortunately there is no mDNS support on Windows or Android web browsers. For example, a chrome issue to add support https://bugs.chromium.org/p/chromium/issues/detail?id=405925","When IPv6 is enabled the http server and the captive portal DNS now also accept IPv6 connections. The interface and peer IPv6 address are now also reported.


The http server no longer redirects .local to an IP address, for better integration with mDNS.


Add mDNS support, for the extras/mdnsresponder or the LWIP mDNS responder, and enable the LWIP mDNS responder for examples/wificfg.


The mDNS support works here on Linux, both IPv4 and IPv6 if enabled. It might also work on MacOS in Safari but that is not tested and feedback is welcomed? Unfortunately there is no mDNS support on Windows or Android web browsers. For example, a chrome issue to add support https://bugs.chromium.org/p/chromium/issues/detail?id=405925",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,511,2017-12-08T13:57:57Z,2017-12-14T03:30:20Z,2017-12-14T03:30:20Z,MERGED,True,3442,44,24,https://github.com/ourairquality,Newlib: implement locks,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/511,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/511,"Looks like implementing mutex locks for newlib will help solve a few issues. The current use of critical regions for locking causes stutters or worse, such as getchar blocking with interrupts disabled.
Newlib has some statically allocated and initialized locks. It has been patched to make them globally visible so they can be initialized at startup.
The malloc lock is used early, and there is a runtime check to handle this.
So far only one use of a newlib lock in a critical region has been spotted, a use of the malloc lock in the ppTask, and this has been addressed with a binary patch to libpp.a.
This will need more testing, and feedback is welcomed.","Looks like implementing mutex locks for newlib will help solve a few issues. The current use of critical regions for locking causes stutters or worse, such as getchar blocking with interrupts disabled.
Newlib has some statically allocated and initialized locks. It has been patched to make them globally visible so they can be initialized at startup.
The malloc lock is used early, and there is a runtime check to handle this.
So far only one use of a newlib lock in a critical region has been spotted, a use of the malloc lock in the ppTask, and this has been addressed with a binary patch to libpp.a.
This will need more testing, and feedback is welcomed.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,511,2017-12-08T13:57:57Z,2017-12-14T03:30:20Z,2017-12-14T03:30:20Z,MERGED,True,3442,44,24,https://github.com/ourairquality,Newlib: implement locks,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/511,https://github.com/meowthink,2,https://github.com/SuperHouse/esp-open-rtos/pull/511#issuecomment-350401263,"Looks like implementing mutex locks for newlib will help solve a few issues. The current use of critical regions for locking causes stutters or worse, such as getchar blocking with interrupts disabled.
Newlib has some statically allocated and initialized locks. It has been patched to make them globally visible so they can be initialized at startup.
The malloc lock is used early, and there is a runtime check to handle this.
So far only one use of a newlib lock in a critical region has been spotted, a use of the malloc lock in the ppTask, and this has been addressed with a binary patch to libpp.a.
This will need more testing, and feedback is welcomed.","Works like a charm!
btw I got a few warnings with the binary libc:
Warning: ELF binary has undefined symbol _exit
Warning: ELF binary has undefined symbol _getpid_r
Warning: ELF binary has undefined symbol _kill_r
Warning: ELF binary has undefined symbol getentropy",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,511,2017-12-08T13:57:57Z,2017-12-14T03:30:20Z,2017-12-14T03:30:20Z,MERGED,True,3442,44,24,https://github.com/ourairquality,Newlib: implement locks,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/511,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/511#issuecomment-351134899,"Looks like implementing mutex locks for newlib will help solve a few issues. The current use of critical regions for locking causes stutters or worse, such as getchar blocking with interrupts disabled.
Newlib has some statically allocated and initialized locks. It has been patched to make them globally visible so they can be initialized at startup.
The malloc lock is used early, and there is a runtime check to handle this.
So far only one use of a newlib lock in a critical region has been spotted, a use of the malloc lock in the ppTask, and this has been addressed with a binary patch to libpp.a.
This will need more testing, and feedback is welcomed.","Tested it with sysparam_editor and other examples. Works great!
Going to merge this PR.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,512,2017-12-09T12:45:21Z,2017-12-09T17:25:58Z,2017-12-09T17:25:58Z,MERGED,True,1,1,1,https://github.com/ourairquality,esphttpd: increase stack size for task wsbcast,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/512,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/512,Seeing stack overflows on this one.,Seeing stack overflows on this one.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,513,2017-12-09T19:26:13Z,2018-01-23T20:54:35Z,2018-01-23T20:54:35Z,CLOSED,False,9,3,2,https://github.com/flannelhead,Makefile: add flag to disable C++ components,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/513,https://github.com/flannelhead,1,https://github.com/SuperHouse/esp-open-rtos/pull/513,"When experimenting with toolchains, I found it difficult to build a C++-enabled toolchain with crosstool-NG. Therefore I propose to add a flag which disables building *.cpp files. The only C++ file in core is cplusplus_operators.cpp which is not an essential part if one isn't programming in C++. Disabling C++ files in Makefile enables building esp-open-rtos with a C-only toolchain.","When experimenting with toolchains, I found it difficult to build a C++-enabled toolchain with crosstool-NG. Therefore I propose to add a flag which disables building *.cpp files. The only C++ file in core is cplusplus_operators.cpp which is not an essential part if one isn't programming in C++. Disabling C++ files in Makefile enables building esp-open-rtos with a C-only toolchain.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,513,2017-12-09T19:26:13Z,2018-01-23T20:54:35Z,2018-01-23T20:54:35Z,CLOSED,False,9,3,2,https://github.com/flannelhead,Makefile: add flag to disable C++ components,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/513,https://github.com/flannelhead,2,https://github.com/SuperHouse/esp-open-rtos/pull/513#issuecomment-359927076,"When experimenting with toolchains, I found it difficult to build a C++-enabled toolchain with crosstool-NG. Therefore I propose to add a flag which disables building *.cpp files. The only C++ file in core is cplusplus_operators.cpp which is not an essential part if one isn't programming in C++. Disabling C++ files in Makefile enables building esp-open-rtos with a C-only toolchain.","I think this can be closed. I managed to get my cross toolchain compiled with C++ support, and most people will use the one built by esp-open-sdk anyway, and it has C++ support.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,514,2017-12-11T03:33:53Z,2017-12-13T16:29:50Z,2017-12-13T16:29:50Z,MERGED,True,100,65,5,https://github.com/ourairquality,wificfg: remove the AP WEP mode option,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/514,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/514,"The WEP mode does not appear to be implement in the sdk for the AP mode, and defaults to open when WEP is requested which is probably not intended. Remove the WEP option from the wifi config interface.","The WEP mode does not appear to be implement in the sdk for the AP mode, and defaults to open when WEP is requested which is probably not intended. Remove the WEP option from the wifi config interface.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,516,2017-12-12T00:45:06Z,2017-12-12T05:28:22Z,2017-12-12T05:28:22Z,MERGED,True,5,0,1,https://github.com/ourairquality,softap: allow output of multicast frames.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/516,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/516,"Multicast frames were being dropped by ieee80211_output_pbuf. It appears to look up the destination address using cnx_node_search which only has an entry for the broadcast address (all ones). This patch modifies cnx_node_search to return the broadcast cnx_node for the multicast addresses too.
This is needed to support services such as mDNS on the softap interface.
This patch might be a bit of a stretch, perhaps better to patch ieee80211_output_pbuf, but there is no source code.","Multicast frames were being dropped by ieee80211_output_pbuf. It appears to look up the destination address using cnx_node_search which only has an entry for the broadcast address (all ones). This patch modifies cnx_node_search to return the broadcast cnx_node for the multicast addresses too.
This is needed to support services such as mDNS on the softap interface.
This patch might be a bit of a stretch, perhaps better to patch ieee80211_output_pbuf, but there is no source code.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,517,2017-12-12T04:41:25Z,2017-12-13T06:17:36Z,2017-12-13T06:17:36Z,MERGED,True,17937,32747,17,https://github.com/UncleRus,FatFs updated to R13a,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/517,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/517,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,518,2017-12-13T10:17:31Z,2017-12-13T11:08:25Z,2017-12-13T11:08:25Z,MERGED,True,11,3,3,https://github.com/ourairquality,FreeRTOS v10 fixes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/518,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/518,"svn r2522:
FreeRTOS kernel: Fix extern ""C"" { in stream_buffer.h.
FreeRTOS kernel: Correct tskKERNEL_VERSION_NUMBER and tskKERNEL_VERSION_MAJOR constants for V10.
Ensure the currently executing task is printed correctly in vTaskList().","svn r2522:
FreeRTOS kernel: Fix extern ""C"" { in stream_buffer.h.
FreeRTOS kernel: Correct tskKERNEL_VERSION_NUMBER and tskKERNEL_VERSION_MAJOR constants for V10.
Ensure the currently executing task is printed correctly in vTaskList().",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,519,2017-12-13T20:52:23Z,2017-12-25T17:00:36Z,2017-12-25T21:40:10Z,MERGED,True,6,0,1,https://github.com/ourairquality,Reuse the startup stack for the dynamic heap.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/519,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/519,"Once scheduling has started, the startup stack is no longer usable, control can never return to that stack. So bump up the heap end in the first task that runs after scheduling has started. This gives back about 1k.
This is a proposal from investigations in #510
A concern is that it is not clear what the top of RAM is used for. It appears to be the start up stack, but might the ROM have stack allocated some memory there that it reuses, or have some other use? Writing to the area and reading back suggests it is not used.","Once scheduling has started, the startup stack is no longer usable, control can never return to that stack. So bump up the heap end in the first task that runs after scheduling has started. This gives back about 1k.
This is a proposal from investigations in #510
A concern is that it is not clear what the top of RAM is used for. It appears to be the start up stack, but might the ROM have stack allocated some memory there that it reuses, or have some other use? Writing to the area and reading back suggests it is not used.",True,{'THUMBS_UP': ['https://github.com/SaimenSays']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,520,2017-12-13T21:01:28Z,2017-12-13T21:47:04Z,2017-12-13T21:47:04Z,MERGED,True,7,7,2,https://github.com/ourairquality,wificfg: declare strings 'const' when appropriate.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/520,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/520,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,521,2017-12-13T21:16:21Z,2017-12-13T21:47:21Z,2017-12-13T21:47:21Z,MERGED,True,11,8,1,https://github.com/ourairquality,sdk_system_print_meminfo: fix and correct heap end.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/521,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/521,Address issues noted in #510,Address issues noted in #510,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,522,2017-12-15T05:21:34Z,2018-02-15T03:26:50Z,2018-02-15T03:26:50Z,CLOSED,False,63,0,4,https://github.com/nochkin,extras/new_pwm: multi-channel soft PWM with example,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/522,https://github.com/nochkin,1,https://github.com/SuperHouse/esp-open-rtos/pull/522,"This is a fork of ESP8266_new_pwm.
The main difference with the included ""extras/pwm"" is that the new_pwm supports multi-channels PWM and 100% duty mode. Also, it's a drop-in replacement of the Espressif's pwm.c, but not compatible with ""extras/pwm"" which is included with esp-open-rtos.
I used it in the past with non-OS SDK and had positive experience.
I created a fork to modify it to work under esp-open-rtos.
The correspondent example is included.","This is a fork of ESP8266_new_pwm.
The main difference with the included ""extras/pwm"" is that the new_pwm supports multi-channels PWM and 100% duty mode. Also, it's a drop-in replacement of the Espressif's pwm.c, but not compatible with ""extras/pwm"" which is included with esp-open-rtos.
I used it in the past with non-OS SDK and had positive experience.
I created a fork to modify it to work under esp-open-rtos.
The correspondent example is included.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,522,2017-12-15T05:21:34Z,2018-02-15T03:26:50Z,2018-02-15T03:26:50Z,CLOSED,False,63,0,4,https://github.com/nochkin,extras/new_pwm: multi-channel soft PWM with example,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/522,https://github.com/nochkin,2,https://github.com/SuperHouse/esp-open-rtos/pull/522#issuecomment-352451523,"This is a fork of ESP8266_new_pwm.
The main difference with the included ""extras/pwm"" is that the new_pwm supports multi-channels PWM and 100% duty mode. Also, it's a drop-in replacement of the Espressif's pwm.c, but not compatible with ""extras/pwm"" which is included with esp-open-rtos.
I used it in the past with non-OS SDK and had positive experience.
I created a fork to modify it to work under esp-open-rtos.
The correspondent example is included.","Actually, just realized that I have to take licensing into consideration. I'm kinda new into contribution into open source community.
If someone else who is more knowledgable about the topic, please chime in. The original license of the code is GPL-2. I hope it still can be merged into esp-open-rtos, but wanted to double check.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,522,2017-12-15T05:21:34Z,2018-02-15T03:26:50Z,2018-02-15T03:26:50Z,CLOSED,False,63,0,4,https://github.com/nochkin,extras/new_pwm: multi-channel soft PWM with example,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/522,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/522#issuecomment-352459547,"This is a fork of ESP8266_new_pwm.
The main difference with the included ""extras/pwm"" is that the new_pwm supports multi-channels PWM and 100% duty mode. Also, it's a drop-in replacement of the Espressif's pwm.c, but not compatible with ""extras/pwm"" which is included with esp-open-rtos.
I used it in the past with non-OS SDK and had positive experience.
I created a fork to modify it to work under esp-open-rtos.
The correspondent example is included.","I hope it still can be merged into esp-open-rtos

Unfortunately this is not possible. GPL is incompatible with MIT.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,522,2017-12-15T05:21:34Z,2018-02-15T03:26:50Z,2018-02-15T03:26:50Z,CLOSED,False,63,0,4,https://github.com/nochkin,extras/new_pwm: multi-channel soft PWM with example,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/522,https://github.com/nochkin,4,https://github.com/SuperHouse/esp-open-rtos/pull/522#issuecomment-352465398,"This is a fork of ESP8266_new_pwm.
The main difference with the included ""extras/pwm"" is that the new_pwm supports multi-channels PWM and 100% duty mode. Also, it's a drop-in replacement of the Espressif's pwm.c, but not compatible with ""extras/pwm"" which is included with esp-open-rtos.
I used it in the past with non-OS SDK and had positive experience.
I created a fork to modify it to work under esp-open-rtos.
The correspondent example is included.","Thanks for clarifications.
Besides MIT, what other popular licenses are compatible when contributing to esp-open-rtos? BSD, Apache, something else?
Sorry, I just found so many conflicting and confusing information when researching.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,523,2017-12-16T02:53:33Z,2017-12-28T01:48:17Z,2017-12-28T01:48:17Z,MERGED,True,19,1,2,https://github.com/ourairquality,"Reclaim a chunk of unused dram in the wdev bss area, 8000 bytes.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/523,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/523,"Some people appear desperate for more dram, and there is 8000 bytes unused. This patch attempts to reclaim that region, to put it onto the malloc free list where is can be used. This is not ideal as it is a fragmented region, but it is dram so faster and more flexible than the 16k+ or iram that might also be added see #510 Some testing and feedback would be welcomed, perhaps also if someone could look over the wdev disassembly and see if they concur about the position and size of this region.","Some people appear desperate for more dram, and there is 8000 bytes unused. This patch attempts to reclaim that region, to put it onto the malloc free list where is can be used. This is not ideal as it is a fragmented region, but it is dram so faster and more flexible than the 16k+ or iram that might also be added see #510 Some testing and feedback would be welcomed, perhaps also if someone could look over the wdev disassembly and see if they concur about the position and size of this region.",True,{'THUMBS_UP': ['https://github.com/SaimenSays']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,523,2017-12-16T02:53:33Z,2017-12-28T01:48:17Z,2017-12-28T01:48:17Z,MERGED,True,19,1,2,https://github.com/ourairquality,"Reclaim a chunk of unused dram in the wdev bss area, 8000 bytes.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/523,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/523#issuecomment-352164520,"Some people appear desperate for more dram, and there is 8000 bytes unused. This patch attempts to reclaim that region, to put it onto the malloc free list where is can be used. This is not ideal as it is a fragmented region, but it is dram so faster and more flexible than the 16k+ or iram that might also be added see #510 Some testing and feedback would be welcomed, perhaps also if someone could look over the wdev disassembly and see if they concur about the position and size of this region.","Some people like me ^^. I got program to analyze memory from 3FFE8000h to 40000000h. And see a lot of zeroes in bss area. I think you speak about it ? Yes, it is fragmented. I don't no why.
Nice addition",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,523,2017-12-16T02:53:33Z,2017-12-28T01:48:17Z,2017-12-28T01:48:17Z,MERGED,True,19,1,2,https://github.com/ourairquality,"Reclaim a chunk of unused dram in the wdev bss area, 8000 bytes.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/523,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/523#issuecomment-352164853,"Some people appear desperate for more dram, and there is 8000 bytes unused. This patch attempts to reclaim that region, to put it onto the malloc free list where is can be used. This is not ideal as it is a fragmented region, but it is dram so faster and more flexible than the 16k+ or iram that might also be added see #510 Some testing and feedback would be welcomed, perhaps also if someone could look over the wdev disassembly and see if they concur about the position and size of this region.","@ourairquality ,
I was looking for the iram section. I didn't know well libc but it is possible to get special malloc/free function for 16K iram section ? Don't need to add it as heap already, just for user usage (If Freertos permit it).",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,523,2017-12-16T02:53:33Z,2017-12-28T01:48:17Z,2017-12-28T01:48:17Z,MERGED,True,19,1,2,https://github.com/ourairquality,"Reclaim a chunk of unused dram in the wdev bss area, 8000 bytes.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/523,https://github.com/ourairquality,4,https://github.com/SuperHouse/esp-open-rtos/pull/523#issuecomment-352166047,"Some people appear desperate for more dram, and there is 8000 bytes unused. This patch attempts to reclaim that region, to put it onto the malloc free list where is can be used. This is not ideal as it is a fragmented region, but it is dram so faster and more flexible than the 16k+ or iram that might also be added see #510 Some testing and feedback would be welcomed, perhaps also if someone could look over the wdev disassembly and see if they concur about the position and size of this region.","We might have a problem with the travis build testing, it now reports exceeding the maximum time for jobs. Would anyone know if this is a limit that can be increased, or do we need to start being more selective about the examples that are built?
@Zaltora The same approach as used here can be used to insert the unused iram as a malloc chunk too. However it's not ready yet. This PR seems to be a useful one to merge, just makes more dram usable. Whereas moving a lot of data to iram might have a performance trade off, so might need to be a compile time option. I have something working on some simple tests and for example I see the following on the wificfg example:
Free dram heap     48624 bytes
Free iram heap    6744 bytes
Free heap    55368 bytes",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,523,2017-12-16T02:53:33Z,2017-12-28T01:48:17Z,2017-12-28T01:48:17Z,MERGED,True,19,1,2,https://github.com/ourairquality,"Reclaim a chunk of unused dram in the wdev bss area, 8000 bytes.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/523,https://github.com/Zaltora,5,https://github.com/SuperHouse/esp-open-rtos/pull/523#issuecomment-352168289,"Some people appear desperate for more dram, and there is 8000 bytes unused. This patch attempts to reclaim that region, to put it onto the malloc free list where is can be used. This is not ideal as it is a fragmented region, but it is dram so faster and more flexible than the 16k+ or iram that might also be added see #510 Some testing and feedback would be welcomed, perhaps also if someone could look over the wdev disassembly and see if they concur about the position and size of this region.","You don't use heap_5 from FreeRTOS to do this. But directly the lower layer with libc and malloc ?
if we can do this directly other layer. Why use FreeRTOS heap management ? What is the difference?
Question about compilation option, possible case can be :

IRAM  DISABLE ( like now 16K + 16K chunk IRAM FLASH CACHE)
IRAM  ENABLE USER (user got a special malloc_iram(s)  and know limitations of this, freertos use dram)
IRAM  ENABLE RTOS (the iram can be use by user, queue, stream buffer, ....)
What did you think ? it is possible ? it is good idea to got option like this ? ( maybe already your plan)

A lot of question ^^ Subject very interesting.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,523,2017-12-16T02:53:33Z,2017-12-28T01:48:17Z,2017-12-28T01:48:17Z,MERGED,True,19,1,2,https://github.com/ourairquality,"Reclaim a chunk of unused dram in the wdev bss area, 8000 bytes.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/523,https://github.com/SaimenSays,6,https://github.com/SuperHouse/esp-open-rtos/pull/523#issuecomment-354117403,"Some people appear desperate for more dram, and there is 8000 bytes unused. This patch attempts to reclaim that region, to put it onto the malloc free list where is can be used. This is not ideal as it is a fragmented region, but it is dram so faster and more flexible than the 16k+ or iram that might also be added see #510 Some testing and feedback would be welcomed, perhaps also if someone could look over the wdev disassembly and see if they concur about the position and size of this region.","Using ourairquality fork for some days. No issues recognized up to now and less out of RAM crashes.
@ourairquality Thanks for that nice improvement!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,524,2017-12-21T18:07:33Z,2017-12-23T23:57:38Z,2017-12-23T23:57:38Z,MERGED,True,396,252,10,https://github.com/gschorcht,BME680 driver updates,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/524,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/524,"minor changes
changes to make it possible to use the same driver and example source code also with ESP32 (ESP-IDF)","minor changes
changes to make it possible to use the same driver and example source code also with ESP32 (ESP-IDF)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,525,2017-12-21T18:12:39Z,2017-12-23T23:57:26Z,2017-12-23T23:57:26Z,MERGED,True,254,110,7,https://github.com/gschorcht,SHT3x driver updates,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/525,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/525,"Minor corrections:


Soft reset mechanism of SHT3x does not work when sensor is in any measurement mode. Therefore, a an unsuccessful soft reset it does not abort initialization procedure anymore.


Minor changes:


Automatic delaying and repeating an i2c access when i2c interface is busy was removed. User has to deal with concurrency using semaphores.
GPIO_ID_PIN macros removed
typos


Changes


make it possible to use the same driver and example source code also with ESP32 (ESP-IDF)","Minor corrections:


Soft reset mechanism of SHT3x does not work when sensor is in any measurement mode. Therefore, a an unsuccessful soft reset it does not abort initialization procedure anymore.


Minor changes:


Automatic delaying and repeating an i2c access when i2c interface is busy was removed. User has to deal with concurrency using semaphores.
GPIO_ID_PIN macros removed
typos


Changes


make it possible to use the same driver and example source code also with ESP32 (ESP-IDF)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,526,2017-12-21T18:14:29Z,2017-12-23T23:54:24Z,2017-12-23T23:54:24Z,MERGED,True,251,138,9,https://github.com/gschorcht,CCS811 driver updates,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/526,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/526,"small corrections
changes to make it possible to use the same driver source code also with ESP32 (ESP-IDF)","small corrections
changes to make it possible to use the same driver source code also with ESP32 (ESP-IDF)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,527,2017-12-23T10:09:11Z,2017-12-23T19:34:18Z,2017-12-23T19:34:26Z,MERGED,True,54,244,24,https://github.com/ourairquality,FreeRTOS v10.0.1,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/527,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/527,Mainly some simplifications to the copyright terms.,Mainly some simplifications to the copyright terms.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,527,2017-12-23T10:09:11Z,2017-12-23T19:34:18Z,2017-12-23T19:34:26Z,MERGED,True,54,244,24,https://github.com/ourairquality,FreeRTOS v10.0.1,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/527,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/527#issuecomment-353744112,Mainly some simplifications to the copyright terms.,Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,528,2017-12-25T16:59:35Z,2017-12-26T19:24:43Z,2017-12-26T19:24:43Z,MERGED,True,361,0,5,https://github.com/UncleRus,Driver for Cypress serial F-RAM,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/528,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/528,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,529,2017-12-27T02:57:34Z,2017-12-28T01:48:28Z,2017-12-28T08:40:10Z,MERGED,True,19,0,1,https://github.com/ourairquality,newlib: add an option to combine some locks.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/529,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/529,"The locks are using a bit of the limited ram. It's probably fine to combine some of these to use the same mutex, and this patch does so for the set initialized early. The file locks will still be separate, and dynamically created, so a thread blocking on them will not deadlock all uses of newlib that need a lock. See #510 (comment)","The locks are using a bit of the limited ram. It's probably fine to combine some of these to use the same mutex, and this patch does so for the set initialized early. The file locks will still be separate, and dynamically created, so a thread blocking on them will not deadlock all uses of newlib that need a lock. See #510 (comment)",True,{'THUMBS_UP': ['https://github.com/Zaltora']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,529,2017-12-27T02:57:34Z,2017-12-28T01:48:28Z,2017-12-28T08:40:10Z,MERGED,True,19,0,1,https://github.com/ourairquality,newlib: add an option to combine some locks.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/529,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/529#issuecomment-354068313,"The locks are using a bit of the limited ram. It's probably fine to combine some of these to use the same mutex, and this patch does so for the set initialized early. The file locks will still be separate, and dynamically created, so a thread blocking on them will not deadlock all uses of newlib that need a lock. See #510 (comment)",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,529,2017-12-27T02:57:34Z,2017-12-28T01:48:28Z,2017-12-28T08:40:10Z,MERGED,True,19,0,1,https://github.com/ourairquality,newlib: add an option to combine some locks.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/529,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/529#issuecomment-354073301,"The locks are using a bit of the limited ram. It's probably fine to combine some of these to use the same mutex, and this patch does so for the set initialized early. The file locks will still be separate, and dynamically created, so a thread blocking on them will not deadlock all uses of newlib that need a lock. See #510 (comment)","Tested, 1k heap more with this patch :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,530,2017-12-27T02:58:44Z,2017-12-27T07:37:12Z,2017-12-28T08:39:38Z,MERGED,True,13,3,1,https://github.com/ourairquality,sysparam editor: more stdout flushing.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/530,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/530,Missed some more places needing stdout flushing.,Missed some more places needing stdout flushing.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,531,2017-12-30T08:53:36Z,2017-12-30T10:57:04Z,2017-12-30T10:57:05Z,MERGED,True,3,3,1,https://github.com/imihajlow,Allow html files customization for libesphttpd,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/531,https://github.com/imihajlow,1,https://github.com/SuperHouse/esp-open-rtos/pull/531,"Modified component.mk to let user customize
LIBESPHTTPD_HTML_DIR and LIBESPHTTPD_HTML_FILES","Modified component.mk to let user customize
LIBESPHTTPD_HTML_DIR and LIBESPHTTPD_HTML_FILES",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,532,2017-12-30T10:16:24Z,2017-12-30T13:53:09Z,2018-01-02T13:19:25Z,MERGED,True,4,4,1,https://github.com/ourairquality,Change the netif default to the station in STATIONAP mode.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/532,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/532,"It seems most common for the connection to the wider internet to be via the station netif even if there is also an AP netif, so set the default to the station netif. The lwip ipv4 route logic will still use the AP netif if the destination is to that subnet.","It seems most common for the connection to the wider internet to be via the station netif even if there is also an AP netif, so set the default to the station netif. The lwip ipv4 route logic will still use the AP netif if the destination is to that subnet.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,536,2018-01-04T02:44:16Z,,2018-01-05T03:25:59Z,OPEN,False,8,8,6,https://github.com/ckerkhoff,Flash size as megabytes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/536,https://github.com/ckerkhoff,1,https://github.com/SuperHouse/esp-open-rtos/pull/536,"When building I noticed the warning, ""WARNING: Flash size arguments in megabits like '16m' are deprecated."" This should take care of that.","When building I noticed the warning, ""WARNING: Flash size arguments in megabits like '16m' are deprecated."" This should take care of that.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,536,2018-01-04T02:44:16Z,,2018-01-05T03:25:59Z,OPEN,False,8,8,6,https://github.com/ckerkhoff,Flash size as megabytes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/536,https://github.com/ckerkhoff,2,https://github.com/SuperHouse/esp-open-rtos/pull/536#issuecomment-355454840,"When building I noticed the warning, ""WARNING: Flash size arguments in megabits like '16m' are deprecated."" This should take care of that.","It looks like the CI build server is using a esptool version older than Aug 28 2016, which is when they started accepting megabytes for the flash size argument.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,536,2018-01-04T02:44:16Z,,2018-01-05T03:25:59Z,OPEN,False,8,8,6,https://github.com/ckerkhoff,Flash size as megabytes,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/536,https://github.com/nochkin,3,https://github.com/SuperHouse/esp-open-rtos/pull/536#issuecomment-355463875,"When building I noticed the warning, ""WARNING: Flash size arguments in megabits like '16m' are deprecated."" This should take care of that.","The esptool is a part of esp-open-sdk which is being built for esp-open-rtos:
https://github.com/SuperHouse/esp-open-rtos/blob/master/utils/travis_build/install_toolchain.sh
In order to support your patch, esp-open-sdk needs esptool updated.
P.S.: I'm using external esptool which supports the appropriate arguments. The same way as you do probably.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,542,2018-01-18T07:56:19Z,2018-01-20T12:02:32Z,2018-01-20T17:02:34Z,MERGED,True,11,3,3,https://github.com/gschorcht,Minor changes in CCS811 driver,6,[],https://github.com/SuperHouse/esp-open-rtos/pull/542,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/542,"error messages added to one example in case of initilization error
some notes added to README.md
changed debug output in the driver","error messages added to one example in case of initilization error
some notes added to README.md
changed debug output in the driver",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,543,2018-01-18T08:13:04Z,2018-01-20T12:02:54Z,2018-01-20T17:02:49Z,MERGED,True,142,74,7,https://github.com/gschorcht,Minor changes in BME680 driver,10,[],https://github.com/SuperHouse/esp-open-rtos/pull/543,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/543,"inline functions moved to .c file to avoid multiple definitions
semaphore for SPI bus access removed from the driver, the user tasks have to deal with concurrency
task creation timing changed in examples","inline functions moved to .c file to avoid multiple definitions
semaphore for SPI bus access removed from the driver, the user tasks have to deal with concurrency
task creation timing changed in examples",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,544,2018-01-18T08:17:53Z,2018-01-20T12:03:09Z,2018-01-20T12:03:10Z,MERGED,True,5,1,2,https://github.com/gschorcht,Minor changes in SHT3x driver,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/544,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/544,"error message added in case the sensor initialization failed
additional notein README.md","error message added in case the sensor initialization failed
additional notein README.md",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,545,2018-01-18T08:24:08Z,2018-01-20T12:02:00Z,2018-01-20T12:02:00Z,MERGED,True,3302,0,9,https://github.com/gschorcht, L3GD20H 3-axes gyroscope driver,15,[],https://github.com/SuperHouse/esp-open-rtos/pull/545,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/545,"I have written a driver for L3GD20H sensor from STMicroelectronics. L3GD20H is a MEMS 3-axes gyroscope. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.","I have written a driver for L3GD20H sensor from STMicroelectronics. L3GD20H is a MEMS 3-axes gyroscope. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,546,2018-01-18T08:25:36Z,2018-01-20T12:01:38Z,2018-01-20T17:03:26Z,MERGED,True,3665,0,9,https://github.com/gschorcht, LIS3DH 3-axes accelerometer driver added,13,[],https://github.com/SuperHouse/esp-open-rtos/pull/546,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/546,"I have written a driver for LIS3DH sensor from STMicroelectronics. LIS3DH is a MEMS 3-axes accelerometer. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.","I have written a driver for LIS3DH sensor from STMicroelectronics. LIS3DH is a MEMS 3-axes accelerometer. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,547,2018-01-18T08:31:21Z,2018-01-20T12:00:36Z,2018-01-20T17:03:12Z,MERGED,True,2300,0,9,https://github.com/gschorcht,LIS3MDL 3-axes magnetometer driver added,8,[],https://github.com/SuperHouse/esp-open-rtos/pull/547,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/547,"I have written a driver for LIS3MDL sensor from STMicroelectronics. LIS3MDL is a MEMS 3-axes magnetometer. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.","I have written a driver for LIS3MDL sensor from STMicroelectronics. LIS3MDL is a MEMS 3-axes magnetometer. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,548,2018-01-18T08:35:37Z,2018-01-20T11:59:55Z,2018-01-20T16:08:24Z,MERGED,True,4587,0,9,https://github.com/gschorcht,LSM303D e-Compass driver added,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/548,https://github.com/gschorcht,1,https://github.com/SuperHouse/esp-open-rtos/pull/548,"I have written a driver for LSM303D sensor from STMicroelectronics. LSM303D is a MEMS 3D accelerometer and 3D magnetometer module. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.","I have written a driver for LSM303D sensor from STMicroelectronics. LSM303D is a MEMS 3D accelerometer and 3D magnetometer module. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,548,2018-01-18T08:35:37Z,2018-01-20T11:59:55Z,2018-01-20T16:08:24Z,MERGED,True,4587,0,9,https://github.com/gschorcht,LSM303D e-Compass driver added,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/548,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/548#issuecomment-359166378,"I have written a driver for LSM303D sensor from STMicroelectronics. LSM303D is a MEMS 3D accelerometer and 3D magnetometer module. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,548,2018-01-18T08:35:37Z,2018-01-20T11:59:55Z,2018-01-20T16:08:24Z,MERGED,True,4587,0,9,https://github.com/gschorcht,LSM303D e-Compass driver added,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/548,https://github.com/gschorcht,3,https://github.com/SuperHouse/esp-open-rtos/pull/548#issuecomment-359182110,"I have written a driver for LSM303D sensor from STMicroelectronics. LSM303D is a MEMS 3D accelerometer and 3D magnetometer module. The driver is compatible with esp-open-rtos (ESP8266) as well as ESP-IDF (ESP32). If it is of interest, please merge it to master branch.",Thank you for merging. Please close also issue #534.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,553,2018-01-22T23:16:02Z,2018-03-01T00:03:45Z,2019-04-14T14:17:19Z,MERGED,True,712,0,9,https://github.com/AndreaGreco,Http client OTA,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/553,https://github.com/AndreaGreco,1,https://github.com/SuperHouse/esp-open-rtos/pull/553,"Add extra for lightweight HTTP client ota upgrade
With relative example","Add extra for lightweight HTTP client ota upgrade
With relative example",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,553,2018-01-22T23:16:02Z,2018-03-01T00:03:45Z,2019-04-14T14:17:19Z,MERGED,True,712,0,9,https://github.com/AndreaGreco,Http client OTA,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/553,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/553#issuecomment-369427064,"Add extra for lightweight HTTP client ota upgrade
With relative example",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,553,2018-01-22T23:16:02Z,2018-03-01T00:03:45Z,2019-04-14T14:17:19Z,MERGED,True,712,0,9,https://github.com/AndreaGreco,Http client OTA,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/553,https://github.com/oremic,3,https://github.com/SuperHouse/esp-open-rtos/pull/553#issuecomment-482985564,"Add extra for lightweight HTTP client ota upgrade
With relative example","I used this library for the basic sonoff with the library maximkulkin / esp-wifi-config.
But on restart I lose the parameters saved in sysparameter.
Flashsize = 8m
how can i solve thanks",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/554,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.",True,"{'HOORAY': ['https://github.com/flannelhead'], 'THUMBS_UP': ['https://github.com/jeffsf', 'https://github.com/SaimenSays']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-360081213,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","The default lwip stack has been lowered from 768 words to 480 words,  due to the reduced stack usage by the mdns responder, recovering almost 1k. Hope this does not impact other apps, but memory can be tight.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/jeffsf,3,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-364183323,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","While extras/sntp appears to extract src/apps/sntp/sntp.*, having the current version ""in tree"" will resolve some of the problems with the present SNTP implementation, such as its failing to measure and take into account RTT. While I'm not sure why the code was replicated in extras/sntp (especially as you need to have LWIP to use it), updating sntp.* is quite welcome (as is updating LWIP, in general!)
Edit: For the ""new"" SNTP, this will be required to provide LWIP_ASSERT_CORE_LOCKED()",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/jeffsf,4,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-364339042,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","When I check this out or merge this onto master I get many compile-time warnings about redefinition of [UN}LOCK_TCP_CORE() such as
In file included from /Volumes/esp-build/esp-open-rtos/open_esplibs/libnet80211/ieee80211_hostap.c:8:0:
../../lwip/lwip/src/include/lwip/tcpip.h:56:0: warning: ""LOCK_TCPIP_CORE"" redefined [enabled by default]
 #define LOCK_TCPIP_CORE()     sys_mutex_lock(&lock_tcpip_core)
 ^
In file included from ../../lwip/lwip/src/include/lwip/opt.h:51:0,
                 from ../../lwip/lwip/src/include/lwip/tcpip.h:40,
                 from /Volumes/esp-build/esp-open-rtos/open_esplibs/libnet80211/ieee80211_hostap.c:8:
../../lwip/include/lwipopts.h:129:0: note: this is the location of the previous definition
 #define LOCK_TCPIP_CORE()          sys_lock_tcpip_core()
 ^

Is there something  that I need to do to remove the cause of these warnings that you know of?
(examples/blink used for a relatively ""clean"" build of LWIP)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-364407838,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","There are no warnings here when building examples/blink.  The patch has been rebased to master and updated to the latest lwip too, and the build check above did not complain, so perhaps you will need to explore the issue locally.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/jeffsf,6,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-364452950,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","Confirm no compiler warnings building blink after git submodule update
(not sync -- too much time on Android, apparently)
Tracking down
Warning: ELF binary has undefined symbol sys_mbox_trypost_fromisr

Thanks for the effort on this merge and the response.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/SaimenSays,7,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-365336990,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","After latest update I also get the

Warning: ELF binary has undefined symbol sys_mbox_trypost_fromisr

If it is not related to this update, what can I check to find what cause it has? This symbol is not in my code, so there is something included which uses it. For the blink example this is optimized away and won't generate the warning, or I am wrong?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/flannelhead,8,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-365403521,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.",It seems that lwIP now requires a function sys_mbox_trypost_fromisr along with sys_mbox_trypost in sys_arch.c and this implementation is missing somehow.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/ourairquality,9,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-365444769,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","The function sys_mbox_trypost_fromisr is not required for esp-open-rtos and it does not use that path. Missed that this had been added to lwip, and here's a quick patch to quieten linking #567",True,{'THUMBS_UP': ['https://github.com/SaimenSays']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/flannelhead,10,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-365510871,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","@ourairquality, thank you! I was even getting linker failures for some reason, which seem pretty illogical:
./build/lwip.a(tcpip.o): In function `tcpip_send_msg_wait_sem':
/home/sakari/projektit/espway/esp-open-rtos/lwip/lwip/src/api/tcpip.c:436: undefined reference to `sys_mbox_trypost_fromisr'
/home/sakari/projektit/espway/esp-open-rtos/lwip/lwip/src/api/tcpip.c:436: undefined reference to `sys_mbox_trypost_fromisr'

What baffles me is that tcpip_send_msg_wait_sem doesn't refer to sys_mbox_trypost_fromisr. It is called from tcpip_callbackmsg_trycallback_fromisr though, and probably the linker is just confusing something with the line numbers.
Adding the stub certainly removes the errors.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/SaimenSays,11,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-366063875,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","@ourairquality: Thanks for all your work!
For my project I get multiple ""Function called without core lock"". After some inspection I need to add multiple LOCK_TCP_IP core to tcp_new(), tcp_bind(), tcp_accept(), ... Now everything seems to be fine, but I think this not the original intention.
Are these tcp_ not intended for user code and should I use higher level functions instead? Some time ago I tried to use netconn API, but I find this a bit strange and dropped it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,554,2018-01-24T06:59:25Z,2018-02-13T11:39:35Z,2018-02-16T14:02:14Z,MERGED,True,345,185,12,https://github.com/ourairquality,lwip update,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/554,https://github.com/ourairquality,12,https://github.com/SuperHouse/esp-open-rtos/pull/554#issuecomment-366243009,"The mdns resolver has been reworked to lower stack and memory usage. It received good feedback from upstream but was unfortunately not accepted as the change uses malloc'ed memory and the upstream lwip wishes to work with pools and without using malloc. The high stack usage was a big problem for esp-open-rtos, so we might have to maintain the differences for now.


Improved lwip core locking, and lock checking. Upstream improvements, that need some added support from esp-open-rtos specific code. Move core lock is performed when calling from the esp-open-rtos code now, so a little safer. The checking is not enforced, but project might see warning messages and might want to look into them.


The esp-open-rtos lwip support has been sync'ed with the new freertos port included with lwip. There are still some differences, but both appear to have benefited from this effort and the differences are smaller.


A few lwip timer bugs have been resolved. This might help resolve some issues.


Plus it picks up all the other upstream fixes and improvements.","@SaimenSays This was a new check for lwip, and for now it just prints a warning for esp-open-rtos. The intention is not to add LOCK_TCP_IP to these lwip functions rather the caller needs to ensure this lock is held by wrapping the call in LOCK_TCP_IP() and UNLOCK_TCPIP_CORE(). On inspection it might be that the lock also needs to be help between some of these calls.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,556,2018-01-25T16:22:26Z,2018-02-09T08:04:05Z,2018-02-09T08:04:05Z,MERGED,True,4,0,1,https://github.com/andrewclink,Add makefile flash hooks,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/556,https://github.com/andrewclink,1,https://github.com/SuperHouse/esp-open-rtos/pull/556,"Every time I update I find that I'm editing common.mk to fix my terminal program. With this PR, I can just stick functions in local.mk (which is in .gitignore) like so:
define will_flash
    @echo About to flash, fix terminal program, etc.
endef

define did_flash
    @echo Flash finished, clean up.
endef

It might even be possible to determine the exit status of esptool to pass as an argument, but it's not necessary for me.","Every time I update I find that I'm editing common.mk to fix my terminal program. With this PR, I can just stick functions in local.mk (which is in .gitignore) like so:
define will_flash
    @echo About to flash, fix terminal program, etc.
endef

define did_flash
    @echo Flash finished, clean up.
endef

It might even be possible to determine the exit status of esptool to pass as an argument, but it's not necessary for me.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,556,2018-01-25T16:22:26Z,2018-02-09T08:04:05Z,2018-02-09T08:04:05Z,MERGED,True,4,0,1,https://github.com/andrewclink,Add makefile flash hooks,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/556,https://github.com/andrewclink,2,https://github.com/SuperHouse/esp-open-rtos/pull/556#issuecomment-360519069,"Every time I update I find that I'm editing common.mk to fix my terminal program. With this PR, I can just stick functions in local.mk (which is in .gitignore) like so:
define will_flash
    @echo About to flash, fix terminal program, etc.
endef

define did_flash
    @echo Flash finished, clean up.
endef

It might even be possible to determine the exit status of esptool to pass as an argument, but it's not necessary for me.",I'm using GNU Make 3.81 which ships with macOS High Sierra. Obviously this needs to be tested on other versions of Make.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,558,2018-01-27T22:56:54Z,2018-02-02T20:21:30Z,2018-02-02T20:21:30Z,MERGED,True,1,1,1,https://github.com/wutje,Update FreeRTOS license.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/558,https://github.com/wutje,1,https://github.com/SuperHouse/esp-open-rtos/pull/558,FreeRTOS is under MIT license and copyrighted by Amazon,FreeRTOS is under MIT license and copyrighted by Amazon,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,563,2018-02-07T06:36:07Z,2018-02-09T08:02:02Z,2018-02-09T08:02:02Z,MERGED,True,71,13,2,https://github.com/jeffsf,Improve extras/sntp -- Issue #562,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/563,https://github.com/jeffsf,1,https://github.com/SuperHouse/esp-open-rtos/pull/563,"Primary change is correcting the missing scaling of the microseconds calculation
Resolves #562
Other changes address:

Capture RTC count before any logging
No ""obligatory"" printf() logging
Change logged message to show:

adjustment about to be made in seconds
time since last SNTP update
ratio of the two as ppm
""cal"" value (raw as int, as before)


Initialize ""cal"" value from sdk_system_rtc_clock_cali_proc()

I'm more than happy to squash this, or split into mutiple commits","Primary change is correcting the missing scaling of the microseconds calculation
Resolves #562
Other changes address:

Capture RTC count before any logging
No ""obligatory"" printf() logging
Change logged message to show:

adjustment about to be made in seconds
time since last SNTP update
ratio of the two as ppm
""cal"" value (raw as int, as before)


Initialize ""cal"" value from sdk_system_rtc_clock_cali_proc()

I'm more than happy to squash this, or split into mutiple commits",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,563,2018-02-07T06:36:07Z,2018-02-09T08:02:02Z,2018-02-09T08:02:02Z,MERGED,True,71,13,2,https://github.com/jeffsf,Improve extras/sntp -- Issue #562,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/563,https://github.com/jeffsf,2,https://github.com/SuperHouse/esp-open-rtos/pull/563#issuecomment-364179994,"Primary change is correcting the missing scaling of the microseconds calculation
Resolves #562
Other changes address:

Capture RTC count before any logging
No ""obligatory"" printf() logging
Change logged message to show:

adjustment about to be made in seconds
time since last SNTP update
ratio of the two as ppm
""cal"" value (raw as int, as before)


Initialize ""cal"" value from sdk_system_rtc_clock_cali_proc()

I'm more than happy to squash this, or split into mutiple commits","As I ""peel the onion"" on the SNTP implementation, it looks like there are other issues to resolve as well (Edit: which the new LWIP code addresses). I'm planning on rebasing this into two commits

Resolve calculation error
Improve logging
so that various portions could be cherry-picked, if appropriate.

Please hold off on merge until I can make those changes, as well as a ""simple"" #define to enable printf()-based logging. #define SNTP_LOGD(FMT, ...) printf(FMT ""\n"", ##__VA_ARGS__) in the form of a compiler flag is rather awkward)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,563,2018-02-07T06:36:07Z,2018-02-09T08:02:02Z,2018-02-09T08:02:02Z,MERGED,True,71,13,2,https://github.com/jeffsf,Improve extras/sntp -- Issue #562,7,[],https://github.com/SuperHouse/esp-open-rtos/pull/563,https://github.com/jeffsf,3,https://github.com/SuperHouse/esp-open-rtos/pull/563#issuecomment-364337551,"Primary change is correcting the missing scaling of the microseconds calculation
Resolves #562
Other changes address:

Capture RTC count before any logging
No ""obligatory"" printf() logging
Change logged message to show:

adjustment about to be made in seconds
time since last SNTP update
ratio of the two as ppm
""cal"" value (raw as int, as before)


Initialize ""cal"" value from sdk_system_rtc_clock_cali_proc()

I'm more than happy to squash this, or split into mutiple commits","86fa1ad represents the compiler flag
I tried rebasing into a functional-correctness commit and a debug-output commit and wasn't completely successful. I could give it another try, or just go ahead and squash this entire thing if you choose to accept it.
The new LWIP drop of #554 seems to contain a near rewrite of the LWIP SNTP code that now seems to:

Consider RTT in setting time
Handle broadcast NTP
Accept NTP server from DHCP

Rather than reinvent the wheel on the obsolete LWIP core of extras/sntp, I'm going to continue development off a merge between master and #554.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,565,2018-02-12T14:15:00Z,2018-02-13T11:38:52Z,2018-02-13T11:38:52Z,MERGED,True,2,1,2,https://github.com/andrewclink,Allow overriding bootloader flash arguments,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/565,https://github.com/andrewclink,1,https://github.com/SuperHouse/esp-open-rtos/pull/565,"This just pulls out the rboot arguments into a separate variable to allow overriding RBOOT_ARGS in local.mk or an application's makefile.
I have several different flash arrangements and rewriting the bootloader with different SPI schemes (DIO, QIO, 4m, 8m, etc) breaks things. Instead of changing FLASH_SIZE, FLASH_MODE, and FLASH_SPEED each time a different chip is flashed, overriding RBOOT_ARGS to be blank allows an application to write a custom bootloader (maybe without rboot's config at 0x1000) or none at all.","This just pulls out the rboot arguments into a separate variable to allow overriding RBOOT_ARGS in local.mk or an application's makefile.
I have several different flash arrangements and rewriting the bootloader with different SPI schemes (DIO, QIO, 4m, 8m, etc) breaks things. Instead of changing FLASH_SIZE, FLASH_MODE, and FLASH_SPEED each time a different chip is flashed, overriding RBOOT_ARGS to be blank allows an application to write a custom bootloader (maybe without rboot's config at 0x1000) or none at all.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,567,2018-02-13T23:43:55Z,2018-02-14T11:57:57Z,2018-02-14T11:57:57Z,MERGED,True,6,0,1,https://github.com/ourairquality,lwip add and stub for sys_mbox_trypost_fromisr(),1,[],https://github.com/SuperHouse/esp-open-rtos/pull/567,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/567,"This is not supported on esp-open-rtos, but add a stub to quieten linker warnings.","This is not supported on esp-open-rtos, but add a stub to quieten linker warnings.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,571,2018-02-16T13:45:24Z,2018-02-19T05:16:59Z,2018-02-19T05:16:59Z,MERGED,True,1564,1679,50,https://github.com/ourairquality,Newlib: update to version 3.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/571,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/571,Also include some code from libc/unix such as basename.,Also include some code from libc/unix such as basename.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,571,2018-02-16T13:45:24Z,2018-02-19T05:16:59Z,2018-02-19T05:16:59Z,MERGED,True,1564,1679,50,https://github.com/ourairquality,Newlib: update to version 3.0.0,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/571,https://github.com/jeffsf,2,https://github.com/SuperHouse/esp-open-rtos/pull/571#issuecomment-366261648,Also include some code from libc/unix such as basename.,It's certainly a welcome change to see newlib has dropped support for ancient C and has readable function prototypes. Looks like they've bumped time_t up to 64 bits as well. Thanks again @ourairquality -- looking forward to this update.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,574,2018-02-18T05:28:08Z,2018-02-18T15:25:58Z,2018-02-18T15:25:58Z,MERGED,True,1,1,1,https://github.com/ourairquality,lwip: update and fix compilation with timer debug enabled.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/574,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/574,See #573,See #573,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,578,2018-02-23T02:04:18Z,2018-03-01T00:01:41Z,2018-03-01T00:01:41Z,MERGED,True,2591,0,15,https://github.com/jeffsf,extras/timekeeping -- provide POSIX-like interface,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/578,https://github.com/jeffsf,1,https://github.com/SuperHouse/esp-open-rtos/pull/578,"Provide POSIX-like timekeeping utilities using system clock
to support monotonic, accurate, timezone-aware time
Implements settimeofday(), gettimeofday(), and adjtime()
Utilizes setenv() and tzset()
See README.timekeeping.md for more details
Examples
Set Time of Day (UTC)
struct timeval tv;
tv->tv_sec = 1518798027;  /* 2018-02-16T16:20:27+00:00 */
tv->tv_usec = 0;
settimeofday(&tv, NULL);

Get Time of Day (UTC)
struct timeval tv;
gettimeofday(&tv, NULL);

Slew Time
struct timeval tv;
tv->tv_sec = 0;
tv->tv_usec = -50 * 1000;  /* -50 ms */
adjtime(&tv, NULL);

Set Local Time Zone to US Pacific
setenv(""TZ"", ""PST8PDT7,M3.1.0,M11.1.0"", 1);
tzset();

Set Local Time Zone to UTC
setenv(""TZ"", ""UTC0UTC0"", 1);
tzset();

Highlights
This ""extra"" splits out the timekeeping functions from those associated with clock discipline. It attempts to address some of the challenges with the integrated clock/SNTP implementation in extras/sntp.
It uses the system clock which should have 15 ppm or better accuracy, significantly better than the ESP8266 RTC and likely better than off-board RTCs. My Adafruit Huzzah on my desk shows around 5-6 ppm drift against NTP broadcast on my local network.
Timekeeping functionality is available without needing SNTP synchronization. If you want to call the moment your program starts ticking as ""0 seconds"", you can do that.
Timezone functionality is provided through the POSIX-like TZ environment variable using the standard setenv() and tzset() calls. This allows for daylight/summer time to be implemented without further updates by applications, for most locations. The internal clock is always in UTC (or whatever reference chosen) so it does not change when the timezone offset changes. ctime(), localtime(), and their ilk work with the timezone without modification.
The implementation of adjtime() means that the clock discipline can implement monotonic time -- no more backwards jumps.
The timekeeping internals are locked when called through the standard calls, improving robustness in multi-threaded applications. The lock utilizes the same TZ_LOCK as newlib implements, which calls to xSemaphoreTake() so should benefit from task-priority escalation of a blocking task in a FreeRTOS-like manner.
There are no ""special"" header files required; <sys/time.h>, <stdlib.h>, and <time.h> are sufficient to define the API.
The supplied routines are expected to be consistent with their POSIX counterparts, including a -1 return value on error and setting the instance-specific errno within their ""reentrant"" implementations.
Even when slew is underway, there are ""no"" cycles consumed by the timekeeping routines until gettimeofday(), settimeofday(), or adjtime() is called; there are no timers involved with adjtime(). Calculations are done with integer arithmetic to further speed performance. I say ""no"" in quotes, as the hourly wrap of the system clock needs to be detected. Calling any of the three aforementioned functions will accomplish that, as will simply calling gettimeofday(NULL, NULL).
The routines have been manually tested to confirm utility and correctness. The tests that I used are present in the extras/timekeeping/tests/ directory. Let me know if you would like the tests removed.
Testing With LWIP SNTP app
I've tested these routines using the ""new"" LWIP SNTP app and the results for broadcast NTP are very good. I see a reasonably consistent ~0.5 ms / min drift against the NTP server, with only occasional deviations up to around 1 ms. As the implementation uses adjtime() to slew the clock, time remains monotonic even when the reference time is ""behind"" the clock time.
The implementation of LWIP SNTP runs all but the first poll in the tcpip_thread so it is already at high priority.
I can run the example for many hours with a heap size of 192, suggesting that 256 is a ""safe"" size.
I'm less than thrilled with the performance of the LWIP SNTP app in polling mode, even with RTT compensation in place. As the timekeeping routines work well with the broadcast/listener mode, I suspect the problem is in the LWIP code or networking code. What I am seeing are generally consistent results, with somewhat higher deviation, than with the broadcast mode. Disturbing, however, are larger deviations, that might be clustered around multiples of 5 ms. How much of that is my mind knowing that a ""tick"" is 10 ms and how much is reality is an open question.
I'd like to look further into the performance of the LWIP SNTP code, including an examination of the WiFi packets, before contributing examples/sntp-lwip or the like.","Provide POSIX-like timekeeping utilities using system clock
to support monotonic, accurate, timezone-aware time
Implements settimeofday(), gettimeofday(), and adjtime()
Utilizes setenv() and tzset()
See README.timekeeping.md for more details
Examples
Set Time of Day (UTC)
struct timeval tv;
tv->tv_sec = 1518798027;  /* 2018-02-16T16:20:27+00:00 */
tv->tv_usec = 0;
settimeofday(&tv, NULL);

Get Time of Day (UTC)
struct timeval tv;
gettimeofday(&tv, NULL);

Slew Time
struct timeval tv;
tv->tv_sec = 0;
tv->tv_usec = -50 * 1000;  /* -50 ms */
adjtime(&tv, NULL);

Set Local Time Zone to US Pacific
setenv(""TZ"", ""PST8PDT7,M3.1.0,M11.1.0"", 1);
tzset();

Set Local Time Zone to UTC
setenv(""TZ"", ""UTC0UTC0"", 1);
tzset();

Highlights
This ""extra"" splits out the timekeeping functions from those associated with clock discipline. It attempts to address some of the challenges with the integrated clock/SNTP implementation in extras/sntp.
It uses the system clock which should have 15 ppm or better accuracy, significantly better than the ESP8266 RTC and likely better than off-board RTCs. My Adafruit Huzzah on my desk shows around 5-6 ppm drift against NTP broadcast on my local network.
Timekeeping functionality is available without needing SNTP synchronization. If you want to call the moment your program starts ticking as ""0 seconds"", you can do that.
Timezone functionality is provided through the POSIX-like TZ environment variable using the standard setenv() and tzset() calls. This allows for daylight/summer time to be implemented without further updates by applications, for most locations. The internal clock is always in UTC (or whatever reference chosen) so it does not change when the timezone offset changes. ctime(), localtime(), and their ilk work with the timezone without modification.
The implementation of adjtime() means that the clock discipline can implement monotonic time -- no more backwards jumps.
The timekeeping internals are locked when called through the standard calls, improving robustness in multi-threaded applications. The lock utilizes the same TZ_LOCK as newlib implements, which calls to xSemaphoreTake() so should benefit from task-priority escalation of a blocking task in a FreeRTOS-like manner.
There are no ""special"" header files required; <sys/time.h>, <stdlib.h>, and <time.h> are sufficient to define the API.
The supplied routines are expected to be consistent with their POSIX counterparts, including a -1 return value on error and setting the instance-specific errno within their ""reentrant"" implementations.
Even when slew is underway, there are ""no"" cycles consumed by the timekeeping routines until gettimeofday(), settimeofday(), or adjtime() is called; there are no timers involved with adjtime(). Calculations are done with integer arithmetic to further speed performance. I say ""no"" in quotes, as the hourly wrap of the system clock needs to be detected. Calling any of the three aforementioned functions will accomplish that, as will simply calling gettimeofday(NULL, NULL).
The routines have been manually tested to confirm utility and correctness. The tests that I used are present in the extras/timekeeping/tests/ directory. Let me know if you would like the tests removed.
Testing With LWIP SNTP app
I've tested these routines using the ""new"" LWIP SNTP app and the results for broadcast NTP are very good. I see a reasonably consistent ~0.5 ms / min drift against the NTP server, with only occasional deviations up to around 1 ms. As the implementation uses adjtime() to slew the clock, time remains monotonic even when the reference time is ""behind"" the clock time.
The implementation of LWIP SNTP runs all but the first poll in the tcpip_thread so it is already at high priority.
I can run the example for many hours with a heap size of 192, suggesting that 256 is a ""safe"" size.
I'm less than thrilled with the performance of the LWIP SNTP app in polling mode, even with RTT compensation in place. As the timekeeping routines work well with the broadcast/listener mode, I suspect the problem is in the LWIP code or networking code. What I am seeing are generally consistent results, with somewhat higher deviation, than with the broadcast mode. Disturbing, however, are larger deviations, that might be clustered around multiples of 5 ms. How much of that is my mind knowing that a ""tick"" is 10 ms and how much is reality is an open question.
I'd like to look further into the performance of the LWIP SNTP code, including an examination of the WiFi packets, before contributing examples/sntp-lwip or the like.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,578,2018-02-23T02:04:18Z,2018-03-01T00:01:41Z,2018-03-01T00:01:41Z,MERGED,True,2591,0,15,https://github.com/jeffsf,extras/timekeeping -- provide POSIX-like interface,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/578,https://github.com/jeffsf,2,https://github.com/SuperHouse/esp-open-rtos/pull/578#issuecomment-368048364,"Provide POSIX-like timekeeping utilities using system clock
to support monotonic, accurate, timezone-aware time
Implements settimeofday(), gettimeofday(), and adjtime()
Utilizes setenv() and tzset()
See README.timekeeping.md for more details
Examples
Set Time of Day (UTC)
struct timeval tv;
tv->tv_sec = 1518798027;  /* 2018-02-16T16:20:27+00:00 */
tv->tv_usec = 0;
settimeofday(&tv, NULL);

Get Time of Day (UTC)
struct timeval tv;
gettimeofday(&tv, NULL);

Slew Time
struct timeval tv;
tv->tv_sec = 0;
tv->tv_usec = -50 * 1000;  /* -50 ms */
adjtime(&tv, NULL);

Set Local Time Zone to US Pacific
setenv(""TZ"", ""PST8PDT7,M3.1.0,M11.1.0"", 1);
tzset();

Set Local Time Zone to UTC
setenv(""TZ"", ""UTC0UTC0"", 1);
tzset();

Highlights
This ""extra"" splits out the timekeeping functions from those associated with clock discipline. It attempts to address some of the challenges with the integrated clock/SNTP implementation in extras/sntp.
It uses the system clock which should have 15 ppm or better accuracy, significantly better than the ESP8266 RTC and likely better than off-board RTCs. My Adafruit Huzzah on my desk shows around 5-6 ppm drift against NTP broadcast on my local network.
Timekeeping functionality is available without needing SNTP synchronization. If you want to call the moment your program starts ticking as ""0 seconds"", you can do that.
Timezone functionality is provided through the POSIX-like TZ environment variable using the standard setenv() and tzset() calls. This allows for daylight/summer time to be implemented without further updates by applications, for most locations. The internal clock is always in UTC (or whatever reference chosen) so it does not change when the timezone offset changes. ctime(), localtime(), and their ilk work with the timezone without modification.
The implementation of adjtime() means that the clock discipline can implement monotonic time -- no more backwards jumps.
The timekeeping internals are locked when called through the standard calls, improving robustness in multi-threaded applications. The lock utilizes the same TZ_LOCK as newlib implements, which calls to xSemaphoreTake() so should benefit from task-priority escalation of a blocking task in a FreeRTOS-like manner.
There are no ""special"" header files required; <sys/time.h>, <stdlib.h>, and <time.h> are sufficient to define the API.
The supplied routines are expected to be consistent with their POSIX counterparts, including a -1 return value on error and setting the instance-specific errno within their ""reentrant"" implementations.
Even when slew is underway, there are ""no"" cycles consumed by the timekeeping routines until gettimeofday(), settimeofday(), or adjtime() is called; there are no timers involved with adjtime(). Calculations are done with integer arithmetic to further speed performance. I say ""no"" in quotes, as the hourly wrap of the system clock needs to be detected. Calling any of the three aforementioned functions will accomplish that, as will simply calling gettimeofday(NULL, NULL).
The routines have been manually tested to confirm utility and correctness. The tests that I used are present in the extras/timekeeping/tests/ directory. Let me know if you would like the tests removed.
Testing With LWIP SNTP app
I've tested these routines using the ""new"" LWIP SNTP app and the results for broadcast NTP are very good. I see a reasonably consistent ~0.5 ms / min drift against the NTP server, with only occasional deviations up to around 1 ms. As the implementation uses adjtime() to slew the clock, time remains monotonic even when the reference time is ""behind"" the clock time.
The implementation of LWIP SNTP runs all but the first poll in the tcpip_thread so it is already at high priority.
I can run the example for many hours with a heap size of 192, suggesting that 256 is a ""safe"" size.
I'm less than thrilled with the performance of the LWIP SNTP app in polling mode, even with RTT compensation in place. As the timekeeping routines work well with the broadcast/listener mode, I suspect the problem is in the LWIP code or networking code. What I am seeing are generally consistent results, with somewhat higher deviation, than with the broadcast mode. Disturbing, however, are larger deviations, that might be clustered around multiples of 5 ms. How much of that is my mind knowing that a ""tick"" is 10 ms and how much is reality is an open question.
I'd like to look further into the performance of the LWIP SNTP code, including an examination of the WiFi packets, before contributing examples/sntp-lwip or the like.","Please hold on merging this -- not because of the code, but the parameter in one of the SNTP  ""tests"" related to slew vs. step probably should be larger than its 128-ms value.
Last night my local, broadcast setup saw a single, 200-ms spike. Some late packet, for who knows what reason. That probably shouldn't trigger a step, especially a backwards one. At 500 us/s a single-sample spike would only cause a slew of 32 ms over the typical 64-s broadcast period. Especially for users that don't have local NTP, I think the current 128-ms threshold is too small.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,578,2018-02-23T02:04:18Z,2018-03-01T00:01:41Z,2018-03-01T00:01:41Z,MERGED,True,2591,0,15,https://github.com/jeffsf,extras/timekeeping -- provide POSIX-like interface,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/578,https://github.com/jeffsf,3,https://github.com/SuperHouse/esp-open-rtos/pull/578#issuecomment-369114738,"Provide POSIX-like timekeeping utilities using system clock
to support monotonic, accurate, timezone-aware time
Implements settimeofday(), gettimeofday(), and adjtime()
Utilizes setenv() and tzset()
See README.timekeeping.md for more details
Examples
Set Time of Day (UTC)
struct timeval tv;
tv->tv_sec = 1518798027;  /* 2018-02-16T16:20:27+00:00 */
tv->tv_usec = 0;
settimeofday(&tv, NULL);

Get Time of Day (UTC)
struct timeval tv;
gettimeofday(&tv, NULL);

Slew Time
struct timeval tv;
tv->tv_sec = 0;
tv->tv_usec = -50 * 1000;  /* -50 ms */
adjtime(&tv, NULL);

Set Local Time Zone to US Pacific
setenv(""TZ"", ""PST8PDT7,M3.1.0,M11.1.0"", 1);
tzset();

Set Local Time Zone to UTC
setenv(""TZ"", ""UTC0UTC0"", 1);
tzset();

Highlights
This ""extra"" splits out the timekeeping functions from those associated with clock discipline. It attempts to address some of the challenges with the integrated clock/SNTP implementation in extras/sntp.
It uses the system clock which should have 15 ppm or better accuracy, significantly better than the ESP8266 RTC and likely better than off-board RTCs. My Adafruit Huzzah on my desk shows around 5-6 ppm drift against NTP broadcast on my local network.
Timekeeping functionality is available without needing SNTP synchronization. If you want to call the moment your program starts ticking as ""0 seconds"", you can do that.
Timezone functionality is provided through the POSIX-like TZ environment variable using the standard setenv() and tzset() calls. This allows for daylight/summer time to be implemented without further updates by applications, for most locations. The internal clock is always in UTC (or whatever reference chosen) so it does not change when the timezone offset changes. ctime(), localtime(), and their ilk work with the timezone without modification.
The implementation of adjtime() means that the clock discipline can implement monotonic time -- no more backwards jumps.
The timekeeping internals are locked when called through the standard calls, improving robustness in multi-threaded applications. The lock utilizes the same TZ_LOCK as newlib implements, which calls to xSemaphoreTake() so should benefit from task-priority escalation of a blocking task in a FreeRTOS-like manner.
There are no ""special"" header files required; <sys/time.h>, <stdlib.h>, and <time.h> are sufficient to define the API.
The supplied routines are expected to be consistent with their POSIX counterparts, including a -1 return value on error and setting the instance-specific errno within their ""reentrant"" implementations.
Even when slew is underway, there are ""no"" cycles consumed by the timekeeping routines until gettimeofday(), settimeofday(), or adjtime() is called; there are no timers involved with adjtime(). Calculations are done with integer arithmetic to further speed performance. I say ""no"" in quotes, as the hourly wrap of the system clock needs to be detected. Calling any of the three aforementioned functions will accomplish that, as will simply calling gettimeofday(NULL, NULL).
The routines have been manually tested to confirm utility and correctness. The tests that I used are present in the extras/timekeeping/tests/ directory. Let me know if you would like the tests removed.
Testing With LWIP SNTP app
I've tested these routines using the ""new"" LWIP SNTP app and the results for broadcast NTP are very good. I see a reasonably consistent ~0.5 ms / min drift against the NTP server, with only occasional deviations up to around 1 ms. As the implementation uses adjtime() to slew the clock, time remains monotonic even when the reference time is ""behind"" the clock time.
The implementation of LWIP SNTP runs all but the first poll in the tcpip_thread so it is already at high priority.
I can run the example for many hours with a heap size of 192, suggesting that 256 is a ""safe"" size.
I'm less than thrilled with the performance of the LWIP SNTP app in polling mode, even with RTT compensation in place. As the timekeeping routines work well with the broadcast/listener mode, I suspect the problem is in the LWIP code or networking code. What I am seeing are generally consistent results, with somewhat higher deviation, than with the broadcast mode. Disturbing, however, are larger deviations, that might be clustered around multiples of 5 ms. How much of that is my mind knowing that a ""tick"" is 10 ms and how much is reality is an open question.
I'd like to look further into the performance of the LWIP SNTP code, including an examination of the WiFi packets, before contributing examples/sntp-lwip or the like.","OK, suggestions from @ourairquality incorporated, additional testing and observation over the last several days in various modes with both local and remote ""pool"" servers.
Good to go now, from my perspective.
The timekeeping routines are unchanged otherwise. I've increased heap on one of the tests to 288 as, at 256, it raised warnings/errors when I referenced an NTP server pool by DNS name. I've added warnings about the SNTP integration not being ""production code"" as the simplistic slew-or-set approach is not robust to outliers. That said, I haven't seen anything anywhere near as that 225-ms one on my local network. The step threshold is at 125 ms, consistent with the NTPv4 STEPT parameter.
If anyone wants some good bedtime reading, https://www.eecis.udel.edu/~mills/database/reports/ntp4/ntp4.pdf will quickly put you to sleep.
I'm not losing my mind, after all. It seems likely that there is some 10-ms ""thing"" going on in the lwIP SNTP implementation, resulting in 5-ms errors in the server-to-client delay. I don't see it in broadcast mode at all.
Poll mode, local server, RTT enabled, histogram of offset between NTP measurement and free-running local clock, linear fit removed, over 641 samples (over 11 hours). x-axis in milliseconds:

￼",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,578,2018-02-23T02:04:18Z,2018-03-01T00:01:41Z,2018-03-01T00:01:41Z,MERGED,True,2591,0,15,https://github.com/jeffsf,extras/timekeeping -- provide POSIX-like interface,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/578,https://github.com/jeffsf,4,https://github.com/SuperHouse/esp-open-rtos/pull/578#issuecomment-369282633,"Provide POSIX-like timekeeping utilities using system clock
to support monotonic, accurate, timezone-aware time
Implements settimeofday(), gettimeofday(), and adjtime()
Utilizes setenv() and tzset()
See README.timekeeping.md for more details
Examples
Set Time of Day (UTC)
struct timeval tv;
tv->tv_sec = 1518798027;  /* 2018-02-16T16:20:27+00:00 */
tv->tv_usec = 0;
settimeofday(&tv, NULL);

Get Time of Day (UTC)
struct timeval tv;
gettimeofday(&tv, NULL);

Slew Time
struct timeval tv;
tv->tv_sec = 0;
tv->tv_usec = -50 * 1000;  /* -50 ms */
adjtime(&tv, NULL);

Set Local Time Zone to US Pacific
setenv(""TZ"", ""PST8PDT7,M3.1.0,M11.1.0"", 1);
tzset();

Set Local Time Zone to UTC
setenv(""TZ"", ""UTC0UTC0"", 1);
tzset();

Highlights
This ""extra"" splits out the timekeeping functions from those associated with clock discipline. It attempts to address some of the challenges with the integrated clock/SNTP implementation in extras/sntp.
It uses the system clock which should have 15 ppm or better accuracy, significantly better than the ESP8266 RTC and likely better than off-board RTCs. My Adafruit Huzzah on my desk shows around 5-6 ppm drift against NTP broadcast on my local network.
Timekeeping functionality is available without needing SNTP synchronization. If you want to call the moment your program starts ticking as ""0 seconds"", you can do that.
Timezone functionality is provided through the POSIX-like TZ environment variable using the standard setenv() and tzset() calls. This allows for daylight/summer time to be implemented without further updates by applications, for most locations. The internal clock is always in UTC (or whatever reference chosen) so it does not change when the timezone offset changes. ctime(), localtime(), and their ilk work with the timezone without modification.
The implementation of adjtime() means that the clock discipline can implement monotonic time -- no more backwards jumps.
The timekeeping internals are locked when called through the standard calls, improving robustness in multi-threaded applications. The lock utilizes the same TZ_LOCK as newlib implements, which calls to xSemaphoreTake() so should benefit from task-priority escalation of a blocking task in a FreeRTOS-like manner.
There are no ""special"" header files required; <sys/time.h>, <stdlib.h>, and <time.h> are sufficient to define the API.
The supplied routines are expected to be consistent with their POSIX counterparts, including a -1 return value on error and setting the instance-specific errno within their ""reentrant"" implementations.
Even when slew is underway, there are ""no"" cycles consumed by the timekeeping routines until gettimeofday(), settimeofday(), or adjtime() is called; there are no timers involved with adjtime(). Calculations are done with integer arithmetic to further speed performance. I say ""no"" in quotes, as the hourly wrap of the system clock needs to be detected. Calling any of the three aforementioned functions will accomplish that, as will simply calling gettimeofday(NULL, NULL).
The routines have been manually tested to confirm utility and correctness. The tests that I used are present in the extras/timekeeping/tests/ directory. Let me know if you would like the tests removed.
Testing With LWIP SNTP app
I've tested these routines using the ""new"" LWIP SNTP app and the results for broadcast NTP are very good. I see a reasonably consistent ~0.5 ms / min drift against the NTP server, with only occasional deviations up to around 1 ms. As the implementation uses adjtime() to slew the clock, time remains monotonic even when the reference time is ""behind"" the clock time.
The implementation of LWIP SNTP runs all but the first poll in the tcpip_thread so it is already at high priority.
I can run the example for many hours with a heap size of 192, suggesting that 256 is a ""safe"" size.
I'm less than thrilled with the performance of the LWIP SNTP app in polling mode, even with RTT compensation in place. As the timekeeping routines work well with the broadcast/listener mode, I suspect the problem is in the LWIP code or networking code. What I am seeing are generally consistent results, with somewhat higher deviation, than with the broadcast mode. Disturbing, however, are larger deviations, that might be clustered around multiples of 5 ms. How much of that is my mind knowing that a ""tick"" is 10 ms and how much is reality is an open question.
I'd like to look further into the performance of the LWIP SNTP code, including an examination of the WiFi packets, before contributing examples/sntp-lwip or the like.","https://api.travis-ci.org/v3/job/347111681/log.txt
[...]
CC /home/travis/build/SuperHouse/esp-open-rtos/extras/bearssl/BearSSL/src/int/i15_reduce.c
CC /home/travis/build/SuperHouse/esp-open-rtos/extras/bearssl/BearSSL/src/int/i15_rshift.c
CC /home/travis/build/SuperHouse/esp-open-rtos/extras/bearssl/BearSSL/src/int/i15_sub.c
CC /home/travis/build/SuperHouse/esp-open-rtos/extras/bearssl/BearSSL/src/int/i15_tmont.c


The job exceeded the maximum time limit for jobs, and has been terminated.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,579,2018-02-23T05:41:56Z,2018-02-23T17:29:43Z,2018-02-23T17:29:43Z,MERGED,True,58,0,4,https://github.com/nochkin,Multi-Channel Soft PWM library,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/579,https://github.com/nochkin,1,https://github.com/SuperHouse/esp-open-rtos/pull/579,"This is the soft PWM library with the support of independent multiple channels.
As per Issue 568 I think it makes more sense to add it as a separate library to avoid potential issues with the existing projects where the original single-channel PWM library is being used already.
I added the correspondent example as well.","This is the soft PWM library with the support of independent multiple channels.
As per Issue 568 I think it makes more sense to add it as a separate library to avoid potential issues with the existing projects where the original single-channel PWM library is being used already.
I added the correspondent example as well.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,580,2018-02-23T11:59:50Z,2018-02-23T17:30:21Z,2018-02-23T17:30:21Z,MERGED,True,12,12,1,https://github.com/ourairquality,newlib lock support: use a separate mutex and recursive mutex.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/580,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/580,In trying to save memory had incorrectly shared a non-recursive mutex with recursive mutex uses. Initialize one non-recursive mutex too.,In trying to save memory had incorrectly shared a non-recursive mutex with recursive mutex uses. Initialize one non-recursive mutex too.,True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,582,2018-02-27T18:44:46Z,2018-03-13T13:35:42Z,2018-03-13T13:35:42Z,MERGED,True,90,36,2,https://github.com/flannelhead,i2c: revise timing calculation,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/582,https://github.com/flannelhead,1,https://github.com/SuperHouse/esp-open-rtos/pull/582,"Look-up tables were used for determining the delay loop counts before.
Based on these hand-tuned values, the loop overhead was estimated for
each option -- 80 and 160 MHz, fast and slow GPIO access. Instead of the
great number of tunable parameters one now only has to tune the overhead
values if the code is changed.
Functions were added to the API which allow setting an arbitrary
frequency. API backward compatibility is retained.","Look-up tables were used for determining the delay loop counts before.
Based on these hand-tuned values, the loop overhead was estimated for
each option -- 80 and 160 MHz, fast and slow GPIO access. Instead of the
great number of tunable parameters one now only has to tune the overhead
values if the code is changed.
Functions were added to the API which allow setting an arbitrary
frequency. API backward compatibility is retained.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,582,2018-02-27T18:44:46Z,2018-03-13T13:35:42Z,2018-03-13T13:35:42Z,MERGED,True,90,36,2,https://github.com/flannelhead,i2c: revise timing calculation,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/582,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/582#issuecomment-370720374,"Look-up tables were used for determining the delay loop counts before.
Based on these hand-tuned values, the loop overhead was estimated for
each option -- 80 and 160 MHz, fast and slow GPIO access. Instead of the
great number of tunable parameters one now only has to tune the overhead
values if the code is changed.
Functions were added to the API which allow setting an arbitrary
frequency. API backward compatibility is retained.","You tested if frequency signals are good  for each option and frequency ?
Nice update. I guess, this soft i2c library will be the best of the esp8266 ^^",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,582,2018-02-27T18:44:46Z,2018-03-13T13:35:42Z,2018-03-13T13:35:42Z,MERGED,True,90,36,2,https://github.com/flannelhead,i2c: revise timing calculation,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/582,https://github.com/flannelhead,3,https://github.com/SuperHouse/esp-open-rtos/pull/582#issuecomment-370722331,"Look-up tables were used for determining the delay loop counts before.
Based on these hand-tuned values, the loop overhead was estimated for
each option -- 80 and 160 MHz, fast and slow GPIO access. Instead of the
great number of tunable parameters one now only has to tune the overhead
values if the code is changed.
Functions were added to the API which allow setting an arbitrary
frequency. API backward compatibility is retained.","@Zaltora: I tested with some configurations. Probably I should still check all the combinations (80MHz/register access, 80MHz/GPIO API, 160MHz/register access and 160MHz/GPIO API).
However, the formula that was introduced here produces the very same delay values that were hand-tuned and hardcoded before (if not even more precise!) The linear delay formula and coefficients are based on those hand-tuned values but the number of parameters is reduced.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,582,2018-02-27T18:44:46Z,2018-03-13T13:35:42Z,2018-03-13T13:35:42Z,MERGED,True,90,36,2,https://github.com/flannelhead,i2c: revise timing calculation,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/582,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/582#issuecomment-372666803,"Look-up tables were used for determining the delay loop counts before.
Based on these hand-tuned values, the loop overhead was estimated for
each option -- 80 and 160 MHz, fast and slow GPIO access. Instead of the
great number of tunable parameters one now only has to tune the overhead
values if the code is changed.
Functions were added to the API which allow setting an arbitrary
frequency. API backward compatibility is retained.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,583,2018-02-28T12:49:46Z,2018-04-02T06:22:49Z,2018-04-02T06:22:49Z,MERGED,True,47,6,8,https://github.com/ourairquality,newlib: rebuild with the global stdio streams enabled.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/583,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/583,"This change means that there is only one set of global stdin, stdout, and stderr FILE streams shared by all the threads. This reduces memory usage and avoids having to close these streams before threads exit. These streams still have a lock to synchronise access.
This was explored to address #564 but it seems to save a useful bit of memory too. Guess the stdio file stream memory usage adds up with a good number of threads.
This required adding support to newlib for this global stdio streams option when using the reent small option. Shall submit the change upstream for feedback there.
Testing and feedback welcomed.","This change means that there is only one set of global stdin, stdout, and stderr FILE streams shared by all the threads. This reduces memory usage and avoids having to close these streams before threads exit. These streams still have a lock to synchronise access.
This was explored to address #564 but it seems to save a useful bit of memory too. Guess the stdio file stream memory usage adds up with a good number of threads.
This required adding support to newlib for this global stdio streams option when using the reent small option. Shall submit the change upstream for feedback there.
Testing and feedback welcomed.",True,"{'THUMBS_UP': ['https://github.com/Zaltora', 'https://github.com/flannelhead', 'https://github.com/vlad-ivanov-name']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,583,2018-02-28T12:49:46Z,2018-04-02T06:22:49Z,2018-04-02T06:22:49Z,MERGED,True,47,6,8,https://github.com/ourairquality,newlib: rebuild with the global stdio streams enabled.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/583,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/583#issuecomment-376575272,"This change means that there is only one set of global stdin, stdout, and stderr FILE streams shared by all the threads. This reduces memory usage and avoids having to close these streams before threads exit. These streams still have a lock to synchronise access.
This was explored to address #564 but it seems to save a useful bit of memory too. Guess the stdio file stream memory usage adds up with a good number of threads.
This required adding support to newlib for this global stdio streams option when using the reent small option. Shall submit the change upstream for feedback there.
Testing and feedback welcomed.",I got no problem using this PR in my project. it allow to me 3.5k more heap.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,583,2018-02-28T12:49:46Z,2018-04-02T06:22:49Z,2018-04-02T06:22:49Z,MERGED,True,47,6,8,https://github.com/ourairquality,newlib: rebuild with the global stdio streams enabled.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/583,https://github.com/ourairquality,3,https://github.com/SuperHouse/esp-open-rtos/pull/583#issuecomment-376742714,"This change means that there is only one set of global stdin, stdout, and stderr FILE streams shared by all the threads. This reduces memory usage and avoids having to close these streams before threads exit. These streams still have a lock to synchronise access.
This was explored to address #564 but it seems to save a useful bit of memory too. Guess the stdio file stream memory usage adds up with a good number of threads.
This required adding support to newlib for this global stdio streams option when using the reent small option. Shall submit the change upstream for feedback there.
Testing and feedback welcomed.","The newlib patch was accepted upstream. There were only some minor documentation improvements. This patch seems a good 'next step', ahead of the icache/iram usage patch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/584,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.",True,{'THUMBS_UP': ['https://github.com/Zaltora']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369560468,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Unfortunately this is still not quite right. Reports of wifi beacon timeouts when using the lower icache for the malloc heap. It appears to actually be the hit losing the extra icache, as the problem is reproducible even when the lower icache has no data in it. Still there is a small gain using the unused iram.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369564086,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","I am in for test ! Like you know i am desperate for more RAM. My app is hungry. My recent work are specific to GUI system called lvgl, a project open source to design advanced GUI for many different screens. I want add it as component to esp-open-rtos.
It is work already. i use it with ssd1306.
With your update, i will specify to lvgl to use I-RAM instead of dram.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369686221,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","why beacon is impacted by this change ?
Maybe some wifi primitive function need to be put in IRAM to avoid to load it from flash than can be the reason of the extra time ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,5,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369716591,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","@Zaltora Are you seeing the beacon timeout too? Perhaps moving some code to iram would solve this, but I have not been able to nail it down. I suspect it has something to do with the sdk libpp, and there is a NMI Wifi interrupt handler there that might be timing critical. I don't see the beacon timeout when just using the iram and not the icache. It would be great to unlock that extra 16k, and it seem so close.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369857767,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","I didn't remember to get problem when i manually disable ICACHE bank 0 with #510. I will do a text to confirm.
I don't no how to enable icache with your pull request. i add this in my makefile:
EXTRA_C_CXX_FLAGS = -DESP8266_ENABLE_LOW_ICACHE
but seem do not work. what is the good way ?
First remark, i got more HEAP than with official RTOS  (global stream update ?) I got ~2k more. That is good.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,7,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369861824,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","It needs to be given 0 to disable the low icache, and that should report an extra 16k. We can rework the options and interface based on feedback, if it proves useful.
EXTRA_C_CXX_FLAGS = -DESP8266_ENABLE_LOW_ICACHE=0",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,8,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369865077,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Ok that my output with icache:
MAIN: SDK version:0.9.9

SDK versionMAIN: DPORT DPORT0                3FF00000   00000001
MAIN: DPORT UNKNOW                3FF00004      00000005
MAIN: DPORT UNKNOW                3FF00008      0000080F
MAIN: DPORT SPI_READY             3FF0000C      04000102
MAIN: DPORT UNKNOW                3FF00010      00000000
MAIN: DPORT CPU_CLOCK             3FF00014      00000000
MAIN: DPORT CLOCKGATE_WATCHDOG    3FF00018      FFFF00FF
MAIN: DPORT UNKNOW                3FF0001C      00000000
MAIN: DPORT SPI_INT_STATUS        3FF00020      00000010
MAIN: DPORT SPI_CACHE_RAM         3FF00024      0000001A
MAIN: DPORT PERI_IO               3FF00028      00000000
MAIN: DPORT SLC_TX_DESC_DEBUG     3FF0002C      00000000
MAIN: DPORT UNKNOW                3FF00030      00004040
MAIN: DPORT UNKNOW                3FF00034      00000000
MAIN: DPORT UNKNOW                3FF00038      00000041
MAIN: DPORT UNKNOW                3FF0003C      00000000
MAIN: DPORT UNKNOW                3FF00040      00000000
MAIN: DPORT UNKNOW                3FF00044      00000000
MAIN: DPORT UNKNOW                3FF00048      00000000
MAIN: DPORT UNKNOW                3FF0004C      00000000
MAIN: DPORT OTP_MAC0              3FF00050      F67E0000
MAIN: DPORT OTP_MAC1              3FF00054      020002D9
MAIN: DPORT OTP_CHIPID            3FF00058      AC00B000
MAIN: DPORT OTP_MAC2              3FF0005C      00DC4F22
MAIN: Heap: 53636
MAIN: void size: 4
MAIN: template : 11111111,11111111
data  : 0x3ffe8000 ~ 0x3ffe8964, len: 2404
rodata: 0x3ffe8968 ~ 0x3ffe91f8, len: 2192
bss   : 0x3ffe91f8 ~ 0x3fff1638, len: 33856
heap  : 0x3fff1638 ~ 0x40000000, len: 59848
MAIN: var addr: 3FFFBFC4
MAIN: var2 addr: 3FFFBFC0
mode : softAP(de:4f:22:02:d9:f6)
add if1
bcn 100

without icache:
MAIN: SDK version:0.9.9
SDK versionMAIN: DPORT DPORT0                3FF00000   00000001
MAIN: DPORT UNKNOW                3FF00004      00000005
MAIN: DPORT UNKNOW                3FF00008      0000080F
MAIN: DPORT SPI_READY             3FF0000C      00000102
MAIN: DPORT UNKNOW                3FF00010      00000000
MAIN: DPORT CPU_CLOCK             3FF00014      00000000
MAIN: DPORT CLOCKGATE_WATCHDOG    3FF00018      FFFF00FF
MAIN: DPORT UNKNOW                3FF0001C      00000000
MAIN: DPORT SPI_INT_STATUS        3FF00020      00000010
MAIN: DPORT SPI_CACHE_RAM         3FF00024      0000000A
MAIN: DPORT PERI_IO               3FF00028      00000000
MAIN: DPORT SLC_TX_DESC_DEBUG     3FF0002C      00000000
MAIN: DPORT UNKNOW                3FF00030      00004040
MAIN: DPORT UNKNOW                3FF00034      00000000
MAIN: DPORT UNKNOW                3FF00038      00000041
MAIN: DPORT UNKNOW                3FF0003C      00000000
MAIN: DPORT UNKNOW                3FF00040      00000000
MAIN: DPORT UNKNOW                3FF00044      00000000
MAIN: DPORT UNKNOW                3FF00048      00000000
MAIN: DPORT UNKNOW                3FF0004C      00000000
MAIN: DPORT OTP_MAC0              3FF00050      F67E0000
MAIN: DPORT OTP_MAC1              3FF00054      020002D9
MAIN: DPORT OTP_CHIPID            3FF00058      AC00B000
MAIN: DPORT OTP_MAC2              3FF0005C      00DC4F22
MAIN: Heap: 70020
MAIN: void size: 4
MAIN: template : 11111111,11111111
data  : 0x3ffe8000 ~ 0x3ffe8964, len: 2404
rodata: 0x3ffe8968 ~ 0x3ffe91f8, len: 2192
bss   : 0x3ffe91f8 ~ 0x3fff1638, len: 33856
heap  : 0x3fff1638 ~ 0x40000000, len: 59848
MAIN: var addr: 3FFFBFC4
MAIN: var2 addr: 3FFFBFC0
mode : softAP(de:4f:22:02:d9:f6)
add if1
bcn 100

I didn't see visible beacon problem for now. I will try with my app.
global stream rework gain is bigger than expected : 3,5k well well !!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,9,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369866694,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Ok tested my final app. no problem on serial output. Trying to connect with Wifi, no problem detected
It is work well too. i got 30k heap free instead of 10K before your update
What problem you got with beacon? you got a message on serial output ?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,10,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369867655,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","the problem is reproducible even when the lower icache has no data in it

i didn't use icache right now. Just enable the option in makefile and it is work. I guess by default, DRAM is used first.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,11,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369872939,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Yes, the default is to use the DRAM first, but that can be changed. I've been able to reproduce wifi problems. Still not sure what the cause is. It might be that the app is overloading the icache and performance is falling off a cliff, or there might be bugs in there somewhere. Shall keep exploring. If you could give it a try and report any problems that might give more clues.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,12,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369874695,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","how work the system with: set_malloc_regions().
i need call it before call functions than will use dynamic memory ?
That not a problem with concurrent system ?
If i do this, only this task will use IRAM ?
Task1()
{
   set_malloc_regions(MALLOC_MASK_PREFER_IRAM);
   while(1)
   {
     //Dynamic memory functions here
   }
}",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,13,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369878296,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Yes that usage of set_malloc_regions() looks good. It is thread local, so each thread can have a different setting and each thread can change the setting for a dynamic code context without affecting other threads. The function returns the prior setting to allow restoring the setting on exit from a dynamic code context.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,14,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369881559,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Wooo,  when i define a malloc regions in a task, it like define a new propriety to the task. Nice system. I am really curious how it is work when coding.
i put   set_malloc_regions(MALLOC_MASK_PREFER_IRAM); in my  user_init() and screen task to see what happens. No Wifi problem detected yet.
What can i do to force the wifi problem problem ?.
I manage socket with lwip in a particular way (non blocking API). the wifi is set in AP mode.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,15,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-369886777,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","The setting is stored in the newlib reent structure which is swapped when freertos changes threads. There might have been other ways, and the newlib code is not pretty, but that seems a detail that can be cleaned up later if this works.
The http_get_mbedtls example gives a beacon timeout, but it might have a large code footprint and it works the cpu hard. I tried an example loop just accessing the dram hard and see problems too, so there might be deeper problems when using only 16k of icache. Might also be seeing problems with the spi access code, when an nmi wifi interrupt occurs. Let me keep working though things to try to narrow them down. I have not spotted any data corruption issues though. It might not be a show stopper for some apps if the wifi loses some packets when the cpu is working hard, but that needs to be understand, need to be sure there are not other bugs.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,16,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-370646849,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Testing of the flash code with buffers in iram or icache has shown no problems. Tested a range of small buffers sizes, buffer offsets, flash offsets, all worked ok. Looking at the source code also suggests it should not make a difference if the source and target buffers are in dram or iram, except for performance, because the code uses regular load and store instructions to copy between the flash i/o buffers.
I have no more clues about wifi stability, not even sure if there is an issue. I made some of my code more robust to unreliable wifi and it seems ok. Was able to get the mbedt_get_http example running using larger buffers and the extra icache memory, and also the aws example using larger buffers.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,17,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-370711473,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","I was thinking about the wifi problem. If the example you tested make cpu work hard like ""http_get_mbedtls"". Maybe the problem is related to this because use IRAM intensifies the use of cpu. What effect got to overclock the cpu to 160MHz if it is not the case ?
the problem can be priority on interrupt which is not respected ? (even if cpu is at 100% ) (lock system was reworked for libc ( for timer1 interupt ))
I got some library i want they use other RAM than the current task use (e.g: WIFI task use DRAM to avoid problem related to use IRAM like tx buffer. The following code is good ? :
Task1()
{
   set_malloc_regions(MALLOC_MASK_PREFER_IRAM);
   while(1)
   {
     //Dynamic memory functions in IRAM
      uint32_t malloc_mask = set_malloc_regions(MALLOC_MASK_DRAM);     
      //Dynamic memory functions in DRAM
      set_malloc_regions(malloc_mask);
   }
}
set_malloc_regions(malloc_mask); will restore the old setting with IRAM ?
I suggest to add an exemple with different RAM scenario for final user.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,18,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-371030091,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","@Zaltora Yes, that code looks good. There are some examples in the lwip code and FreeRTOS code. I have not spotted any problems with the task priorities.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,19,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-373960184,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","A bug in the changes has been found and fixed. There was an error in alignment adjustments, the result could be that malloc used an extra word outside the region supplied, but it depended on the alignment of the end of the text segment which depended on the build. It only affected the object at the very end of the region, which might have lost one word. So it was not an easy one to narrow down. If people had problems with this change then it might be worth giving it another go.",True,{'THUMBS_UP': ['https://github.com/Zaltora']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,20,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-376575740,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.",I got no problem since i used this PR in my app. Ready to merge ?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,21,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-390490353,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.",Some news about this PR ?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/UncleRus,22,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-390971985,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.",Going to merge it if there are no objections,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,23,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-390982579,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","The SDK appears to have added re-entry support to the load-store exception handler, and perhaps that needs to be considered. I have assumed that this exception handler could not be interrupted by the NMI but perhaps it can and that would be a problem. Also perhaps let me rebase it and check it is all updated.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,24,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-397856107,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","A fix for the load-store exception handler being re-entered via a NMI has been added to this PR, and it has been rebased and lwip also updated. Would be curious to know if this fix addresses any issues people were having with this, such as the beacon timeouts?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,25,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-398714787,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Hi, i currently test your PR. I use my product as ""wifi access point"" and i connect to it with putty. 2 port ( cmd/dbg), i send and receive data without problem.
I will continue testing few days.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,26,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-399757649,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","I got a very strange bug with this PR.
When i program, after esptool HW reset, everything work fine.
After the first reboot, my program boot (screen initialized and logo appear) but system seem frozen after that ( wifi not work / uart either / button interaction either ).
Need do more investigations. I got a lot of thing in my programm ( spiffs, pwm, wifi, i2c, spi, ... ).
I use a lot of malloc/free too. Maybe a thing don't like to be allocated in IRAM.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,27,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-399798795,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","The recent change was to the load/store exception handler, and if it booted up, got past user_start then the stack for that would have been initialized. Could you try it with the last patch reverted, so revert 'Load/store exception handler: handle re-entry via a NMI'?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,28,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-400604505,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","After some additional tests: the problem feel more random.
my system can freeze after i push the first button. One time, the second system boot was good but not the third.
Attention:  when i said freeze at boot, it is for my app. Because esp8266 do a lot of thing from my app before block. (My SSD1306 screen is always initialized for example)
How i can revert the last patch ? When i log the branch, i didn't see the corresponding commit.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/ourairquality,29,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-400632645,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","Rebased to make the recent change the last commit, so just 'git checkout cc4bd3c' to remove that last change.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,584,2018-03-01T05:51:45Z,,2018-06-27T11:37:28Z,OPEN,False,363,128,20,https://github.com/ourairquality,Malloc regions,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/584,https://github.com/Zaltora,30,https://github.com/SuperHouse/esp-open-rtos/pull/584#issuecomment-400641552,"Add support for using the spare iram and optionally part of the icache as part of the malloc heap. This can add roughly 20k to the malloc heap, but with conditions.
To use the icache for the malloc heap, compile with -DESP8266_ENABLE_LOW_ICACHE There is obviously a trade off to be made, but if desperate for memory then this might be an option.
Newlib has been extended to be able to allocate from two separate regions. This is controlled per-thread by calling set_malloc_regions(). There are four options: MALLOC_MASK_DRAM and MALLOC_MASK_IRAM to allocate from only the dram or iram respectively, and MALLOC_MASK_PREFER_DRAM and MALLOC_MASK_PREFER_IRAM to prefer dram or iram respectively but to use the other region if necessary. The function set_malloc_regions() returns the prior option, so this can be used to make a change for some dynamic code block, for example if calls to malloc in a dynamic context need to be in a particular region. This is used in lwip and FreeRTOS where necessary to ensure buffers are in dram, so those are some example. The wificfg example has been updated to report both the dram and iram usage. The amount of free memory reported by mallinfo() also depends on the option set by set_malloc_regions() so if allocating to only dram or iram then it returns only the free memory in that region, and this is also thread local, and there is an example in lwip where it checks the available dram.
There are some hacks involved, particularly on the newlib side, it is not pretty with hard coded heuristics and addresses specific to esp-open-rtos, but it might be some time before that is cleaned up and it should not be broken, just not pretty. For example there is a heuristic to preference iram if the dram is getting low to try to ensure that there is room to allocate the lwip pbufs as the TX buffers appear to need to be in dram.
The defaults should be a good start, preferring dram but using iram when necessary.
Been testing it for a little while now, and it seems to be holding up. Testing and feedback welcomed.","No changes, problems still here with this commit.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,585,2018-03-01T10:18:55Z,2018-06-17T07:32:14Z,2018-06-17T07:32:14Z,MERGED,True,157,46,3,https://github.com/ourairquality,mbedtls: update and integrate upstream fixes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/585,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/585,Tried to sync net_lwip.c with the upstream version and integrate fixes.,Tried to sync net_lwip.c with the upstream version and integrate fixes.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,587,2018-03-02T22:57:57Z,2018-06-17T08:08:42Z,2018-06-17T08:08:42Z,MERGED,True,7,0,1,https://github.com/ourairquality,newlib: skip locking when within the NMI Irq.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/587,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/587,"NMI Irq error paths call into printf which will use the newlib locks but these can not be used within the NMI, a task switch can not occur here. This case would be a terminal error path that is attempting to write some debug message in the process, so just bail out of the locking in this case. As a warning a ':' character is emitted and this will typically prefix lines emitted in this context - it would be an error for this path to be take in normal operation.","NMI Irq error paths call into printf which will use the newlib locks but these can not be used within the NMI, a task switch can not occur here. This case would be a terminal error path that is attempting to write some debug message in the process, so just bail out of the locking in this case. As a warning a ':' character is emitted and this will typically prefix lines emitted in this context - it would be an error for this path to be take in normal operation.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,590,2018-03-11T20:12:26Z,2018-03-13T13:31:20Z,2018-03-13T13:31:22Z,MERGED,True,148,1,4,https://github.com/tkremeyer,UART: Add ability to configure stopbits and parity bit,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/590,https://github.com/tkremeyer,1,https://github.com/SuperHouse/esp-open-rtos/pull/590,"Some functions and typedefs to customize stopbit count and parity bit type for UART.
Includes an example about how to use the functions.
(Related Issue: #586 )","Some functions and typedefs to customize stopbit count and parity bit type for UART.
Includes an example about how to use the functions.
(Related Issue: #586 )",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,590,2018-03-11T20:12:26Z,2018-03-13T13:31:20Z,2018-03-13T13:31:22Z,MERGED,True,148,1,4,https://github.com/tkremeyer,UART: Add ability to configure stopbits and parity bit,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/590,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/590#issuecomment-372665545,"Some functions and typedefs to customize stopbit count and parity bit type for UART.
Includes an example about how to use the functions.
(Related Issue: #586 )",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,591,2018-03-12T06:12:59Z,2018-03-13T13:30:28Z,2018-03-13T13:30:28Z,MERGED,True,7,1,1,https://github.com/maximkulkin,extras/dhcpserver - Fix memory leak on stop,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/591,https://github.com/maximkulkin,1,https://github.com/SuperHouse/esp-open-rtos/pull/591,"Free up all allocated resources on DHCP server stop.
Fixes #589","Free up all allocated resources on DHCP server stop.
Fixes #589",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,591,2018-03-12T06:12:59Z,2018-03-13T13:30:28Z,2018-03-13T13:30:28Z,MERGED,True,7,1,1,https://github.com/maximkulkin,extras/dhcpserver - Fix memory leak on stop,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/591,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/591#issuecomment-372665244,"Free up all allocated resources on DHCP server stop.
Fixes #589",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,595,2018-03-27T09:01:23Z,2018-04-02T06:20:19Z,2018-04-02T06:20:19Z,MERGED,True,20,6,2,https://github.com/Zaltora,ws2812 fix possible memory leak,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/595,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/595,Prevent multiple initialization memory allocation and inform user if allocation has fail.,Prevent multiple initialization memory allocation and inform user if allocation has fail.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,596,2018-03-28T16:58:16Z,2018-03-30T13:52:34Z,2018-03-30T13:52:51Z,CLOSED,False,3,0,1,https://github.com/phkehl,reset stdout redirection for exception dumps,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/596,https://github.com/phkehl,1,https://github.com/SuperHouse/esp-open-rtos/pull/596,"Reset stdout to the default direct-to-UART handler on exceptions and
abort()s. Users may have used set_write_stdout() to redirect output
elsewhere, which likely isn't going to work in the exception handler.","Reset stdout to the default direct-to-UART handler on exceptions and
abort()s. Users may have used set_write_stdout() to redirect output
elsewhere, which likely isn't going to work in the exception handler.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,596,2018-03-28T16:58:16Z,2018-03-30T13:52:34Z,2018-03-30T13:52:51Z,CLOSED,False,3,0,1,https://github.com/phkehl,reset stdout redirection for exception dumps,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/596,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/596#issuecomment-377401899,"Reset stdout to the default direct-to-UART handler on exceptions and
abort()s. Users may have used set_write_stdout() to redirect output
elsewhere, which likely isn't going to work in the exception handler.","Not sure if this is a great default. People might have redirected to an alternative output that does have some chance of working in the context of an exception. The output is likely lost anyway in a deployed device unless some method to save this output is added, a method that allows this output to be recovered on re-boot. e.g. Perhaps some extension of the 'reset reasons' state. This might be stored in the limited RTC memory where it would be inefficient to store the text output. So perhaps some hooks are need to allow these exception functions to be re-defined, or to allow alternatives to be linked, and that would address the use case that this patch addresses.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,596,2018-03-28T16:58:16Z,2018-03-30T13:52:34Z,2018-03-30T13:52:51Z,CLOSED,False,3,0,1,https://github.com/phkehl,reset stdout redirection for exception dumps,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/596,https://github.com/phkehl,3,https://github.com/SuperHouse/esp-open-rtos/pull/596#issuecomment-377528625,"Reset stdout to the default direct-to-UART handler on exceptions and
abort()s. Users may have used set_write_stdout() to redirect output
elsewhere, which likely isn't going to work in the exception handler.","Thanks for you comments! That makes sense.
I've studied the code a bit more. I found that set_user_exception_handler() lets me do what I want already. I'll close this.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,597,2018-03-29T11:45:53Z,2018-04-02T06:20:42Z,2018-04-03T13:59:57Z,MERGED,True,17,0,2,https://github.com/nicogrx,uart: add ability to configure byte length,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/597,https://github.com/nicogrx,1,https://github.com/SuperHouse/esp-open-rtos/pull/597,"This patch to optionally change data bits length of serial bus.
Signed-off-by: Jean-Nicolas Graux nicogrx@gmail.com","This patch to optionally change data bits length of serial bus.
Signed-off-by: Jean-Nicolas Graux nicogrx@gmail.com",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,597,2018-03-29T11:45:53Z,2018-04-02T06:20:42Z,2018-04-03T13:59:57Z,MERGED,True,17,0,2,https://github.com/nicogrx,uart: add ability to configure byte length,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/597,https://github.com/nicogrx,2,https://github.com/SuperHouse/esp-open-rtos/pull/597#issuecomment-378260106,"This patch to optionally change data bits length of serial bus.
Signed-off-by: Jean-Nicolas Graux nicogrx@gmail.com",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,600,2018-03-30T17:03:18Z,2021-07-02T07:09:29Z,2021-07-02T07:09:29Z,CLOSED,False,3,3,1,https://github.com/ekalyvio,Deleted the definition fo HD44780_I2C,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/600,https://github.com/ekalyvio,1,https://github.com/SuperHouse/esp-open-rtos/pull/600,"There is no reason of the following 3 lines:
#ifndef HD44780_I2C
#define HD44780_I2C 1
#endif

They actually conflict with the option HD44780_I2C = 0 on the esp8266/esp-open-rtos/examples/hd44780_lcd/Makefile.
On the other hand if no option is added to the Makefile, the component.mk file on folder /esp8266/esp-open-rtos/extras/hd44780 declares it as:
HD44780_I2C ?= 1
As such there is no issue totally deleting these 3 lines.","There is no reason of the following 3 lines:
#ifndef HD44780_I2C
#define HD44780_I2C 1
#endif

They actually conflict with the option HD44780_I2C = 0 on the esp8266/esp-open-rtos/examples/hd44780_lcd/Makefile.
On the other hand if no option is added to the Makefile, the component.mk file on folder /esp8266/esp-open-rtos/extras/hd44780 declares it as:
HD44780_I2C ?= 1
As such there is no issue totally deleting these 3 lines.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,601,2018-03-31T10:32:43Z,2018-04-02T06:21:24Z,2018-04-02T06:21:24Z,MERGED,True,11,11,1,https://github.com/ourairquality,Skip calling wrappers from a number of the ROM functions.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/601,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/601,"A number of the ROM functions were pointing to wrappers that saved and restored the $a0 register, but the functions they called either did not use $a0 or saved and restored $a0 as needed anyway.","A number of the ROM functions were pointing to wrappers that saved and restored the $a0 register, but the functions they called either did not use $a0 or saved and restored $a0 as needed anyway.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,602,2018-03-31T12:34:15Z,2018-04-02T06:22:10Z,2018-04-02T06:22:10Z,MERGED,True,116,17,11,https://github.com/ourairquality,FreeRTOS: Update to r2536.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/602,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/602,"Introduce sbBYTES_TO_STORE_MESSAGE_LENGTH


Fix bug in ucStreamBufferGetStreamBufferType() - which is only used by the
Percepio trace tool.


Update the line within vTaskStartScheduler() that was setting xTickCount to 0
to instead set it to configINITIAL_TICK_COUNT.


Introduce xMessageBufferNextLengthBytes() and tests for the same.


Add call to traceTASK_SWITCHED_IN() in vTaskStartScheduler() so trace tools
can see the first task to run.


Correct definition of StaticTask_t in the case that portUSE_MPU_WRAPPERS is
set to 1.


prvTaskCheckFreeStackSpace() now returns configSTACK_DEPTH_TYPE to allow
return values greater than max uint16_t value if required.


xStreamBufferSend() and xStreamBufferReceive() no longer clear task
notification bits - clearing was unnecessary as only the task notification
state is used.


Correct out of date comment in tasks.c.


Fix typo in comment in queue.h.","Introduce sbBYTES_TO_STORE_MESSAGE_LENGTH


Fix bug in ucStreamBufferGetStreamBufferType() - which is only used by the
Percepio trace tool.


Update the line within vTaskStartScheduler() that was setting xTickCount to 0
to instead set it to configINITIAL_TICK_COUNT.


Introduce xMessageBufferNextLengthBytes() and tests for the same.


Add call to traceTASK_SWITCHED_IN() in vTaskStartScheduler() so trace tools
can see the first task to run.


Correct definition of StaticTask_t in the case that portUSE_MPU_WRAPPERS is
set to 1.


prvTaskCheckFreeStackSpace() now returns configSTACK_DEPTH_TYPE to allow
return values greater than max uint16_t value if required.


xStreamBufferSend() and xStreamBufferReceive() no longer clear task
notification bits - clearing was unnecessary as only the task notification
state is used.


Correct out of date comment in tasks.c.


Fix typo in comment in queue.h.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,603,2018-04-02T00:08:30Z,,2018-04-06T03:05:22Z,OPEN,False,540,0,6,https://github.com/alhirzel,Add UART REPL library and example,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/603,https://github.com/alhirzel,1,https://github.com/SuperHouse/esp-open-rtos/pull/603,"I wrote up a quick ANSI parser that works via serial. It is useful to accept basic commands and saves having to parse the backspace/delete keys and the arrow keys. Future extension is likely depending on community feedback.
Two problems, I use fixed-length buffers and everything is on the stack. Would appreciate guidelines on how to better structure this. Also, one day it would be good to parse hotkeys (such as function keys); handling these would require two callbacks. I could use community feedback on this as well.","I wrote up a quick ANSI parser that works via serial. It is useful to accept basic commands and saves having to parse the backspace/delete keys and the arrow keys. Future extension is likely depending on community feedback.
Two problems, I use fixed-length buffers and everything is on the stack. Would appreciate guidelines on how to better structure this. Also, one day it would be good to parse hotkeys (such as function keys); handling these would require two callbacks. I could use community feedback on this as well.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,607,2018-04-13T19:08:26Z,2018-04-13T19:11:11Z,2018-04-13T19:11:11Z,MERGED,True,1,1,1,https://github.com/FlavioBayer,bugfix/ets_timer.c: race condition while disarming,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/607,https://github.com/FlavioBayer,1,https://github.com/SuperHouse/esp-open-rtos/pull/607,"If sdk_ets_timer_arm_ms_us is called right after vPortExitCritical inside sdk_ets_timer_disarm on line 247 (by an ISR for example, which was my case), execution will loop forever on line 196, since timer->next!=ETS_TIMER_NOT_ARMED, which was supposed to be changed in line 248.
By delaying the IRS or context switch until sdk_ets_timer_disarm the problem is fixed.","If sdk_ets_timer_arm_ms_us is called right after vPortExitCritical inside sdk_ets_timer_disarm on line 247 (by an ISR for example, which was my case), execution will loop forever on line 196, since timer->next!=ETS_TIMER_NOT_ARMED, which was supposed to be changed in line 248.
By delaying the IRS or context switch until sdk_ets_timer_disarm the problem is fixed.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,608,2018-04-16T10:12:43Z,2018-04-16T20:03:39Z,2018-04-16T20:03:39Z,MERGED,True,23,13,2,https://github.com/rerobika,Fix for sdio_write_sectors,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/608,https://github.com/rerobika,1,https://github.com/SuperHouse/esp-open-rtos/pull/608,"The issue was found by using f_mkdir(""directory_name"").
The function always returned FR_DISK_ERR due to an unhandled case in sdio_write_sectors().
According to this documentation: http://www.convict.lu/pdf/ProdManualSDCardv1.9.pdf#page=92 stop transmission command should be sent after writing multiple blocks.
This patch fixes this bug also adds a test case for it.","The issue was found by using f_mkdir(""directory_name"").
The function always returned FR_DISK_ERR due to an unhandled case in sdio_write_sectors().
According to this documentation: http://www.convict.lu/pdf/ProdManualSDCardv1.9.pdf#page=92 stop transmission command should be sent after writing multiple blocks.
This patch fixes this bug also adds a test case for it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,608,2018-04-16T10:12:43Z,2018-04-16T20:03:39Z,2018-04-16T20:03:39Z,MERGED,True,23,13,2,https://github.com/rerobika,Fix for sdio_write_sectors,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/608,https://github.com/rerobika,2,https://github.com/SuperHouse/esp-open-rtos/pull/608#issuecomment-381550420,"The issue was found by using f_mkdir(""directory_name"").
The function always returned FR_DISK_ERR due to an unhandled case in sdio_write_sectors().
According to this documentation: http://www.convict.lu/pdf/ProdManualSDCardv1.9.pdf#page=92 stop transmission command should be sent after writing multiple blocks.
This patch fixes this bug also adds a test case for it.",@UncleRus please take a look at it.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,608,2018-04-16T10:12:43Z,2018-04-16T20:03:39Z,2018-04-16T20:03:39Z,MERGED,True,23,13,2,https://github.com/rerobika,Fix for sdio_write_sectors,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/608,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/608#issuecomment-381731280,"The issue was found by using f_mkdir(""directory_name"").
The function always returned FR_DISK_ERR due to an unhandled case in sdio_write_sectors().
According to this documentation: http://www.convict.lu/pdf/ProdManualSDCardv1.9.pdf#page=92 stop transmission command should be sent after writing multiple blocks.
This patch fixes this bug also adds a test case for it.","Many thanks!
Merging it right now",True,{'THUMBS_UP': ['https://github.com/rerobika']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,609,2018-04-16T12:57:32Z,2018-05-19T21:47:29Z,2018-05-19T21:47:29Z,MERGED,True,238,11,6,https://github.com/Zaltora,Initial HW PWM (Delta-Sigma),4,[],https://github.com/SuperHouse/esp-open-rtos/pull/609,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/609,"Hi, it is a HW PWM driver (WIP)
I will do test with signals soon.

Hw pwm will be maybe renamed to delta-sigma, depends of the signal ?
Frequency calculation need verification and be enhanced.","Hi, it is a HW PWM driver (WIP)
I will do test with signals soon.

Hw pwm will be maybe renamed to delta-sigma, depends of the signal ?
Frequency calculation need verification and be enhanced.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,609,2018-04-16T12:57:32Z,2018-05-19T21:47:29Z,2018-05-19T21:47:29Z,MERGED,True,238,11,6,https://github.com/Zaltora,Initial HW PWM (Delta-Sigma),4,[],https://github.com/SuperHouse/esp-open-rtos/pull/609,https://github.com/flannelhead,2,https://github.com/SuperHouse/esp-open-rtos/pull/609#issuecomment-381591584,"Hi, it is a HW PWM driver (WIP)
I will do test with signals soon.

Hw pwm will be maybe renamed to delta-sigma, depends of the signal ?
Frequency calculation need verification and be enhanced.","Looks like a great addition to the OS.
One nitpick: before merging, you might want to pay attention to naming. AFAICT the HW functionality that is used here is actually a delta-sigma modulator. Delta-sigma modulation is not pulse width modulation but rather pulse frequency modulation where the pulse width is constant and the frequency is altered. See e.g. this figure.
It would be good to check the actual output signals. I could do it later this month if my logic analyzer is sufficient for that.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,609,2018-04-16T12:57:32Z,2018-05-19T21:47:29Z,2018-05-19T21:47:29Z,MERGED,True,238,11,6,https://github.com/Zaltora,Initial HW PWM (Delta-Sigma),4,[],https://github.com/SuperHouse/esp-open-rtos/pull/609,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/609#issuecomment-381594923,"Hi, it is a HW PWM driver (WIP)
I will do test with signals soon.

Hw pwm will be maybe renamed to delta-sigma, depends of the signal ?
Frequency calculation need verification and be enhanced.","Yeah, i think i will rename thing to be clear. (was planned, now i valid!)
I will check tomorrow with an oscilloscope.
When you set duty, in fact you change frequency. The target mentioned here:
// Freq = (80,000,000/prescale) * (target / 256) HZ           (0   < target < 128)
// Freq = (80,000,000/prescale) * ((256 - target) / 256)  HZ  (128 < target < 256)

I will rename functions name too.",True,"{'THUMBS_UP': ['https://github.com/flannelhead', 'https://github.com/UncleRus']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,609,2018-04-16T12:57:32Z,2018-05-19T21:47:29Z,2018-05-19T21:47:29Z,MERGED,True,238,11,6,https://github.com/Zaltora,Initial HW PWM (Delta-Sigma),4,[],https://github.com/SuperHouse/esp-open-rtos/pull/609,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/609#issuecomment-382293645,"Hi, it is a HW PWM driver (WIP)
I will do test with signals soon.

Hw pwm will be maybe renamed to delta-sigma, depends of the signal ?
Frequency calculation need verification and be enhanced.","After test, I see Delata-sigma signal is very sensible to capacity line:
Test with a low target and a prescale of FF:

Change target from 0 to 255 change my voltage ouptut from 0V to 3.3V. Measurement done with (x1) sensor. I will do test next week with (x10). It is feel  easy do use it like a DAC.
Tested on 2 different pin. The signals change between them because of different capacity. peek-to-peek is increase for one pin.
the signal is not proper, increase prescale will linearized more the signal i guess... I understand why the max target i can get is 127 to control my motor. I got a transisor with Vgs between 1 and 3 volt.
Don't test it with a logic analyzer, you will get strange result.
I am not sure if the formula here is good:
// Freq = (80,000,000/prescale) * (target / 256) HZ           (0   < target < 128)
// Freq = (80,000,000/prescale) * ((256 - target) / 256)  HZ  (128 < target < 256)

because voltage increase close to a linear way . Or maybe the frequency decrease after 128 but voltage still increase.",True,"{'THUMBS_UP': ['https://github.com/UncleRus', 'https://github.com/nochkin']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,609,2018-04-16T12:57:32Z,2018-05-19T21:47:29Z,2018-05-19T21:47:29Z,MERGED,True,238,11,6,https://github.com/Zaltora,Initial HW PWM (Delta-Sigma),4,[],https://github.com/SuperHouse/esp-open-rtos/pull/609,https://github.com/Zaltora,5,https://github.com/SuperHouse/esp-open-rtos/pull/609#issuecomment-384549294,"Hi, it is a HW PWM driver (WIP)
I will do test with signals soon.

Hw pwm will be maybe renamed to delta-sigma, depends of the signal ?
Frequency calculation need verification and be enhanced.","Second test:

i was wrong last week, the test was with a prescale of 0.  that why the signal is quite smooth.
Test with prescale of FF look like a PWM square signal.
Change duty 0 to 128 increase frequency and change duty 128 to 255 decrease frequency
Voltage (mean) increase with duty 0 to 255.",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,609,2018-04-16T12:57:32Z,2018-05-19T21:47:29Z,2018-05-19T21:47:29Z,MERGED,True,238,11,6,https://github.com/Zaltora,Initial HW PWM (Delta-Sigma),4,[],https://github.com/SuperHouse/esp-open-rtos/pull/609,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/609#issuecomment-385622754,"Hi, it is a HW PWM driver (WIP)
I will do test with signals soon.

Hw pwm will be maybe renamed to delta-sigma, depends of the signal ?
Frequency calculation need verification and be enhanced.",I will do a last test tomorrow to see what happen when the CPU clock is at 160MHz,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,609,2018-04-16T12:57:32Z,2018-05-19T21:47:29Z,2018-05-19T21:47:29Z,MERGED,True,238,11,6,https://github.com/Zaltora,Initial HW PWM (Delta-Sigma),4,[],https://github.com/SuperHouse/esp-open-rtos/pull/609,https://github.com/Zaltora,7,https://github.com/SuperHouse/esp-open-rtos/pull/609#issuecomment-389182250,"Hi, it is a HW PWM driver (WIP)
I will do test with signals soon.

Hw pwm will be maybe renamed to delta-sigma, depends of the signal ?
Frequency calculation need verification and be enhanced.","I have test at 160MHz, nothing changes. All good for me :) until someone want improves the library.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,612,2018-04-20T18:01:36Z,2018-04-21T17:05:34Z,2018-04-21T17:05:44Z,MERGED,True,19,4,1,https://github.com/rerobika,Fix SDIO send_command,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/612,https://github.com/rerobika,1,https://github.com/SuperHouse/esp-open-rtos/pull/612,"This patch fixes the problem, while receiving R1b type of response from the card.
In case of R1b response the continuous stream that the card sends must be checked whether the signal indicates busy status and wait until a non zero response.","This patch fixes the problem, while receiving R1b type of response from the card.
In case of R1b response the continuous stream that the card sends must be checked whether the signal indicates busy status and wait until a non zero response.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,612,2018-04-20T18:01:36Z,2018-04-21T17:05:34Z,2018-04-21T17:05:44Z,MERGED,True,19,4,1,https://github.com/rerobika,Fix SDIO send_command,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/612,https://github.com/rerobika,2,https://github.com/SuperHouse/esp-open-rtos/pull/612#issuecomment-383176184,"This patch fixes the problem, while receiving R1b type of response from the card.
In case of R1b response the continuous stream that the card sends must be checked whether the signal indicates busy status and wait until a non zero response.",cc: @UncleRus,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,612,2018-04-20T18:01:36Z,2018-04-21T17:05:34Z,2018-04-21T17:05:44Z,MERGED,True,19,4,1,https://github.com/rerobika,Fix SDIO send_command,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/612,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/612#issuecomment-383313104,"This patch fixes the problem, while receiving R1b type of response from the card.
In case of R1b response the continuous stream that the card sends must be checked whether the signal indicates busy status and wait until a non zero response.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,615,2018-04-25T03:10:15Z,2018-04-26T20:20:31Z,2018-04-26T20:20:31Z,MERGED,True,8,3,1,https://github.com/ourairquality,sdk_os_delay_us: rewrite to avoid hal.h,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/615,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/615,"Seems to fail to compile recently, missing xthal_get_ccount(), so avoid using hal.h which is outside esp-open-rtos.","Seems to fail to compile recently, missing xthal_get_ccount(), so avoid using hal.h which is outside esp-open-rtos.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,616,2018-04-25T13:08:19Z,2018-04-26T20:19:48Z,2018-04-26T20:19:48Z,MERGED,True,15,8,1,https://github.com/ourairquality,Recognise some new flash size codes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/616,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/616,"This at least recognises the 2MB-c1, 4MB-c1, 8MB, and 16MB flash size codes.","This at least recognises the 2MB-c1, 4MB-c1, 8MB, and 16MB flash size codes.",True,{'THUMBS_UP': ['https://github.com/fvpalha']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,616,2018-04-25T13:08:19Z,2018-04-26T20:19:48Z,2018-04-26T20:19:48Z,MERGED,True,15,8,1,https://github.com/ourairquality,Recognise some new flash size codes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/616,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/616#issuecomment-384776183,"This at least recognises the 2MB-c1, 4MB-c1, 8MB, and 16MB flash size codes.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,617,2018-04-25T13:28:02Z,2018-04-26T20:19:18Z,2018-04-26T20:19:18Z,MERGED,True,11,1,2,https://github.com/ourairquality,rboot: update to 1.4.2,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/617,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/617,,,True,{'THUMBS_UP': ['https://github.com/fvpalha']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,617,2018-04-25T13:28:02Z,2018-04-26T20:19:18Z,2018-04-26T20:19:18Z,MERGED,True,11,1,2,https://github.com/ourairquality,rboot: update to 1.4.2,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/617,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/617#issuecomment-384776057,,Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,621,2018-04-30T04:09:58Z,2018-04-30T10:14:19Z,2018-04-30T10:14:19Z,MERGED,True,3,3,1,https://github.com/ourairquality,sdk_wifi_station_dhcpc_stop: ensure the client is flagged as stopped.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/621,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/621,"Need to flag the dhcp client as stopped, even if the netif is not yet initialized, because the flag is used to control the starting of the dhcpc.","Need to flag the dhcp client as stopped, even if the netif is not yet initialized, because the flag is used to control the starting of the dhcpc.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,621,2018-04-30T04:09:58Z,2018-04-30T10:14:19Z,2018-04-30T10:14:19Z,MERGED,True,3,3,1,https://github.com/ourairquality,sdk_wifi_station_dhcpc_stop: ensure the client is flagged as stopped.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/621,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/621#issuecomment-385359190,"Need to flag the dhcp client as stopped, even if the netif is not yet initialized, because the flag is used to control the starting of the dhcpc.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,622,2018-05-05T03:02:25Z,2018-05-19T21:48:31Z,2018-05-19T21:48:31Z,MERGED,True,42,2,2,https://github.com/ourairquality,stdin_uart_interrupt: add support for nonblock and a timeout.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/622,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/622,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,625,2018-05-16T16:03:40Z,2018-05-18T15:00:43Z,2018-05-18T15:00:44Z,MERGED,True,14,7,2,https://github.com/joostn,"Improved C++ support, support C++ exceptions",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/625,https://github.com/joostn,1,https://github.com/SuperHouse/esp-open-rtos/pull/625,"These patches make it possible to link against libstdc++, and use C++ exceptions.
To use c++ exceptions, build a gcc 5.2.0 toolchain from https://github.com/espressif/crosstool-NG
with -fexceptions and -frtti enabled. You can use my build script for mac:
buildtoolchain.sh.zip
Add the following startup code to your application:
struct register_frame_info_object { long placeholder[ 10 ]; };
extern ""C"" void __register_frame_info (const void *begin, struct register_frame_info_object *ob);
extern char __eh_frame[];

extern ""C"" void user_init()
{
	static struct register_frame_info_object ob;
	__register_frame_info( __eh_frame, &ob );

[...]
}


More info:
jcmvbkbc/crosstool-NG#54
espressif/esp-idf#459
#623","These patches make it possible to link against libstdc++, and use C++ exceptions.
To use c++ exceptions, build a gcc 5.2.0 toolchain from https://github.com/espressif/crosstool-NG
with -fexceptions and -frtti enabled. You can use my build script for mac:
buildtoolchain.sh.zip
Add the following startup code to your application:
struct register_frame_info_object { long placeholder[ 10 ]; };
extern ""C"" void __register_frame_info (const void *begin, struct register_frame_info_object *ob);
extern char __eh_frame[];

extern ""C"" void user_init()
{
	static struct register_frame_info_object ob;
	__register_frame_info( __eh_frame, &ob );

[...]
}


More info:
jcmvbkbc/crosstool-NG#54
espressif/esp-idf#459
#623",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,625,2018-05-16T16:03:40Z,2018-05-18T15:00:43Z,2018-05-18T15:00:44Z,MERGED,True,14,7,2,https://github.com/joostn,"Improved C++ support, support C++ exceptions",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/625,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/625#issuecomment-390234927,"These patches make it possible to link against libstdc++, and use C++ exceptions.
To use c++ exceptions, build a gcc 5.2.0 toolchain from https://github.com/espressif/crosstool-NG
with -fexceptions and -frtti enabled. You can use my build script for mac:
buildtoolchain.sh.zip
Add the following startup code to your application:
struct register_frame_info_object { long placeholder[ 10 ]; };
extern ""C"" void __register_frame_info (const void *begin, struct register_frame_info_object *ob);
extern char __eh_frame[];

extern ""C"" void user_init()
{
	static struct register_frame_info_object ob;
	__register_frame_info( __eh_frame, &ob );

[...]
}


More info:
jcmvbkbc/crosstool-NG#54
espressif/esp-idf#459
#623",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,629,2018-05-31T04:23:37Z,2018-06-17T07:20:17Z,2018-06-17T07:20:17Z,MERGED,True,68,40,1,https://github.com/ourairquality,stdin_uart: rewrite to use a FreeRTOS queue.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/629,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/629,"Rewrite to have the IRQ handler read the character and place it in a FreeRTOS queue.
Was seeing odd RX errors with the prior driver, an occasional old character inserted. It only affected one particular device so might have been timing critical. Could not spot the problem, but toggling the interrupt enable outside the interrupt handler looked like trouble, so rewrote this to avoid that. This proposed rewrite reads the character from the fifo within the interrupt handler, and uses a FreeRTOS queue to queue them, and it also enables some RX error checking (parity, framing, breaks) and simple counters for these.","Rewrite to have the IRQ handler read the character and place it in a FreeRTOS queue.
Was seeing odd RX errors with the prior driver, an occasional old character inserted. It only affected one particular device so might have been timing critical. Could not spot the problem, but toggling the interrupt enable outside the interrupt handler looked like trouble, so rewrote this to avoid that. This proposed rewrite reads the character from the fifo within the interrupt handler, and uses a FreeRTOS queue to queue them, and it also enables some RX error checking (parity, framing, breaks) and simple counters for these.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,630,2018-05-31T04:27:23Z,2018-06-17T07:19:14Z,2018-06-17T07:19:14Z,MERGED,True,36,20,3,https://github.com/ourairquality,FreeRTOS: update to svn r2541.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/630,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/630,Some very minor fixes.,Some very minor fixes.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,631,2018-05-31T17:27:41Z,2018-06-05T18:01:11Z,2018-06-05T18:01:11Z,CLOSED,False,13,12,2,https://github.com/quietboil,"ssd1306: allow SPI3 to be disabled, compact device descriptor",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/631,https://github.com/quietboil,1,https://github.com/SuperHouse/esp-open-rtos/pull/631,"I added SPI4W protocol to the driver. It is a flavor of the SPI4 protocol with HW driven CS and no MISO (pin is reconfigured as GPIO and used for D/C). That's how my device is wired 😄 Hopefully others will like this option too as it saves a GPIO pin (or two, depends on the counting method 😄 ) if one does not mind wiring CS and D/C to the predefined pins.
There are two additional small changes:

Pass all SUPPORT macros to CFLAGS. This allows building the driver with only required protocols (probably just one),
""Pack"" device descriptor struct. This shrinks it by 7 bytes without any code changes needed on the program side.

The changed driver has been tested by compiling and running both ssd1306 examples - example and fps - on my device.","I added SPI4W protocol to the driver. It is a flavor of the SPI4 protocol with HW driven CS and no MISO (pin is reconfigured as GPIO and used for D/C). That's how my device is wired 😄 Hopefully others will like this option too as it saves a GPIO pin (or two, depends on the counting method 😄 ) if one does not mind wiring CS and D/C to the predefined pins.
There are two additional small changes:

Pass all SUPPORT macros to CFLAGS. This allows building the driver with only required protocols (probably just one),
""Pack"" device descriptor struct. This shrinks it by 7 bytes without any code changes needed on the program side.

The changed driver has been tested by compiling and running both ssd1306 examples - example and fps - on my device.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,631,2018-05-31T17:27:41Z,2018-06-05T18:01:11Z,2018-06-05T18:01:11Z,CLOSED,False,13,12,2,https://github.com/quietboil,"ssd1306: allow SPI3 to be disabled, compact device descriptor",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/631,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/631#issuecomment-393698790,"I added SPI4W protocol to the driver. It is a flavor of the SPI4 protocol with HW driven CS and no MISO (pin is reconfigured as GPIO and used for D/C). That's how my device is wired 😄 Hopefully others will like this option too as it saves a GPIO pin (or two, depends on the counting method 😄 ) if one does not mind wiring CS and D/C to the predefined pins.
There are two additional small changes:

Pass all SUPPORT macros to CFLAGS. This allows building the driver with only required protocols (probably just one),
""Pack"" device descriptor struct. This shrinks it by 7 bytes without any code changes needed on the program side.

The changed driver has been tested by compiling and running both ssd1306 examples - example and fps - on my device.","I am disagree with this pull request. The protocols correspond to the different types of driver communication.
This is the default esp8266 spi configuration that is problematic here. But you can do the same when your program start without need change the library:
    while (ssd1306_init(&dev) != 0) {
        printf(""%s: failed to init SSD1306 lcd\n"", __func__);
        vTaskDelay(SECOND);
    }
    spi_init(SPI_BUS, SPI_MODE0, SPI_FREQ_DIV_8M, true, SPI_LITTLE_ENDIAN, false);
    gpio_set_iomux_function(12, IOMUX_GPIO12_FUNC_GPIO);
The good idea is too remove  the SPI initialisation from the driver. disable CS use for some value (e.g: 0xFF).",True,{'THUMBS_UP': ['https://github.com/UncleRus']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,631,2018-05-31T17:27:41Z,2018-06-05T18:01:11Z,2018-06-05T18:01:11Z,CLOSED,False,13,12,2,https://github.com/quietboil,"ssd1306: allow SPI3 to be disabled, compact device descriptor",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/631,https://github.com/quietboil,3,https://github.com/SuperHouse/esp-open-rtos/pull/631#issuecomment-393728499,"I added SPI4W protocol to the driver. It is a flavor of the SPI4 protocol with HW driven CS and no MISO (pin is reconfigured as GPIO and used for D/C). That's how my device is wired 😄 Hopefully others will like this option too as it saves a GPIO pin (or two, depends on the counting method 😄 ) if one does not mind wiring CS and D/C to the predefined pins.
There are two additional small changes:

Pass all SUPPORT macros to CFLAGS. This allows building the driver with only required protocols (probably just one),
""Pack"" device descriptor struct. This shrinks it by 7 bytes without any code changes needed on the program side.

The changed driver has been tested by compiling and running both ssd1306 examples - example and fps - on my device.","You are right. In the hindsight it is clear that the new protocol is an overkill as the workaround is quite simple.
What about the other changes though? The device descriptor carries quite a few never used bytes and at the moment the driver cannot be compiled without the SPI3 protocol.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,631,2018-05-31T17:27:41Z,2018-06-05T18:01:11Z,2018-06-05T18:01:11Z,CLOSED,False,13,12,2,https://github.com/quietboil,"ssd1306: allow SPI3 to be disabled, compact device descriptor",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/631,https://github.com/Zaltora,4,https://github.com/SuperHouse/esp-open-rtos/pull/631#issuecomment-393777390,"I added SPI4W protocol to the driver. It is a flavor of the SPI4 protocol with HW driven CS and no MISO (pin is reconfigured as GPIO and used for D/C). That's how my device is wired 😄 Hopefully others will like this option too as it saves a GPIO pin (or two, depends on the counting method 😄 ) if one does not mind wiring CS and D/C to the predefined pins.
There are two additional small changes:

Pass all SUPPORT macros to CFLAGS. This allows building the driver with only required protocols (probably just one),
""Pack"" device descriptor struct. This shrinks it by 7 bytes without any code changes needed on the program side.

The changed driver has been tested by compiling and running both ssd1306 examples - example and fps - on my device.","Save Ram is ok ^^. We do not lose a lot of readability for screens and protocols selection.
I do not understand why we can not compile without the SPI3 protocols.
this line fix the problem ? :
+#if (SSD1306_SPI3_SUPPORT)    
     uint8_t j;
+#endif",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,631,2018-05-31T17:27:41Z,2018-06-05T18:01:11Z,2018-06-05T18:01:11Z,CLOSED,False,13,12,2,https://github.com/quietboil,"ssd1306: allow SPI3 to be disabled, compact device descriptor",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/631,https://github.com/quietboil,5,https://github.com/SuperHouse/esp-open-rtos/pull/631#issuecomment-393873368,"I added SPI4W protocol to the driver. It is a flavor of the SPI4 protocol with HW driven CS and no MISO (pin is reconfigured as GPIO and used for D/C). That's how my device is wired 😄 Hopefully others will like this option too as it saves a GPIO pin (or two, depends on the counting method 😄 ) if one does not mind wiring CS and D/C to the predefined pins.
There are two additional small changes:

Pass all SUPPORT macros to CFLAGS. This allows building the driver with only required protocols (probably just one),
""Pack"" device descriptor struct. This shrinks it by 7 bytes without any code changes needed on the program side.

The changed driver has been tested by compiling and running both ssd1306 examples - example and fps - on my device.","why we can not compile without the SPI3 protocols

component.mk does not define a C macro for the SPI3 in ssd1306_CFLAGS like it does for I2C and SPI4. This makes SSD1306_SPI3_SUPPORT undefined when config.h is looking for it, so it adds it as enabled. That's what the very first commit has addressed.

this line...

+#if (SSD1306_SPI3_SUPPORT)    
     uint8_t j;
+#endif
This change was added to address the consequence of being able to exclude SPI3. When the latter is not compiled, that j sticks out and compiler is complaining about the unused variable.
The alternative, IMHO, was to make SPI3's case a block and move it down there where it is actually used, but that to me felt contrary to the overall style of this driver and I did not want to take it that far.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,631,2018-05-31T17:27:41Z,2018-06-05T18:01:11Z,2018-06-05T18:01:11Z,CLOSED,False,13,12,2,https://github.com/quietboil,"ssd1306: allow SPI3 to be disabled, compact device descriptor",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/631,https://github.com/quietboil,6,https://github.com/SuperHouse/esp-open-rtos/pull/631#issuecomment-394804455,"I added SPI4W protocol to the driver. It is a flavor of the SPI4 protocol with HW driven CS and no MISO (pin is reconfigured as GPIO and used for D/C). That's how my device is wired 😄 Hopefully others will like this option too as it saves a GPIO pin (or two, depends on the counting method 😄 ) if one does not mind wiring CS and D/C to the predefined pins.
There are two additional small changes:

Pass all SUPPORT macros to CFLAGS. This allows building the driver with only required protocols (probably just one),
""Pack"" device descriptor struct. This shrinks it by 7 bytes without any code changes needed on the program side.

The changed driver has been tested by compiling and running both ssd1306 examples - example and fps - on my device.",I decided to redo it piecemeal. After the protocol was taken out the remaining changes do not need to be joined at the hip.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,634,2018-06-05T12:25:59Z,2018-06-05T15:05:40Z,2018-06-05T15:05:40Z,MERGED,True,2,2,1,https://github.com/ourairquality,sysparam: always create the semaphore on init.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/634,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/634,Otherwise when initialization was not successful it may fail with an assertion in FreeRTOS rather than returning SYSPARAM_ERR_NOINIT.,Otherwise when initialization was not successful it may fail with an assertion in FreeRTOS rather than returning SYSPARAM_ERR_NOINIT.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,634,2018-06-05T12:25:59Z,2018-06-05T15:05:40Z,2018-06-05T15:05:40Z,MERGED,True,2,2,1,https://github.com/ourairquality,sysparam: always create the semaphore on init.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/634,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/634#issuecomment-394744666,Otherwise when initialization was not successful it may fail with an assertion in FreeRTOS rather than returning SYSPARAM_ERR_NOINIT.,Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,635,2018-06-05T20:32:28Z,2018-06-06T14:30:06Z,2018-06-06T14:30:06Z,MERGED,True,5,1,2,https://github.com/quietboil,ssd1306: Allow SPI3 support to be disabled,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/635,https://github.com/quietboil,1,https://github.com/SuperHouse/esp-open-rtos/pull/635,"At the moment SPI3, unlike SPI4 or I2C, cannot be disabled and the driver always includes SPI3 protocol code. This change allows a program to exclude SPI3 if it is not needed.
For example, when only SPI4 is needed, a program would set these variables in the Makefile:
EXTRA_COMPONENTS = extras/ssd1306
SSD1306_SPI4_SUPPORT = 1
SSD1306_SPI3_SUPPORT = 0
SSD1306_I2C_SUPPORT = 0

PROGRAM_CFLAGS = $(ssd1306_CFLAGS)
The change in ssd1306.c is to suppress ""unused variable"" warning as j is used only by SPI3.","At the moment SPI3, unlike SPI4 or I2C, cannot be disabled and the driver always includes SPI3 protocol code. This change allows a program to exclude SPI3 if it is not needed.
For example, when only SPI4 is needed, a program would set these variables in the Makefile:
EXTRA_COMPONENTS = extras/ssd1306
SSD1306_SPI4_SUPPORT = 1
SSD1306_SPI3_SUPPORT = 0
SSD1306_I2C_SUPPORT = 0

PROGRAM_CFLAGS = $(ssd1306_CFLAGS)
The change in ssd1306.c is to suppress ""unused variable"" warning as j is used only by SPI3.",True,{'THUMBS_UP': ['https://github.com/Zaltora']}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,635,2018-06-05T20:32:28Z,2018-06-06T14:30:06Z,2018-06-06T14:30:06Z,MERGED,True,5,1,2,https://github.com/quietboil,ssd1306: Allow SPI3 support to be disabled,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/635,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/635#issuecomment-395089027,"At the moment SPI3, unlike SPI4 or I2C, cannot be disabled and the driver always includes SPI3 protocol code. This change allows a program to exclude SPI3 if it is not needed.
For example, when only SPI4 is needed, a program would set these variables in the Makefile:
EXTRA_COMPONENTS = extras/ssd1306
SSD1306_SPI4_SUPPORT = 1
SSD1306_SPI3_SUPPORT = 0
SSD1306_I2C_SUPPORT = 0

PROGRAM_CFLAGS = $(ssd1306_CFLAGS)
The change in ssd1306.c is to suppress ""unused variable"" warning as j is used only by SPI3.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,636,2018-06-07T14:20:20Z,2018-07-03T14:57:53Z,2018-07-03T15:09:11Z,CLOSED,False,6,9,1,https://github.com/quietboil,ssd1306: Reduce device descriptor size,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/636,https://github.com/quietboil,1,https://github.com/SuperHouse/esp-open-rtos/pull/636,"Presently, depending on the selected protocols, compiler allocates 12 or 16 bytes for the ssd1306_t struct. These changes shrink it to 4 or 8 bytes (8 bytes are needed with I2C present).
There are 3 individual changes in here:

Protocol and screen enums are turned into bit fields,
CS pin is also changed into a bit field and is moved, so it would be packed into 1 byte together with the protocol and the screen fields,
Union is removed.

The biggest space hogs were the enums. Changing them into bit fields just to make sure they are packed into a byte:
ssd1306_protocol_t protocol : 4;
ssd1306_screen_t screen : 4;
immediately reduced ssd1306_t to no more than 8 bytes (4 when only SPI3 support is selected).
The current use of the union seems superfluous, because when support for the I2C is included the absolute minimum required size for the ssd1306_t, with the enums packed, is 5 bytes, which turns into 8 allocated bytes with the compiler added padding. Without union the struct's payload will need 6 bytes, but as the allocation is still 8 the difference is only in how many padding bytes are used. And, IMHO, removing the union improves readability without sacrificing anything.
Changing cs_pin into a bit field allows not only SPI3, but also SPI4 to be as small as 4 bytes. The ""penalty"" for that is one instruction - EXTUI - that the compiler inserts to extract it.","Presently, depending on the selected protocols, compiler allocates 12 or 16 bytes for the ssd1306_t struct. These changes shrink it to 4 or 8 bytes (8 bytes are needed with I2C present).
There are 3 individual changes in here:

Protocol and screen enums are turned into bit fields,
CS pin is also changed into a bit field and is moved, so it would be packed into 1 byte together with the protocol and the screen fields,
Union is removed.

The biggest space hogs were the enums. Changing them into bit fields just to make sure they are packed into a byte:
ssd1306_protocol_t protocol : 4;
ssd1306_screen_t screen : 4;
immediately reduced ssd1306_t to no more than 8 bytes (4 when only SPI3 support is selected).
The current use of the union seems superfluous, because when support for the I2C is included the absolute minimum required size for the ssd1306_t, with the enums packed, is 5 bytes, which turns into 8 allocated bytes with the compiler added padding. Without union the struct's payload will need 6 bytes, but as the allocation is still 8 the difference is only in how many padding bytes are used. And, IMHO, removing the union improves readability without sacrificing anything.
Changing cs_pin into a bit field allows not only SPI3, but also SPI4 to be as small as 4 bytes. The ""penalty"" for that is one instruction - EXTUI - that the compiler inserts to extract it.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,637,2018-06-08T09:23:18Z,2018-06-08T09:41:43Z,2018-06-11T02:11:46Z,MERGED,True,1,0,1,https://github.com/ourairquality,i2c: include stdio.h for debugging.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/637,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/637,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,638,2018-06-08T09:43:51Z,,2018-06-17T07:56:59Z,OPEN,False,379,208,7,https://github.com/ourairquality,sysparam: split the key into a name-space and name.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/638,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/638,"This is largely to aid compatibility with other non-volatile stores that have limited sized names but support a name space. This might open a path to more compact storage of the key names although that is not implemented here.
Have been exploring how to also target code the esp-idf, and that requires a compatibility layer that works with the esp-idf nvs. The nvs has a default key names size of 15 characters, but supports name spaces so in total 30 characters. I found it convenient to keep longer key names in my app, so that the names are more obviously meaningful, and moving common prefixes to namespaces helped. For example all the wificfg keys are now in the 'wificfg' namespace, and the prefix has been removed from the name.
People might not like this PR, might argue that it was simpler the way it was. The use of the namespace is optional, it can be passed in as NULL, and existing names still read back.
One positive might be that it sets the stage for storing the name space names only once in the store, and referencing them by a shorter index. I did explore this, and made some progress, but decide it was not worth the added complexity.
If someone wanted to write a lighter weight 'nvs' for the esp8266 then that might just be adopted instead, but I am not holding my breath!","This is largely to aid compatibility with other non-volatile stores that have limited sized names but support a name space. This might open a path to more compact storage of the key names although that is not implemented here.
Have been exploring how to also target code the esp-idf, and that requires a compatibility layer that works with the esp-idf nvs. The nvs has a default key names size of 15 characters, but supports name spaces so in total 30 characters. I found it convenient to keep longer key names in my app, so that the names are more obviously meaningful, and moving common prefixes to namespaces helped. For example all the wificfg keys are now in the 'wificfg' namespace, and the prefix has been removed from the name.
People might not like this PR, might argue that it was simpler the way it was. The use of the namespace is optional, it can be passed in as NULL, and existing names still read back.
One positive might be that it sets the stage for storing the name space names only once in the store, and referencing them by a shorter index. I did explore this, and made some progress, but decide it was not worth the added complexity.
If someone wanted to write a lighter weight 'nvs' for the esp8266 then that might just be adopted instead, but I am not holding my breath!",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,639,2018-06-08T20:09:46Z,2018-06-11T03:26:23Z,2018-06-11T03:26:23Z,MERGED,True,11,0,2,https://github.com/joostn,Turn off mdnsresponder debugging by default,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/639,https://github.com/joostn,1,https://github.com/SuperHouse/esp-open-rtos/pull/639,"Currently mdnsresponder outputs debug info by default. Make this
optional by defining:
-DMDNS_RESPONDER_DEBUGGING=1","Currently mdnsresponder outputs debug info by default. Make this
optional by defining:
-DMDNS_RESPONDER_DEBUGGING=1",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,639,2018-06-08T20:09:46Z,2018-06-11T03:26:23Z,2018-06-11T03:26:23Z,MERGED,True,11,0,2,https://github.com/joostn,Turn off mdnsresponder debugging by default,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/639,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/639#issuecomment-396103927,"Currently mdnsresponder outputs debug info by default. Make this
optional by defining:
-DMDNS_RESPONDER_DEBUGGING=1",This PR seems fine. The mdnsresponder probably needed more development. The lwip mdns support might be a better investment in time and has been modified to reduce resource usage.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,642,2018-06-14T22:27:24Z,2018-06-17T07:16:25Z,2018-06-17T07:16:25Z,MERGED,True,42,23,2,https://github.com/ourairquality,i2c: increase the default clock strech timeout to 250msec.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/642,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/642,"This also redefines the timeout in FreeRTOS clock ticks, and implements a two stage wait: firstly spinning sampling frequently, and then falling back to a longer wait while sampling less frequently and yielding.","This also redefines the timeout in FreeRTOS clock ticks, and implements a two stage wait: firstly spinning sampling frequently, and then falling back to a longer wait while sampling less frequently and yielding.",True,"{'THUMBS_UP': ['https://github.com/flannelhead', 'https://github.com/Zaltora']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,642,2018-06-14T22:27:24Z,2018-06-17T07:16:25Z,2018-06-17T07:16:25Z,MERGED,True,42,23,2,https://github.com/ourairquality,i2c: increase the default clock strech timeout to 250msec.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/642,https://github.com/flannelhead,2,https://github.com/SuperHouse/esp-open-rtos/pull/642#issuecomment-397509629,"This also redefines the timeout in FreeRTOS clock ticks, and implements a two stage wait: firstly spinning sampling frequently, and then falling back to a longer wait while sampling less frequently and yielding.","Looks like a sane implementation to me :) Makes it also more easy and explicit to detect situations where the slave is stretching for too long.
I just wonder if the spin count should depend on the CPU frequency. Probably it won't matter too much, though.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,643,2018-06-16T10:05:02Z,,2018-06-16T10:05:02Z,OPEN,False,2,0,1,https://github.com/phkehl,add 'make help' hooks,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/643,https://github.com/phkehl,1,https://github.com/SuperHouse/esp-open-rtos/pull/643,"Projects can define will_help and/or did_help functions, which lets them
add additional help text (output of 'make help') before respectively
after the standard esp-open-rtos help text.","Projects can define will_help and/or did_help functions, which lets them
add additional help text (output of 'make help') before respectively
after the standard esp-open-rtos help text.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,644,2018-06-17T02:43:20Z,,2018-06-17T02:43:20Z,OPEN,False,79,35,1,https://github.com/ourairquality,Load/store exception handler: handle re-entry via a NMI.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/644,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/644,"The NMI can asynchronously interrupt the load/store exception handler. This does occur frequently as the NMI handler code does invoke load/store exceptions, and the load/store exception handler is heavily used. This was corrupting the load/store exception handler saved state and thus randomly corrupting registers a0 to a6 of the interruptee.
Re-entry of the load/store handler was quite frequent so this one needs fixing. Testing or review feedback would be welcomed? This PR implements a different strategy to the SDK fix and might be more efficient and supports multiple re-entry via an NMI.
The sdk code also appears to handle NMI re-entry too, but that seems a separate issue. Not yet sure where that is a problem, perhaps very quick repetition of an NMI before the handler disables it, or perhaps on the exit path after re-enabling the NMI but before restoring state from the NMI stack? Shall look into that separately.","The NMI can asynchronously interrupt the load/store exception handler. This does occur frequently as the NMI handler code does invoke load/store exceptions, and the load/store exception handler is heavily used. This was corrupting the load/store exception handler saved state and thus randomly corrupting registers a0 to a6 of the interruptee.
Re-entry of the load/store handler was quite frequent so this one needs fixing. Testing or review feedback would be welcomed? This PR implements a different strategy to the SDK fix and might be more efficient and supports multiple re-entry via an NMI.
The sdk code also appears to handle NMI re-entry too, but that seems a separate issue. Not yet sure where that is a problem, perhaps very quick repetition of an NMI before the handler disables it, or perhaps on the exit path after re-enabling the NMI but before restoring state from the NMI stack? Shall look into that separately.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,645,2018-06-17T06:14:05Z,2018-06-17T07:04:17Z,2018-06-17T07:04:17Z,MERGED,True,48,5,2,https://github.com/ourairquality,"wificfg: add shutdown hooks, and add support to wait until connected.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/645,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/645,"Remove the wificfg_got_sta_connect() function and replace it with wificfg_wait_until_sta_connected(). This replaces a probe function with a wait function, and this better fits the wifi layer using an event model - the wait function can wait on a station connection event before returning. This helped get this working on the esp-idf framework - small steps in that direction.
The shutdown hooks are called when the wificfg restart function is used. It can be used to implement a cleaner restart, for example blocking further i2c and flash operations.","Remove the wificfg_got_sta_connect() function and replace it with wificfg_wait_until_sta_connected(). This replaces a probe function with a wait function, and this better fits the wifi layer using an event model - the wait function can wait on a station connection event before returning. This helped get this working on the esp-idf framework - small steps in that direction.
The shutdown hooks are called when the wificfg restart function is used. It can be used to implement a cleaner restart, for example blocking further i2c and flash operations.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,646,2018-06-17T06:34:40Z,2018-06-17T07:40:31Z,2018-06-17T07:40:31Z,MERGED,True,20,17,1,https://github.com/ourairquality,wificfg: default the hostname in all modes.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/646,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/646,"A hostname is also useful in AP mode, so also default it in AP mode - it was previously only defaulted in station mode.
Correct the host redirection logic, to work when no hostname is defined.","A hostname is also useful in AP mode, so also default it in AP mode - it was previously only defaulted in station mode.
Correct the host redirection logic, to work when no hostname is defined.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,647,2018-06-17T10:15:06Z,2018-06-17T13:55:29Z,2018-06-17T13:55:29Z,MERGED,True,60,4,3,https://github.com/ourairquality,libmain: add a compile option to avoid saving wifi params to flash,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/647,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/647,"Add source code for sdk_wifi_param_save_protect() and a compile time, WIFI_PARAM_SAVE, option to skip writing the wifi state to flash. This avoids wear on the flash and does not appear to be necessary when the app initializes the state anyway.
Define WIFI_PARAM_SAVE to 0 for the wificfg example.","Add source code for sdk_wifi_param_save_protect() and a compile time, WIFI_PARAM_SAVE, option to skip writing the wifi state to flash. This avoids wear on the flash and does not appear to be necessary when the app initializes the state anyway.
Define WIFI_PARAM_SAVE to 0 for the wificfg example.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,648,2018-06-17T12:00:49Z,2018-07-04T18:23:34Z,2018-07-04T19:34:03Z,MERGED,True,14,1,1,https://github.com/phkehl,Improve documentation of http_get_bearssl example,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/648,https://github.com/phkehl,1,https://github.com/SuperHouse/esp-open-rtos/pull/648,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/apiel,1,https://github.com/SuperHouse/esp-open-rtos/pull/661,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c","I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/apiel,2,https://github.com/SuperHouse/esp-open-rtos/pull/661#issuecomment-408503529,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c","I try to upload another firmware on the rboot_config.roms[1] -> 0x102000
esptool.py -p /dev/ttyUSB0 --baud 115200 write_flash -fs 16m -fm dout -ff 40m 0x102000 ./firmware/firmware.bin
And it does like I upload it on 0x2000
It reboot on this new firmware, but rboot_config.current_rom is 0 and the address is 0x2000 even if I uploaded it to 0x102000
Any idea?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/AndreaGreco,3,https://github.com/SuperHouse/esp-open-rtos/pull/661#issuecomment-408521044,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c","This is a wdog Reset, that means that your IDLE Task does not ping wdog.
The perfect is a API for manually ping wdog but at now is not available.
Checkout that you do not remove delay. Or consider increase delay.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/apiel,4,https://github.com/SuperHouse/esp-open-rtos/pull/661#issuecomment-408523601,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c","I actually wonder if it is not a problem with rboot. I try to change the flashsize setting to 0x80000, 0x40000 even 0x20000 but none of them work.
esptool.py -p /dev/ttyUSB0 --baud 115200 write_flash -fs 2m -fm dout -ff 40m 0x0 ../esp-open-rtos/bootloader/firmware/rboot.bin 0x1000 ../esp-open-rtos/bootloader/firmware_prebuilt/blank_config.bin 0x2000 ./firmware/firmware156.bin 0x42000 ./firmware/firmware157.bin
I have to stop for today cause my head is explading :p
Hopefully, I will find the solution soon. I will try to take in consideration your comments to make it work :D",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/AndreaGreco,5,https://github.com/SuperHouse/esp-open-rtos/pull/661#issuecomment-408543441,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c",Do you make a sleep before reset ESP. Make a large sleep before reset is important for ping wdog.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/apiel,6,https://github.com/SuperHouse/esp-open-rtos/pull/661#issuecomment-408600480,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c","Actually, it's even more a question of OTA or not, I just have to find the right setting for flashing my ROMs. I tried so much different setting but I don't manage to get it work :-/
esptool.py -p /dev/ttyUSB0 --baud 115200 write_flash -fs 8m -fm dout -ff 40m 0x0 ../esp-open-rtos/bootloader/firmware/rboot.bin 0x1000 ../esp-open-rtos/bootloader/firmware_prebuilt/blank_config.bin 0x2000 ./firmware/firmware.bin 0x82000 ./firmware/firmware164.bin
Here, I manage to upload the 2 firmwares correctly but when I switch to the second room, the boot fails.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/apiel,7,https://github.com/SuperHouse/esp-open-rtos/pull/661#issuecomment-408631973,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c","I spent the whole day on my issue. I even made a new version of rBoot, I start to understand more and more all the logic of this booting system. But it seem that there is an issue when we boot from another address than 0x2000. I cleaned up all the flash and then I run the following command (with original rBoot). I took care to leave 0x2000 that rBoot switch to the next rom address. Everything is fine, but when it come to boot, nothing happen, no error, nothing, just stuck there.
 #:~/dev/esp/sonoff$ esptool.py -p /dev/ttyUSB0 --baud 115200 write_flash -fs 8m -fm dout 0x0 ../esp-open-rtos/bootloader/firmware/rboot.bin 0x82000 ./firmware/firmware.bin && cu -l /dev/ttyUSB0 -s 115200
esptool.py v1.2
Connecting...
Running Cesanta flasher stub...
Flash params set to 0x0320
Writing 4096 @ 0x0... 4096 (100 %)
Wrote 4096 bytes at 0x0 in 0.4 seconds (89.6 kbit/s)...
Leaving...
Connected.
load 0x40100000, len 2412, room 16 
tail 12
chksum 0xf0
ho 0 tail 12 room 4
load 0x3ffe8000, len 800, room 12 
tail 4
chksum 0xdc
csum 0xdc

rBoot v1.4.0 - richardaburton@gmail.com
Flash Size: 8 Mbit
Flash Mode:   DOUT
Flash Speed:  40 MHz
rBoot Option: Big flash
rBoot Option: RTC data

Rom 0 at 2000 is bad.
Booting rom 1 from 82000, run at ram c0620.


Any idea?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/oremic,8,https://github.com/SuperHouse/esp-open-rtos/pull/661#issuecomment-483016798,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c","hi
resolve problem ??",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,661,2018-07-26T17:20:44Z,2018-07-28T13:01:00Z,2019-04-14T18:17:03Z,CLOSED,False,12,6,1,https://github.com/apiel,fix http ota,3,[],https://github.com/SuperHouse/esp-open-rtos/pull/661,https://github.com/apiel,9,https://github.com/SuperHouse/esp-open-rtos/pull/661#issuecomment-483033660,"I had some issue to flash my esp8266 (sonoff) with http client ota.
sdk_spi_flash_write requires a word aligned
Assuming size is always a multiple of 4 bytes.
See ./extras/rboot-ota/ota-tftp.c","Long time I didn't touch sonoff and especially OTA, but from what I remember I had lot of issue with erasing the flash before to write the new rom. So the best way was to prepare the flash when the sonoff start. Also I had some issue to make the sonoff boot at the second rom position, so to solve this issue I wrote my own booting system. However, OTA with esp-open-rtos is a pain and if you really need OTA, I would highly recommand you to use Arduino.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,662,2018-07-28T20:37:20Z,,2018-07-28T20:37:20Z,OPEN,False,10,9,1,https://github.com/crazyimp,"set python3 as default python interpreter, fix whitespace and encodin…",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/662,https://github.com/crazyimp,1,https://github.com/SuperHouse/esp-open-rtos/pull/662,…g issues,…g issues,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,663,2018-07-28T20:40:33Z,,2018-07-28T20:40:33Z,OPEN,False,171,0,2,https://github.com/crazyimp,Add new example: telnet echo server,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/663,https://github.com/crazyimp,1,https://github.com/SuperHouse/esp-open-rtos/pull/663,Comments welcome :).,Comments welcome :).,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,667,2018-08-02T14:07:36Z,2018-10-17T09:15:49Z,2018-10-17T09:15:49Z,MERGED,True,25,4,2,https://github.com/UncleRus,CMD25 workaround for SDIO,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/667,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/667,"Fix for #666 (nice number, isn't it?)","Fix for #666 (nice number, isn't it?)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,669,2018-08-04T07:30:31Z,2019-02-26T20:58:16Z,2019-02-26T20:58:16Z,MERGED,True,1173,0,11,https://github.com/Zaltora,LVGL: Open-source Embedded GUI Library,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/669,https://github.com/Zaltora,1,https://github.com/SuperHouse/esp-open-rtos/pull/669,"Hi, i use lvgl in my current project and i suggest to use it as main GUI library for esp-open-rtos. It is the most complete GUI Library graphics open source i found (license MIT). If someone know alternative, tell me. I know µGUI but is not as complete as it.
I will not describe the library here, the website is better for that: lvgl
Font/image tools, UTF-8 encoding, filesystem compatible, complete docs ...
Some clean up/organization to do before merge it. Suggest are welcome for everything. My implementation is maybe not good. Configuration files will be split because some of them need to be set just for the current sdk, not the current project.
I use the dev-5.2 branch of lvgl and the ""new_api"" branch of lv_drivers. Some lvgl GUI example are present too.
I added a usage example with ssd1306 (work well). I will add some more example. I need fix usage of multiple spi to put the example with ili9341 and the AR1021.
Look this video (sry for quality)(mkv): ili9341_esp8266_test.zip
HW : esp8266 + ILI9341 + AR1021
Warning:
-Not all drivers from lv_drivers is compatible, it is a dev branch. ILI9341, AR10XX and SSD1306 are compatible.
-5.2 branch need to be stable before merging.","Hi, i use lvgl in my current project and i suggest to use it as main GUI library for esp-open-rtos. It is the most complete GUI Library graphics open source i found (license MIT). If someone know alternative, tell me. I know µGUI but is not as complete as it.
I will not describe the library here, the website is better for that: lvgl
Font/image tools, UTF-8 encoding, filesystem compatible, complete docs ...
Some clean up/organization to do before merge it. Suggest are welcome for everything. My implementation is maybe not good. Configuration files will be split because some of them need to be set just for the current sdk, not the current project.
I use the dev-5.2 branch of lvgl and the ""new_api"" branch of lv_drivers. Some lvgl GUI example are present too.
I added a usage example with ssd1306 (work well). I will add some more example. I need fix usage of multiple spi to put the example with ili9341 and the AR1021.
Look this video (sry for quality)(mkv): ili9341_esp8266_test.zip
HW : esp8266 + ILI9341 + AR1021
Warning:
-Not all drivers from lv_drivers is compatible, it is a dev branch. ILI9341, AR10XX and SSD1306 are compatible.
-5.2 branch need to be stable before merging.",True,"{'THUMBS_UP': ['https://github.com/UncleRus', 'https://github.com/ja2142', 'https://github.com/Petezah']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,669,2018-08-04T07:30:31Z,2019-02-26T20:58:16Z,2019-02-26T20:58:16Z,MERGED,True,1173,0,11,https://github.com/Zaltora,LVGL: Open-source Embedded GUI Library,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/669,https://github.com/Zaltora,2,https://github.com/SuperHouse/esp-open-rtos/pull/669#issuecomment-410443610,"Hi, i use lvgl in my current project and i suggest to use it as main GUI library for esp-open-rtos. It is the most complete GUI Library graphics open source i found (license MIT). If someone know alternative, tell me. I know µGUI but is not as complete as it.
I will not describe the library here, the website is better for that: lvgl
Font/image tools, UTF-8 encoding, filesystem compatible, complete docs ...
Some clean up/organization to do before merge it. Suggest are welcome for everything. My implementation is maybe not good. Configuration files will be split because some of them need to be set just for the current sdk, not the current project.
I use the dev-5.2 branch of lvgl and the ""new_api"" branch of lv_drivers. Some lvgl GUI example are present too.
I added a usage example with ssd1306 (work well). I will add some more example. I need fix usage of multiple spi to put the example with ili9341 and the AR1021.
Look this video (sry for quality)(mkv): ili9341_esp8266_test.zip
HW : esp8266 + ILI9341 + AR1021
Warning:
-Not all drivers from lv_drivers is compatible, it is a dev branch. ILI9341, AR10XX and SSD1306 are compatible.
-5.2 branch need to be stable before merging.","Now: you need add lv_conf.h and the lv_drv_conf.h to our root project directory.
It exist a way to make possible to add theses files in any sub-folder ?
The way FreeRTOSConfig.h is implemented seem to work in a better way, unfortunately i don't no yet how do the same with lvgl files.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,669,2018-08-04T07:30:31Z,2019-02-26T20:58:16Z,2019-02-26T20:58:16Z,MERGED,True,1173,0,11,https://github.com/Zaltora,LVGL: Open-source Embedded GUI Library,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/669,https://github.com/UncleRus,3,https://github.com/SuperHouse/esp-open-rtos/pull/669#issuecomment-425019159,"Hi, i use lvgl in my current project and i suggest to use it as main GUI library for esp-open-rtos. It is the most complete GUI Library graphics open source i found (license MIT). If someone know alternative, tell me. I know µGUI but is not as complete as it.
I will not describe the library here, the website is better for that: lvgl
Font/image tools, UTF-8 encoding, filesystem compatible, complete docs ...
Some clean up/organization to do before merge it. Suggest are welcome for everything. My implementation is maybe not good. Configuration files will be split because some of them need to be set just for the current sdk, not the current project.
I use the dev-5.2 branch of lvgl and the ""new_api"" branch of lv_drivers. Some lvgl GUI example are present too.
I added a usage example with ssd1306 (work well). I will add some more example. I need fix usage of multiple spi to put the example with ili9341 and the AR1021.
Look this video (sry for quality)(mkv): ili9341_esp8266_test.zip
HW : esp8266 + ILI9341 + AR1021
Warning:
-Not all drivers from lv_drivers is compatible, it is a dev branch. ILI9341, AR10XX and SSD1306 are compatible.
-5.2 branch need to be stable before merging.",Great work! Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,669,2018-08-04T07:30:31Z,2019-02-26T20:58:16Z,2019-02-26T20:58:16Z,MERGED,True,1173,0,11,https://github.com/Zaltora,LVGL: Open-source Embedded GUI Library,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/669,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/669#issuecomment-427595884,"Hi, i use lvgl in my current project and i suggest to use it as main GUI library for esp-open-rtos. It is the most complete GUI Library graphics open source i found (license MIT). If someone know alternative, tell me. I know µGUI but is not as complete as it.
I will not describe the library here, the website is better for that: lvgl
Font/image tools, UTF-8 encoding, filesystem compatible, complete docs ...
Some clean up/organization to do before merge it. Suggest are welcome for everything. My implementation is maybe not good. Configuration files will be split because some of them need to be set just for the current sdk, not the current project.
I use the dev-5.2 branch of lvgl and the ""new_api"" branch of lv_drivers. Some lvgl GUI example are present too.
I added a usage example with ssd1306 (work well). I will add some more example. I need fix usage of multiple spi to put the example with ili9341 and the AR1021.
Look this video (sry for quality)(mkv): ili9341_esp8266_test.zip
HW : esp8266 + ILI9341 + AR1021
Warning:
-Not all drivers from lv_drivers is compatible, it is a dev branch. ILI9341, AR10XX and SSD1306 are compatible.
-5.2 branch need to be stable before merging.",Going to merge it,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,669,2018-08-04T07:30:31Z,2019-02-26T20:58:16Z,2019-02-26T20:58:16Z,MERGED,True,1173,0,11,https://github.com/Zaltora,LVGL: Open-source Embedded GUI Library,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/669,https://github.com/Zaltora,5,https://github.com/SuperHouse/esp-open-rtos/pull/669#issuecomment-427596338,"Hi, i use lvgl in my current project and i suggest to use it as main GUI library for esp-open-rtos. It is the most complete GUI Library graphics open source i found (license MIT). If someone know alternative, tell me. I know µGUI but is not as complete as it.
I will not describe the library here, the website is better for that: lvgl
Font/image tools, UTF-8 encoding, filesystem compatible, complete docs ...
Some clean up/organization to do before merge it. Suggest are welcome for everything. My implementation is maybe not good. Configuration files will be split because some of them need to be set just for the current sdk, not the current project.
I use the dev-5.2 branch of lvgl and the ""new_api"" branch of lv_drivers. Some lvgl GUI example are present too.
I added a usage example with ssd1306 (work well). I will add some more example. I need fix usage of multiple spi to put the example with ili9341 and the AR1021.
Look this video (sry for quality)(mkv): ili9341_esp8266_test.zip
HW : esp8266 + ILI9341 + AR1021
Warning:
-Not all drivers from lv_drivers is compatible, it is a dev branch. ILI9341, AR10XX and SSD1306 are compatible.
-5.2 branch need to be stable before merging.","Not yet, the official release 5.2. was done this week. Need to update it and the example with configuration files.
I didn't found a solution to make possible to user to change the placement of configuration file.  This feature can wait i guess :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,669,2018-08-04T07:30:31Z,2019-02-26T20:58:16Z,2019-02-26T20:58:16Z,MERGED,True,1173,0,11,https://github.com/Zaltora,LVGL: Open-source Embedded GUI Library,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/669,https://github.com/Zaltora,6,https://github.com/SuperHouse/esp-open-rtos/pull/669#issuecomment-427641362,"Hi, i use lvgl in my current project and i suggest to use it as main GUI library for esp-open-rtos. It is the most complete GUI Library graphics open source i found (license MIT). If someone know alternative, tell me. I know µGUI but is not as complete as it.
I will not describe the library here, the website is better for that: lvgl
Font/image tools, UTF-8 encoding, filesystem compatible, complete docs ...
Some clean up/organization to do before merge it. Suggest are welcome for everything. My implementation is maybe not good. Configuration files will be split because some of them need to be set just for the current sdk, not the current project.
I use the dev-5.2 branch of lvgl and the ""new_api"" branch of lv_drivers. Some lvgl GUI example are present too.
I added a usage example with ssd1306 (work well). I will add some more example. I need fix usage of multiple spi to put the example with ili9341 and the AR1021.
Look this video (sry for quality)(mkv): ili9341_esp8266_test.zip
HW : esp8266 + ILI9341 + AR1021
Warning:
-Not all drivers from lv_drivers is compatible, it is a dev branch. ILI9341, AR10XX and SSD1306 are compatible.
-5.2 branch need to be stable before merging.",5.2 branch add new feature for monochrome display. i will update the driver soon,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,669,2018-08-04T07:30:31Z,2019-02-26T20:58:16Z,2019-02-26T20:58:16Z,MERGED,True,1173,0,11,https://github.com/Zaltora,LVGL: Open-source Embedded GUI Library,9,[],https://github.com/SuperHouse/esp-open-rtos/pull/669,https://github.com/Zaltora,7,https://github.com/SuperHouse/esp-open-rtos/pull/669#issuecomment-431620184,"Hi, i use lvgl in my current project and i suggest to use it as main GUI library for esp-open-rtos. It is the most complete GUI Library graphics open source i found (license MIT). If someone know alternative, tell me. I know µGUI but is not as complete as it.
I will not describe the library here, the website is better for that: lvgl
Font/image tools, UTF-8 encoding, filesystem compatible, complete docs ...
Some clean up/organization to do before merge it. Suggest are welcome for everything. My implementation is maybe not good. Configuration files will be split because some of them need to be set just for the current sdk, not the current project.
I use the dev-5.2 branch of lvgl and the ""new_api"" branch of lv_drivers. Some lvgl GUI example are present too.
I added a usage example with ssd1306 (work well). I will add some more example. I need fix usage of multiple spi to put the example with ili9341 and the AR1021.
Look this video (sry for quality)(mkv): ili9341_esp8266_test.zip
HW : esp8266 + ILI9341 + AR1021
Warning:
-Not all drivers from lv_drivers is compatible, it is a dev branch. ILI9341, AR10XX and SSD1306 are compatible.
-5.2 branch need to be stable before merging.","This PR is ready to be merged :)
With lvgl, we can use a lower buffer than the original SSD1306 library. instead of 1kB, we can use 1/8 of this size (minimum).",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,671,2018-08-07T20:40:55Z,2018-08-08T14:07:44Z,2018-08-22T12:41:24Z,MERGED,True,2,2,1,https://github.com/quietboil,Shrink gpio<>iomux maps,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/671,https://github.com/quietboil,1,https://github.com/SuperHouse/esp-open-rtos/pull/671,"Both maps are in RAM, so there is really no need to allocate extra memory for each entry - no aligned reads.
The assembler for gpio_to_iomux and iomux_to_gpio differs only in how array entry address (offset) is calculated:

current: addx4 a2, a2, a3
changed: add.n a2, a3, a2","Both maps are in RAM, so there is really no need to allocate extra memory for each entry - no aligned reads.
The assembler for gpio_to_iomux and iomux_to_gpio differs only in how array entry address (offset) is calculated:

current: addx4 a2, a2, a3
changed: add.n a2, a3, a2",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,671,2018-08-07T20:40:55Z,2018-08-08T14:07:44Z,2018-08-22T12:41:24Z,MERGED,True,2,2,1,https://github.com/quietboil,Shrink gpio<>iomux maps,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/671,https://github.com/ourairquality,2,https://github.com/SuperHouse/esp-open-rtos/pull/671#issuecomment-415009573,"Both maps are in RAM, so there is really no need to allocate extra memory for each entry - no aligned reads.
The assembler for gpio_to_iomux and iomux_to_gpio differs only in how array entry address (offset) is calculated:

current: addx4 a2, a2, a3
changed: add.n a2, a3, a2","This might be a problem as an 8 bit access to iram generates a load exception, very slow, and perhaps some code will expected gpio access to be fast. So it might be best to either revert this, or change it to place these in data RAM?",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,671,2018-08-07T20:40:55Z,2018-08-08T14:07:44Z,2018-08-22T12:41:24Z,MERGED,True,2,2,1,https://github.com/quietboil,Shrink gpio<>iomux maps,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/671,https://github.com/quietboil,3,https://github.com/SuperHouse/esp-open-rtos/pull/671#issuecomment-415014552,"Both maps are in RAM, so there is really no need to allocate extra memory for each entry - no aligned reads.
The assembler for gpio_to_iomux and iomux_to_gpio differs only in how array entry address (offset) is calculated:

current: addx4 a2, a2, a3
changed: add.n a2, a3, a2","an 8 bit access to iram generates a load exception

Agree. My fault. I managed to miss the section attribute on those arrays 😞",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,671,2018-08-07T20:40:55Z,2018-08-08T14:07:44Z,2018-08-22T12:41:24Z,MERGED,True,2,2,1,https://github.com/quietboil,Shrink gpio<>iomux maps,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/671,https://github.com/UncleRus,4,https://github.com/SuperHouse/esp-open-rtos/pull/671#issuecomment-415018109,"Both maps are in RAM, so there is really no need to allocate extra memory for each entry - no aligned reads.
The assembler for gpio_to_iomux and iomux_to_gpio differs only in how array entry address (offset) is calculated:

current: addx4 a2, a2, a3
changed: add.n a2, a3, a2",Reverted,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,676,2018-08-21T19:50:40Z,2018-08-22T10:46:33Z,2018-08-22T10:46:33Z,MERGED,True,2,2,1,https://github.com/quietboil,Fixed sysparams flash area address calculation,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/676,https://github.com/quietboil,1,https://github.com/SuperHouse/esp-open-rtos/pull/676,"As the addr is not a pointer adding a size of the buffer in words calculates a wrong offset in flash (+8 instead of +32). This eventually leads to the loop overstepping the boundary of the sysparam area and include the beginning of the esp system parameters sector - the last read from 0x003fafe8 to 0x003fb007 with a 4M flash. The latter is not empty, so the sysparam area checker would always see the sysparam area as not empty.","As the addr is not a pointer adding a size of the buffer in words calculates a wrong offset in flash (+8 instead of +32). This eventually leads to the loop overstepping the boundary of the sysparam area and include the beginning of the esp system parameters sector - the last read from 0x003fafe8 to 0x003fb007 with a 4M flash. The latter is not empty, so the sysparam area checker would always see the sysparam area as not empty.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,676,2018-08-21T19:50:40Z,2018-08-22T10:46:33Z,2018-08-22T10:46:33Z,MERGED,True,2,2,1,https://github.com/quietboil,Fixed sysparams flash area address calculation,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/676,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/676#issuecomment-414991173,"As the addr is not a pointer adding a size of the buffer in words calculates a wrong offset in flash (+8 instead of +32). This eventually leads to the loop overstepping the boundary of the sysparam area and include the beginning of the esp system parameters sector - the last read from 0x003fafe8 to 0x003fb007 with a 4M flash. The latter is not empty, so the sysparam area checker would always see the sysparam area as not empty.",Nice catch!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,677,2018-08-22T12:39:59Z,2018-08-22T12:40:08Z,2018-08-22T12:40:08Z,MERGED,True,2,2,1,https://github.com/UncleRus,"Revert ""Shrink gpio<>iomux maps""",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/677,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/677,Reverts #671,Reverts #671,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,678,2018-08-22T16:08:35Z,2018-08-24T19:28:28Z,2018-08-24T19:28:28Z,MERGED,True,29,0,2,https://github.com/k-korn,Add ADS1015 support to ads111x lib.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/678,https://github.com/k-korn,1,https://github.com/SuperHouse/esp-open-rtos/pull/678,"ADS101x is a faster version of ADS111x ADC, with lower precision.
This change provides basic support for device, by defining sample rates used by ADS101x and providing new ads101x_get_value() function with proper 4-bit shift to obtain actual ADC value.","ADS101x is a faster version of ADS111x ADC, with lower precision.
This change provides basic support for device, by defining sample rates used by ADS101x and providing new ads101x_get_value() function with proper 4-bit shift to obtain actual ADC value.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,678,2018-08-22T16:08:35Z,2018-08-24T19:28:28Z,2018-08-24T19:28:28Z,MERGED,True,29,0,2,https://github.com/k-korn,Add ADS1015 support to ads111x lib.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/678,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/678#issuecomment-415859564,"ADS101x is a faster version of ADS111x ADC, with lower precision.
This change provides basic support for device, by defining sample rates used by ADS101x and providing new ads101x_get_value() function with proper 4-bit shift to obtain actual ADC value.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,683,2018-10-11T22:22:20Z,2018-10-26T07:39:25Z,2018-10-26T07:39:26Z,MERGED,True,20,4,1,https://github.com/quietboil,Fixed command and address in LSB mode,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/683,https://github.com/quietboil,1,https://github.com/SuperHouse/esp-open-rtos/pull/683,"Not even sure if anyone cares 😃 I, for instance, have not seen a device that uses LSB bit ordering, but... for the sake of completeness and what if...
Something I noticed when I was ""playing"" with different transfer modes. To show what it is I wrote a small test program:
enum { LSB, MSB };
enum { USING_CS, MINIMAL_PINS };
// -----8<----->8------
spi_init(1, SPI_MODE0, SPI_GET_FREQ_DIV(2000,40), LSB, SPI_LITTLE_ENDIAN, USING_CS);
for (;;) {
switch (getchar()) {
    case 'c': {
        spi_set_command(1,4,0xC);
        spi_set_dummy_bits(1,4,false);
        spi_transfer_8(1, 0x6a);
        spi_clear_dummy(1);
        spi_clear_command(1);
        break;
    }
    case 'a': {
        spi_set_address(1,4,0xA);
        spi_set_dummy_bits(1,4,false);
        spi_transfer_8(1, 0x6a);
        spi_clear_dummy(1);
        spi_clear_address(1);
        break;
    }
}
Current implementation assumes ""always MSB"" for commands and addresses and pushes wrongs bits out.
Command and Address


Note that SPI analyzer is set to decode 8-bit transfers with the least significant bit first.
also... while I ran them separately and captured 2 images, one for the command and one for the address, they are virtually identical

The fixed spi_set_command and spi_set_address set those bits properly.

Note this time I set decoder to 4-bits per transfer to illustrate the result a bit better

Command

Address","Not even sure if anyone cares 😃 I, for instance, have not seen a device that uses LSB bit ordering, but... for the sake of completeness and what if...
Something I noticed when I was ""playing"" with different transfer modes. To show what it is I wrote a small test program:
enum { LSB, MSB };
enum { USING_CS, MINIMAL_PINS };
// -----8<----->8------
spi_init(1, SPI_MODE0, SPI_GET_FREQ_DIV(2000,40), LSB, SPI_LITTLE_ENDIAN, USING_CS);
for (;;) {
switch (getchar()) {
    case 'c': {
        spi_set_command(1,4,0xC);
        spi_set_dummy_bits(1,4,false);
        spi_transfer_8(1, 0x6a);
        spi_clear_dummy(1);
        spi_clear_command(1);
        break;
    }
    case 'a': {
        spi_set_address(1,4,0xA);
        spi_set_dummy_bits(1,4,false);
        spi_transfer_8(1, 0x6a);
        spi_clear_dummy(1);
        spi_clear_address(1);
        break;
    }
}
Current implementation assumes ""always MSB"" for commands and addresses and pushes wrongs bits out.
Command and Address


Note that SPI analyzer is set to decode 8-bit transfers with the least significant bit first.
also... while I ran them separately and captured 2 images, one for the command and one for the address, they are virtually identical

The fixed spi_set_command and spi_set_address set those bits properly.

Note this time I set decoder to 4-bits per transfer to illustrate the result a bit better

Command

Address",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,683,2018-10-11T22:22:20Z,2018-10-26T07:39:25Z,2018-10-26T07:39:26Z,MERGED,True,20,4,1,https://github.com/quietboil,Fixed command and address in LSB mode,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/683,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/683#issuecomment-430554495,"Not even sure if anyone cares 😃 I, for instance, have not seen a device that uses LSB bit ordering, but... for the sake of completeness and what if...
Something I noticed when I was ""playing"" with different transfer modes. To show what it is I wrote a small test program:
enum { LSB, MSB };
enum { USING_CS, MINIMAL_PINS };
// -----8<----->8------
spi_init(1, SPI_MODE0, SPI_GET_FREQ_DIV(2000,40), LSB, SPI_LITTLE_ENDIAN, USING_CS);
for (;;) {
switch (getchar()) {
    case 'c': {
        spi_set_command(1,4,0xC);
        spi_set_dummy_bits(1,4,false);
        spi_transfer_8(1, 0x6a);
        spi_clear_dummy(1);
        spi_clear_command(1);
        break;
    }
    case 'a': {
        spi_set_address(1,4,0xA);
        spi_set_dummy_bits(1,4,false);
        spi_transfer_8(1, 0x6a);
        spi_clear_dummy(1);
        spi_clear_address(1);
        break;
    }
}
Current implementation assumes ""always MSB"" for commands and addresses and pushes wrongs bits out.
Command and Address


Note that SPI analyzer is set to decode 8-bit transfers with the least significant bit first.
also... while I ran them separately and captured 2 images, one for the command and one for the address, they are virtually identical

The fixed spi_set_command and spi_set_address set those bits properly.

Note this time I set decoder to 4-bits per transfer to illustrate the result a bit better

Command

Address",@Zaltora please look,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,683,2018-10-11T22:22:20Z,2018-10-26T07:39:25Z,2018-10-26T07:39:26Z,MERGED,True,20,4,1,https://github.com/quietboil,Fixed command and address in LSB mode,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/683,https://github.com/Zaltora,3,https://github.com/SuperHouse/esp-open-rtos/pull/683#issuecomment-431050709,"Not even sure if anyone cares 😃 I, for instance, have not seen a device that uses LSB bit ordering, but... for the sake of completeness and what if...
Something I noticed when I was ""playing"" with different transfer modes. To show what it is I wrote a small test program:
enum { LSB, MSB };
enum { USING_CS, MINIMAL_PINS };
// -----8<----->8------
spi_init(1, SPI_MODE0, SPI_GET_FREQ_DIV(2000,40), LSB, SPI_LITTLE_ENDIAN, USING_CS);
for (;;) {
switch (getchar()) {
    case 'c': {
        spi_set_command(1,4,0xC);
        spi_set_dummy_bits(1,4,false);
        spi_transfer_8(1, 0x6a);
        spi_clear_dummy(1);
        spi_clear_command(1);
        break;
    }
    case 'a': {
        spi_set_address(1,4,0xA);
        spi_set_dummy_bits(1,4,false);
        spi_transfer_8(1, 0x6a);
        spi_clear_dummy(1);
        spi_clear_address(1);
        break;
    }
}
Current implementation assumes ""always MSB"" for commands and addresses and pushes wrongs bits out.
Command and Address


Note that SPI analyzer is set to decode 8-bit transfers with the least significant bit first.
also... while I ran them separately and captured 2 images, one for the command and one for the address, they are virtually identical

The fixed spi_set_command and spi_set_address set those bits properly.

Note this time I set decoder to 4-bits per transfer to illustrate the result a bit better

Command

Address","It is look like good, unfortunately, I can't  test it right now.
Edit: I test the changes with my  SPI3 connection for SDD1306. No problem :)",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,688,2018-12-04T15:23:03Z,2018-12-04T15:31:00Z,2018-12-05T11:23:47Z,MERGED,True,4,4,1,https://github.com/strongly-typed,http_get example: Make compatible with IPv4,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/688,https://github.com/strongly-typed,1,https://github.com/SuperHouse/esp-open-rtos/pull/688,"ipv6.google.com is not available from an IPv4-only network.
httpbin.org gives nice answers to many requests.","ipv6.google.com is not available from an IPv4-only network.
httpbin.org gives nice answers to many requests.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,688,2018-12-04T15:23:03Z,2018-12-04T15:31:00Z,2018-12-05T11:23:47Z,MERGED,True,4,4,1,https://github.com/strongly-typed,http_get example: Make compatible with IPv4,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/688,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/688#issuecomment-444141794,"ipv6.google.com is not available from an IPv4-only network.
httpbin.org gives nice answers to many requests.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,692,2019-01-14T13:59:07Z,,2019-01-14T13:59:07Z,OPEN,False,359,0,7,https://github.com/ju6ge,"add rf433mhz component to extras, for using antenna modules with esp",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/692,https://github.com/ju6ge,1,https://github.com/SuperHouse/esp-open-rtos/pull/692,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,693,2019-01-16T21:05:55Z,2019-01-16T23:37:43Z,2019-01-17T07:23:56Z,MERGED,True,3,0,1,https://github.com/ja2142,added lease time option to dhcpserver's DHCPOFFER,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/693,https://github.com/ja2142,1,https://github.com/SuperHouse/esp-open-rtos/pull/693,"This adds DHCP_OPTION_LEASE_TIME to dhcpserver's DHCPOFFER which is required by rfc2131 (table 3, page 28). This fixes the server incompatibility with ISC dhclient (tested on version 4.4.1) which is standard dhcp client on arch.","This adds DHCP_OPTION_LEASE_TIME to dhcpserver's DHCPOFFER which is required by rfc2131 (table 3, page 28). This fixes the server incompatibility with ISC dhclient (tested on version 4.4.1) which is standard dhcp client on arch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,693,2019-01-16T21:05:55Z,2019-01-16T23:37:43Z,2019-01-17T07:23:56Z,MERGED,True,3,0,1,https://github.com/ja2142,added lease time option to dhcpserver's DHCPOFFER,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/693,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/693#issuecomment-455068553,"This adds DHCP_OPTION_LEASE_TIME to dhcpserver's DHCPOFFER which is required by rfc2131 (table 3, page 28). This fixes the server incompatibility with ISC dhclient (tested on version 4.4.1) which is standard dhcp client on arch.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,694,2019-01-18T13:33:54Z,,2019-01-18T13:33:54Z,OPEN,False,2,2,2,https://github.com/ja2142,fixed extra characters printed for 32B ssids,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/694,https://github.com/ja2142,1,https://github.com/SuperHouse/esp-open-rtos/pull/694,"Fixed #682:

changed wifi_scan example to cut SSIDs to 32 characters,
updated libesphttpd to newest version which fixes the same problem for cgiWiFiScan","Fixed #682:

changed wifi_scan example to cut SSIDs to 32 characters,
updated libesphttpd to newest version which fixes the same problem for cgiWiFiScan",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,706,2019-04-05T02:11:04Z,,2019-06-06T13:09:28Z,OPEN,False,385,33,13,https://github.com/ourairquality,lwip: update to version 2.2.0 devel.,8,[],https://github.com/SuperHouse/esp-open-rtos/pull/706,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/706,Lwip has seen some useful development since the last update which was version 2.0.3. Here is an update to the latest master branch 2.2.0d. The mDNS support had been reworked significantly and that was a difficult merge. Testing and feedback welcomed.,Lwip has seen some useful development since the last update which was version 2.0.3. Here is an update to the latest master branch 2.2.0d. The mDNS support had been reworked significantly and that was a difficult merge. Testing and feedback welcomed.,True,"{'THUMBS_UP': ['https://github.com/UncleRus', 'https://github.com/Fonger'], 'ROCKET': ['https://github.com/RavenSystem']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,707,2019-04-05T10:48:44Z,2019-04-11T15:30:42Z,2019-04-11T15:30:42Z,MERGED,True,1157,713,28,https://github.com/ourairquality,FreeRTOS: update to v10.2.0,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/707,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/707,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,708,2019-04-06T00:59:09Z,2019-04-07T12:07:39Z,2019-04-07T12:07:39Z,MERGED,True,22,22,13,https://github.com/ourairquality,Fix compiler warnings over const losses.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/708,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/708,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,709,2019-04-06T01:05:01Z,2019-04-07T12:06:56Z,2019-04-07T12:06:57Z,MERGED,True,1,1,1,https://github.com/ourairquality,onewire: fix some variable declarations that should have been signed.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/709,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/709,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,710,2019-04-06T01:09:39Z,2019-04-07T12:05:13Z,2019-04-07T12:05:13Z,MERGED,True,1,1,1,https://github.com/ourairquality,tsl2561: fix a variable declaration the should have been signed.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/710,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/710,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,711,2019-04-06T02:11:32Z,2019-04-07T12:02:10Z,2019-04-07T12:02:10Z,MERGED,True,7,1,1,https://github.com/ourairquality,"examples: add a clean-examples target, to clean all of the examples.",1,[],https://github.com/SuperHouse/esp-open-rtos/pull/711,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/711,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,712,2019-04-09T10:24:11Z,2019-04-11T15:25:08Z,2019-04-11T15:25:08Z,MERGED,True,251,0,3,https://github.com/ourairquality,mactimer: add MAC NMI timer support.,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/712,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/712,"Support for using the MAC timer, a NMI with a higher priority than the maskable interrupts, but with similar practical code limitations to the MAC layer handler code.
These handlers are very restricted, might be very frustrating to use, but if desperate for better timing then perhaps this might be useful. It also shows how to use the MAC timer.
There is an example coming, a soft uart output driver that helped me driving some sensors.","Support for using the MAC timer, a NMI with a higher priority than the maskable interrupts, but with similar practical code limitations to the MAC layer handler code.
These handlers are very restricted, might be very frustrating to use, but if desperate for better timing then perhaps this might be useful. It also shows how to use the MAC timer.
There is an example coming, a soft uart output driver that helped me driving some sensors.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,713,2019-04-11T13:23:36Z,2019-04-11T15:26:53Z,2019-04-11T15:26:53Z,MERGED,True,600,0,11,https://github.com/ourairquality,"tsoftuart: add a softare timer base UART driver, and example.",3,[],https://github.com/SuperHouse/esp-open-rtos/pull/713,https://github.com/ourairquality,1,https://github.com/SuperHouse/esp-open-rtos/pull/713,"This has been used to help drive some sensors at 9600 baud with minimal overhead by using a hardware timer, the MAC timer. So far it only implements output, not input. It is also an example of the use of the MAC timer.
There is already a software UART driver, but it has a simpler output implement that spins waiting for delays to pass and it's timing is affected by maskable interrupts.","This has been used to help drive some sensors at 9600 baud with minimal overhead by using a hardware timer, the MAC timer. So far it only implements output, not input. It is also an example of the use of the MAC timer.
There is already a software UART driver, but it has a simpler output implement that spins waiting for delays to pass and it's timing is affected by maskable interrupts.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,723,2019-06-12T16:30:07Z,2019-06-23T06:22:59Z,2019-06-23T06:23:05Z,MERGED,True,2,1,1,https://github.com/Metalus,Http download issue when connection lost,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/723,https://github.com/Metalus,1,https://github.com/SuperHouse/esp-open-rtos/pull/723,"I was testing HTTP OTA and I realized that OTA locks down when Wifi connection drops. When this happens, POSIX function read (located at HttpClient_download) returns -1. Since it's implemented as unsigned, do { ... } while(read_byte > 0) loops forever. Therefore the read_byte variable must be signed type.","I was testing HTTP OTA and I realized that OTA locks down when Wifi connection drops. When this happens, POSIX function read (located at HttpClient_download) returns -1. Since it's implemented as unsigned, do { ... } while(read_byte > 0) loops forever. Therefore the read_byte variable must be signed type.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,723,2019-06-12T16:30:07Z,2019-06-23T06:22:59Z,2019-06-23T06:23:05Z,MERGED,True,2,1,1,https://github.com/Metalus,Http download issue when connection lost,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/723,https://github.com/kanflo,2,https://github.com/SuperHouse/esp-open-rtos/pull/723#issuecomment-504724104,"I was testing HTTP OTA and I realized that OTA locks down when Wifi connection drops. When this happens, POSIX function read (located at HttpClient_download) returns -1. Since it's implemented as unsigned, do { ... } while(read_byte > 0) loops forever. Therefore the read_byte variable must be signed type.",Thanks!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,725,2019-07-21T21:24:06Z,2019-07-24T09:39:08Z,2019-07-24T09:39:09Z,MERGED,True,5,4,2,https://github.com/UncleRus,Support for Itead Si7021,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/725,https://github.com/UncleRus,1,https://github.com/SuperHouse/esp-open-rtos/pull/725,"Fix for #719.
New sensor type in dht component","Fix for #719.
New sensor type in dht component",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,731,2019-09-20T08:01:09Z,,2019-09-20T08:01:09Z,OPEN,False,2,1,1,https://github.com/stellarshenson,Update component.mk,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/731,https://github.com/stellarshenson,1,https://github.com/SuperHouse/esp-open-rtos/pull/731,"added configurable spiffs image name
now in the programe makefile user can specify different spiffs image name using SPIFFS_IMAGE_NAME variable","added configurable spiffs image name
now in the programe makefile user can specify different spiffs image name using SPIFFS_IMAGE_NAME variable",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,732,2019-10-03T20:06:24Z,,2019-10-04T08:17:37Z,OPEN,False,10,6,2,https://github.com/zub2,Improve wificfg,4,[],https://github.com/SuperHouse/esp-open-rtos/pull/732,https://github.com/zub2,1,https://github.com/SuperHouse/esp-open-rtos/pull/732,"Several small improvements of extras/wificfg:

add missing #includes to wificfg.h
use #if instead of #ifdef when checking for configUSE_TRACE_FACILITY
make default ssid, password and hostname overridable by making the definitions in wificfg.c weak
fix typo in comment","Several small improvements of extras/wificfg:

add missing #includes to wificfg.h
use #if instead of #ifdef when checking for configUSE_TRACE_FACILITY
make default ssid, password and hostname overridable by making the definitions in wificfg.c weak
fix typo in comment",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,737,2019-11-29T08:41:35Z,,2019-12-04T11:51:41Z,OPEN,False,12,5,1,https://github.com/WizBangCrash,Fix si7021 temperature/humidity sensor reading,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/737,https://github.com/WizBangCrash,1,https://github.com/SuperHouse/esp-open-rtos/pull/737,"Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.","Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,737,2019-11-29T08:41:35Z,,2019-12-04T11:51:41Z,OPEN,False,12,5,1,https://github.com/WizBangCrash,Fix si7021 temperature/humidity sensor reading,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/737,https://github.com/WizBangCrash,2,https://github.com/SuperHouse/esp-open-rtos/pull/737#issuecomment-559777002,"Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.","Apologies. Hold off reviewing this pull request until I update it.
I realise I haven't catered for negative temperatures (its cold in the UK today) :-)
I'll update my commit later today.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,737,2019-11-29T08:41:35Z,,2019-12-04T11:51:41Z,OPEN,False,12,5,1,https://github.com/WizBangCrash,Fix si7021 temperature/humidity sensor reading,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/737,https://github.com/WizBangCrash,3,https://github.com/SuperHouse/esp-open-rtos/pull/737#issuecomment-559896436,"Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.","Updates committed and and tested on Sonoff TH16 with DHT22, Si7021 & AM2301 sensors.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,737,2019-11-29T08:41:35Z,,2019-12-04T11:51:41Z,OPEN,False,12,5,1,https://github.com/WizBangCrash,Fix si7021 temperature/humidity sensor reading,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/737,https://github.com/RavenSystem,4,https://github.com/SuperHouse/esp-open-rtos/pull/737#issuecomment-560100605,"Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.",@WizBangCrash Did you test it with DHT11 too?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,737,2019-11-29T08:41:35Z,,2019-12-04T11:51:41Z,OPEN,False,12,5,1,https://github.com/WizBangCrash,Fix si7021 temperature/humidity sensor reading,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/737,https://github.com/WizBangCrash,5,https://github.com/SuperHouse/esp-open-rtos/pull/737#issuecomment-560100943,"Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.","I don't have a DHT11 sensor unfortunately, so I couldn't test that option.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,737,2019-11-29T08:41:35Z,,2019-12-04T11:51:41Z,OPEN,False,12,5,1,https://github.com/WizBangCrash,Fix si7021 temperature/humidity sensor reading,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/737,https://github.com/WizBangCrash,6,https://github.com/SuperHouse/esp-open-rtos/pull/737#issuecomment-560313434,"Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.","@RavenSystem One other thing I have noticed during testing is that the new Sonoff branded AM2301 sensors behave like the Si7021, but the older ASAIR branded AM2301 sensors behave like the DHT22. Both sensors are in identical plastics accept for the information printed on the rear.
This can get quite confusing, especially as the software uses the sensor name as the option. It might be wise to refactor this at some point in the future and have generic 'types' e.g. SENSOR_TYPE_A, SENSOR_TYPE_B and then list the sensors that can be used with each 'type'. Rather than DHT_TYPE_DHT22, DHT_TYPE_SI7021",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,737,2019-11-29T08:41:35Z,,2019-12-04T11:51:41Z,OPEN,False,12,5,1,https://github.com/WizBangCrash,Fix si7021 temperature/humidity sensor reading,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/737,https://github.com/RavenSystem,7,https://github.com/SuperHouse/esp-open-rtos/pull/737#issuecomment-560535800,"Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.","Change sensor definitions is not a good idea because a lot of people uses this SDK, and everybody that uses DHT driver will must change code.
I think I have a DHT11. I will test it asap.",True,"{'THUMBS_UP': ['https://github.com/UncleRus', 'https://github.com/WizBangCrash']}"
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,737,2019-11-29T08:41:35Z,,2019-12-04T11:51:41Z,OPEN,False,12,5,1,https://github.com/WizBangCrash,Fix si7021 temperature/humidity sensor reading,2,[],https://github.com/SuperHouse/esp-open-rtos/pull/737,https://github.com/WizBangCrash,8,https://github.com/SuperHouse/esp-open-rtos/pull/737#issuecomment-561610827,"Raw reading modified according to the Silicon Labs sample code for the Si7021 sensor.
I've had issues trying to use the Si7021 sensor with Sonoff TH10 and TH16 devices, so looked into why it was always returning TEMP = 0, HUM = 2. The raw vales were not being interpreted as per the data sheet and Linux sample code that Silabs provide.","Change sensor definitions is not a good idea because a lot of people uses this SDK, and everybody that uses DHT driver will must change code.

I'm sure I could make it backwards compatible. I'm just forward thinking as more sensors come to the market.  I also looked at automatically switching between modes as I had in initial fix that tried the AM2301 using the old way and when it failed Phase B it would retry Phase A with a longer period. This worked, but I wasn't sure whether to submit it as a fix or not.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,740,2020-02-04T19:15:12Z,2020-02-05T07:58:06Z,2020-02-05T07:58:06Z,MERGED,True,5,1,1,https://github.com/ernicek,Added support for OLED with size 64x48,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/740,https://github.com/ernicek,1,https://github.com/SuperHouse/esp-open-rtos/pull/740,it is based on mcauser/Adafruit_SSD1306@7a748d2,it is based on mcauser/Adafruit_SSD1306@7a748d2,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,740,2020-02-04T19:15:12Z,2020-02-05T07:58:06Z,2020-02-05T07:58:06Z,MERGED,True,5,1,1,https://github.com/ernicek,Added support for OLED with size 64x48,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/740,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/740#issuecomment-582285463,it is based on mcauser/Adafruit_SSD1306@7a748d2,Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,744,2020-04-18T12:44:02Z,2022-05-04T12:56:31Z,2022-05-04T12:56:31Z,CLOSED,False,120,107,6,https://github.com/Rutger798,SNTP_fix_rtc_counter_wrapping,12,[],https://github.com/SuperHouse/esp-open-rtos/pull/744,https://github.com/Rutger798,1,https://github.com/SuperHouse/esp-open-rtos/pull/744,"Its the same as:
#148
But builds now","Its the same as:
#148
But builds now",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,745,2020-04-18T18:05:12Z,2022-05-04T12:56:31Z,2022-05-04T12:56:31Z,CLOSED,False,111,108,6,https://github.com/Rutger798,Import esp wifi config,5,[],https://github.com/SuperHouse/esp-open-rtos/pull/745,https://github.com/Rutger798,1,https://github.com/SuperHouse/esp-open-rtos/pull/745,"I have added the https://github.com/maximkulkin/esp-wifi-config to the extra.
they have made a nice way to connect your ESP to the internet","I have added the https://github.com/maximkulkin/esp-wifi-config to the extra.
they have made a nice way to connect your ESP to the internet",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,747,2020-04-24T13:36:19Z,2020-06-19T11:47:44Z,2020-06-19T11:47:45Z,MERGED,True,7,7,2,https://github.com/0x0aa,fix ssd1306 roboto fonts,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/747,https://github.com/0x0aa,1,https://github.com/SuperHouse/esp-open-rtos/pull/747,The font_info_t fields were messed up.,The font_info_t fields were messed up.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,748,2020-04-24T13:37:34Z,2020-06-19T11:47:09Z,2020-06-19T11:47:09Z,MERGED,True,52,6,1,https://github.com/0x0aa,optimize ssd1306_fill_rectangle,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/748,https://github.com/0x0aa,1,https://github.com/SuperHouse/esp-open-rtos/pull/748,Here's an optimized version with a lot less overhead.,Here's an optimized version with a lot less overhead.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,749,2020-04-24T13:38:33Z,2020-06-19T11:47:00Z,2020-06-19T11:47:00Z,MERGED,True,15,64,1,https://github.com/0x0aa,optimize ssd1306_draw_vline,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/749,https://github.com/0x0aa,1,https://github.com/SuperHouse/esp-open-rtos/pull/749,Here's an optimized version with a lot less overhead.,Here's an optimized version with a lot less overhead.,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,752,2020-06-04T07:32:18Z,2020-06-19T11:46:22Z,2020-06-19T11:46:22Z,MERGED,True,1,1,1,https://github.com/bastianhjaeger,Fix typo in cmoponent.mk of extra/bme680,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/752,https://github.com/bastianhjaeger,1,https://github.com/SuperHouse/esp-open-rtos/pull/752,,,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,755,2020-06-18T10:00:05Z,2020-06-19T11:46:41Z,2020-06-19T11:46:41Z,MERGED,True,16,4,2,https://github.com/colesnicov,Support for TTF font,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/755,https://github.com/colesnicov,1,https://github.com/SuperHouse/esp-open-rtos/pull/755,"Hello. I needed TrueType font support. Unfortunately, the library does not allow the use of TTF font?
I made some updates that made it possible for me ...
However, it has bugs. For larger font sizes, it may be fine, but small font sizes sometimes appear distorted.
I don't know if you would like to catch up .. TTF font support could be useful ..","Hello. I needed TrueType font support. Unfortunately, the library does not allow the use of TTF font?
I made some updates that made it possible for me ...
However, it has bugs. For larger font sizes, it may be fine, but small font sizes sometimes appear distorted.
I don't know if you would like to catch up .. TTF font support could be useful ..",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,760,2020-08-16T11:30:15Z,2020-08-17T05:24:23Z,2020-08-18T22:56:08Z,MERGED,True,3,0,1,https://github.com/mjkillough,Fix full on/off in pca9685.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/760,https://github.com/mjkillough,1,https://github.com/SuperHouse/esp-open-rtos/pull/760,"It's currently not possible to toggle between full off and full on, as
switching to full on leaves the full off control bit set. The full off
control bit takes precedence according to the datasheet, which means the
signal remains off. (See datasheet page 21 for register definitions and
page 24 for information about precedence).
The 'normal' branch does correctly clear full off/full on, as it writes
0s to the LEDn_ON registers unconditionally and writes 0 to the control
bit in LEDn_OFF.","It's currently not possible to toggle between full off and full on, as
switching to full on leaves the full off control bit set. The full off
control bit takes precedence according to the datasheet, which means the
signal remains off. (See datasheet page 21 for register definitions and
page 24 for information about precedence).
The 'normal' branch does correctly clear full off/full on, as it writes
0s to the LEDn_ON registers unconditionally and writes 0 to the control
bit in LEDn_OFF.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,760,2020-08-16T11:30:15Z,2020-08-17T05:24:23Z,2020-08-18T22:56:08Z,MERGED,True,3,0,1,https://github.com/mjkillough,Fix full on/off in pca9685.,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/760,https://github.com/UncleRus,2,https://github.com/SuperHouse/esp-open-rtos/pull/760#issuecomment-674662500,"It's currently not possible to toggle between full off and full on, as
switching to full on leaves the full off control bit set. The full off
control bit takes precedence according to the datasheet, which means the
signal remains off. (See datasheet page 21 for register definitions and
page 24 for information about precedence).
The 'normal' branch does correctly clear full off/full on, as it writes
0s to the LEDn_ON registers unconditionally and writes 0 to the control
bit in LEDn_OFF.",Thank you!,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,765,2020-11-27T01:12:29Z,,2020-12-02T02:42:15Z,OPEN,False,161,1,5,https://github.com/trentrand,Add support for 8x8 bitmap drawing with MAX7219 driver,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/765,https://github.com/trentrand,1,https://github.com/SuperHouse/esp-open-rtos/pull/765,"The MAX7219 driver has been extended to add support for bitmap drawing
on an 8-by-8 LED matrix panel. Consumers can specify the targeted chip,
which corresponds to a LED matrix panel, and provide a 64-bit image
buffer specifying the pixels which should illuminate.
The provided example loops a 0-9 digit sequence across a 4 panel 32x8 LED matrix.","The MAX7219 driver has been extended to add support for bitmap drawing
on an 8-by-8 LED matrix panel. Consumers can specify the targeted chip,
which corresponds to a LED matrix panel, and provide a 64-bit image
buffer specifying the pixels which should illuminate.
The provided example loops a 0-9 digit sequence across a 4 panel 32x8 LED matrix.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,765,2020-11-27T01:12:29Z,,2020-12-02T02:42:15Z,OPEN,False,161,1,5,https://github.com/trentrand,Add support for 8x8 bitmap drawing with MAX7219 driver,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/765,https://github.com/trentrand,2,https://github.com/SuperHouse/esp-open-rtos/pull/765#issuecomment-736951406,"The MAX7219 driver has been extended to add support for bitmap drawing
on an 8-by-8 LED matrix panel. Consumers can specify the targeted chip,
which corresponds to a LED matrix panel, and provide a 64-bit image
buffer specifying the pixels which should illuminate.
The provided example loops a 0-9 digit sequence across a 4 panel 32x8 LED matrix.",Hey @UncleRus 👋🏻  Anything I could do to help get this merged?,True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,768,2021-02-13T18:22:34Z,,2021-02-13T18:22:34Z,OPEN,False,6,6,4,https://github.com/aleroot,Fix WiFi SSID long 32 gets wrongly truncated by one,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/768,https://github.com/aleroot,1,https://github.com/SuperHouse/esp-open-rtos/pull/768,"The maximum Wi-Fi SSID length is 32 characters, but if I try to connect to a network name which is exactly 32 characters long the last character gets truncated, eg: SSID: 533C Hyperoptic 1Gb Fibre 2.4Ghz gets truncated to 533C Hyperoptic 1Gb Fibre 2.4Gh since the SSID field in the structs of this project is defined as an array of size 32 but since it is a null terminated string, it should be defined as size 33...
Fix wifi SSID length to 33 since the maximum chars for SSID is 32 but the string is null terminated so array size must be 33.
I have noticed this wrong behaviour using the esp_haa and reported in their forum: RavenSystem/esp-homekit-devices#1337 but it is not their fault...
Attached you can find my patch.","The maximum Wi-Fi SSID length is 32 characters, but if I try to connect to a network name which is exactly 32 characters long the last character gets truncated, eg: SSID: 533C Hyperoptic 1Gb Fibre 2.4Ghz gets truncated to 533C Hyperoptic 1Gb Fibre 2.4Gh since the SSID field in the structs of this project is defined as an array of size 32 but since it is a null terminated string, it should be defined as size 33...
Fix wifi SSID length to 33 since the maximum chars for SSID is 32 but the string is null terminated so array size must be 33.
I have noticed this wrong behaviour using the esp_haa and reported in their forum: RavenSystem/esp-homekit-devices#1337 but it is not their fault...
Attached you can find my patch.",True,{}
SuperHouse/esp-open-rtos,https://github.com/SuperHouse/esp-open-rtos,772,2021-05-05T07:51:19Z,,2021-05-05T07:51:19Z,OPEN,False,70,9,2,https://github.com/complynx,I2S ws2812 color profiles,1,[],https://github.com/SuperHouse/esp-open-rtos/pull/772,https://github.com/complynx,1,https://github.com/SuperHouse/esp-open-rtos/pull/772,"Added color profiles to make for easy changing of those. Default color profile is GRB.
Also added parameter for making white-first 4-channel color profiles.","Added color profiles to make for easy changing of those. Default color profile is GRB.
Also added parameter for making white-first 4-channel color profiles.",True,{}
