OpenRC/openrc,https://github.com/OpenRC/openrc,82,2016-03-04T02:32:55Z,2016-03-25T21:04:12Z,2016-03-25T23:44:15Z,CLOSED,False,6,3,4,https://github.com/jsbronder,librc: sh:  respect alternative INITDIR,1,[],https://github.com/OpenRC/openrc/pull/82,https://github.com/jsbronder,1,https://github.com/OpenRC/openrc/pull/82,"Remove hard-coded directory name for INITDIR, which was partially
respected by the build system but was being ignored at runtime.
Note that I didn't go through and mess with any of the documentation
where 'init.d' was currently referenced as they didn't have any SED rules
similar to the compiled/generated code.  I can do that if necessary.
Tested with /etc/openrc.d under Linux.","Remove hard-coded directory name for INITDIR, which was partially
respected by the build system but was being ignored at runtime.
Note that I didn't go through and mess with any of the documentation
where 'init.d' was currently referenced as they didn't have any SED rules
similar to the compiled/generated code.  I can do that if necessary.
Tested with /etc/openrc.d under Linux.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,82,2016-03-04T02:32:55Z,2016-03-25T21:04:12Z,2016-03-25T23:44:15Z,CLOSED,False,6,3,4,https://github.com/jsbronder,librc: sh:  respect alternative INITDIR,1,[],https://github.com/OpenRC/openrc/pull/82,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/82#issuecomment-194962033,"Remove hard-coded directory name for INITDIR, which was partially
respected by the build system but was being ignored at runtime.
Note that I didn't go through and mess with any of the documentation
where 'init.d' was currently referenced as they didn't have any SED rules
similar to the compiled/generated code.  I can do that if necessary.
Tested with /etc/openrc.d under Linux.","@jsbronder
At first look, this seems to break RC_CONFDIR.
If someone defines RC_INITDIR to be /etc1/init.d, RC_CONFDIR should be /etc1/conf.d.
Instead of replacing @SYSCONFDIR@/init.d with @INITDIR@, I recommend replacing init.d with @INITDIR@ and requiring it to be in @SYSCONFDIR@.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,82,2016-03-04T02:32:55Z,2016-03-25T21:04:12Z,2016-03-25T23:44:15Z,CLOSED,False,6,3,4,https://github.com/jsbronder,librc: sh:  respect alternative INITDIR,1,[],https://github.com/OpenRC/openrc/pull/82,https://github.com/rindeal,3,https://github.com/OpenRC/openrc/pull/82#issuecomment-195031785,"Remove hard-coded directory name for INITDIR, which was partially
respected by the build system but was being ignored at runtime.
Note that I didn't go through and mess with any of the documentation
where 'init.d' was currently referenced as they didn't have any SED rules
similar to the compiled/generated code.  I can do that if necessary.
Tested with /etc/openrc.d under Linux.","If conf.d is bound to init.d, but init.d is not bound to SYSCONFDIR, then the config should look like this:
INITDIR=""/what/ever""
CONFDIR=""$( dirname ""${INITDIR}"" )/conf.d""",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,82,2016-03-04T02:32:55Z,2016-03-25T21:04:12Z,2016-03-25T23:44:15Z,CLOSED,False,6,3,4,https://github.com/jsbronder,librc: sh:  respect alternative INITDIR,1,[],https://github.com/OpenRC/openrc/pull/82,https://github.com/jsbronder,4,https://github.com/OpenRC/openrc/pull/82#issuecomment-196389745,"Remove hard-coded directory name for INITDIR, which was partially
respected by the build system but was being ignored at runtime.
Note that I didn't go through and mess with any of the documentation
where 'init.d' was currently referenced as they didn't have any SED rules
similar to the compiled/generated code.  I can do that if necessary.
Tested with /etc/openrc.d under Linux.","@williamh So, prior to this patch, someone could set INITDIR to anything that wasn't '/etc/init.d' and end up with a broken system.  How far would you like me to go in fixing this?  I assumed that a small patch addressing one issue at a time would be preferable.
If not, then I'll probably have to make some more significant edits to both INITDIR and CONFDIR to make them both work in every scenario.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,82,2016-03-04T02:32:55Z,2016-03-25T21:04:12Z,2016-03-25T23:44:15Z,CLOSED,False,6,3,4,https://github.com/jsbronder,librc: sh:  respect alternative INITDIR,1,[],https://github.com/OpenRC/openrc/pull/82,https://github.com/dwfreed,5,https://github.com/OpenRC/openrc/pull/82#issuecomment-201448808,"Remove hard-coded directory name for INITDIR, which was partially
respected by the build system but was being ignored at runtime.
Note that I didn't go through and mess with any of the documentation
where 'init.d' was currently referenced as they didn't have any SED rules
similar to the compiled/generated code.  I can do that if necessary.
Tested with /etc/openrc.d under Linux.","No they couldn't, because prior to this patch, INITDIR wasn't a thing; RC_INITDIR was always SYSCONFDIR/init.d, and thus RC_CONFDIR was always SYSCONFDIR/conf.d.  Whatever you call them, they should always reside in SYSCONFDIR, because that's what SYSCONFDIR means.  If you want to call init.d something else, like bananas.d or whatever, we'd probably accept a patch that makes the dir name configurable (though if you're doing INITDIR, you might as well do CONFDIR while you're at it).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,82,2016-03-04T02:32:55Z,2016-03-25T21:04:12Z,2016-03-25T23:44:15Z,CLOSED,False,6,3,4,https://github.com/jsbronder,librc: sh:  respect alternative INITDIR,1,[],https://github.com/OpenRC/openrc/pull/82,https://github.com/jsbronder,6,https://github.com/OpenRC/openrc/pull/82#issuecomment-201501388,"Remove hard-coded directory name for INITDIR, which was partially
respected by the build system but was being ignored at runtime.
Note that I didn't go through and mess with any of the documentation
where 'init.d' was currently referenced as they didn't have any SED rules
similar to the compiled/generated code.  I can do that if necessary.
Tested with /etc/openrc.d under Linux.","@dwfreed See https://github.com/OpenRC/openrc/blob/master/mk/sys.mk#L34
Anyways, it sounds like what you guys would like is for me to make sure both initdir and confdir are both inside of SYSCONFDIR but to allow the names 'init.d' and 'conf.d' to be changed.  I'll go to work on that, but please let me know if I've misunderstood.
Thanks all,",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,82,2016-03-04T02:32:55Z,2016-03-25T21:04:12Z,2016-03-25T23:44:15Z,CLOSED,False,6,3,4,https://github.com/jsbronder,librc: sh:  respect alternative INITDIR,1,[],https://github.com/OpenRC/openrc/pull/82,https://github.com/dwfreed,7,https://github.com/OpenRC/openrc/pull/82#issuecomment-201591229,"Remove hard-coded directory name for INITDIR, which was partially
respected by the build system but was being ignored at runtime.
Note that I didn't go through and mess with any of the documentation
where 'init.d' was currently referenced as they didn't have any SED rules
similar to the compiled/generated code.  I can do that if necessary.
Tested with /etc/openrc.d under Linux.","Oh, that's cute; setting that is a great way to completely break the build, because it has no influence on RC_INITDIR, which is what is actually used at runtime to locate your init dir.  And yes, you're understanding correctly :).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/floppym,1,https://github.com/OpenRC/openrc/pull/83,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.","This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/83#issuecomment-195795079,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.",LGTM,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/floppym,3,https://github.com/OpenRC/openrc/pull/83#issuecomment-195798158,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.",I pushed a small fix to the first commit.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/robbat2,4,https://github.com/OpenRC/openrc/pull/83#issuecomment-195836404,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.","Conditionally I accept it; there's one change needed:
You must be able to handle arguments that have whitespace in the filename.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/floppym,5,https://github.com/OpenRC/openrc/pull/83#issuecomment-195849612,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.","Heh, show me a reasonable way to do that with portable sh syntax and I'll get right on that.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/robbat2,6,https://github.com/OpenRC/openrc/pull/83#issuecomment-196109106,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.","Doing that with portable sh:
Method 1:
Use \0 as a seperator rather than a space, adjusting IFS when you want to read that variable.
Method 2:
Keep them in arguments, rather than shifting them out; then loop over arguments:
# Options pass, replaces $# -gt 0
FILEMODE=0
for opt in ""$@"" ; do
  if [ ""${f:0:2}"" != ""--"" ]; 
    FILEMODE=1
    continue
  fi
  # existing case statement, with $opt instead of $1
  # drop the shift
done
# Arguments pass
if [ $FILEMODE -eq 1 ]; then 
  for f in ""$@"" ; do
    [ ""${f:0:2}"" == ""--"" ] && continue
    process ""$f""
  done
  exit # ...
fi",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/floppym,7,https://github.com/OpenRC/openrc/pull/83#issuecomment-196110592,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.",Thanks. I think using \0 as a separator might break some shells. I can probably make your second method work.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/floppym,8,https://github.com/OpenRC/openrc/pull/83#issuecomment-196130530,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.","In the case of having no files specified on the command line, we need to generate a sorted union of filenames from /etc/tmpfiles.d/*.conf, /run/tmpfiles.d/*.conf and /usr/lib/tmpfiles.d/*.conf. I cannot see any way to accomplish this in POSIX sh while also preserving whitespace.
Your idea of using \0 as a delimiter simply does not work; both bash and dash eat any \0 characters that are stored in variables.
tmpfiles.sh is currently broken when filesnames have whitespace, so my patchset does not introduce a regression here. If you want to fix it, please undertake it as a separate issue.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,83,2016-03-12T19:17:23Z,2016-07-25T20:54:33Z,2016-07-25T20:54:33Z,CLOSED,False,47,29,1,https://github.com/floppym,tmpfiles: Accept filenames as command line arguments,3,[],https://github.com/OpenRC/openrc/pull/83,https://github.com/dwfreed,9,https://github.com/OpenRC/openrc/pull/83#issuecomment-221662880,"This brings us closer to the behavior of systemd-tmpfiles.
My end goal is to be able to call this via an eclass function in pkg_postinst in ebuilds.",@williamh any objections to merging this?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,84,2016-03-16T14:31:03Z,2016-04-11T16:18:06Z,2016-04-11T16:18:06Z,CLOSED,False,2,2,1,https://github.com/floppym,start-stop-daemon: Allow group read/write when creating output files,1,[],https://github.com/OpenRC/openrc/pull/84,https://github.com/floppym,1,https://github.com/OpenRC/openrc/pull/84,"This allows for better interaction with inherited ACL entries.
X-Gentoo-Bug: 577362
X-Gentoo-Bug-URL: https://bugs.gentoo.org/577362","This allows for better interaction with inherited ACL entries.
X-Gentoo-Bug: 577362
X-Gentoo-Bug-URL: https://bugs.gentoo.org/577362",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,87,2016-05-25T17:26:24Z,2016-07-26T15:54:41Z,2016-07-26T15:54:41Z,CLOSED,False,46,2,1,https://github.com/vaeth,tmpfiles.sh: Support lines with q Q h H,2,[],https://github.com/OpenRC/openrc/pull/87,https://github.com/vaeth,1,https://github.com/OpenRC/openrc/pull/87,"btrfs support is not implemented yet (for q Q v), but at least tmpfiles.sh
no longer chokes about tmpfiles.d lines of recent systemd versions","btrfs support is not implemented yet (for q Q v), but at least tmpfiles.sh
no longer chokes about tmpfiles.d lines of recent systemd versions",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,87,2016-05-25T17:26:24Z,2016-07-26T15:54:41Z,2016-07-26T15:54:41Z,CLOSED,False,46,2,1,https://github.com/vaeth,tmpfiles.sh: Support lines with q Q h H,2,[],https://github.com/OpenRC/openrc/pull/87,https://github.com/vaeth,2,https://github.com/OpenRC/openrc/pull/87#issuecomment-221702010,"btrfs support is not implemented yet (for q Q v), but at least tmpfiles.sh
no longer chokes about tmpfiles.d lines of recent systemd versions","You should not use the mode field here

If in doubt, I would choose more error tolerance. However, perhaps tacit ignoring is really better in case of an empty argument field: It might mean that the user wants an ""empty"" change, i.e. none.

Also, you need to check if the argument starts with +/-/=, and prefix it with + if it does not.

You are right: To my surprise, chattr chokes about missing +.
The dryrun_or_real was simply missing and would have broken --dry-run",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,88,2016-06-02T10:15:07Z,2016-07-13T22:15:44Z,2016-07-13T22:15:44Z,CLOSED,False,1,0,1,https://github.com/jaromil,documentation for x suffix in libeinfo functions,1,[],https://github.com/OpenRC/openrc/pull/88,https://github.com/jaromil,1,https://github.com/OpenRC/openrc/pull/88,"There are functions with x suffix, but documentation doesn't explains why.","There are functions with x suffix, but documentation doesn't explains why.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,89,2016-06-29T12:31:33Z,2016-07-13T22:03:07Z,2016-07-13T22:03:07Z,CLOSED,False,3,2,2,https://github.com/hasufell,Build: fix hardcoded pkg-config invocation,1,[],https://github.com/OpenRC/openrc/pull/89,https://github.com/hasufell,1,https://github.com/OpenRC/openrc/pull/89,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/pkgdemon,1,https://github.com/OpenRC/openrc/pull/91,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/91#issuecomment-233193931,,Why add a separate modules service for FreeBSD instead of making the current  modules service able to  run on both FreeBSD and Linux?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/91#issuecomment-233198356,,"I recommend starting with the current etc/init.d/modules, renaming start() to Linux_modules(), adding FreeBSD_modules() which would be the start function in your new service, then having start() call the appropriate function based on $RC_UNAME.",True,{'THUMBS_UP': ['https://github.com/dwfreed']}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/91#issuecomment-233199834,,"Also, I'm fine with the modules target in conf.d/Makefile at this point. We do similar things with network and staticroute.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/dwfreed,5,https://github.com/OpenRC/openrc/pull/91#issuecomment-233199880,,"My issue is with the way he implemented the target, not with the target's existence; compare it with the network target.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/williamh,6,https://github.com/OpenRC/openrc/pull/91#issuecomment-233199958,,"The other way to do the conf.d modules file could be to add comments explaining that on FreeBSD the only variable that works is modules, that way we would just have one conf.d/modules file. But, would that end up being confusing for users?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/williamh,7,https://github.com/OpenRC/openrc/pull/91#issuecomment-233200794,,"The network target combines two files -- network.in and network.{sfx} to create network.
A better comparison is the staticroute target.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/dwfreed,8,https://github.com/OpenRC/openrc/pull/91#issuecomment-233200928,,"Which has the same problem.  You're repeating yourself; the way network does it is ideal, and would work the same with staticroute and modules.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/williamh,9,https://github.com/OpenRC/openrc/pull/91#issuecomment-233202226,,"After chatting on irc, I understand what @dwfreed is talking about.
The rule in the modules target should be:
cp $^ $@",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,91,2016-07-17T16:56:00Z,2016-07-18T22:23:00Z,2016-07-18T22:23:00Z,CLOSED,False,31,2,6,https://github.com/pkgdemon,Add modules specific for FreeBSD.  Keep modules specific for Linux.,1,[],https://github.com/OpenRC/openrc/pull/91,https://github.com/williamh,10,https://github.com/OpenRC/openrc/pull/91#issuecomment-233474630,,"@dwfreed, we can talk about removing the counting as a separate change from this. I am quite cautious about it because it will be a user-facing change that I do not see the reason for.
@demonpkg, Thanks for the code for loading modules on FreeBSD. I'm not a FreeBSD user myself, so any help in that area is greatly appreciated. I hope you will continue to contribute. :-)
I used your code for FreeBSD, and came up with an approach that I think fits the design of OpenRC better. Since the service scripts can detect which operating system they are running on by testing against $RC_UNAME, There is no reason to have separate modules service scripts or configuration files for Linux and FreeBSD.
I reworked the current modules service to support them both.
This pull request will close when I commit my change to master.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,92,2016-07-22T21:24:56Z,2016-07-25T18:53:29Z,2016-07-25T18:53:29Z,CLOSED,False,1,1,1,https://github.com/jirutka,s6-guide: fix typo,1,[],https://github.com/OpenRC/openrc/pull/92,https://github.com/jirutka,1,https://github.com/OpenRC/openrc/pull/92,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,96,2016-08-30T17:53:31Z,2016-08-30T21:17:18Z,2016-08-30T21:17:18Z,MERGED,True,1,1,1,https://github.com/vaeth,Fix typo in RC_UNAME check of modules-load,1,[],https://github.com/OpenRC/openrc/pull/96,https://github.com/vaeth,1,https://github.com/OpenRC/openrc/pull/96,"The $RC_UNAME ""Linux"" had been misspelled as ""linux"".
As a consequence, entries in e.g. /etc/modules-load.d failed to
load any module succesfully under Linux(!)","The $RC_UNAME ""Linux"" had been misspelled as ""linux"".
As a consequence, entries in e.g. /etc/modules-load.d failed to
load any module succesfully under Linux(!)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,97,2016-09-02T12:10:18Z,2016-09-09T00:28:25Z,2016-09-09T00:28:25Z,CLOSED,False,70,52,1,https://github.com/fricklerhandwerk,Format code blocks and variable/path notations,1,[],https://github.com/OpenRC/openrc/pull/97,https://github.com/fricklerhandwerk,1,https://github.com/OpenRC/openrc/pull/97,"Added markdown backticks for commands, variable names and path as well es indented code blocks for better readability.","Added markdown backticks for commands, variable names and path as well es indented code blocks for better readability.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,97,2016-09-02T12:10:18Z,2016-09-09T00:28:25Z,2016-09-09T00:28:25Z,CLOSED,False,70,52,1,https://github.com/fricklerhandwerk,Format code blocks and variable/path notations,1,[],https://github.com/OpenRC/openrc/pull/97,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/97#issuecomment-244478514,"Added markdown backticks for commands, variable names and path as well es indented code blocks for better readability.","In the commit message, please use the present tense, so ""add"" instead of ""added"". Also, I believe there is a way to format code in markdown, so it might be better to use that instead of tabs.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,97,2016-09-02T12:10:18Z,2016-09-09T00:28:25Z,2016-09-09T00:28:25Z,CLOSED,False,70,52,1,https://github.com/fricklerhandwerk,Format code blocks and variable/path notations,1,[],https://github.com/OpenRC/openrc/pull/97,https://github.com/dwfreed,3,https://github.com/OpenRC/openrc/pull/97#issuecomment-244526052,"Added markdown backticks for commands, variable names and path as well es indented code blocks for better readability.","Start with 3 backticks (the character to the left of 1 on a standard US QWERTY keyboard), optionally specify a language, newline, code, newline, end with 3 backticks.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,97,2016-09-02T12:10:18Z,2016-09-09T00:28:25Z,2016-09-09T00:28:25Z,CLOSED,False,70,52,1,https://github.com/fricklerhandwerk,Format code blocks and variable/path notations,1,[],https://github.com/OpenRC/openrc/pull/97,https://github.com/fricklerhandwerk,4,https://github.com/OpenRC/openrc/pull/97#issuecomment-244533291,"Added markdown backticks for commands, variable names and path as well es indented code blocks for better readability.","@williamh I'm aware of that, I just thought indented code is better distinguished in plain text than the fenced variant. But I can change that of course. Or are tabs the problem? Because indentation would also work with 4 spaces.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,100,2016-10-11T10:55:59Z,2016-10-11T15:30:49Z,2016-10-11T15:30:49Z,CLOSED,False,1,1,1,https://github.com/swegener,do_service: Initialize idx to 0,1,[],https://github.com/OpenRC/openrc/pull/100,https://github.com/swegener,1,https://github.com/OpenRC/openrc/pull/100,"If index is not explicitly specified for service_started_daemon, it will
look for daemons by random index.","If index is not explicitly specified for service_started_daemon, it will
look for daemons by random index.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,101,2016-10-14T03:09:47Z,2016-10-16T16:13:00Z,2016-10-16T16:13:00Z,CLOSED,False,5,0,1,https://github.com/pkgdemon,Find wireless interface for FreeBSD,3,[],https://github.com/OpenRC/openrc/pull/101,https://github.com/pkgdemon,1,https://github.com/OpenRC/openrc/pull/101,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,101,2016-10-14T03:09:47Z,2016-10-16T16:13:00Z,2016-10-16T16:13:00Z,CLOSED,False,5,0,1,https://github.com/pkgdemon,Find wireless interface for FreeBSD,3,[],https://github.com/OpenRC/openrc/pull/101,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/101#issuecomment-253975691,,"I don't see a need to change this file, as it's not used in any way as far as I know.  These scripts just serve as example initscripts.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,101,2016-10-14T03:09:47Z,2016-10-16T16:13:00Z,2016-10-16T16:13:00Z,CLOSED,False,5,0,1,https://github.com/pkgdemon,Find wireless interface for FreeBSD,3,[],https://github.com/OpenRC/openrc/pull/101,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/101#issuecomment-254006374,,"@pkgdemon If this is a better way of detecting a wireless interface for FreeBSD, I'm willing to consider merging it because people might use it as an example.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,101,2016-10-14T03:09:47Z,2016-10-16T16:13:00Z,2016-10-16T16:13:00Z,CLOSED,False,5,0,1,https://github.com/pkgdemon,Find wireless interface for FreeBSD,3,[],https://github.com/OpenRC/openrc/pull/101,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/101#issuecomment-254007046,,Please fix the script to use $() instead of backticks. This is the more common way  of handling command substitution.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,101,2016-10-14T03:09:47Z,2016-10-16T16:13:00Z,2016-10-16T16:13:00Z,CLOSED,False,5,0,1,https://github.com/pkgdemon,Find wireless interface for FreeBSD,3,[],https://github.com/OpenRC/openrc/pull/101,https://github.com/pkgdemon,5,https://github.com/OpenRC/openrc/pull/101#issuecomment-254011289,,The sysctl -b net.wlan.devices method is the only way I know of to detect wireless on FreeBSD.  The /dev/net/* method does not work on FreeBSD as net does not exist under /dev/.  I will look at removing the ` backticks to verify I can still make it work.  Thanks.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,101,2016-10-14T03:09:47Z,2016-10-16T16:13:00Z,2016-10-16T16:13:00Z,CLOSED,False,5,0,1,https://github.com/pkgdemon,Find wireless interface for FreeBSD,3,[],https://github.com/OpenRC/openrc/pull/101,https://github.com/pkgdemon,6,https://github.com/OpenRC/openrc/pull/101#issuecomment-254018250,,The changes have been made to remove the backticks.  I have verified it works.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,101,2016-10-14T03:09:47Z,2016-10-16T16:13:00Z,2016-10-16T16:13:00Z,CLOSED,False,5,0,1,https://github.com/pkgdemon,Find wireless interface for FreeBSD,3,[],https://github.com/OpenRC/openrc/pull/101,https://github.com/pkgdemon,7,https://github.com/OpenRC/openrc/pull/101#issuecomment-254046570,,"@dwfreed I fixed, and also moved the other ) after null to match the other cases.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,102,2016-10-24T17:46:10Z,2016-12-17T23:32:54Z,2016-12-17T23:32:54Z,CLOSED,False,1,1,1,https://github.com/floppym,sh/init.sh.Linux.in: skip /proc sanity test if md5sum is missing,1,[],https://github.com/OpenRC/openrc/pull/102,https://github.com/floppym,1,https://github.com/OpenRC/openrc/pull/102,Bug: https://bugs.gentoo.org/594534#c7,Bug: https://bugs.gentoo.org/594534#c7,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,102,2016-10-24T17:46:10Z,2016-12-17T23:32:54Z,2016-12-17T23:32:54Z,CLOSED,False,1,1,1,https://github.com/floppym,sh/init.sh.Linux.in: skip /proc sanity test if md5sum is missing,1,[],https://github.com/OpenRC/openrc/pull/102,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/102#issuecomment-255813301,Bug: https://bugs.gentoo.org/594534#c7,meh,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,102,2016-10-24T17:46:10Z,2016-12-17T23:32:54Z,2016-12-17T23:32:54Z,CLOSED,False,1,1,1,https://github.com/floppym,sh/init.sh.Linux.in: skip /proc sanity test if md5sum is missing,1,[],https://github.com/OpenRC/openrc/pull/102,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/102#issuecomment-255840725,Bug: https://bugs.gentoo.org/594534#c7,"If I have my choice, I would rather get rid of the /proc sanity test and just try to mount /proc if it isn't mounted.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,102,2016-10-24T17:46:10Z,2016-12-17T23:32:54Z,2016-12-17T23:32:54Z,CLOSED,False,1,1,1,https://github.com/floppym,sh/init.sh.Linux.in: skip /proc sanity test if md5sum is missing,1,[],https://github.com/OpenRC/openrc/pull/102,https://github.com/robbat2,4,https://github.com/OpenRC/openrc/pull/102#issuecomment-267747691,Bug: https://bugs.gentoo.org/594534#c7,"As the person that wrote this code, and cares about the case, please merge floppym's PR, and don't drop the /proc check.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,102,2016-10-24T17:46:10Z,2016-12-17T23:32:54Z,2016-12-17T23:32:54Z,CLOSED,False,1,1,1,https://github.com/floppym,sh/init.sh.Linux.in: skip /proc sanity test if md5sum is missing,1,[],https://github.com/OpenRC/openrc/pull/102,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/102#issuecomment-267778911,Bug: https://bugs.gentoo.org/594534#c7,"Here's where I am on this p/r. We can keep the /proc check, but I question the value of the separate check for md5sum. The only time md5sum is not accessible is if /usr is separate and not mounted.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,102,2016-10-24T17:46:10Z,2016-12-17T23:32:54Z,2016-12-17T23:32:54Z,CLOSED,False,1,1,1,https://github.com/floppym,sh/init.sh.Linux.in: skip /proc sanity test if md5sum is missing,1,[],https://github.com/OpenRC/openrc/pull/102,https://github.com/floppym,6,https://github.com/OpenRC/openrc/pull/102#issuecomment-267792242,Bug: https://bugs.gentoo.org/594534#c7,"This is a simple patch to keep OpenRC working without /usr mounted. If you want to actively break that by refusing patches, that's up to you.
Merge this or close it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,102,2016-10-24T17:46:10Z,2016-12-17T23:32:54Z,2016-12-17T23:32:54Z,CLOSED,False,1,1,1,https://github.com/floppym,sh/init.sh.Linux.in: skip /proc sanity test if md5sum is missing,1,[],https://github.com/OpenRC/openrc/pull/102,https://github.com/dwfreed,7,https://github.com/OpenRC/openrc/pull/102#issuecomment-267793869,Bug: https://bugs.gentoo.org/594534#c7,Merged my PR.  Thanks again for your patch.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/robbat2,1,https://github.com/OpenRC/openrc/pull/103,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/103#issuecomment-255880843,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org",Can we drop the explicit route while we're at it?  The kernel should be automatically adding that route already.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/robbat2,3,https://github.com/OpenRC/openrc/pull/103#issuecomment-255905208,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","Yes, we can drop it as well, if we're ok with it being just in the local routing table, rather than the main routing table.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/103#issuecomment-256076870,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org",@robbat2 @dwfreed Does it matter which routing table the loopback route is in? If not I'll remove the explicit route in a separate commit.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/robbat2,5,https://github.com/OpenRC/openrc/pull/103#issuecomment-256522533,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","@dwfreed
we need to check if it's safe to drop the explicit route on BSD.
On Linux it's safe because the implicit route has a much higher priority.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/dwfreed,6,https://github.com/OpenRC/openrc/pull/103#issuecomment-256524797,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","It should not, because more specific routes always take precedence over less specific routes (so an explicit 'default via ' doesn't take precedence over the 127/8 route for lo0)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/robbat2,7,https://github.com/OpenRC/openrc/pull/103#issuecomment-256795311,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","i'll rephrase my question: does BSD have any implicit route for loopback? If not, removing the explicit route is going to break some exotic loopback usage.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/williamh,8,https://github.com/OpenRC/openrc/pull/103#issuecomment-258221517,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org",I still need an update from the *bsd side. Thanks much.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/pkgdemon,9,https://github.com/OpenRC/openrc/pull/103#issuecomment-268247809,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","I fail to see how this change is going to affect the BSD's at all.  The BSD's do not use ip addr.  They would use this block which I see no changes to.
ifconfig lo 127.0.0.1 netmask 255.0.0.0
route add -net 127.0.0.0 netmask 255.0.0.0 gw 127.0.0.1",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/dwfreed,10,https://github.com/OpenRC/openrc/pull/103#issuecomment-268248359,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","@pkgdemon We're asking if we can drop the explicit route call in the BSD codepath too, and still have people that bind to things like 127.0.0.2, etc, work.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/pkgdemon,11,https://github.com/OpenRC/openrc/pull/103#issuecomment-268548598,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","I cannot speak for the other BSD distributions.
For FreeBSD 10.3, and higher if I start in single user mode to bypass /etc/rc:
ifconfig up lo0

lo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> metric 0 mtu 16384
        options=600003<RXCSUM,TXCSUM,RXCSUM_IPV6,TXCSUM_IPV6>
        inet6 ::1 prefixlen 128 
        inet6 fe80::1%lo0 prefixlen 64 scopeid 0x2 
        nd6 options=21<PERFORMNUD,AUTO_LINKLOCAL>

You can see it adds an ipv6 route but not an ipv4 route:
Internet6:
Destination        Gateway            Flags     Netif Expire
localhost          link#2             UH          lo0
fe80::feaa:14ff:fe link#1             UHS         lo0
fe80::%lo0/64      link#2             U           lo0
fe80::1%lo0        link#2             UHS         lo0

Issuing an ipv4 address by doing the following:
ifconfig lo0 127.0.0.1 netmask 255.0.0.0

Will add this route:
Internet:
Destination        Gateway            Flags     Netif Expire
localhost          link#2             UH          lo0

This is actually invalid for FreeBSD:
route add -net 127.0.0.0 netmask 255.0.0.0 gw 127.0.0.1

It has to be:
route add -net 127.0.0.0/8 127.0.0.1

This will add:
Internet:
Destination        Gateway            Flags     Netif Expire
yournet          localhost             UGS          lo0

I could be mistaken but I do not think route add -net 127.0.0.0 netmask 255.0.0.0 gw 127.0.0.1 in the case of FreeBSD 10.3+ is needed at all as it does not work.  The inet6 routing is added just by bringing the interface up.  The inet routing is added just by issuing ifconfig lo 127.0.0.1 netmask 255.0.0.0 alone.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/dwfreed,12,https://github.com/OpenRC/openrc/pull/103#issuecomment-268569079,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","@pkgdemon Alright, thanks, I'll just drop it there, too, then.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,103,2016-10-24T21:23:49Z,2016-12-21T16:36:20Z,2016-12-22T05:47:11Z,CLOSED,False,2,2,1,https://github.com/robbat2,init.d/loopback: drop scope on loopback,1,[],https://github.com/OpenRC/openrc/pull/103,https://github.com/dwfreed,13,https://github.com/OpenRC/openrc/pull/103#issuecomment-268569167,"Busybox does not support the 'scope' argument on 'ip address add' or 'ip
route add', this is documented in BUSYBOX.md, but is no longer actually
needed, as the kernel does get it right without manual specification,
and the ifconfig variant already relies on the kernel to get it right.
X-Gentoo-Bug: 487208
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=487208
Signed-off-by: Robin H. Johnson robbat2@gentoo.org",(Closing PR as Robin's changes have been merged),True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,105,2016-12-02T11:24:15Z,2016-12-02T16:58:00Z,2016-12-03T20:00:47Z,CLOSED,False,1,1,1,https://github.com/AndCycle,fix manual typo,1,[],https://github.com/OpenRC/openrc/pull/105,https://github.com/AndCycle,1,https://github.com/OpenRC/openrc/pull/105,this is just a really minor fix which I found when trying to figure out what's s6 is.,this is just a really minor fix which I found when trying to figure out what's s6 is.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,106,2016-12-15T23:24:56Z,2016-12-17T22:55:41Z,2016-12-17T22:55:41Z,MERGED,True,23,4,1,https://github.com/robbat2,sh/openrc-run.sh: expose default start/stop/status,1,[],https://github.com/OpenRC/openrc/pull/106,https://github.com/robbat2,1,https://github.com/OpenRC/openrc/pull/106,"Supervisor setups break easily when start/stop/status functions are not
default.
Applications that write multiple PIDs to a pidfile (eg HAProxy as
described in bug 601540), can also benefit from being able to call the
default start/stop/status with modified environment variables.
Expose the default start/stop/status functions as
openrc_default_start/stop/status, and use them for the defaults
start/stop/status.
Trivial usage example:
  stop()
  {
    t=$(mktemp)
    for pid in $(cat $pidfile) ; do
      echo $pid >$t
      pidfile=$t openrc_default_stop
    done
    rm -f $t
  }

X-Gentoo-Bug: 601540
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","Supervisor setups break easily when start/stop/status functions are not
default.
Applications that write multiple PIDs to a pidfile (eg HAProxy as
described in bug 601540), can also benefit from being able to call the
default start/stop/status with modified environment variables.
Expose the default start/stop/status functions as
openrc_default_start/stop/status, and use them for the defaults
start/stop/status.
Trivial usage example:
  stop()
  {
    t=$(mktemp)
    for pid in $(cat $pidfile) ; do
      echo $pid >$t
      pidfile=$t openrc_default_stop
    done
    rm -f $t
  }

X-Gentoo-Bug: 601540
Signed-off-by: Robin H. Johnson robbat2@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,106,2016-12-15T23:24:56Z,2016-12-17T22:55:41Z,2016-12-17T22:55:41Z,MERGED,True,23,4,1,https://github.com/robbat2,sh/openrc-run.sh: expose default start/stop/status,1,[],https://github.com/OpenRC/openrc/pull/106,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/106#issuecomment-267699035,"Supervisor setups break easily when start/stop/status functions are not
default.
Applications that write multiple PIDs to a pidfile (eg HAProxy as
described in bug 601540), can also benefit from being able to call the
default start/stop/status with modified environment variables.
Expose the default start/stop/status functions as
openrc_default_start/stop/status, and use them for the defaults
start/stop/status.
Trivial usage example:
  stop()
  {
    t=$(mktemp)
    for pid in $(cat $pidfile) ; do
      echo $pid >$t
      pidfile=$t openrc_default_stop
    done
    rm -f $t
  }

X-Gentoo-Bug: 601540
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","I like this, but I think we can do without the openrc_ prefix on the function names.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,106,2016-12-15T23:24:56Z,2016-12-17T22:55:41Z,2016-12-17T22:55:41Z,MERGED,True,23,4,1,https://github.com/robbat2,sh/openrc-run.sh: expose default start/stop/status,1,[],https://github.com/OpenRC/openrc/pull/106,https://github.com/robbat2,3,https://github.com/OpenRC/openrc/pull/106#issuecomment-267747404,"Supervisor setups break easily when start/stop/status functions are not
default.
Applications that write multiple PIDs to a pidfile (eg HAProxy as
described in bug 601540), can also benefit from being able to call the
default start/stop/status with modified environment variables.
Expose the default start/stop/status functions as
openrc_default_start/stop/status, and use them for the defaults
start/stop/status.
Trivial usage example:
  stop()
  {
    t=$(mktemp)
    for pid in $(cat $pidfile) ; do
      echo $pid >$t
      pidfile=$t openrc_default_stop
    done
    rm -f $t
  }

X-Gentoo-Bug: 601540
Signed-off-by: Robin H. Johnson robbat2@gentoo.org",Changed to default_ prefix instead of openrc_default_.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,106,2016-12-15T23:24:56Z,2016-12-17T22:55:41Z,2016-12-17T22:55:41Z,MERGED,True,23,4,1,https://github.com/robbat2,sh/openrc-run.sh: expose default start/stop/status,1,[],https://github.com/OpenRC/openrc/pull/106,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/106#issuecomment-267776293,"Supervisor setups break easily when start/stop/status functions are not
default.
Applications that write multiple PIDs to a pidfile (eg HAProxy as
described in bug 601540), can also benefit from being able to call the
default start/stop/status with modified environment variables.
Expose the default start/stop/status functions as
openrc_default_start/stop/status, and use them for the defaults
start/stop/status.
Trivial usage example:
  stop()
  {
    t=$(mktemp)
    for pid in $(cat $pidfile) ; do
      echo $pid >$t
      pidfile=$t openrc_default_stop
    done
    rm -f $t
  }

X-Gentoo-Bug: 601540
Signed-off-by: Robin H. Johnson robbat2@gentoo.org","Please add the X-Gentoo-Bug-URL line to your commit message. Also, if you want you can remove
Signed-Off-By since it really doesn't mean anything in OpenRC.
I understand that you prefer to have the gpg signatures preserved on your commits, so please let me know when you want this merged and rebase it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,107,2016-12-17T05:54:45Z,2016-12-17T18:35:59Z,2016-12-17T18:35:59Z,MERGED,True,1,1,1,https://github.com/asomers,Localmount shouldn't mount remote filesystems,1,[],https://github.com/OpenRC/openrc/pull/107,https://github.com/asomers,1,https://github.com/OpenRC/openrc/pull/107,"The /etc/init.d/localmount script has a syntax error that causes it to
attempt to mount remote filesystems, causing the boot to fail. The
script appends a ""no"" to each remote filesystem type, but it should only
be append the ""no"" to the beginning of the list.  This patch fixes
localmount on FreeBSD 12.0.  A review of the mount(8) manpage on Ubuntu
12.04 suggests that this patch is correct for Linux, too.
Downstream bug:
trueos/trueos-core#220","The /etc/init.d/localmount script has a syntax error that causes it to
attempt to mount remote filesystems, causing the boot to fail. The
script appends a ""no"" to each remote filesystem type, but it should only
be append the ""no"" to the beginning of the list.  This patch fixes
localmount on FreeBSD 12.0.  A review of the mount(8) manpage on Ubuntu
12.04 suggests that this patch is correct for Linux, too.
Downstream bug:
trueos/trueos-core#220",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,107,2016-12-17T05:54:45Z,2016-12-17T18:35:59Z,2016-12-17T18:35:59Z,MERGED,True,1,1,1,https://github.com/asomers,Localmount shouldn't mount remote filesystems,1,[],https://github.com/OpenRC/openrc/pull/107,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/107#issuecomment-267771568,"The /etc/init.d/localmount script has a syntax error that causes it to
attempt to mount remote filesystems, causing the boot to fail. The
script appends a ""no"" to each remote filesystem type, but it should only
be append the ""no"" to the beginning of the list.  This patch fixes
localmount on FreeBSD 12.0.  A review of the mount(8) manpage on Ubuntu
12.04 suggests that this patch is correct for Linux, too.
Downstream bug:
trueos/trueos-core#220",That is incredibly not intuitive...  I'll get this merged today.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,108,2016-12-17T20:08:47Z,2016-12-17T23:28:45Z,2016-12-17T23:29:11Z,MERGED,True,14,1,1,https://github.com/dwfreed,sh/init.sh.Linux.in: skip /proc test if no md5sum,1,[],https://github.com/OpenRC/openrc/pull/108,https://github.com/dwfreed,1,https://github.com/OpenRC/openrc/pull/108,"This will also warn users if md5sum is missing, which serves as a pretty
good indicator that /usr is not mounted.
Supercedes #102","This will also warn users if md5sum is missing, which serves as a pretty
good indicator that /usr is not mounted.
Supercedes #102",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,108,2016-12-17T20:08:47Z,2016-12-17T23:28:45Z,2016-12-17T23:29:11Z,MERGED,True,14,1,1,https://github.com/dwfreed,sh/init.sh.Linux.in: skip /proc test if no md5sum,1,[],https://github.com/OpenRC/openrc/pull/108,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/108#issuecomment-267786984,"This will also warn users if md5sum is missing, which serves as a pretty
good indicator that /usr is not mounted.
Supercedes #102","I wouldn't refer to coreutils in the message, because it could be a busybox system that doesn't have md5sum turned on.
Also, I'm wondering about the value of the else branch. Do we need to print out the message about /proc being already mounted?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,108,2016-12-17T20:08:47Z,2016-12-17T23:28:45Z,2016-12-17T23:29:11Z,MERGED,True,14,1,1,https://github.com/dwfreed,sh/init.sh.Linux.in: skip /proc test if no md5sum,1,[],https://github.com/OpenRC/openrc/pull/108,https://github.com/dwfreed,3,https://github.com/OpenRC/openrc/pull/108#issuecomment-267787182,"This will also warn users if md5sum is missing, which serves as a pretty
good indicator that /usr is not mounted.
Supercedes #102","I wouldn't refer to coreutils in the message, because it could be a busybox system that doesn't have md5sum turned on.

The people using busybox to replace coreutils will know they're using busybox to replace coreutils and can figure that out.

Also, I'm wondering about the value of the else branch. Do we need to print out the message about /proc being already mounted?

Message parity.  We print a message saying we're mounting /proc if it's not mounted, so might as well print something when it is already mounted.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,109,2016-12-19T01:08:54Z,2016-12-20T00:29:33Z,2016-12-20T00:30:19Z,CLOSED,False,29,6,1,https://github.com/dwfreed,librc: detect loops in stacked runlevels and abort,1,[],https://github.com/OpenRC/openrc/pull/109,https://github.com/dwfreed,1,https://github.com/OpenRC/openrc/pull/109,"X-Gentoo-Bug: 558700
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=558700","X-Gentoo-Bug: 558700
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=558700",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,110,2016-12-24T23:09:36Z,2017-01-07T18:27:37Z,2017-01-07T18:27:37Z,CLOSED,False,13,13,2,None,fix confusing indentation,1,[],https://github.com/OpenRC/openrc/pull/110,None,1,https://github.com/OpenRC/openrc/pull/110,they were causing -Wmisleading-indentation warnings with GCC 6,they were causing -Wmisleading-indentation warnings with GCC 6,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,110,2016-12-24T23:09:36Z,2017-01-07T18:27:37Z,2017-01-07T18:27:37Z,CLOSED,False,13,13,2,None,fix confusing indentation,1,[],https://github.com/OpenRC/openrc/pull/110,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/110#issuecomment-271100880,they were causing -Wmisleading-indentation warnings with GCC 6,"I believe this is taken care of in 0.23.1.
Thanks much, and if you see anything else please let me know. :-)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,111,2016-12-27T00:52:31Z,2016-12-28T15:56:11Z,2016-12-28T15:56:11Z,CLOSED,False,58,1,3,https://github.com/mrueg,start-stop-daemon: Initial support EnvironmentFiles,1,[],https://github.com/OpenRC/openrc/pull/111,https://github.com/mrueg,1,https://github.com/OpenRC/openrc/pull/111,"This would enable services to read from a generic environment file besides conf.d/service.conf.
See also:
https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile=
Two smaller parts of the specification are not implemented yet:

Support multiline variable definitions
Strip whitespaces unless double quoted","This would enable services to read from a generic environment file besides conf.d/service.conf.
See also:
https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile=
Two smaller parts of the specification are not implemented yet:

Support multiline variable definitions
Strip whitespaces unless double quoted",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,111,2016-12-27T00:52:31Z,2016-12-28T15:56:11Z,2016-12-28T15:56:11Z,CLOSED,False,58,1,3,https://github.com/mrueg,start-stop-daemon: Initial support EnvironmentFiles,1,[],https://github.com/OpenRC/openrc/pull/111,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/111#issuecomment-269255503,"This would enable services to read from a generic environment file besides conf.d/service.conf.
See also:
https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile=
Two smaller parts of the specification are not implemented yet:

Support multiline variable definitions
Strip whitespaces unless double quoted",I'm adding a note here after speaking with you in irc. We can't merge this yet since it hasn't bee tested. Please update the p/r once you have tested this and we'll go from there.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,111,2016-12-27T00:52:31Z,2016-12-28T15:56:11Z,2016-12-28T15:56:11Z,CLOSED,False,58,1,3,https://github.com/mrueg,start-stop-daemon: Initial support EnvironmentFiles,1,[],https://github.com/OpenRC/openrc/pull/111,https://github.com/dwfreed,3,https://github.com/OpenRC/openrc/pull/111#issuecomment-269413041,"This would enable services to read from a generic environment file besides conf.d/service.conf.
See also:
https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile=
Two smaller parts of the specification are not implemented yet:

Support multiline variable definitions
Strip whitespaces unless double quoted","I have several issues with this:

Not all services use start-stop-daemon (particularly ones that don't use daemons, or ones that do really tricky things).
Environment files as implemented by systemd are incredibly basic, whereas /etc/conf.d/service is sourced by shell, and thus can contain whatever shell code you want.
This leads to environment configuration in several different places, when OpenRC's canonical location for that has always been in /etc/conf.d/service, and this provides no way for that location to override the environment file.

If you need environment variables set for a daemon, just put export SOMEVAR=""somevalue"" in /etc/conf.d/service or the initscript as appropriate.
👎",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,111,2016-12-27T00:52:31Z,2016-12-28T15:56:11Z,2016-12-28T15:56:11Z,CLOSED,False,58,1,3,https://github.com/mrueg,start-stop-daemon: Initial support EnvironmentFiles,1,[],https://github.com/OpenRC/openrc/pull/111,https://github.com/mrueg,4,https://github.com/OpenRC/openrc/pull/111#issuecomment-269496557,"This would enable services to read from a generic environment file besides conf.d/service.conf.
See also:
https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile=
Two smaller parts of the specification are not implemented yet:

Support multiline variable definitions
Strip whitespaces unless double quoted",Yeah I haven't thought of conf.d as an alternative when working on it. Closing it then.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,112,2017-01-07T23:19:44Z,2017-03-08T00:18:17Z,2017-03-08T01:00:17Z,CLOSED,False,4,2,1,https://github.com/maciejsszmigiero,sysfs: don't pull modules to sysinit runlevel,1,[],https://github.com/OpenRC/openrc/pull/112,https://github.com/maciejsszmigiero,1,https://github.com/OpenRC/openrc/pull/112,"Commit 73cdf10 (""Deprecate automatic loading of modules"") introduced
""want modules"" dependency for the ""sysfs"" service.
By default the ""sysfs"" service is installed in the ""sysinit"" runlevel, is
one of the very first services to start on boot (often it is the first one)
and it is always started before udev since udev depends on it.
The ""modules"" service on the other hand is supposed to start a bit later,
in the ""boot"" runlevel.
However, since that mentioned earlier commit the ""modules"" service will be
pulled in to the ""sysinit"" runlevel because a ""want"" dependency will do it
regardless in which runlevel this service is actually installed.
This breaks things like USB modem mode switching.
Change this dependency to an ""use"" which does not automatically pull in the
""modules"" service into the ""sysinit"" runlevel and inform an user that he
needs to add it manually to this runlevel in case that he boots an EFI
Linux system AND efivarfs support wasn't built in into the kernel AND
efivarfs module wasn't loaded already by an initrd.","Commit 73cdf10 (""Deprecate automatic loading of modules"") introduced
""want modules"" dependency for the ""sysfs"" service.
By default the ""sysfs"" service is installed in the ""sysinit"" runlevel, is
one of the very first services to start on boot (often it is the first one)
and it is always started before udev since udev depends on it.
The ""modules"" service on the other hand is supposed to start a bit later,
in the ""boot"" runlevel.
However, since that mentioned earlier commit the ""modules"" service will be
pulled in to the ""sysinit"" runlevel because a ""want"" dependency will do it
regardless in which runlevel this service is actually installed.
This breaks things like USB modem mode switching.
Change this dependency to an ""use"" which does not automatically pull in the
""modules"" service into the ""sysinit"" runlevel and inform an user that he
needs to add it manually to this runlevel in case that he boots an EFI
Linux system AND efivarfs support wasn't built in into the kernel AND
efivarfs module wasn't loaded already by an initrd.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,112,2017-01-07T23:19:44Z,2017-03-08T00:18:17Z,2017-03-08T01:00:17Z,CLOSED,False,4,2,1,https://github.com/maciejsszmigiero,sysfs: don't pull modules to sysinit runlevel,1,[],https://github.com/OpenRC/openrc/pull/112,https://github.com/maciejsszmigiero,2,https://github.com/OpenRC/openrc/pull/112#issuecomment-271187077,"Commit 73cdf10 (""Deprecate automatic loading of modules"") introduced
""want modules"" dependency for the ""sysfs"" service.
By default the ""sysfs"" service is installed in the ""sysinit"" runlevel, is
one of the very first services to start on boot (often it is the first one)
and it is always started before udev since udev depends on it.
The ""modules"" service on the other hand is supposed to start a bit later,
in the ""boot"" runlevel.
However, since that mentioned earlier commit the ""modules"" service will be
pulled in to the ""sysinit"" runlevel because a ""want"" dependency will do it
regardless in which runlevel this service is actually installed.
This breaks things like USB modem mode switching.
Change this dependency to an ""use"" which does not automatically pull in the
""modules"" service into the ""sysinit"" runlevel and inform an user that he
needs to add it manually to this runlevel in case that he boots an EFI
Linux system AND efivarfs support wasn't built in into the kernel AND
efivarfs module wasn't loaded already by an initrd.",PCMCIA/CardBus cards that remained inserted during system startup are another victims of this issue.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,112,2017-01-07T23:19:44Z,2017-03-08T00:18:17Z,2017-03-08T01:00:17Z,CLOSED,False,4,2,1,https://github.com/maciejsszmigiero,sysfs: don't pull modules to sysinit runlevel,1,[],https://github.com/OpenRC/openrc/pull/112,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/112#issuecomment-284826449,"Commit 73cdf10 (""Deprecate automatic loading of modules"") introduced
""want modules"" dependency for the ""sysfs"" service.
By default the ""sysfs"" service is installed in the ""sysinit"" runlevel, is
one of the very first services to start on boot (often it is the first one)
and it is always started before udev since udev depends on it.
The ""modules"" service on the other hand is supposed to start a bit later,
in the ""boot"" runlevel.
However, since that mentioned earlier commit the ""modules"" service will be
pulled in to the ""sysinit"" runlevel because a ""want"" dependency will do it
regardless in which runlevel this service is actually installed.
This breaks things like USB modem mode switching.
Change this dependency to an ""use"" which does not automatically pull in the
""modules"" service into the ""sysinit"" runlevel and inform an user that he
needs to add it manually to this runlevel in case that he boots an EFI
Linux system AND efivarfs support wasn't built in into the kernel AND
efivarfs module wasn't loaded already by an initrd.","Honestly, given that pc cards are also affected, I would rather drop this dependency and not have sysfs pull in modules.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,112,2017-01-07T23:19:44Z,2017-03-08T00:18:17Z,2017-03-08T01:00:17Z,CLOSED,False,4,2,1,https://github.com/maciejsszmigiero,sysfs: don't pull modules to sysinit runlevel,1,[],https://github.com/OpenRC/openrc/pull/112,https://github.com/maciejsszmigiero,4,https://github.com/OpenRC/openrc/pull/112#issuecomment-284889163,"Commit 73cdf10 (""Deprecate automatic loading of modules"") introduced
""want modules"" dependency for the ""sysfs"" service.
By default the ""sysfs"" service is installed in the ""sysinit"" runlevel, is
one of the very first services to start on boot (often it is the first one)
and it is always started before udev since udev depends on it.
The ""modules"" service on the other hand is supposed to start a bit later,
in the ""boot"" runlevel.
However, since that mentioned earlier commit the ""modules"" service will be
pulled in to the ""sysinit"" runlevel because a ""want"" dependency will do it
regardless in which runlevel this service is actually installed.
This breaks things like USB modem mode switching.
Change this dependency to an ""use"" which does not automatically pull in the
""modules"" service into the ""sysinit"" runlevel and inform an user that he
needs to add it manually to this runlevel in case that he boots an EFI
Linux system AND efivarfs support wasn't built in into the kernel AND
efivarfs module wasn't loaded already by an initrd.",Then efivarfs module loading in init.d/sysfs will need to be un-deprecated.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,112,2017-01-07T23:19:44Z,2017-03-08T00:18:17Z,2017-03-08T01:00:17Z,CLOSED,False,4,2,1,https://github.com/maciejsszmigiero,sysfs: don't pull modules to sysinit runlevel,1,[],https://github.com/OpenRC/openrc/pull/112,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/112#issuecomment-284889976,"Commit 73cdf10 (""Deprecate automatic loading of modules"") introduced
""want modules"" dependency for the ""sysfs"" service.
By default the ""sysfs"" service is installed in the ""sysinit"" runlevel, is
one of the very first services to start on boot (often it is the first one)
and it is always started before udev since udev depends on it.
The ""modules"" service on the other hand is supposed to start a bit later,
in the ""boot"" runlevel.
However, since that mentioned earlier commit the ""modules"" service will be
pulled in to the ""sysinit"" runlevel because a ""want"" dependency will do it
regardless in which runlevel this service is actually installed.
This breaks things like USB modem mode switching.
Change this dependency to an ""use"" which does not automatically pull in the
""modules"" service into the ""sysinit"" runlevel and inform an user that he
needs to add it manually to this runlevel in case that he boots an EFI
Linux system AND efivarfs support wasn't built in into the kernel AND
efivarfs module wasn't loaded already by an initrd.","My understanding is that the kernel will load the module automatically when you run the mount command, so I shouldn't have to do anything special to load it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,112,2017-01-07T23:19:44Z,2017-03-08T00:18:17Z,2017-03-08T01:00:17Z,CLOSED,False,4,2,1,https://github.com/maciejsszmigiero,sysfs: don't pull modules to sysinit runlevel,1,[],https://github.com/OpenRC/openrc/pull/112,https://github.com/williamh,6,https://github.com/OpenRC/openrc/pull/112#issuecomment-284904482,"Commit 73cdf10 (""Deprecate automatic loading of modules"") introduced
""want modules"" dependency for the ""sysfs"" service.
By default the ""sysfs"" service is installed in the ""sysinit"" runlevel, is
one of the very first services to start on boot (often it is the first one)
and it is always started before udev since udev depends on it.
The ""modules"" service on the other hand is supposed to start a bit later,
in the ""boot"" runlevel.
However, since that mentioned earlier commit the ""modules"" service will be
pulled in to the ""sysinit"" runlevel because a ""want"" dependency will do it
regardless in which runlevel this service is actually installed.
This breaks things like USB modem mode switching.
Change this dependency to an ""use"" which does not automatically pull in the
""modules"" service into the ""sysinit"" runlevel and inform an user that he
needs to add it manually to this runlevel in case that he boots an EFI
Linux system AND efivarfs support wasn't built in into the kernel AND
efivarfs module wasn't loaded already by an initrd.",This is fixed in http://github.com/openrc/openrc/commit/6a79aef,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,112,2017-01-07T23:19:44Z,2017-03-08T00:18:17Z,2017-03-08T01:00:17Z,CLOSED,False,4,2,1,https://github.com/maciejsszmigiero,sysfs: don't pull modules to sysinit runlevel,1,[],https://github.com/OpenRC/openrc/pull/112,https://github.com/maciejsszmigiero,7,https://github.com/OpenRC/openrc/pull/112#issuecomment-284911964,"Commit 73cdf10 (""Deprecate automatic loading of modules"") introduced
""want modules"" dependency for the ""sysfs"" service.
By default the ""sysfs"" service is installed in the ""sysinit"" runlevel, is
one of the very first services to start on boot (often it is the first one)
and it is always started before udev since udev depends on it.
The ""modules"" service on the other hand is supposed to start a bit later,
in the ""boot"" runlevel.
However, since that mentioned earlier commit the ""modules"" service will be
pulled in to the ""sysinit"" runlevel because a ""want"" dependency will do it
regardless in which runlevel this service is actually installed.
This breaks things like USB modem mode switching.
Change this dependency to an ""use"" which does not automatically pull in the
""modules"" service into the ""sysinit"" runlevel and inform an user that he
needs to add it manually to this runlevel in case that he boots an EFI
Linux system AND efivarfs support wasn't built in into the kernel AND
efivarfs module wasn't loaded already by an initrd.","init.d/sysfs from your commit still uses modules, but you wrote that you would like to drop this dependency.
Was this intentional?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,113,2017-01-08T10:57:06Z,2017-01-25T23:58:12Z,2017-01-25T23:58:12Z,CLOSED,False,38,19,1,https://github.com/dwfreed,start-stop-daemon: allow all standard signals,1,[],https://github.com/OpenRC/openrc/pull/113,https://github.com/dwfreed,1,https://github.com/OpenRC/openrc/pull/113,"X-Gentoo-Bug: 604986
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=604986","X-Gentoo-Bug: 604986
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=604986",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,113,2017-01-08T10:57:06Z,2017-01-25T23:58:12Z,2017-01-25T23:58:12Z,CLOSED,False,38,19,1,https://github.com/dwfreed,start-stop-daemon: allow all standard signals,1,[],https://github.com/OpenRC/openrc/pull/113,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/113#issuecomment-272669283,"X-Gentoo-Bug: 604986
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=604986",Updated to protect with ifdef those signals not defined in POSIX.2,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,113,2017-01-08T10:57:06Z,2017-01-25T23:58:12Z,2017-01-25T23:58:12Z,CLOSED,False,38,19,1,https://github.com/dwfreed,start-stop-daemon: allow all standard signals,1,[],https://github.com/OpenRC/openrc/pull/113,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/113#issuecomment-273876418,"X-Gentoo-Bug: 604986
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=604986","I can't tell which signals you added as easily with the addition of the signalpair_item macro, so can we do that switch later? Also, supervise-daemon will need the same signals added.
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,113,2017-01-08T10:57:06Z,2017-01-25T23:58:12Z,2017-01-25T23:58:12Z,CLOSED,False,38,19,1,https://github.com/dwfreed,start-stop-daemon: allow all standard signals,1,[],https://github.com/OpenRC/openrc/pull/113,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/113#issuecomment-275266890,"X-Gentoo-Bug: 604986
X-Gentoo-Bug-URL: https://bugs.gentoo.org/show_bug.cgi?id=604986","@dwfreed, sorry about the incorrect statement about supervise-daemon. I looked over your code and will merge it, also adding a comment about the macro to the commit message.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,115,2017-01-26T21:41:12Z,2017-01-26T23:07:28Z,2017-01-26T23:07:28Z,CLOSED,False,1,1,1,https://github.com/Nicop06,Fix typo in guide.md,1,[],https://github.com/OpenRC/openrc/pull/115,https://github.com/Nicop06,1,https://github.com/OpenRC/openrc/pull/115,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,117,2017-01-31T20:52:08Z,2017-01-31T23:36:10Z,2017-01-31T23:36:10Z,CLOSED,False,4,4,1,https://github.com/kaniini,test/setup_env: ensure that eval_ecolors is available on the path.,1,[],https://github.com/OpenRC/openrc/pull/117,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/117,"The test environment previously used the system default paths instead of installing the necessary $PATH environment
variable to make finding eval_ecolors work.
This closes Gentoo bug #374191.","The test environment previously used the system default paths instead of installing the necessary $PATH environment
variable to make finding eval_ecolors work.
This closes Gentoo bug #374191.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,122,2017-03-31T19:01:11Z,2017-04-03T15:45:04Z,2017-04-03T15:45:04Z,CLOSED,False,7,0,1,https://github.com/austin987,start-stop-daemon: give user a warning if calling --start with --retry or --stop with --wait,1,[],https://github.com/OpenRC/openrc/pull/122,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/122,"Found while trying to figure out why a long running, slow to start up java webapp was always showing as 'crashed' when trying to shut it down","Found while trying to figure out why a long running, slow to start up java webapp was always showing as 'crashed' when trying to shut it down",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,122,2017-03-31T19:01:11Z,2017-04-03T15:45:04Z,2017-04-03T15:45:04Z,CLOSED,False,7,0,1,https://github.com/austin987,start-stop-daemon: give user a warning if calling --start with --retry or --stop with --wait,1,[],https://github.com/OpenRC/openrc/pull/122,https://github.com/austin987,2,https://github.com/OpenRC/openrc/pull/122#issuecomment-290847435,"Found while trying to figure out why a long running, slow to start up java webapp was always showing as 'crashed' when trying to shut it down",Changed to use a warn rather than an error,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,123,2017-04-05T14:04:39Z,2017-04-06T07:02:16Z,2017-04-06T08:38:40Z,MERGED,True,1,1,1,https://github.com/iDarkTemplar,Fix make install on FreeBSD: don't try to install /etc/init.d/modules twice,1,[],https://github.com/OpenRC/openrc/pull/123,https://github.com/iDarkTemplar,1,https://github.com/OpenRC/openrc/pull/123,"Issue appeared for me during building Gentoo/FreeBSD system on Gentoo/Linux host.
It produces following output:
install -m 0755 bootmisc fsck hostname local localmount loopback netmount osclock root savecache swap swclock sysctl runsvdir urandom s6-svscan hostid modules mosed newsyslog pf rarpd rc-enabled rpcbind savecore syslogd adjkerntz devd dumpon encswap ipfw modules modules-load mixer nscd powerd syscons /usr/x86_64-gentoo-freebsd10.3/tmp/portage/sys-apps/openrc-0.24.2/image///etc/init.d/
/usr/bin/install: will not overwrite just created '/usr/x86_64-gentoo-freebsd10.3/tmp/portage/sys-apps/openrc-0.24.2/image///etc/init.d/modules' with 'modules'

Please note modules being mentioned twice in install parameters. Removing one of appearances fixes issue.","Issue appeared for me during building Gentoo/FreeBSD system on Gentoo/Linux host.
It produces following output:
install -m 0755 bootmisc fsck hostname local localmount loopback netmount osclock root savecache swap swclock sysctl runsvdir urandom s6-svscan hostid modules mosed newsyslog pf rarpd rc-enabled rpcbind savecore syslogd adjkerntz devd dumpon encswap ipfw modules modules-load mixer nscd powerd syscons /usr/x86_64-gentoo-freebsd10.3/tmp/portage/sys-apps/openrc-0.24.2/image///etc/init.d/
/usr/bin/install: will not overwrite just created '/usr/x86_64-gentoo-freebsd10.3/tmp/portage/sys-apps/openrc-0.24.2/image///etc/init.d/modules' with 'modules'

Please note modules being mentioned twice in install parameters. Removing one of appearances fixes issue.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,125,2017-04-10T14:15:27Z,2017-04-10T15:29:13Z,2017-04-10T15:30:56Z,CLOSED,False,2,1,1,https://github.com/iDarkTemplar,bootmisc service: do not remove ld-elf32.so.hints,1,[],https://github.com/OpenRC/openrc/pull/125,https://github.com/iDarkTemplar,1,https://github.com/OpenRC/openrc/pull/125,File /var/run/ld-elf32.so.hints is used on FreeBSD 64bit multilib,File /var/run/ld-elf32.so.hints is used on FreeBSD 64bit multilib,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,136,2017-05-28T20:31:06Z,2017-05-30T07:51:43Z,2017-05-30T07:51:43Z,MERGED,True,2,1,1,https://github.com/trofi,mk/cc.mk: make implicit function declarations fatal,1,[],https://github.com/OpenRC/openrc/pull/136,https://github.com/trofi,1,https://github.com/OpenRC/openrc/pull/136,"When building openrc from git on uclibg-ng system
a lot of warnings suggest prototypes are missing
for various functions:
  start-stop-daemon.c:1197:21: warning: implicit declaration of function 'initgroups' [-Wimplicit-function-declaration]
   if (changeuser && initgroups(changeuser, gid))
                     ^
  start-stop-daemon.c:1197:3: warning: nested extern declaration of 'initgroups' [-Wnested-externs]
   if (changeuser && initgroups(changeuser, gid))
   ^

It means all arguments are defaulted to 'int'. It's a
problem for pointer arguments where truncation happens.
To avoid that truncation change forbids inplicit declarations.
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","When building openrc from git on uclibg-ng system
a lot of warnings suggest prototypes are missing
for various functions:
  start-stop-daemon.c:1197:21: warning: implicit declaration of function 'initgroups' [-Wimplicit-function-declaration]
   if (changeuser && initgroups(changeuser, gid))
                     ^
  start-stop-daemon.c:1197:3: warning: nested extern declaration of 'initgroups' [-Wnested-externs]
   if (changeuser && initgroups(changeuser, gid))
   ^

It means all arguments are defaulted to 'int'. It's a
problem for pointer arguments where truncation happens.
To avoid that truncation change forbids inplicit declarations.
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,136,2017-05-28T20:31:06Z,2017-05-30T07:51:43Z,2017-05-30T07:51:43Z,MERGED,True,2,1,1,https://github.com/trofi,mk/cc.mk: make implicit function declarations fatal,1,[],https://github.com/OpenRC/openrc/pull/136,https://github.com/trofi,2,https://github.com/OpenRC/openrc/pull/136#issuecomment-304801390,"When building openrc from git on uclibg-ng system
a lot of warnings suggest prototypes are missing
for various functions:
  start-stop-daemon.c:1197:21: warning: implicit declaration of function 'initgroups' [-Wimplicit-function-declaration]
   if (changeuser && initgroups(changeuser, gid))
                     ^
  start-stop-daemon.c:1197:3: warning: nested extern declaration of 'initgroups' [-Wnested-externs]
   if (changeuser && initgroups(changeuser, gid))
   ^

It means all arguments are defaulted to 'int'. It's a
problem for pointer arguments where truncation happens.
To avoid that truncation change forbids inplicit declarations.
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",Removed empty \ line.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,137,2017-05-30T07:35:56Z,2017-05-30T07:47:55Z,2017-05-30T07:47:55Z,MERGED,True,1,1,1,https://github.com/trofi,rc-logger.c: fix crash on fclose(NULL),1,[],https://github.com/OpenRC/openrc/pull/137,https://github.com/trofi,1,https://github.com/OpenRC/openrc/pull/137,"Truncated crash looked like that:
Core was generated by `/sbin/openrc default'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  _IO_new_fclose (fp=0x0) at iofclose.c:53

rc_logger_open() has roughly the following code:
if ((plog = fopen(logfile, ""ae""))) {
        if ((log = fopen(TMPLOG, ""re""))) {
            ....
        }
        fclose(log);
        fclose(plog);
}

Note that fclose(log) is called unconditionally.
The change moves fclose(log) up to close file
only it was opened successfully.
Reported-by: Brian Evans grknight@gentoo.org
Tested-by: Brian Evans grknight@gentoo.org
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","Truncated crash looked like that:
Core was generated by `/sbin/openrc default'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  _IO_new_fclose (fp=0x0) at iofclose.c:53

rc_logger_open() has roughly the following code:
if ((plog = fopen(logfile, ""ae""))) {
        if ((log = fopen(TMPLOG, ""re""))) {
            ....
        }
        fclose(log);
        fclose(plog);
}

Note that fclose(log) is called unconditionally.
The change moves fclose(log) up to close file
only it was opened successfully.
Reported-by: Brian Evans grknight@gentoo.org
Tested-by: Brian Evans grknight@gentoo.org
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,138,2017-05-30T21:05:50Z,2017-05-30T21:24:55Z,2017-05-30T21:24:55Z,CLOSED,False,2,2,1,https://github.com/trofi,openrc-init.c: fix buffer overflow in init.ctl,1,[],https://github.com/OpenRC/openrc/pull/138,https://github.com/trofi,1,https://github.com/OpenRC/openrc/pull/138,"How to reproduce 1-byte overflow:
$ FEATURES=-test CFLAGS=""-fsanitize=address -O0 -ggdb3"" emerge -1 openrc

=================================================================
==1==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff0efd8710
    at pc 0x000000402076 bp 0x7fff0efd7d50 sp 0x7fff0efd7d40
WRITE of size 1 at 0x7fff0efd8710 thread T0
    #0 0x402075  (/sbin/openrc-init+0x402075)
    #1 0x3cf6e2070f in __libc_start_main (/lib64/libc.so.6+0x3cf6e2070f)
    #2 0x4013b8  (/sbin/openrc-init+0x4013b8)

Address 0x7fff0efd8710 is located in stack of thread T0 at offset 2432 in frame
    #0 0x401cfb  (/sbin/openrc-init+0x401cfb)

  This frame has 3 object(s):
    [32, 160) 'signals'
    [192, 344) 'sa'
    [384, 2432) 'buf' <== Memory access at offset 2432 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow ??:0 ??

The problem here is in the code handling reads from 'init.ctl':
int main(int argc, char **argv) {
...
    char buf[2048];
    for (;;) {
        /* This will block until a command is sent down the pipe... */
        fifo = fopen(RC_INIT_FIFO, ""r"");
        count = fread(buf, 1, 2048, fifo);
        buf[count] = 0;
        ...
    }

buf[count] = 0; writes outside the buffer when fread() returns non-truncated read.","How to reproduce 1-byte overflow:
$ FEATURES=-test CFLAGS=""-fsanitize=address -O0 -ggdb3"" emerge -1 openrc

=================================================================
==1==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff0efd8710
    at pc 0x000000402076 bp 0x7fff0efd7d50 sp 0x7fff0efd7d40
WRITE of size 1 at 0x7fff0efd8710 thread T0
    #0 0x402075  (/sbin/openrc-init+0x402075)
    #1 0x3cf6e2070f in __libc_start_main (/lib64/libc.so.6+0x3cf6e2070f)
    #2 0x4013b8  (/sbin/openrc-init+0x4013b8)

Address 0x7fff0efd8710 is located in stack of thread T0 at offset 2432 in frame
    #0 0x401cfb  (/sbin/openrc-init+0x401cfb)

  This frame has 3 object(s):
    [32, 160) 'signals'
    [192, 344) 'sa'
    [384, 2432) 'buf' <== Memory access at offset 2432 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow ??:0 ??

The problem here is in the code handling reads from 'init.ctl':
int main(int argc, char **argv) {
...
    char buf[2048];
    for (;;) {
        /* This will block until a command is sent down the pipe... */
        fifo = fopen(RC_INIT_FIFO, ""r"");
        count = fread(buf, 1, 2048, fifo);
        buf[count] = 0;
        ...
    }

buf[count] = 0; writes outside the buffer when fread() returns non-truncated read.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,142,2017-06-09T20:00:46Z,2017-06-12T15:41:38Z,2017-06-12T15:41:38Z,CLOSED,False,6,6,1,https://github.com/udeved,scripts/Makefile: respect SBINDIR with MKSYSVINIT,3,[],https://github.com/OpenRC/openrc/pull/142,https://github.com/udeved,1,https://github.com/OpenRC/openrc/pull/142,Use SBINDIR in the scripts Makefile and fix the symlinks if MKSYSVINIT=yes,Use SBINDIR in the scripts Makefile and fix the symlinks if MKSYSVINIT=yes,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,142,2017-06-09T20:00:46Z,2017-06-12T15:41:38Z,2017-06-12T15:41:38Z,CLOSED,False,6,6,1,https://github.com/udeved,scripts/Makefile: respect SBINDIR with MKSYSVINIT,3,[],https://github.com/OpenRC/openrc/pull/142,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/142#issuecomment-307786170,Use SBINDIR in the scripts Makefile and fix the symlinks if MKSYSVINIT=yes,"The first commit on this p/r looks good, but I have concerns about the second and third ones. The first commit fixes sbindir on the symlinks and that is correct. In the second one, why do you convert the symlinks to absolute symlinks instead of leaving them as relative? The third one breaks the shutdown wrapper by linking it to shutdown instead of openrc-shutdown.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,142,2017-06-09T20:00:46Z,2017-06-12T15:41:38Z,2017-06-12T15:41:38Z,CLOSED,False,6,6,1,https://github.com/udeved,scripts/Makefile: respect SBINDIR with MKSYSVINIT,3,[],https://github.com/OpenRC/openrc/pull/142,https://github.com/udeved,3,https://github.com/OpenRC/openrc/pull/142#issuecomment-307787328,Use SBINDIR in the scripts Makefile and fix the symlinks if MKSYSVINIT=yes,"Hi @williamh
I am just experimenting, I perhaps should have done it in a separate patch branch.
Reason for second commit was, that all the symlinks in the resulting package were broke.
The were a dead end symlink, pointing to a non existing file.
Now what I don't know, if this is connected to using a prefix as opposed to gentoo.
The third commit was donne, because I have had trouble to poweroff the system from plasma. It shutdown, but the message states ""reboot"" annd the system just keeps powered on. Something is still wrong with the shutdown.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,142,2017-06-09T20:00:46Z,2017-06-12T15:41:38Z,2017-06-12T15:41:38Z,CLOSED,False,6,6,1,https://github.com/udeved,scripts/Makefile: respect SBINDIR with MKSYSVINIT,3,[],https://github.com/OpenRC/openrc/pull/142,https://github.com/udeved,4,https://github.com/OpenRC/openrc/pull/142#issuecomment-307788935,Use SBINDIR in the scripts Makefile and fix the symlinks if MKSYSVINIT=yes,"Reason to make it absolute path was this...
ln -sf ..//usr/lib/rc/bin/rc-sstat /build/openrc/pkg/openrc//usr/bin/rc-sstat
The double slash renders the symlink broke.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,142,2017-06-09T20:00:46Z,2017-06-12T15:41:38Z,2017-06-12T15:41:38Z,CLOSED,False,6,6,1,https://github.com/udeved,scripts/Makefile: respect SBINDIR with MKSYSVINIT,3,[],https://github.com/OpenRC/openrc/pull/142,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/142#issuecomment-307791331,Use SBINDIR in the scripts Makefile and fix the symlinks if MKSYSVINIT=yes,"Correct, you should always keep the master branch clean; all pull requests should be done with branches.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,142,2017-06-09T20:00:46Z,2017-06-12T15:41:38Z,2017-06-12T15:41:38Z,CLOSED,False,6,6,1,https://github.com/udeved,scripts/Makefile: respect SBINDIR with MKSYSVINIT,3,[],https://github.com/OpenRC/openrc/pull/142,https://github.com/udeved,6,https://github.com/OpenRC/openrc/pull/142#issuecomment-307791682,Use SBINDIR in the scripts Makefile and fix the symlinks if MKSYSVINIT=yes,Can you close it and I'll reopen a patch PR.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,143,2017-06-10T02:15:32Z,2017-06-12T15:45:08Z,2017-06-13T15:39:35Z,CLOSED,False,5,4,1,https://github.com/nuno-silva,init.d/hostname: minor fixes,2,[],https://github.com/OpenRC/openrc/pull/143,https://github.com/nuno-silva,1,https://github.com/OpenRC/openrc/pull/143,"fix indentation
fix default parameter syntax","fix indentation
fix default parameter syntax",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,144,2017-06-12T15:58:30Z,2018-10-23T06:48:16Z,2018-10-23T06:48:16Z,CLOSED,False,19,0,1,https://github.com/mrueg,.travis.yml: Initial travis configuration,1,[],https://github.com/OpenRC/openrc/pull/144,https://github.com/mrueg,1,https://github.com/OpenRC/openrc/pull/144,"Build with gcc, clang on glibc and gcc on musl libc via musl-gcc
wrapper
Execute tests","Build with gcc, clang on glibc and gcc on musl libc via musl-gcc
wrapper
Execute tests",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,144,2017-06-12T15:58:30Z,2018-10-23T06:48:16Z,2018-10-23T06:48:16Z,CLOSED,False,19,0,1,https://github.com/mrueg,.travis.yml: Initial travis configuration,1,[],https://github.com/OpenRC/openrc/pull/144,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/144#issuecomment-307838145,"Build with gcc, clang on glibc and gcc on musl libc via musl-gcc
wrapper
Execute tests","To the rest of the team -- do not merge this for now, but keep it open. I need to figure out whether travis is accessible to me or not.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,144,2017-06-12T15:58:30Z,2018-10-23T06:48:16Z,2018-10-23T06:48:16Z,CLOSED,False,19,0,1,https://github.com/mrueg,.travis.yml: Initial travis configuration,1,[],https://github.com/OpenRC/openrc/pull/144,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/144#issuecomment-307961953,"Build with gcc, clang on glibc and gcc on musl libc via musl-gcc
wrapper
Execute tests",I have opened https://bugs.gentoo.org/show_bug.cgi?id=621628 to inquire about stabilizing the Travis commandline client. I will follow that bug and look at this more once that is stabilized.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,144,2017-06-12T15:58:30Z,2018-10-23T06:48:16Z,2018-10-23T06:48:16Z,CLOSED,False,19,0,1,https://github.com/mrueg,.travis.yml: Initial travis configuration,1,[],https://github.com/OpenRC/openrc/pull/144,https://github.com/mrueg,4,https://github.com/OpenRC/openrc/pull/144#issuecomment-403674373,"Build with gcc, clang on glibc and gcc on musl libc via musl-gcc
wrapper
Execute tests",@williamh Is there still interest in this change?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,144,2017-06-12T15:58:30Z,2018-10-23T06:48:16Z,2018-10-23T06:48:16Z,CLOSED,False,19,0,1,https://github.com/mrueg,.travis.yml: Initial travis configuration,1,[],https://github.com/OpenRC/openrc/pull/144,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/144#issuecomment-403980764,"Build with gcc, clang on glibc and gcc on musl libc via musl-gcc
wrapper
Execute tests","Yes there is, I just haven't  looked at it much yet. On another note, I'm thinking about unit testing, I'm just not sure how to do that with OpenRC yet either.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,147,2017-06-15T03:13:49Z,2017-06-22T23:23:02Z,2017-06-22T23:23:08Z,CLOSED,False,36,10,4,https://github.com/cromerc,add quiet option for agetty,2,[],https://github.com/OpenRC/openrc/pull/147,https://github.com/cromerc,1,https://github.com/OpenRC/openrc/pull/147,This adds a quiet option that can be used to silence ebegin and eend for services. This fixes the display issue that happens under openrc-init using the agetty services: #121,This adds a quiet option that can be used to silence ebegin and eend for services. This fixes the display issue that happens under openrc-init using the agetty services: #121,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,147,2017-06-15T03:13:49Z,2017-06-22T23:23:02Z,2017-06-22T23:23:08Z,CLOSED,False,36,10,4,https://github.com/cromerc,add quiet option for agetty,2,[],https://github.com/OpenRC/openrc/pull/147,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/147#issuecomment-310170701,This adds a quiet option that can be used to silence ebegin and eend for services. This fixes the display issue that happens under openrc-init using the agetty services: #121,"you can accomplish the same thing by just exporting EINFO_QUIET=""yes"" in the service script.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,147,2017-06-15T03:13:49Z,2017-06-22T23:23:02Z,2017-06-22T23:23:08Z,CLOSED,False,36,10,4,https://github.com/cromerc,add quiet option for agetty,2,[],https://github.com/OpenRC/openrc/pull/147,https://github.com/cromerc,3,https://github.com/OpenRC/openrc/pull/147#issuecomment-310264008,This adds a quiet option that can be used to silence ebegin and eend for services. This fixes the display issue that happens under openrc-init using the agetty services: #121,"Thanks, I had no idea about that option. I will make changes to the PR accordingly.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,150,2017-06-22T23:55:05Z,2017-10-06T19:44:14Z,2017-10-06T19:44:14Z,CLOSED,False,4,0,2,https://github.com/cromerc,make agetty quiet,1,[],https://github.com/OpenRC/openrc/pull/150,https://github.com/cromerc,1,https://github.com/OpenRC/openrc/pull/150,"Changed commits for PR: #147
This fixes: #121","Changed commits for PR: #147
This fixes: #121",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,151,2017-07-07T00:24:09Z,2017-07-07T22:16:59Z,2017-07-07T22:16:59Z,CLOSED,False,7,6,2,https://github.com/kilobyte,fix errors from man,2,[],https://github.com/OpenRC/openrc/pull/151,https://github.com/kilobyte,1,https://github.com/OpenRC/openrc/pull/151,"Here's a handful of fixes for harmless warnings from man.  They don't even change the output (groff will DTRT), but lintian is way too noisy here.  And it's faster to fix the warnings than to argue to have them downgraded or removed...","Here's a handful of fixes for harmless warnings from man.  They don't even change the output (groff will DTRT), but lintian is way too noisy here.  And it's faster to fix the warnings than to argue to have them downgraded or removed...",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/dwfreed,1,https://github.com/OpenRC/openrc/pull/156,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/156#issuecomment-319126735,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","s-s-d can run as non-root just fine, so warning in that case is incorrect
also, can't s-s-d let the target program create/manage the pid, and then re-use it to stop ?  in which case it'll be owned by non-root ?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/dwfreed,3,https://github.com/OpenRC/openrc/pull/156#issuecomment-319129768,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","s-s-d can run as non-root just fine, so warning in that case is incorrect

I'll make the st_uid != 0 check also require geteuid() == 0.

also, can't s-s-d let the target program create/manage the pid, and then re-use it to stop ? in which case it'll be owned by non-root ?

Daemons should be creating their pidfiles before they drop privileges, so the pidfile would be root-owned.  s-s-d's own --make-pidfile writes the pidfile before applying any --user/--group changes",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/dwfreed,4,https://github.com/OpenRC/openrc/pull/156#issuecomment-319130044,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","I'll make the st_uid != 0 check also require geteuid() == 0.

Thinking further, st_uid != geteuid() would probably be better.  Thoughts?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/vapier,5,https://github.com/OpenRC/openrc/pull/156#issuecomment-319243380,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","i don't see how being root owned is a requirement or even an improvement.  if s-s-d was launched as root, and it was responsible for creating the pid file, then sure, it'll be root owned.  but it's not inconceivable that the main daemon sets up the pid file so an unprivileged child can manage it.  i don't see that being a bug.
on my active system, i see transmission running with its pid file as owned by non-root.
i'm not really seeing the bug/issue this is trying to fix.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/dwfreed,6,https://github.com/OpenRC/openrc/pull/156#issuecomment-319243708,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","A simple arbitrary code execution vulnerability in transmission could lead to a system-wide DoS when running-as-root s-s-d reads a pid from the non-root writable pidfile and signals that process, and somebody has used that vulnerability to write, say, '1' in that pidfile.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/dwfreed,7,https://github.com/OpenRC/openrc/pull/156#issuecomment-319244079,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org",And it doesn't even have to be arbitrary code execution; writing to a path that the attacker can specify with content the attacker can provide would be sufficient.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/vapier,8,https://github.com/OpenRC/openrc/pull/156#issuecomment-319244222,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","that's why you pass the program name to the --stop function -- it does a sanity check on the target process.  if you aren't passing that, your init script is already broken and needs fixing.
there is no diff between ""server crashed and pid was recycled to a diff program"" and ""a diff pid was manually injected to an existing process"".",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/dwfreed,9,https://github.com/OpenRC/openrc/pull/156#issuecomment-319244398,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","It doesn't.  If --pidfile is provided to --stop or --signal, it is considered the only source of truth.  I imagine this was inherited from Debian's implementation when OpenRC forked it many many moons ago.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/dwfreed,10,https://github.com/OpenRC/openrc/pull/156#issuecomment-319244590,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org",https://github.com/OpenRC/openrc/blob/master/src/rc/start-stop-daemon.c#L407 is where that happens,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/williamh,11,https://github.com/OpenRC/openrc/pull/156#issuecomment-320464956,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org",Can someone check Debian's s-s-d for sure and let us know if it just treats the pidfile as the source of truth or if it requires the program name as well?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/orlitzky,12,https://github.com/OpenRC/openrc/pull/156#issuecomment-323875926,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","I've found another common mistake along the same lines. Often, people don't realize that command_background=true will write the PID file as root:root regardless of command_user. As a result, they change ownership of the PID file's containing directory to the daemon user, and the PID file (owned by root:root) gets written into a directory that a  non-root user controls. For example:

Bug 628542, app-admin/consul-template
Bug 628544, app-admin/consul
Bug 628546, app-admin/filebeat
Bug 628548, app-admin/glance

Even if it's only as a QA warning, it's looking like it would be extremely useful to extend this warning to the containing directory (i.e. if a non-root user can replace the PID file).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/orlitzky,13,https://github.com/OpenRC/openrc/pull/156#issuecomment-331143103,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","Can someone check Debian's s-s-d for sure and let us know if it just treats the pidfile as the source of truth or if it requires the program name as well?

I haven't tested it, but reading the source at
https://anonscm.debian.org/cgit/dpkg/dpkg.git/tree/utils/start-stop-daemon.c
suggests that the PID file takes precedence over the program name.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/williamh,14,https://github.com/OpenRC/openrc/pull/156#issuecomment-373471949,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","Can this be updated so I can merge it, or should we close it?
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,156,2017-07-31T13:27:32Z,,2021-12-31T00:45:52Z,OPEN,False,8,0,1,https://github.com/dwfreed,s-s-d: warn about non-root writable pidfile,2,[],https://github.com/OpenRC/openrc/pull/156,https://github.com/williamh,15,https://github.com/OpenRC/openrc/pull/156#issuecomment-393310044,"Since start-stop-daemon is run as root, non-root writable pidfiles can
be used to make start-stop-daemon signal processes other than the daemon
the pidfile is supposed to be for.
Reported-By: Michael Orlitzky mjo@gentoo.org
Tested-By: Michael Orlitzky mjo@gentoo.org","@dwfreed What is the status of this p/r? should I close it, or can you give me an update?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,157,2017-08-13T19:59:27Z,2018-03-15T18:05:28Z,2018-03-15T18:05:28Z,CLOSED,False,85,87,1,https://github.com/bytesuji,various grammar and formatting improvements,1,[],https://github.com/OpenRC/openrc/pull/157,https://github.com/bytesuji,1,https://github.com/OpenRC/openrc/pull/157,"I was reading the guide and noticed that it could be cleaned up, so I did so. Nothing too unorthodox.","I was reading the guide and noticed that it could be cleaned up, so I did so. Nothing too unorthodox.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,157,2017-08-13T19:59:27Z,2018-03-15T18:05:28Z,2018-03-15T18:05:28Z,CLOSED,False,85,87,1,https://github.com/bytesuji,various grammar and formatting improvements,1,[],https://github.com/OpenRC/openrc/pull/157,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/157#issuecomment-335017080,"I was reading the guide and noticed that it could be cleaned up, so I did so. Nothing too unorthodox.","Hi, can you please rebase this on master?
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,157,2017-08-13T19:59:27Z,2018-03-15T18:05:28Z,2018-03-15T18:05:28Z,CLOSED,False,85,87,1,https://github.com/bytesuji,various grammar and formatting improvements,1,[],https://github.com/OpenRC/openrc/pull/157,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/157#issuecomment-368251792,"I was reading the guide and noticed that it could be cleaned up, so I did so. Nothing too unorthodox.","Hi, I'm sorry I've not been able to get to this p/r.
There have been a number of changes to the documentation, can you please update this based on the current documentation?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,157,2017-08-13T19:59:27Z,2018-03-15T18:05:28Z,2018-03-15T18:05:28Z,CLOSED,False,85,87,1,https://github.com/bytesuji,various grammar and formatting improvements,1,[],https://github.com/OpenRC/openrc/pull/157,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/157#issuecomment-373470823,"I was reading the guide and noticed that it could be cleaned up, so I did so. Nothing too unorthodox.","Please re-open and update this pull request based on the current master branch, or create a new one,  and I'll look at merging it.
Thanks much,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,161,2017-08-24T02:43:57Z,2017-11-30T19:58:00Z,2017-11-30T19:58:00Z,CLOSED,False,71,52,1,https://github.com/willmmiles,Fix repeated dependency cache rebuild if clock skewed ,1,[],https://github.com/OpenRC/openrc/pull/161,https://github.com/willmmiles,1,https://github.com/OpenRC/openrc/pull/161,"I ran in to an issue with the clock skew workaround in _rc_deptree_load() when doing an initial boot of a freshly created system where the new machine had the wrong time:  the dependency cache would get rebuilt for almost every service that started up.   I tracked it to the early-exit behavior of rc_deptree_update_needed() -- the clock skew workaround requires the newest possible file, not the timestamp of the first thing found that would trigger a rebuild.
This patch modifies rc_deptree_update_needed() to always run a whole scan and return the information of the newest file found.   As a bonus, we stat() the cache file only once, instead of once for every file considered.","I ran in to an issue with the clock skew workaround in _rc_deptree_load() when doing an initial boot of a freshly created system where the new machine had the wrong time:  the dependency cache would get rebuilt for almost every service that started up.   I tracked it to the early-exit behavior of rc_deptree_update_needed() -- the clock skew workaround requires the newest possible file, not the timestamp of the first thing found that would trigger a rebuild.
This patch modifies rc_deptree_update_needed() to always run a whole scan and return the information of the newest file found.   As a bonus, we stat() the cache file only once, instead of once for every file considered.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,162,2017-09-05T21:36:38Z,2018-01-08T20:06:59Z,2018-01-08T20:06:59Z,CLOSED,False,381,0,1,https://github.com/orlitzky,SERVICE-DOS-AND-DONTS.md: new tips document for service writers,1,[],https://github.com/OpenRC/openrc/pull/162,https://github.com/orlitzky,1,https://github.com/OpenRC/openrc/pull/162,"Looking for initial feedback on this.
I'm willing to change the name, but be aware that my second choice is TIPS4SCRIPS.md =)","Looking for initial feedback on this.
I'm willing to change the name, but be aware that my second choice is TIPS4SCRIPS.md =)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,162,2017-09-05T21:36:38Z,2018-01-08T20:06:59Z,2018-01-08T20:06:59Z,CLOSED,False,381,0,1,https://github.com/orlitzky,SERVICE-DOS-AND-DONTS.md: new tips document for service writers,1,[],https://github.com/OpenRC/openrc/pull/162,https://github.com/mrueg,2,https://github.com/OpenRC/openrc/pull/162#issuecomment-328087616,"Looking for initial feedback on this.
I'm willing to change the name, but be aware that my second choice is TIPS4SCRIPS.md =)","I would suggest to call the file Service, ""ServiceDefinition"" or ""InitDefinition""",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,162,2017-09-05T21:36:38Z,2018-01-08T20:06:59Z,2018-01-08T20:06:59Z,CLOSED,False,381,0,1,https://github.com/orlitzky,SERVICE-DOS-AND-DONTS.md: new tips document for service writers,1,[],https://github.com/OpenRC/openrc/pull/162,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/162#issuecomment-331245048,"Looking for initial feedback on this.
I'm willing to change the name, but be aware that my second choice is TIPS4SCRIPS.md =)","This was just brought to my attention, and I see a couple of things:
/run is only good for Linux, /var/run is more likely what people will want on other OS's.
The document really doesn't explain its purpose, so you might want to start by doing that.
A number of the tips about backgrounding and the pid files only apply if using start-stop-daemon to start the daemon. Take a look at the other markdown documents to see what I'm talking about for this, and I'll answer any questions I can.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,162,2017-09-05T21:36:38Z,2018-01-08T20:06:59Z,2018-01-08T20:06:59Z,CLOSED,False,381,0,1,https://github.com/orlitzky,SERVICE-DOS-AND-DONTS.md: new tips document for service writers,1,[],https://github.com/OpenRC/openrc/pull/162,https://github.com/orlitzky,4,https://github.com/OpenRC/openrc/pull/162#issuecomment-353653944,"Looking for initial feedback on this.
I'm willing to change the name, but be aware that my second choice is TIPS4SCRIPS.md =)","I finally got back to work on this. I added a short ""statement of purpose"" to the top that explains what the document is about, mentioned /var/run, added a new section on ""need net"" dependencies, and cleaned up some more minor issues.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,162,2017-09-05T21:36:38Z,2018-01-08T20:06:59Z,2018-01-08T20:06:59Z,CLOSED,False,381,0,1,https://github.com/orlitzky,SERVICE-DOS-AND-DONTS.md: new tips document for service writers,1,[],https://github.com/OpenRC/openrc/pull/162,https://github.com/orlitzky,5,https://github.com/OpenRC/openrc/pull/162#issuecomment-353758642,"Looking for initial feedback on this.
I'm willing to change the name, but be aware that my second choice is TIPS4SCRIPS.md =)",I renamed the file to something less cheeky but more awkward shruuuuug,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,169,2017-10-16T21:50:50Z,,2021-12-31T00:45:52Z,OPEN,False,4,0,1,https://github.com/floppym,start-stop-daemon: check for errors when opening /dev/null and /dev/tty,1,[],https://github.com/OpenRC/openrc/pull/169,https://github.com/floppym,1,https://github.com/OpenRC/openrc/pull/169,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,169,2017-10-16T21:50:50Z,,2021-12-31T00:45:52Z,OPEN,False,4,0,1,https://github.com/floppym,start-stop-daemon: check for errors when opening /dev/null and /dev/tty,1,[],https://github.com/OpenRC/openrc/pull/169,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/169#issuecomment-348304276,,"@floppym Do we need to do this in supervise-daemon as well? if so, can you update it as well on this p/r?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,171,2017-10-26T17:28:42Z,2021-09-06T01:02:43Z,2021-09-06T01:02:43Z,CLOSED,False,1458,0,21,https://github.com/liugang,support meson buildsystem,1,[],https://github.com/OpenRC/openrc/pull/171,https://github.com/liugang,1,https://github.com/OpenRC/openrc/pull/171,"Openrc can build with meson, now
Usage:
pip3 install meson

wget https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip
unzip -x ninja-linux.zip
chmod 755 ninja
cp ninja /usr/local/bin

meson builddir
ninja -C builddir
DESTDIR=out ninja -C builddir install

ninja check same as make check/test, but can't work, now, it need update shell scripts.
ninja test , can run all unit tests case,  see: http://mesonbuild.com/Unit-tests.html
These command can be use to developer to debug:
meson test --wrap=valgrind testname, meson test --gdb testname, meson test --repeat=10
you can generate coverage reports by giving Meson the command line flag -Db_coverage=true
meson -Db_coverage=true builddir; 
ninja -C builddir test

cross compile:
just write a config file like below: e.g. crossbuild.ini
[binaries]
c = '/usr/bin/arm-linux-gnueabi-gcc'
cpp = '/usr/bin/arm-linux-gnueabi-g++'
ar = '/usr/bin/arm-linux-gnueabi-ar'
strip = '/usr/bin/arm-linux-gnueabi-strip'

[host_machine]
system = 'linux'
cpu_family = 'arm'
cpu = 'arm'
endian = 'little'

and run meson builddir --cross-file crossbuild.ini","Openrc can build with meson, now
Usage:
pip3 install meson

wget https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip
unzip -x ninja-linux.zip
chmod 755 ninja
cp ninja /usr/local/bin

meson builddir
ninja -C builddir
DESTDIR=out ninja -C builddir install

ninja check same as make check/test, but can't work, now, it need update shell scripts.
ninja test , can run all unit tests case,  see: http://mesonbuild.com/Unit-tests.html
These command can be use to developer to debug:
meson test --wrap=valgrind testname, meson test --gdb testname, meson test --repeat=10
you can generate coverage reports by giving Meson the command line flag -Db_coverage=true
meson -Db_coverage=true builddir; 
ninja -C builddir test

cross compile:
just write a config file like below: e.g. crossbuild.ini
[binaries]
c = '/usr/bin/arm-linux-gnueabi-gcc'
cpp = '/usr/bin/arm-linux-gnueabi-g++'
ar = '/usr/bin/arm-linux-gnueabi-ar'
strip = '/usr/bin/arm-linux-gnueabi-strip'

[host_machine]
system = 'linux'
cpu_family = 'arm'
cpu = 'arm'
endian = 'little'

and run meson builddir --cross-file crossbuild.ini",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,175,2017-10-31T16:46:08Z,2021-09-06T01:02:44Z,2021-09-06T01:02:44Z,MERGED,True,1197,2,29,https://github.com/williamh,add meson build files,1,[],https://github.com/OpenRC/openrc/pull/175,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/175,,,True,{'THUMBS_DOWN': ['https://github.com/orbea']}
OpenRC/openrc,https://github.com/OpenRC/openrc,175,2017-10-31T16:46:08Z,2021-09-06T01:02:44Z,2021-09-06T01:02:44Z,MERGED,True,1197,2,29,https://github.com/williamh,add meson build files,1,[],https://github.com/OpenRC/openrc/pull/175,https://github.com/liugang,2,https://github.com/OpenRC/openrc/pull/175#issuecomment-341122075,,"rootlibdir = join_paths(rootprefix, get_option('libdir').split('/')[-1])

on x86_64, it will be x86_64-linux-gnu, after install, it will be /x86_64-linux-gnu.
normally, meson will install to /usr/lib/x86_64-linux-gnu/ on x86_64.
Need use add_project_arguments(cc_flags,  language : 'c') instead of add_global_arguments(cc_flags,  language : 'c'), because any project can be used as a subproject.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,175,2017-10-31T16:46:08Z,2021-09-06T01:02:44Z,2021-09-06T01:02:44Z,MERGED,True,1197,2,29,https://github.com/williamh,add meson build files,1,[],https://github.com/OpenRC/openrc/pull/175,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/175#issuecomment-341149778,,"I changed add_global_arguments to add_project_arguments.
Also, I added messages at the bottom of the build so we can see the default root paths. It looks to me like the default libdir is  lib64 on linux/amd64, which means the default rootlibdir is /lib64.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,175,2017-10-31T16:46:08Z,2021-09-06T01:02:44Z,2021-09-06T01:02:44Z,MERGED,True,1197,2,29,https://github.com/williamh,add meson build files,1,[],https://github.com/OpenRC/openrc/pull/175,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/175#issuecomment-398147962,,"@liugang This is the start of a new release cycle, so I want to re-visit getting this in the tree. Can  you take a look and let me know what you can see that I may have missed?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,175,2017-10-31T16:46:08Z,2021-09-06T01:02:44Z,2021-09-06T01:02:44Z,MERGED,True,1197,2,29,https://github.com/williamh,add meson build files,1,[],https://github.com/OpenRC/openrc/pull/175,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/175#issuecomment-450691719,,"@liugang If you are still around, can you take a look at the latest version of this? it would be nice to have your input. :-)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,181,2017-11-12T11:32:31Z,2017-11-14T18:48:22Z,2017-11-14T18:48:26Z,CLOSED,False,62,10,6,https://github.com/iDarkTemplar,Temporarily change euid and egid when searching for processes with sp…,1,[],https://github.com/OpenRC/openrc/pull/181,https://github.com/iDarkTemplar,1,https://github.com/OpenRC/openrc/pull/181,"…ecific pid.
This should fix #180
gentoo/gentoo#6176 is also needed to fix issue with git-daemon","…ecific pid.
This should fix #180
gentoo/gentoo#6176 is also needed to fix issue with git-daemon",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,181,2017-11-12T11:32:31Z,2017-11-14T18:48:22Z,2017-11-14T18:48:26Z,CLOSED,False,62,10,6,https://github.com/iDarkTemplar,Temporarily change euid and egid when searching for processes with sp…,1,[],https://github.com/OpenRC/openrc/pull/181,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/181#issuecomment-344015722,"…ecific pid.
This should fix #180
gentoo/gentoo#6176 is also needed to fix issue with git-daemon","Can you please check the patch I posted on the original issue? If you are just running into a permission issue when checking the name spaces, I would rather just skip checking the name spaces than change uid/gid to avoid the permission issue.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,181,2017-11-12T11:32:31Z,2017-11-14T18:48:22Z,2017-11-14T18:48:26Z,CLOSED,False,62,10,6,https://github.com/iDarkTemplar,Temporarily change euid and egid when searching for processes with sp…,1,[],https://github.com/OpenRC/openrc/pull/181,https://github.com/iDarkTemplar,3,https://github.com/OpenRC/openrc/pull/181#issuecomment-344016534,"…ecific pid.
This should fix #180
gentoo/gentoo#6176 is also needed to fix issue with git-daemon",I already did and responded in original issue: #180 (comment),True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,181,2017-11-12T11:32:31Z,2017-11-14T18:48:22Z,2017-11-14T18:48:26Z,CLOSED,False,62,10,6,https://github.com/iDarkTemplar,Temporarily change euid and egid when searching for processes with sp…,1,[],https://github.com/OpenRC/openrc/pull/181,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/181#issuecomment-344092159,"…ecific pid.
This should fix #180
gentoo/gentoo#6176 is also needed to fix issue with git-daemon","I will keep this open for a release or so to monitor for more issues, but I don't think we need to do this since the issue that it addresses is actually in librc itself.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,181,2017-11-12T11:32:31Z,2017-11-14T18:48:22Z,2017-11-14T18:48:26Z,CLOSED,False,62,10,6,https://github.com/iDarkTemplar,Temporarily change euid and egid when searching for processes with sp…,1,[],https://github.com/OpenRC/openrc/pull/181,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/181#issuecomment-344092418,"…ecific pid.
This should fix #180
gentoo/gentoo#6176 is also needed to fix issue with git-daemon","The searching is done in rc_find_pids, so it would probably be better to do anything like this there than in either of the supervisors.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,181,2017-11-12T11:32:31Z,2017-11-14T18:48:22Z,2017-11-14T18:48:26Z,CLOSED,False,62,10,6,https://github.com/iDarkTemplar,Temporarily change euid and egid when searching for processes with sp…,1,[],https://github.com/OpenRC/openrc/pull/181,https://github.com/iDarkTemplar,6,https://github.com/OpenRC/openrc/pull/181#issuecomment-344358291,"…ecific pid.
This should fix #180
gentoo/gentoo#6176 is also needed to fix issue with git-daemon",Closing this request since issue is fixed in 0.34.7.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,1,https://github.com/OpenRC/openrc/pull/182,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/182#issuecomment-345114054,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Hello,
The issue is not with loading the modules. All modules should be loaded as early as possible. That is why we order the modules and modules-load services the way we do.
The problem is that when services get hotplugged, they get pulled out of the normal boot sequence. So you get situations where services are starting much earlier than they would when they are not hotplugged.
This is off by default because we have no way of knowing how your system is configured. You are discussing the root file system, but /var can also come into play, and if you are using /var on a separate file system, is it a local file system, or is it a network filesystem? We don't know so we don't try to set up hotplugging services by default.
You are saying that the root filesystem being r/w would solve a lot of this, but that's not really the case. Remember that /var can be on its own file system as well, so we would have to check for that, and in theory /var can be a local filesystem or even a network file system.
Also, since the services you are hotplugging are being pulled out of the default runlevel to begin with, this modules-late service wouldn't be the answer.
The answer would be to add the appropriate rc_net_if_need=""foo bar bas"" lines to /etc/conf.d/net if you are doing this to make sure the appropriate services are run.
I will warn you though, that hotplugging services and sorting out what should run when will be messy; this is why hotplugging services is off by default.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,3,https://github.com/OpenRC/openrc/pull/182#issuecomment-345118221,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","The problem is that when services get hotplugged, they get pulled out of the normal boot sequence.
So you get situations where services are starting much earlier than they would when they are not
hotplugged.

Yes, that's the problem.
Some services should start only when the ""default"" runlevel is reached, but due to hotplugging are started when the ""boot"" runlevel is still running.
That's why this pull request introduces a ""modules-late"" service that is supposed to be in the ""default""
runlevel.
Modules loaded by this service can then safely cause hotplugging of services from the ""default""
runlevel.

You are discussing the root file system, but /var can also come into play, and if you are using /var
on a separate file system, is it a local file system, or is it a network filesystem?

This (root file system) was used only as an example, as you said the problem could happen also when some other file system (that is not mounted yet or not mounted read / write yet) is needed by some hotplugged service triggered by a module loaded by the ""modules"" service.

Also, since the services you are hotplugging are being pulled out of the default runlevel to begin with,
this modules-late service wouldn't be the answer.

This ""modules-late"" service is supposed to be in the ""default"" runlevel so it is fine if it causes some
services from this runlevel to start.

I will warn you though, that hotplugging services and sorting out what should run when will be messy;
this is why hotplugging services is off by default.

All right, but hotplugging is needed for things like USB network cards that can be plugged in at any time (or alternatively could remain plugged in all the time during a system startup).
What I would like to underline is that this is a second time such problem occurred (previously there
was a problem with USB modems and usb_modeswitch, now with WiFi NICs and wpa_supplicant / dhcpcd) which is solved by introducing this service (I have tested this, naturally).
As I wrote in the description of this pull request, it can be reasonably expected that similar issues will pop up in the future, again.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/LW-archlinux,4,https://github.com/OpenRC/openrc/pull/182#issuecomment-345253456,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Some modules, when loaded, trigger hotplugging of services

I am not aware of any kernel modules that require services.
Do you mean devices that depend on a certain module ALSO need services running to be used succesfully ?
This sounds like something that could be solved much easier with a custom (e)udev rule.
http://www.reactivated.net/writing_udev_rules.html , check the advanced topics .",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,5,https://github.com/OpenRC/openrc/pull/182#issuecomment-345255408,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","I am not aware of any kernel modules that require services.

Examples: USB network cards, USB modems, network cards that can be either present or not present during particular system startup in general...

This sounds like something that could be solved much easier with a custom (e)udev rule

That's exactly how network interface service hotplugging is currently triggered (via udev) - see
/lib/udev/rules.d/90-network.rules.
This problem is not dependent on what exactly triggers the hotplugging, only that it can be triggered
when a module loads.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,6,https://github.com/OpenRC/openrc/pull/182#issuecomment-345257540,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","It is also worth noting that even with service hotplugging disabled this problem will still occur if a udev
rule triggered by loading a kernel module needs something like root file system mounted read / write
(or more generally, a completed ""boot"" runlevel) - in fact that's exactly what happened previously with usb_modeswitch.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/LW-archlinux,7,https://github.com/OpenRC/openrc/pull/182#issuecomment-345261752,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","I have  a lot of expereince with IT troubleshooting, hardeware/software, cdesktop / servers and there's one rule i try to stick to always : treat the root cause , not the symptoms .
module already loaded is not enough to use device effectively is  a symptom .
The root cause : insertion of a device when the system doesn't have everything in place needed.
Solve the root cause by triggering something on device insertion that makes sure everything that's needed is started.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,8,https://github.com/OpenRC/openrc/pull/182#issuecomment-345265118,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Solve the root cause by triggering something on device insertion that makes sure everything that's
needed is started.

You get a circular dependency this way.
From this PR description:

We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.

The ""root"" service needs to be started after ""fsck"",
the ""fsck"" service needs to be started after ""modules"".
But due to issues described in this PR the ""modules"" service needs to be started after ""root"".
This PR solves this circular dependency by splitting the ""modules"" service into two parts:

The first one which is needed by the ""fsck"" service (the old ""modules"" service),
The second one which needs the ""root"" service (the new ""modules-late"" service).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/LW-archlinux,9,https://github.com/OpenRC/openrc/pull/182#issuecomment-345280907,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","You claim that some modules need to be started after ""root"" , but i think that's due to a flawed analysis.
Let's see if i can help with the problem analysis.
First let's get a clear picture of the problem.
examples you gave :

wireless  card needs wpa_supplicant, wpa_supplicant needs dbus service
usb modem needs write access to /var (probably needs localmount service for that )

There are (atleast) 2 ways to have openrc start services on demand :

use of rc_hotplug variable in rc.conf
triggered by an external program like udev (using rc-service )

What triggers the problem

external program
device insertion detected by kernel/udev
both
something else  ?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,10,https://github.com/OpenRC/openrc/pull/182#issuecomment-345284934,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","wireless card needs wpa_supplicant, wpa_supplicant needs dbus service

Also dhcpd needs /var/lib/dhcpcd/ writable (provided by ""root"" or ""localmount"" service) both for wireless and wired NICs as long as they use dhcpd for their configuration.

usb modem needs write access to /var (probably needs localmount service for that )

usb_modeswitch used to need write access to /tmp (this has been worked around for now, however an
underlying problem remains).

What triggers the problem

Usually it is triggered by a module being loaded by ""modules"" service on boot but you can assume that if you plug in a device in wrong moment (when the boot runlevel is still being started) it can happen then via a module loaded on kernel request, too.
Generally, what triggers it is a module load which then triggers a udev event which triggers some application (directly or via some hotplugged service) which needs the things described above.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/robbat2,11,https://github.com/OpenRC/openrc/pull/182#issuecomment-345313548,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","As the netifrc maintainer, I would like to bring a further view to the table. Because even the modules-late proposal is problematic when a given module is built into the kernel. It's also not limited to networking.
What we know:

The system is in the boot or sysinit runlevel.
udev is running.
The module gets loaded or is already built into the kernel.
The kernel generates an event for the device appearing.
udev gets the event.
udev fires a hotplug script fires for the event, per some rules:

25-gpsd.rules
70-spice-webdavd.rules
90-network.rules
99-pcscd-hotplug
99-space-navigator.rules
others...


The hotplug script starts or tries to start a service.
The service is meant for usage during the default runlevel, and causes many other services to start because it's too early.

The modules-load proposal tries to defer the problem, and only load the module when we are in the default runlevel. This won't work if the kernel code was built-in instead of a module, or already loaded by the initramfs.
I think that OpenRC should capture the start event, and delay starting the service until a later runlevel.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,12,https://github.com/OpenRC/openrc/pull/182#issuecomment-345319300,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Thanks for your input Robin.

This won't work if the kernel code was built-in instead of a module, or already loaded by the
initramfs.

I think these cases are a parallel, but a bit different problem, since they are handled by coldplugging
as OpenRC isn't running yet when these devices are instantiated.
Some coldplugging could be deferred, too.

I think that OpenRC should capture the start event, and delay starting the service until a later
runlevel.

I agree that this would be the best solution to this issue, as long as udev events can be delayed, too
(since they can launch programs like usb_modeswitch).
However, since I don't know OpenRC internals I don't know how big a change is needed to implement
such functionality.
Since the problem is occurring right now if that solution will only be available at an unspecified future time then it would be best to have for now at least something that works.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,13,https://github.com/OpenRC/openrc/pull/182#issuecomment-373943524,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Rebased this pull request onto current master.
It is worth noting that I have OpenRC with this change deployed for few months already on few
machines without any issues.
Also, this is a backward-compatible change: nothing changes for existing OpenRC setups, unless
a user specifically starts to make use of new functionalities added by it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,14,https://github.com/OpenRC/openrc/pull/182#issuecomment-471310006,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.",Rebased this pull request onto current master.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/williamh,15,https://github.com/OpenRC/openrc/pull/182#issuecomment-748690280,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Let's revive discussion here a bit.
To be honest, I've never set RC_HOTPLUG to any value in OpenRC, so I do not see the value of hotplugging services.
Given how problematic hotplugging services is as discussed in this mr, I think I would rather go the opposite direction and not allow it.
Since it isn't on by default in the first place, are there a number of people using it? Would this feature be missed?
Let me know what you think.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,16,https://github.com/OpenRC/openrc/pull/182#issuecomment-748962924,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Hotplugging is needed for devices on hot-pluggable buses like USB or even PCIe (ExpressCard or virtualization) since they can show up at any time, and then the relevant service needs to be started (network, pcsc-lite, usbmuxd, ...).
I am using this functionality to have reliable wireless and 3G modem support at boot for more than 3 years now.
Before that, I was hitting race conditions with respect to the services in the ""boot"" runlevel.
Rebased this pull request onto current master.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/williamh,17,https://github.com/OpenRC/openrc/pull/182#issuecomment-749094799,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","I'm just brain-storming, but I wonder if the better answer would be to make sure the hotplugged services don't start until after the boot runlevel is completed?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,18,https://github.com/OpenRC/openrc/pull/182#issuecomment-749228677,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Not only hotplugged services would need to be delayed until the ""boot"" runlevel completes, but udev events too since some of them need root fs mounted read / write (for example these that call usb_modeswitch).
But then there is a problem that some of these udev events might be needed for the ""boot"" runlevel services.
For example, events configuring block devices (and their handlers) may be needed for the ""localmount"" service.
These udev events would need to be split into instant and delayed ones.
In the end it basically would be the same solution as when splitting the ""modules"" service (which is what this pull request does).
Only it would probably be harder to configure for an user, since udev events aren't normally user-visible. Unlike module names.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/lu-zero,19,https://github.com/OpenRC/openrc/pull/182#issuecomment-749609732,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","We'd need to consider adding the concept of delayed dependency so when we are made aware of an event and the service that would trigger is in another runlevel not yet reached its activation would be scheduled once you get in that runlevel.
Would be nice to add the whole machinery so you can
rc-update add-hotplugged foo runlevel
rc-update del-hotplugged foo runlevel

I guess would have the simplest user-experience
Implementation-wise we could add a subdirectory hotpluggable to the runlevel
/etc/runlevels/default/hotpluggable

And either default to ignore events if the service is not present or have per-service default runlevel. So something that makes sense to start on boot can tell.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,20,https://github.com/OpenRC/openrc/pull/182#issuecomment-749664796,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","As I wrote in my previous message, delaying just OpenRC services would not solve the udev event part.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/lu-zero,21,https://github.com/OpenRC/openrc/pull/182#issuecomment-749788997,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","If the udev part depends on a specific system state that depends on an openrc service in general, it would be good to make so it works correctly by having udev trigger openrc and having openrc make sure the required services are available before.
Alternatively I would push your approach further and have the modules initscript behave like netifrc. This way the user would a good way to load groups of modules with a good amount of granularity.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/williamh,22,https://github.com/OpenRC/openrc/pull/182#issuecomment-749805925,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","I'm still working on wrapping my head around this; I am trying to understand how other init systems handle it.
Here is what I think I know so far.
Kernel modules can be loaded at several points during the boot sequence:

they can be built in
they can be loaded from an initramfs
they can be loaded by udev
the modules service can load them

No matter when they are loaded in the sequence, they trigger events, which cause udev rules to be run, and these rules can do things that are outside our control and need access to things that may not be available during early boot.
An I correct so far?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/williamh,23,https://github.com/OpenRC/openrc/pull/182#issuecomment-749810247,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","@maciejsszmigiero  I have another question specifically for you.
I'm not sure it matters, but please bear with me. In /etc/rc.conf, do you have RC_HOTPLUG set? If so, what is it set to?
Thanks much.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,24,https://github.com/OpenRC/openrc/pull/182#issuecomment-749819978,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","If the udev part depends on a specific system state that depends on an openrc service in general, it would be good to make so it works correctly by having udev trigger openrc and having openrc make sure the required services are available before.

The problem is that some udev events are needed also for the services in the ""boot"" runlevel.
For example, events configuring block devices (and their handlers) may be needed for the ""localmount"" service.
So, these udev events would need to be split into instant and delayed ones.
In the end it basically would be the same solution as when splitting the ""modules"" service.

No matter when they are loaded in the sequence, they trigger events, which cause udev rules to be run, and these rules can do things that are outside our control and need access to things that may not be available during early boot.
An I correct so far?

Yes.
A small footnote here: please note that situation for the modules that are built-in into the kernel (and, to some extent, these loaded by initramfs, too) is different: their events are processed as ""coldplug events"" by the ""udev-trigger"" service when this service starts.
While the udev events generated by the modules loaded by the ""modules"" service are processed directly when they get loaded (well, more or less so, technically the event processing is asynchronous).

In /etc/rc.conf, do you have RC_HOTPLUG set? If so, what is it set to?

I have it set to allow hotplugging of all services:

rc_hotplug=""*""",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,182,2017-11-15T18:58:25Z,,2022-01-16T14:09:34Z,OPEN,False,37,9,5,https://github.com/maciejsszmigiero,"add ""modules-late"" service",1,[],https://github.com/OpenRC/openrc/pull/182,https://github.com/maciejsszmigiero,25,https://github.com/OpenRC/openrc/pull/182#issuecomment-1013883015,"Some modules, when loaded, trigger hotplugging of services that in turn
need some services from the ""default"" runlevel (like dbus) or which need
local filesystems to be mounted (including the root filesystem (re)mounted
read / write).
This is especially true for devices like NICs or USB modems, but almost
certainly not limited to them.
For example, in current netifrc a wireless NIC handled by wpa_supplicant
module needs dbus service to be started (if wpa_supplicant was built with
dbus support) and these NICs which are handled by dhcpcd need
/var/lib/dhcpcd/ writable (in practice this most often means a need to
have the root filesystem writable).
We order the normal ""modules"" service before ""fsck"" service (and so before
remounting the root fs read / write) so filesystems that are on devices
that need some modules loaded can be checked.
There used to be also a problem with usb_modeswitch needing a write access
to the root filesystem when switching mode of an USB modem (see Gentoo bug
565262). It was possible to work it around that time, but since programs
are clearly expecting a root fs being writable it can be reasonably
expected that similar issues will pop up in the future.
To fix this once for all let's introduce a ""modules-late"" service started
early in the ""default"" runlevel which can be used to load modules that have
the requirements described above.
This service is implemented via a slight modification of the existing
""modules"" script.","Rebased this pull request onto current master.
Since this patch solves a real issue (that I explained in many comments here over the last 4+ years) I would like to have it finally merged.
Thanks.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,183,2017-11-15T18:59:18Z,,2022-01-21T21:52:11Z,OPEN,False,53,13,2,https://github.com/maciejsszmigiero,enhance cgroup support,1,[],https://github.com/OpenRC/openrc/pull/183,https://github.com/maciejsszmigiero,1,https://github.com/OpenRC/openrc/pull/183,"Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.","Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,183,2017-11-15T18:59:18Z,,2022-01-21T21:52:11Z,OPEN,False,53,13,2,https://github.com/maciejsszmigiero,enhance cgroup support,1,[],https://github.com/OpenRC/openrc/pull/183,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/183#issuecomment-345354734,"Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.","I'm open to having a prefix, but I don't think we should allow the cgroup name to be configurable. It would bee very easy for users to end up with collisions.
Also, I'm curious why you want to add a service to a controller without changing any of its settings?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,183,2017-11-15T18:59:18Z,,2022-01-21T21:52:11Z,OPEN,False,53,13,2,https://github.com/maciejsszmigiero,enhance cgroup support,1,[],https://github.com/OpenRC/openrc/pull/183,https://github.com/maciejsszmigiero,3,https://github.com/OpenRC/openrc/pull/183#issuecomment-345358213,"Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.","I'm open to having a prefix, but I don't think we should allow the cgroup name to be configurable.
It would bee very easy for users to end up with collisions.

It is not a problem if two services end with the same cgroup name, since this setting is only used
for particular controllers like ""cpu"" or ""pids"" -  the service name in the ""openrc"" hierarchy is not affected by this setting.
In fact, placing two services in an one cgroup will allow them to share things like io limits without needing to place them both in an intermediate cgroup.

Also, I'm curious why you want to add a service to a controller without changing any of its settings?

I have a centralized script where all the cgroups settings are configured (not only for services).
Truth is, I could ask OpenRC to set a some random setting in each controller and then override it anyway but this way looks neater (we also have something similar already for a ""cpuacct"" controller).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,183,2017-11-15T18:59:18Z,,2022-01-21T21:52:11Z,OPEN,False,53,13,2,https://github.com/maciejsszmigiero,enhance cgroup support,1,[],https://github.com/OpenRC/openrc/pull/183,https://github.com/maciejsszmigiero,4,https://github.com/OpenRC/openrc/pull/183#issuecomment-373943683,"Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.","Rebased this pull request onto current master.
Just as it is in the case of #182 I have OpenRC with this change deployed for few months already on
few machines without any issues and also this is a backward-compatible change: nothing changes for
existing OpenRC setups, unless a user specifically starts to make use of new functionalities added by
it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,183,2017-11-15T18:59:18Z,,2022-01-21T21:52:11Z,OPEN,False,53,13,2,https://github.com/maciejsszmigiero,enhance cgroup support,1,[],https://github.com/OpenRC/openrc/pull/183,https://github.com/maciejsszmigiero,5,https://github.com/OpenRC/openrc/pull/183#issuecomment-471310020,"Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.",Rebased this pull request onto current master.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,183,2017-11-15T18:59:18Z,,2022-01-21T21:52:11Z,OPEN,False,53,13,2,https://github.com/maciejsszmigiero,enhance cgroup support,1,[],https://github.com/OpenRC/openrc/pull/183,https://github.com/maciejsszmigiero,6,https://github.com/OpenRC/openrc/pull/183#issuecomment-749608004,"Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.",Rebased this pull request onto current master.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,183,2017-11-15T18:59:18Z,,2022-01-21T21:52:11Z,OPEN,False,53,13,2,https://github.com/maciejsszmigiero,enhance cgroup support,1,[],https://github.com/OpenRC/openrc/pull/183,https://github.com/robbat2,7,https://github.com/OpenRC/openrc/pull/183#issuecomment-1015909716,"Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.","@maciejsszmigiero question on this PR.
Does this clean up properly if the user modifies the cgroup name while the service is running?
E.g. these steps
0. Service is not yet started.

modify /etc/conf.d/bar set the cgroup_name to a specific value, e.g. bar
start service bar
modify /etc/conf.d/bar set the cgroup_name to a different specific value, e.g. baz
stop or restart the service

Does it correctly use the bar cgroup for stopping, then baz for starting up again? Does the old cgroup get cleaned up?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,183,2017-11-15T18:59:18Z,,2022-01-21T21:52:11Z,OPEN,False,53,13,2,https://github.com/maciejsszmigiero,enhance cgroup support,1,[],https://github.com/OpenRC/openrc/pull/183,https://github.com/maciejsszmigiero,8,https://github.com/OpenRC/openrc/pull/183#issuecomment-1018891079,"Add a possibility to:


Set a cgroup name for a service,


Set a cgroup name prefix for services that don't have an explicit cgroup
name set by the previous feature.
This allows defining, for example, a root ""services"" cgroup, under which
children cgroups for particular services are kept,


Add a service to a controller without needing to set any of its settings,


Keep a service cgroup when it becomes empty (for example to keep between
service restarts some cgroup settings that were set outside OpenRC).


These functionalities allow configuration of a service cgroup name for v1
controllers and v2 (unified) hierarchy; the service name in the ""openrc""
hierarchy is not affected by these settings.
The default values are set in a way so not to result in any change of
services cgroup behavior unless specifically configured in a different way
by an user.","@robbat2 I guess by ""clean up properly"" you mean whether all tasks in the old cgroup will get killed in your scenario (rather than just the pid monitored by start-stop-daemon, which is a separate thing from cgroups).
Currently, this isn't the case.
Since likely this isn't the answer you were expecting I will modify this PR to store the current cgroup name using service_set_value to maintain its consistency between start and stop operations.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/j8r,1,https://github.com/OpenRC/openrc/pull/184,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.","Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/184#issuecomment-345388294,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.","Please stay with command_user.
Also, please document all new variables you add on the openrc-run.8 man page.
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/j8r,3,https://github.com/OpenRC/openrc/pull/184#issuecomment-345396043,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.","Hi William,
Ok I will add docs on the man pages.
Why having --user and --group and not having their equivalent variables, like all other ones? In order to be consistent, we should change to --command_user too.
By the way, I suppose we will need to change to command_group, command_stdout, command_stderr etc... That seems quite verbose IMHO.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/j8r,4,https://github.com/OpenRC/openrc/pull/184#issuecomment-345515363,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.","Voila, docs in the openrc-run.8 added with command_user, command_group,  command_stdout,  command_stderr.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/184#issuecomment-345851332,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.","@j8r Not necessarily, if we want to move toward getting rid of the ""command_"" prefix, just don't add it to any new variables you add then we can transition away from it later.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/j8r,6,https://github.com/OpenRC/openrc/pull/184#issuecomment-345853209,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.",@williamh Really? Nice! I didn't know what direction you would like to take - adding command_ to each argument directly related to the command itself. We can get rid of all command_ and keep accepting both user and command_user for the moment.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/williamh,7,https://github.com/OpenRC/openrc/pull/184#issuecomment-347998494,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.","@j8r I added most of these, with slightly different names, but I didn't add group. The reason for that is I'm considering another path. Currently command_user can be either ""user"" or ""user:group"", but I'm thinking about adding a third form, "":group"" which would not change the user but would change the group.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/j8r,8,https://github.com/OpenRC/openrc/pull/184#issuecomment-348023704,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.","@williamh Why not, but I personally think that having one information per variable, in the form of key=value is clearer -  command_user=user and command_group=group compared to command_user=user and command_user=:group or command_user=user:group.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,184,2017-11-17T21:47:01Z,2017-11-29T22:53:06Z,2017-12-04T23:02:45Z,CLOSED,False,0,0,0,https://github.com/j8r,Add more arguments available as variables,0,[],https://github.com/OpenRC/openrc/pull/184,https://github.com/j8r,9,https://github.com/OpenRC/openrc/pull/184#issuecomment-348372451,"Brings more arguments available as variables in the service's configuration.
The small breaking change is the $command_user variable changed simply to $user, with the same name as its related argument, --user.","I see your commits - I would like to add also that if we keep the same logic of command_user, command_args etc, we should also have log_error, log_output. In the future who knows there could have new log related variables that will be able to follow the log_ schema.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,189,2017-12-09T22:23:14Z,2017-12-11T20:56:59Z,2017-12-12T10:22:00Z,CLOSED,False,4,4,1,https://github.com/mgreter,Gracefully handle unreadable /sys/class/net/dev/ nodes,1,[],https://github.com/OpenRC/openrc/pull/189,https://github.com/mgreter,1,https://github.com/OpenRC/openrc/pull/189,"Fixes https://bugs.gentoo.org/629228
The fix mentioned in the gentoo bug report is not enough.
On the first failing try, the variable x would be assigned the
value down from the second check. On a second failing try,
the conditional [ $x -eq 1 ] will print an error:
[: down: integer expression expected","Fixes https://bugs.gentoo.org/629228
The fix mentioned in the gentoo bug report is not enough.
On the first failing try, the variable x would be assigned the
value down from the second check. On a second failing try,
the conditional [ $x -eq 1 ] will print an error:
[: down: integer expression expected",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,189,2017-12-09T22:23:14Z,2017-12-11T20:56:59Z,2017-12-12T10:22:00Z,CLOSED,False,4,4,1,https://github.com/mgreter,Gracefully handle unreadable /sys/class/net/dev/ nodes,1,[],https://github.com/OpenRC/openrc/pull/189,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/189#issuecomment-350862964,"Fixes https://bugs.gentoo.org/629228
The fix mentioned in the gentoo bug report is not enough.
On the first failing try, the variable x would be assigned the
value down from the second check. On a second failing try,
the conditional [ $x -eq 1 ] will print an error:
[: down: integer expression expected","Hi, can you please take a look at the Gentoo bug? I added another modification there that I would like to use if it works.
The change I am suggesting will check for existance of the sys files before it reads them instead of suppressing the error messages.
Please respond on the bug and let me know if that works.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,189,2017-12-09T22:23:14Z,2017-12-11T20:56:59Z,2017-12-12T10:22:00Z,CLOSED,False,4,4,1,https://github.com/mgreter,Gracefully handle unreadable /sys/class/net/dev/ nodes,1,[],https://github.com/OpenRC/openrc/pull/189,https://github.com/mgreter,3,https://github.com/OpenRC/openrc/pull/189#issuecomment-351004624,"Fixes https://bugs.gentoo.org/629228
The fix mentioned in the gentoo bug report is not enough.
On the first failing try, the variable x would be assigned the
value down from the second check. On a second failing try,
the conditional [ $x -eq 1 ] will print an error:
[: down: integer expression expected","Hi, unfortunately all file tests return true, even though you will get an error on read.

https://bugzilla.redhat.com/show_bug.cgi?id=1253797
https://unix.stackexchange.com/questions/252002/help-testing-special-file-in-sys-class-net


I have also used the tests -b, -c, -f all of which fail to be able to distinguish between the 'readable' state of this file in /sys/class/net/wwan1/ - the 'bad' file, and /sys/class/net/wwan0/ - the 'good' file.

Will add this comment to the gentoo bug too once I'm home ...",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,190,2017-12-09T22:51:46Z,,2021-12-31T00:45:52Z,OPEN,False,17,2,2,https://github.com/mgreter,FR: Optionally wait for IP addresses,1,[],https://github.com/OpenRC/openrc/pull/190,https://github.com/mgreter,1,https://github.com/OpenRC/openrc/pull/190,"I have the need to also wait until dhcp has assigned some ip addresses to the
interfaces before starting my firewall. Not sure if you want to include this, as
it needs the ip command from iproute2 pkg, but I figured I'd create a PR
anyway.  Also included the bugfix from my other PR to avoid merge conflicts.
Thanks for consideration!","I have the need to also wait until dhcp has assigned some ip addresses to the
interfaces before starting my firewall. Not sure if you want to include this, as
it needs the ip command from iproute2 pkg, but I figured I'd create a PR
anyway.  Also included the bugfix from my other PR to avoid merge conflicts.
Thanks for consideration!",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,190,2017-12-09T22:51:46Z,,2021-12-31T00:45:52Z,OPEN,False,17,2,2,https://github.com/mgreter,FR: Optionally wait for IP addresses,1,[],https://github.com/OpenRC/openrc/pull/190,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/190#issuecomment-350867367,"I have the need to also wait until dhcp has assigned some ip addresses to the
interfaces before starting my firewall. Not sure if you want to include this, as
it needs the ip command from iproute2 pkg, but I figured I'd create a PR
anyway.  Also included the bugfix from my other PR to avoid merge conflicts.
Thanks for consideration!","@mgreter Please rebase on master and remove the code for the other pull request. Also, in the future, please avoid putting code from multiple pull requests together.
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,190,2017-12-09T22:51:46Z,,2021-12-31T00:45:52Z,OPEN,False,17,2,2,https://github.com/mgreter,FR: Optionally wait for IP addresses,1,[],https://github.com/OpenRC/openrc/pull/190,https://github.com/mgreter,3,https://github.com/OpenRC/openrc/pull/190#issuecomment-351008031,"I have the need to also wait until dhcp has assigned some ip addresses to the
interfaces before starting my firewall. Not sure if you want to include this, as
it needs the ip command from iproute2 pkg, but I figured I'd create a PR
anyway.  Also included the bugfix from my other PR to avoid merge conflicts.
Thanks for consideration!","Done, rebased to latest master. And sorry, just kept it in to avoid merge conflicts!",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,190,2017-12-09T22:51:46Z,,2021-12-31T00:45:52Z,OPEN,False,17,2,2,https://github.com/mgreter,FR: Optionally wait for IP addresses,1,[],https://github.com/OpenRC/openrc/pull/190,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/190#issuecomment-351167638,"I have the need to also wait until dhcp has assigned some ip addresses to the
interfaces before starting my firewall. Not sure if you want to include this, as
it needs the ip command from iproute2 pkg, but I figured I'd create a PR
anyway.  Also included the bugfix from my other PR to avoid merge conflicts.
Thanks for consideration!","@mgreter I like the concept, but I'm wondering if there is a more efficient way to do it that does not use head or grep. Also, you can test for the presence of the ip command with something like:
if [ -n ""$(command -v ip)"" ]; then
    # Now we know we have the ip command
fi",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,190,2017-12-09T22:51:46Z,,2021-12-31T00:45:52Z,OPEN,False,17,2,2,https://github.com/mgreter,FR: Optionally wait for IP addresses,1,[],https://github.com/OpenRC/openrc/pull/190,https://github.com/mgreter,5,https://github.com/OpenRC/openrc/pull/190#issuecomment-351645449,"I have the need to also wait until dhcp has assigned some ip addresses to the
interfaces before starting my firewall. Not sure if you want to include this, as
it needs the ip command from iproute2 pkg, but I figured I'd create a PR
anyway.  Also included the bugfix from my other PR to avoid merge conflicts.
Thanks for consideration!","It might be possible to use a construct like
if [[ $ipaddr == *""inet""* ]]; then
Will hopefully get around to test this upcoming weekend",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,191,2017-12-12T20:52:37Z,2017-12-12T22:59:26Z,2017-12-12T22:59:26Z,CLOSED,False,6,2,1,https://github.com/bell07,init.d/net-online wait for ping_test_host,1,[],https://github.com/OpenRC/openrc/pull/191,https://github.com/bell07,1,https://github.com/OpenRC/openrc/pull/191,"The script should wait till the ping host is available or timeout reached
Closes : #179
I did not added a sleep because the ping does the delay enough","The script should wait till the ping host is available or timeout reached
Closes : #179
I did not added a sleep because the ping does the delay enough",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,196,2017-12-31T21:51:19Z,2018-01-05T20:57:59Z,2018-01-06T08:15:08Z,CLOSED,False,1,1,1,https://github.com/3PO,Update net-online.in,1,[],https://github.com/OpenRC/openrc/pull/196,https://github.com/3PO,1,https://github.com/OpenRC/openrc/pull/196,"In case the system is working with bonded devices, the funktion ""get_interfaces"" does not work, because in ""/sys/class/net/"" are not only symlinks.
see: --> https://elkano.org/blog/manage-interface-bondings-sysfs-interface/","In case the system is working with bonded devices, the funktion ""get_interfaces"" does not work, because in ""/sys/class/net/"" are not only symlinks.
see: --> https://elkano.org/blog/manage-interface-bondings-sysfs-interface/",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,204,2018-01-25T16:33:14Z,2018-02-06T19:54:31Z,2018-02-06T19:54:31Z,CLOSED,False,3,1,1,https://github.com/orlitzky,openrc-run man page typos,2,[],https://github.com/OpenRC/openrc/pull/204,https://github.com/orlitzky,1,https://github.com/OpenRC/openrc/pull/204,Just two small typo fixes to the fstabinfo and mountinfo builtins.,Just two small typo fixes to the fstabinfo and mountinfo builtins.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,205,2018-02-06T10:16:04Z,,2018-02-26T20:11:26Z,OPEN,False,41,29,12,https://github.com/AgentD,"Fix hardcoded sbin paths, improve file-access error messages",2,[],https://github.com/OpenRC/openrc/pull/205,https://github.com/AgentD,1,https://github.com/OpenRC/openrc/pull/205,"A little bit of background: I was fiddling around with OpenRC on custom, cross compiled system that
doesn't have a /sbin directory. Setting SBINDIR=/bin compiled fine and installed everything to /bin.
However, I discovered that there were a few hard coded ""/sbin/"" paths in the code. This is what
the first commit tries to fix.
The reason I had to dig into the source code in the first place was because ""exec: no such file or directory"" wasn't exactly helpful in trying to find the cause of the problem (more precisely, such
an error message is utterly meaningless). I could have found the problem much faster if the program had simply told me that that it was trying to access something in /sbin. This is what the second
commit tries to fix.","A little bit of background: I was fiddling around with OpenRC on custom, cross compiled system that
doesn't have a /sbin directory. Setting SBINDIR=/bin compiled fine and installed everything to /bin.
However, I discovered that there were a few hard coded ""/sbin/"" paths in the code. This is what
the first commit tries to fix.
The reason I had to dig into the source code in the first place was because ""exec: no such file or directory"" wasn't exactly helpful in trying to find the cause of the problem (more precisely, such
an error message is utterly meaningless). I could have found the problem much faster if the program had simply told me that that it was trying to access something in /sbin. This is what the second
commit tries to fix.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,205,2018-02-06T10:16:04Z,,2018-02-26T20:11:26Z,OPEN,False,41,29,12,https://github.com/AgentD,"Fix hardcoded sbin paths, improve file-access error messages",2,[],https://github.com/OpenRC/openrc/pull/205,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/205#issuecomment-368633954,"A little bit of background: I was fiddling around with OpenRC on custom, cross compiled system that
doesn't have a /sbin directory. Setting SBINDIR=/bin compiled fine and installed everything to /bin.
However, I discovered that there were a few hard coded ""/sbin/"" paths in the code. This is what
the first commit tries to fix.
The reason I had to dig into the source code in the first place was because ""exec: no such file or directory"" wasn't exactly helpful in trying to find the cause of the problem (more precisely, such
an error message is utterly meaningless). I could have found the problem much faster if the program had simply told me that that it was trying to access something in /sbin. This is what the second
commit tries to fix.","@agentv: I think the better way to fix the hard coded sbin path is to remove the path from the executable name and use the exec functions that check the path (execlp, execlpe, execvp or execvpe) as appropriate. I believe all of the cases are now covered in current master. Please update this p/r based on current master.
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,1,https://github.com/OpenRC/openrc/pull/206,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/206#issuecomment-363666353,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","this seems to be a blind set of changes w/out actually understanding the code.  the fact that code uses strcpy/strcat doesn't mean the code is ""insecure"".  the librc-daemon.c changes for example are not necessary and the existing code is fine (and if you look closely, the math is off by one).  the librc-misc.c changes are def incorrect because you're not passing the correct length for the 2nd arg.  i gave up reading the code after that point.
please re-evaluate every proposed change and see what is actually necessary.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,3,https://github.com/OpenRC/openrc/pull/206#issuecomment-363670402,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Not really, I ran a build through SonarCloud/SonarQube static analysis. I made a similar set of changes to one of my own projects asspr and will be doing others. I was using Coverity, still have some projects setup there before migration to SonarCloud. Asspr had no issues under Coverity, but showed other issues under Sonar. I am sure other applications will be the same.
I had Travis setup to send builds to Coverity. It identified some 55 issues, but I was denied ability to see scans since I am not part of the OpenRC project. Also another, pinentry, unrelated. Thus ended up on Sonar, etc.
The wording ""insecure"" comes from Sonar S1081. The changes are not so much blind, and if I am of I can correct that. Though if the code was safe before, any limits should not be reached. As it would have overrun before without such.
I am happy to correct as needed.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,4,https://github.com/OpenRC/openrc/pull/206#issuecomment-363678154,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Think I reversed a few null paddings, +1 vs -1 I will correct and re-push.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,5,https://github.com/OpenRC/openrc/pull/206#issuecomment-363822687,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","FYI, some results from Coverity scan. I can send over .travis.yml for general test builds and upload to Coverity if you want to run a scan and see the results. I was denied ability to see detailed scan results, 55 defects. Sonar seems to report more than Coverity, not sure if it catches the same stuff or not.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,6,https://github.com/OpenRC/openrc/pull/206#issuecomment-363835846,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","""i ran this static analyzer and it complained"" isn't a valid reason to make a change.  if the checker is basically doing grep strcat && die, then the checker is garbage and we don't care.  you have to actually look at the code and understand it.
also, just because some checker used scary/nonsense language isn't a reason to copy & paste it into your commit messages.  simply using strcat is not ""insecure"".
as it stands, these changes are either unnecessary, or plain wrong.  i looked at the next file in your changes (kill_all.c) and that change is absolutely wrong (and introduces an uninitialized read of a stack buffer).  after that, the attempts to use strncat in supervise-daemon.c are wrong and a pretty common mistake -- the length to strncat is how much of the buffer is free, not the size of the entire buffer.  i gave up at this point again on reading more.
making changes w/out actually understanding things is a recipe for disaster, and this PR adds way more bugs that it might have tried to legitimately fix.
what would be interesting is adding support for something like asprintf which is way harder to screw up and doesn't rely on fixed size stack buffers.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,7,https://github.com/OpenRC/openrc/pull/206#issuecomment-363855244,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Multiple analyzers that many projects rely on... I think you are making wide assumptions what these advanced checkers are doing. Its hardly as trivial as a grep... If you think Coverity and SonarQube scans are garbage. Then you would be at odds with quite many, a growing number. I suggest you look at the issues Sonar found. It is also open source, so you can see the code is hardly trivial.
I care less about the language, though its common, and I provided links. Which one has several other links to why coding like that should be avoided. Sonar is not making suggestions with facts to support.
""   MITRE, CWE-120 - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
MITRE, CWE-676 - Use of Potentially Dangerous Function
SANS Top 25 - Risky Resource Management
CERT, STR07-C. - Use the bounds-checking interfaces for string manipulation""
https://www.sonarsource.com/products/codeanalyzers/sonarcfamilyforcpp/rules-c.html#RSPEC-1081
I find it odd that Sonar would not catch an uninitialized read of a stack buffer. In fact these scanners catch such things. That maybe something Coverity catches that Sonar does not. I did make changes per initial comments and I may have made things worse by second guessing. Again I can correct as needed, just as I believe the PR can be modified as part of any merge.
I have been working on several C applications for the last couple years. Sure I make some mistakes, but I am not clueless when it comes to reading code. Mostly been going around fixing others code with help of things like Coverity and Sonar.
https://scan.coverity.com/projects/obsidian-studiosinc-jem
https://scan.coverity.com/projects/obsidian-studiosinc-ecrire
https://scan.coverity.com/projects/obsidian-studiosinc-entrance
Just what is remaining. Coverity removed Clipboard I had for months, and others pinentry and openrc. They have some odd policies on who can scan what, etc. Sonar is less restrictive. Really amazed at the issues in various code bases that seem to be unknown.
My changes are going through Travis and Sonar. They cannot be that unsafe of introduce such bugs you describe or they would or should be caught by Sonar. I will go a step further, package, and test my changes on real systems. Then it will be triple covered. Sorry for trying to make things better. I can just further things on my own and not submit PRs. Clearly many issues that people are not aware of and may discount or not care about but are real and exist. Likely many more projects with issues as well.
I agree on asprintf and use it in jem. Though I believe that is non-standard and a GNU extension or something. Which may or may not be issues for openrc. Depending on what all its targeting.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,8,https://github.com/OpenRC/openrc/pull/206#issuecomment-363861606,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Seems my code in kill_all.c maybe off. What is interesting is there is another existing line doing the same thing. I do not see path being initialized at all before a similar strlen. Thus if one is wrong, both are wrong. No?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,9,https://github.com/OpenRC/openrc/pull/206#issuecomment-363861846,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Whoops, difference between size of and strlen, my bad...",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,10,https://github.com/OpenRC/openrc/pull/206#issuecomment-363869274,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","i'm just going to punt this.  these changes still make no actual improvements and if anything, make the code worse to read & understand.  your latest PR still introduces real bugs like buffer overflows (e.g. your supervise-daemon.c change to inline PATH_MAX+1 instead of using sizeof(name)).
i'll reiterate what i said earlier: using funcs (e.g. strcat) does not mean the code is insecure.  in all of the instances you highlighted, it's either already written correctly (e.g. librc-daemon.c), or it's extremely unlikely to be a problem (e.g. kill_all.c's buf is PATH_MAX+1 bytes, and we're only writing a 31-bit signed int, and if PATH_MAX is less than 20, everything is already going to be completely broken).
there are legitimate improvements that could be made in openrc wrt string handling (such as converting many things to asprintf as i suggested earlier which would subsume the majority if not all existing strcat/sprintf users), but none of those improvements would look like the cargo cult changes you're blindly making here.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,11,https://github.com/OpenRC/openrc/pull/206#issuecomment-363874122,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","No worries I have forked and will fix and further on my own, for my own needs. These were really minor issues and mostly a feel for how things would be with future submissions.
Extremely unlikely to be an issue is no reason to keep using functions most every documentation, definitely any security related document on best practices, secure coding, etc, will say do not use that stuff. I think its unlikely people can exploit Meltdown or Spectre, so those should not be addressed? That logic does not make sense.
Moving to asprintf will mean dropping POSIX compliance if that matters. It is not standard C and is GNU specific. That is a choice I made for jem, despite clams to be Posix compliant, I may need to move away from that. I did not start out using asprintf it was recommended by another.
How many security audits has OpenRC codebase gone through? Any? Seems a ton of issues in the codebase to be addressed. These were minor and dismissed. Not sure what that says about the rest. Maybe I should be like the rest and switch to systemd? These types of issues will not bring more people to running OpenRC. If that matters.
Anyway thanks for feedback. I will not bother with future submissions.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,12,https://github.com/OpenRC/openrc/pull/206#issuecomment-363876624,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","you seem to be confusing actual security bugs and real fixes with blind changes that make absolutely no difference to security.  if you have a real bug to point out, feel free, but none of these are bugs.
if you want to participate in the bs security space replete with scare tactics, snake oil, and meaningless checkboxes, feel free.  just don't mistake it for actual security.
wrt asprintf, it's trivial to add a fallback local implementation built on top of two snprintf & one malloc call.  i'm not suggesting we throw away portability.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,13,https://github.com/OpenRC/openrc/pull/206#issuecomment-363877972,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","plus, considering this PR was supposed to be ""simple"" but somehow managed to replace working/correct code with at least 4 real bugs, it's not exactly a glowing review of the fork work.  i might hold off on selling it as a ""improved"" code base security wise.  or not ... anyone who blindly trusts that won't know the difference i guess.
still don't confuse ""nonsense goes nowhere"" with ""improvements aren't welcome"".",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,14,https://github.com/OpenRC/openrc/pull/206#issuecomment-363880152,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","I did not create Sonar, it is not my wording... On a SonarQube scan such things show up as ""vulnerabilities"". I guess Sans, Cert, Mitre, etc are not in the security business. That is their wording not mine. None the less I see no reason not to avoid using such. Only in some rare cases for maybe embedded devices where efficiency matters.
FYI a similar thing came up over the summer for Tizen/EFL use of strcpy. The first things I read long ago about coding in C said to avoid such things. If anything the secure s_ versions should be used when available if not using the fixed sized buffer alternatives.
Either way no worries. All projects have their own understanding of the code and exploits. I just prefer to make it clear to all. Even dump scanners.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,15,https://github.com/OpenRC/openrc/pull/206#issuecomment-363882600,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Can you be any ruder? If these are so minor you could have merged with your fixes and commented on the fixes. That would require less effort than talking or going back and forth. Or simply pointing out the correct way over the wrong way. Rather than just being negative all around about the contribution. Correct or not, I tend to thank people for at least trying to help...
These are not even bugs. I haven't even started on what Sonar reports as bugs, or blockers, etc. There are tons of issues.... I would be more looking into such. I am not selling anything as improved or secure. I said I would do it for my own purposes.... Though I will be using more than my own opinion on such things, like third party tools to scan code, etc. I can only imagine what showed on Coverity that may not be under Sonar. Does not seem like you care about such. That to me says more about the current codebase than anything I do with it going forward. For my own needs.
No worries",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,16,https://github.com/OpenRC/openrc/pull/206#issuecomment-363905803,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","could have merged with your fixes and commented on the fixes

you're assuming the changes you proposed were even desirable from the start.  they weren't -- as i've said numerous times, you aren't actually ""fixing"" anything other than making a brain dead security scan go away.  it also assumes we want to merge known broken code before applying fixes on top ... that would needlessly clutter the git history with known bad code.
i suggested a sane route to addressing the issues you pointed out.  whether you want to implement it properly or just ignore or bandaid is your prerogative.
if you consider frankness to be the same as rudeness, then i guess that's that.",True,{'HEART': ['https://github.com/graywolf']}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,17,https://github.com/OpenRC/openrc/pull/206#issuecomment-363911961,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","I said numerous times I would fix and pushed fixes, which I did a couple times. You could also fix as part of any commit/merge. Which any issue you mention with history, broken code, etc would have been negated with corrections. Simple squash to make for a clean history etc. None really valid points. I think the real issue is your first point, the changes were not desired from the start. You do not deem them necessary. That I can see as subjective. If things are not done the way the project developers want, or seen as issues, they are deemed otherwise.
What your saying is write code the way I want it written to be accepted. You suggested asprintf, thus no other solution not using that would be accepted. Nor do I see you taking the time to address. Likely just sweep under the rug and disregard. If I failed at simple replacements. I am not going to attempt a universal asprintf for platforms that have it and those that do not. Not sure that is an approach I would take myself. I am not here to code per others wishes. Not unless paid, and even then...
What I consider rude is saying something is wrong, without showing a correct way. Being overly negative towards someone simply trying to help and improve things. While in your opinion they may not be improvements. Others may feel differently. Plus your quotes of things I never said... Saying checkers are garbage, and numerous disparaging comments in each reply.
No worries, plenty of places to contribute where contributions are handled differently. Really no need for any of this back and forth. Its all more effort than to fix in code...",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/williamh,18,https://github.com/OpenRC/openrc/pull/206#issuecomment-363912436,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","@wltjr I just saw this myself, and I hope you will change your mind about future submissions. Forking and doing things on your own never helps the community; it always is not good.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,19,https://github.com/OpenRC/openrc/pull/206#issuecomment-363914471,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","@williamh I agree, but I rather not be seen as argumentative debating on different paths forwards. There is more than one way to skin a cat. Peoples coding styles and techniques differ. I accept that, to each their own. I am not seeking to upset anyone or waste anyone's time in lengthy discussions. Why I left is short from the start.
Sorry for the noise... I will continue my efforts. If you all want to cherry pick that is fine. Otherwise rather not bother with my garbage code and submissions... I will keep my bugs to myself.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,20,https://github.com/OpenRC/openrc/pull/206#issuecomment-363936150,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Must say not sure how I failed so bad here. I made similar changes to a project of mine, asspr. From actual usage after the changes. I am not seeing any errors or issues. If I did not properly covert from strcat to strncat I think I would have issues.... Making me second guess myself and may go introduce bugs in the process... Still trying to find bugs in asspr from my changes. Surely possible but thus far no issues.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,21,https://github.com/OpenRC/openrc/pull/206#issuecomment-364288288,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","i never said ""changes are not accepted"".  i did say your changes are not only bad & broken, they're unnecessary, and there are better ways to fix both (i.e. asprintf).  i did point out the actual errors in your code (with the fixes being self-explanatory), as well as a sane way forward.  if you don't want to properly fix code, that's your choice.
assuming ""it didn't crash therefore the code is correct"" makes no sense.  that's simply not how memory corruption works, and lack of edge cases to exercise the faulty paths does not translate to correctness.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,22,https://github.com/OpenRC/openrc/pull/206#issuecomment-364289288,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","I did fix and re-pushed a couple times. Most should be better or fixed, short of the switch to asprintf. All of which can be done as part of a merge, it can be edited. IMHO less time to fix in code than type here.
I am relying on a several things, not just runtime tests. If it takes edge cases to trigger than it is not likely in most cases. In such edge cases given the code now, you may have other such issues.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,23,https://github.com/OpenRC/openrc/pull/206#issuecomment-364290189,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","once again, changing strcat to strncat by itself fixes nothing.  we already made sure the buffers are the correct size.  all you've done is made the code harder to understand in order to blindly please garbage static checkers.  if you don't understand that, then clearly trying to discuss the matter isn't worth the time.
your argument wrt edge cases makes no sense.  if you're assuming they don't get hit after your changes, then what's the point of making the changes in the first place if the edge cases can't happen ?  that's not how real security works.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,24,https://github.com/OpenRC/openrc/pull/206#issuecomment-364291681,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","When you call scanners garbage, it is hard to put weight to all the rest. I guess you do not use repoman either in Gentoo right? Or CI, etc?
I never said I was doing a security audit or fixing the code for secure purposes. I simply was passing along Sonar's text. Why you cannot seem to understand that simple point is beyond me. All around I am not here to argue with anyone... I rather spend my time doing others things like fixing code or coding vs talking about it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,25,https://github.com/OpenRC/openrc/pull/206#issuecomment-364294354,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","i never called all scanners garbage.  you keep dropping my qualifications for some reason.
i did say if your scanner was too stupid to understand correct usage of strcat while simultaneously not catching (provably) bad usage of strncat, it is garbage.
scanners are like any other tool: they only go so far.  the expectation is you, as the dev, understand what it's saying and can figure out when it's correct.  pretty much no scanner out there is free of false positives.
blindly & slavishly doing whatever the scanner says implies you don't actually grok what it's saying or what the code is doing (which is backed up by the commits you attempted to have us merge that absolutely changed code from ""this has no bugs"" to ""this corrupts memory"").",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,26,https://github.com/OpenRC/openrc/pull/206#issuecomment-364296347,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","You keep discounting others just the same. I am not the one making negative remarks. I never asked for your opinion on scanners.
My understanding of not using strcpy/strcat,sprintf preceeds scanners. It was like C101 stuff for any modern coding. It simply should not be used unless like I said for performance reasons. None of those make code any harder to read with setting a length. You have yet to make any good arguments as to why it was coded that way in the first place, or why they are even used.
I am not blindly following scanners results, and thank you for such negative remarks again. Like I said and showed. I am making such changes to other projects as well. I will not bother with future contributions.
But given what I have seen in some of the scanners. To say the code is bug free is only because you have not run into those yet. It is not like openrc is widely used in a systemd world.... Most have no clue about it...",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/williamh,27,https://github.com/OpenRC/openrc/pull/206#issuecomment-364298846,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.",@wltjr I would appreciate it if you follow the code and offer contributions. Just because one isn't taken doesn't mean none will be. You are as welcome on this project as anyone is.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,28,https://github.com/OpenRC/openrc/pull/206#issuecomment-364300828,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.",@williamh I am not as concerned about a single contribution as I am the process. I am not sure contributing is good use of my time given the experience.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,29,https://github.com/OpenRC/openrc/pull/206#issuecomment-364620564,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.",i'm saying the code is bug free because i can read and understand what it's doing.  the fact it's using strcat is irrelevant.  it's hard to say you understand any of this based on your code submissions.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,30,https://github.com/OpenRC/openrc/pull/206#issuecomment-364621052,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","Thanks for the insult... You have yet to make a compelling argument as to why it was coded that way in the first place. I have provided several external links as to why it should not be used. Despite YOUR opinion, I will go with factual documentation and best practices.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/vapier,31,https://github.com/OpenRC/openrc/pull/206#issuecomment-364621414,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","no, you've linked to pages clearly without having read or understood them.  for example, your first link:
https://www.sonarsource.com/products/codeanalyzers/sonarcfamilyforcpp/rules-c.html#RSPEC-1081

When using legacy C functions such as strcpy, it's up to the developer to make sure the size of the buffer to be written to is large enough to avoid buffer overruns.

guess what ?  we did make sure the size is large enough.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,32,https://github.com/OpenRC/openrc/pull/206#issuecomment-364621631,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.",Then with bother with asprintf.... Guess what your defeating your own argument... Enjoy your code. I can see what other distros went with Systemd...,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/williamh,33,https://github.com/OpenRC/openrc/pull/206#issuecomment-364680511,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","@wltjr You are welcome to participate in this project, but snippy comments like the last one you posted on this pull request are not welcome. If you have an issue with Me, Mike or anyone else, take it private.
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,206,2018-02-07T03:55:06Z,2018-02-07T18:45:31Z,2018-02-10T19:32:07Z,CLOSED,False,28,19,4,https://github.com/wltjr,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf",4,[],https://github.com/OpenRC/openrc/pull/206,https://github.com/wltjr,34,https://github.com/OpenRC/openrc/pull/206#issuecomment-364682977,"Fix vulnerabilities switch from insecure strcpy, strcat, sprintf to strncpy, strncat, snprintf.","@williamh given the amount of condescending remarks regarding static analysers, typing quotes of things I did not say, and then flat out making comments as to ones understanding. I guess those are all acceptable but my response after receiving several negative derogatory remarks. I think you should all should conduct yourself as your expecting others to....
Maybe lead by example rather than do as I say, while insulting others... Despite several valid points being dismissed without any facts to support. Beyond a single persons opinion... I am hardly in the wrong here.
But thanks for giving me further reason to avoid the project and fork for any of my needs. Once again I can see why others choose to avoid OpenRC. I seriously questioned that for many years. Now I have some understanding as to why. You can take that how ever you want. It is considerably more polite than any comments lobbed my direction. Without a single bit of thanks.
No matter if someone's contributions are correct or not, valid or not, I always THANK people for at least trying.... From the first reply, there has never been a single bit of politeness or respect. If anything rudeness and disrespectful replies.
I will not comment further or open issues, PRs, etc. Please do not reference my name in any tickets or new ones. I will be unsubscribing and not receiving future messages. Thanks!",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,208,2018-02-10T02:43:39Z,2018-02-10T02:48:42Z,2018-02-13T20:13:14Z,CLOSED,False,4,5,1,https://github.com/wltjr,"helpers.h: xasprintf function, replace ... with ap_list ap, init vars",1,[],https://github.com/OpenRC/openrc/pull/208,https://github.com/wltjr,1,https://github.com/OpenRC/openrc/pull/208,"Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function","Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,208,2018-02-10T02:43:39Z,2018-02-10T02:48:42Z,2018-02-13T20:13:14Z,CLOSED,False,4,5,1,https://github.com/wltjr,"helpers.h: xasprintf function, replace ... with ap_list ap, init vars",1,[],https://github.com/OpenRC/openrc/pull/208,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/208#issuecomment-364620440,"Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function","please actually test/understand code before making suggestions.  this code change is unnecessary, makes no sense, as is objectively wrong.  you're confusing asprintf and vasprintf.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,208,2018-02-10T02:43:39Z,2018-02-10T02:48:42Z,2018-02-13T20:13:14Z,CLOSED,False,4,5,1,https://github.com/wltjr,"helpers.h: xasprintf function, replace ... with ap_list ap, init vars",1,[],https://github.com/OpenRC/openrc/pull/208,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/208#issuecomment-364680194,"Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function","@wltjr The concern about this p/r is the way we are going to call xasprintf(). It will be called like this:
xasprintf(buffer, format, arg1, arg2, ...);

So think of it as being like sprintf() but with allocation.
So, I'm not sure why  your scanner is objecting to it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,208,2018-02-10T02:43:39Z,2018-02-10T02:48:42Z,2018-02-13T20:13:14Z,CLOSED,False,4,5,1,https://github.com/wltjr,"helpers.h: xasprintf function, replace ... with ap_list ap, init vars",1,[],https://github.com/OpenRC/openrc/pull/208,https://github.com/wltjr,4,https://github.com/OpenRC/openrc/pull/208#issuecomment-364684794,"Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function","I understand the intended usage. It is the following that says it should not be done. I am not sure what the alternative replacement is at this time.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation.
CERT, DCL50-CPP. - Do not define a C-style variadic function
Per
https://www.sonarsource.com/products/codeanalyzers/sonarcfamilyforcpp/rules-c.html#RSPEC-923
It is also in MISRA 2012
https://en.wikipedia.org/wiki/MISRA_C
Some further documents say
""There are a lot of potential problems with this feature. Users shall not write additional functions that use a variable number of arguments. This precludes the use of use of stdarg.h, va_arg, va_start and va_end.""
http://clinker.soltel.es/sonar/rules_configuration/index/13#rule_1826",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,208,2018-02-10T02:43:39Z,2018-02-10T02:48:42Z,2018-02-13T20:13:14Z,CLOSED,False,4,5,1,https://github.com/wltjr,"helpers.h: xasprintf function, replace ... with ap_list ap, init vars",1,[],https://github.com/OpenRC/openrc/pull/208,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/208#issuecomment-364685565,"Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function","@wltjr ok, there is a lot of info there, but I need a way to achieve the same functionality if I am going to remove the variable argument list. so please let me know once you know what the replacement should be.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,208,2018-02-10T02:43:39Z,2018-02-10T02:48:42Z,2018-02-13T20:13:14Z,CLOSED,False,4,5,1,https://github.com/wltjr,"helpers.h: xasprintf function, replace ... with ap_list ap, init vars",1,[],https://github.com/OpenRC/openrc/pull/208,https://github.com/wltjr,6,https://github.com/OpenRC/openrc/pull/208#issuecomment-364708930,"Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function","@williamh I understand, and I am assuming maybe this is the one case where such can be used. It maybe for other such functionality that it should be avoided. General functions using variable arguments. I have similar issues with ... and related preprocessor option ## in my own applications. Which is used in typdefs for GNU to avoid the trailing comma. Seems ## is inconsistent across compilers and the ## is GNU specific.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,208,2018-02-10T02:43:39Z,2018-02-10T02:48:42Z,2018-02-13T20:13:14Z,CLOSED,False,4,5,1,https://github.com/wltjr,"helpers.h: xasprintf function, replace ... with ap_list ap, init vars",1,[],https://github.com/OpenRC/openrc/pull/208,https://github.com/vapier,7,https://github.com/OpenRC/openrc/pull/208#issuecomment-365019833,"Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function","openrc does not aim to be MISRA compliant, nor do i think there is any usefulness for the project to do so.  its goals are specifically for embedded systems where reliability is paramount and assumes/imposes limitations that make no sense for openrc (such as focusing on limiting memory heap usage).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,208,2018-02-10T02:43:39Z,2018-02-10T02:48:42Z,2018-02-13T20:13:14Z,CLOSED,False,4,5,1,https://github.com/wltjr,"helpers.h: xasprintf function, replace ... with ap_list ap, init vars",1,[],https://github.com/OpenRC/openrc/pull/208,https://github.com/wltjr,8,https://github.com/OpenRC/openrc/pull/208#issuecomment-365389693,"Minor changes, feel free to drop var init stuff if you want. The other replacement is per the following.
MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
CERT, DCL50-CPP. - Do not define a C-style variadic function","I can appreciate not wanting to be MISRA compliant. Though in most cases I do not see harm in much of the recommendations. That said, some recommendations like the variable argument and related preprocessor handling do not seem to have examples of alternatives. Where most other things do. I cannot find replacements for such. Which makes compliance that much harder, if possible in some cases.
Regarding embedded I think there is potential for usage in embed. Systemd is used in some embedded systems. Tizen uses it for some devices, not sure which all. Not sure where mobile/watches fall wrt to embedded.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,209,2018-02-12T12:36:12Z,2018-02-23T21:53:14Z,2018-02-24T13:54:49Z,CLOSED,False,7,4,1,https://github.com/brauner,check whether /sys/fs/cgroup is a mountpoint,1,[],https://github.com/OpenRC/openrc/pull/209,https://github.com/brauner,1,https://github.com/OpenRC/openrc/pull/209,"The current check only tries to detect whether /sys/fs/cgroup exists and
whether it is writable or not. But when the init system doesn't mount
cgroups then /sys/fs/cgroup will just be an empty directory. When paired
with unprivileged containers that mount sysfs this will cause misleading
errors to be printed since /sys/fs/cgroup will be owned by user
nobody:nogroup in this case. Independent of this specific problem this
check will also be misleading when the /sys/fs/cgroup exists and is in
fact writable by the init system but isn't actually a mountpoint.","The current check only tries to detect whether /sys/fs/cgroup exists and
whether it is writable or not. But when the init system doesn't mount
cgroups then /sys/fs/cgroup will just be an empty directory. When paired
with unprivileged containers that mount sysfs this will cause misleading
errors to be printed since /sys/fs/cgroup will be owned by user
nobody:nogroup in this case. Independent of this specific problem this
check will also be misleading when the /sys/fs/cgroup exists and is in
fact writable by the init system but isn't actually a mountpoint.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,209,2018-02-12T12:36:12Z,2018-02-23T21:53:14Z,2018-02-24T13:54:49Z,CLOSED,False,7,4,1,https://github.com/brauner,check whether /sys/fs/cgroup is a mountpoint,1,[],https://github.com/OpenRC/openrc/pull/209,https://github.com/asarubbo,2,https://github.com/OpenRC/openrc/pull/209#issuecomment-364922471,"The current check only tries to detect whether /sys/fs/cgroup exists and
whether it is writable or not. But when the init system doesn't mount
cgroups then /sys/fs/cgroup will just be an empty directory. When paired
with unprivileged containers that mount sysfs this will cause misleading
errors to be printed since /sys/fs/cgroup will be owned by user
nobody:nogroup in this case. Independent of this specific problem this
check will also be misleading when the /sys/fs/cgroup exists and is in
fact writable by the init system but isn't actually a mountpoint.",the suggested fix silence the warning for me.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,209,2018-02-12T12:36:12Z,2018-02-23T21:53:14Z,2018-02-24T13:54:49Z,CLOSED,False,7,4,1,https://github.com/brauner,check whether /sys/fs/cgroup is a mountpoint,1,[],https://github.com/OpenRC/openrc/pull/209,https://github.com/brauner,3,https://github.com/OpenRC/openrc/pull/209#issuecomment-368229985,"The current check only tries to detect whether /sys/fs/cgroup exists and
whether it is writable or not. But when the init system doesn't mount
cgroups then /sys/fs/cgroup will just be an empty directory. When paired
with unprivileged containers that mount sysfs this will cause misleading
errors to be printed since /sys/fs/cgroup will be owned by user
nobody:nogroup in this case. Independent of this specific problem this
check will also be misleading when the /sys/fs/cgroup exists and is in
fact writable by the init system but isn't actually a mountpoint.","Thanks, @williamh!",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,211,2018-02-16T18:12:03Z,,2021-12-31T00:45:52Z,OPEN,False,20,6,5,https://github.com/jsbronder,Fix alternative conf and init dir support.,2,[],https://github.com/OpenRC/openrc/pull/211,https://github.com/jsbronder,1,https://github.com/OpenRC/openrc/pull/211,"So it's been a while, I have no reasonable excuse.  This is a followup from #82 which I believe is addressing the comments I received.
mk/sys.mk allowed INITDIR and CONFDIR to be changed from the defaults.  While this may have been unintentional, it's actually something I would like to use in order to get OpenRC easily integrated into OpenEmbedded [1].  As suggested, both the directories are required to be in SYSCONFDIR but can be renamed.
This does leave a number of references to init.d and conf.d around in documentation and code.  I have no problem fixing those but a number of them are not currently going through the sed portion of the build and I'm not sure if changing that is desirable.  Let me know.

Layer is on my github if you're interested.","So it's been a while, I have no reasonable excuse.  This is a followup from #82 which I believe is addressing the comments I received.
mk/sys.mk allowed INITDIR and CONFDIR to be changed from the defaults.  While this may have been unintentional, it's actually something I would like to use in order to get OpenRC easily integrated into OpenEmbedded [1].  As suggested, both the directories are required to be in SYSCONFDIR but can be renamed.
This does leave a number of references to init.d and conf.d around in documentation and code.  I have no problem fixing those but a number of them are not currently going through the sed portion of the build and I'm not sure if changing that is desirable.  Let me know.

Layer is on my github if you're interested.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,213,2018-03-02T00:28:43Z,2018-03-02T00:31:33Z,2018-03-02T00:31:33Z,MERGED,True,1,1,1,https://github.com/cromerc,Fix memory size,1,[],https://github.com/OpenRC/openrc/pull/213,https://github.com/cromerc,1,https://github.com/OpenRC/openrc/pull/213,This fixes the problem with the agetty scripts not being able to run. Without enough memory the string was being cut off.,This fixes the problem with the agetty scripts not being able to run. Without enough memory the string was being cut off.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,214,2018-03-04T12:45:13Z,2018-03-06T01:16:26Z,2018-03-06T10:08:24Z,MERGED,True,1,1,1,https://github.com/Scall,"swap should always be started after root, otherwise if a swap file is…",1,[],https://github.com/OpenRC/openrc/pull/214,https://github.com/Scall,1,https://github.com/OpenRC/openrc/pull/214,"… being used, and swap is started before root (I had this issue with rc_parallel=""YES""), swapon may fail because of a read-only filesystem.","… being used, and swap is started before root (I had this issue with rc_parallel=""YES""), swapon may fail because of a read-only filesystem.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,220,2018-03-21T11:58:09Z,2018-03-21T12:33:34Z,2018-03-21T13:17:18Z,MERGED,True,1,1,1,https://github.com/Scall,fix typo,1,[],https://github.com/OpenRC/openrc/pull/220,https://github.com/Scall,1,https://github.com/OpenRC/openrc/pull/220,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,226,2018-05-08T08:51:19Z,2019-02-13T17:26:25Z,2019-02-13T17:26:25Z,CLOSED,False,1,3,1,https://github.com/edanbe,librc: fix realpath() return value check,1,[],https://github.com/OpenRC/openrc/pull/226,https://github.com/edanbe,1,https://github.com/OpenRC/openrc/pull/226,"The return value of realpath() is checked by dereference, although it returns NULL if there is an error. This CL checks for a NULL return value instead of dereferencing the pointer.","The return value of realpath() is checked by dereference, although it returns NULL if there is an error. This CL checks for a NULL return value instead of dereferencing the pointer.",True,{'THUMBS_UP': ['https://github.com/mboom']}
OpenRC/openrc,https://github.com/OpenRC/openrc,226,2018-05-08T08:51:19Z,2019-02-13T17:26:25Z,2019-02-13T17:26:25Z,CLOSED,False,1,3,1,https://github.com/edanbe,librc: fix realpath() return value check,1,[],https://github.com/OpenRC/openrc/pull/226,https://github.com/philhofer,2,https://github.com/OpenRC/openrc/pull/226#issuecomment-448421775,"The return value of realpath() is checked by dereference, although it returns NULL if there is an error. This CL checks for a NULL return value instead of dereferencing the pointer.",Fixes #243,True,{'THUMBS_UP': ['https://github.com/mboom']}
OpenRC/openrc,https://github.com/OpenRC/openrc,228,2018-05-24T20:37:31Z,2018-05-30T16:11:11Z,2019-06-20T10:10:08Z,MERGED,True,4,1,2,https://github.com/austin987,sh/supervise-daemon.sh: use start_stop_daemon_args if supervise_daemon_args is undefined,1,[],https://github.com/OpenRC/openrc/pull/228,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/228,@williamh,@williamh,True,{'THUMBS_UP': ['https://github.com/aauren']}
OpenRC/openrc,https://github.com/OpenRC/openrc,229,2018-06-21T12:51:56Z,2018-06-21T13:06:36Z,2018-06-22T15:33:35Z,CLOSED,False,6,1,1,https://github.com/clandmeter,hwclock: exit early if no rtc device is found,1,[],https://github.com/OpenRC/openrc/pull/229,https://github.com/clandmeter,1,https://github.com/OpenRC/openrc/pull/229,"When using a rpi without rtc I always see this error:
hwclock: Cannot access the Hardware Clock via any known method.
hwclock: Use the --verbose option to see the details of our search for an access method.","When using a rpi without rtc I always see this error:
hwclock: Cannot access the Hardware Clock via any known method.
hwclock: Use the --verbose option to see the details of our search for an access method.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,229,2018-06-21T12:51:56Z,2018-06-21T13:06:36Z,2018-06-22T15:33:35Z,CLOSED,False,6,1,1,https://github.com/clandmeter,hwclock: exit early if no rtc device is found,1,[],https://github.com/OpenRC/openrc/pull/229,https://github.com/clandmeter,2,https://github.com/OpenRC/openrc/pull/229#issuecomment-399096844,"When using a rpi without rtc I always see this error:
hwclock: Cannot access the Hardware Clock via any known method.
hwclock: Use the --verbose option to see the details of our search for an access method.",ah it seems i need to add swclock to provide an alternative clock or else it will depend on hwclock.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,229,2018-06-21T12:51:56Z,2018-06-21T13:06:36Z,2018-06-22T15:33:35Z,CLOSED,False,6,1,1,https://github.com/clandmeter,hwclock: exit early if no rtc device is found,1,[],https://github.com/OpenRC/openrc/pull/229,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/229#issuecomment-399112390,"When using a rpi without rtc I always see this error:
hwclock: Cannot access the Hardware Clock via any known method.
hwclock: Use the --verbose option to see the details of our search for an access method.","If you don't need a clock provider at all, you should be able to delete both of them from the runlevels unless you have a service outside of OpenRC that has a ""need clock"" in its dependencies.
Try running these commands:
# rc-update del hwclock boot
# rc-update del swclock boot",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,229,2018-06-21T12:51:56Z,2018-06-21T13:06:36Z,2018-06-22T15:33:35Z,CLOSED,False,6,1,1,https://github.com/clandmeter,hwclock: exit early if no rtc device is found,1,[],https://github.com/OpenRC/openrc/pull/229,https://github.com/vapier,4,https://github.com/OpenRC/openrc/pull/229#issuecomment-399482638,"When using a rpi without rtc I always see this error:
hwclock: Cannot access the Hardware Clock via any known method.
hwclock: Use the --verbose option to see the details of our search for an access method.","in general, making the service silent by default like this is bad practice imo.  in the case where a user has an RTC and expects it to work, but perhaps by some configuration setting it's not accessible, then we'd want those failures to be visible so they can take action.
if you don't have a hwclock, then it shouldn't be used/started at all.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,231,2018-06-28T21:18:09Z,2018-06-29T13:50:17Z,2018-08-29T10:13:33Z,CLOSED,False,1,1,1,https://github.com/hhoffstaette,rc-status: prevent memory corruption caused by freeing uninitialized pointer,1,[],https://github.com/OpenRC/openrc/pull/231,https://github.com/hhoffstaette,1,https://github.com/OpenRC/openrc/pull/231,"After emerging 0.38 I reported a heap corruption via private email. I got bored so I dove in and found:

(gdb) s
print_service (service=) at rc-status.c:162
162					free(uptime);
(gdb) s
free(): invalid pointer
Program received signal SIGABRT, Aborted.
0x00007ffff722646b in raise () from /lib64/libc.so.6

As it turns out get_uptime() does not initialize its return value and returns stack garbage,
leading to heap corruption or other funny things down the line (depending on compiler,
optimization level etc.). With this fix rc-status works properly.","After emerging 0.38 I reported a heap corruption via private email. I got bored so I dove in and found:

(gdb) s
print_service (service=) at rc-status.c:162
162					free(uptime);
(gdb) s
free(): invalid pointer
Program received signal SIGABRT, Aborted.
0x00007ffff722646b in raise () from /lib64/libc.so.6

As it turns out get_uptime() does not initialize its return value and returns stack garbage,
leading to heap corruption or other funny things down the line (depending on compiler,
optimization level etc.). With this fix rc-status works properly.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,231,2018-06-28T21:18:09Z,2018-06-29T13:50:17Z,2018-08-29T10:13:33Z,CLOSED,False,1,1,1,https://github.com/hhoffstaette,rc-status: prevent memory corruption caused by freeing uninitialized pointer,1,[],https://github.com/OpenRC/openrc/pull/231,https://github.com/hhoffstaette,2,https://github.com/OpenRC/openrc/pull/231#issuecomment-401316695,"After emerging 0.38 I reported a heap corruption via private email. I got bored so I dove in and found:

(gdb) s
print_service (service=) at rc-status.c:162
162					free(uptime);
(gdb) s
free(): invalid pointer
Program received signal SIGABRT, Aborted.
0x00007ffff722646b in raise () from /lib64/libc.so.6

As it turns out get_uptime() does not initialize its return value and returns stack garbage,
leading to heap corruption or other funny things down the line (depending on compiler,
optimization level etc.). With this fix rc-status works properly.","I just realized that this could have been phrased better (""prevent..by not freeing.."") but I hope
the problem and fix are clear anyway.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,236,2018-07-25T10:22:16Z,2018-12-29T18:48:08Z,2018-12-29T18:48:08Z,CLOSED,False,0,2,1,https://github.com/hhoffstaette,librc-misc: remove leftover dead variable/assignment,1,[],https://github.com/OpenRC/openrc/pull/236,https://github.com/hhoffstaette,1,https://github.com/OpenRC/openrc/pull/236,"I was looking at some of the warnings emitted when building with -Wall and this one was easy
enough. It's likely a leftover from the previous commit b2f5531 (""librc-misc: convert snprintf calls to xasprintf"".","I was looking at some of the warnings emitted when building with -Wall and this one was easy
enough. It's likely a leftover from the previous commit b2f5531 (""librc-misc: convert snprintf calls to xasprintf"".",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,236,2018-07-25T10:22:16Z,2018-12-29T18:48:08Z,2018-12-29T18:48:08Z,CLOSED,False,0,2,1,https://github.com/hhoffstaette,librc-misc: remove leftover dead variable/assignment,1,[],https://github.com/OpenRC/openrc/pull/236,https://github.com/hhoffstaette,2,https://github.com/OpenRC/openrc/pull/236#issuecomment-407710035,"I was looking at some of the warnings emitted when building with -Wall and this one was easy
enough. It's likely a leftover from the previous commit b2f5531 (""librc-misc: convert snprintf calls to xasprintf"".","As an aside, the only other warnings I see are all in librc.c which doesn't seem to have gotten any xasprintf love yet. Any hard rules to follow when converting, other than changing the stack array to a pointer and freeing when the buffer goes out of scope?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,236,2018-07-25T10:22:16Z,2018-12-29T18:48:08Z,2018-12-29T18:48:08Z,CLOSED,False,0,2,1,https://github.com/hhoffstaette,librc-misc: remove leftover dead variable/assignment,1,[],https://github.com/OpenRC/openrc/pull/236,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/236#issuecomment-450512391,"I was looking at some of the warnings emitted when building with -Wall and this one was easy
enough. It's likely a leftover from the previous commit b2f5531 (""librc-misc: convert snprintf calls to xasprintf"".","Sorry I missed this pr.
If you are still interested in helping convert to xasprintf, you are right about the rules for it. Just make sure to free() the buffer when it goes out of scope.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,237,2018-08-06T22:09:14Z,2018-08-06T22:41:37Z,2018-11-06T19:30:41Z,CLOSED,False,1,1,1,https://github.com/zmedico,librc: fix EACCES errno false-positive crash,1,[],https://github.com/OpenRC/openrc/pull/237,https://github.com/zmedico,1,https://github.com/OpenRC/openrc/pull/237,"Use errno != EACCES to fix false-positive for non-root users
with grsecurity kernels.
Fixes: 37e2944 (""librc: Add check for crashed state"")","Use errno != EACCES to fix false-positive for non-root users
with grsecurity kernels.
Fixes: 37e2944 (""librc: Add check for crashed state"")",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,244,2018-10-03T19:29:16Z,2018-12-02T05:43:19Z,2018-12-02T05:43:23Z,MERGED,True,41,3,1,https://github.com/floppym,checkpath: use O_PATH when available,1,[],https://github.com/OpenRC/openrc/pull/244,https://github.com/floppym,1,https://github.com/OpenRC/openrc/pull/244,"This avoids opening directories/files with read permission, which is
sometimes rejected by selinux policy.
Bug: https://bugs.gentoo.org/667122","This avoids opening directories/files with read permission, which is
sometimes rejected by selinux policy.
Bug: https://bugs.gentoo.org/667122",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,244,2018-10-03T19:29:16Z,2018-12-02T05:43:19Z,2018-12-02T05:43:23Z,MERGED,True,41,3,1,https://github.com/floppym,checkpath: use O_PATH when available,1,[],https://github.com/OpenRC/openrc/pull/244,https://github.com/floppym,2,https://github.com/OpenRC/openrc/pull/244#issuecomment-427670296,"This avoids opening directories/files with read permission, which is
sometimes rejected by selinux policy.
Bug: https://bugs.gentoo.org/667122",I pushed a new version that uses fchownat() with AT_EMPTY_PATH as a replacement for the broken fchown() function on Linux.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,244,2018-10-03T19:29:16Z,2018-12-02T05:43:19Z,2018-12-02T05:43:23Z,MERGED,True,41,3,1,https://github.com/floppym,checkpath: use O_PATH when available,1,[],https://github.com/OpenRC/openrc/pull/244,https://github.com/floppym,3,https://github.com/OpenRC/openrc/pull/244#issuecomment-443480997,"This avoids opening directories/files with read permission, which is
sometimes rejected by selinux policy.
Bug: https://bugs.gentoo.org/667122",New version pushed with more detailed comments.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,244,2018-10-03T19:29:16Z,2018-12-02T05:43:19Z,2018-12-02T05:43:23Z,MERGED,True,41,3,1,https://github.com/floppym,checkpath: use O_PATH when available,1,[],https://github.com/OpenRC/openrc/pull/244,https://github.com/vapier,4,https://github.com/OpenRC/openrc/pull/244#issuecomment-443483462,"This avoids opening directories/files with read permission, which is
sometimes rejected by selinux policy.
Bug: https://bugs.gentoo.org/667122",thanks!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,245,2018-10-12T22:17:30Z,2018-10-13T16:53:55Z,2018-10-13T16:53:59Z,MERGED,True,11,11,8,https://github.com/austin987,Fix make test (whitespace/style issues),2,[],https://github.com/OpenRC/openrc/pull/245,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/245,Noticed while running 'make test'.,Noticed while running 'make test'.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,245,2018-10-12T22:17:30Z,2018-10-13T16:53:55Z,2018-10-13T16:53:59Z,MERGED,True,11,11,8,https://github.com/austin987,Fix make test (whitespace/style issues),2,[],https://github.com/OpenRC/openrc/pull/245,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/245#issuecomment-429557307,Noticed while running 'make test'.,thanks!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,246,2018-10-12T22:35:37Z,2018-11-28T02:22:30Z,2018-11-28T02:22:42Z,MERGED,True,60,6,7,https://github.com/austin987,add a basic TravisCI setup,4,[],https://github.com/OpenRC/openrc/pull/246,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/246,"This would let you automate 'make test' checks, including when PRs are sent.
For an example, see https://travis-ci.org/austin987/openrc","This would let you automate 'make test' checks, including when PRs are sent.
For an example, see https://travis-ci.org/austin987/openrc",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,246,2018-10-12T22:35:37Z,2018-11-28T02:22:30Z,2018-11-28T02:22:42Z,MERGED,True,60,6,7,https://github.com/austin987,add a basic TravisCI setup,4,[],https://github.com/OpenRC/openrc/pull/246,https://github.com/austin987,2,https://github.com/OpenRC/openrc/pull/246#issuecomment-431484668,"This would let you automate 'make test' checks, including when PRs are sent.
For an example, see https://travis-ci.org/austin987/openrc","I also went a bit further and made whitespace/style stuff fatal (if $FATAL_CHECKS is not empty). Would be simple to make it fail always, but I assumed there was a reason it didn't already.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,246,2018-10-12T22:35:37Z,2018-11-28T02:22:30Z,2018-11-28T02:22:42Z,MERGED,True,60,6,7,https://github.com/austin987,add a basic TravisCI setup,4,[],https://github.com/OpenRC/openrc/pull/246,https://github.com/austin987,3,https://github.com/OpenRC/openrc/pull/246#issuecomment-436918714,"This would let you automate 'make test' checks, including when PRs are sent.
For an example, see https://travis-ci.org/austin987/openrc","So I tried adding @mrueg's changes, but looks like openrc doesn't build with musl-gcc:
musl-gcc -fPIC -DPIC  -I../includes -D_DEFAULT_SOURCE -D_POSIX_C_SOURCE=200809L  -O2 -g -std=c99 -Wall -Wextra -Wimplicit -Wshadow -Wformat=2 -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wmissing-format-attribute -Wnested-externs -Winline -Wwrite-strings -Wcast-align -Wcast-qual -Wpointer-arith -Wdeclaration-after-statement -Wsequence-point -Werror=implicit-function-declaration   -c libeinfo.c -o libeinfo.So
libeinfo.c: In function ‘colour_terminal’:
libeinfo.c:466:4: error: implicit declaration of function ‘strlcpy’ [-Werror=implicit-function-declaration]
    strlcpy(tmp, tgoto(bold, 0, 0), sizeof(tmp));
    ^
libeinfo.c:466:4: warning: nested extern declaration of ‘strlcpy’ [-Wnested-externs]
libeinfo.c:467:4: error: implicit declaration of function ‘strlcat’ [-Werror=implicit-function-declaration]
    strlcat(tmp, tgoto(_af, 0, c & 0x07), sizeof(tmp));
    ^
libeinfo.c:467:4: warning: nested extern declaration of ‘strlcat’ [-Wnested-externs]
libeinfo.c: In function ‘elogv’:
libeinfo.c:525:3: error: implicit declaration of function ‘vsyslog’ [-Werror=implicit-function-declaration]
   vsyslog(level, fmt, apc);
   ^

I've enabled gcc/clang, since those work. That passes:
https://travis-ci.org/austin987/openrc
@vapier @williamh is there anything else that's needed before this can go in?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,246,2018-10-12T22:35:37Z,2018-11-28T02:22:30Z,2018-11-28T02:22:42Z,MERGED,True,60,6,7,https://github.com/austin987,add a basic TravisCI setup,4,[],https://github.com/OpenRC/openrc/pull/246,https://github.com/vapier,4,https://github.com/OpenRC/openrc/pull/246#issuecomment-442294153,"This would let you automate 'make test' checks, including when PRs are sent.
For an example, see https://travis-ci.org/austin987/openrc",thanks for the improvements!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,248,2018-10-13T19:47:55Z,2018-10-15T16:52:29Z,2018-11-06T17:48:34Z,CLOSED,False,1,1,1,https://github.com/zmedico,supervise-daemon: fix respawn_max off by one,1,[],https://github.com/OpenRC/openrc/pull/248,https://github.com/zmedico,1,https://github.com/OpenRC/openrc/pull/248,"Fix the comparison between respawn_count and respawn_max so that
respawn_max = 1 will allow for one respawn. Since respawn_count is
incremented before the comparison, use a 'greater than' comparison
so that respawn will be triggered when respawn_count is equal to
respawn_max.
Fixes: #247","Fix the comparison between respawn_count and respawn_max so that
respawn_max = 1 will allow for one respawn. Since respawn_count is
incremented before the comparison, use a 'greater than' comparison
so that respawn will be triggered when respawn_count is equal to
respawn_max.
Fixes: #247",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,252,2018-11-06T01:30:56Z,2018-11-06T03:38:00Z,2018-11-06T17:48:09Z,CLOSED,False,3,0,1,https://github.com/zmedico,supervise-daemon: use waitpid to fix do_stop kill 0 for child,1,[],https://github.com/OpenRC/openrc/pull/252,https://github.com/zmedico,1,https://github.com/OpenRC/openrc/pull/252,"In do_stop, kill(pid, 0) always returns success for ""zombie"" child
processes that have been killed by an earlier SC_SIGNAL item in the
stop schedule. In order to make kill(pid, 0) fail on these child
processes, call waitpid before kill.","In do_stop, kill(pid, 0) always returns success for ""zombie"" child
processes that have been killed by an earlier SC_SIGNAL item in the
stop schedule. In order to make kill(pid, 0) fail on these child
processes, call waitpid before kill.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/abchk1234,1,https://github.com/OpenRC/openrc/pull/253,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/253#issuecomment-436317850,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","I would make the wait time a variable which can be configured.
Also, do we need the loop/sleep algorithm at all if we set the wait time on sv start?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/abchk1234,3,https://github.com/OpenRC/openrc/pull/253#issuecomment-436329115,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","@williamh
Sleep loop is needed, as runit's directory scan can take upto 5 seconds to bring runsv up, after which the service is started (wait time is for the service). Thats why the loop counter of 6.
Thanks.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/253#issuecomment-436748224,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","One more question.
Can we kick the scanner so it brings runsv up right away instead of just doing a sleep loop? I'm asking all of these questions because  I would rather find a way to make things come up faster than add a sleep loop to every runit service.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/udeved,5,https://github.com/OpenRC/openrc/pull/253#issuecomment-436751134,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","Afaik @williamh  it could also be avoided by putting some sleep in the runit run scripts.
But hang on, I'll ping our runit guy.
@konimex",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/konimex,6,https://github.com/OpenRC/openrc/pull/253#issuecomment-436821193,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","It won't work since this is about runsvdir spawning runsv, not runit service scripts itself.
Also, the loop and sv -w 6 start is a bit useless IMO since sv start is basically the same as sv -w 7 up or sv -w 7 start.
Anyway, I'll take a look at the bug, sv start shouldn't return anything other than 0 if the service has been symlinked and started.
EDIT: The best way to fix this is for the this script to wait until ${service_link}/supervise exist (instead of looping sv start until it succeeds) after symlinking. Then we can run sv start it if the file ./down exists. It'd be obsolete if ${service_link}/supervise exists from previous sessions.

Can we kick the scanner so it brings runsv up right away instead of just doing a sleep loop?

Hmmm... I think that would depend on runsvdir.c on runit.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/abchk1234,7,https://github.com/OpenRC/openrc/pull/253#issuecomment-436886189,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","@williamh
I appreciate your concern. Here is how it play out in practice. Following script is used for checking:
success=0; failure=0
for i in {1..10}; do if rc-service netdata-runit start; then success=$((success + 1)); else failure=$((failure + 1)); fi; sleep 1s; rc-service netdata-runit stop; sleep 1s; done
echo ""success: $success"";echo ""failure: $failure""

With patch (edited to echo slept time):
 * Starting netdata-runit ...
slept: 1
slept: 2
slept: 3                                                                                                                                                          [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...                                                                                                                                     [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
slept: 1                                                                                                                                                          [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...                                                                                                                                     [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
slept: 1                                                                                                                                                          [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...                                                                                                                                     [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...                                                                                                                                     [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...                                                                                                                                     [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
slept: 1                                                                                                                                                          [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...                                                                                                                                     [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
success: 10
failure: 0

Without patch:
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                                                                                                                  [ !! ]
 * ERROR: netdata-runit failed to start
 * WARNING: netdata-runit is already stopped
 * Starting netdata-runit ...
ok: run: /run/openrc/sv/netdata: (pid 19332) 1s                                                                                                                   [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
ok: run: /run/openrc/sv/netdata: (pid 19667) 1s                                                                                                                   [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
ok: run: /run/openrc/sv/netdata: (pid 19981) 1s                                                                                                                   [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
ok: run: /run/openrc/sv/netdata: (pid 20295) 1s                                                                                                                   [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                                                                                                                  [ !! ]
 * ERROR: netdata-runit failed to start
 * WARNING: netdata-runit is already stopped
 * Starting netdata-runit ...
ok: run: /run/openrc/sv/netdata: (pid 20615) 1s                                                                                                                   [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
ok: run: /run/openrc/sv/netdata: (pid 20953) 0s                                                                                                                   [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                                                                                                                  [ !! ]
 * ERROR: netdata-runit failed to start
 * WARNING: netdata-runit is already stopped
 * Starting netdata-runit ...
ok: run: /run/openrc/sv/netdata: (pid 21272) 1s                                                                                                                   [ ok ]
 * Stopping netdata-runit ...                                                                                                                                     [ ok ]
success: 7
failure: 3

In theory, I agree that running sv start ${service} should start runsv, wait 7 seconds for the service to be up, and then report status and exit.
In practice, it seems not to function this way. Maybe we create a race condition by first linking the service, not waiting for it to come up, and running sv start ${service} ?
To be sure will need to look at the source as @konimex suggests. In practice the patch works well enough in my opinion. Adding the sleep allows OpenRC to report the correct status, the service takes the same time to be up regardless.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/konimex,8,https://github.com/OpenRC/openrc/pull/253#issuecomment-438510789,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","In practice, it seems not to function this way.

IIRC, it's because runit has detected that there's no error in the daemon (i.e. something that would block the daemon from running properly so runit has to restart it until timeout (by default 7 sec, or 6 sec since you specified -w 6)), it just returns 0.
So I'd say it's an intended behavior.",True,{'THUMBS_UP': ['https://github.com/abchk1234']}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/abchk1234,9,https://github.com/OpenRC/openrc/pull/253#issuecomment-462044762,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]",Can we get this merged? Fixes the incorrect service status and does not lead to long sleep loop in most cases. Check #253 (comment) for demo.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,253,2018-11-06T15:35:32Z,2021-09-11T22:21:54Z,2021-09-11T22:21:54Z,CLOSED,False,14,2,1,https://github.com/abchk1234,[runit integration] give a bit of time to start runsv,3,[],https://github.com/OpenRC/openrc/pull/253,https://github.com/abchk1234,10,https://github.com/OpenRC/openrc/pull/253#issuecomment-526656024,"Currently, we run sv start immediately after linking the service.
The runsv process may not be up at the moment, as a result of which
openrc will mark the service as stopped, even though it may be brought up
by runit at the next scan.
This is documented in the gentoo wiki:
https://wiki.gentoo.org/wiki/Runit#OpenRC.27s_runit_integration_feature
This PR adds a timeout so that correct process state can be reported.
Before:
# rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
 * Failed to start netdata-runit                                          [ !! ]
 * ERROR: netdata-runit failed to start

After:
 rc-service netdata-runit start
 * Starting netdata-runit ...
fail: /run/openrc/sv/netdata: runsv not running
ok: run: /run/openrc/sv/netdata: (pid 15725) 1s                           [ ok ]","Hi all,
Have fixed up this patch to remove the extra options like -w 6 and also the extra sv start.
An alternative approach that does not use sleep is mentioned in #322",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,254,2018-11-08T14:02:35Z,2021-12-21T04:34:12Z,2021-12-21T04:34:12Z,CLOSED,False,3,3,1,https://github.com/abchk1234, supervise runsvdir daemon,1,[],https://github.com/OpenRC/openrc/pull/254,https://github.com/abchk1234,1,https://github.com/OpenRC/openrc/pull/254,"runsvdir is meant to be run in the foreground and supervised by design.
Now that supervise-daemon is available, no need to send it to background via start-stop-daemon.","runsvdir is meant to be run in the foreground and supervised by design.
Now that supervise-daemon is available, no need to send it to background via start-stop-daemon.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,255,2018-11-17T05:52:49Z,2018-12-27T21:39:57Z,2019-06-24T19:02:23Z,CLOSED,False,1,1,1,https://github.com/concatime,openrc-run: Fixing command_user in start-stop-daemon,1,[],https://github.com/OpenRC/openrc/pull/255,https://github.com/concatime,1,https://github.com/OpenRC/openrc/pull/255,"As mentionned in man openrc-run.8,

“If the daemon does not support changing to a different user id, you can use this to change the user id, and optionally group id, before start-stop-daemon(8) or supervise-daemon(8) launches the daemon.”","As mentionned in man openrc-run.8,

“If the daemon does not support changing to a different user id, you can use this to change the user id, and optionally group id, before start-stop-daemon(8) or supervise-daemon(8) launches the daemon.”",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,255,2018-11-17T05:52:49Z,2018-12-27T21:39:57Z,2019-06-24T19:02:23Z,CLOSED,False,1,1,1,https://github.com/concatime,openrc-run: Fixing command_user in start-stop-daemon,1,[],https://github.com/OpenRC/openrc/pull/255,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/255#issuecomment-450235950,"As mentionned in man openrc-run.8,

“If the daemon does not support changing to a different user id, you can use this to change the user id, and optionally group id, before start-stop-daemon(8) or supervise-daemon(8) launches the daemon.”","We use --user, not --chuid, so this fix is not correct.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,255,2018-11-17T05:52:49Z,2018-12-27T21:39:57Z,2019-06-24T19:02:23Z,CLOSED,False,1,1,1,https://github.com/concatime,openrc-run: Fixing command_user in start-stop-daemon,1,[],https://github.com/OpenRC/openrc/pull/255,https://github.com/concatime,3,https://github.com/OpenRC/openrc/pull/255#issuecomment-454394667,"As mentionned in man openrc-run.8,

“If the daemon does not support changing to a different user id, you can use this to change the user id, and optionally group id, before start-stop-daemon(8) or supervise-daemon(8) launches the daemon.”","But start_stop_daemon_args='--user nobody:www-data' does not work, start_stop_daemon_args='--chuid nobody:www-data' does.
From start-stop-daemon --help:
  -u, --user <username|uid>     process owner to check
Options:
  -g, --group <group|gid>       run process as this group
  -c, --chuid <name|uid[:group|gid]>
                                change to this user/group before process",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,255,2018-11-17T05:52:49Z,2018-12-27T21:39:57Z,2019-06-24T19:02:23Z,CLOSED,False,1,1,1,https://github.com/concatime,openrc-run: Fixing command_user in start-stop-daemon,1,[],https://github.com/OpenRC/openrc/pull/255,https://github.com/concatime,4,https://github.com/OpenRC/openrc/pull/255#issuecomment-497025011,"As mentionned in man openrc-run.8,

“If the daemon does not support changing to a different user id, you can use this to change the user id, and optionally group id, before start-stop-daemon(8) or supervise-daemon(8) launches the daemon.”","Up. From the man page, command_user should also interpret group/gid. But --user does not.
Downside: supervise-daemon does not support --chuid.
Upside: supervise-daemon does support --user with optional group.
Related to #184",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,255,2018-11-17T05:52:49Z,2018-12-27T21:39:57Z,2019-06-24T19:02:23Z,CLOSED,False,1,1,1,https://github.com/concatime,openrc-run: Fixing command_user in start-stop-daemon,1,[],https://github.com/OpenRC/openrc/pull/255,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/255#issuecomment-497127998,"As mentionned in man openrc-run.8,

“If the daemon does not support changing to a different user id, you can use this to change the user id, and optionally group id, before start-stop-daemon(8) or supervise-daemon(8) launches the daemon.”","I will check this out and reply later, but if this is an issue, the fix
would be to make sure --user works correctly and not switch to --chuid.
…
On 5/29/2019 12:06 PM, Issam Maghni wrote:

 Up. From the man page, |command_user| should also interpret group/gid.
 But |--user| does not.

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub
 <#255?email_source=notifications&email_token=AAAPWY6IJBYKHLKYFG7O7I3PX2ZYPA5CNFSM4GE5FWB2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWP774Y#issuecomment-497025011>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAAPWY5LUH6MQXECONABI63PX2ZYPANCNFSM4GE5FWBQ>.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,256,2018-11-17T07:39:04Z,2019-02-11T17:58:17Z,2019-02-11T17:58:17Z,CLOSED,False,0,5,1,https://github.com/austin987,test/skel.runtests.sh: remove unused file,1,[],https://github.com/OpenRC/openrc/pull/256,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/256,"git grep shows no usage, and make test passes
@williamh","git grep shows no usage, and make test passes
@williamh",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,257,2018-11-17T11:28:05Z,2018-11-18T18:23:00Z,2018-11-18T18:23:00Z,MERGED,True,1,1,1,https://github.com/austin987,sh/functions.sh.in: return a different value for invalid input in yesno(),1,[],https://github.com/OpenRC/openrc/pull/257,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/257,"Currently 0 is returned for yes, 1 for no, and 1 for invalid input. This changes invalid input to return 255, so it can be differentiated from no.
@williamh","Currently 0 is returned for yes, 1 for no, and 1 for invalid input. This changes invalid input to return 255, so it can be differentiated from no.
@williamh",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,257,2018-11-17T11:28:05Z,2018-11-18T18:23:00Z,2018-11-18T18:23:00Z,MERGED,True,1,1,1,https://github.com/austin987,sh/functions.sh.in: return a different value for invalid input in yesno(),1,[],https://github.com/OpenRC/openrc/pull/257,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/257#issuecomment-439673451,"Currently 0 is returned for yes, 1 for no, and 1 for invalid input. This changes invalid input to return 255, so it can be differentiated from no.
@williamh",seems like we should use 2 instead of moving into the reserved space above 125,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,257,2018-11-17T11:28:05Z,2018-11-18T18:23:00Z,2018-11-18T18:23:00Z,MERGED,True,1,1,1,https://github.com/austin987,sh/functions.sh.in: return a different value for invalid input in yesno(),1,[],https://github.com/OpenRC/openrc/pull/257,https://github.com/austin987,3,https://github.com/OpenRC/openrc/pull/257#issuecomment-439705149,"Currently 0 is returned for yes, 1 for no, and 1 for invalid input. This changes invalid input to return 255, so it can be differentiated from no.
@williamh","255 is the max value, though I didn't realize it's considered reserved. See https://www.tldp.org/LDP/abs/html/exit-status.html.
I'll update later today",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,257,2018-11-17T11:28:05Z,2018-11-18T18:23:00Z,2018-11-18T18:23:00Z,MERGED,True,1,1,1,https://github.com/austin987,sh/functions.sh.in: return a different value for invalid input in yesno(),1,[],https://github.com/OpenRC/openrc/pull/257,https://github.com/austin987,4,https://github.com/OpenRC/openrc/pull/257#issuecomment-439708484,"Currently 0 is returned for yes, 1 for no, and 1 for invalid input. This changes invalid input to return 255, so it can be differentiated from no.
@williamh",Updated to return 2.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,261,2018-12-02T06:58:33Z,2019-02-11T19:57:31Z,2019-02-11T19:57:31Z,CLOSED,False,7,1,2,https://github.com/austin987,Fix/test muslc,2,[],https://github.com/OpenRC/openrc/pull/261,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/261,"Thanks to @concatime for pointing out the musl FAQ. This fixes the build with muslc, verified by TravisCI, and adds a TravisCI check to prevent future regressions.
@williamh please let me know if you'd like this handled differently. The BSD .mk include files already define BSD_SOURCE, but given that muslc is Linux only, os-Linux.mk seemed appropriate.","Thanks to @concatime for pointing out the musl FAQ. This fixes the build with muslc, verified by TravisCI, and adds a TravisCI check to prevent future regressions.
@williamh please let me know if you'd like this handled differently. The BSD .mk include files already define BSD_SOURCE, but given that muslc is Linux only, os-Linux.mk seemed appropriate.",True,{'THUMBS_UP': ['https://github.com/nykula']}
OpenRC/openrc,https://github.com/OpenRC/openrc,261,2018-12-02T06:58:33Z,2019-02-11T19:57:31Z,2019-02-11T19:57:31Z,CLOSED,False,7,1,2,https://github.com/austin987,Fix/test muslc,2,[],https://github.com/OpenRC/openrc/pull/261,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/261#issuecomment-445396502,"Thanks to @concatime for pointing out the musl FAQ. This fixes the build with muslc, verified by TravisCI, and adds a TravisCI check to prevent future regressions.
@williamh please let me know if you'd like this handled differently. The BSD .mk include files already define BSD_SOURCE, but given that muslc is Linux only, os-Linux.mk seemed appropriate.","Here are my obsirvations based on looking at the source code:
strlcat is defined and used in libeinfo.c only. However, we are not seeing the definition apparently.
strlcpy is defined in helpers.h, but I'm not sure why we aren't picking it up. Try #including helpers.h in the files that use it in case it isn't being included some how?
I'm not quite sure what to do about vsyslog; this function isn't posix.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,261,2018-12-02T06:58:33Z,2019-02-11T19:57:31Z,2019-02-11T19:57:31Z,CLOSED,False,7,1,2,https://github.com/austin987,Fix/test muslc,2,[],https://github.com/OpenRC/openrc/pull/261,https://github.com/austin987,3,https://github.com/OpenRC/openrc/pull/261#issuecomment-445577022,"Thanks to @concatime for pointing out the musl FAQ. This fixes the build with muslc, verified by TravisCI, and adds a TravisCI check to prevent future regressions.
@williamh please let me know if you'd like this handled differently. The BSD .mk include files already define BSD_SOURCE, but given that muslc is Linux only, os-Linux.mk seemed appropriate.","helpers.h is already included in libeinfo.c:
https://github.com/OpenRC/openrc/blob/master/src/libeinfo/libeinfo.c#L41",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,263,2018-12-03T19:54:08Z,2018-12-03T21:28:47Z,2018-12-03T21:28:47Z,CLOSED,False,5,10,3,https://github.com/austin987,Always fail if checks fail,2,[],https://github.com/OpenRC/openrc/pull/263,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/263,@williamh,@williamh,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,265,2018-12-06T01:10:15Z,2019-02-19T19:59:42Z,2019-09-10T16:55:38Z,CLOSED,False,36,0,2,https://github.com/gyakovlev,.cirrus.yml: give cirrus-ci a try (freebsd),1,[],https://github.com/OpenRC/openrc/pull/265,https://github.com/gyakovlev,1,https://github.com/OpenRC/openrc/pull/265,"This will require a bit more work, but it's a good start.
I'll keep pushing to this branch as I figure out how to fix things.
While working on it I found a strange behavior in cirrus-ci, they set OS=freebsd (lowercase) while makefile excpects it to be FreeBSD so there is an env workaround for now.
cirruslabs/cirrus-ci-docs#100","This will require a bit more work, but it's a good start.
I'll keep pushing to this branch as I figure out how to fix things.
While working on it I found a strange behavior in cirrus-ci, they set OS=freebsd (lowercase) while makefile excpects it to be FreeBSD so there is an env workaround for now.
cirruslabs/cirrus-ci-docs#100",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,265,2018-12-06T01:10:15Z,2019-02-19T19:59:42Z,2019-09-10T16:55:38Z,CLOSED,False,36,0,2,https://github.com/gyakovlev,.cirrus.yml: give cirrus-ci a try (freebsd),1,[],https://github.com/OpenRC/openrc/pull/265,https://github.com/gyakovlev,2,https://github.com/OpenRC/openrc/pull/265#issuecomment-465272208,"This will require a bit more work, but it's a good start.
I'll keep pushing to this branch as I figure out how to fix things.
While working on it I found a strange behavior in cirrus-ci, they set OS=freebsd (lowercase) while makefile excpects it to be FreeBSD so there is an env workaround for now.
cirruslabs/cirrus-ci-docs#100","rebased,
freebsd now passes tests.
I'll squash commits for clean history.
the only suspicious thing in the test output is fcntl(): Bad file descriptor, can't reproduce that locally on freeBSD vm",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,268,2018-12-13T10:57:46Z,2018-12-27T20:05:07Z,2019-10-05T14:09:42Z,CLOSED,False,25,5,4,https://github.com/udeved,"scripts: fix shutdown, poweroff, halt, reboot",1,[],https://github.com/OpenRC/openrc/pull/268,https://github.com/udeved,1,https://github.com/OpenRC/openrc/pull/268,"if script args are empty, assign 'now'
Perhaps no ideal solution.","if script args are empty, assign 'now'
Perhaps no ideal solution.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,268,2018-12-13T10:57:46Z,2018-12-27T20:05:07Z,2019-10-05T14:09:42Z,CLOSED,False,25,5,4,https://github.com/udeved,"scripts: fix shutdown, poweroff, halt, reboot",1,[],https://github.com/OpenRC/openrc/pull/268,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/268#issuecomment-450221020,"if script args are empty, assign 'now'
Perhaps no ideal solution.","These scripts are designed to emulate their sysvinit counterparts.
shutdown requires a time argument, so it was a bug to not require it before.
The others do not, and they pass now by default if one isn't given.
Because of this, I have accepted part of your pull request.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,269,2018-12-19T04:45:38Z,2018-12-24T18:05:30Z,2018-12-24T18:05:30Z,CLOSED,False,20,15,1,https://github.com/philhofer,src/librc/librc-daemon.c: fix buffer overrun in pid_is_argv,1,[],https://github.com/OpenRC/openrc/pull/269,https://github.com/philhofer,1,https://github.com/OpenRC/openrc/pull/269,"The contents of /proc//cmdline are read into
a stack buffer using
  bytes = read(fd, buffer, sizeof(buffer));

followed by appending a null terminator to the buffer with
  buffer[bytes] = '\0';

If bytes == sizeof(buffer), then this write is out-of-bounds.
Refactor the code to use rc_getfile instead, since PATH_MAX
is not the maximum size of /proc/<pid>/cmdline. (I hit this
issue in practice while compiling Linux; it tripped the
stack-smashing protector.)
This is roughly the same buffer overflow condition
that was fixed by commit 0ddee9b","The contents of /proc//cmdline are read into
a stack buffer using
  bytes = read(fd, buffer, sizeof(buffer));

followed by appending a null terminator to the buffer with
  buffer[bytes] = '\0';

If bytes == sizeof(buffer), then this write is out-of-bounds.
Refactor the code to use rc_getfile instead, since PATH_MAX
is not the maximum size of /proc/<pid>/cmdline. (I hit this
issue in practice while compiling Linux; it tripped the
stack-smashing protector.)
This is roughly the same buffer overflow condition
that was fixed by commit 0ddee9b",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,270,2018-12-19T05:07:42Z,2018-12-27T17:30:44Z,2018-12-27T17:30:44Z,CLOSED,False,4,4,3,https://github.com/philhofer,src/librc/librc-daemon.c: fix three potential out-of-bounds reads due to misuse of readlink,1,[],https://github.com/OpenRC/openrc/pull/270,https://github.com/philhofer,1,https://github.com/OpenRC/openrc/pull/270,"readlink(3) does not nul-terminate the result it sticks
into the supplied buffer. Consequently, the code
  rc = readlink(path, buf, sizeof(buf));

does not necessarily produce a C string.
The code in rc_find_pid() produces some C strings this way
and passes them to strlen() and strcmp(), which can lead
to an out-of-bounds read.
In this case, since the code already takes care to
zero-initialize the buffers before passing them
to readlink(3), only allow sizeof(buf)-1 bytes to
be returned.","readlink(3) does not nul-terminate the result it sticks
into the supplied buffer. Consequently, the code
  rc = readlink(path, buf, sizeof(buf));

does not necessarily produce a C string.
The code in rc_find_pid() produces some C strings this way
and passes them to strlen() and strcmp(), which can lead
to an out-of-bounds read.
In this case, since the code already takes care to
zero-initialize the buffers before passing them
to readlink(3), only allow sizeof(buf)-1 bytes to
be returned.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,273,2018-12-23T20:11:08Z,2018-12-24T16:37:27Z,2018-12-24T16:37:27Z,CLOSED,False,7,7,1,https://github.com/philhofer,src/rc/supervise-daemon.c: formatting fixes,1,[],https://github.com/OpenRC/openrc/pull/273,https://github.com/philhofer,1,https://github.com/OpenRC/openrc/pull/273,Fix misleading indentation and other erroneous whitespace.,Fix misleading indentation and other erroneous whitespace.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,274,2018-12-23T20:22:59Z,2018-12-26T15:50:29Z,2018-12-26T15:50:29Z,CLOSED,False,0,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: fix free of null pointer,1,[],https://github.com/OpenRC/openrc/pull/274,https://github.com/philhofer,1,https://github.com/OpenRC/openrc/pull/274,"The cleanup() function in supervise-daemon.c is provided
to atexit(3) early in main() while the global pointer
changeuser is still NULL. If the code calls exit(3)
before changeuser is assigned a value (like on line 670
where eerrorx() is called), then the program will crash
rather than printing an error message.
Remove the call to free(3) entirely; there is no need to
free the memory immediately before exiting.","The cleanup() function in supervise-daemon.c is provided
to atexit(3) early in main() while the global pointer
changeuser is still NULL. If the code calls exit(3)
before changeuser is assigned a value (like on line 670
where eerrorx() is called), then the program will crash
rather than printing an error message.
Remove the call to free(3) entirely; there is no need to
free the memory immediately before exiting.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,274,2018-12-23T20:22:59Z,2018-12-26T15:50:29Z,2018-12-26T15:50:29Z,CLOSED,False,0,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: fix free of null pointer,1,[],https://github.com/OpenRC/openrc/pull/274,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/274#issuecomment-449674715,"The cleanup() function in supervise-daemon.c is provided
to atexit(3) early in main() while the global pointer
changeuser is still NULL. If the code calls exit(3)
before changeuser is assigned a value (like on line 670
where eerrorx() is called), then the program will crash
rather than printing an error message.
Remove the call to free(3) entirely; there is no need to
free the memory immediately before exiting.",free(NULL) is perfectly safe.  are you actually seeing a crash somewhere ?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,274,2018-12-23T20:22:59Z,2018-12-26T15:50:29Z,2018-12-26T15:50:29Z,CLOSED,False,0,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: fix free of null pointer,1,[],https://github.com/OpenRC/openrc/pull/274,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/274#issuecomment-449752364,"The cleanup() function in supervise-daemon.c is provided
to atexit(3) early in main() while the global pointer
changeuser is still NULL. If the code calls exit(3)
before changeuser is assigned a value (like on line 670
where eerrorx() is called), then the program will crash
rather than printing an error message.
Remove the call to free(3) entirely; there is no need to
free the memory immediately before exiting.","I agree with @vapier  on this, free(null) does not cause crashes.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,274,2018-12-23T20:22:59Z,2018-12-26T15:50:29Z,2018-12-26T15:50:29Z,CLOSED,False,0,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: fix free of null pointer,1,[],https://github.com/OpenRC/openrc/pull/274,https://github.com/philhofer,4,https://github.com/OpenRC/openrc/pull/274#issuecomment-449984593,"The cleanup() function in supervise-daemon.c is provided
to atexit(3) early in main() while the global pointer
changeuser is still NULL. If the code calls exit(3)
before changeuser is assigned a value (like on line 670
where eerrorx() is called), then the program will crash
rather than printing an error message.
Remove the call to free(3) entirely; there is no need to
free the memory immediately before exiting.",You're absolutely right. Not sure what I was thinking here. Sorry for the noise. Closing.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,275,2018-12-23T20:42:56Z,2018-12-24T02:01:41Z,2018-12-24T02:01:47Z,MERGED,True,1,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: do not pass NULL to strcmp,1,[],https://github.com/OpenRC/openrc/pull/275,https://github.com/philhofer,1,https://github.com/OpenRC/openrc/pull/275,"The following will cause a segfault due to NULL being
passed to strcmp(3)
$ RC_SVCNAME=foo supervise-daemon

Fix the bounds check on argc in main. If argc<=1, then
it is not safe to dereference argv[1].","The following will cause a segfault due to NULL being
passed to strcmp(3)
$ RC_SVCNAME=foo supervise-daemon

Fix the bounds check on argc in main. If argc<=1, then
it is not safe to dereference argv[1].",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,275,2018-12-23T20:42:56Z,2018-12-24T02:01:41Z,2018-12-24T02:01:47Z,MERGED,True,1,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: do not pass NULL to strcmp,1,[],https://github.com/OpenRC/openrc/pull/275,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/275#issuecomment-449676469,"The following will cause a segfault due to NULL being
passed to strcmp(3)
$ RC_SVCNAME=foo supervise-daemon

Fix the bounds check on argc in main. If argc<=1, then
it is not safe to dereference argv[1].","thanks, looks good",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,276,2018-12-23T21:14:57Z,2018-12-23T21:30:29Z,2018-12-23T21:36:03Z,CLOSED,False,0,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: remove unused variable,1,[],https://github.com/OpenRC/openrc/pull/276,https://github.com/philhofer,1,https://github.com/OpenRC/openrc/pull/276,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,276,2018-12-23T21:14:57Z,2018-12-23T21:30:29Z,2018-12-23T21:36:03Z,CLOSED,False,0,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: remove unused variable,1,[],https://github.com/OpenRC/openrc/pull/276,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/276#issuecomment-449664363,,you'll want to rebase onto latest master.  this is already fixed in ed8b768.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,276,2018-12-23T21:14:57Z,2018-12-23T21:30:29Z,2018-12-23T21:36:03Z,CLOSED,False,0,1,1,https://github.com/philhofer,src/rc/supervise-daemon.c: remove unused variable,1,[],https://github.com/OpenRC/openrc/pull/276,https://github.com/philhofer,3,https://github.com/OpenRC/openrc/pull/276#issuecomment-449664635,,Ack,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,277,2018-12-23T21:30:33Z,2018-12-24T01:27:07Z,2018-12-24T01:27:14Z,MERGED,True,0,1,1,https://github.com/philhofer,src/rc/openrc-run.c: remove duplicate statement,1,[],https://github.com/OpenRC/openrc/pull/277,https://github.com/philhofer,1,https://github.com/OpenRC/openrc/pull/277,"The statement
  ll = strlen(applet);

appears twice in the same block without any
intervening assignment to the variables
ll or applet
Remove the second (duplicate) statement.","The statement
  ll = strlen(applet);

appears twice in the same block without any
intervening assignment to the variables
ll or applet
Remove the second (duplicate) statement.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,277,2018-12-23T21:30:33Z,2018-12-24T01:27:07Z,2018-12-24T01:27:14Z,MERGED,True,0,1,1,https://github.com/philhofer,src/rc/openrc-run.c: remove duplicate statement,1,[],https://github.com/OpenRC/openrc/pull/277,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/277#issuecomment-449674671,"The statement
  ll = strlen(applet);

appears twice in the same block without any
intervening assignment to the variables
ll or applet
Remove the second (duplicate) statement.",thanks!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,278,2018-12-24T20:17:29Z,,2022-01-27T03:38:15Z,OPEN,False,23,13,4,https://github.com/williamh,Convert internal rc_getline() calls to getline() calls,1,[],https://github.com/OpenRC/openrc/pull/278,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/278,"getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.","getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,278,2018-12-24T20:17:29Z,,2022-01-27T03:38:15Z,OPEN,False,23,13,4,https://github.com/williamh,Convert internal rc_getline() calls to getline() calls,1,[],https://github.com/OpenRC/openrc/pull/278,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/278#issuecomment-449768625,"getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.",I would like to call for some testers to make sure this works before I merge it. Please report back here.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,278,2018-12-24T20:17:29Z,,2022-01-27T03:38:15Z,OPEN,False,23,13,4,https://github.com/williamh,Convert internal rc_getline() calls to getline() calls,1,[],https://github.com/OpenRC/openrc/pull/278,https://github.com/dwfreed,3,https://github.com/OpenRC/openrc/pull/278#issuecomment-449772213,"getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.","getline's behavior does not match rc_getline's in various ways, like whether the newline is included if found (getline: yes, rc_getline: no).  You should just make rc_getline a wrapper for getline, so that this can be fixed in one location, instead of having to do it in several.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,278,2018-12-24T20:17:29Z,,2022-01-27T03:38:15Z,OPEN,False,23,13,4,https://github.com/williamh,Convert internal rc_getline() calls to getline() calls,1,[],https://github.com/OpenRC/openrc/pull/278,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/278#issuecomment-449867771,"getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.","@dwfreed  The whole reason rc_getline was written was because getline wasn't standard when it was needed. Also, the code already uses both rc_getline and getline. I think I would still rather migrate to getline.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,278,2018-12-24T20:17:29Z,,2022-01-27T03:38:15Z,OPEN,False,23,13,4,https://github.com/williamh,Convert internal rc_getline() calls to getline() calls,1,[],https://github.com/OpenRC/openrc/pull/278,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/278#issuecomment-449868862,"getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.","@dwfreed  I see that rc_getline is only used in librc. If I do a wrapper, I would want it to be private to the library, not available for general use.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,278,2018-12-24T20:17:29Z,,2022-01-27T03:38:15Z,OPEN,False,23,13,4,https://github.com/williamh,Convert internal rc_getline() calls to getline() calls,1,[],https://github.com/OpenRC/openrc/pull/278,https://github.com/vapier,6,https://github.com/OpenRC/openrc/pull/278#issuecomment-451422587,"getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.","the low usage rates implies it's not a big deal to drop even if it slightly simplifies trailing newline semantics. everyone is used to the posix api at this point so it's a bit of a lost battle.
technically we'd need to keep the symbol just to not break abi.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,278,2018-12-24T20:17:29Z,,2022-01-27T03:38:15Z,OPEN,False,23,13,4,https://github.com/williamh,Convert internal rc_getline() calls to getline() calls,1,[],https://github.com/OpenRC/openrc/pull/278,https://github.com/williamh,7,https://github.com/OpenRC/openrc/pull/278#issuecomment-463292232,"getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.","@vapier I could use some insight here. Is it ok in this case because of the low usage to break abi and restore it if someone complains? If not, I guess it means that if I keep the symbol I have to keep the function?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,278,2018-12-24T20:17:29Z,,2022-01-27T03:38:15Z,OPEN,False,23,13,4,https://github.com/williamh,Convert internal rc_getline() calls to getline() calls,1,[],https://github.com/OpenRC/openrc/pull/278,https://github.com/dwfreed,8,https://github.com/OpenRC/openrc/pull/278#issuecomment-1022817289,"getline has been in posix since POSIX.1-2008, so it should be safe for
us to use it instead of using our wrapper function.","I'm not able to do a proper review right now, but a quick look indicates many of the consumers of rc_getline expect and need the newline dropping semantics. The sheer quantity suggests it would be better to just use rc_getline as a wrapper around getline to drop the newline, otherwise you will have to implement that in several places, which seems error prone and a waste of effort.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,280,2018-12-27T18:16:01Z,2018-12-27T19:14:39Z,2018-12-27T19:14:39Z,CLOSED,False,14,14,7,https://github.com/philhofer,src/: fix leading whitespace,1,[],https://github.com/OpenRC/openrc/pull/280,https://github.com/philhofer,1,https://github.com/OpenRC/openrc/pull/280,"Clean up code indented with mixed tabs and spaces.
No actual code changes.","Clean up code indented with mixed tabs and spaces.
No actual code changes.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,283,2019-01-15T21:30:02Z,2019-01-18T19:47:43Z,2019-01-18T19:47:43Z,CLOSED,False,1,0,1,https://github.com/mookie-,mention openrc-run.8 in openrc.8,1,[],https://github.com/OpenRC/openrc/pull/283,https://github.com/mookie-,1,https://github.com/OpenRC/openrc/pull/283,"This is a proposal to mention openrc-run.8 in openrc. The reason for this is that I've searched for documentation and looked at man openrc but wasn't bright enough to find openrc-run.8.
If this is not wanted, please just delete this PR.","This is a proposal to mention openrc-run.8 in openrc. The reason for this is that I've searched for documentation and looked at man openrc but wasn't bright enough to find openrc-run.8.
If this is not wanted, please just delete this PR.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,285,2019-01-18T11:59:59Z,2019-01-21T23:44:34Z,2019-01-21T23:44:34Z,CLOSED,False,33,23,1,https://github.com/xdch47,zsh-completion: _rc-service enhancement,2,[],https://github.com/OpenRC/openrc/pull/285,https://github.com/xdch47,1,https://github.com/OpenRC/openrc/pull/285,"support extra_commands of init-script
add for support flags / command combination","support extra_commands of init-script
add for support flags / command combination",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,285,2019-01-18T11:59:59Z,2019-01-21T23:44:34Z,2019-01-21T23:44:34Z,CLOSED,False,33,23,1,https://github.com/xdch47,zsh-completion: _rc-service enhancement,2,[],https://github.com/OpenRC/openrc/pull/285,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/285#issuecomment-455663216,"support extra_commands of init-script
add for support flags / command combination","I would rather you not use sed to parse commands out of the script.
Can you parse the output of ""rc-service foo describe"" the way the bash completion does?
Also how do you feel about two separate commits (one that adds the functionality that gets the list of services and one for the change that gets the commands from a service)?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,285,2019-01-18T11:59:59Z,2019-01-21T23:44:34Z,2019-01-21T23:44:34Z,CLOSED,False,33,23,1,https://github.com/xdch47,zsh-completion: _rc-service enhancement,2,[],https://github.com/OpenRC/openrc/pull/285,https://github.com/xdch47,3,https://github.com/OpenRC/openrc/pull/285#issuecomment-455696721,"support extra_commands of init-script
add for support flags / command combination","Hi,
I tried to split the commits - the first one is rather a fix, allow to
complete service and action with flags (e.g. rc-service -v iptables start), what did not worked before...
The second commit adds the extra commands (e.g. rc-service iptables save)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,287,2019-02-06T12:01:55Z,2021-12-21T00:03:24Z,2021-12-21T00:03:24Z,CLOSED,False,1,0,1,https://github.com/mode89,net-online: fix ping test timeout,1,[],https://github.com/OpenRC/openrc/pull/287,https://github.com/mode89,1,https://github.com/OpenRC/openrc/pull/287,"ping doesn't wait, if only one probe was requested.","ping doesn't wait, if only one probe was requested.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,287,2019-02-06T12:01:55Z,2021-12-21T00:03:24Z,2021-12-21T00:03:24Z,CLOSED,False,1,0,1,https://github.com/mode89,net-online: fix ping test timeout,1,[],https://github.com/OpenRC/openrc/pull/287,https://github.com/DocMAX,2,https://github.com/OpenRC/openrc/pull/287#issuecomment-854482575,"ping doesn't wait, if only one probe was requested.",when is this going to be merged?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,287,2019-02-06T12:01:55Z,2021-12-21T00:03:24Z,2021-12-21T00:03:24Z,CLOSED,False,1,0,1,https://github.com/mode89,net-online: fix ping test timeout,1,[],https://github.com/OpenRC/openrc/pull/287,https://github.com/mode89,3,https://github.com/OpenRC/openrc/pull/287#issuecomment-859195048,"ping doesn't wait, if only one probe was requested.","Hi @DocMAX!
I made this pull request two years ago, and frankly don't remember why :)
Can you please help by describing your use-case?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,287,2019-02-06T12:01:55Z,2021-12-21T00:03:24Z,2021-12-21T00:03:24Z,CLOSED,False,1,0,1,https://github.com/mode89,net-online: fix ping test timeout,1,[],https://github.com/OpenRC/openrc/pull/287,https://github.com/thesamesam,4,https://github.com/OpenRC/openrc/pull/287#issuecomment-998358113,"ping doesn't wait, if only one probe was requested.",Should be fixed by e21b01b.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,289,2019-02-11T23:20:35Z,,2022-03-06T01:56:07Z,OPEN,False,1,1,1,https://github.com/williamh,remove _BSD_SOURCE and _XOPEN_SOURCE feature test macros,1,[],https://github.com/OpenRC/openrc/pull/289,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/289,"These are not needed on glibc systems, so this is to find out why they
are needed for musl.","These are not needed on glibc systems, so this is to find out why they
are needed for musl.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,289,2019-02-11T23:20:35Z,,2022-03-06T01:56:07Z,OPEN,False,1,1,1,https://github.com/williamh,remove _BSD_SOURCE and _XOPEN_SOURCE feature test macros,1,[],https://github.com/OpenRC/openrc/pull/289,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/289#issuecomment-462545141,"These are not needed on glibc systems, so this is to find out why they
are needed for musl.","@blueness  Hi, this looks like a possible issue with musl, maybe with openrc but I'm not sure. I don't understand why OpenRC needs _BSD_SOURCE and _XOPEN_SOURCE on musl but not gglibc. Can you give me some insight?
Thanks much.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,289,2019-02-11T23:20:35Z,,2022-03-06T01:56:07Z,OPEN,False,1,1,1,https://github.com/williamh,remove _BSD_SOURCE and _XOPEN_SOURCE feature test macros,1,[],https://github.com/OpenRC/openrc/pull/289,https://github.com/vapier,3,https://github.com/OpenRC/openrc/pull/289#issuecomment-462552409,"These are not needed on glibc systems, so this is to find out why they
are needed for musl.","ftr, _DEFAULT_SOURCE is a glibc-ism and is new to glibc-2.19.  versions older than that did not support _DEFAULT_SOURCE at all.  you can consider it (largely) equiv to _BSD_SOURCE.  so the question there is more ""do you want to support building against <glibc-2.18"".  if so, you need to define both.
_XOPEN_SOURCE is a POSIX standard define.  defining it w/out a version i think is like saying ""give me the latest POSIX version"".
iiuc, it's a bit redundant with also defining _POSIX_C_SOURCE.
but making the argument ""we have _DEFAULT_SOURCE therefore we don't need _BSD_SOURCE or _XOPEN_SOURCE"" is misleading.  you should define what you want to support precisely (C library versions & portability) and from there we can determine what defines to set up.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,289,2019-02-11T23:20:35Z,,2022-03-06T01:56:07Z,OPEN,False,1,1,1,https://github.com/williamh,remove _BSD_SOURCE and _XOPEN_SOURCE feature test macros,1,[],https://github.com/OpenRC/openrc/pull/289,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/289#issuecomment-462567019,"These are not needed on glibc systems, so this is to find out why they
are needed for musl.","@vapier As of musl 1.1.5, musl also supports _DEFAULT_SOURCE.
I don't know how I feel about <glibc-2.19 since we don't have it in Gentoo, and I haven't received any issues about not supporting older glibc versions.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,289,2019-02-11T23:20:35Z,,2022-03-06T01:56:07Z,OPEN,False,1,1,1,https://github.com/williamh,remove _BSD_SOURCE and _XOPEN_SOURCE feature test macros,1,[],https://github.com/OpenRC/openrc/pull/289,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/289#issuecomment-462895296,"These are not needed on glibc systems, so this is to find out why they
are needed for musl.","@vapier  @blueness  Ok, I am pretty confused here. I don't understand why we need so many more feature test macros for musl than we do for glibc. I thought that _DEFAULT_SOURCE on musl was supposed to give the same profile as it does on glibc, but apparently it doesn't. We can't gdrop _DEFAULT_SOURCE because modern glibc is deprecating _BSD_SOURCE in favor of _DEFAULT_SOURCE.
Thoughts?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,289,2019-02-11T23:20:35Z,,2022-03-06T01:56:07Z,OPEN,False,1,1,1,https://github.com/williamh,remove _BSD_SOURCE and _XOPEN_SOURCE feature test macros,1,[],https://github.com/OpenRC/openrc/pull/289,https://github.com/williamh,6,https://github.com/OpenRC/openrc/pull/289#issuecomment-462904539,"These are not needed on glibc systems, so this is to find out why they
are needed for musl.","ok, reading the posix definition of _XOPEN_SOURCE, it looks like -D_XOPEN_SOURCE=700 might be what I need instead of the POSIX_C_SOURCE definition. I'm testing that on this p/r shortly.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,289,2019-02-11T23:20:35Z,,2022-03-06T01:56:07Z,OPEN,False,1,1,1,https://github.com/williamh,remove _BSD_SOURCE and _XOPEN_SOURCE feature test macros,1,[],https://github.com/OpenRC/openrc/pull/289,https://github.com/williamh,7,https://github.com/OpenRC/openrc/pull/289#issuecomment-462917410,"These are not needed on glibc systems, so this is to find out why they
are needed for musl.","@vapier  Ok, if I put this commit on the main branch, since it builds on current Gentoo glibc and musl (per travis), what does it say we are compatible with in terms of glibc? what about uclibc, or do we care about uclibc?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,289,2019-02-11T23:20:35Z,,2022-03-06T01:56:07Z,OPEN,False,1,1,1,https://github.com/williamh,remove _BSD_SOURCE and _XOPEN_SOURCE feature test macros,1,[],https://github.com/OpenRC/openrc/pull/289,https://github.com/vapier,8,https://github.com/OpenRC/openrc/pull/289#issuecomment-1059875132,"These are not needed on glibc systems, so this is to find out why they
are needed for musl.","personally i find the date based _POSIX_C_SOURCE to be more clear at a glance since _XOPEN_SOURCE requires me to open the POSIX spec, find the relevant chapter, and look the constant up in the table.
although at this point, it looks like the meson build has a completely different set of defines, and the changes haven't been synced with the makefiles.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,290,2019-02-12T22:49:17Z,2019-02-12T22:55:36Z,2019-02-12T22:56:28Z,CLOSED,False,32,4,2,https://github.com/williamh,improve shutdown documentation,1,[],https://github.com/OpenRC/openrc/pull/290,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/290,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/nykula,1,https://github.com/OpenRC/openrc/pull/291,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/291#issuecomment-463700264,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","The bsd_sysctl function does not process all of the same directories as the --system switch for procps sysctl, so you would end up with different behaviour on busybox than you would with procps if we do this.
Also, ""&>"" is a bashism so this should be avoided.
We should either make busybox sysctl have a --system switch that is compatible with procps sysctl or, imo the less preferred way would be to write a separate function in the sysctl service that processes everything the same way procps does using busybox sysctl.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/nykula,3,https://github.com/OpenRC/openrc/pull/291#issuecomment-463760191,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","Exactly same behavior isn't the goal, what procps does is even
unexpected given OpenRC's sysctl.d/README. On Gentoo I don't have any of
the additional paths listed in the procps manual:

```
# ls /run/sysctl.d/*.conf /run/sysctl.d/*.conf
/usr/local/lib/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf
/lib/sysctl.d/*.conf /etc/sysctl.conf
ls: cannot access '/run/sysctl.d/*.conf': No such file or directory
ls: cannot access '/run/sysctl.d/*.conf': No such file or directory
ls: cannot access '/usr/local/lib/sysctl.d/*.conf': No such file or
directory
ls: cannot access '/usr/lib/sysctl.d/*.conf': No such file or directory
ls: cannot access '/lib/sysctl.d/*.conf': No such file or directory
/etc/sysctl.conf
```

Which packages do these directories come from? On a systemd system I do
have one other match, /usr/lib/sysctl.d/50-default.conf, which comes
from systemd itself and thus not applicable here.

I'll edit out the &> and rebase.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/291#issuecomment-463825602,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","The //lib/sysctl.d locations are part of what systemd recommends as locations for packages to install sysctl files, so we need to check for and not complain about *.conf files in those locations missing.
It is a little more tricky though. My understanding is that the way the files are processed for the --system option  is a little more subtile than just putting all of the files in order and going through them. A file found in a later location in the directories actually fully overrides a file of the same name found earlier in the directories, so if we want to do that in busybox without the --system switch we have to emulate that behavior. That's why I would rather let sysctl deal with the --system switch and why we can't use the bsd_sysctl function for busybox. Feel free to correct me if I am wrong about the --system option.
To check which sysctl you are dealing with, it might be better to capture the output of
command -v sysctl in a variable and inspect that.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/nykula,5,https://github.com/OpenRC/openrc/pull/291#issuecomment-463841689,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","Of multiple files with the same basename, the one in the first dir applies and and the latter are skipped, according to the manual. It's not difficult to script, the question is why? This systemd recommendation about paths and overrides sounds arbitrary, no packages I've got installed except systemd itself have any files in these dirs, and I don't get why keep the BSD method at all if systemd behavior compliance matters.

Will see what distinguishable info the command check provides and try to apply it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/nykula,6,https://github.com/OpenRC/openrc/pull/291#issuecomment-463851478,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","Command only prints the path, doesn't make it clear which sysctl is present. With BusyBox, it can be a binary or a symlink to /bin/busybox. I chose the -V option for the condition because most BusyBox applets deliberately don't implement it and have it return a failure code.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/LW-archlinux,7,https://github.com/OpenRC/openrc/pull/291#issuecomment-464012683,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","from man sysctl :

   --system
         Load  settings from all system configuration files. Files are read from directories in the following list in given order from top to
         bottom.  Once a file of a given filename is loaded, any file of the same name in  subsequent directories is ignored.
         /run/sysctl.d/*.conf
         /etc/sysctl.d/*.conf
         /usr/local/lib/sysctl.d/*.conf
         /usr/lib/sysctl.d/*.conf
         /lib/sysctl.d/*.conf
         /etc/sysctl.conf


$ pacman -Qo /usr/bin/sysctl
/usr/bin/sysctl is owned by procps-ng 3.3.15-1
$

Assuming the man page aligns with the code, the behaviour doesn't seem to be complicated or PID1 specific.
I'm guessing busybox sysctl doesn't come from procps and behaves differently ?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/LW-archlinux,8,https://github.com/OpenRC/openrc/pull/291#issuecomment-464013499,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","Whoops, I think this is already known to the other posters.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/nykula,9,https://github.com/OpenRC/openrc/pull/291#issuecomment-464042518,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","Thanks for quoting the procps manual, yes it's what I'm referring to and what I'm asking to clarify. Neither BSD nor Linux systems to which I've got access place their sysctl conf in these additional paths. The expected OpenRC behavior according to the OpenRC doc is to look up just the /etc ones, which is already more than FreeBSD scripts do and that would still be enough. If there's agreeable rationale to match the new procps paths introduced by systemd you can come up with, I'd prefer to update the README in detail alongside implementing this logic. Otherwise should side with the BSD behavior and even remove the use of the --system flag which mismatches what OpenRC README claims OpenRC to be doing.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/LW-archlinux,10,https://github.com/OpenRC/openrc/pull/291#issuecomment-464350869,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","Did some checking and found this :
debian, fedora , opensuse, gentoo, archlinux have procps-ng
void linux uses uedev + runit and procps-ng
apline linux uses openrc + busybox + musl and procps-ng
This indicates that while systemd devs started this change, it's integration in procps-ng has made it the default sysctl implementation on linux.
Openrc should support it.
Since BSDs and Busybox use a different sysctl implementation and openrc also supports running with them, the question becomes how we should support it.
Atleast 2 approaches seem possible :


emulate procps-ng sysctl behaviour on busybox / BSDs in openrc code
(It may be possible to get parts of this code upstreamed)


have openrc only use sysctl functionality shared between procps-ng / busybox / BSDs and split off code specific to procps-ng sysctl.d to a separate package .
This is similar to what was done for tmpfiles.d setup with the opentmpfiles package.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/williamh,11,https://github.com/OpenRC/openrc/pull/291#issuecomment-464369142,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","We don't really want to force anything on the bsds, they don't have a reason to emulate procps. That is why I don't want to touch the bsd_sysctl function.
For busybox, the ideal would be to get the busybox sysctl command to understand the --system switch. That way, we don't have to make any changes to OpenRC.
There is a bug for this upstream which hasn't been closed or responded to, so it looks like w e just need to find someone to write the patch [1].
[1] https://bugs.busybox.net/show_bug.cgi?id=8556",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/nykula,12,https://github.com/OpenRC/openrc/pull/291#issuecomment-464422211,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","Could you run ls /run/sysctl.d/*.conf /run/sysctl.d/*.conf /usr/local/lib/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /lib/sysctl.d/*.conf wherever you've got access to, and post which packages have files there if any? That'll actually answer whether even on Linux anything needs to be emulated. I've been running this patch for two months on openrc + busybox + musl before posting and haven't run into such a need. IMO it's clean to not hardcode path quirks in a compiled utility, but have a shell script in the init system default to procps and if it's missing then fall back to BSD behavior, which it already has code for and which this patch lets it use.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/williamh,13,https://github.com/OpenRC/openrc/pull/291#issuecomment-464528615,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","Even if I do that, it only proves that the packages I have installed on my system don't use the feature.
The /run directory is dynamic and files can be written there by packages. The /lib directories are where packages themselves can install sysctl configurations, and just because I don't have things there doesn't mean other packages that are not installed don't.
The --system switch is a standard on all linux systems that use procps' version of sysctl, so we need to get this switch added to busybox sysctl. Your approach would create a ""fix"" that only works for OpenRC users. I think this needs to go further up the chain to busybox sysctl.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/wltjr,14,https://github.com/OpenRC/openrc/pull/291#issuecomment-485165865,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","@williamh I know this is closed, but the desire to have busybox have a ---system parameter seems to have fallen on deaf ears. There has been no activity on the bugs opened in 2015, 3.5 years later. May need to patch downstream and provide patch in bug to upstream. Even then that does not mean it will be accepted and added to busybox. It seems like busybox devs are not interested, not sure a patch will make any difference.
It maybe time to consider alternative approaches as needed. If this comes up again. Either way i would not hold out hopes for busybox getting a --system parameter like procps-ng anytime soon.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,291,2019-02-14T02:54:25Z,2019-02-18T00:40:36Z,2019-04-20T21:37:56Z,CLOSED,False,8,6,2,https://github.com/nykula,sysctl: reuse BSD script for BusyBox,1,[],https://github.com/OpenRC/openrc/pull/291,https://github.com/nykula,15,https://github.com/OpenRC/openrc/pull/291#issuecomment-485177299,"If asking sysctl for its version on Linux fails, assume it's from
BusyBox and call it like BSD sysctl. When passing a conf line, trim
spaces around = with sed, because both BSD and BusyBox expect the
variable=value sysctl format. Despite the BusyBox sysctl applet
missing the --system command line switch, OpenRC can use this applet
now, so remove the recommendation to disable its build.","@wltjr Following your link, you can join the CC list and write a
comment, devs will see activity. But read above. `--system` is a systemd
quirk, and nobody seems able to explain why it exists or even show which
apps scatter their config all over the disk like it suggests. Convincing
procps-ng developers to deprecate it makes more sense, if you want to
spend any time on this.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,292,2019-02-17T16:43:09Z,2019-02-19T17:56:58Z,2019-02-19T17:56:58Z,CLOSED,False,0,47,1,https://github.com/trofi,src/test/runtests.sh: drop 'readelf'-based tests,1,[],https://github.com/OpenRC/openrc/pull/292,https://github.com/trofi,1,https://github.com/OpenRC/openrc/pull/292,"The 'readelf'-based tests cover a few situations:

undefined symbols in shared libraries
unexpected exports in shared libraries

Bug #575958 shows that [2.] implementation is too simplistic
in assuming that presence of relocation equals to export presence.
It is incorrect for PLT stubs and local symbols.
Let's just drop these tests.
If one neds to cover [1.] it is better to use LDFLAGS=-Wl,--no-undefined.
Reported-by: Benda Xu
Bug: https://bugs.gentoo.org/575958","The 'readelf'-based tests cover a few situations:

undefined symbols in shared libraries
unexpected exports in shared libraries

Bug #575958 shows that [2.] implementation is too simplistic
in assuming that presence of relocation equals to export presence.
It is incorrect for PLT stubs and local symbols.
Let's just drop these tests.
If one neds to cover [1.] it is better to use LDFLAGS=-Wl,--no-undefined.
Reported-by: Benda Xu
Bug: https://bugs.gentoo.org/575958",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,292,2019-02-17T16:43:09Z,2019-02-19T17:56:58Z,2019-02-19T17:56:58Z,CLOSED,False,0,47,1,https://github.com/trofi,src/test/runtests.sh: drop 'readelf'-based tests,1,[],https://github.com/OpenRC/openrc/pull/292,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/292#issuecomment-464484028,"The 'readelf'-based tests cover a few situations:

undefined symbols in shared libraries
unexpected exports in shared libraries

Bug #575958 shows that [2.] implementation is too simplistic
in assuming that presence of relocation equals to export presence.
It is incorrect for PLT stubs and local symbols.
Let's just drop these tests.
If one neds to cover [1.] it is better to use LDFLAGS=-Wl,--no-undefined.
Reported-by: Benda Xu
Bug: https://bugs.gentoo.org/575958","i don't think we should remove the tests.  these continue to catch mistakes with the API that never really goes away.
the test code already has a filter to try and remove ""safe"" relocs -- look at the parisc-specific filter.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,292,2019-02-17T16:43:09Z,2019-02-19T17:56:58Z,2019-02-19T17:56:58Z,CLOSED,False,0,47,1,https://github.com/trofi,src/test/runtests.sh: drop 'readelf'-based tests,1,[],https://github.com/OpenRC/openrc/pull/292,https://github.com/trofi,3,https://github.com/OpenRC/openrc/pull/292#issuecomment-464492519,"The 'readelf'-based tests cover a few situations:

undefined symbols in shared libraries
unexpected exports in shared libraries

Bug #575958 shows that [2.] implementation is too simplistic
in assuming that presence of relocation equals to export presence.
It is incorrect for PLT stubs and local symbols.
Let's just drop these tests.
If one neds to cover [1.] it is better to use LDFLAGS=-Wl,--no-undefined.
Reported-by: Benda Xu
Bug: https://bugs.gentoo.org/575958","You think all tests should stay?
https://bugs.gentoo.org/575958#c8 has bits of output for failed test. I'm not sure you can just filter out R_PPC64_REL24 and still protect against external symbols.
I'd say tests against *.so files directly are fine and could be tweaked time to time.
My main concern is interpreting readelf against *.o files:
readelf -Wr $(grep -l '#include[[:space:]]""librc\.h""' ${librc_srcdir}/*.c | sed 's:\.c$:.o:')

That will need to be extended to distinct LOCAL and HIDDEN symbols to be useful.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,292,2019-02-17T16:43:09Z,2019-02-19T17:56:58Z,2019-02-19T17:56:58Z,CLOSED,False,0,47,1,https://github.com/trofi,src/test/runtests.sh: drop 'readelf'-based tests,1,[],https://github.com/OpenRC/openrc/pull/292,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/292#issuecomment-464508659,"The 'readelf'-based tests cover a few situations:

undefined symbols in shared libraries
unexpected exports in shared libraries

Bug #575958 shows that [2.] implementation is too simplistic
in assuming that presence of relocation equals to export presence.
It is incorrect for PLT stubs and local symbols.
Let's just drop these tests.
If one neds to cover [1.] it is better to use LDFLAGS=-Wl,--no-undefined.
Reported-by: Benda Xu
Bug: https://bugs.gentoo.org/575958","@trofi I am open to removing these tests. If we come up with something better, we can always add new tests later. Also, it looks like if we drop those tests, we can remove the *.list files from the test directory.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,292,2019-02-17T16:43:09Z,2019-02-19T17:56:58Z,2019-02-19T17:56:58Z,CLOSED,False,0,47,1,https://github.com/trofi,src/test/runtests.sh: drop 'readelf'-based tests,1,[],https://github.com/OpenRC/openrc/pull/292,https://github.com/gyakovlev,5,https://github.com/OpenRC/openrc/pull/292#issuecomment-464514155,"The 'readelf'-based tests cover a few situations:

undefined symbols in shared libraries
unexpected exports in shared libraries

Bug #575958 shows that [2.] implementation is too simplistic
in assuming that presence of relocation equals to export presence.
It is incorrect for PLT stubs and local symbols.
Let's just drop these tests.
If one neds to cover [1.] it is better to use LDFLAGS=-Wl,--no-undefined.
Reported-by: Benda Xu
Bug: https://bugs.gentoo.org/575958","if merged this will probably unblock #265
I did not look close enough what's really happening with  readelf tests on FreeBSD, but output differs
https://github.com/OpenRC/openrc/pull/265/checks?check_run_id=58018033",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,292,2019-02-17T16:43:09Z,2019-02-19T17:56:58Z,2019-02-19T17:56:58Z,CLOSED,False,0,47,1,https://github.com/trofi,src/test/runtests.sh: drop 'readelf'-based tests,1,[],https://github.com/OpenRC/openrc/pull/292,https://github.com/williamh,6,https://github.com/OpenRC/openrc/pull/292#issuecomment-465240598,"The 'readelf'-based tests cover a few situations:

undefined symbols in shared libraries
unexpected exports in shared libraries

Bug #575958 shows that [2.] implementation is too simplistic
in assuming that presence of relocation equals to export presence.
It is incorrect for PLT stubs and local symbols.
Let's just drop these tests.
If one neds to cover [1.] it is better to use LDFLAGS=-Wl,--no-undefined.
Reported-by: Benda Xu
Bug: https://bugs.gentoo.org/575958",I had a pretty detailed IRC conversation with @trofi  over the weekend and it looks like the best option for now is to remove these tests.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,294,2019-02-21T22:41:14Z,2019-02-22T01:35:27Z,2019-02-22T01:35:37Z,CLOSED,False,10,7,1,https://github.com/gyakovlev,librc/librc-depend.c: fix NULL pointer dereference,1,[],https://github.com/OpenRC/openrc/pull/294,https://github.com/gyakovlev,1,https://github.com/OpenRC/openrc/pull/294,"In some cases deptree or depinfo can be NULL, check
before dereferencing.
Bug: https://bugs.gentoo.org/659906
Issue: #293
It's just a partial fix for mentioned issues, as while it no longer segfaults, I'm still trying to find why files ended up being only root readable in the first place and how to properly handle in openrc code instead of NULLin everything and assuming we are at sysinit runlevel.","In some cases deptree or depinfo can be NULL, check
before dereferencing.
Bug: https://bugs.gentoo.org/659906
Issue: #293
It's just a partial fix for mentioned issues, as while it no longer segfaults, I'm still trying to find why files ended up being only root readable in the first place and how to properly handle in openrc code instead of NULLin everything and assuming we are at sysinit runlevel.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,294,2019-02-21T22:41:14Z,2019-02-22T01:35:27Z,2019-02-22T01:35:37Z,CLOSED,False,10,7,1,https://github.com/gyakovlev,librc/librc-depend.c: fix NULL pointer dereference,1,[],https://github.com/OpenRC/openrc/pull/294,https://github.com/gyakovlev,2,https://github.com/OpenRC/openrc/pull/294#issuecomment-466238273,"In some cases deptree or depinfo can be NULL, check
before dereferencing.
Bug: https://bugs.gentoo.org/659906
Issue: #293
It's just a partial fix for mentioned issues, as while it no longer segfaults, I'm still trying to find why files ended up being only root readable in the first place and how to properly handle in openrc code instead of NULLin everything and assuming we are at sysinit runlevel.","merged in 7478c10
closing",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,295,2019-02-22T23:54:19Z,2019-02-23T00:09:52Z,2019-02-23T00:10:15Z,CLOSED,False,5,7,8,https://github.com/williamh,combine test directories,1,[],https://github.com/OpenRC/openrc/pull/295,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/295,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,296,2019-02-23T00:23:00Z,2019-02-23T00:50:45Z,2019-02-23T00:51:18Z,CLOSED,False,2,2,4,https://github.com/williamh,move ci scripts to their own directory,1,[],https://github.com/OpenRC/openrc/pull/296,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/296,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,298,2019-02-23T22:17:01Z,2019-02-23T22:25:47Z,2019-02-23T22:25:47Z,CLOSED,False,14,20,1,https://github.com/williamh,"Revert ""src/librc/librc-daemon.c: fix buffer overrun in pid_is_argv""",1,[],https://github.com/OpenRC/openrc/pull/298,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/298,"This reverts commit 084877e.
The mentioned commit caused some systems to have some services reported
as crashed.
This fixes #297.","This reverts commit 084877e.
The mentioned commit caused some systems to have some services reported
as crashed.
This fixes #297.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,299,2019-02-23T23:35:42Z,2019-02-23T23:45:11Z,2019-02-23T23:45:11Z,CLOSED,False,1,1,1,https://github.com/williamh,librc: fix potential buffer overflow in pid_is_argv,1,[],https://github.com/OpenRC/openrc/pull/299,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/299,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,300,2019-02-25T23:35:32Z,2019-02-26T01:09:15Z,2019-02-26T01:11:01Z,CLOSED,False,19,20,1,https://github.com/williamh,Fix synchronization of the do_openrc function,1,[],https://github.com/OpenRC/openrc/pull/300,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/300,"Do_openrc was not waiting properly for the child process to return which
executed the runlevels. We need to loop over the return value until it
matches the pid of the child process or the child process does not
exist.","Do_openrc was not waiting properly for the child process to return which
executed the runlevels. We need to loop over the return value until it
matches the pid of the child process or the child process does not
exist.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,301,2019-02-26T22:24:06Z,2019-02-26T23:50:20Z,2019-07-26T17:41:40Z,CLOSED,False,0,202,8,https://github.com/williamh,remove hidden-visibility.h,1,[],https://github.com/OpenRC/openrc/pull/301,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/301,"@trofi
I believe we spoke about this on IRC, and if I recall correctly, it doesn't
benefit us very much in OpenRC. If this is correct, I would like to remove it.
What are your thoughts?","@trofi
I believe we spoke about this on IRC, and if I recall correctly, it doesn't
benefit us very much in OpenRC. If this is correct, I would like to remove it.
What are your thoughts?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,301,2019-02-26T22:24:06Z,2019-02-26T23:50:20Z,2019-07-26T17:41:40Z,CLOSED,False,0,202,8,https://github.com/williamh,remove hidden-visibility.h,1,[],https://github.com/OpenRC/openrc/pull/301,https://github.com/trofi,2,https://github.com/OpenRC/openrc/pull/301#issuecomment-467652674,"@trofi
I believe we spoke about this on IRC, and if I recall correctly, it doesn't
benefit us very much in OpenRC. If this is correct, I would like to remove it.
What are your thoughts?",Looks good.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,302,2019-03-02T07:25:52Z,,2021-12-31T00:45:52Z,OPEN,False,0,6,2,https://github.com/dwfreed,Kill SVCNAME once and for all,1,[],https://github.com/OpenRC/openrc/pull/302,https://github.com/dwfreed,1,https://github.com/OpenRC/openrc/pull/302,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,302,2019-03-02T07:25:52Z,,2021-12-31T00:45:52Z,OPEN,False,0,6,2,https://github.com/dwfreed,Kill SVCNAME once and for all,1,[],https://github.com/OpenRC/openrc/pull/302,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/302#issuecomment-468900811,,175 Gentoo packages contain files in their filesdir that reference SVCNAME...,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,305,2019-03-20T03:45:12Z,2019-10-27T06:47:27Z,2019-10-30T19:49:48Z,CLOSED,False,42,25,11,https://github.com/austin987,misc shellcheck fixes,11,[],https://github.com/OpenRC/openrc/pull/305,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/305,"This adds a .shellcheckrc (shellcheck config file for the project). I've currently set it to ignore using local in sh, since @williamh has told me that's policy (though I couldn't find a reference for that in the source, fyi).
It also fixes some misc issues. This doesn't fix everything, I need to test some others / fix more.
Note that if you want to use the .shellcheckrc, you'll need to build from git, since koalaman/shellcheck@581bcc3 isn't in a release yet.","This adds a .shellcheckrc (shellcheck config file for the project). I've currently set it to ignore using local in sh, since @williamh has told me that's policy (though I couldn't find a reference for that in the source, fyi).
It also fixes some misc issues. This doesn't fix everything, I need to test some others / fix more.
Note that if you want to use the .shellcheckrc, you'll need to build from git, since koalaman/shellcheck@581bcc3 isn't in a release yet.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,305,2019-03-20T03:45:12Z,2019-10-27T06:47:27Z,2019-10-30T19:49:48Z,CLOSED,False,42,25,11,https://github.com/austin987,misc shellcheck fixes,11,[],https://github.com/OpenRC/openrc/pull/305,https://github.com/austin987,2,https://github.com/OpenRC/openrc/pull/305#issuecomment-474680182,"This adds a .shellcheckrc (shellcheck config file for the project). I've currently set it to ignore using local in sh, since @williamh has told me that's policy (though I couldn't find a reference for that in the source, fyi).
It also fixes some misc issues. This doesn't fix everything, I need to test some others / fix more.
Note that if you want to use the .shellcheckrc, you'll need to build from git, since koalaman/shellcheck@581bcc3 isn't in a release yet.","Sorry for the confusion, wrong branch was initially pushed; but it's fixed now.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,311,2019-06-10T03:53:57Z,2019-07-26T17:54:02Z,2019-12-17T15:17:40Z,CLOSED,False,9,4,1,https://github.com/CosmicToast,clarify supervise-daemon-guide,1,[],https://github.com/OpenRC/openrc/pull/311,https://github.com/CosmicToast,1,https://github.com/OpenRC/openrc/pull/311,"The given default for respawn_max is wrong.
The example for respawn_period is nonsensical. Try to clarify it.","The given default for respawn_max is wrong.
The example for respawn_period is nonsensical. Try to clarify it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,313,2019-07-23T17:29:48Z,2019-07-24T17:35:42Z,2019-07-24T17:35:42Z,CLOSED,False,7,7,6,https://github.com/miwi-fbsd,- Fix  build with Clang,1,[],https://github.com/OpenRC/openrc/pull/313,https://github.com/miwi-fbsd,1,https://github.com/OpenRC/openrc/pull/313,"While building OpenRC on TrueOS and FreeBSD we found some build errors with Clang, this pull request intend to fix it.
Thanks,

Miwi

Signed-off-by: Martin Wilke miwi@ixsystems.com","While building OpenRC on TrueOS and FreeBSD we found some build errors with Clang, this pull request intend to fix it.
Thanks,

Miwi

Signed-off-by: Martin Wilke miwi@ixsystems.com",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,315,2019-07-25T17:37:05Z,2019-07-25T19:53:09Z,2019-07-25T19:53:09Z,CLOSED,False,130,8,4,https://github.com/williamh,add ability for openrc-shutdown to communicate with sysvinit,1,[],https://github.com/OpenRC/openrc/pull/315,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/315,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,317,2019-08-03T04:17:49Z,2021-08-13T21:15:57Z,2021-08-13T21:15:57Z,CLOSED,False,1,1,1,https://github.com/thefallenrat,net-online.in: add ! on symbolic check in getinterface(),1,[],https://github.com/OpenRC/openrc/pull/317,https://github.com/thefallenrat,1,https://github.com/OpenRC/openrc/pull/317,"get_interfaces() should skip to the next iteration of the loop
only if it's not symbiolic links, not the other way around
This commit fixes the problem by adding ! operator on test command
so that it will only skip to the next loop if the file aren't
symbolic links
fixes #316
References:
commit f42ec82
https://www.tldp.org/LDP/abs/html/loopcontrol.html","get_interfaces() should skip to the next iteration of the loop
only if it's not symbiolic links, not the other way around
This commit fixes the problem by adding ! operator on test command
so that it will only skip to the next loop if the file aren't
symbolic links
fixes #316
References:
commit f42ec82
https://www.tldp.org/LDP/abs/html/loopcontrol.html",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,317,2019-08-03T04:17:49Z,2021-08-13T21:15:57Z,2021-08-13T21:15:57Z,CLOSED,False,1,1,1,https://github.com/thefallenrat,net-online.in: add ! on symbolic check in getinterface(),1,[],https://github.com/OpenRC/openrc/pull/317,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/317#issuecomment-898724316,"get_interfaces() should skip to the next iteration of the loop
only if it's not symbiolic links, not the other way around
This commit fixes the problem by adding ! operator on test command
so that it will only skip to the next loop if the file aren't
symbolic links
fixes #316
References:
commit f42ec82
https://www.tldp.org/LDP/abs/html/loopcontrol.html",Fixed in #391.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,318,2019-08-07T21:04:00Z,2019-08-08T14:35:09Z,2019-08-08T14:35:10Z,CLOSED,False,33,2,4,https://github.com/floppym,Add support for the INIT_HALT environment variable,1,[],https://github.com/OpenRC/openrc/pull/318,https://github.com/floppym,1,https://github.com/OpenRC/openrc/pull/318,"Please note that this change is untested; I'm looking for some feedback before I invest the effort in actually testing it.
The shutdown command provided by sysvinit sets the INIT_HALT environment
variable before switching to runlevel 0.
shutdown -hH -> INIT_HALT=HALT
shutdown -hP -> INIT_HALT=POWEROFF
Add a new ""halt"" init script to interpret this variable and invoke ""halt""
or ""poweroff"" as appropriate.
This restores the ability to actually halt the system instead of always
turning off the power.
Reference:
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/doc/Changelog?h=2.95#n30
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n457
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n554
Signed-off-by: Mike Gilbert floppym@gentoo.org","Please note that this change is untested; I'm looking for some feedback before I invest the effort in actually testing it.
The shutdown command provided by sysvinit sets the INIT_HALT environment
variable before switching to runlevel 0.
shutdown -hH -> INIT_HALT=HALT
shutdown -hP -> INIT_HALT=POWEROFF
Add a new ""halt"" init script to interpret this variable and invoke ""halt""
or ""poweroff"" as appropriate.
This restores the ability to actually halt the system instead of always
turning off the power.
Reference:
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/doc/Changelog?h=2.95#n30
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n457
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n554
Signed-off-by: Mike Gilbert floppym@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,318,2019-08-07T21:04:00Z,2019-08-08T14:35:09Z,2019-08-08T14:35:10Z,CLOSED,False,33,2,4,https://github.com/floppym,Add support for the INIT_HALT environment variable,1,[],https://github.com/OpenRC/openrc/pull/318,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/318#issuecomment-519292087,"Please note that this change is untested; I'm looking for some feedback before I invest the effort in actually testing it.
The shutdown command provided by sysvinit sets the INIT_HALT environment
variable before switching to runlevel 0.
shutdown -hH -> INIT_HALT=HALT
shutdown -hP -> INIT_HALT=POWEROFF
Add a new ""halt"" init script to interpret this variable and invoke ""halt""
or ""poweroff"" as appropriate.
This restores the ability to actually halt the system instead of always
turning off the power.
Reference:
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/doc/Changelog?h=2.95#n30
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n457
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n554
Signed-off-by: Mike Gilbert floppym@gentoo.org","I like it, and if it works I think we should use it.
Adding this to the shutdown runlevel by default assumes that everyone using OpenRC on Linux uses sysvinit, and this isn't necessarily the case.
I think A better place to put something like this would be in the support/sysvinit directory along with updating the README stored there.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,318,2019-08-07T21:04:00Z,2019-08-08T14:35:09Z,2019-08-08T14:35:10Z,CLOSED,False,33,2,4,https://github.com/floppym,Add support for the INIT_HALT environment variable,1,[],https://github.com/OpenRC/openrc/pull/318,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/318#issuecomment-519314196,"Please note that this change is untested; I'm looking for some feedback before I invest the effort in actually testing it.
The shutdown command provided by sysvinit sets the INIT_HALT environment
variable before switching to runlevel 0.
shutdown -hH -> INIT_HALT=HALT
shutdown -hP -> INIT_HALT=POWEROFF
Add a new ""halt"" init script to interpret this variable and invoke ""halt""
or ""poweroff"" as appropriate.
This restores the ability to actually halt the system instead of always
turning off the power.
Reference:
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/doc/Changelog?h=2.95#n30
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n457
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n554
Signed-off-by: Mike Gilbert floppym@gentoo.org","The more I think about this, it is a bug, but I'm not sure about whether the approach here works either. The final halt is run by /etc/inittab after OpenRC shuts down its services.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,318,2019-08-07T21:04:00Z,2019-08-08T14:35:09Z,2019-08-08T14:35:10Z,CLOSED,False,33,2,4,https://github.com/floppym,Add support for the INIT_HALT environment variable,1,[],https://github.com/OpenRC/openrc/pull/318,https://github.com/floppym,4,https://github.com/OpenRC/openrc/pull/318#issuecomment-519330284,"Please note that this change is untested; I'm looking for some feedback before I invest the effort in actually testing it.
The shutdown command provided by sysvinit sets the INIT_HALT environment
variable before switching to runlevel 0.
shutdown -hH -> INIT_HALT=HALT
shutdown -hP -> INIT_HALT=POWEROFF
Add a new ""halt"" init script to interpret this variable and invoke ""halt""
or ""poweroff"" as appropriate.
This restores the ability to actually halt the system instead of always
turning off the power.
Reference:
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/doc/Changelog?h=2.95#n30
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n457
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n554
Signed-off-by: Mike Gilbert floppym@gentoo.org","There's no way to inspect an environment variable in inittab, so we would need to invoke a external script. Given that it already invokes openrc shutdown, I figured adding it to the end of the shutdown runlevel would suffice.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,318,2019-08-07T21:04:00Z,2019-08-08T14:35:09Z,2019-08-08T14:35:10Z,CLOSED,False,33,2,4,https://github.com/floppym,Add support for the INIT_HALT environment variable,1,[],https://github.com/OpenRC/openrc/pull/318,https://github.com/floppym,5,https://github.com/OpenRC/openrc/pull/318#issuecomment-519331097,"Please note that this change is untested; I'm looking for some feedback before I invest the effort in actually testing it.
The shutdown command provided by sysvinit sets the INIT_HALT environment
variable before switching to runlevel 0.
shutdown -hH -> INIT_HALT=HALT
shutdown -hP -> INIT_HALT=POWEROFF
Add a new ""halt"" init script to interpret this variable and invoke ""halt""
or ""poweroff"" as appropriate.
This restores the ability to actually halt the system instead of always
turning off the power.
Reference:
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/doc/Changelog?h=2.95#n30
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n457
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n554
Signed-off-by: Mike Gilbert floppym@gentoo.org","The more I think about this, it is a bug, but I'm not sure about whether the approach here works either.

I'm pretty sure this approach would work. There's no requirement that the final halt has to be invoked directly from inittab.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,318,2019-08-07T21:04:00Z,2019-08-08T14:35:09Z,2019-08-08T14:35:10Z,CLOSED,False,33,2,4,https://github.com/floppym,Add support for the INIT_HALT environment variable,1,[],https://github.com/OpenRC/openrc/pull/318,https://github.com/floppym,6,https://github.com/OpenRC/openrc/pull/318#issuecomment-519545522,"Please note that this change is untested; I'm looking for some feedback before I invest the effort in actually testing it.
The shutdown command provided by sysvinit sets the INIT_HALT environment
variable before switching to runlevel 0.
shutdown -hH -> INIT_HALT=HALT
shutdown -hP -> INIT_HALT=POWEROFF
Add a new ""halt"" init script to interpret this variable and invoke ""halt""
or ""poweroff"" as appropriate.
This restores the ability to actually halt the system instead of always
turning off the power.
Reference:
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/doc/Changelog?h=2.95#n30
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n457
http://git.savannah.nongnu.org/cgit/sysvinit.git/tree/src/shutdown.c?h=2.95#n554
Signed-off-by: Mike Gilbert floppym@gentoo.org",Closing this in favor of #319.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,319,2019-08-08T14:17:46Z,2019-08-09T15:41:53Z,2019-08-09T15:41:53Z,CLOSED,False,1,0,1,https://github.com/floppym,Add INIT_HALT to the environment whitelist,1,[],https://github.com/OpenRC/openrc/pull/319,https://github.com/floppym,1,https://github.com/OpenRC/openrc/pull/319,"Under sysvinit, this variable is inherited from init[1] when the system
is shutting down.
Signed-off-by: Mike Gilbert floppym@gentoo.org","Under sysvinit, this variable is inherited from init[1] when the system
is shutting down.
Signed-off-by: Mike Gilbert floppym@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,320,2019-08-18T13:18:09Z,2021-09-15T22:09:04Z,2021-09-15T22:09:04Z,CLOSED,False,1,1,1,https://github.com/hosxy,fix agetty can be started directly,1,[],https://github.com/OpenRC/openrc/pull/320,https://github.com/hosxy,1,https://github.com/OpenRC/openrc/pull/320,"I find I can start agetty directly:
# rc-service agetty start

however,this behavior is incorrect obviously.
Then I read the /etc/init.d/agetty, the $port will never be empty, so the function start_pre() will be Meaningless.
So I suggest change if [ -z ""$port"" ]to if [ ""$port"" = ""$RC_SVCNAME"" ]","I find I can start agetty directly:
# rc-service agetty start

however,this behavior is incorrect obviously.
Then I read the /etc/init.d/agetty, the $port will never be empty, so the function start_pre() will be Meaningless.
So I suggest change if [ -z ""$port"" ]to if [ ""$port"" = ""$RC_SVCNAME"" ]",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,321,2019-08-27T15:48:42Z,2019-09-03T21:44:10Z,2019-09-03T21:44:10Z,CLOSED,False,1,1,1,https://github.com/E5ten,"check if cgroups are mounted when rc_cgroup_mode=""unified""",1,[],https://github.com/OpenRC/openrc/pull/321,https://github.com/E5ten,1,https://github.com/OpenRC/openrc/pull/321,"prior to cgroups getting mounted, /sys/fs/cgroup will still exist, but attempts to make directories in it will fail, change cgroup2_set_limits() to verify that cgroups are mounted instead of just checking that /sys/fs/cgroup exists. fixes #307","prior to cgroups getting mounted, /sys/fs/cgroup will still exist, but attempts to make directories in it will fail, change cgroup2_set_limits() to verify that cgroups are mounted instead of just checking that /sys/fs/cgroup exists. fixes #307",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,322,2019-08-30T15:59:51Z,2021-09-12T00:57:01Z,2021-09-12T09:12:46Z,CLOSED,False,0,2,1,https://github.com/abchk1234,remove broken service startup detection for runit services,1,[],https://github.com/OpenRC/openrc/pull/322,https://github.com/abchk1234,1,https://github.com/OpenRC/openrc/pull/322,"The current check used to fail if runsv was not up.
It can take upto 5 seconds for runsv to be invoked on the service.
To report correct status, we can wait for 5 seconds or
check it via rc-status
See #253 for the sleep approach and its discussion.","The current check used to fail if runsv was not up.
It can take upto 5 seconds for runsv to be invoked on the service.
To report correct status, we can wait for 5 seconds or
check it via rc-status
See #253 for the sleep approach and its discussion.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,322,2019-08-30T15:59:51Z,2021-09-12T00:57:01Z,2021-09-12T09:12:46Z,CLOSED,False,0,2,1,https://github.com/abchk1234,remove broken service startup detection for runit services,1,[],https://github.com/OpenRC/openrc/pull/322,https://github.com/abchk1234,2,https://github.com/OpenRC/openrc/pull/322#issuecomment-526893180,"The current check used to fail if runsv was not up.
It can take upto 5 seconds for runsv to be invoked on the service.
To report correct status, we can wait for 5 seconds or
check it via rc-status
See #253 for the sleep approach and its discussion.","This patch works correctly when the service works correctly.
In case the runit service does not work as expected rc-status will show the service as started while checking rc-service status <service> will reveal the true status, ie:
# rc-service netdata-runit status
down: /run/openrc/sv/netdata: 1s, normally up, want up

Such a service can then be stopped and checked.
In my opinion this is better than the status quo, where it shows the service as failed while its actually running in background.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,322,2019-08-30T15:59:51Z,2021-09-12T00:57:01Z,2021-09-12T09:12:46Z,CLOSED,False,0,2,1,https://github.com/abchk1234,remove broken service startup detection for runit services,1,[],https://github.com/OpenRC/openrc/pull/322,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/322#issuecomment-527641918,"The current check used to fail if runsv was not up.
It can take upto 5 seconds for runsv to be invoked on the service.
To report correct status, we can wait for 5 seconds or
check it via rc-status
See #253 for the sleep approach and its discussion.",So is this the better change to merge than #253?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,322,2019-08-30T15:59:51Z,2021-09-12T00:57:01Z,2021-09-12T09:12:46Z,CLOSED,False,0,2,1,https://github.com/abchk1234,remove broken service startup detection for runit services,1,[],https://github.com/OpenRC/openrc/pull/322,https://github.com/abchk1234,4,https://github.com/OpenRC/openrc/pull/322#issuecomment-527743897,"The current check used to fail if runsv was not up.
It can take upto 5 seconds for runsv to be invoked on the service.
To report correct status, we can wait for 5 seconds or
check it via rc-status
See #253 for the sleep approach and its discussion.","So is this the better change to merge than #253?

Hi @williamh
From best to worst IMO:
#253 > #322 (this one) > current code
#253 has the best status reporting, but it needs sleep for runit timeout.
This one avoids the sleep, but leaves service state detection to rc-service status.
If you apply this patch #253 is not needed.
Thanks,
aaditya",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,322,2019-08-30T15:59:51Z,2021-09-12T00:57:01Z,2021-09-12T09:12:46Z,CLOSED,False,0,2,1,https://github.com/abchk1234,remove broken service startup detection for runit services,1,[],https://github.com/OpenRC/openrc/pull/322,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/322#issuecomment-917515946,"The current check used to fail if runsv was not up.
It can take upto 5 seconds for runsv to be invoked on the service.
To report correct status, we can wait for 5 seconds or
check it via rc-status
See #253 for the sleep approach and its discussion.","I have merge #253, so I am closing this.",True,{'ROCKET': ['https://github.com/abchk1234']}
OpenRC/openrc,https://github.com/OpenRC/openrc,322,2019-08-30T15:59:51Z,2021-09-12T00:57:01Z,2021-09-12T09:12:46Z,CLOSED,False,0,2,1,https://github.com/abchk1234,remove broken service startup detection for runit services,1,[],https://github.com/OpenRC/openrc/pull/322,https://github.com/abchk1234,6,https://github.com/OpenRC/openrc/pull/322#issuecomment-917597381,"The current check used to fail if runsv was not up.
It can take upto 5 seconds for runsv to be invoked on the service.
To report correct status, we can wait for 5 seconds or
check it via rc-status
See #253 for the sleep approach and its discussion.",Thanks!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,323,2019-09-19T18:55:18Z,,2021-12-31T00:45:52Z,OPEN,False,40,34,2,https://github.com/dweomer,service net-online: fix get_interfaces() and add minimum_up,1,[],https://github.com/OpenRC/openrc/pull/323,https://github.com/dweomer,1,https://github.com/OpenRC/openrc/pull/323,"This change incorporates a fork that I made for k3OS that helps
solve a number of network availability race-conditions.
See rancher/k3os#184.
This fixes #316 by removing the test -h $ifname check altogether.
Not only was the check backwards, resulting in undetected interfaces,
but on k3OS at least, everything in /sys/class/net is a symlink, making
the corrected check redundant.
This sidesteps ""file not found"" errors when attempting to read
carrier and operstate for explicitly specified interfaces that do not
exist.
Lastly, a new conf.d variable, minimum_up, allows for net-online to
return successfully when at least that number of interfaces are in the
""up"" state. The default empty values results in the old behavior of
expecting all specified (or detected) interfaces to be ""up"". This is useful
when connecting edge devices to the internet by either ethernet or wifi
but not necessarily both (and not necessarily the same device as last boot).
Fixes #316
Supercedes #317","This change incorporates a fork that I made for k3OS that helps
solve a number of network availability race-conditions.
See rancher/k3os#184.
This fixes #316 by removing the test -h $ifname check altogether.
Not only was the check backwards, resulting in undetected interfaces,
but on k3OS at least, everything in /sys/class/net is a symlink, making
the corrected check redundant.
This sidesteps ""file not found"" errors when attempting to read
carrier and operstate for explicitly specified interfaces that do not
exist.
Lastly, a new conf.d variable, minimum_up, allows for net-online to
return successfully when at least that number of interfaces are in the
""up"" state. The default empty values results in the old behavior of
expecting all specified (or detected) interfaces to be ""up"". This is useful
when connecting edge devices to the internet by either ethernet or wifi
but not necessarily both (and not necessarily the same device as last boot).
Fixes #316
Supercedes #317",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,323,2019-09-19T18:55:18Z,,2021-12-31T00:45:52Z,OPEN,False,40,34,2,https://github.com/dweomer,service net-online: fix get_interfaces() and add minimum_up,1,[],https://github.com/OpenRC/openrc/pull/323,https://github.com/dweomer,2,https://github.com/OpenRC/openrc/pull/323#issuecomment-533264424,"This change incorporates a fork that I made for k3OS that helps
solve a number of network availability race-conditions.
See rancher/k3os#184.
This fixes #316 by removing the test -h $ifname check altogether.
Not only was the check backwards, resulting in undetected interfaces,
but on k3OS at least, everything in /sys/class/net is a symlink, making
the corrected check redundant.
This sidesteps ""file not found"" errors when attempting to read
carrier and operstate for explicitly specified interfaces that do not
exist.
Lastly, a new conf.d variable, minimum_up, allows for net-online to
return successfully when at least that number of interfaces are in the
""up"" state. The default empty values results in the old behavior of
expecting all specified (or detected) interfaces to be ""up"". This is useful
when connecting edge devices to the internet by either ethernet or wifi
but not necessarily both (and not necessarily the same device as last boot).
Fixes #316
Supercedes #317","Also, I've attempted to normalize the whitespace (using tabs).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,323,2019-09-19T18:55:18Z,,2021-12-31T00:45:52Z,OPEN,False,40,34,2,https://github.com/dweomer,service net-online: fix get_interfaces() and add minimum_up,1,[],https://github.com/OpenRC/openrc/pull/323,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/323#issuecomment-998468797,"This change incorporates a fork that I made for k3OS that helps
solve a number of network availability race-conditions.
See rancher/k3os#184.
This fixes #316 by removing the test -h $ifname check altogether.
Not only was the check backwards, resulting in undetected interfaces,
but on k3OS at least, everything in /sys/class/net is a symlink, making
the corrected check redundant.
This sidesteps ""file not found"" errors when attempting to read
carrier and operstate for explicitly specified interfaces that do not
exist.
Lastly, a new conf.d variable, minimum_up, allows for net-online to
return successfully when at least that number of interfaces are in the
""up"" state. The default empty values results in the old behavior of
expecting all specified (or detected) interfaces to be ""up"". This is useful
when connecting edge devices to the internet by either ethernet or wifi
but not necessarily both (and not necessarily the same device as last boot).
Fixes #316
Supercedes #317","@dweomer  Please rebase this on master and resolve the conflicts. If you can do that, I'll take a look. Thanks.",True,{'THUMBS_UP': ['https://github.com/dweomer']}
OpenRC/openrc,https://github.com/OpenRC/openrc,324,2019-09-20T22:37:35Z,2020-05-18T10:45:21Z,2020-05-18T10:45:26Z,CLOSED,False,2,1,1,https://github.com/graywolf,Make swap use lvm,1,[],https://github.com/OpenRC/openrc/pull/324,https://github.com/graywolf,1,https://github.com/OpenRC/openrc/pull/324,"If swap is in logical volume, it might not be present yet. So swap
service should use and after lvm.","If swap is in logical volume, it might not be present yet. So swap
service should use and after lvm.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,324,2019-09-20T22:37:35Z,2020-05-18T10:45:21Z,2020-05-18T10:45:26Z,CLOSED,False,2,1,1,https://github.com/graywolf,Make swap use lvm,1,[],https://github.com/OpenRC/openrc/pull/324,https://github.com/graywolf,2,https://github.com/OpenRC/openrc/pull/324#issuecomment-622518801,"If swap is in logical volume, it might not be present yet. So swap
service should use and after lvm.",Are there any issues or blockers on this one?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,327,2019-10-04T13:27:57Z,2020-01-11T20:36:10Z,2020-01-13T19:34:50Z,CLOSED,False,1,1,1,https://github.com/graywolf,Fix segfault when executable does not exist,1,[],https://github.com/OpenRC/openrc/pull/327,https://github.com/graywolf,1,https://github.com/OpenRC/openrc/pull/327,"When executable is provided just by name (and therefore searched in a
path), exec_file is reset to NULL every time. exists() handles it being
NULL just fine, but dereferencing it in eerror does not work.
Fixes #326","When executable is provided just by name (and therefore searched in a
path), exec_file is reset to NULL every time. exists() handles it being
NULL just fine, but dereferencing it in eerror does not work.
Fixes #326",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,328,2019-10-05T14:36:18Z,2020-01-11T19:33:11Z,2020-01-11T19:33:11Z,CLOSED,False,3,0,1,https://github.com/udeved,binfmt: ensure a file is unregistered before registering,1,[],https://github.com/OpenRC/openrc/pull/328,https://github.com/udeved,1,https://github.com/OpenRC/openrc/pull/328,"If binfmt.sh is run again after the system booted up, eg by a pacman alpm hook,
it will not throw a write error.
Unregister the file before registering.","If binfmt.sh is run again after the system booted up, eg by a pacman alpm hook,
it will not throw a write error.
Unregister the file before registering.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,330,2019-10-23T21:18:00Z,2019-10-27T06:47:25Z,2019-10-27T06:47:33Z,CLOSED,False,12,0,2,https://github.com/austin987,Run shellcheck in travis,2,[],https://github.com/OpenRC/openrc/pull/330,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/330,@williamh,@williamh,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,331,2019-10-23T23:02:11Z,2019-10-25T23:54:55Z,2019-10-26T00:01:23Z,CLOSED,False,1,1,1,https://github.com/gyakovlev,.cirrus.yml: update runner to FreeBSD-11.3,1,[],https://github.com/OpenRC/openrc/pull/331,https://github.com/gyakovlev,1,https://github.com/OpenRC/openrc/pull/331,simple update on 11 branch image.,simple update on 11 branch image.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,331,2019-10-23T23:02:11Z,2019-10-25T23:54:55Z,2019-10-26T00:01:23Z,CLOSED,False,1,1,1,https://github.com/gyakovlev,.cirrus.yml: update runner to FreeBSD-11.3,1,[],https://github.com/OpenRC/openrc/pull/331,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/331#issuecomment-545754813,simple update on 11 branch image.,the CI failed on the new 11-3 image.  want to take a look ?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,331,2019-10-23T23:02:11Z,2019-10-25T23:54:55Z,2019-10-26T00:01:23Z,CLOSED,False,1,1,1,https://github.com/gyakovlev,.cirrus.yml: update runner to FreeBSD-11.3,1,[],https://github.com/OpenRC/openrc/pull/331,https://github.com/gyakovlev,3,https://github.com/OpenRC/openrc/pull/331#issuecomment-546059670,simple update on 11 branch image.,"@vapier looks like CI is the problem itself, agent is not responding. Already tried to re-launch it yesterday, trying again.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,331,2019-10-23T23:02:11Z,2019-10-25T23:54:55Z,2019-10-26T00:01:23Z,CLOSED,False,1,1,1,https://github.com/gyakovlev,.cirrus.yml: update runner to FreeBSD-11.3,1,[],https://github.com/OpenRC/openrc/pull/331,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/331#issuecomment-546089668,simple update on 11 branch image.,"It looks like this failed, can you check it?
Thanks.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,331,2019-10-23T23:02:11Z,2019-10-25T23:54:55Z,2019-10-26T00:01:23Z,CLOSED,False,1,1,1,https://github.com/gyakovlev,.cirrus.yml: update runner to FreeBSD-11.3,1,[],https://github.com/OpenRC/openrc/pull/331,https://github.com/gyakovlev,5,https://github.com/OpenRC/openrc/pull/331#issuecomment-546116276,simple update on 11 branch image.,"it keeps timing out without even starting, not sure anything can be done except getting lucky with free quota.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,331,2019-10-23T23:02:11Z,2019-10-25T23:54:55Z,2019-10-26T00:01:23Z,CLOSED,False,1,1,1,https://github.com/gyakovlev,.cirrus.yml: update runner to FreeBSD-11.3,1,[],https://github.com/OpenRC/openrc/pull/331,https://github.com/vapier,6,https://github.com/OpenRC/openrc/pull/331#issuecomment-546203463,simple update on 11 branch image.,"if their CI can't handle any real load, then trying to run against but always failing is going to just add noise and confusion to all our PRs right?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,331,2019-10-23T23:02:11Z,2019-10-25T23:54:55Z,2019-10-26T00:01:23Z,CLOSED,False,1,1,1,https://github.com/gyakovlev,.cirrus.yml: update runner to FreeBSD-11.3,1,[],https://github.com/OpenRC/openrc/pull/331,https://github.com/gyakovlev,7,https://github.com/OpenRC/openrc/pull/331#issuecomment-546547039,simple update on 11 branch image.,"what's strange is that 11.2 and 12.0 check works fine, something with scheduling 11.3 image on their gcloud.
I'll close this for now and revisit later, checking 11.2 is still ok, and it did not create any confusion before.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,331,2019-10-23T23:02:11Z,2019-10-25T23:54:55Z,2019-10-26T00:01:23Z,CLOSED,False,1,1,1,https://github.com/gyakovlev,.cirrus.yml: update runner to FreeBSD-11.3,1,[],https://github.com/OpenRC/openrc/pull/331,https://github.com/vapier,8,https://github.com/OpenRC/openrc/pull/331#issuecomment-546547849,simple update on 11 branch image.,thanks. happy to upgrade if we can rely on it :).,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,338,2019-11-17T17:54:00Z,2020-01-11T18:16:56Z,2020-01-17T17:56:33Z,CLOSED,False,1,1,1,https://github.com/lurch,Fix typo in README,1,[],https://github.com/OpenRC/openrc/pull/338,https://github.com/lurch,1,https://github.com/OpenRC/openrc/pull/338,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,345,2020-01-02T14:31:51Z,2020-01-11T18:10:27Z,2020-01-11T18:10:27Z,CLOSED,False,1,1,1,https://github.com/E5ten,make grep usage POSIX compliant,1,[],https://github.com/OpenRC/openrc/pull/345,https://github.com/E5ten,1,https://github.com/OpenRC/openrc/pull/345,"use grep -E instead of egrep
check for space or end of line instead of GNU-specific word boundary","use grep -E instead of egrep
check for space or end of line instead of GNU-specific word boundary",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,347,2020-01-10T07:22:19Z,2020-01-11T18:10:27Z,2020-01-11T18:10:27Z,CLOSED,False,0,3,1,https://github.com/jwbowen,Delete stray text.,1,[],https://github.com/OpenRC/openrc/pull/347,https://github.com/jwbowen,1,https://github.com/OpenRC/openrc/pull/347,"It looks like some stray text was left at the bottom of the file:
package.
migrating your system to openrc-init.

There's a subsection on migrating a system to openrc-init; perhaps this was
an embryonic section title?","It looks like some stray text was left at the bottom of the file:
package.
migrating your system to openrc-init.

There's a subsection on migrating a system to openrc-init; perhaps this was
an embryonic section title?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,348,2020-01-19T15:27:19Z,2020-01-19T22:55:05Z,2020-01-19T22:55:05Z,CLOSED,False,2,2,1,https://github.com/trofi,src/rc/rc-logger.h: fix build failure against gcc-10,1,[],https://github.com/OpenRC/openrc/pull/348,https://github.com/trofi,1,https://github.com/OpenRC/openrc/pull/348,"On gcc-10 (and gcc-9 -fno-common) build fails as:
cc  -L../librc -L../libeinfo -O2 -g -std=c99 -Wall -Wextra -Wimplicit -Wshadow \
  -Wformat=2 -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn \
  -Wmissing-format-attribute -Wnested-externs -Winline -Wwrite-strings \
  -Wcast-align -Wcast-qual -Wpointer-arith -Wdeclaration-after-statement \
  -Wsequence-point -Werror=implicit-function-declaration    \
  -Wl,-rpath=/lib   -o openrc rc.o rc-logger.o rc-misc.o rc-plugin.o _usage.o -lutil -lrc -leinfo -Wl,-Bdynamic -ldl
ld: rc-logger.o:/home/slyfox/dev/git/openrc/src/rc/rc-logger.h:16:
  multiple definition of `rc_logger_pid'; rc.o:openrc/src/rc/rc-logger.h:16: first defined here
ld: rc-logger.o:/home/slyfox/dev/git/openrc/src/rc/rc-logger.h:17:
  multiple definition of `rc_logger_tty'; rc.o:openrc/src/rc/rc-logger.h:17: first defined here

gcc-10 will change the default from -fcommon to fno-common:
https://gcc.gnu.org/PR85678.
The error also happens if CFLAGS=-fno-common passed explicitly.","On gcc-10 (and gcc-9 -fno-common) build fails as:
cc  -L../librc -L../libeinfo -O2 -g -std=c99 -Wall -Wextra -Wimplicit -Wshadow \
  -Wformat=2 -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn \
  -Wmissing-format-attribute -Wnested-externs -Winline -Wwrite-strings \
  -Wcast-align -Wcast-qual -Wpointer-arith -Wdeclaration-after-statement \
  -Wsequence-point -Werror=implicit-function-declaration    \
  -Wl,-rpath=/lib   -o openrc rc.o rc-logger.o rc-misc.o rc-plugin.o _usage.o -lutil -lrc -leinfo -Wl,-Bdynamic -ldl
ld: rc-logger.o:/home/slyfox/dev/git/openrc/src/rc/rc-logger.h:16:
  multiple definition of `rc_logger_pid'; rc.o:openrc/src/rc/rc-logger.h:16: first defined here
ld: rc-logger.o:/home/slyfox/dev/git/openrc/src/rc/rc-logger.h:17:
  multiple definition of `rc_logger_tty'; rc.o:openrc/src/rc/rc-logger.h:17: first defined here

gcc-10 will change the default from -fcommon to fno-common:
https://gcc.gnu.org/PR85678.
The error also happens if CFLAGS=-fno-common passed explicitly.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,349,2020-02-05T17:33:57Z,2020-02-05T17:37:47Z,2020-02-05T17:37:53Z,MERGED,True,1,1,1,https://github.com/austin987,man/openrc-run.8: fix a typo,1,[],https://github.com/OpenRC/openrc/pull/349,https://github.com/austin987,1,https://github.com/OpenRC/openrc/pull/349,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,349,2020-02-05T17:33:57Z,2020-02-05T17:37:47Z,2020-02-05T17:37:53Z,MERGED,True,1,1,1,https://github.com/austin987,man/openrc-run.8: fix a typo,1,[],https://github.com/OpenRC/openrc/pull/349,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/349#issuecomment-582524430,,thx!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,350,2020-02-11T03:06:59Z,2020-03-13T02:22:33Z,2020-03-13T02:22:33Z,CLOSED,False,24,1,1,None,Update moused stop function,3,[],https://github.com/OpenRC/openrc/pull/350,None,1,https://github.com/OpenRC/openrc/pull/350,"Add stop function
Add keywords: ""-stop"" and ""-shutdown""
Add ""provide mouse""","Add stop function
Add keywords: ""-stop"" and ""-shutdown""
Add ""provide mouse""",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,350,2020-02-11T03:06:59Z,2020-03-13T02:22:33Z,2020-03-13T02:22:33Z,CLOSED,False,24,1,1,None,Update moused stop function,3,[],https://github.com/OpenRC/openrc/pull/350,None,2,https://github.com/OpenRC/openrc/pull/350#issuecomment-584463661,"Add stop function
Add keywords: ""-stop"" and ""-shutdown""
Add ""provide mouse""",Updated moused stop function,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,350,2020-02-11T03:06:59Z,2020-03-13T02:22:33Z,2020-03-13T02:22:33Z,CLOSED,False,24,1,1,None,Update moused stop function,3,[],https://github.com/OpenRC/openrc/pull/350,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/350#issuecomment-592755791,"Add stop function
Add keywords: ""-stop"" and ""-shutdown""
Add ""provide mouse""","Hey, first off, sorry it took me this long to respond.
You don't need OPENRC_SILENT; EINFO_QUIET handles this function and is part of the libeinfo library.
Also, there is only one service n openrc for the mouse (moused), so you don't really need
""provide mouse"".
Let me know what you think.
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,350,2020-02-11T03:06:59Z,2020-03-13T02:22:33Z,2020-03-13T02:22:33Z,CLOSED,False,24,1,1,None,Update moused stop function,3,[],https://github.com/OpenRC/openrc/pull/350,None,4,https://github.com/OpenRC/openrc/pull/350#issuecomment-598516621,"Add stop function
Add keywords: ""-stop"" and ""-shutdown""
Add ""provide mouse""",I agree with your assessment. Will make corrections as noted.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,351,2020-02-14T16:11:40Z,2021-09-10T03:06:44Z,2021-09-10T03:06:44Z,CLOSED,False,0,0,0,https://github.com/kaniini,Add support for starting services in a specified VRF.,0,[],https://github.com/OpenRC/openrc/pull/351,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/351,"The venerable iproute2 utility has recently introduced support
for executing programs in specific VRFs which are virtualized
routing tables.  These are typically used to isolate different
networking planes from each other, for security or flexibility
reasons.
Services which use the normal supervisor/start-stop-daemon
pattern can be configured by setting the vrf variable in the
/etc/conf.d tree for the service.
This allows for things like configuring the sshd service to
run in a management VRF, which is useful for high assurance
environments where the management plane is intended to be
isolated.
Signed-off-by: Ariadne Conill ariadne@dereferenced.org","The venerable iproute2 utility has recently introduced support
for executing programs in specific VRFs which are virtualized
routing tables.  These are typically used to isolate different
networking planes from each other, for security or flexibility
reasons.
Services which use the normal supervisor/start-stop-daemon
pattern can be configured by setting the vrf variable in the
/etc/conf.d tree for the service.
This allows for things like configuring the sshd service to
run in a management VRF, which is useful for high assurance
environments where the management plane is intended to be
isolated.
Signed-off-by: Ariadne Conill ariadne@dereferenced.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,351,2020-02-14T16:11:40Z,2021-09-10T03:06:44Z,2021-09-10T03:06:44Z,CLOSED,False,0,0,0,https://github.com/kaniini,Add support for starting services in a specified VRF.,0,[],https://github.com/OpenRC/openrc/pull/351,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/351#issuecomment-586439150,"The venerable iproute2 utility has recently introduced support
for executing programs in specific VRFs which are virtualized
routing tables.  These are typically used to isolate different
networking planes from each other, for security or flexibility
reasons.
Services which use the normal supervisor/start-stop-daemon
pattern can be configured by setting the vrf variable in the
/etc/conf.d tree for the service.
This allows for things like configuring the sshd service to
run in a management VRF, which is useful for high assurance
environments where the management plane is intended to be
isolated.
Signed-off-by: Ariadne Conill ariadne@dereferenced.org","The variable used for enabling this should start with ""rc_"" to avoid potential clashing with runscript-specific variables.
Also note that this only applies when using the ""declarative"" style for runscripts (ie, settings some variables and not defining a start function).  This will not apply to runscripts that use their own start function.",True,{'THUMBS_UP': ['https://github.com/chutz']}
OpenRC/openrc,https://github.com/OpenRC/openrc,351,2020-02-14T16:11:40Z,2021-09-10T03:06:44Z,2021-09-10T03:06:44Z,CLOSED,False,0,0,0,https://github.com/kaniini,Add support for starting services in a specified VRF.,0,[],https://github.com/OpenRC/openrc/pull/351,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/351#issuecomment-808924106,"The venerable iproute2 utility has recently introduced support
for executing programs in specific VRFs which are virtualized
routing tables.  These are typically used to isolate different
networking planes from each other, for security or flexibility
reasons.
Services which use the normal supervisor/start-stop-daemon
pattern can be configured by setting the vrf variable in the
/etc/conf.d tree for the service.
This allows for things like configuring the sshd service to
run in a management VRF, which is useful for high assurance
environments where the management plane is intended to be
isolated.
Signed-off-by: Ariadne Conill ariadne@dereferenced.org","Everything in the provided reviews is correct. The response to the comment about this not applying to scripts that have their own start/stop functions is correct, but if they have their own start/stop functions we assume they know what they are doing.
I would also add a couple of things.
Since this is  linux specific, you would also want to check $RC_UNAME to make sure we are on Linux.
Also, please add documentation for this variable in etc/rc.conf.
Thanks much.
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,354,2020-02-29T11:48:48Z,2020-12-20T13:00:26Z,2020-12-20T13:00:26Z,CLOSED,False,12,2,1,https://github.com/casantos,modules: support BusyBox moddprobe command,1,[],https://github.com/OpenRC/openrc/pull/354,https://github.com/casantos,1,https://github.com/OpenRC/openrc/pull/354,"Check if modprobe is provided by kmod or BusyBox. The BusyBox one does
not recognize ""--first-time"". Blacklist support is not always available
and its option is ""-b"", not ""--use-blacklist"". The kmod one also accepts
""-b"", so the short option works in both cases.
Signed-off-by: Carlos Santos unixmania@gmail.com","Check if modprobe is provided by kmod or BusyBox. The BusyBox one does
not recognize ""--first-time"". Blacklist support is not always available
and its option is ""-b"", not ""--use-blacklist"". The kmod one also accepts
""-b"", so the short option works in both cases.
Signed-off-by: Carlos Santos unixmania@gmail.com",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,354,2020-02-29T11:48:48Z,2020-12-20T13:00:26Z,2020-12-20T13:00:26Z,CLOSED,False,12,2,1,https://github.com/casantos,modules: support BusyBox moddprobe command,1,[],https://github.com/OpenRC/openrc/pull/354,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/354#issuecomment-655576427,"Check if modprobe is provided by kmod or BusyBox. The BusyBox one does
not recognize ""--first-time"". Blacklist support is not always available
and its option is ""-b"", not ""--use-blacklist"". The kmod one also accepts
""-b"", so the short option works in both cases.
Signed-off-by: Carlos Santos unixmania@gmail.com","There are several issues using the busybox user space utilities with OpenRC (see the BUSYBOX.md file in the repository).
There are bugs open on the busybox site about most of these, but there has been no response there.
The tracker is https://bugs.gentoo.org/529086.
I would prefer that things like this get fixed in busybox because the only way around it from the openrc side is to do checks similar to what you do in this pr or maybe use ""command -v"" on every command where there might be an issue and have different code branches to support busybox behavior.
I would like to hear comments on this pr about whether we should do the checking in OpenRC or advocate for the fixes to be done in busybox.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,354,2020-02-29T11:48:48Z,2020-12-20T13:00:26Z,2020-12-20T13:00:26Z,CLOSED,False,12,2,1,https://github.com/casantos,modules: support BusyBox moddprobe command,1,[],https://github.com/OpenRC/openrc/pull/354,https://github.com/casantos,3,https://github.com/OpenRC/openrc/pull/354#issuecomment-655601027,"Check if modprobe is provided by kmod or BusyBox. The BusyBox one does
not recognize ""--first-time"". Blacklist support is not always available
and its option is ""-b"", not ""--use-blacklist"". The kmod one also accepts
""-b"", so the short option works in both cases.
Signed-off-by: Carlos Santos unixmania@gmail.com","I'm not involved anymore with the project for which this PR was made, so feel free to drop it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,354,2020-02-29T11:48:48Z,2020-12-20T13:00:26Z,2020-12-20T13:00:26Z,CLOSED,False,12,2,1,https://github.com/casantos,modules: support BusyBox moddprobe command,1,[],https://github.com/OpenRC/openrc/pull/354,https://github.com/lu-zero,4,https://github.com/OpenRC/openrc/pull/354#issuecomment-748604788,"Check if modprobe is provided by kmod or BusyBox. The BusyBox one does
not recognize ""--first-time"". Blacklist support is not always available
and its option is ""-b"", not ""--use-blacklist"". The kmod one also accepts
""-b"", so the short option works in both cases.
Signed-off-by: Carlos Santos unixmania@gmail.com",Thank you nonetheless.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,355,2020-03-12T01:53:58Z,,2020-03-12T01:53:58Z,OPEN,False,14,6,4,https://github.com/casantos,runlevels: install gettys if the MKGETTYS variable is set to > 0,1,[],https://github.com/OpenRC/openrc/pull/355,https://github.com/casantos,1,https://github.com/OpenRC/openrc/pull/355,"A separate switch allows to set the number of desired gettys (or none,
since tty[1-6] may not even exist, like in embedded devices with serial
consoles, only).
Update the documentation accordingly.
Keep MKSYSVINIT just to control the build of the sysvinit compatible
wrappers.
Signed-off-by: Carlos Santos unixmania@gmail.com","A separate switch allows to set the number of desired gettys (or none,
since tty[1-6] may not even exist, like in embedded devices with serial
consoles, only).
Update the documentation accordingly.
Keep MKSYSVINIT just to control the build of the sysvinit compatible
wrappers.
Signed-off-by: Carlos Santos unixmania@gmail.com",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,359,2020-04-06T23:18:14Z,2020-12-22T18:10:52Z,2020-12-22T18:10:52Z,CLOSED,False,1,2,1,https://github.com/pnoll1,remove statement about not providing an init,1,[],https://github.com/OpenRC/openrc/pull/359,https://github.com/pnoll1,1,https://github.com/OpenRC/openrc/pull/359,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,361,2020-04-13T14:26:12Z,2021-02-22T22:10:03Z,2021-02-22T22:10:03Z,CLOSED,False,2,2,1,https://github.com/disconnect3d,Fix off by ones when checking for RC_* envvars,1,[],https://github.com/OpenRC/openrc/pull/361,https://github.com/disconnect3d,1,https://github.com/OpenRC/openrc/pull/361,Fixes strncmp size argument off by one as the current implementation didn't match the = character.,Fixes strncmp size argument off by one as the current implementation didn't match the = character.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,362,2020-04-13T14:27:12Z,2021-02-22T22:10:04Z,2021-02-22T22:10:04Z,CLOSED,False,2,2,1,https://github.com/disconnect3d,Fix off by ones when checking for RC_* envvars,1,[],https://github.com/OpenRC/openrc/pull/362,https://github.com/disconnect3d,1,https://github.com/OpenRC/openrc/pull/362,The same as #361,The same as #361,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,364,2020-04-19T11:06:07Z,2020-12-20T22:04:16Z,2020-12-20T22:04:16Z,CLOSED,False,3,2,1,https://github.com/mrueg,rc-status: Remove noise from ini-formatted output,1,[],https://github.com/OpenRC/openrc/pull/364,https://github.com/mrueg,1,https://github.com/OpenRC/openrc/pull/364,"Otherwise this would create the following output:
rc-status -f ini
 * Caching service dependencies ...        [ ok ]
[default]
dbus =  started
NetworkManager =  started
syslog-ng =  started
...","Otherwise this would create the following output:
rc-status -f ini
 * Caching service dependencies ...        [ ok ]
[default]
dbus =  started
NetworkManager =  started
syslog-ng =  started
...",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,365,2020-04-19T11:15:32Z,2020-06-06T05:56:07Z,2020-06-06T05:56:07Z,MERGED,True,2,2,1,https://github.com/mrueg,.cirrus.yml: Update FreeBSD releases,1,[],https://github.com/OpenRC/openrc/pull/365,https://github.com/mrueg,1,https://github.com/OpenRC/openrc/pull/365,This might fix CI.,This might fix CI.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,365,2020-04-19T11:15:32Z,2020-06-06T05:56:07Z,2020-06-06T05:56:07Z,MERGED,True,2,2,1,https://github.com/mrueg,.cirrus.yml: Update FreeBSD releases,1,[],https://github.com/OpenRC/openrc/pull/365,https://github.com/gyakovlev,2,https://github.com/OpenRC/openrc/pull/365#issuecomment-634415805,This might fix CI.,probably not getting quota on google cloud. maybe it's time just to use latest 12.x and drop 11.x.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,366,2020-05-09T06:15:08Z,,2021-12-31T00:45:52Z,OPEN,False,5,4,1,https://github.com/axelu,staticroute to ommit erroneous dash args prefix when inet6,2,[],https://github.com/OpenRC/openrc/pull/366,https://github.com/axelu,1,https://github.com/OpenRC/openrc/pull/366,"Fixes #312 where the route command is invoked by init.d/staticroute with an erroneous dash in case of inet6.
route command syntax for
Adding routes to IPv6 subnets:
route add -net networkaddress netmask netmask interface
Adding routes to IPv6 subnets:
route add -A inet6 networkaddress/prefixlength interface
The issue is, that the init.d/staticroute script always injects the dash in front of the arguments, so in the case of IPv6 it becomes -networkaddress/prefixlength which results in an error.
Tracing the actually executed route code in the net-tools package has this also in regards to the expected syntax:
inet_route [-vF] add {-host|-net} Target[/prefix] [gw Gw] [metric M]
vs
inet6_route [-vF] add Target [gw Gw] [metric M] [[dev] If]
In addition to the inet6 issue, one can also see that actually also declaring the target in the inet aka IPv4 case explicitly as a network or a host is optional, so the dash would also cause problems with that in case net or host is not specified.  When given an address in dotted quad notation, route attempts to guess whether it is a network or a hostname in case net or host is not specified.
All that being said, route is deprecated and the ip route command from the networking tools of the iproute2 suite should be used anyway, which can be done by using the staticiproute key in the respective config file to declare a static route, which will cause init.d/staticroute to invoke the ip route command instead of the route command, and for that the issue does not exist.","Fixes #312 where the route command is invoked by init.d/staticroute with an erroneous dash in case of inet6.
route command syntax for
Adding routes to IPv6 subnets:
route add -net networkaddress netmask netmask interface
Adding routes to IPv6 subnets:
route add -A inet6 networkaddress/prefixlength interface
The issue is, that the init.d/staticroute script always injects the dash in front of the arguments, so in the case of IPv6 it becomes -networkaddress/prefixlength which results in an error.
Tracing the actually executed route code in the net-tools package has this also in regards to the expected syntax:
inet_route [-vF] add {-host|-net} Target[/prefix] [gw Gw] [metric M]
vs
inet6_route [-vF] add Target [gw Gw] [metric M] [[dev] If]
In addition to the inet6 issue, one can also see that actually also declaring the target in the inet aka IPv4 case explicitly as a network or a host is optional, so the dash would also cause problems with that in case net or host is not specified.  When given an address in dotted quad notation, route attempts to guess whether it is a network or a hostname in case net or host is not specified.
All that being said, route is deprecated and the ip route command from the networking tools of the iproute2 suite should be used anyway, which can be done by using the staticiproute key in the respective config file to declare a static route, which will cause init.d/staticroute to invoke the ip route command instead of the route command, and for that the issue does not exist.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,369,2020-05-14T14:25:25Z,,2021-12-31T00:45:52Z,OPEN,False,2,0,1,https://github.com/lego12239,Accept RC_DEBUG setting from a service script,1,[],https://github.com/OpenRC/openrc/pull/369,https://github.com/lego12239,1,https://github.com/OpenRC/openrc/pull/369,"Sometimes it's need to debug a certain service script on a system startup.
With old-style sysvinit scripts we just add -x to the first line of our
service script. openrc-run doesn't allow us to do this, but we still can
place ""set -x"" somewhere at the beginning of our script.
This patch allow us to use RC_DEBUG instead of ""set -x"" for debug
purposes.","Sometimes it's need to debug a certain service script on a system startup.
With old-style sysvinit scripts we just add -x to the first line of our
service script. openrc-run doesn't allow us to do this, but we still can
place ""set -x"" somewhere at the beginning of our script.
This patch allow us to use RC_DEBUG instead of ""set -x"" for debug
purposes.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,369,2020-05-14T14:25:25Z,,2021-12-31T00:45:52Z,OPEN,False,2,0,1,https://github.com/lego12239,Accept RC_DEBUG setting from a service script,1,[],https://github.com/OpenRC/openrc/pull/369,https://github.com/lego12239,2,https://github.com/OpenRC/openrc/pull/369#issuecomment-628671761,"Sometimes it's need to debug a certain service script on a system startup.
With old-style sysvinit scripts we just add -x to the first line of our
service script. openrc-run doesn't allow us to do this, but we still can
place ""set -x"" somewhere at the beginning of our script.
This patch allow us to use RC_DEBUG instead of ""set -x"" for debug
purposes.","I don't know is that really need. We can just use ""set -x"" inside a service script. But if need - there is the patch :-).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,375,2020-07-24T01:04:03Z,2020-11-30T03:26:06Z,2020-11-30T03:26:06Z,CLOSED,False,19,17,1,https://github.com/1800alex,Fixed issue where a killed process is started when supervise-daemon exits,2,[],https://github.com/OpenRC/openrc/pull/375,https://github.com/1800alex,1,https://github.com/OpenRC/openrc/pull/375,"This PR fixes an issue with supervise-daemon as follows:

a process using respawn-delay dies
supervise-daemon receives SIGTERM from /etc/init.d/example stop
supervise-daemon begins to exit, but starts the process before exiting

This leaves an unmanaged process running while supervise-daemon is down.","This PR fixes an issue with supervise-daemon as follows:

a process using respawn-delay dies
supervise-daemon receives SIGTERM from /etc/init.d/example stop
supervise-daemon begins to exit, but starts the process before exiting

This leaves an unmanaged process running while supervise-daemon is down.",True,"{'ROCKET': ['https://github.com/Maxattax97'], 'THUMBS_UP': ['https://github.com/Maxattax97']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/TheEvilSkeleton,1,https://github.com/OpenRC/openrc/pull/376,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,2,https://github.com/OpenRC/openrc/pull/376#issuecomment-672420758,,I think www.w3.org would be more universal,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/TheEvilSkeleton,3,https://github.com/OpenRC/openrc/pull/376#issuecomment-672423261,,"Sure, I'll change",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/TheEvilSkeleton,4,https://github.com/OpenRC/openrc/pull/376#issuecomment-672424930,,Done f7ad02b,True,"{'THUMBS_UP': ['https://github.com/EchedeyLR', 'https://github.com/ArcticTheRogue', 'https://github.com/resynth1943']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/ArcticTheRogue,5,https://github.com/OpenRC/openrc/pull/376#issuecomment-672432481,,Maybe also change the PR name? (if possible),True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/TheEvilSkeleton,6,https://github.com/OpenRC/openrc/pull/376#issuecomment-672433014,,"Maybe also change the PR name? (if possible)

Thank you for pointing that out :)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/ArcticTheRogue,7,https://github.com/OpenRC/openrc/pull/376#issuecomment-672444285,,No problem,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,8,https://github.com/OpenRC/openrc/pull/376#issuecomment-672444982,,"openrc/conf.d/net-online
    
    
         Line 11
      in
      72df51e
    
  
  
    

        
          
           # The default is google.com. 
        
    
  

 must be edited too",True,{'HEART': ['https://github.com/TheEvilSkeleton']}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/vapier,9,https://github.com/OpenRC/openrc/pull/376#issuecomment-672579006,,"this does not seem like a good idea.  google.com has a lot more resources & world wide distribution & guaranteed uptime/availability to handle this kind of load compared to the w3.org website or gentoo.org.
what are you trying to ""fix"" ?",True,"{'THUMBS_DOWN': ['https://github.com/MMuthukrishna', 'https://github.com/resynth1943', 'https://github.com/ArcticTheRogue', 'https://github.com/TheEvilSkeleton', 'https://github.com/Trendyne']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/resynth1943,10,https://github.com/OpenRC/openrc/pull/376#issuecomment-672817399,,"In this ping function, it seems to me that the user's IP is sent to Google.
If a person is aiming to avoid Google, this may expose them to Google. For example, Google may very well cross-reference IP's from its different services, and build a profile on them.

Also, the w3c website was a very good choice. Thank you. That is going to be very reliable.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/vapier,11,https://github.com/OpenRC/openrc/pull/376#issuecomment-673012261,,"the user is transmitting a few ICMP packets that will be seen by the local LAN admin, the ISP, and any network in between.  if w3.org is hosted on a cloud service (e.g. Google or Cloudflare), then you're still exposing yourself.
the fact that the service received a few ICMP packets is meaningless.  what exactly could that even add to a ""profile"" that someone is maintaining ?  as for the idea that this is even happening in the first place, that's pure speculation leading to tin foil hat territory.
if you're paranoid enough about these things, change the default on your system.  that's not justification for moving the load to a random website that is not set up to handle or service this sort of load.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/resynth1943,12,https://github.com/OpenRC/openrc/pull/376#issuecomment-673035103,,"if w3.org is hosted on a cloud service (e.g. Google or Cloudflare), then you're still exposing yourself.

From what I can see, that's not true, and seems to be a strawman.

as for the idea that this is even happening in the first place, that's pure speculation leading to tin foil hat territory.

Well, I'm understandably suspicious of Google.
You should be too, but whether you are is of your own volition.

that's not justification for moving the load to a random website that is not set up to handle or service this sort of load.

It doesn't necessarily have to be this website. This is still an early pull request, so there's always room for change. Feel free to offer any constructive suggestions.",True,{'THUMBS_UP': ['https://github.com/TheEvilSkeleton']}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/resynth1943,13,https://github.com/OpenRC/openrc/pull/376#issuecomment-673036091,,Sidenote: the Gentoo wiki recommends pinging gentoo.org.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/vapier,14,https://github.com/OpenRC/openrc/pull/376#issuecomment-673058825,,"the person wanting to make a change needs to provide justification for it.  at this point, there is none beyond paranoia, and it is objectively worst as i already described.
find a default that has the same properties i highlighted and we can consider it.",True,"{'THUMBS_DOWN': ['https://github.com/TheEvilSkeleton', 'https://github.com/resynth1943', 'https://github.com/ArcticTheRogue', 'https://github.com/Trendyne']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,15,https://github.com/OpenRC/openrc/pull/376#issuecomment-673059971,,"random website that is not set up to handle or service this sort of load.

You know W3C webpage, right?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/cromerc,16,https://github.com/OpenRC/openrc/pull/376#issuecomment-673063739,,"W3C is well known, but is nothing like google. Google has servers all over the world. It is never ""down"", which is why it's one of the best targets to ping to check if connection works. The only other good target I could even think of would be cloudflare since they run a worldwide cdn network and are almost always up just like google.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/vapier,17,https://github.com/OpenRC/openrc/pull/376#issuecomment-673064534,,"You know W3C webpage, right?

as a w3c member having made (minor) contributions to standards, yes, i think i'm ""familiar"" with them.
but you're ignoring my technical points.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,18,https://github.com/OpenRC/openrc/pull/376#issuecomment-673070907,,I was sure that W3C had a similar state over the servers. Other alternative would be deb.debian.org which points to a FastCDN or whatever is called and depend on Debian mirrors all over the world.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,19,https://github.com/OpenRC/openrc/pull/376#issuecomment-673078018,,"Mmmm, I was right, I checked to be sure and W3C webpage is using Gandi.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/cromerc,20,https://github.com/OpenRC/openrc/pull/376#issuecomment-673090372,,"Gandi has 3 data centers in France, 1 in Luxembourg and 4 in the United States... that is not anywhere near similar to what cloudflare or google have.
Using debian mirrors doesn't change anything. They collect data/info when people use their services. If you have a look here is  what debian collects: https://wiki.debian.org/Statistics
Here is an example: http://ftp.ch.debian.org/webalizer/usage_202008.html
So they have ip's of everyone that uses it, where they are from, what you download, etc.
The only way you are truly going to protect your privacy is disable the ping altogether, or point it to your own personal web server instead of a 3rd party one.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/resynth1943,21,https://github.com/OpenRC/openrc/pull/376#issuecomment-673094430,,"Gandi has 3 data centers in France, 1 in Luxembourg and 4 in the United States... that is not anywhere near similar to what cloudflare or google have.

I'm 100% sure we can find something that can match Google, in terms of stability, at least. And perhaps privacy. I'll do some research.
(and please no silly discussion locking)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/resynth1943,22,https://github.com/OpenRC/openrc/pull/376#issuecomment-673094741,,"Would it be wise to use the servers of a domain registrar (or a wheel of them, even)? They, I assume, would have very good uptime.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/cromerc,23,https://github.com/OpenRC/openrc/pull/376#issuecomment-673099455,,"Just change it in your conf.d file on your machines.
It isn't like the option to choose the server that is pinged doesn't exist.
google is just the default, it's not forced on you or anyone else.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/resynth1943,24,https://github.com/OpenRC/openrc/pull/376#issuecomment-673104396,,"It isn't like the option to choose the server that is pinged doesn't exist.

I never disputed that.

google is just the default, it's not forced on you or anyone else.

Or that.
Nevertheless, I think it may be wise to try and decide on an alternative that satisfies both crowds: privacy-focused, and mainstream.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,25,https://github.com/OpenRC/openrc/pull/376#issuecomment-673104468,,"Gandi has 3 data centers in France, 1 in Luxembourg and 4 in the United States... that is not anywhere near similar to what cloudflare or google have.
Using debian mirrors doesn't change anything. They collect data/info when people use their services. If you have a look here is what debian collects: https://wiki.debian.org/Statistics
Here is an example: http://ftp.ch.debian.org/webalizer/usage_202008.html
So they have ip's of everyone that uses it, where they are from, what you download, etc.
The only way you are truly going to protect your privacy is disable the ping altogether, or point it to your own personal web server instead of a 3rd party one.

I know about that in Debian, which is different to Google analisis and use of the info. I contribute sending info in some pcs through popularity-contest package. You compare Google enterprise management with Debian organization/community management and use.",True,{'THUMBS_UP': ['https://github.com/resynth1943']}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,26,https://github.com/OpenRC/openrc/pull/376#issuecomment-673110300,,"Gandi has 3 data centers in France, 1 in Luxembourg and 4 in the United States... that is not anywhere near similar to what cloudflare or google have.

I don't understand certain point and the technical stuff referenced in:

this does not seem like a good idea. google.com has a lot more resources & world wide distribution & guaranteed uptime/availability to handle this kind of load compared to the w3.org website or gentoo.org.

What is the requirement for the ping functionality in order to be equivalent, in resources of what you need?
I doubt that you need the Google/Cloudflare wide network for that but I don't know.
What I am trying to propose are alternatives capable of what you seemed to need: guaranteed availability, good support over the world and good resources.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/cromerc,27,https://github.com/OpenRC/openrc/pull/376#issuecomment-673112409,,"The point of the ping is that is it succeeds, then all other services that require internet to be up before running are able to start. If the ping fails, those services won't start. That is why it has to be up 99.99% of the time. If mysite.org is down, then the services that require internet don't start...",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,28,https://github.com/OpenRC/openrc/pull/376#issuecomment-673119436,,Gandi ensures 99.95% of availability on their cloud servers so Debian one would be reilable in that sense.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/vapier,29,https://github.com/OpenRC/openrc/pull/376#issuecomment-673278598,,"availability is only one aspect i highlighted.  regional distribution is another.  only having presence in Europe & the US is heavily skewed towards those small regions and ignores more than half the world's area & population.  being ""up"" in Luxembourg doesn't help if Taipei can't reach you.  or has a lot of packet latency or loss getting there.
plus, if you want to pin to a network, you shouldn't be using random customer sites like w3.org as a proxy for it.  i've never heard of them before so i can't say whether they have a central point one could pin to.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/resynth1943,30,https://github.com/OpenRC/openrc/pull/376#issuecomment-673432611,,"as a w3c member having made (minor) contributions to standards, yes, i think i'm ""familiar"" with them.
i've never heard of them before

Thonkers.

availability is only one aspect i highlighted. regional distribution is another. only having presence in Europe & the US is heavily skewed towards those small regions and ignores more than half the world's area & population. being ""up"" in Luxembourg doesn't help if Taipei can't reach you. or has a lot of packet latency or loss getting there.

Fair. I've read into how the internet backbone works, and sometimes it does go down.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/resynth1943,31,https://github.com/OpenRC/openrc/pull/376#issuecomment-673433168,,"What about pinging the set NTP server? How would that work? Surely that's a little better, right?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,32,https://github.com/OpenRC/openrc/pull/376#issuecomment-673584065,,"being ""up"" in Luxembourg doesn't help if Taipei can't reach you. or has a lot of packet latency or loss getting there.

That should not be an issue if Gandi is using OVH network or has direct connection to it. I didn't include it when speaking about the avaliability because I considered obvious given my point before about Debian ""deb.debian.org"" site in FastlyCDN.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/vapier,33,https://github.com/OpenRC/openrc/pull/376#issuecomment-673920035,,"you might be familiar with ""Gandi"", but that doesn't mean it's commonly recognized by people, nor does it mean people randomly go sniffing their internal network details to see how it's hosted.  please don't make assumptions -- state whatever data you have to support your suggestions, and if no data is presented, then the assumption is that there is none.
if your point is that w3.org is OK because it happens to use Gandi which happens to use OVH network (whatever that is) which is supposed to have good world-wide distribution, then i think that shows even more that w3.org is not a good default.

NTP server

NTP servers are required to respond to UDP requests on port 123, but there's no requirement i'm aware of that they respond to ICMP, or they have really good uptime.  last i looked, the mirrors tend to be selected via round robin DNS, have regional hostnames that you have to manually pick, and the lower stratum servers are tend to be run by volunteers.  you might randomly get a good hit, and other times not so much.  NTP is meant to be an ongoing service to keep clocks in sync (by slowly stepping them), so if requests now & then get dropped, it's not a big deal -- it's designed to be more resilient.
Google (as have other large cloud companies like Cloudflare) has invested a lot in making things work well by default so users don't have to go fiddling with esoteric settings like hostnames or DNS settings or the like, assuming the device they're using even allows them to control such things.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,376,2020-08-12T01:08:13Z,2020-08-12T19:12:54Z,2020-08-15T14:28:05Z,CLOSED,False,2,2,2,https://github.com/TheEvilSkeleton,Change ping test host to www.w3.org,3,[],https://github.com/OpenRC/openrc/pull/376,https://github.com/EchedeyLR,34,https://github.com/OpenRC/openrc/pull/376#issuecomment-674029486,,"The other person already told which is the minimum avaliability and something hosted in Gandi finished not being reilable enough.
The point now would be using deb.debian.org which is sponsored by FastlyCDN (https://www.fastly.com/network-map)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,377,2020-08-27T00:59:31Z,2020-11-28T00:08:10Z,2020-11-28T00:08:10Z,CLOSED,False,12,0,1,https://github.com/dermotbradley,Remove warning when osclock init.d script runs,1,[],https://github.com/OpenRC/openrc/pull/377,https://github.com/dermotbradley,1,https://github.com/OpenRC/openrc/pull/377,"Currently when osclock is enabled as a init.d service the following
messages appear during boot when osclock starts:

The command variable is undefined.
There is nothing for osclock to start.
If this is what you intend, please write a start function.
This will become a failure in a future release.

osclock is activated whenever a machine's system clock is automatically
configured from a RTC by the kernel and the osclock's only purpose is to
satisfy the ""clock"" dependency defined by other init.d services.
Adding a stub start() function prevents OpenRC from showing warnings but
continues to ensure that the osclock service still does not actually do
anything.","Currently when osclock is enabled as a init.d service the following
messages appear during boot when osclock starts:

The command variable is undefined.
There is nothing for osclock to start.
If this is what you intend, please write a start function.
This will become a failure in a future release.

osclock is activated whenever a machine's system clock is automatically
configured from a RTC by the kernel and the osclock's only purpose is to
satisfy the ""clock"" dependency defined by other init.d services.
Adding a stub start() function prevents OpenRC from showing warnings but
continues to ensure that the osclock service still does not actually do
anything.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,378,2020-08-30T03:22:46Z,2020-11-28T00:03:20Z,2020-11-28T00:03:20Z,CLOSED,False,23,0,1,https://github.com/calzoneman,man/openrc.8: populate OPTIONS from --help output,1,[],https://github.com/OpenRC/openrc/pull/378,https://github.com/calzoneman,1,https://github.com/OpenRC/openrc/pull/378,"Originally reported on the gentoo-user list: man openrc does not include documentation of the options (but --help does).
This pull request populates an OPTIONS section in openrc.8 based on the output of openrc --help.
Feel free to suggest changes; I'm not a *roff expert.","Originally reported on the gentoo-user list: man openrc does not include documentation of the options (but --help does).
This pull request populates an OPTIONS section in openrc.8 based on the output of openrc --help.
Feel free to suggest changes; I'm not a *roff expert.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,380,2020-09-06T07:46:09Z,2020-11-27T23:19:50Z,2020-11-27T23:19:50Z,CLOSED,False,6,4,2,https://github.com/jhe2,"start-stop-, supervise-daemon: fix parsing of usernames starting with number",1,[],https://github.com/OpenRC/openrc/pull/380,https://github.com/jhe2,1,https://github.com/OpenRC/openrc/pull/380,"start-stop-daemon and supervise-daemon parse usernames and group names
passed via the --user argument as numeric UID/GID if they start with a
number (e.g. user ""4foo"" will be treated as UID 4). This results in the
process that is being started to run under a totally unexpected user if
that UID exists.
Even though the result of the sscanf calls are tested for a result of
exactly 1, which means exactly one value was extracted, because sscanf's
format string only contains only one placeholder, it will never return
a value greater than 1, even if there are still characters left to be
parsed. This causes start-stop-daemon and supervise-daemon to assume
that usernames starting with a number are just that number. Adding a
second placeholder ""%1s"" to the format string, which matches a string of
length 1, makes sure that sscanf can distinguish between pure numbers
(in which case it will return 1) and strings either starting with a
number (in which case it will return 2) and any other string (in which
case it will return 0).
This fixes #379.","start-stop-daemon and supervise-daemon parse usernames and group names
passed via the --user argument as numeric UID/GID if they start with a
number (e.g. user ""4foo"" will be treated as UID 4). This results in the
process that is being started to run under a totally unexpected user if
that UID exists.
Even though the result of the sscanf calls are tested for a result of
exactly 1, which means exactly one value was extracted, because sscanf's
format string only contains only one placeholder, it will never return
a value greater than 1, even if there are still characters left to be
parsed. This causes start-stop-daemon and supervise-daemon to assume
that usernames starting with a number are just that number. Adding a
second placeholder ""%1s"" to the format string, which matches a string of
length 1, makes sure that sscanf can distinguish between pure numbers
(in which case it will return 1) and strings either starting with a
number (in which case it will return 2) and any other string (in which
case it will return 0).
This fixes #379.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,384,2020-11-01T19:16:01Z,2020-11-01T20:45:13Z,2020-11-01T20:45:17Z,MERGED,True,1,1,1,https://github.com/jsurloppe,Update user-guide.md,1,[],https://github.com/OpenRC/openrc/pull/384,https://github.com/jsurloppe,1,https://github.com/OpenRC/openrc/pull/384,Add missing underscore.,Add missing underscore.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,384,2020-11-01T19:16:01Z,2020-11-01T20:45:13Z,2020-11-01T20:45:17Z,MERGED,True,1,1,1,https://github.com/jsurloppe,Update user-guide.md,1,[],https://github.com/OpenRC/openrc/pull/384,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/384#issuecomment-720148905,Add missing underscore.,thx bud,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,385,2020-11-18T11:09:36Z,2020-11-20T15:24:17Z,2020-11-20T16:45:33Z,CLOSED,False,1,1,1,https://github.com/Polynomial-C,start-stop-daemon: Don't segfault if --exec was given a non-existing file name,1,[],https://github.com/OpenRC/openrc/pull/385,https://github.com/Polynomial-C,1,https://github.com/OpenRC/openrc/pull/385,"Starting program: /sbin/start-stop-daemon --start --exec i-dont-exist
Program received signal SIGSEGV, Segmentation fault.
0x0000555555559053 in main (argc=1, argv=0x7fffffffdc20)
at start-stop-daemon.c:631
631                         *exec_file ? exec_file : exec);
X-Gentoo-Bug: 755197
X-Gentoo-Bug-URL: https://bugs.gentoo.org/755197","Starting program: /sbin/start-stop-daemon --start --exec i-dont-exist
Program received signal SIGSEGV, Segmentation fault.
0x0000555555559053 in main (argc=1, argv=0x7fffffffdc20)
at start-stop-daemon.c:631
631                         *exec_file ? exec_file : exec);
X-Gentoo-Bug: 755197
X-Gentoo-Bug-URL: https://bugs.gentoo.org/755197",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,385,2020-11-18T11:09:36Z,2020-11-20T15:24:17Z,2020-11-20T16:45:33Z,CLOSED,False,1,1,1,https://github.com/Polynomial-C,start-stop-daemon: Don't segfault if --exec was given a non-existing file name,1,[],https://github.com/OpenRC/openrc/pull/385,https://github.com/d-e-s-o,2,https://github.com/OpenRC/openrc/pull/385#issuecomment-729797587,"Starting program: /sbin/start-stop-daemon --start --exec i-dont-exist
Program received signal SIGSEGV, Segmentation fault.
0x0000555555559053 in main (argc=1, argv=0x7fffffffdc20)
at start-stop-daemon.c:631
631                         *exec_file ? exec_file : exec);
X-Gentoo-Bug: 755197
X-Gentoo-Bug-URL: https://bugs.gentoo.org/755197",Can you please add a test?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,386,2020-11-25T12:26:55Z,2020-11-27T23:30:21Z,2020-11-27T23:30:21Z,CLOSED,False,3,3,1,https://github.com/orlitzky,Two minor improvements to the CVE-2018-21269 fix,2,[],https://github.com/OpenRC/openrc/pull/386,https://github.com/orlitzky,1,https://github.com/OpenRC/openrc/pull/386,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,387,2020-12-02T17:29:02Z,2020-12-04T03:50:15Z,2020-12-04T03:53:57Z,CLOSED,False,48,2,2,https://github.com/sulincix,Backlight state save and restore function added. (openrc service),1,[],https://github.com/OpenRC/openrc/pull/387,https://github.com/sulincix,1,https://github.com/OpenRC/openrc/pull/387,"https://www.freedesktop.org/software/systemd/man/systemd-backlight@.service.html
I added service that same as this. We can save backlight state during shutdown and restore state during boot.
I save current state in /var/cache/backlight directory (if you want, I can change path)","https://www.freedesktop.org/software/systemd/man/systemd-backlight@.service.html
I added service that same as this. We can save backlight state during shutdown and restore state during boot.
I save current state in /var/cache/backlight directory (if you want, I can change path)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,387,2020-12-02T17:29:02Z,2020-12-04T03:50:15Z,2020-12-04T03:53:57Z,CLOSED,False,48,2,2,https://github.com/sulincix,Backlight state save and restore function added. (openrc service),1,[],https://github.com/OpenRC/openrc/pull/387,https://github.com/cromerc,2,https://github.com/OpenRC/openrc/pull/387#issuecomment-737563597,"https://www.freedesktop.org/software/systemd/man/systemd-backlight@.service.html
I added service that same as this. We can save backlight state during shutdown and restore state during boot.
I save current state in /var/cache/backlight directory (if you want, I can change path)","I actually think it would be better to use this instead of your implementation: https://github.com/beatussum/save-backlight/blob/master/save-backlight
It has checks to make sure the cache directory is owned by root and that the value 0 isn't used which would turn the screen off. It also uses ubegin, ewarn, and eend to give a pretty output that looks nice on boot.
However I don't know that this should be added to upstream openrc itself. The point of openrc is to get the system up. Backlight is not essential to that purpose. For example, in containerized use of openrc there is no backlight at all for example. And some systems might have no backlight at all depending on hardware configuration.
In artix linux we have a package called backlight-openrc for example that installs the backlight save/restore script. In arch linux AUR they also have backlight-openrc. So certain linux distros supply this script for people that want/need it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,387,2020-12-02T17:29:02Z,2020-12-04T03:50:15Z,2020-12-04T03:53:57Z,CLOSED,False,48,2,2,https://github.com/sulincix,Backlight state save and restore function added. (openrc service),1,[],https://github.com/OpenRC/openrc/pull/387,https://github.com/gyakovlev,3,https://github.com/OpenRC/openrc/pull/387#issuecomment-737577498,"https://www.freedesktop.org/software/systemd/man/systemd-backlight@.service.html
I added service that same as this. We can save backlight state during shutdown and restore state during boot.
I save current state in /var/cache/backlight directory (if you want, I can change path)","acpilight package contains initscript btw.
it's a drop-in replacement for xbacklight
https://gitweb.gentoo.org/repo/gentoo.git/tree/sys-power/acpilight/files/acpilight.initd",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,387,2020-12-02T17:29:02Z,2020-12-04T03:50:15Z,2020-12-04T03:53:57Z,CLOSED,False,48,2,2,https://github.com/sulincix,Backlight state save and restore function added. (openrc service),1,[],https://github.com/OpenRC/openrc/pull/387,https://github.com/sulincix,4,https://github.com/OpenRC/openrc/pull/387#issuecomment-738548079,"https://www.freedesktop.org/software/systemd/man/systemd-backlight@.service.html
I added service that same as this. We can save backlight state during shutdown and restore state during boot.
I save current state in /var/cache/backlight directory (if you want, I can change path)","Yes, it is not essential service. I closed pull request and create patch version.
If packager need this service you can use our patch. Merging with original source is not vital.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,387,2020-12-02T17:29:02Z,2020-12-04T03:50:15Z,2020-12-04T03:53:57Z,CLOSED,False,48,2,2,https://github.com/sulincix,Backlight state save and restore function added. (openrc service),1,[],https://github.com/OpenRC/openrc/pull/387,https://github.com/sulincix,5,https://github.com/OpenRC/openrc/pull/387#issuecomment-738548670,"https://www.freedesktop.org/software/systemd/man/systemd-backlight@.service.html
I added service that same as this. We can save backlight state during shutdown and restore state during boot.
I save current state in /var/cache/backlight directory (if you want, I can change path)","diff --git a/init.d/Makefile b/init.d/Makefile
index c97aeda9..e87b2be9 100644
--- a/init.d/Makefile
+++ b/init.d/Makefile
@@ -21,8 +21,8 @@ SRCS-FreeBSD=	hostid.in modules.in moused.in newsyslog.in pf.in rarpd.in \
 SRCS-FreeBSD+=	adjkerntz.in devd.in dumpon.in encswap.in ipfw.in \
 		mixer.in nscd.in powerd.in syscons.in
 
-SRCS-Linux=	agetty.in binfmt.in devfs.in cgroups.in dmesg.in hwclock.in \
-	consolefont.in keymaps.in killprocs.in modules.in \
+SRCS-Linux=	agetty.in backlight.in binfmt.in devfs.in cgroups.in dmesg.in \
+        hwclock.in consolefont.in keymaps.in killprocs.in modules.in \
 	mount-ro.in mtab.in numlock.in procfs.in net-online.in save-keymaps.in \
 	save-termencoding.in sysfs.in termencoding.in
 
diff --git a/init.d/backlight.in b/init.d/backlight.in
new file mode 100644
index 00000000..6c3e733d
--- /dev/null
+++ b/init.d/backlight.in
@@ -0,0 +1,46 @@
+#!@SBINDIR@/openrc-run
+# Copyright (c) 2007-2015 The OpenRC Authors.
+# See the Authors file at the top-level directory of this distribution and
+# https://github.com/OpenRC/openrc/blob/master/AUTHORS
+#
+# This file is part of OpenRC. It is subject to the license terms in
+# the LICENSE file found in the top-level directory of this
+# distribution and at https://github.com/OpenRC/openrc/blob/master/LICENSE
+# This file may not be copied, modified, propagated, or distributed
+# except according to the terms contained in the LICENSE file.
+
+description=""Save & restore backlight state.""
+
+depend()
+{
+	after *
+}
+
+start()
+{
+	if [ ! -d /var/cache/backlight ] ; then
+		mkdir -p /var/cache/backlight
+	fi
+	for device in $(ls /sys/class/backlight/) ; do
+		if [ -f /var/cache/backlight/${device} ] ; then
+			cat /var/cache/backlight/${device} > /sys/class/backlight/${device}/brightness
+		fi
+	done
+	return 0
+}
+
+stop()
+{
+	if [ ! -d /var/cache/backlight ] ; then
+		mkdir -p /var/cache/backlight
+	fi
+	for device in $(ls /sys/class/backlight/) ; do
+		cat /sys/class/backlight/${device}/brightness > /var/cache/backlight/${device}
+	done
+	return 0
+}
+restart(){
+	stop
+	start
+}
+",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,388,2020-12-05T01:26:03Z,2020-12-20T12:54:34Z,2020-12-20T12:54:34Z,MERGED,True,2,2,1,https://github.com/craftyguy,user-guide: clarify note for Runlevels/rc-update usage,1,[],https://github.com/OpenRC/openrc/pull/388,https://github.com/craftyguy,1,https://github.com/OpenRC/openrc/pull/388,"I found the original note a little confusing, since using rc-update will
add it to a runlevel so it is auto-started when the system reaches
that runlevel again, but I don't think that was the intended meaning of
'auto-start', so hopefully this makes it a little more clear.","I found the original note a little confusing, since using rc-update will
add it to a runlevel so it is auto-started when the system reaches
that runlevel again, but I don't think that was the intended meaning of
'auto-start', so hopefully this makes it a little more clear.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,389,2020-12-05T12:27:38Z,2020-12-05T18:42:25Z,2020-12-05T18:42:25Z,CLOSED,False,1,1,1,https://github.com/goldenmean58,Fix a typo in user-guide.md,1,[],https://github.com/OpenRC/openrc/pull/389,https://github.com/goldenmean58,1,https://github.com/OpenRC/openrc/pull/389,fix a typo,fix a typo,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,390,2020-12-07T03:50:23Z,,2021-12-31T00:45:52Z,OPEN,False,33,25,29,https://github.com/ismell,Add support for running as an Illumos LX zone,1,[],https://github.com/OpenRC/openrc/pull/390,https://github.com/ismell,1,https://github.com/OpenRC/openrc/pull/390,"These changes allow OpenRC to boot as an Illumos/SmartOS LX zone.
This was mostly a copy/paste of LXC.
Signed-off-by: Raul E Rangel ismell@ismell.org","These changes allow OpenRC to boot as an Illumos/SmartOS LX zone.
This was mostly a copy/paste of LXC.
Signed-off-by: Raul E Rangel ismell@ismell.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,390,2020-12-07T03:50:23Z,,2021-12-31T00:45:52Z,OPEN,False,33,25,29,https://github.com/ismell,Add support for running as an Illumos LX zone,1,[],https://github.com/OpenRC/openrc/pull/390,https://github.com/ismell,2,https://github.com/OpenRC/openrc/pull/390#issuecomment-744465797,"These changes allow OpenRC to boot as an Illumos/SmartOS LX zone.
This was mostly a copy/paste of LXC.
Signed-off-by: Raul E Rangel ismell@ismell.org",Here are the steps to produce a SmartOS image: https://github.com/ismell/gentoo-lx-brand-image-builder,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,390,2020-12-07T03:50:23Z,,2021-12-31T00:45:52Z,OPEN,False,33,25,29,https://github.com/ismell,Add support for running as an Illumos LX zone,1,[],https://github.com/OpenRC/openrc/pull/390,https://github.com/ismell,3,https://github.com/OpenRC/openrc/pull/390#issuecomment-840634288,"These changes allow OpenRC to boot as an Illumos/SmartOS LX zone.
This was mostly a copy/paste of LXC.
Signed-off-by: Raul E Rangel ismell@ismell.org","Hrmm, looks like there is now a conflict... I will rebase this change.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,391,2020-12-13T20:02:54Z,2020-12-22T18:55:20Z,2021-10-11T17:03:35Z,CLOSED,False,1,1,1,https://github.com/gportay,net-online: fix process of symlinks in sysfs,1,[],https://github.com/OpenRC/openrc/pull/391,https://github.com/gportay,1,https://github.com/OpenRC/openrc/pull/391,"The test [ -h ""${ifname}"" ] && continue skips the symlinks while it is
the opposite that is the expected: ignoring files that are not symlinks.
Fixes commit f42ec82.","The test [ -h ""${ifname}"" ] && continue skips the symlinks while it is
the opposite that is the expected: ignoring files that are not symlinks.
Fixes commit f42ec82.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,391,2020-12-13T20:02:54Z,2020-12-22T18:55:20Z,2021-10-11T17:03:35Z,CLOSED,False,1,1,1,https://github.com/gportay,net-online: fix process of symlinks in sysfs,1,[],https://github.com/OpenRC/openrc/pull/391,https://github.com/gportay,2,https://github.com/OpenRC/openrc/pull/391#issuecomment-744060624,"The test [ -h ""${ifname}"" ] && continue skips the symlinks while it is
the opposite that is the expected: ignoring files that are not symlinks.
Fixes commit f42ec82.","Unless I am mistaken, we are expecting the exact opposite.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,391,2020-12-13T20:02:54Z,2020-12-22T18:55:20Z,2021-10-11T17:03:35Z,CLOSED,False,1,1,1,https://github.com/gportay,net-online: fix process of symlinks in sysfs,1,[],https://github.com/OpenRC/openrc/pull/391,https://github.com/E5ten,3,https://github.com/OpenRC/openrc/pull/391#issuecomment-744062567,"The test [ -h ""${ifname}"" ] && continue skips the symlinks while it is
the opposite that is the expected: ignoring files that are not symlinks.
Fixes commit f42ec82.",Would probably be nicer to change the && to || instead of having an inverted test,True,{'THUMBS_UP': ['https://github.com/gportay']}
OpenRC/openrc,https://github.com/OpenRC/openrc,391,2020-12-13T20:02:54Z,2020-12-22T18:55:20Z,2021-10-11T17:03:35Z,CLOSED,False,1,1,1,https://github.com/gportay,net-online: fix process of symlinks in sysfs,1,[],https://github.com/OpenRC/openrc/pull/391,https://github.com/gportay,4,https://github.com/OpenRC/openrc/pull/391#issuecomment-745610579,"The test [ -h ""${ifname}"" ] && continue skips the symlinks while it is
the opposite that is the expected: ignoring files that are not symlinks.
Fixes commit f42ec82.","Oops, I am sorry for that noise.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,391,2020-12-13T20:02:54Z,2020-12-22T18:55:20Z,2021-10-11T17:03:35Z,CLOSED,False,1,1,1,https://github.com/gportay,net-online: fix process of symlinks in sysfs,1,[],https://github.com/OpenRC/openrc/pull/391,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/391#issuecomment-898723313,"The test [ -h ""${ifname}"" ] && continue skips the symlinks while it is
the opposite that is the expected: ignoring files that are not symlinks.
Fixes commit f42ec82.",Fixes #316 and fixes #317,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,394,2020-12-23T21:21:26Z,2021-03-18T22:12:44Z,2021-03-21T01:32:52Z,CLOSED,False,1,1,1,None,Changed /etc to /etc/conf.d for pf.conf location.,1,[],https://github.com/OpenRC/openrc/pull/394,None,1,https://github.com/OpenRC/openrc/pull/394,Changed /etc to /etc/conf.d for pf.conf location. This complies with OpenRC conventional purpose for /etc/conf.d directory.,Changed /etc to /etc/conf.d for pf.conf location. This complies with OpenRC conventional purpose for /etc/conf.d directory.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,394,2020-12-23T21:21:26Z,2021-03-18T22:12:44Z,2021-03-21T01:32:52Z,CLOSED,False,1,1,1,None,Changed /etc to /etc/conf.d for pf.conf location.,1,[],https://github.com/OpenRC/openrc/pull/394,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/394#issuecomment-802341547,Changed /etc to /etc/conf.d for pf.conf location. This complies with OpenRC conventional purpose for /etc/conf.d directory.,"/etc/conf.d/pf.conf is not the same file as /etc/pf.conf.
The version in /etc/conf.d is for setting the variables used in /etc/init.d/pf, -- pf_rules and pf_args.
/etc/pf.conf is the default setting for pf_rules, which is the default packet filter rules file.
Because of that, it doesn't make sense to move /etc/pf.conf to /etc/conf.d
Please let me know if you need more information.
Thanks.
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/matthew-sharp,1,https://github.com/OpenRC/openrc/pull/397,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/matthew-sharp,2,https://github.com/OpenRC/openrc/pull/397#issuecomment-750791403,,I just realised this adds a bashism. Is this project bash specific or do I need to replace this with a portable implementation?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/E5ten,3,https://github.com/OpenRC/openrc/pull/397#issuecomment-751277115,,As far as I know the only bashism that the project allows is local so I think this would need to be changed to be POSIX.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/matthew-sharp,4,https://github.com/OpenRC/openrc/pull/397#issuecomment-751521639,,I've replaced it with a POSIX version. Not as clean though.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/397#issuecomment-785419450,,"Does it make sense to replace subpid=$(exec sh -c 'echo ""$PPID""') with subpid=$$?
I played with this on the command line and they both seem to return the same value.
Please correct me if I am wrong.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/williamh,6,https://github.com/OpenRC/openrc/pull/397#issuecomment-785425014,,"Or, can we get rid of the subpid variable altogether and use $PPID directly in the while loop?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/matthew-sharp,7,https://github.com/OpenRC/openrc/pull/397#issuecomment-785430585,,"Regarding your first comment, that's true most of the time. However because cgroup_get_pids is called via process substitution, $$ refers to the main shell and not the subshell  that cgroup_get_pids is running in. If $$ and $(exec sh -c 'echo ""$PPID""') were the same, then this bug would not exist in the first place (also $BASHPID would have no reason to exist).
Regarding  your second comment, I believe that would be possible (would need to test). I just thought it better to start one subshell and capture the PID rather than do that once per iteration of the loop.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/matthew-sharp,8,https://github.com/OpenRC/openrc/pull/397#issuecomment-785432944,,"Here's a small script to illustrate the difference.
`
#!/bin/bash
echo -n 'Parent Shell $$: '
echo $$
echo -n 'Subshell $$: '
subdol=$(echo $$)
echo $subdol
echo -n 'Subshell $PPID: '
subppid=$( echo $(exec sh -c 'echo ""$PPID""' ))
echo $subppid
`",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/williamh,9,https://github.com/OpenRC/openrc/pull/397#issuecomment-785452816,,"I'm wondering if I should avoid process substitution in this situation.
I'm going to do a quick rewrite on another pr, would you be willing to check it out?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,397,2020-12-24T07:37:30Z,2021-03-01T20:22:34Z,2021-03-01T20:22:34Z,CLOSED,False,3,2,1,https://github.com/matthew-sharp,Fixes #396 cgroup_get_pids() do not return pid of subshell,2,[],https://github.com/OpenRC/openrc/pull/397,https://github.com/matthew-sharp,10,https://github.com/OpenRC/openrc/pull/397#issuecomment-787529055,,"I had a look at your PR, and I think it's the better fix.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,398,2020-12-26T05:42:59Z,2021-02-22T17:57:17Z,2021-02-22T17:57:17Z,CLOSED,False,14,0,1,https://github.com/RinCat,Support docker and lxc stop,1,[],https://github.com/OpenRC/openrc/pull/398,https://github.com/RinCat,1,https://github.com/OpenRC/openrc/pull/398,"Support docker stop signal SIGTERM. https://docs.docker.com/engine/reference/commandline/stop/
Support LXC stop signal SIGPWR. https://linuxcontainers.org/lxc/manpages/man1/lxc-stop.1.html","Support docker stop signal SIGTERM. https://docs.docker.com/engine/reference/commandline/stop/
Support LXC stop signal SIGPWR. https://linuxcontainers.org/lxc/manpages/man1/lxc-stop.1.html",True,{'HEART': ['https://github.com/jensk']}
OpenRC/openrc,https://github.com/OpenRC/openrc,401,2021-02-02T10:06:54Z,2021-02-02T15:04:58Z,2021-02-02T15:05:03Z,MERGED,True,1,1,1,https://github.com/sqozz,start-stop-daemon: fix typo in manpage,1,[],https://github.com/OpenRC/openrc/pull/401,https://github.com/sqozz,1,https://github.com/OpenRC/openrc/pull/401,"Until now there was a small typo in the description of -m, --make-pidfile regarding the background option:
     -m, --make-pidfile
             Saves the pid of the daemon in the file specified by the -p, --pidfile option. Only useful when used with daemons that run
             in the foreground and forced into the background with the --b, --background option.

while in reality the abbreviation of --background is -b and not --b. This small PR fixes that :)","Until now there was a small typo in the description of -m, --make-pidfile regarding the background option:
     -m, --make-pidfile
             Saves the pid of the daemon in the file specified by the -p, --pidfile option. Only useful when used with daemons that run
             in the foreground and forced into the background with the --b, --background option.

while in reality the abbreviation of --background is -b and not --b. This small PR fixes that :)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,401,2021-02-02T10:06:54Z,2021-02-02T15:04:58Z,2021-02-02T15:05:03Z,MERGED,True,1,1,1,https://github.com/sqozz,start-stop-daemon: fix typo in manpage,1,[],https://github.com/OpenRC/openrc/pull/401,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/401#issuecomment-771698682,"Until now there was a small typo in the description of -m, --make-pidfile regarding the background option:
     -m, --make-pidfile
             Saves the pid of the daemon in the file specified by the -p, --pidfile option. Only useful when used with daemons that run
             in the foreground and forced into the background with the --b, --background option.

while in reality the abbreviation of --background is -b and not --b. This small PR fixes that :)",thx!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,409,2021-02-25T00:16:08Z,2021-03-01T20:22:34Z,2021-08-12T23:39:01Z,MERGED,True,28,17,1,https://github.com/williamh,rc-cgroup.sh: avoid process substitution for cgroup_get_pids,1,[],https://github.com/OpenRC/openrc/pull/409,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/409,"This should make cgroup_cleanup work successfully since cgroup_get_pids
no longer uses a subshell.
This fixes #396.","This should make cgroup_cleanup work successfully since cgroup_get_pids
no longer uses a subshell.
This fixes #396.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,409,2021-02-25T00:16:08Z,2021-03-01T20:22:34Z,2021-08-12T23:39:01Z,MERGED,True,28,17,1,https://github.com/williamh,rc-cgroup.sh: avoid process substitution for cgroup_get_pids,1,[],https://github.com/OpenRC/openrc/pull/409,https://github.com/matthew-sharp,2,https://github.com/OpenRC/openrc/pull/409#issuecomment-787528909,"This should make cgroup_cleanup work successfully since cgroup_get_pids
no longer uses a subshell.
This fixes #396.","I think this a better solution than my PR, trying to track PIDs when there are subshells being started is messy. Normally I wouldn't be a fan of calling a function to set a global variable, but I think it's justified in this case.
One potential suggestion is should there be a comment explaining the rationale for not using subshells?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,412,2021-03-13T20:44:46Z,2021-03-18T21:51:05Z,2021-03-18T21:51:05Z,CLOSED,False,1,1,1,https://github.com/ndren,Wrap 'make install' in backticks,1,[],https://github.com/OpenRC/openrc/pull/412,https://github.com/ndren,1,https://github.com/OpenRC/openrc/pull/412,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,413,2021-03-19T00:45:06Z,2021-03-19T15:38:36Z,2021-03-19T15:38:36Z,CLOSED,False,2,0,1,https://github.com/Whissi,numlock: Don't disable numlock on shutdown,1,[],https://github.com/OpenRC/openrc/pull/413,https://github.com/Whissi,1,https://github.com/OpenRC/openrc/pull/413,"When dealing with remote consoles, a shutdown could disable
host's numlock which is not desired.
Signed-off-by: Thomas Deutschmann whissi@whissi.de","When dealing with remote consoles, a shutdown could disable
host's numlock which is not desired.
Signed-off-by: Thomas Deutschmann whissi@whissi.de",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,417,2021-04-03T21:26:16Z,2021-12-21T00:06:32Z,2021-12-21T00:07:48Z,CLOSED,False,1,0,1,https://github.com/DocMAX,Ping loop finishing too early,1,[],https://github.com/OpenRC/openrc/pull/417,https://github.com/DocMAX,1,https://github.com/OpenRC/openrc/pull/417,Ping loop finishing too early. Adding sleep to loop.,Ping loop finishing too early. Adding sleep to loop.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,417,2021-04-03T21:26:16Z,2021-12-21T00:06:32Z,2021-12-21T00:07:48Z,CLOSED,False,1,0,1,https://github.com/DocMAX,Ping loop finishing too early,1,[],https://github.com/OpenRC/openrc/pull/417,https://github.com/thesamesam,2,https://github.com/OpenRC/openrc/pull/417#issuecomment-998357525,Ping loop finishing too early. Adding sleep to loop.,Should be fixed by e21b01b.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,417,2021-04-03T21:26:16Z,2021-12-21T00:06:32Z,2021-12-21T00:07:48Z,CLOSED,False,1,0,1,https://github.com/DocMAX,Ping loop finishing too early,1,[],https://github.com/OpenRC/openrc/pull/417,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/417#issuecomment-998360299,Ping loop finishing too early. Adding sleep to loop.,See #487.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,417,2021-04-03T21:26:16Z,2021-12-21T00:06:32Z,2021-12-21T00:07:48Z,CLOSED,False,1,0,1,https://github.com/DocMAX,Ping loop finishing too early,1,[],https://github.com/OpenRC/openrc/pull/417,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/417#issuecomment-998360857,Ping loop finishing too early. Adding sleep to loop.,"Correction, see #480.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,419,2021-05-12T23:17:18Z,2021-05-12T23:21:55Z,2021-05-12T23:34:29Z,CLOSED,False,3,3,1,https://github.com/Polynomial-C,init.d/modules.in: Avoid loading modules twice in Linux with dash shell,1,[],https://github.com/OpenRC/openrc/pull/419,https://github.com/Polynomial-C,1,https://github.com/OpenRC/openrc/pull/419,"Since commit 6b475ab, openrc tries to load
modules twice which have been defined in /etc/conf.d/modules via modules=
variable when /bin/sh points to dash shell.
The reason is that when the ""modules-load"" service was merged into ""modules""
service, the ""modules"" variable name got used in both, load_modules()
function and in Linux_modules() function which both get called when modules
service is started. Although ""modules"" variable is marked as local in
load_modules(), dash simply ignores this.
Avoid the issue by renaming ""modules"" variable to ""_modules"" in
load_modules() function.
Signed-off-by: Lars Wendler polynomial-c@gentoo.org","Since commit 6b475ab, openrc tries to load
modules twice which have been defined in /etc/conf.d/modules via modules=
variable when /bin/sh points to dash shell.
The reason is that when the ""modules-load"" service was merged into ""modules""
service, the ""modules"" variable name got used in both, load_modules()
function and in Linux_modules() function which both get called when modules
service is started. Although ""modules"" variable is marked as local in
load_modules(), dash simply ignores this.
Avoid the issue by renaming ""modules"" variable to ""_modules"" in
load_modules() function.
Signed-off-by: Lars Wendler polynomial-c@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,422,2021-05-21T02:41:53Z,,2022-03-16T14:13:11Z,OPEN,False,9,1,1,https://github.com/ForestJohnson,link to the section of the docs explaining env vars,2,[],https://github.com/OpenRC/openrc/pull/422,https://github.com/ForestJohnson,1,https://github.com/OpenRC/openrc/pull/422,"This way if someone lands on this page and searches for ""env"" they will not be sorely disappointed.
I have no idea if what I wrote is correct or not, I just know that this markdown document needs to contain the characters ""env"" or the word ""environment"".
Fixes #420","This way if someone lands on this page and searches for ""env"" they will not be sorely disappointed.
I have no idea if what I wrote is correct or not, I just know that this markdown document needs to contain the characters ""env"" or the word ""environment"".
Fixes #420",True,{'THUMBS_UP': ['https://github.com/jewertow']}
OpenRC/openrc,https://github.com/OpenRC/openrc,422,2021-05-21T02:41:53Z,,2022-03-16T14:13:11Z,OPEN,False,9,1,1,https://github.com/ForestJohnson,link to the section of the docs explaining env vars,2,[],https://github.com/OpenRC/openrc/pull/422,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/422#issuecomment-898691917,"This way if someone lands on this page and searches for ""env"" they will not be sorely disappointed.
I have no idea if what I wrote is correct or not, I just know that this markdown document needs to contain the characters ""env"" or the word ""environment"".
Fixes #420","The values typically set in conf.d/* are not environment variables; they are just shell variables that affect the startup script.
If you want to set environment variables for a daemon you are running with start-stop-daemon, you should set them in start_stop_daemon_args with the --env switch.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,422,2021-05-21T02:41:53Z,,2022-03-16T14:13:11Z,OPEN,False,9,1,1,https://github.com/ForestJohnson,link to the section of the docs explaining env vars,2,[],https://github.com/OpenRC/openrc/pull/422,https://github.com/ForestJohnson,3,https://github.com/OpenRC/openrc/pull/422#issuecomment-898767626,"This way if someone lands on this page and searches for ""env"" they will not be sorely disappointed.
I have no idea if what I wrote is correct or not, I just know that this markdown document needs to contain the characters ""env"" or the word ""environment"".
Fixes #420","terminology issue, when I said ""environment variables""   I meant ""shell variables that affect the startup script""",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,422,2021-05-21T02:41:53Z,,2022-03-16T14:13:11Z,OPEN,False,9,1,1,https://github.com/ForestJohnson,link to the section of the docs explaining env vars,2,[],https://github.com/OpenRC/openrc/pull/422,https://github.com/thesamesam,4,https://github.com/OpenRC/openrc/pull/422#issuecomment-999298327,"This way if someone lands on this page and searches for ""env"" they will not be sorely disappointed.
I have no idea if what I wrote is correct or not, I just know that this markdown document needs to contain the characters ""env"" or the word ""environment"".
Fixes #420",Would you mind fixing the commit too?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,422,2021-05-21T02:41:53Z,,2022-03-16T14:13:11Z,OPEN,False,9,1,1,https://github.com/ForestJohnson,link to the section of the docs explaining env vars,2,[],https://github.com/OpenRC/openrc/pull/422,https://github.com/ForestJohnson,5,https://github.com/OpenRC/openrc/pull/422#issuecomment-999819768,"This way if someone lands on this page and searches for ""env"" they will not be sorely disappointed.
I have no idea if what I wrote is correct or not, I just know that this markdown document needs to contain the characters ""env"" or the word ""environment"".
Fixes #420","ok i updated it, point is the 3 letters ""env"" need to be present in that file because thats what folks are gonna search for, at least that's what I would expect where I'm from",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,422,2021-05-21T02:41:53Z,,2022-03-16T14:13:11Z,OPEN,False,9,1,1,https://github.com/ForestJohnson,link to the section of the docs explaining env vars,2,[],https://github.com/OpenRC/openrc/pull/422,https://github.com/sharky98,6,https://github.com/OpenRC/openrc/pull/422#issuecomment-1069175426,"This way if someone lands on this page and searches for ""env"" they will not be sorely disappointed.
I have no idea if what I wrote is correct or not, I just know that this markdown document needs to contain the characters ""env"" or the word ""environment"".
Fixes #420",This is what I have been struggling for the last two hours. I was not able to figure out why my /etc/profile.d/something.sh environment variables where not accessible when starting my custom service. Then from a guide from Gentoo I first figured out about the /etc/conf.d/ and from that commit I understood that my service script does not have access to these conf.d variables but I must pass them as args.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,1,https://github.com/OpenRC/openrc/pull/423,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.",True,"{'THUMBS_UP': ['https://github.com/YangKeao', 'https://github.com/LinkTed', 'https://github.com/s-hamann', 'https://github.com/jirutka', 'https://github.com/dex6'], 'HEART': ['https://github.com/YangKeao']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,2,https://github.com/OpenRC/openrc/pull/423#issuecomment-860786645,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","I did not know that there are cap_iab(3) functions, so I change the implementations. Now, it is much simpler.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,3,https://github.com/OpenRC/openrc/pull/423#issuecomment-861635261,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","I added capabilities support for the supervised daemon, but I did not know how to test it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/lanodan,4,https://github.com/OpenRC/openrc/pull/423#issuecomment-877385209,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","I added capabilities support for the supervised daemon, but I did not how to test it.

One way you can test it is to run a service binding to <1024 as non-root (command_user) and adding the CAP_NET_BIND_SERVICE capability to it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,5,https://github.com/OpenRC/openrc/pull/423#issuecomment-877399850,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","I test it by calling the  supervise-daemon directly as root:
RC_SVCNAME=test ./supervise-daemon test --start --capabilities ^cap_chown,^cap_net_bind_service /usr/bin/sleep 30
It worked:
$ cat /proc/15521/status
[...]
SigPnd:	0000000000000000
ShdPnd:	0000000000000000
SigBlk:	0000000000000000
SigIgn:	0000000000000000
SigCgt:	0000000000000000
CapInh:	0000000000000401
CapPrm:	000001ffffffffff
CapEff:	000001ffffffffff
CapBnd:	000001ffffffffff
CapAmb:	0000000000000401
[...]",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,6,https://github.com/OpenRC/openrc/pull/423#issuecomment-997270157,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.",Can we merge this?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/jirutka,7,https://github.com/OpenRC/openrc/pull/423#issuecomment-997270773,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","@williamh, this is a very useful feature, can you please do a code review and consider merging it?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,8,https://github.com/OpenRC/openrc/pull/423#issuecomment-997281536,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.",I added the meson support.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,9,https://github.com/OpenRC/openrc/pull/423#issuecomment-997422916,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.",I resolved all suggestions. Next round. 😄,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,10,https://github.com/OpenRC/openrc/pull/423#issuecomment-998310446,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.",@vapier Can you do a review again?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,11,https://github.com/OpenRC/openrc/pull/423#issuecomment-998327724,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","sorry, i wrote this comment yesterday, but looks like it wasn't actually published. the GH phone app is not that good :/.

Done",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,12,https://github.com/OpenRC/openrc/pull/423#issuecomment-998655508,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","i'll give it a day or two to see if William wants to chime in before merging

Okay, I will wait then. 😄",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/LinkTed,13,https://github.com/OpenRC/openrc/pull/423#issuecomment-1000528353,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","i'll give it a day or two to see if William wants to chime in before merging

Should we wait longer?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,423,2021-06-13T18:08:32Z,2021-12-23T22:29:10Z,2021-12-23T22:29:25Z,MERGED,True,118,7,14,https://github.com/LinkTed,capabilities: Add support for Linux capabilities(7),1,[],https://github.com/OpenRC/openrc/pull/423,https://github.com/vapier,14,https://github.com/OpenRC/openrc/pull/423#issuecomment-1000548456,"This adds capabilities for start-stop-daemon and supervise-daemon by adding --capabilities option. As a result, the user can specify the ambient, inheritable and bounding set by define capabilities in the service script.
This fixes #314.","i had the thread snoozed for tonight
thanks for the improvements!",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,427,2021-07-04T11:30:44Z,2021-08-13T18:40:58Z,2021-08-13T18:40:58Z,CLOSED,False,4,3,1,https://github.com/swegener,on_ac_power: support multiple power_supply devices in sysfs,1,[],https://github.com/OpenRC/openrc/pull/427,https://github.com/swegener,1,https://github.com/OpenRC/openrc/pull/427,"Newer devices have multiple power_supply devices in sysfs:
$ grep ^ /sys/class/power_supply/*/type
/sys/class/power_supply/AC/type:Mains
/sys/class/power_supply/BAT0/type:Battery
/sys/class/power_supply/ucsi-source-psy-USBC000:001/type:USB
/sys/class/power_supply/ucsi-source-psy-USBC000:002/type:USB

There are two ""USB"" Type-C ports than can supply power and both are
aggregated into the ""Mains"" power supply by the firmware. The ""Battery""
also counts as a power supply, but is missing the online attribute.
The -f check with a wildcard pattern results in an error, when multiple
devices are present:
/lib/rc/bin/on_ac_power: line 21: [: too many arguments

When the power_supply class is registered, check for a ""Mains"" device.
Signed-off-by: Sven Wegener sven.wegener@stealer.net","Newer devices have multiple power_supply devices in sysfs:
$ grep ^ /sys/class/power_supply/*/type
/sys/class/power_supply/AC/type:Mains
/sys/class/power_supply/BAT0/type:Battery
/sys/class/power_supply/ucsi-source-psy-USBC000:001/type:USB
/sys/class/power_supply/ucsi-source-psy-USBC000:002/type:USB

There are two ""USB"" Type-C ports than can supply power and both are
aggregated into the ""Mains"" power supply by the firmware. The ""Battery""
also counts as a power supply, but is missing the online attribute.
The -f check with a wildcard pattern results in an error, when multiple
devices are present:
/lib/rc/bin/on_ac_power: line 21: [: too many arguments

When the power_supply class is registered, check for a ""Mains"" device.
Signed-off-by: Sven Wegener sven.wegener@stealer.net",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/floppym,1,https://github.com/OpenRC/openrc/pull/431,Bug: https://bugs.gentoo.org/803536,Bug: https://bugs.gentoo.org/803536,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/431#issuecomment-897960747,Bug: https://bugs.gentoo.org/803536,"but like, why ?  it seems like an error to run init """".",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/floppym,3,https://github.com/OpenRC/openrc/pull/431#issuecomment-897963918,Bug: https://bugs.gentoo.org/803536,"but like, why ? it seems like an error to run init """".

I agree, but it was requested in https://bugs.gentoo.org/803536#c4.
It's worth noting that sysvinit just ignores any argument it doesn't recognize, including an empty string.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/floppym,4,https://github.com/OpenRC/openrc/pull/431#issuecomment-897966177,Bug: https://bugs.gentoo.org/803536,"openrc-init behaves a bit differently in that it treats argv[1] as the default runlevel, and performs no validation.
So maybe a better solution would be to check if the specified runlevel exists instead of checking for an empty string specifically.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/431#issuecomment-897968131,Bug: https://bugs.gentoo.org/803536,"I'll work on this, but I think a better solution even would be to fall back to the default runlevel if the passed in runlevel doesn't exist.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/williamh,6,https://github.com/OpenRC/openrc/pull/431#issuecomment-897976996,Bug: https://bugs.gentoo.org/803536,@vapier  @floppym  What do you think?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/vapier,7,https://github.com/OpenRC/openrc/pull/431#issuecomment-898252625,Bug: https://bugs.gentoo.org/803536,"I agree, but it was requested in https://bugs.gentoo.org/803536#c4.

that doesn't make it a good idea ... people request all sorts of things.
commit messages should also have complete explanation & logic in them rather than a loose link to a website.

I'll work on this, but I think a better solution even would be to fall back to the default runlevel if the passed in runlevel doesn't exist.

if we're running as pid 1, that seems reasonable -- emit a warning, and fallback to the default.
if we aren't running as pid 1, we should show an error & exit non-zero.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/floppym,8,https://github.com/OpenRC/openrc/pull/431#issuecomment-898492709,Bug: https://bugs.gentoo.org/803536,"commit messages should also have complete explanation & logic in them rather than a loose link to a website.

The reason for the change seems obvious to me. If William wanted some further explanation, I assume he would have asked for it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/floppym,9,https://github.com/OpenRC/openrc/pull/431#issuecomment-898497808,Bug: https://bugs.gentoo.org/803536,"that doesn't make it a good idea ... people request all sorts of things.

Let me rephrase: I agree it is an error to invoke openrc-init with an empty string as the first argument. However the request to guard against such a user error also seems reasonable to me.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,431,2021-07-23T19:29:32Z,2021-08-12T20:07:09Z,2021-08-13T14:32:27Z,CLOSED,False,1,1,1,https://github.com/floppym,openrc-init: ignore an empty string in argv[1],1,[],https://github.com/OpenRC/openrc/pull/431,https://github.com/williamh,10,https://github.com/OpenRC/openrc/pull/431#issuecomment-898499828,Bug: https://bugs.gentoo.org/803536,"@floppym  I need to check rc_runlevel_exists. The bug you linked says that an empty string passed to that function returns true. If that's the case, that seems to be the underlying issue.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,433,2021-07-29T17:05:35Z,2021-08-13T18:14:41Z,2021-08-13T18:14:41Z,CLOSED,False,1,1,1,https://github.com/Hello71,conf.d/hostname: clarify hostname variable usage,1,[],https://github.com/OpenRC/openrc/pull/433,https://github.com/Hello71,1,https://github.com/OpenRC/openrc/pull/433,https://gitlab.alpinelinux.org/alpine/aports/-/issues/9744,https://gitlab.alpinelinux.org/alpine/aports/-/issues/9744,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,434,2021-08-01T17:53:07Z,2021-08-13T17:41:13Z,2021-08-13T17:41:13Z,CLOSED,False,1,3,2,https://github.com/oplexius,"Remove references to ""experimental"".",2,[],https://github.com/OpenRC/openrc/pull/434,https://github.com/oplexius,1,https://github.com/OpenRC/openrc/pull/434,"I believe supervise-daemon may now no longer be considered ""in early development"" or ""experimental"".
Remove reference to ""experimental"" supervise-daemon from openrc-run man page (man/openrc-run.8).
Remove ""experimental"" from src/rc/supervise-daemon.c comment.","I believe supervise-daemon may now no longer be considered ""in early development"" or ""experimental"".
Remove reference to ""experimental"" supervise-daemon from openrc-run man page (man/openrc-run.8).
Remove ""experimental"" from src/rc/supervise-daemon.c comment.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,1,https://github.com/OpenRC/openrc/pull/435,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/435#issuecomment-895750382,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","should send the ionice change as a sep PR so we can get that in independently (i know it's a sep commit, but GH doesn't make it easy to merge PR's partially)
imo we should avoid short options unless there's a commonish meaning behind it.  for example, -h is very often short for --help, so that's OK.  but i don't know that anyone uses -O for --oom-score-adj.  do you have references to any prior art here ?  a ton of short inscrutable short options makes for command lines & init scripts that need a decoder ring to understand.  saving ~10 bytes now wastes everyone's time later.  i can guarantee no one will ever remember the meanings of every single ssd short option.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,3,https://github.com/OpenRC/openrc/pull/435#issuecomment-896117324,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","Fine by me. I hate short options, especially in scripts where their meaning is never clear when I go back to look at the script I wrote even a week later. I only defined a short option because every other option had a short form. If you're happy to break that pattern, I'm happy to remove -O.
As for splitting into two PRs, how should I do that? The PR to add the --oom-score-adj option will be dependent on the PR to fill in the SSD_IONICELEVEL environment variable support. Should the second PR target the branch of the first PR rather than targeting master?
Regarding merging, you're aware that you can merge PRs using the command line, right? GitHub will pick up the merge and reflect it properly on the web. I think if you merge only the first commit of this PR (which you could/should do as a FF, in my opinion), then GitHub will leave this PR open.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/435#issuecomment-896126226,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","Hi @whitslack, Yes, both prs should target master and one will have to be rebased after the other is merged.
I do know that you can merge on the command line, but you get the full pr still when you do that.
I agree also with @vapier that we should move away from short options. If I have my way I would deprecate short options where possible.
I think that is going to take rewriting the command line parser a bit since we use getopt_long() which seems to require both long and short options unless I'm missing something.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,5,https://github.com/OpenRC/openrc/pull/435#issuecomment-896168437,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","I do know that you can merge on the command line, but you get the full pr still when you do that.

@williamh: I'm confused. You don't have to merge from the tip of the PR branch.
$ git fetch origin
$ git checkout origin/master
$ git fetch origin pull/435/head
$ git merge --no-ff FETCH_HEAD^{/SSD_IONICELEVEL}
$ git push origin -- @:master

What are you saying GitHub does in that case? Admittedly I've never done it, but my expectation is that the PR would be left open and would remain mergeable with no conflicts.


I think that is going to take rewriting the command line parser a bit since we use getopt_long() which seems to require both long and short options unless I'm missing something.

No, that's not necessary. You just leave the short option out of the optstring and choose some other value for the long option's val. The usage printer in _usage.c omits printing a short option if val is not a printable character.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/vapier,6,https://github.com/OpenRC/openrc/pull/435#issuecomment-896195572,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","i'm not anti all short options, just using short options that are not common and/or obvious.
getopt_long() does not require short options.  the val is simply what getopt_long returns so you can switch on it.  the only short options are what is passed in optstring.  for long-only options, we can simply use values greater than 127 to avoid conflict with the ASCII space.  personally i've started using 0x1000 as the long-only base so it's less confusing to readers.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,7,https://github.com/OpenRC/openrc/pull/435#issuecomment-896206496,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","@vapier: I used val=1 for the long-only --oom-score-adj option. Would you prefer 0x1000?
Note that 0x1000 is going to make your switch table much sparser, which may not be as good for code size.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/vapier,8,https://github.com/OpenRC/openrc/pull/435#issuecomment-896212379,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","def do not use values <127.  it's confusing to read, will be even more confusing once we exhaust the limited non-printable ASCII space, and can be easy to introduce collisions if you're not careful (since they're all ints, 32 and ' ' will be the same, etc...).
i would actually look at codegen in -O2/-Os levels before deciding between 0x1000 & 0x80 base.  i suspect it won't be that big of a deal, but i don't care enough at that point to bikeshed :p.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,9,https://github.com/OpenRC/openrc/pull/435#issuecomment-896218949,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","def do not use values <127.

Okay. I'll change it.

0x80 base

Are you certain that isprint(0x80) actually returns false? For that matter, are you certain that isprint(0x1000) actually returns false in all locales?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,10,https://github.com/OpenRC/openrc/pull/435#issuecomment-896232286,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","i would actually look at codegen in -O2/-Os levels


With any long-only opts ≥0x1000, the compiler generates an initial range check for the switch to divide the option value space into a low range and a high range. The low range is handled by a jump table.
With four or fewer long-only opts starting at 0x1000, the high range is handled by a series of comparisons and conditional branches.
With five or more long-only opts starting at 0x1000, the compiler generates a second jump table to handle the high range.
With long-only opts starting at 0x1, the compiler generates a single jump table to handle all of the option values.
With long-only opts starting at 0x81, the compiler also generates a single jump table to handle all of the option values.

I also don't care to bikeshed. I'm just supporting my argument that making a sparse switch is less code-efficient. I'll implement whatever you say.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/vapier,11,https://github.com/OpenRC/openrc/pull/435#issuecomment-896292868,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","Are you certain that isprint......

i think you're missing some aspects of how locales work in POSIX runtimes.  nowhere in openrc do we call setlocale().  that means all our C code only executes in the POSIX locale (i.e. the C locale).  hence the only codeset we care about here is ASCII.  hence isprint(0x80) and every other value >=0x7f will return false.
that said, when i added the isprint() to the usage code, it was copying a pattern i used in other Gentoo projects when i was using the random non-printable ranges (e.g. 0x01 - 0x1f) due to a misunderstanding of how getopt_long actually worked.  i've learned since through experience that it's a bad pattern, and i haven't circled back to updating the openrc code accordingly.
so only use <0x80 values in getopts_long when it's actual printable characters.  if we're opting the short option, use >=0x80.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,12,https://github.com/OpenRC/openrc/pull/435#issuecomment-896295110,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","nowhere in openrc do we call setlocale().

That may be true now. I'd argue it's better to avoid the fragility of assuming anything about running in any particular locale, even the POSIX one. You don't want to tie your hands for the future in case you ever want to implement something where you'd want to depend on the user's preferred locale.

so only use <0x80 values in getopts_long when it's actual printable characters. if we're opting the short option, use >=0x80.

Okay, I'll base the long-only option value at 0x80.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/vapier,13,https://github.com/OpenRC/openrc/pull/435#issuecomment-896493271,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","making assumptions about POSIX locale behavior is the entire point of the POSIX locale.  it's an exact minimal definition, and anything that deviates from it is horribly broken and deserves to blow up and is not our problem.  it'd be like saying you can't make assumptions about ASCII codepoints.
i'm not tied to the use of isprint in the usage code as i alluded earlier.  switching to a hardcoded 0x80 test would be fine.  which would really be replacing one set of assumptions with another (in this case, encoding ASCII codepoint assumptions at compile time about C compiler behavior).
but i'll also note that writing locale portable code is a fun challenge by itself, and this particular aspect would hardly be the biggest issue.  i'll wager that we'll never need to support locale in our tools directly, and even if we wanted to, doing anything other than UTF-8 would be a waste of time, and supporting non-ASCII CLI flags would be a terrible idea.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/williamh,14,https://github.com/OpenRC/openrc/pull/435#issuecomment-919261784,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).",@whitslack Please rebase this on current master and I'll take a look.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,15,https://github.com/OpenRC/openrc/pull/435#issuecomment-919495483,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).",@williamh: Rebased (and squashed) as requested.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/williamh,16,https://github.com/OpenRC/openrc/pull/435#issuecomment-998485228,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).",@whitslack All of the code style adjustments in this pr make it hard to review. Are you willing to fix the pr to only contain the code for the oom score adjustment implementation?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,17,https://github.com/OpenRC/openrc/pull/435#issuecomment-998508239,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","All of the code style adjustments in this pr make it hard to review. Are you willing to fix the pr to only contain the code for the oom score adjustment implementation?

@williamh: 😅 That's how it was to start, but then @vapier asked for a code style adjustment. I put all the code style changes in their own commit with no other changes, so if you're looking to review only the OOM score changes, they're all in d779c5e.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/vapier,18,https://github.com/OpenRC/openrc/pull/435#issuecomment-998517967,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).",i peeled the style change out and merged it by itself.  can you rebase please ?,True,{'THUMBS_UP': ['https://github.com/whitslack']}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/williamh,19,https://github.com/OpenRC/openrc/pull/435#issuecomment-998948426,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","I just did the same with the error message fix; it is merged into master.
I have an issue that no one else would have caught, and I agree it is specific to me, but thoughts would be appreciated.
While reviewing the code, I first thought the name of the environment variable you added was SSD_OOMSTORAGE, but it turns out that my screen reader pronounces SSD_OOMSCOREADJ in a way that sounds extremely similar to SSD_OOMSTORAGE.
So we need a new name for that environment variable.
I'm thinking either SSD_OOM_SCORE_ADJ or SSD_OOM_ADJ. Does anyone have any suggestions or preferences?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/vapier,20,https://github.com/OpenRC/openrc/pull/435#issuecomment-999236839,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).",SSD_OOM_SCORE_ADJ is preferable since it matches the /proc/self/oom_score_adj name,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/williamh,21,https://github.com/OpenRC/openrc/pull/435#issuecomment-999237733,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","@vapier Ok, that's what I thought, I'm working on that locally.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/whitslack,22,https://github.com/OpenRC/openrc/pull/435#issuecomment-999283739,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","SSD_OOM_SCORE_ADJ is preferable since it matches the /proc/self/oom_score_adj name

If you make that change, then you should also change SSD_NICELEVEL→SSD_NICE_LEVEL and SSD_IONICELEVEL→SSD_IO_NICE_LEVEL for consistency. (You'd probably want to preserve as fallbacks the previous names of the existing variables for backward compatibility.)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,435,2021-08-10T03:17:34Z,2021-12-22T16:01:40Z,2022-01-04T09:10:41Z,CLOSED,False,71,8,5,https://github.com/whitslack,Implement OOM score adjustment,1,[],https://github.com/OpenRC/openrc/pull/435,https://github.com/vapier,23,https://github.com/OpenRC/openrc/pull/435#issuecomment-999335673,"This PR adds a new --oom-score-adj option to start-stop-daemon and supervise-daemon to complement the existing --nicelevel and --ionice options. Often it is advantageous to depress the OOM score of critical system services so that the kernel's OOM killer will prefer to kill more ""disposable"" processes in OOM scenarios. SSD and SD previously lacked a clean way to adjust the OOM scores of the daemons they start. With this patchset, now the oom_score_adj of launched daemons can be specified either by the new command-line option or by a new SSD_OOMSCOREADJ environment variable, which is akin to SSD_NICELEVEL and SSD_IONICELEVEL.
Note: While crafting this enhancement, I noticed that supervise-daemon was missing support for the SSD_IONICELEVEL environment variable, as though it had been overlooked when such support was added to start-stop-daemon, so I took the opportunity to fill in the missing implementation (in a separate commit, which precedes the commit that holds the real meat of this PR).","to be clear, the nice settings don't have corresponding files whose names would be matched to.  but i don't disagree with using _ to break up the words.",True,{'THUMBS_UP': ['https://github.com/whitslack']}
OpenRC/openrc,https://github.com/OpenRC/openrc,436,2021-08-17T03:28:11Z,2021-08-17T04:57:47Z,2021-08-22T17:13:56Z,MERGED,True,17,1,2,https://github.com/whitslack,supervise-daemon: implement SSD_IONICELEVEL,1,[],https://github.com/OpenRC/openrc/pull/436,https://github.com/whitslack,1,https://github.com/OpenRC/openrc/pull/436,supervise-daemon was apparently overlooked when support for the SSD_IONICELEVEL environment variable was added. This commit brings supervise-daemon up to parity with start-stop-daemon with respect to this environment variable.,supervise-daemon was apparently overlooked when support for the SSD_IONICELEVEL environment variable was added. This commit brings supervise-daemon up to parity with start-stop-daemon with respect to this environment variable.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,436,2021-08-17T03:28:11Z,2021-08-17T04:57:47Z,2021-08-22T17:13:56Z,MERGED,True,17,1,2,https://github.com/whitslack,supervise-daemon: implement SSD_IONICELEVEL,1,[],https://github.com/OpenRC/openrc/pull/436,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/436#issuecomment-899993364,supervise-daemon was apparently overlooked when support for the SSD_IONICELEVEL environment variable was added. This commit brings supervise-daemon up to parity with start-stop-daemon with respect to this environment variable.,sorry for the delay ... my computer is still not resurrected :/,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,438,2021-08-23T16:32:40Z,2021-09-21T16:08:01Z,2021-09-21T16:30:27Z,CLOSED,False,1,1,1,https://github.com/SameExpert,Move .so files from /usr to /,1,[],https://github.com/OpenRC/openrc/pull/438,https://github.com/SameExpert,1,https://github.com/OpenRC/openrc/pull/438,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,438,2021-08-23T16:32:40Z,2021-09-21T16:08:01Z,2021-09-21T16:30:27Z,CLOSED,False,1,1,1,https://github.com/SameExpert,Move .so files from /usr to /,1,[],https://github.com/OpenRC/openrc/pull/438,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/438#issuecomment-904845424,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,"I'm curious why you need this? On Linux you should be mounting /usr from your initramfs before you call openrc-init, or making sure all of the libraries openrc-init needs are in your initramfs if you are calling it there.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,438,2021-08-23T16:32:40Z,2021-09-21T16:08:01Z,2021-09-21T16:30:27Z,CLOSED,False,1,1,1,https://github.com/SameExpert,Move .so files from /usr to /,1,[],https://github.com/OpenRC/openrc/pull/438,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/438#issuecomment-904847760,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,"Or, another option is to override LIBDIR on the make command line.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,438,2021-08-23T16:32:40Z,2021-09-21T16:08:01Z,2021-09-21T16:30:27Z,CLOSED,False,1,1,1,https://github.com/SameExpert,Move .so files from /usr to /,1,[],https://github.com/OpenRC/openrc/pull/438,https://github.com/SameExpert,4,https://github.com/OpenRC/openrc/pull/438#issuecomment-905128776,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,"I'm curious why you need this? On Linux you should be mounting /usr from your initramfs before you call openrc-init, or making sure all of the libraries openrc-init needs are in your initramfs if you are calling it there.

I'm having a seperate @usr btrfs subvolume, using openrc-init as init system and want it to mount it on /usr.
I cannot have initramfs because Alpine's init script doesn't allow initramfs without gzip or xz compression method and my kernel is very minimalistic and doesn't have them set in its image.
I use openrc from Alpine Linux's repos directly. Currently I mved these two .so files out from /usr and everything is working fine, it mounts the fstab's entries properly. By default, as an init system it should be at least mount at startup.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,438,2021-08-23T16:32:40Z,2021-09-21T16:08:01Z,2021-09-21T16:30:27Z,CLOSED,False,1,1,1,https://github.com/SameExpert,Move .so files from /usr to /,1,[],https://github.com/OpenRC/openrc/pull/438,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/438#issuecomment-914645430,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,"Hi, can you please check out the 0.44 release? I want to migrate to using a Meson based build system instead of the custom Makefiles we have used in the past.
Can you let me know if you can get the meson build to do what you need?
Thanks,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,438,2021-08-23T16:32:40Z,2021-09-21T16:08:01Z,2021-09-21T16:30:27Z,CLOSED,False,1,1,1,https://github.com/SameExpert,Move .so files from /usr to /,1,[],https://github.com/OpenRC/openrc/pull/438,https://github.com/SameExpert,6,https://github.com/OpenRC/openrc/pull/438#issuecomment-918815977,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,"Can you let me know if you can get the meson build to do what you need?

I don't know if I did it correctly, but meson builddir gives this error:
meson.build:86:0: ERROR: Unknown statement.

full log

The Alpine's package still has them with /usr prefix.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,438,2021-08-23T16:32:40Z,2021-09-21T16:08:01Z,2021-09-21T16:30:27Z,CLOSED,False,1,1,1,https://github.com/SameExpert,Move .so files from /usr to /,1,[],https://github.com/OpenRC/openrc/pull/438,https://github.com/williamh,7,https://github.com/OpenRC/openrc/pull/438#issuecomment-924063674,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,@SameExpert  This is an issue in the build I should have a fix for today.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,438,2021-08-23T16:32:40Z,2021-09-21T16:08:01Z,2021-09-21T16:30:27Z,CLOSED,False,1,1,1,https://github.com/SameExpert,Move .so files from /usr to /,1,[],https://github.com/OpenRC/openrc/pull/438,https://github.com/williamh,8,https://github.com/OpenRC/openrc/pull/438#issuecomment-924154248,This will move libeinfo.so.1 and librc.so.1 from /usr to / so that openrc-init can be used before mounting /usr.,"This should be fixed in 0.44.5. The split-usr option doesn't do anything in this release so you shouldn't need it.
Please report back after testing 0.44.5.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,443,2021-09-08T20:43:15Z,,2021-12-31T00:45:52Z,OPEN,False,3,1,2,https://github.com/udeved,meson: allow rc override,1,[],https://github.com/OpenRC/openrc/pull/443,https://github.com/udeved,1,https://github.com/OpenRC/openrc/pull/443,"allow to change the rc dir name of the rc_libexecdir path
introduce a librcdir option for override with value  'rc'","allow to change the rc dir name of the rc_libexecdir path
introduce a librcdir option for override with value  'rc'",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,444,2021-09-08T22:04:01Z,2021-09-08T23:13:49Z,2021-09-08T23:13:49Z,MERGED,True,2,2,1,https://github.com/udeved,meson: fix symlinks with sysvinit,1,[],https://github.com/OpenRC/openrc/pull/444,https://github.com/udeved,1,https://github.com/OpenRC/openrc/pull/444,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,445,2021-09-09T08:15:24Z,2021-09-09T17:28:09Z,2021-09-09T17:28:09Z,MERGED,True,1,1,1,https://github.com/kaniini,fix trailing whitespace in tools/meson_runlevels.sh,1,[],https://github.com/OpenRC/openrc/pull/445,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/445,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,446,2021-09-09T08:18:39Z,2021-09-09T17:45:06Z,2021-09-09T17:45:06Z,CLOSED,False,3,2,1,https://github.com/kaniini,fix build under musl 1.2 on 32-bit systems,1,[],https://github.com/OpenRC/openrc/pull/446,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/446,"Since musl 1.2 time_t is a 64 bit value, even on 32 bit systems. A
hotfix for printing the value is simply using PRIu64 from inttypes.h
in the format string.","Since musl 1.2 time_t is a 64 bit value, even on 32 bit systems. A
hotfix for printing the value is simply using PRIu64 from inttypes.h
in the format string.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,447,2021-09-10T02:28:07Z,2021-09-10T04:18:55Z,2021-09-10T04:18:55Z,MERGED,True,1,0,1,https://github.com/kaniini,Fix undeclared UT_LINESIZE on musl 1.2,1,[],https://github.com/OpenRC/openrc/pull/447,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/447,"Fix the following error:
broadcast.c:41:21: error: '__UT_LINESIZE' undeclared (first use in this function); did you mean 'UT_LINESIZE'?
 #define UT_LINESIZE __UT_LINESIZE
                      ^~~~~~~~~~

Constant UT_LINESIZE is defined in <utmp.h> provided by musl.","Fix the following error:
broadcast.c:41:21: error: '__UT_LINESIZE' undeclared (first use in this function); did you mean 'UT_LINESIZE'?
 #define UT_LINESIZE __UT_LINESIZE
                      ^~~~~~~~~~

Constant UT_LINESIZE is defined in <utmp.h> provided by musl.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,448,2021-09-10T02:35:28Z,2021-09-10T02:57:45Z,2021-09-10T03:12:48Z,MERGED,True,1,1,1,https://github.com/kaniini,rc-mount: make timeout invocation compatible with busybox timeout,1,[],https://github.com/OpenRC/openrc/pull/448,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/448,"Busybox timeout does not support the -k flag. As such, invoking fuser
from do_unmount never worked without this patch. This went unnoticed as
standard error is redirected to /dev/null. This patch fixes this by
simply removing the incompatible -k flag.
[Ariadne: the -k is redundant anyway, since we are sending the KILL
signal to begin with.]","Busybox timeout does not support the -k flag. As such, invoking fuser
from do_unmount never worked without this patch. This went unnoticed as
standard error is redirected to /dev/null. This patch fixes this by
simply removing the incompatible -k flag.
[Ariadne: the -k is redundant anyway, since we are sending the KILL
signal to begin with.]",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,448,2021-09-10T02:35:28Z,2021-09-10T02:57:45Z,2021-09-10T03:12:48Z,MERGED,True,1,1,1,https://github.com/kaniini,rc-mount: make timeout invocation compatible with busybox timeout,1,[],https://github.com/OpenRC/openrc/pull/448,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/448#issuecomment-916591841,"Busybox timeout does not support the -k flag. As such, invoking fuser
from do_unmount never worked without this patch. This went unnoticed as
standard error is redirected to /dev/null. This patch fixes this by
simply removing the incompatible -k flag.
[Ariadne: the -k is redundant anyway, since we are sending the KILL
signal to begin with.]","this is fine because it's redundant as you noted.  thanks.
as a general thing, we've been avoiding rewriting code to workaround busybox limitations because it makes the code largely impossible to verify and keep working, and in some cases, make things even harder to write.  instead, the preference is to fix busybox itself, or in the case of busybox config options, enable the extra ones rather than omit features.  anything that is ""standard"" or ""reasonable"" in utilities is fair game, and busybox missing the functionality isn't generally sufficient to have OpenRC avoid it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,448,2021-09-10T02:35:28Z,2021-09-10T02:57:45Z,2021-09-10T03:12:48Z,MERGED,True,1,1,1,https://github.com/kaniini,rc-mount: make timeout invocation compatible with busybox timeout,1,[],https://github.com/OpenRC/openrc/pull/448,https://github.com/kaniini,3,https://github.com/OpenRC/openrc/pull/448#issuecomment-916597232,"Busybox timeout does not support the -k flag. As such, invoking fuser
from do_unmount never worked without this patch. This went unnoticed as
standard error is redirected to /dev/null. This patch fixes this by
simply removing the incompatible -k flag.
[Ariadne: the -k is redundant anyway, since we are sending the KILL
signal to begin with.]","haha, i think everyone hates busybox's anachronisms.  i only sent this one upstream because it's redundant ;)",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,449,2021-09-10T03:58:48Z,2021-09-14T16:30:52Z,2021-09-14T16:30:52Z,CLOSED,False,3,3,1,https://github.com/kaniini,force root be rw before localmount,1,[],https://github.com/OpenRC/openrc/pull/449,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/449,"The service that pulls in root remount is mtab which Alpine doesn't need/use.
[Ariadne: proposed upstream per IRC discussion with WilliamH].","The service that pulls in root remount is mtab which Alpine doesn't need/use.
[Ariadne: proposed upstream per IRC discussion with WilliamH].",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,450,2021-09-10T04:00:22Z,2021-09-10T05:03:49Z,2021-09-10T05:03:49Z,CLOSED,False,2,0,1,https://github.com/kaniini,call /sbin/mkmntdirs in localmount OpenRC service,1,[],https://github.com/OpenRC/openrc/pull/450,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/450,[Ariadne: proposed for inclusion upstream per IRC discussion with WilliamH.],[Ariadne: proposed for inclusion upstream per IRC discussion with WilliamH.],True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,450,2021-09-10T04:00:22Z,2021-09-10T05:03:49Z,2021-09-10T05:03:49Z,CLOSED,False,2,0,1,https://github.com/kaniini,call /sbin/mkmntdirs in localmount OpenRC service,1,[],https://github.com/OpenRC/openrc/pull/450,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/450#issuecomment-916627870,[Ariadne: proposed for inclusion upstream per IRC discussion with WilliamH.],"there's no explanation as to what ""mkmntdirs"" is, and it's not POSIX or OpenRC or anything else standard that i can see.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,450,2021-09-10T04:00:22Z,2021-09-10T05:03:49Z,2021-09-10T05:03:49Z,CLOSED,False,2,0,1,https://github.com/kaniini,call /sbin/mkmntdirs in localmount OpenRC service,1,[],https://github.com/OpenRC/openrc/pull/450,https://github.com/kaniini,3,https://github.com/OpenRC/openrc/pull/450#issuecomment-916632110,[Ariadne: proposed for inclusion upstream per IRC discussion with WilliamH.],"Oh, oops.  I think that’s specific to Alpine.  Let me check.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,450,2021-09-10T04:00:22Z,2021-09-10T05:03:49Z,2021-09-10T05:03:49Z,CLOSED,False,2,0,1,https://github.com/kaniini,call /sbin/mkmntdirs in localmount OpenRC service,1,[],https://github.com/OpenRC/openrc/pull/450,https://github.com/kaniini,4,https://github.com/OpenRC/openrc/pull/450#issuecomment-916633140,[Ariadne: proposed for inclusion upstream per IRC discussion with WilliamH.],"Yes, mkmntdirs is an Alpine specific utility.  Closing.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,451,2021-09-10T04:02:30Z,2021-09-15T15:22:55Z,2021-09-15T15:22:55Z,CLOSED,False,4,2,1,https://github.com/kaniini,hide error when migrating /var/run to /run,1,[],https://github.com/OpenRC/openrc/pull/451,https://github.com/kaniini,1,https://github.com/OpenRC/openrc/pull/451,"The script tries to copy non-existing files. We simply hide the error
http://bugs.alpinelinux.org/issues/3160
[Ariadne: proposed for upstream inclusion per IRC discussion with WilliamH.]","The script tries to copy non-existing files. We simply hide the error
http://bugs.alpinelinux.org/issues/3160
[Ariadne: proposed for upstream inclusion per IRC discussion with WilliamH.]",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,1,https://github.com/OpenRC/openrc/pull/453,,,True,"{'THUMBS_DOWN': ['https://github.com/bkdwt', 'https://github.com/shennarwp', 'https://github.com/Pan5ky', 'https://github.com/Zipdox', 'https://github.com/Zorgodon', 'https://github.com/CyB3RC0nN0R', 'https://github.com/CITIZENSIXTYNINE', 'https://github.com/idkso', 'https://github.com/zjquid', 'https://github.com/Liverbean', 'https://github.com/deciseiv', 'https://github.com/RockyBukake', 'https://github.com/greenlucid', 'https://github.com/groundflyer', 'https://github.com/GanerCodes', 'https://github.com/vxiiduu', 'https://github.com/Nutjob', 'https://github.com/klllr', 'https://github.com/SirCipherz', 'https://github.com/Radtoo', 'https://github.com/kevin-leopold', 'https://github.com/rorgoroth', 'https://github.com/Demonstrandum', 'https://github.com/Peter0x44', 'https://github.com/middleeasternfag', 'https://github.com/epstein-suicider', 'https://github.com/atotmix', 'https://github.com/denliner', 'https://github.com/sr1canskhsia', 'https://github.com/ALiwoto', 'https://github.com/BieHDC', 'https://github.com/artixnous', 'https://github.com/steeznson', 'https://github.com/FukurouMakoto', 'https://github.com/Redfoxymoon', 'https://github.com/jirutka', 'https://github.com/yekoc', 'https://github.com/LinkTed', 'https://github.com/HDK101', 'https://github.com/valahraban', 'https://github.com/TomBeckett'], 'THUMBS_UP': ['https://github.com/omnivagant']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/453#issuecomment-919510859,,"I need to think about a reporting address, but it really isn't openrc@g.o.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,3,https://github.com/OpenRC/openrc/pull/453#issuecomment-919676100,,"short of e-mailing one of us directly, openrc@g.o is the only other possible e-mail contact point atm
other options would be to use GH issues or GH discussions.  i'm fine with that wrt transparency, but i can imagine that not everyone would feel comfortable making public reports, and i don't think it's possible to make private reports via these channels.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/453#issuecomment-920432147,,"@vapier  My concern about openrc@g.o is that we don't control who that goes to.
A private email could be an option, but to be honest I would prefer that github has private issues or discussions, and if they do I would do that.
I will open up a support ticket with them about it.
Also, you might want to download the original CoC from
here. The one you put in has references to the ""git community"".",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/453#issuecomment-920443698,,I just opened a ticket asking about this.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,6,https://github.com/OpenRC/openrc/pull/453#issuecomment-939710810,,"@vapier My concern about openrc@g.o is that we don't control who that goes to.

i still don't see the problem.  this is a public open source project backed by a foundation.  just because a report was sent to someone is not a legal guarantee that it won't be shared or discussed with others.  if anything, reports of violations should be discussed with others on the team.

A private email could be an option, but to be honest I would prefer that github has private issues or discussions, and if they do I would do that.

i don't disagree, but hoping & waiting for something that is likely to take a loooooong time to materialize is not a reason to hold back important documents & statements.

Also, you might want to download the original CoC

this is the original CoC with a small intro cribbed from the git community.",True,"{'THUMBS_DOWN': ['https://github.com/bkdwt', 'https://github.com/CITIZENSIXTYNINE', 'https://github.com/deciseiv', 'https://github.com/RockyBukake', 'https://github.com/greenlucid', 'https://github.com/Nutjob', 'https://github.com/epstein-suicider', 'https://github.com/steeznson', 'https://github.com/FukurouMakoto', 'https://github.com/Redfoxymoon', 'https://github.com/valahraban', 'https://github.com/TomBeckett'], 'THUMBS_UP': ['https://github.com/omnivagant']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/CITIZENSIXTYNINE,7,https://github.com/OpenRC/openrc/pull/453#issuecomment-984188994,,"I'm not an OpenRC contributor but I think that I can comment on this as this is an open-source project with a community.
Codes of Conduct that prohibit certain groups of people from contributing do NOT belong in Open Source projects.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,8,https://github.com/OpenRC/openrc/pull/453#issuecomment-984263801,,"you're going to have to be less vague as to your actual concerns.  who, exactly, is being prohibited here.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/fufik,9,https://github.com/OpenRC/openrc/pull/453#issuecomment-984306848,,"@vapier What really is vague though, that is the proposed version of CoC from Contributor Covenant. Although it is intended to be a document that describes clear rules and unacceptable behaviours, it does not include a finite list of undesirable actions and thus any act may be treated as a violation of the CoC according to that line:
""Other conduct which could reasonably be considered inappropriate in a professional setting"".
There already have been dramas regarding that version of Code of Conduct.
If you really want to adopt one, why not a like of the Gentoo's which has clear cut and concise rules: https://wiki.gentoo.org/wiki/Project:Council/Code_of_conduct ?",True,"{'THUMBS_UP': ['https://github.com/Radtoo', 'https://github.com/steeznson', 'https://github.com/FukurouMakoto', 'https://github.com/TomBeckett']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,10,https://github.com/OpenRC/openrc/pull/453#issuecomment-984313275,,"i don't think that comparison is accurate.  the Gentoo CoC linked provides examples ... it is by no means an exhaustive list.  Contributor Covenant also provides examples, many of which overlap with Gentoo's own CoC.
i'm not sure if you're trying to claim that Gentoo's CoC has been drama free.  it most certainly has not, and continues to not.
the reason for going with Contributor Covenant over Gentoo:

we can't just copy & paste Gentoo's CoC.  it clearly has Gentoo-specific escalation/resolution paths that no one wants (e.g. William, myself, and Gentoo).  it doesn't make sense in a project that is independent of Gentoo.
Contributor Covenant has been adopted by a ton more projects than Gentoo, and projects that are significantly larger.  Gentoo's CoC has been adopted by ... Gentoo.  in a historical context, this makes sense (Gentoo's CoC long predates Contributor Covenant), but it's not 2007 anymore, and the ecosystem has updated.",True,"{'THUMBS_DOWN': ['https://github.com/CITIZENSIXTYNINE', 'https://github.com/Nutjob', 'https://github.com/epstein-suicider', 'https://github.com/atotmix', 'https://github.com/steeznson', 'https://github.com/FukurouMakoto', 'https://github.com/TomBeckett'], 'THUMBS_UP': ['https://github.com/omnivagant']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/fufik,11,https://github.com/OpenRC/openrc/pull/453#issuecomment-984316130,,"@vapier
'but it's not 2007 anymore""
What do you mean by that?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/fufik,12,https://github.com/OpenRC/openrc/pull/453#issuecomment-984332127,,"@vapier Well, I didn't know, that Gentoo CoC also provided examples of behavior, not clear rules. At least I did not find any mention of that. My bad. Then it's a bad example.
Your argument though is essentially that:

You don't want to copy Gentoo's CoC, because some parts of it are inapplicable or undesirable to OpenRC
CC was adopted by more projects and Gentoo's wasn't and it's not 2007....?

What?
Why should it matter, how ""popular"" some CoC is?
Why would you like to adopt one in the first place?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,13,https://github.com/OpenRC/openrc/pull/453#issuecomment-984349794,,"it isn't about popularity, it's about consistency, and it's about being lazy.  if Contributor Covenant is good enough for such a large diverse set of projects and developer communities, then it's fine for OpenRC, and it's likely to be seen & understood by people already.  Gentoo CoC isn't going to be known outside of Gentoo.
sorry, but i'm not going to argue ""why CoC"".  there are plenty of articles out there on the topic already.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/fufik,14,https://github.com/OpenRC/openrc/pull/453#issuecomment-984357934,,"@vapier
So far I only know about it by cringeworthy cases of witch-hunting that its creator also actively seeks to start. You want to witch-hunt, am I correct?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,15,https://github.com/OpenRC/openrc/pull/453#issuecomment-984363236,,it sounds like you're operating in bad faith and making unfounded assumptions about other people.  i suggest you take a moment to rethink.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/fufik,16,https://github.com/OpenRC/openrc/pull/453#issuecomment-984372567,,"@vapier No, I am returning you the favour of a bad argument. There are plenty articles online on anything out there, both in favour and against something — anyone can write such an article. But that was not my question. My question was, what specific goal you have in mind and what you consider important when adopting the CoC, what problems you are trying to solve and whether you consider all possible outcomes and consequences. I, for instance, don't want the software I enjoy using, to be ridden in threads like this
Do you consider a possibility of that situation a ""lesser evil""?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,17,https://github.com/OpenRC/openrc/pull/453#issuecomment-984796292,,"have you actually read the Contributor Covenant that i've attached here ?  it clearly sets out in the first 2 sections the goals.  if you operate in good faith, that's all you need.  what do you find objectionable in those goals ?
i don't think digging up specific examples of people misbehaving in this project is necessary.  either you're operating in good faith and trust that maintainers who have worked on this project for literally decades have the best interests in the project & its small community in mind, or you don't.  if you don't trust the maintainers, then it's a moot debate.
the CoC doesn't create acrimony.  claiming that it does is attacking symptoms, not the underlying problems.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,18,https://github.com/OpenRC/openrc/pull/453#issuecomment-984841498,,"if the reason you're asking about specifics is because you're trying to sus out who we're trying to ban/kick out but not say, there isn't anyone.  this isn't a conspiracy that as soon as this is merged, we're going to spring it on people in an aha! moment.  if we wanted to ban someone, we can already do that without an explicit CoC -- we're admins on the project and can block people & lock threads at entirely our own discretion already.
as i said, the goal is laid out in the Contributor Covenant intro itself.  there's nothing more to it.  either you trust us that we're being honest and that should be enough, or you don't trust us and see conspiracies, at which point this debate is pointless -- nothing i say is going to convince you otherwise.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/fufik,19,https://github.com/OpenRC/openrc/pull/453#issuecomment-984908236,,"@vapier I never said a thing about conspiracy from your side. Was a little sarcastic — maybe! ;)
You are correct, indeed you can ban anyone you want even now. My point is just that picking a specific variant of CoC (the aforementioned Contributor Covenant) can signal to and attract certain sorts of people.
This is also the reason why I suggested picking something other than Contributor Covenant.
Those people then could use the CoC not the way you intend it to be used, for some good old social pressure.
Well, social contracts mostly NEVER work the way they are intended to. And especially if the creator of the CoC (I wholeheartedly believe) would endorse it. The one who started the thread I linked is actually no one else than the creator of the Contributor Covenant CoC, you can see their name right there, at the bottom of its official website https://www.contributor-covenant.org/
But well, do whatever you wish. I don't have the authority to command you around. Just my 2p in this global comedy show.
I'll be happy either way, but I'm just kinda lazy to write my own init system if good alternatives die because they were ""fighting meritocracy"". Writing tools is fun, though.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,20,https://github.com/OpenRC/openrc/pull/453#issuecomment-985288898,,"some fair points.  if the concern is about people attempting to abuse via the CoC, i'm not sure any particular CoC will make that better/worse.  Gentoo's CoC certainly hasn't been a cure-all -- the project has seen plenty of its own mind numbing dumpster fire threads.
it's not like there's an overwhelming number of CoC's to choose from, and i'm certainly not interested in authoring my own.  i'm not familiar with the person you call out specifically, and i doubt i'll ever cross paths with them.  i look at it from this angle: if Contributor Covenant is working for large projects (e.g. git & the Linux kernel), then that's good enough for me.",True,"{'THUMBS_DOWN': ['https://github.com/CITIZENSIXTYNINE', 'https://github.com/Redfoxymoon', 'https://github.com/TomBeckett'], 'THUMBS_UP': ['https://github.com/omnivagant']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/winterdaemon,21,https://github.com/OpenRC/openrc/pull/453#issuecomment-991964379,,"The systemd devs have agreed on a code of conduct based on The Ruby Community Conduct Guideline. Why not use something like that? As this person said, it covers all the bases while being fairly unintrusive. It's simple, apolitical and to the point.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/williamh,22,https://github.com/OpenRC/openrc/pull/453#issuecomment-991972030,,"I agree with @vapier  that if it is good enough for all of these projects, it should be fine for us. As he also said, no CoC is going to be a cure-all unfortunately.
The only reason I haven't nerged this yet is I haven't quite decided what to do about the reporting address.
As I said above, openrc@g.o is basically a public address (any Gentoo developer, even folks who have nothing to do with openrc) can be on it. Also, Gentoo is a downstream user, but they do not have any jurisdiction over OpenRC.
The other way to do it would be to have people email us directly, but that wouldn't be good either -- for example if someone wants to report a CoC violation against me, what should they do? I wish GH had a capability of filing private issues for this, but I think they don't.
Anyone who has suggestions for this, please speak up.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/winterdaemon,23,https://github.com/OpenRC/openrc/pull/453#issuecomment-991997049,,"@williamh, if a simpler and less divisive CoC is good enough for systemd, wouldn't that be worth considering?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/williamh,24,https://github.com/OpenRC/openrc/pull/453#issuecomment-992010640,,"@winterdaemon  I read the systemd CoC and the contributor covenant CoC, and I don't see what's divisive about the Contributor Covenant. The way I see it, it flushes things out and gives better examples.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/winterdaemon,25,https://github.com/OpenRC/openrc/pull/453#issuecomment-992044886,,People seem pretty divided about it to me.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/Chitose-chan,26,https://github.com/OpenRC/openrc/pull/453#issuecomment-994639781,,Identity politics is inherently divisive.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,27,https://github.com/OpenRC/openrc/pull/453#issuecomment-997643105,,"The only reason I haven't nerged this yet is I haven't quite decided what to do about the reporting address.

we can create a ""moderators"" team in the GH openrc org and tell people to contact that. then we add ourselves to it. we'll have to have said membership public of course.

for example if someone wants to report a CoC violation against me, what should they do?

I don't think the contact method makes a difference here.  any small group like openrc will have this problem.  realistically there aren't that many people who care or have time to dedicate.  nature of the game.

People seem pretty divided about it to me.

right, because if systemd is known for only one thing, it's how non-controversial it is.
I'll note that the systemd issue you linked above was not without controversy either.  it was preemptively locked to avoid getting buried with garbage.  plenty of people want to bury their head and maintain the status quo.
if you have any specific issues to highlight, feel free, but ""it's controversial"" doesn't really cut it.  simpler is usually better, but I'm leaning more towards ""widely adopted and understood"", not ""bespoke and unique"".  I'll also note that the systemd PR you linked says parts of it were copied from contributor covenant.
@fufik made some salient points for example.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/williamh,28,https://github.com/OpenRC/openrc/pull/453#issuecomment-998969605,,@vapier I like the idea of a moderators team. How would someone contact it privately?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,453,2021-09-14T20:42:03Z,,2021-12-31T00:45:52Z,OPEN,False,138,0,1,https://github.com/vapier,add CoC based on the Contributor Covenant project,1,[],https://github.com/OpenRC/openrc/pull/453,https://github.com/vapier,29,https://github.com/OpenRC/openrc/pull/453#issuecomment-999052553,,I think it effectively turns into emailing us directly. but it offers a bit more flexibility with adding and removing people without updating the doc.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,454,2021-09-15T06:41:00Z,2021-10-16T03:12:05Z,2021-10-16T03:12:05Z,CLOSED,False,25,5,2,https://github.com/aidanharris,Use cgroup.kill in cgroup_cleanup when possible,2,[],https://github.com/OpenRC/openrc/pull/454,https://github.com/aidanharris,1,https://github.com/OpenRC/openrc/pull/454,"The old code is moved to a cgroup_fallback_cleanup function and only
called if cgroup2_kill fails.","The old code is moved to a cgroup_fallback_cleanup function and only
called if cgroup2_kill fails.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,454,2021-09-15T06:41:00Z,2021-10-16T03:12:05Z,2021-10-16T03:12:05Z,CLOSED,False,25,5,2,https://github.com/aidanharris,Use cgroup.kill in cgroup_cleanup when possible,2,[],https://github.com/OpenRC/openrc/pull/454,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/454#issuecomment-920187632,"The old code is moved to a cgroup_fallback_cleanup function and only
called if cgroup2_kill fails.","Hi, how is this feature enabled -- is it a kernel config setting or added in some kernel version?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,454,2021-09-15T06:41:00Z,2021-10-16T03:12:05Z,2021-10-16T03:12:05Z,CLOSED,False,25,5,2,https://github.com/aidanharris,Use cgroup.kill in cgroup_cleanup when possible,2,[],https://github.com/OpenRC/openrc/pull/454,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/454#issuecomment-920224605,"The old code is moved to a cgroup_fallback_cleanup function and only
called if cgroup2_kill fails.",I was informed that this is a feature starting in Linux 5.14.x.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,457,2021-10-06T08:09:38Z,,2021-12-31T00:45:52Z,OPEN,False,1,1,1,https://github.com/hannob,Don't force service dependency cache regeneration on every boot,1,[],https://github.com/OpenRC/openrc/pull/457,https://github.com/hannob,1,https://github.com/OpenRC/openrc/pull/457,"Avoid cache regeneration on every boot, cache will still be regenerated if needed. See #455 for discussion.","Avoid cache regeneration on every boot, cache will still be regenerated if needed. See #455 for discussion.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,460,2021-10-08T03:34:34Z,2021-10-08T03:34:44Z,2021-10-08T03:37:04Z,CLOSED,False,32,0,1,https://github.com/thesamesam,.github: add Meson build to Actions,1,[],https://github.com/OpenRC/openrc/pull/460,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/460,Signed-off-by: Sam James sam@gentoo.org,Signed-off-by: Sam James sam@gentoo.org,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,461,2021-10-08T03:35:38Z,2021-10-08T03:36:17Z,2021-10-08T03:37:04Z,CLOSED,False,32,0,1,https://github.com/thesamesam,.github: add Meson build to Actions,1,[],https://github.com/OpenRC/openrc/pull/461,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/461,Signed-off-by: Sam James sam@gentoo.org,Signed-off-by: Sam James sam@gentoo.org,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,462,2021-10-08T03:54:38Z,2021-10-08T04:11:28Z,2021-10-08T04:11:28Z,CLOSED,False,1,1,1,https://github.com/thesamesam,checkpath: fix allocation size of string buffer,1,[],https://github.com/OpenRC/openrc/pull/462,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/462,"strlen's return value isn't enough to be used
directly for (x)malloc; it doesn't include
the null byte at the end of the string.
Fixes: #459
Reported-by: Gary E. Miller
X-Gentoo-Bug: https://bugs.gentoo.org/816900
Signed-off-by: Sam James sam@gentoo.org","strlen's return value isn't enough to be used
directly for (x)malloc; it doesn't include
the null byte at the end of the string.
Fixes: #459
Reported-by: Gary E. Miller
X-Gentoo-Bug: https://bugs.gentoo.org/816900
Signed-off-by: Sam James sam@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,463,2021-10-08T04:47:59Z,2021-10-09T04:23:31Z,2021-10-09T04:23:31Z,CLOSED,False,55,0,1,https://github.com/thesamesam,CI improvements,1,[],https://github.com/OpenRC/openrc/pull/463,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/463,Signed-off-by: Sam James sam@gentoo.org,Signed-off-by: Sam James sam@gentoo.org,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,465,2021-10-09T05:57:13Z,,2022-03-05T18:54:51Z,OPEN,False,43,0,2,https://github.com/williamh,add github action to perform shellcheck on scripts,1,[],https://github.com/OpenRC/openrc/pull/465,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/465,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,466,2021-10-09T17:51:38Z,2021-10-09T19:15:09Z,2021-10-09T19:15:47Z,CLOSED,False,58,55,3,https://github.com/williamh,separate github actions based on OS,1,[],https://github.com/OpenRC/openrc/pull/466,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/466,@thesamesam What do you think about splitting the work flow based on the OS?,@thesamesam What do you think about splitting the work flow based on the OS?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,467,2021-10-10T22:41:41Z,,2021-12-31T00:45:52Z,OPEN,False,7,17,2,https://github.com/williamh,bootmisc: use find ... -delete for all cleanup in tmp directories,2,[],https://github.com/OpenRC/openrc/pull/467,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/467,This is for #458,This is for #458,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,467,2021-10-10T22:41:41Z,,2021-12-31T00:45:52Z,OPEN,False,7,17,2,https://github.com/williamh,bootmisc: use find ... -delete for all cleanup in tmp directories,2,[],https://github.com/OpenRC/openrc/pull/467,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/467#issuecomment-939565715,This is for #458,@kaniini  @vapier @richfelker Any comments on this?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,467,2021-10-10T22:41:41Z,,2021-12-31T00:45:52Z,OPEN,False,7,17,2,https://github.com/williamh,bootmisc: use find ... -delete for all cleanup in tmp directories,2,[],https://github.com/OpenRC/openrc/pull/467,https://github.com/kaniini,3,https://github.com/OpenRC/openrc/pull/467#issuecomment-939566142,This is for #458,"I think doing it that way is going to be safer, but I also think that we should still have an option to turn off the wiping entirely, like Debian's TMPTIME=-1.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,467,2021-10-10T22:41:41Z,,2021-12-31T00:45:52Z,OPEN,False,7,17,2,https://github.com/williamh,bootmisc: use find ... -delete for all cleanup in tmp directories,2,[],https://github.com/OpenRC/openrc/pull/467,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/467#issuecomment-939567092,This is for #458,@kaniini Does setting wipe_tmp to no in /etc/conf.d/bootmisc do what you need?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,467,2021-10-10T22:41:41Z,,2021-12-31T00:45:52Z,OPEN,False,7,17,2,https://github.com/williamh,bootmisc: use find ... -delete for all cleanup in tmp directories,2,[],https://github.com/OpenRC/openrc/pull/467,https://github.com/kaniini,5,https://github.com/OpenRC/openrc/pull/467#issuecomment-939568187,This is for #458,"Setting wipe_tmp to no, still wipes some files.  It is more selective, but would be nice to disable entirely in favor of more robust solutions like tmpreaper.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,467,2021-10-10T22:41:41Z,,2021-12-31T00:45:52Z,OPEN,False,7,17,2,https://github.com/williamh,bootmisc: use find ... -delete for all cleanup in tmp directories,2,[],https://github.com/OpenRC/openrc/pull/467,https://github.com/vapier,6,https://github.com/OpenRC/openrc/pull/467#issuecomment-939606188,This is for #458,"if you set cleanup_tmp_dir="" "", then no path will be walked.  we still initialize X files which is needed for anyone using X.  putting that behind a knob feels like overkill, but i don't think we can do any sort of reasonable dynamic checks on it.
as i noted in the bug, using find unconditionally negatively impacts just about everyone just to hypothetically make a corrupted system less corrupt.  this change is the wrong direction to go.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,467,2021-10-10T22:41:41Z,,2021-12-31T00:45:52Z,OPEN,False,7,17,2,https://github.com/williamh,bootmisc: use find ... -delete for all cleanup in tmp directories,2,[],https://github.com/OpenRC/openrc/pull/467,https://github.com/williamh,7,https://github.com/OpenRC/openrc/pull/467#issuecomment-942931046,This is for #458,"@robbat2  I'll give a few more hours before i merge this, but I was chatting with @kaniini  tonight and we were talking about using the commands from Debian again. That's what the secomd commit on this pr does, and it seems that it would also allow removing the last find. Please comment on whether it is reasonable to squash and merge these or whether I should just merge the first commit into master.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/tsunamaru,1,https://github.com/OpenRC/openrc/pull/468,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.","This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/468#issuecomment-940275075,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.","sorry, but i'm struggling to see the value this adds.  it makes sure the 9999 Gentoo ebuild is always working with the latest OpenRC git tree ?  but nothing else ?
it just seems like a pretty expensive set of operations to run just to validate the ebuild can compile the git repo.  how long does each job take to complete ?  i'm guessing it's many minutes.
what would be interesting is if we could verify things still boot correctly ...",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/tsunamaru,3,https://github.com/OpenRC/openrc/pull/468#issuecomment-940359093,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.","Hi @vapier! Thanks for raising concerns. I'll try to explain it.

it makes sure the 9999 Gentoo ebuild is always working with the latest OpenRC git tree ? but nothing else ?

Well, in short, the main idea behind this PR is to test it against different Gentoo setups. Yes, I picked 9999 ebuild for simplicity, because it's enforces Git clone, but in other ways there shouldn't be a real difference which ebuild is chosed. Now this is failing because I didn't properly check Git repo address for pull requests, but I'll fix it shortly tomorrow.

how long does each job take to complete ?

Just about 5-7 minutes. You can verify it on my fork actions: https://github.com/tsunamaru/openrc/actions

what would be interesting is if we could verify things still boot correctly ...

Technically no problem, we can use --init feature in docker to test if it starting properly.
Let me know if there any other questions or concerns from your side, thanks.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/468#issuecomment-940440773,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.","@tsunamaru Why do you need the following section:
        env:
          EGIT_OVERRIDE_REPO_OPENRC_OPENRC: ${{ github.server_url }}/${{ github.repository }}.git
          EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC: ${{ github.head_ref

Do the default settings not6 work?
I'm also fine with testing the 9999 ebuild, that is what ci is supposed to test. I think testing whether openrc can ""boot"" is a bit out of scope.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/468#issuecomment-940490494,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.","@tsunamaru  I just looked at the failures, and you should remove the env: section of your jobs. If you do that, it should work.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/vapier,6,https://github.com/OpenRC/openrc/pull/468#issuecomment-940588362,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.","i know we're not paying for the resources, but it still doesn't feel like these are useful builders, and adding lots of them is just noise for people to ignore.  at the very least, do we need 6 configs for a single ebuild when the USE flags don't change ?
up to WIlliam if he really wants to merge it.

I think testing whether openrc can ""boot"" is a bit out of scope.

strongly disagree.  the only reason openrc exists is to boot systems.  if we don't have test coverage that we can boot & run correctly, then it means our releases are never fully tested before being shipped to users.  this is the entire point of a CI system.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/williamh,7,https://github.com/OpenRC/openrc/pull/468#issuecomment-941276739,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.","@vapier I'm not opposed to boot testing or unit testing, I'm just not sure how to do boot testing. I think the tesst directory can be expanded to handle unit testing after I set up a way to point /run/openrc somewhere else for tests. That's a separate discussion from this pr.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/williamh,8,https://github.com/OpenRC/openrc/pull/468#issuecomment-941501684,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.","@tsunamaru I think we only need the gentoo/glibc and gentoo/musl jobs, please remove the other 4 and I'll merge this.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,468,2021-10-11T09:50:42Z,,2021-12-31T00:45:52Z,OPEN,False,101,0,1,https://github.com/tsunamaru,Gentoo CI: initial implementation,1,[],https://github.com/OpenRC/openrc/pull/468,https://github.com/vapier,9,https://github.com/OpenRC/openrc/pull/468#issuecomment-941633966,"This PR implements CI based on official Gentoo docker distribution.
Gentoo project already have internal CI, but AFAIK it's not running against pull requests in this repo. So I thought you may find it useful :)
Basically, this CI uses emerge sys-apps/openrc-9999 and overrides 2 variables pointing to repository and branch (EGIT_OVERRIDE_REPO_OPENRC_OPENRC, EGIT_OVERRIDE_BRANCH_OPENRC_OPENRC)
Currently, it builds against the following targets using GCC:

glibc
musl
hardened-glibc
hardened-musl
nomultilib-glibc
hardened-nomultilib-glibc

Building against clang also can be implemented, but of course it'll increase CI time drastically (now it builds just in 5-7 minutes).
Building with SELinux can't be implemented due to incompatibility in containers.",i didn't say this PR had to do boot testing.  i just mentioned that it would make things more interesting since this PR is about testing Gentoo specifically.  building and running openrc unittests as a non-root user only goes so far.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,469,2021-10-20T11:28:00Z,2021-11-13T04:56:25Z,2021-11-13T19:30:10Z,CLOSED,False,1,1,1,https://github.com/ericbsd,Added missing comma in openrc/src/rc,1,[],https://github.com/OpenRC/openrc/pull/469,https://github.com/ericbsd,1,https://github.com/OpenRC/openrc/pull/469,"Clang was failing with:
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:70:2: error: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma? [-Werror,-Wstring-concatenation]
        ""when leaving single user or boot runlevels"",
        ^
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:69:2: note: place parentheses around the string literal to silence warning
        ""override the next runlevel to change into\n""
        ^","Clang was failing with:
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:70:2: error: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma? [-Werror,-Wstring-concatenation]
        ""when leaving single user or boot runlevels"",
        ^
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:69:2: note: place parentheses around the string literal to silence warning
        ""override the next runlevel to change into\n""
        ^",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,469,2021-10-20T11:28:00Z,2021-11-13T04:56:25Z,2021-11-13T19:30:10Z,CLOSED,False,1,1,1,https://github.com/ericbsd,Added missing comma in openrc/src/rc,1,[],https://github.com/OpenRC/openrc/pull/469,https://github.com/ericbsd,2,https://github.com/OpenRC/openrc/pull/469#issuecomment-968089143,"Clang was failing with:
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:70:2: error: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma? [-Werror,-Wstring-concatenation]
        ""when leaving single user or boot runlevels"",
        ^
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:69:2: note: place parentheses around the string literal to silence warning
        ""override the next runlevel to change into\n""
        ^",Close without any explanation?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,469,2021-10-20T11:28:00Z,2021-11-13T04:56:25Z,2021-11-13T19:30:10Z,CLOSED,False,1,1,1,https://github.com/ericbsd,Added missing comma in openrc/src/rc,1,[],https://github.com/OpenRC/openrc/pull/469,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/469#issuecomment-968110071,"Clang was failing with:
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:70:2: error: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma? [-Werror,-Wstring-concatenation]
        ""when leaving single user or boot runlevels"",
        ^
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:69:2: note: place parentheses around the string literal to silence warning
        ""override the next runlevel to change into\n""
        ^","No, closed because it was merged. The comment right above yours shows the commit that was added to the master branch.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,469,2021-10-20T11:28:00Z,2021-11-13T04:56:25Z,2021-11-13T19:30:10Z,CLOSED,False,1,1,1,https://github.com/ericbsd,Added missing comma in openrc/src/rc,1,[],https://github.com/OpenRC/openrc/pull/469,https://github.com/ericbsd,4,https://github.com/OpenRC/openrc/pull/469#issuecomment-968116612,"Clang was failing with:
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:70:2: error: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma? [-Werror,-Wstring-concatenation]
        ""when leaving single user or boot runlevels"",
        ^
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:69:2: note: place parentheses around the string literal to silence warning
        ""override the next runlevel to change into\n""
        ^",Ah weird I do not see that.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,469,2021-10-20T11:28:00Z,2021-11-13T04:56:25Z,2021-11-13T19:30:10Z,CLOSED,False,1,1,1,https://github.com/ericbsd,Added missing comma in openrc/src/rc,1,[],https://github.com/OpenRC/openrc/pull/469,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/469#issuecomment-968123108,"Clang was failing with:
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:70:2: error: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma? [-Werror,-Wstring-concatenation]
        ""when leaving single user or boot runlevels"",
        ^
/zroot/jenkins/workspace/update_ghsotbsd-13_poudriere_jail/sbin/openrc/../../contrib/openrc/src/rc/rc.c:69:2: note: place parentheses around the string literal to silence warning
        ""override the next runlevel to change into\n""
        ^",The comment that says williamh closed this in .... shows the commit where the change was added. If you click that hash you will see the commit.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,473,2021-11-13T04:39:51Z,2021-11-13T04:59:50Z,2021-11-13T04:59:50Z,CLOSED,False,3,0,2,https://github.com/thesamesam,src/librc/*: fix uclibc includes,2,[],https://github.com/OpenRC/openrc/pull/473,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/473,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,477,2021-11-20T12:51:33Z,2021-11-20T23:36:00Z,2021-11-20T23:36:00Z,CLOSED,False,7,5,2,https://github.com/thesamesam,"meson: build fixes (SELinux, PAM)",2,[],https://github.com/OpenRC/openrc/pull/477,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/477,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,478,2021-11-22T10:40:53Z,2021-11-27T19:15:50Z,2021-11-27T19:15:50Z,CLOSED,False,7,2,2,https://github.com/thesamesam,SELinux fixes (build system again and fix warning),3,[],https://github.com/OpenRC/openrc/pull/478,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/478,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,478,2021-11-22T10:40:53Z,2021-11-27T19:15:50Z,2021-11-27T19:15:50Z,CLOSED,False,7,2,2,https://github.com/thesamesam,SELinux fixes (build system again and fix warning),3,[],https://github.com/OpenRC/openrc/pull/478,https://github.com/stefson,2,https://github.com/OpenRC/openrc/pull/478#issuecomment-979402352,,works as intended for my setup,True,{'THUMBS_UP': ['https://github.com/thesamesam']}
OpenRC/openrc,https://github.com/OpenRC/openrc,480,2021-11-30T05:03:30Z,2021-12-13T01:17:57Z,2021-12-13T01:17:57Z,CLOSED,False,1,0,1,https://github.com/iucoen,net-online: add missing sleep 1 in ping loop,1,[],https://github.com/OpenRC/openrc/pull/480,https://github.com/iucoen,1,https://github.com/OpenRC/openrc/pull/480,Currently the ping loop instantly times out because timeout is decremented by 1 without actually going to sleep.,Currently the ping loop instantly times out because timeout is decremented by 1 without actually going to sleep.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,483,2021-12-10T05:16:05Z,2021-12-13T00:32:31Z,2021-12-13T00:35:25Z,CLOSED,False,2,2,1,https://github.com/thesamesam,src/rc/rc-status: fix 'started' output (-Wformat),1,[],https://github.com/OpenRC/openrc/pull/483,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/483,"On 32-bit platforms (e.g. HPPA), GCC warns with:
../src/rc/rc-status.c:137:49: warning: format ‘%lld’ expects argument of type ‘long long int’, but argument 5 has type ‘time_t’ {aka ‘long int’} [-Wformat=]
  137 |                                                 ""%02""PRId64"":%02""PRId64"":%02""PRId64"" (%s)"",
      |                                                 ^~~~~
  138 |                                                 diff_hours, diff_mins, diff_secs, start_count);
      |                                                                        ~~~~~~~~~
      |                                                                        |
      |                                                                        time_t {aka long int}

We expect the output to be 64-bit but time_t isn't always wide enough, so
let's cast to long long which is guaranteed to be.
Fixes: 25d5de8
See: https://forums.gentoo.org/viewtopic-t-1146117.html
Signed-off-by: Sam James sam@gentoo.org","On 32-bit platforms (e.g. HPPA), GCC warns with:
../src/rc/rc-status.c:137:49: warning: format ‘%lld’ expects argument of type ‘long long int’, but argument 5 has type ‘time_t’ {aka ‘long int’} [-Wformat=]
  137 |                                                 ""%02""PRId64"":%02""PRId64"":%02""PRId64"" (%s)"",
      |                                                 ^~~~~
  138 |                                                 diff_hours, diff_mins, diff_secs, start_count);
      |                                                                        ~~~~~~~~~
      |                                                                        |
      |                                                                        time_t {aka long int}

We expect the output to be 64-bit but time_t isn't always wide enough, so
let's cast to long long which is guaranteed to be.
Fixes: 25d5de8
See: https://forums.gentoo.org/viewtopic-t-1146117.html
Signed-off-by: Sam James sam@gentoo.org",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,483,2021-12-10T05:16:05Z,2021-12-13T00:32:31Z,2021-12-13T00:35:25Z,CLOSED,False,2,2,1,https://github.com/thesamesam,src/rc/rc-status: fix 'started' output (-Wformat),1,[],https://github.com/OpenRC/openrc/pull/483,https://github.com/E5ten,2,https://github.com/OpenRC/openrc/pull/483#issuecomment-991062071,"On 32-bit platforms (e.g. HPPA), GCC warns with:
../src/rc/rc-status.c:137:49: warning: format ‘%lld’ expects argument of type ‘long long int’, but argument 5 has type ‘time_t’ {aka ‘long int’} [-Wformat=]
  137 |                                                 ""%02""PRId64"":%02""PRId64"":%02""PRId64"" (%s)"",
      |                                                 ^~~~~
  138 |                                                 diff_hours, diff_mins, diff_secs, start_count);
      |                                                                        ~~~~~~~~~
      |                                                                        |
      |                                                                        time_t {aka long int}

We expect the output to be 64-bit but time_t isn't always wide enough, so
let's cast to long long which is guaranteed to be.
Fixes: 25d5de8
See: https://forums.gentoo.org/viewtopic-t-1146117.html
Signed-off-by: Sam James sam@gentoo.org","Shouldn't this be casting to (int64_t), or changing the format to use %lld as well?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,484,2021-12-13T00:23:39Z,2021-12-13T00:32:31Z,2021-12-13T00:33:00Z,CLOSED,False,11,21,1,https://github.com/dwfreed,rc-status: fix uptime types and simplify,1,[],https://github.com/OpenRC/openrc/pull/484,https://github.com/dwfreed,1,https://github.com/OpenRC/openrc/pull/484,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,484,2021-12-13T00:23:39Z,2021-12-13T00:32:31Z,2021-12-13T00:33:00Z,CLOSED,False,11,21,1,https://github.com/dwfreed,rc-status: fix uptime types and simplify,1,[],https://github.com/OpenRC/openrc/pull/484,https://github.com/dwfreed,2,https://github.com/OpenRC/openrc/pull/484#issuecomment-992005498,,Closes #483,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,488,2021-12-24T18:48:54Z,2022-03-05T18:14:59Z,2022-03-05T18:15:02Z,MERGED,True,6,10,2,https://github.com/LinkTed,Small format improvements,2,[],https://github.com/OpenRC/openrc/pull/488,https://github.com/LinkTed,1,https://github.com/OpenRC/openrc/pull/488,"Fix indentation in the meson.build file.
Use consistent args passing in start-stop-daemon.","Fix indentation in the meson.build file.
Use consistent args passing in start-stop-daemon.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,488,2021-12-24T18:48:54Z,2022-03-05T18:14:59Z,2022-03-05T18:15:02Z,MERGED,True,6,10,2,https://github.com/LinkTed,Small format improvements,2,[],https://github.com/OpenRC/openrc/pull/488,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/488#issuecomment-1059808960,"Fix indentation in the meson.build file.
Use consistent args passing in start-stop-daemon.",thx!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,489,2021-12-30T20:14:34Z,2022-04-06T15:53:44Z,2022-04-06T15:54:22Z,CLOSED,False,430,2027,154,https://github.com/williamh,rearrange tree,1,[],https://github.com/OpenRC/openrc/pull/489,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/489,"This PR does several things to streamline the source tree.

drop old build system
move shared include files to common directory
move shared source files to common directory
move executable-specific code to separate directories
move scripts to separate directories under src

All of this should not result in any user facing changes. Please review.
@vapier @thesamesam","This PR does several things to streamline the source tree.

drop old build system
move shared include files to common directory
move shared source files to common directory
move executable-specific code to separate directories
move scripts to separate directories under src

All of this should not result in any user facing changes. Please review.
@vapier @thesamesam",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,489,2021-12-30T20:14:34Z,2022-04-06T15:53:44Z,2022-04-06T15:54:22Z,CLOSED,False,430,2027,154,https://github.com/williamh,rearrange tree,1,[],https://github.com/OpenRC/openrc/pull/489,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/489#issuecomment-1003865641,"This PR does several things to streamline the source tree.

drop old build system
move shared include files to common directory
move shared source files to common directory
move executable-specific code to separate directories
move scripts to separate directories under src

All of this should not result in any user facing changes. Please review.
@vapier @thesamesam","@vapier I'm having a11y issues with the individual review comments, so I'll respond here.

The first comment in your review is fixed; I addressed this on the master branch.
I don't understand the second one. All code in ""common"" is shared across the code base.
No, the files in common do not need the rc_prefix. I'll take care of that in another pr.
The fourth one is addressed the same way the first one was, I moved that to master.
I agree that the fifth and sixth ones are somewhat subjective, but I feel that it makes the source cleaner to have one directory of common files used across the code base and separate directories for the executable-specific code.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,489,2021-12-30T20:14:34Z,2022-04-06T15:53:44Z,2022-04-06T15:54:22Z,CLOSED,False,430,2027,154,https://github.com/williamh,rearrange tree,1,[],https://github.com/OpenRC/openrc/pull/489,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/489#issuecomment-1004324468,"This PR does several things to streamline the source tree.

drop old build system
move shared include files to common directory
move shared source files to common directory
move executable-specific code to separate directories
move scripts to separate directories under src

All of this should not result in any user facing changes. Please review.
@vapier @thesamesam","@vapier  @thesamesam  I would like to merge this farely soon, so can you take a look and comment?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,489,2021-12-30T20:14:34Z,2022-04-06T15:53:44Z,2022-04-06T15:54:22Z,CLOSED,False,430,2027,154,https://github.com/williamh,rearrange tree,1,[],https://github.com/OpenRC/openrc/pull/489,https://github.com/vapier,4,https://github.com/OpenRC/openrc/pull/489#issuecomment-1059873943,"This PR does several things to streamline the source tree.

drop old build system
move shared include files to common directory
move shared source files to common directory
move executable-specific code to separate directories
move scripts to separate directories under src

All of this should not result in any user facing changes. Please review.
@vapier @thesamesam","prob want to go through all open comment threads and close them out
i don't see anything wrong with the changes other than the existing high level feedback i left already",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,490,2022-01-03T18:55:02Z,2022-02-06T22:17:47Z,2022-02-07T19:31:35Z,MERGED,True,103,0,6,https://github.com/LinkTed,Add securebits and No New Privs flags support for Linux,2,[],https://github.com/OpenRC/openrc/pull/490,https://github.com/LinkTed,1,https://github.com/OpenRC/openrc/pull/490,"Add the securebits of the capabilities feature and the No New Privs flag for Linux. This should increase the security of the running daemon, if the options are used.
Test
This is how I tested it if it works:
securebits
I execute the following command as root with the securebit SECBIT_NOROOT:
RC_SVCNAME=test ./supervise-daemon test --start --capabilities ^cap_chown,^cap_net_bind_service --secbits 0x01 /usr/bin/sleep 60
And checked if the permitted set is the same as the inheritable set:
$ cat /proc/14757/status
[...]
CapInh:	0000000000000401
CapPrm:	0000000000000401
[...]
No New Privs
I execute the following command as root with the No New Privs flag:
 RC_SVCNAME=test ./supervise-daemon test --start --no-new-privs /usr/bin/sleep 60
And checked if the No New Privs flag is set:
$ cat /proc/15168/status
[...]
NoNewPrivs:	1
[...]","Add the securebits of the capabilities feature and the No New Privs flag for Linux. This should increase the security of the running daemon, if the options are used.
Test
This is how I tested it if it works:
securebits
I execute the following command as root with the securebit SECBIT_NOROOT:
RC_SVCNAME=test ./supervise-daemon test --start --capabilities ^cap_chown,^cap_net_bind_service --secbits 0x01 /usr/bin/sleep 60
And checked if the permitted set is the same as the inheritable set:
$ cat /proc/14757/status
[...]
CapInh:	0000000000000401
CapPrm:	0000000000000401
[...]
No New Privs
I execute the following command as root with the No New Privs flag:
 RC_SVCNAME=test ./supervise-daemon test --start --no-new-privs /usr/bin/sleep 60
And checked if the No New Privs flag is set:
$ cat /proc/15168/status
[...]
NoNewPrivs:	1
[...]",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,493,2022-01-24T19:49:55Z,2022-01-27T02:19:39Z,2022-01-27T02:19:39Z,CLOSED,False,1,1,1,https://github.com/mattst88,rc-misc.c: Allocate memory for 'file',1,[],https://github.com/OpenRC/openrc/pull/493,https://github.com/mattst88,1,https://github.com/OpenRC/openrc/pull/493,"This is a partial revert of commit 8e02406 (""rc-misc.c: remove
references to PATH_MAX""), which changed 'file' to a null pointer with no
associated storage.
../openrc-0.44.10/src/rc/rc-misc.c: In function ‘_rc_deptree_load’:
../openrc-0.44.10/src/rc/rc-misc.c:392:33: warning: ‘%s’ directive argument is null [-Wformat-overflow=]
392 |                                 eerror(""Clock skew detected with `%s'"", file);
    |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fixes: 8e02406 (""rc-misc.c: remove references to PATH_MAX"")","This is a partial revert of commit 8e02406 (""rc-misc.c: remove
references to PATH_MAX""), which changed 'file' to a null pointer with no
associated storage.
../openrc-0.44.10/src/rc/rc-misc.c: In function ‘_rc_deptree_load’:
../openrc-0.44.10/src/rc/rc-misc.c:392:33: warning: ‘%s’ directive argument is null [-Wformat-overflow=]
392 |                                 eerror(""Clock skew detected with `%s'"", file);
    |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fixes: 8e02406 (""rc-misc.c: remove references to PATH_MAX"")",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,493,2022-01-24T19:49:55Z,2022-01-27T02:19:39Z,2022-01-27T02:19:39Z,CLOSED,False,1,1,1,https://github.com/mattst88,rc-misc.c: Allocate memory for 'file',1,[],https://github.com/OpenRC/openrc/pull/493,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/493#issuecomment-1022768799,"This is a partial revert of commit 8e02406 (""rc-misc.c: remove
references to PATH_MAX""), which changed 'file' to a null pointer with no
associated storage.
../openrc-0.44.10/src/rc/rc-misc.c: In function ‘_rc_deptree_load’:
../openrc-0.44.10/src/rc/rc-misc.c:392:33: warning: ‘%s’ directive argument is null [-Wformat-overflow=]
392 |                                 eerror(""Clock skew detected with `%s'"", file);
    |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fixes: 8e02406 (""rc-misc.c: remove references to PATH_MAX"")","Check out this article on why PATH_MAX is Tricky. I would rather avoid using it if possible.
Let me know what you think.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,494,2022-01-27T16:03:25Z,2022-01-30T06:53:26Z,2022-01-30T06:53:26Z,MERGED,True,3,2,1,https://github.com/omnivagant,init.d/devfs: default mount /dev noexec,1,[],https://github.com/OpenRC/openrc/pull/494,https://github.com/omnivagant,1,https://github.com/OpenRC/openrc/pull/494,Since I read this https://www.phoronix.com/scan.php?page=news_item&px=Linux-5.17-Devtmpfs-Change I've been running Alpinelinux with /dev mounted noexec without issues.,Since I read this https://www.phoronix.com/scan.php?page=news_item&px=Linux-5.17-Devtmpfs-Change I've been running Alpinelinux with /dev mounted noexec without issues.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,496,2022-01-29T21:04:25Z,2022-01-30T06:53:10Z,2022-01-30T06:53:14Z,MERGED,True,1,1,1,https://github.com/dermotbradley,init.d/bootmisc.in: prevent error due to nonexistant file,1,[],https://github.com/OpenRC/openrc/pull/496,https://github.com/dermotbradley,1,https://github.com/OpenRC/openrc/pull/496,"During boot if the ""previous_dmesg"" setting is enabled in
/etc/conf.d/bootmisc then during the 1st boot of a machine the
bootmisc init.d script will attempt to move a nonexistant dmesg
file, so generating an error on the console.
Modify the script to only move an existing file.","During boot if the ""previous_dmesg"" setting is enabled in
/etc/conf.d/bootmisc then during the 1st boot of a machine the
bootmisc init.d script will attempt to move a nonexistant dmesg
file, so generating an error on the console.
Modify the script to only move an existing file.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,496,2022-01-29T21:04:25Z,2022-01-30T06:53:10Z,2022-01-30T06:53:14Z,MERGED,True,1,1,1,https://github.com/dermotbradley,init.d/bootmisc.in: prevent error due to nonexistant file,1,[],https://github.com/OpenRC/openrc/pull/496,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/496#issuecomment-1025083280,"During boot if the ""previous_dmesg"" setting is enabled in
/etc/conf.d/bootmisc then during the 1st boot of a machine the
bootmisc init.d script will attempt to move a nonexistant dmesg
file, so generating an error on the console.
Modify the script to only move an existing file.",thx bud,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,497,2022-02-03T19:48:13Z,2022-03-05T20:48:18Z,2022-03-05T20:48:24Z,MERGED,True,61,0,2,https://github.com/sad-goldfish,Add Posix Scheduling Support to start-stop-daemon,32,[],https://github.com/OpenRC/openrc/pull/497,https://github.com/sad-goldfish,1,https://github.com/OpenRC/openrc/pull/497,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,497,2022-02-03T19:48:13Z,2022-03-05T20:48:18Z,2022-03-05T20:48:24Z,MERGED,True,61,0,2,https://github.com/sad-goldfish,Add Posix Scheduling Support to start-stop-daemon,32,[],https://github.com/OpenRC/openrc/pull/497,https://github.com/sad-goldfish,2,https://github.com/OpenRC/openrc/pull/497#issuecomment-1030839892,,All done @vapier,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,497,2022-02-03T19:48:13Z,2022-03-05T20:48:18Z,2022-03-05T20:48:24Z,MERGED,True,61,0,2,https://github.com/sad-goldfish,Add Posix Scheduling Support to start-stop-daemon,32,[],https://github.com/OpenRC/openrc/pull/497,https://github.com/sad-goldfish,3,https://github.com/OpenRC/openrc/pull/497#issuecomment-1031279693,,This way we maintain a Posix interface for setting scheduler while also supporting unknown schedulers. (E.g SCHED_ISO on a patched Linux Kernel). Though I do not know of any current implementations of  SCHED_SPORADIC so I have not implemented this.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,497,2022-02-03T19:48:13Z,2022-03-05T20:48:18Z,2022-03-05T20:48:24Z,MERGED,True,61,0,2,https://github.com/sad-goldfish,Add Posix Scheduling Support to start-stop-daemon,32,[],https://github.com/OpenRC/openrc/pull/497,https://github.com/sad-goldfish,4,https://github.com/OpenRC/openrc/pull/497#issuecomment-1059825805,,All done @vapier,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,497,2022-02-03T19:48:13Z,2022-03-05T20:48:18Z,2022-03-05T20:48:24Z,MERGED,True,61,0,2,https://github.com/sad-goldfish,Add Posix Scheduling Support to start-stop-daemon,32,[],https://github.com/OpenRC/openrc/pull/497,https://github.com/vapier,5,https://github.com/OpenRC/openrc/pull/497#issuecomment-1059829205,,thx again bud,True,{'HEART': ['https://github.com/AbhinavPraveen']}
OpenRC/openrc,https://github.com/OpenRC/openrc,500,2022-03-05T07:30:59Z,2022-03-05T18:14:21Z,2022-03-05T18:14:26Z,MERGED,True,2,1,1,https://github.com/catleeball,Add newline for `want`,1,[],https://github.com/OpenRC/openrc/pull/500,https://github.com/catleeball,1,https://github.com/OpenRC/openrc/pull/500,The comment block for want seemed to be unintentionally part of the use block. Added a newline so want will have its own section.,The comment block for want seemed to be unintentionally part of the use block. Added a newline so want will have its own section.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,500,2022-03-05T07:30:59Z,2022-03-05T18:14:21Z,2022-03-05T18:14:26Z,MERGED,True,2,1,1,https://github.com/catleeball,Add newline for `want`,1,[],https://github.com/OpenRC/openrc/pull/500,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/500#issuecomment-1059808854,The comment block for want seemed to be unintentionally part of the use block. Added a newline so want will have its own section.,thx!,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,502,2022-03-08T18:04:19Z,2022-03-31T05:53:47Z,2022-03-31T05:53:47Z,CLOSED,False,2,0,1,https://github.com/LinkTed,Add clangd support for development,1,[],https://github.com/OpenRC/openrc/pull/502,https://github.com/LinkTed,1,https://github.com/OpenRC/openrc/pull/502,"Add a clangd config file to the default build directory, so that clangd can find the compile_commands.json.","Add a clangd config file to the default build directory, so that clangd can find the compile_commands.json.",True,{'THUMBS_UP': ['https://github.com/thesamesam']}
OpenRC/openrc,https://github.com/OpenRC/openrc,502,2022-03-08T18:04:19Z,2022-03-31T05:53:47Z,2022-03-31T05:53:47Z,CLOSED,False,2,0,1,https://github.com/LinkTed,Add clangd support for development,1,[],https://github.com/OpenRC/openrc/pull/502,https://github.com/LinkTed,2,https://github.com/OpenRC/openrc/pull/502#issuecomment-1062059870,"Add a clangd config file to the default build directory, so that clangd can find the compile_commands.json.","I also want to add a .clang-format file in another PR to set the style code. In addition to that, it would make sense to add a CI jobs, which checks the style of the code by clang format.
At least for me, it would make it a lot easier to develop on this project. If the formatting is done automatically.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,503,2022-03-11T15:21:50Z,,2022-05-26T16:09:24Z,OPEN,False,3641,3793,59,https://github.com/LinkTed,Add clang format,4,[],https://github.com/OpenRC/openrc/pull/503,https://github.com/LinkTed,1,https://github.com/OpenRC/openrc/pull/503,"I create a clang format file with options, which I think are useful. This would make the development faster because the style code checking is automated. It seems that the style was not consisted through the files. The code is already formatted according to the clang format file. So, we can see the result of the style code definition. I am open to change the clang format file, if something does not look nice in your opinion. I also add a GitHub action to check the code format for PRs.","I create a clang format file with options, which I think are useful. This would make the development faster because the style code checking is automated. It seems that the style was not consisted through the files. The code is already formatted according to the clang format file. So, we can see the result of the style code definition. I am open to change the clang format file, if something does not look nice in your opinion. I also add a GitHub action to check the code format for PRs.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/zx2c4,1,https://github.com/OpenRC/openrc/pull/507,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier","The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier",True,"{'HEART': ['https://github.com/ncopa', 'https://github.com/thesamesam']}"
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/zx2c4,2,https://github.com/OpenRC/openrc/pull/507#issuecomment-1078642066,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier",@thesamesam @williamh @vapier Any of you should feel free to take over this pull request entirely and add whatever tweaks you think are required.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/ncopa,3,https://github.com/OpenRC/openrc/pull/507#issuecomment-1079079768,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier","I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.

I applied to my workstation and it didn't end up in disaster so far. And output of /dev/urandom still looks random 😃
I am adding this patch to Alpine Linux edge for wider testing. Are there any specific things we should look for?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/zx2c4,4,https://github.com/OpenRC/openrc/pull/507#issuecomment-1079121608,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier","I applied to my workstation and it didn't end up in disaster so far.

@ncopa Would you mind uploading your elog from a few boots, including the first one that uses this? Would be curious to see it progressing.
You also might want to wait until @williamh has had a pass at it. And actually I've already made some changes since your backport.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/thesamesam,5,https://github.com/OpenRC/openrc/pull/507#issuecomment-1079150306,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier","I'm happy, it WFM, and I don't see a problem with letting it sit in ~arch in Gentoo at least for a bit, just like Alpine is doing in edge.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/zx2c4,6,https://github.com/OpenRC/openrc/pull/507#issuecomment-1079151127,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier","Cool, sounds like a plan then. 👍",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/zx2c4,7,https://github.com/OpenRC/openrc/pull/507#issuecomment-1079210638,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier","Note that were it not for having to keep those Makefiles around, I would have just split up the urandom init.d/conf.d file into one for Linux and one for BSD, since that seems more possible with Meson, instead of this awkward thing I'm doing now where they're kept together. As a note for the future when the Makefiles go away, we might want to do this.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/zx2c4,8,https://github.com/OpenRC/openrc/pull/507#issuecomment-1079580588,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier","@williamh wants to rewrite this or something, so closing this and letting him handle it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,507,2022-03-25T04:25:12Z,2022-03-27T00:16:59Z,2022-03-27T03:43:49Z,CLOSED,False,499,21,6,https://github.com/zx2c4,Use seedrng for seeding the random number generator,1,[],https://github.com/OpenRC/openrc/pull/507,https://github.com/zx2c4,9,https://github.com/OpenRC/openrc/pull/507#issuecomment-1079614746,"The RNG can't actually be seeded from a shell script, due to the
reliance on ioctls. For this reason, the seedrng project provides a
basic script meant to be copy and pasted into projects like OpenRC and
tweaked as needed: https://git.zx2c4.com/seedrng/about/

This commit imports it into OpenRC and wires up /etc/init.d/urandom to
call it. It shouldn't be called by other things on the system, so it
lives in rc_sbindir.

Closes #506.

I don't actually have an OpenRC system handy to test this on, so testers would be welcome here.
CC @thesamesam @williamh @vapier","Reopening on the off chance that you want to merge this, as-is, and then apply your own stuff on top of it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,508,2022-03-28T22:13:33Z,2022-03-30T19:00:26Z,2022-03-30T19:18:12Z,CLOSED,False,112,36,3,https://github.com/williamh,Seedrng cleanup,1,[],https://github.com/OpenRC/openrc/pull/508,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/508,"This is most of the cleanup I want to do. All of these commits will be squashed into 1 before I merge.
The one thing left after this is reworking the urandom init script.
I'm thinking about using urandom-bsd for the bsd side and seedrng for linux, but having them both provide urandom for backward compatibility.
@thesamesam  @zx2c4","This is most of the cleanup I want to do. All of these commits will be squashed into 1 before I merge.
The one thing left after this is reworking the urandom init script.
I'm thinking about using urandom-bsd for the bsd side and seedrng for linux, but having them both provide urandom for backward compatibility.
@thesamesam  @zx2c4",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,508,2022-03-28T22:13:33Z,2022-03-30T19:00:26Z,2022-03-30T19:18:12Z,CLOSED,False,112,36,3,https://github.com/williamh,Seedrng cleanup,1,[],https://github.com/OpenRC/openrc/pull/508,https://github.com/zx2c4,2,https://github.com/OpenRC/openrc/pull/508#issuecomment-1081399561,"This is most of the cleanup I want to do. All of these commits will be squashed into 1 before I merge.
The one thing left after this is reworking the urandom init script.
I'm thinking about using urandom-bsd for the bsd side and seedrng for linux, but having them both provide urandom for backward compatibility.
@thesamesam  @zx2c4","I'm thinking about using urandom-bsd for the bsd side and seedrng for linux, but having them both provide urandom for backward compatibility.

That'd be a clean solution, and then symlinking them to urandom. Or have them both be called urandom, like they are now, but install different files for bsd and for linux. I think that'd be cleanest. But you run into problems with the Makefile doing this, while it's easier to do with Meson. Maybe you can figure out the build system stuff there, and then that'd be the cleanest approach I think.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,508,2022-03-28T22:13:33Z,2022-03-30T19:00:26Z,2022-03-30T19:18:12Z,CLOSED,False,112,36,3,https://github.com/williamh,Seedrng cleanup,1,[],https://github.com/OpenRC/openrc/pull/508,https://github.com/zx2c4,3,https://github.com/OpenRC/openrc/pull/508#issuecomment-1081404419,"This is most of the cleanup I want to do. All of these commits will be squashed into 1 before I merge.
The one thing left after this is reworking the urandom init script.
I'm thinking about using urandom-bsd for the bsd side and seedrng for linux, but having them both provide urandom for backward compatibility.
@thesamesam  @zx2c4","As well, you might want to import https://git.zx2c4.com/seedrng/commit/?id=05fedc64c18555f391dbf766630ab7f6f42d22d2 on top of these changes, since, by looking at your atexit stuff, you seem intent on having a good cleanup sequence at the end.

I went ahead and did this in an easy to merge PR here, so as not to clutter this set of cleanups: #509",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,509,2022-03-29T04:59:23Z,2022-03-29T21:21:28Z,2022-03-29T21:21:55Z,MERGED,True,10,5,1,https://github.com/zx2c4,seedrng: clean up fds and avoid -1 close on exit,1,[],https://github.com/OpenRC/openrc/pull/509,https://github.com/zx2c4,1,https://github.com/OpenRC/openrc/pull/509,This cleans up the exit path a little bit.,This cleans up the exit path a little bit.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,509,2022-03-29T04:59:23Z,2022-03-29T21:21:28Z,2022-03-29T21:21:55Z,MERGED,True,10,5,1,https://github.com/zx2c4,seedrng: clean up fds and avoid -1 close on exit,1,[],https://github.com/OpenRC/openrc/pull/509,https://github.com/zx2c4,2,https://github.com/OpenRC/openrc/pull/509#issuecomment-1082122790,This cleans up the exit path a little bit.,CC @williamh,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,510,2022-03-30T17:47:43Z,2022-03-31T03:08:30Z,2022-03-31T03:09:26Z,CLOSED,False,94,46,10,https://github.com/williamh,add seedrng service for Linux,2,[],https://github.com/OpenRC/openrc/pull/510,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/510,"This moves urandom to *bsd only and adds seedrng as a separate service
for Linux.
@thesamesam  @zx2c4","This moves urandom to *bsd only and adds seedrng as a separate service
for Linux.
@thesamesam  @zx2c4",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,510,2022-03-30T17:47:43Z,2022-03-31T03:08:30Z,2022-03-31T03:09:26Z,CLOSED,False,94,46,10,https://github.com/williamh,add seedrng service for Linux,2,[],https://github.com/OpenRC/openrc/pull/510,https://github.com/zx2c4,2,https://github.com/OpenRC/openrc/pull/510#issuecomment-1083484109,"This moves urandom to *bsd only and adds seedrng as a separate service
for Linux.
@thesamesam  @zx2c4",Maybe in this same PR you can also get rid of the env vars and make the new seedrng service use the cmdline opts?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,511,2022-03-31T03:16:36Z,2022-03-31T03:26:36Z,2022-03-31T03:26:36Z,CLOSED,False,6,18,1,https://github.com/zx2c4,seedrng: remove environment variables,1,[],https://github.com/OpenRC/openrc/pull/511,https://github.com/zx2c4,1,https://github.com/OpenRC/openrc/pull/511,"Now that we have the command line arguments, there's no need for the environment variables.","Now that we have the command line arguments, there's no need for the environment variables.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,511,2022-03-31T03:16:36Z,2022-03-31T03:26:36Z,2022-03-31T03:26:36Z,CLOSED,False,6,18,1,https://github.com/zx2c4,seedrng: remove environment variables,1,[],https://github.com/OpenRC/openrc/pull/511,https://github.com/zx2c4,2,https://github.com/OpenRC/openrc/pull/511#issuecomment-1084028780,"Now that we have the command line arguments, there's no need for the environment variables.",CC @williamh,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,512,2022-03-31T08:05:52Z,2022-03-31T14:58:04Z,2022-03-31T18:33:31Z,CLOSED,False,1,1,1,https://github.com/thesamesam,init.d/seedrng.in: fix rc_yesno typo,1,[],https://github.com/OpenRC/openrc/pull/512,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/512,Signed-off-by: Sam James sam@gentoo.org,Signed-off-by: Sam James sam@gentoo.org,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,514,2022-04-09T09:32:47Z,2022-04-09T18:36:48Z,2022-04-09T18:36:51Z,MERGED,True,1,0,1,https://github.com/mochaaP,binfmt: ignore empty lines (#492),1,[],https://github.com/OpenRC/openrc/pull/514,https://github.com/mochaaP,1,https://github.com/OpenRC/openrc/pull/514,"This Pull Request closes #492.
According to https://freedesktop.org/software/systemd/man/binfmt.d.html#Configuration%20Format:

Empty lines and lines beginning with "";"" and ""#"" are ignored.
Note that this means you may not use those symbols as the delimiter in binary format rules.","This Pull Request closes #492.
According to https://freedesktop.org/software/systemd/man/binfmt.d.html#Configuration%20Format:

Empty lines and lines beginning with "";"" and ""#"" are ignored.
Note that this means you may not use those symbols as the delimiter in binary format rules.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,514,2022-04-09T09:32:47Z,2022-04-09T18:36:48Z,2022-04-09T18:36:51Z,MERGED,True,1,0,1,https://github.com/mochaaP,binfmt: ignore empty lines (#492),1,[],https://github.com/OpenRC/openrc/pull/514,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/514#issuecomment-1094103702,"This Pull Request closes #492.
According to https://freedesktop.org/software/systemd/man/binfmt.d.html#Configuration%20Format:

Empty lines and lines beginning with "";"" and ""#"" are ignored.
Note that this means you may not use those symbols as the delimiter in binary format rules.",thx bud,True,{'HOORAY': ['https://github.com/mochaaP']}
OpenRC/openrc,https://github.com/OpenRC/openrc,515,2022-04-10T20:03:35Z,2022-04-16T20:13:08Z,2022-04-16T20:13:08Z,MERGED,True,141,112,15,https://github.com/williamh,rewrite tests,3,[],https://github.com/OpenRC/openrc/pull/515,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/515,"rewrite tests to work with meson
add tests to ci","rewrite tests to work with meson
add tests to ci",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,515,2022-04-10T20:03:35Z,2022-04-16T20:13:08Z,2022-04-16T20:13:08Z,MERGED,True,141,112,15,https://github.com/williamh,rewrite tests,3,[],https://github.com/OpenRC/openrc/pull/515,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/515#issuecomment-1094359511,"rewrite tests to work with meson
add tests to ci",This will fix #513  once it is merged.,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,515,2022-04-10T20:03:35Z,2022-04-16T20:13:08Z,2022-04-16T20:13:08Z,MERGED,True,141,112,15,https://github.com/williamh,rewrite tests,3,[],https://github.com/OpenRC/openrc/pull/515,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/515#issuecomment-1094359797,"rewrite tests to work with meson
add tests to ci","I need some folks from Debian/Ubuntu/Alpine to take a look and tell me what I'm missing.
The tests work on Gentoo, even when I rewrite the code to use all pre 0.56 meson code.
However, as you can see on this pr, the tests break CI for your distros.
Please let me know what I should do.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,515,2022-04-10T20:03:35Z,2022-04-16T20:13:08Z,2022-04-16T20:13:08Z,MERGED,True,141,112,15,https://github.com/williamh,rewrite tests,3,[],https://github.com/OpenRC/openrc/pull/515,https://github.com/eli-schwartz,4,https://github.com/OpenRC/openrc/pull/515#issuecomment-1094442741,"rewrite tests to work with meson
add tests to ci","Not a user of any of those, however I may have some suggestions.
It's a weird error message, but that being said -- this script uses /bin/bash instead of /bin/sh and Alpine prefers not to have bash in the base setup, while the BSDs typically put bash in /usr/local/bin due to hysterical raisins.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,515,2022-04-10T20:03:35Z,2022-04-16T20:13:08Z,2022-04-16T20:13:08Z,MERGED,True,141,112,15,https://github.com/williamh,rewrite tests,3,[],https://github.com/OpenRC/openrc/pull/515,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/515#issuecomment-1094531577,"rewrite tests to work with meson
add tests to ci","Hi @eli-schwartz , That was a typo actually, all of the test scripts are meant to be sh scripts. I made that change, and Alpine is the only one that is failing now. Can you take a look?
Thanks much,
William",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,515,2022-04-10T20:03:35Z,2022-04-16T20:13:08Z,2022-04-16T20:13:08Z,MERGED,True,141,112,15,https://github.com/williamh,rewrite tests,3,[],https://github.com/OpenRC/openrc/pull/515,https://github.com/TheOneric,6,https://github.com/OpenRC/openrc/pull/515#issuecomment-1098322405,"rewrite tests to work with meson
add tests to ci","It appears this test already failed at 0efc1b1 in Alpine.
Looking at the POSIX sed specification the issue appears to be that q does not take an exit code argument in POSIX, but can in GNU sed. Removing the 1 gets rid of the command parsing error, but of course also means it no longer errors on trailing empty lines. Curiously FreeBSD’s sed does not  document an argument for q either in its man page. Is the CI using GNU sed from ports instead of the system’s default sed?
If there’s no reason to avoid awk, the following should do the trick while using only POSIX features iinm:
--- a/test/check-trailing-newlines.sh
+++ b/test/check-trailing-newlines.sh
@@ -6,7 +6,7 @@ top_srcdir=${SOURCE_ROOT:-..}
 ebegin ""Checking trailing newlines in code""
 out=$(cd ${top_srcdir};
        for f in `find */ -name '*.[ch]'` ; do
-               sed -n -e :a -e '/^\n*$/{$q1;N;ba' -e '}' $f || echo $f
+               awk '/^$/ {ret=1; next} 1 {ret=0} END {exit ret}' $f || echo $f
        done)
 [ -z ""${out}"" ]
 eend $? ""Trailing newlines need to be deleted:""$'\n'""${out}""

(EDIT:) Or alternatively using tail might be faster: tail -n 1 $f | grep -Eq '^$' && echo $f",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,516,2022-04-15T16:58:03Z,2022-05-01T02:33:23Z,2022-05-01T03:04:16Z,CLOSED,False,43,43,32,https://github.com/jsoref,Spelling,36,[],https://github.com/OpenRC/openrc/pull/516,https://github.com/jsoref,1,https://github.com/OpenRC/openrc/pull/516,"This PR corrects misspellings identified by the check-spelling action.
The misspellings have been reported at jsoref@be59c73#commitcomment-71364823
The action reports that the changes in this PR would make it happy: jsoref@f0cdc94
Note: this PR does not include the action. If you're interested in running a spell check on every PR and push, that can be offered separately.","This PR corrects misspellings identified by the check-spelling action.
The misspellings have been reported at jsoref@be59c73#commitcomment-71364823
The action reports that the changes in this PR would make it happy: jsoref@f0cdc94
Note: this PR does not include the action. If you're interested in running a spell check on every PR and push, that can be offered separately.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,516,2022-04-15T16:58:03Z,2022-05-01T02:33:23Z,2022-05-01T03:04:16Z,CLOSED,False,43,43,32,https://github.com/jsoref,Spelling,36,[],https://github.com/OpenRC/openrc/pull/516,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/516#issuecomment-1110033922,"This PR corrects misspellings identified by the check-spelling action.
The misspellings have been reported at jsoref@be59c73#commitcomment-71364823
The action reports that the changes in this PR would make it happy: jsoref@f0cdc94
Note: this PR does not include the action. If you're interested in running a spell check on every PR and push, that can be offered separately.","Please rebase this on master. Also:

it should be windowkeys, not windowskeys, so drop that change (see /usr/share/keymaps/*)
You don't need the signed-off-by lines in OpenRC, so feel free to not use them.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,516,2022-04-15T16:58:03Z,2022-05-01T02:33:23Z,2022-05-01T03:04:16Z,CLOSED,False,43,43,32,https://github.com/jsoref,Spelling,36,[],https://github.com/OpenRC/openrc/pull/516,https://github.com/jsoref,3,https://github.com/OpenRC/openrc/pull/516#issuecomment-1110140549,"This PR corrects misspellings identified by the check-spelling action.
The misspellings have been reported at jsoref@be59c73#commitcomment-71364823
The action reports that the changes in this PR would make it happy: jsoref@f0cdc94
Note: this PR does not include the action. If you're interested in running a spell check on every PR and push, that can be offered separately.","I'm not at all attached to the signed-off-by lines, they're there because I regularly run into automation that screams at me when I don't have it. Quite happy to drop.
re: window-keys, what about this: #516 (comment) -- is $SET_WINDOWSKEYS correct? Should it be $SET_WINDOWKEYS?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,516,2022-04-15T16:58:03Z,2022-05-01T02:33:23Z,2022-05-01T03:04:16Z,CLOSED,False,43,43,32,https://github.com/jsoref,Spelling,36,[],https://github.com/OpenRC/openrc/pull/516,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/516#issuecomment-1111657432,"This PR corrects misspellings identified by the check-spelling action.
The misspellings have been reported at jsoref@be59c73#commitcomment-71364823
The action reports that the changes in this PR would make it happy: jsoref@f0cdc94
Note: this PR does not include the action. If you're interested in running a spell check on every PR and push, that can be offered separately.","I would leave that the way it is on master for now.
Thanks,
William",True,{'THUMBS_UP': ['https://github.com/jsoref']}
OpenRC/openrc,https://github.com/OpenRC/openrc,516,2022-04-15T16:58:03Z,2022-05-01T02:33:23Z,2022-05-01T03:04:16Z,CLOSED,False,43,43,32,https://github.com/jsoref,Spelling,36,[],https://github.com/OpenRC/openrc/pull/516,https://github.com/williamh,5,https://github.com/OpenRC/openrc/pull/516#issuecomment-1114065318,"This PR corrects misspellings identified by the check-spelling action.
The misspellings have been reported at jsoref@be59c73#commitcomment-71364823
The action reports that the changes in this PR would make it happy: jsoref@f0cdc94
Note: this PR does not include the action. If you're interested in running a spell check on every PR and push, that can be offered separately.","The ChangeLog is auto generated so changes to it will be overwritten. I'm also thinking about removing that file in the future since I don't have a way to autogenerate it with the new build system. I will squash and merge all commits except that one.
Thanks much for doing this and for keeping all of your commits small so I could review them easily.",True,{'THUMBS_UP': ['https://github.com/jsoref']}
OpenRC/openrc,https://github.com/OpenRC/openrc,517,2022-04-17T19:10:45Z,,2022-04-18T13:17:26Z,OPEN,False,164,97,3,https://github.com/sijanec,start-stop-daemon: fix: pam_start before chrooting,1,[],https://github.com/OpenRC/openrc/pull/517,https://github.com/sijanec,1,https://github.com/OpenRC/openrc/pull/517,"pam_start(3) must be called before chroot(2) for chroots that do not have PAM-related files present.
related bug report: http://bugs.gentoo.org/show_bug.cgi?id=292632
Example with patched openrc (on Gentoo):
rc-service sear.c start
 * /var/run/sear.c: creating directory
 * Starting sear.c ...

Service starts successfully. See below to see how is start-stop-daemon being run when this is executed.
Example with unpatched openrc (on Gentoo):
strace --follow-forks -o /tmp/out.txt start-stop-daemon --start --exec sear.c --chroot /var/run/sear.c --pidfile /pid --user searc:searc --make-pidfile
 * start-stop-daemon: pam error: Critical error - immediate abort
 * start-stop-daemon: failed to start `sear.c'

strace output uploaded to http://1507103400/krneki/strace.txt.
Note that on Gentoo openrc is a bit modified. I hope this is still an upstream issue and I'm not falsely submitting a PR, although that may be the case.","pam_start(3) must be called before chroot(2) for chroots that do not have PAM-related files present.
related bug report: http://bugs.gentoo.org/show_bug.cgi?id=292632
Example with patched openrc (on Gentoo):
rc-service sear.c start
 * /var/run/sear.c: creating directory
 * Starting sear.c ...

Service starts successfully. See below to see how is start-stop-daemon being run when this is executed.
Example with unpatched openrc (on Gentoo):
strace --follow-forks -o /tmp/out.txt start-stop-daemon --start --exec sear.c --chroot /var/run/sear.c --pidfile /pid --user searc:searc --make-pidfile
 * start-stop-daemon: pam error: Critical error - immediate abort
 * start-stop-daemon: failed to start `sear.c'

strace output uploaded to http://1507103400/krneki/strace.txt.
Note that on Gentoo openrc is a bit modified. I hope this is still an upstream issue and I'm not falsely submitting a PR, although that may be the case.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,517,2022-04-17T19:10:45Z,,2022-04-18T13:17:26Z,OPEN,False,164,97,3,https://github.com/sijanec,start-stop-daemon: fix: pam_start before chrooting,1,[],https://github.com/OpenRC/openrc/pull/517,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/517#issuecomment-1100939555,"pam_start(3) must be called before chroot(2) for chroots that do not have PAM-related files present.
related bug report: http://bugs.gentoo.org/show_bug.cgi?id=292632
Example with patched openrc (on Gentoo):
rc-service sear.c start
 * /var/run/sear.c: creating directory
 * Starting sear.c ...

Service starts successfully. See below to see how is start-stop-daemon being run when this is executed.
Example with unpatched openrc (on Gentoo):
strace --follow-forks -o /tmp/out.txt start-stop-daemon --start --exec sear.c --chroot /var/run/sear.c --pidfile /pid --user searc:searc --make-pidfile
 * start-stop-daemon: pam error: Critical error - immediate abort
 * start-stop-daemon: failed to start `sear.c'

strace output uploaded to http://1507103400/krneki/strace.txt.
Note that on Gentoo openrc is a bit modified. I hope this is still an upstream issue and I'm not falsely submitting a PR, although that may be the case.","It looks like supervise-daemon has the same issue, can you fix it there also?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,517,2022-04-17T19:10:45Z,,2022-04-18T13:17:26Z,OPEN,False,164,97,3,https://github.com/sijanec,start-stop-daemon: fix: pam_start before chrooting,1,[],https://github.com/OpenRC/openrc/pull/517,https://github.com/sijanec,3,https://github.com/OpenRC/openrc/pull/517#issuecomment-1100944608,"pam_start(3) must be called before chroot(2) for chroots that do not have PAM-related files present.
related bug report: http://bugs.gentoo.org/show_bug.cgi?id=292632
Example with patched openrc (on Gentoo):
rc-service sear.c start
 * /var/run/sear.c: creating directory
 * Starting sear.c ...

Service starts successfully. See below to see how is start-stop-daemon being run when this is executed.
Example with unpatched openrc (on Gentoo):
strace --follow-forks -o /tmp/out.txt start-stop-daemon --start --exec sear.c --chroot /var/run/sear.c --pidfile /pid --user searc:searc --make-pidfile
 * start-stop-daemon: pam error: Critical error - immediate abort
 * start-stop-daemon: failed to start `sear.c'

strace output uploaded to http://1507103400/krneki/strace.txt.
Note that on Gentoo openrc is a bit modified. I hope this is still an upstream issue and I'm not falsely submitting a PR, although that may be the case.","It looks like supervise-daemon has the same issue, can you fix it there also?

I did the same thing, but I did not test anything.
Another thing: stderr_process and redirect_stderr is also called after chrooting. It might be useful to execute the logger process before chrooting, to avoid including programs for logging and to avoid leaving logs in the chroot.
That would break setups that expect the current behavior, although I doubt that many people went through the hassle of setting up a logger in a chroot (?).
For example using --stderr-logger logger does not work in my case of a minimal chroot.
Perhaps four additional arguments could be added, --{stderr,stdout}{-logger,}-before-chroot for this.
EDIT: I made a simple modification that creates the above options. I tested --stderr-logger-before-chroot with logger on gentoo and it works: http://1507103400/krneki/start-stop-daemon.c
tail -fn3 /var/log/messages
Apr 17 22:52:03 varovalka root: [sear.c] SC_LOG_DEBUG sc_api()@src/api.c:58: contentType = application/xhtml+xml; charset=ISO-8859-1, redir = NULL
Apr 17 22:52:33 varovalka root: cleaning up!
Apr 17 22:52:33 varovalka root: [sear.c] SC_LOG_DEBUG sc_query_free()@src/structs.c:125: sc_query_free: gedxg

Chrooted service is able to output data to the syslog. I haven't commited this to patch-1 yet, because it might not have high enough quality to be merged (?). Shall I commit it?",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,519,2022-04-20T01:16:51Z,2022-04-20T20:49:27Z,2022-04-21T00:59:53Z,CLOSED,False,147,125,3,https://github.com/zx2c4,seedrng: incorporate various improvements,1,[],https://github.com/OpenRC/openrc/pull/519,https://github.com/zx2c4,1,https://github.com/OpenRC/openrc/pull/519,"There have been a number of subtle improvements and cleanups to seedrng,
including using openat and locking the directory fd instead of a
separate lock file. Also various stylistic cleanups.","There have been a number of subtle improvements and cleanups to seedrng,
including using openat and locking the directory fd instead of a
separate lock file. Also various stylistic cleanups.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,519,2022-04-20T01:16:51Z,2022-04-20T20:49:27Z,2022-04-21T00:59:53Z,CLOSED,False,147,125,3,https://github.com/zx2c4,seedrng: incorporate various improvements,1,[],https://github.com/OpenRC/openrc/pull/519,https://github.com/zx2c4,2,https://github.com/OpenRC/openrc/pull/519#issuecomment-1103326809,"There have been a number of subtle improvements and cleanups to seedrng,
including using openat and locking the directory fd instead of a
separate lock file. Also various stylistic cleanups.",CC @williamh @thesamesam,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,519,2022-04-20T01:16:51Z,2022-04-20T20:49:27Z,2022-04-21T00:59:53Z,CLOSED,False,147,125,3,https://github.com/zx2c4,seedrng: incorporate various improvements,1,[],https://github.com/OpenRC/openrc/pull/519,https://github.com/williamh,3,https://github.com/OpenRC/openrc/pull/519#issuecomment-1104266693,"There have been a number of subtle improvements and cleanups to seedrng,
including using openat and locking the directory fd instead of a
separate lock file. Also various stylistic cleanups.","@thesamesam  As I said on IRC, I'm curious what @zx2c4  reason was for changing the cleanup/atexit setup to gotos.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,519,2022-04-20T01:16:51Z,2022-04-20T20:49:27Z,2022-04-21T00:59:53Z,CLOSED,False,147,125,3,https://github.com/zx2c4,seedrng: incorporate various improvements,1,[],https://github.com/OpenRC/openrc/pull/519,https://github.com/zx2c4,4,https://github.com/OpenRC/openrc/pull/519#issuecomment-1104292839,"There have been a number of subtle improvements and cleanups to seedrng,
including using openat and locking the directory fd instead of a
separate lock file. Also various stylistic cleanups.","While not strictly necessary, I added in a free(seed_dir) to the end of main and made the function flow go into that. Of course we could omit the entire cleanup sequence, since the OS does that for us anyway. But since we're already closing those fds, might as well free the seed_dir var too.",True,{'THUMBS_UP': ['https://github.com/Flowdalic']}
OpenRC/openrc,https://github.com/OpenRC/openrc,520,2022-04-21T02:30:55Z,2022-04-21T17:47:36Z,2022-04-21T17:53:23Z,CLOSED,False,1,1,1,https://github.com/williamh,bring coverity action under the team,1,[],https://github.com/OpenRC/openrc/pull/520,https://github.com/williamh,1,https://github.com/OpenRC/openrc/pull/520,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,520,2022-04-21T02:30:55Z,2022-04-21T17:47:36Z,2022-04-21T17:53:23Z,CLOSED,False,1,1,1,https://github.com/williamh,bring coverity action under the team,1,[],https://github.com/OpenRC/openrc/pull/520,https://github.com/williamh,2,https://github.com/OpenRC/openrc/pull/520#issuecomment-1104645464,,"@vapier:
I need to know a couple of things about the coverity action.

What do I need to do to make this pr work?  I would rather have all of
the pieces of coverity set up under the team if we keep it.
Is there something I can install on my box that will provide the
same scan output? I'm not particularly fond of going to the web to get it.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,520,2022-04-21T02:30:55Z,2022-04-21T17:47:36Z,2022-04-21T17:53:23Z,CLOSED,False,1,1,1,https://github.com/williamh,bring coverity action under the team,1,[],https://github.com/OpenRC/openrc/pull/520,https://github.com/vapier,3,https://github.com/OpenRC/openrc/pull/520#issuecomment-1104648206,,what are you trying to fix ?,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,520,2022-04-21T02:30:55Z,2022-04-21T17:47:36Z,2022-04-21T17:53:23Z,CLOSED,False,1,1,1,https://github.com/williamh,bring coverity action under the team,1,[],https://github.com/OpenRC/openrc/pull/520,https://github.com/williamh,4,https://github.com/OpenRC/openrc/pull/520#issuecomment-1105518688,,"I've figured most of this out, so I won't merge the PR. I just need to take a look now at how to view the secrets.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,520,2022-04-21T02:30:55Z,2022-04-21T17:47:36Z,2022-04-21T17:53:23Z,CLOSED,False,1,1,1,https://github.com/williamh,bring coverity action under the team,1,[],https://github.com/OpenRC/openrc/pull/520,https://github.com/vapier,5,https://github.com/OpenRC/openrc/pull/520#issuecomment-1105531609,,"by (GH) design, you can't view the secrets once they've been added to GH:
https://github.com/OpenRC/openrc/settings/secrets/actions
but those values are trivial to lookup and/or change as documented in the action:
https://github.com/marketplace/actions/unofficial-coverity-scan#usage
forking the action itself like you've proposed here just doesn't make sense.  it's a generic action which anyone can use in any project by tweaking the action's settings.  which is why i'm trying to understand what the problem is you're running into.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,521,2022-04-21T15:47:12Z,2022-04-21T17:44:44Z,2022-04-21T17:48:19Z,MERGED,True,7,7,1,https://github.com/zx2c4,seedrng: use posix positional params to avoid space splitting,1,[],https://github.com/OpenRC/openrc/pull/521,https://github.com/zx2c4,1,https://github.com/OpenRC/openrc/pull/521,"The value of ${seed_dir} may have spaces in it, making the current
argument string building method unsafe. Instead, use positional
parameters to pass these arguments safely.","The value of ${seed_dir} may have spaces in it, making the current
argument string building method unsafe. Instead, use positional
parameters to pass these arguments safely.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,523,2022-04-27T09:33:45Z,,2022-04-28T14:54:47Z,OPEN,False,18,0,1,https://github.com/jsoref,Coverity needs secrets,1,[],https://github.com/OpenRC/openrc/pull/523,https://github.com/jsoref,1,https://github.com/OpenRC/openrc/pull/523,"Every time I fetch a new master from this repository, the coverity check fails like this:
https://github.com/jsoref/openrc/runs/6190299997?check_suite_focus=true
It is possible to configure a workflow to look before it leaps, like this:
https://github.com/jsoref/openrc/actions/runs/2232136346
For a bit of information about how this works, here's the documentation:
https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
The version of the flow I'm using is the longer-winded version. It is possible to do the work in the same job, but there are 5 steps that should be skipped, and it's a lot cleaner to skip a job w/ 5 steps than to add conditions to skip each of 5 steps.","Every time I fetch a new master from this repository, the coverity check fails like this:
https://github.com/jsoref/openrc/runs/6190299997?check_suite_focus=true
It is possible to configure a workflow to look before it leaps, like this:
https://github.com/jsoref/openrc/actions/runs/2232136346
For a bit of information about how this works, here's the documentation:
https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
The version of the flow I'm using is the longer-winded version. It is possible to do the work in the same job, but there are 5 steps that should be skipped, and it's a lot cleaner to skip a job w/ 5 steps than to add conditions to skip each of 5 steps.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,523,2022-04-27T09:33:45Z,,2022-04-28T14:54:47Z,OPEN,False,18,0,1,https://github.com/jsoref,Coverity needs secrets,1,[],https://github.com/OpenRC/openrc/pull/523,https://github.com/vapier,2,https://github.com/OpenRC/openrc/pull/523#issuecomment-1111791124,"Every time I fetch a new master from this repository, the coverity check fails like this:
https://github.com/jsoref/openrc/runs/6190299997?check_suite_focus=true
It is possible to configure a workflow to look before it leaps, like this:
https://github.com/jsoref/openrc/actions/runs/2232136346
For a bit of information about how this works, here's the documentation:
https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
The version of the flow I'm using is the longer-winded version. It is possible to do the work in the same job, but there are 5 steps that should be skipped, and it's a lot cleaner to skip a job w/ 5 steps than to add conditions to skip each of 5 steps.","if there is a misconfiguration or typo, then the action will silently & incorrectly pass in OpenRC/openrc which is not ideal.  would really prefer the workflow would be disabled on forks by default, and let people opt back in if they set up their own coverity instance to push to.  GH does that for scheduled workflows, but i think that's the only thing they support currently.
this is also a lot of boilerplate to maintain, and kind of sucks to spin up an entire container just to run some shell code.  the link you cite shows how to do this within an existing job without having to spawn an extra container/host -- can't the if be applied to the uses step ?
prob should move this to the action itself as an option.  something where the caller can declare that certain github repos must have things configured, and all others are allowed to exit early in case the token isn't set.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,523,2022-04-27T09:33:45Z,,2022-04-28T14:54:47Z,OPEN,False,18,0,1,https://github.com/jsoref,Coverity needs secrets,1,[],https://github.com/OpenRC/openrc/pull/523,https://github.com/jsoref,3,https://github.com/OpenRC/openrc/pull/523#issuecomment-1112087180,"Every time I fetch a new master from this repository, the coverity check fails like this:
https://github.com/jsoref/openrc/runs/6190299997?check_suite_focus=true
It is possible to configure a workflow to look before it leaps, like this:
https://github.com/jsoref/openrc/actions/runs/2232136346
For a bit of information about how this works, here's the documentation:
https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
The version of the flow I'm using is the longer-winded version. It is possible to do the work in the same job, but there are 5 steps that should be skipped, and it's a lot cleaner to skip a job w/ 5 steps than to add conditions to skip each of 5 steps.","I couldn't tell how useful the meson step was.
Yes, you can use the if in the uses step.
I suppose I could see about sending the action a PR. I try not to do a depth-first approach to problems, otherwise I'd never finish.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,523,2022-04-27T09:33:45Z,,2022-04-28T14:54:47Z,OPEN,False,18,0,1,https://github.com/jsoref,Coverity needs secrets,1,[],https://github.com/OpenRC/openrc/pull/523,https://github.com/jsoref,4,https://github.com/OpenRC/openrc/pull/523#issuecomment-1112088316,"Every time I fetch a new master from this repository, the coverity check fails like this:
https://github.com/jsoref/openrc/runs/6190299997?check_suite_focus=true
It is possible to configure a workflow to look before it leaps, like this:
https://github.com/jsoref/openrc/actions/runs/2232136346
For a bit of information about how this works, here's the documentation:
https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
The version of the flow I'm using is the longer-winded version. It is possible to do the work in the same job, but there are 5 steps that should be skipped, and it's a lot cleaner to skip a job w/ 5 steps than to add conditions to skip each of 5 steps.","I didn't intend to close the PR (I blame GitHub).
Fwiw, the action imagines both fields are required:
https://github.com/vapier/coverity-scan-action/blob/9bb274b991c374589e112e223df0d08da550cfda/action.yml#L11-L17
which means they should be willing to accept a thing to change how they respond to being missing. Sadly, they're likely to insist on failing, which would not address my problem.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,523,2022-04-27T09:33:45Z,,2022-04-28T14:54:47Z,OPEN,False,18,0,1,https://github.com/jsoref,Coverity needs secrets,1,[],https://github.com/OpenRC/openrc/pull/523,https://github.com/vapier,5,https://github.com/OpenRC/openrc/pull/523#issuecomment-1112258440,"Every time I fetch a new master from this repository, the coverity check fails like this:
https://github.com/jsoref/openrc/runs/6190299997?check_suite_focus=true
It is possible to configure a workflow to look before it leaps, like this:
https://github.com/jsoref/openrc/actions/runs/2232136346
For a bit of information about how this works, here's the documentation:
https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
The version of the flow I'm using is the longer-winded version. It is possible to do the work in the same job, but there are 5 steps that should be skipped, and it's a lot cleaner to skip a job w/ 5 steps than to add conditions to skip each of 5 steps.","Fwiw, the action imagines both fields are required:

not sure what you mean by imagines.  they are both required in order for coverity to work.

Sadly, they're likely to insist on failing, which would not address my problem.

i think i have a pretty good idea how they'll react.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,523,2022-04-27T09:33:45Z,,2022-04-28T14:54:47Z,OPEN,False,18,0,1,https://github.com/jsoref,Coverity needs secrets,1,[],https://github.com/OpenRC/openrc/pull/523,https://github.com/jsoref,6,https://github.com/OpenRC/openrc/pull/523#issuecomment-1112272697,"Every time I fetch a new master from this repository, the coverity check fails like this:
https://github.com/jsoref/openrc/runs/6190299997?check_suite_focus=true
It is possible to configure a workflow to look before it leaps, like this:
https://github.com/jsoref/openrc/actions/runs/2232136346
For a bit of information about how this works, here's the documentation:
https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
The version of the flow I'm using is the longer-winded version. It is possible to do the work in the same job, but there are 5 steps that should be skipped, and it's a lot cleaner to skip a job w/ 5 steps than to add conditions to skip each of 5 steps.","not sure what you mean by imagines. they are both required in order for coverity to work.

I think that some action authors may expect that by setting this flag their action won't be run if the fields are missing, but they're purely descriptive, GitHub will still try to run an action even if ""required"" fields are missing.

i think i have a pretty good idea how they'll react.

Oh. Heh. Sorry, I'm used to people using third party actions (I'm a first party, so I maintain an action and deploy it, as you can see).
I'll have a PR shortly, just fiddling w/ a few bits.
Note that as I don't have a coverity key, my ability to test this is limited.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,524,2022-05-07T20:08:21Z,2022-05-08T19:56:26Z,2022-05-08T20:41:38Z,MERGED,True,55,22,10,https://github.com/thesamesam,Various sanitizer fixes,14,[],https://github.com/OpenRC/openrc/pull/524,https://github.com/thesamesam,1,https://github.com/OpenRC/openrc/pull/524,,,True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,526,2022-05-16T03:26:20Z,,2022-05-16T03:26:20Z,OPEN,False,15,0,1,https://github.com/martinetd,init.d/root: add support for 'shared' fstab option on /,1,[],https://github.com/OpenRC/openrc/pull/526,https://github.com/martinetd,1,https://github.com/OpenRC/openrc/pull/526,"containers on linux might require filesystems to be mounted with
different propagation than the kernel default of 'private':
by setting 'shared' in fstab for / options, one can now make the
fs hierarchy shared.
Note we use 'rshared' to make other existing mounts shared as well
because the setting is contagious and it seemed more logical to
behave as if the setting was set on / immediately (and thus inherited
by other mounts)
This fixes #525.","containers on linux might require filesystems to be mounted with
different propagation than the kernel default of 'private':
by setting 'shared' in fstab for / options, one can now make the
fs hierarchy shared.
Note we use 'rshared' to make other existing mounts shared as well
because the setting is contagious and it seemed more logical to
behave as if the setting was set on / immediately (and thus inherited
by other mounts)
This fixes #525.",True,{}
OpenRC/openrc,https://github.com/OpenRC/openrc,527,2022-05-18T15:45:37Z,,2022-05-20T12:26:16Z,OPEN,False,16,0,1,https://github.com/sulincix,Block running service in chroot.,2,[],https://github.com/OpenRC/openrc/pull/527,https://github.com/sulincix,1,https://github.com/OpenRC/openrc/pull/527,"I implement chroot check like this
https://github.com/systemd/systemd/blob/main/src/basic/virt.c#L861
openrc-run must block if chrooted.","I implement chroot check like this
https://github.com/systemd/systemd/blob/main/src/basic/virt.c#L861
openrc-run must block if chrooted.",True,{'THUMBS_UP': ['https://github.com/Caticer']}
OpenRC/openrc,https://github.com/OpenRC/openrc,527,2022-05-18T15:45:37Z,,2022-05-20T12:26:16Z,OPEN,False,16,0,1,https://github.com/sulincix,Block running service in chroot.,2,[],https://github.com/OpenRC/openrc/pull/527,https://github.com/sulincix,2,https://github.com/OpenRC/openrc/pull/527#issuecomment-1130188773,"I implement chroot check like this
https://github.com/systemd/systemd/blob/main/src/basic/virt.c#L861
openrc-run must block if chrooted.",https://github.com/systemd/systemd/blob/main/src/systemctl/systemctl.c#L1127,True,{}
