trezor/trezor-core,https://github.com/trezor/trezor-core,1,2016-09-28T16:37:19Z,2016-11-08T11:32:14Z,2016-11-08T11:32:14Z,CLOSED,False,76,11,7,https://github.com/galuszkak,draft of proposal for autoloading and settings,1,[],https://github.com/trezor/trezor-core/pull/1,https://github.com/galuszkak,1,https://github.com/trezor/trezor-core/pull/1,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,1,2016-09-28T16:37:19Z,2016-11-08T11:32:14Z,2016-11-08T11:32:14Z,CLOSED,False,76,11,7,https://github.com/galuszkak,draft of proposal for autoloading and settings,1,[],https://github.com/trezor/trezor-core/pull/1,https://github.com/galuszkak,2,https://github.com/trezor/trezor-core/pull/1#issuecomment-250427188,,"Some review before end of hackathon will be helpful @prusnak ;), so I can say if I contributed anything on this hackathon ;)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,1,2016-09-28T16:37:19Z,2016-11-08T11:32:14Z,2016-11-08T11:32:14Z,CLOSED,False,76,11,7,https://github.com/galuszkak,draft of proposal for autoloading and settings,1,[],https://github.com/trezor/trezor-core/pull/1,https://github.com/jpochyla,3,https://github.com/trezor/trezor-core/pull/1#issuecomment-250473539,,"We were planning something similar, but i'd like to avoid importing the apps automatically at the moment. It boils down to simply __import__ing the configured modules from settings.config.APPS, and it seems like an overkill for now, and replacing the same amount of code with the same amount of configuration.
Nevertheless, a config or settings compile-time file seems like a good idea, i'll merge in some unfinished stuff later and merge it in!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,1,2016-09-28T16:37:19Z,2016-11-08T11:32:14Z,2016-11-08T11:32:14Z,CLOSED,False,76,11,7,https://github.com/galuszkak,draft of proposal for autoloading and settings,1,[],https://github.com/trezor/trezor-core/pull/1,https://github.com/galuszkak,4,https://github.com/trezor/trezor-core/pull/1#issuecomment-250478195,,"@jpochyla idea is to start moving configuration things from different apps into one place to easily change something without going into source code.
This is more convenient later when for user/developer it's just 3rd party app downloaded from PYPI and just adding setting that are needed for that app.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,1,2016-09-28T16:37:19Z,2016-11-08T11:32:14Z,2016-11-08T11:32:14Z,CLOSED,False,76,11,7,https://github.com/galuszkak,draft of proposal for autoloading and settings,1,[],https://github.com/trezor/trezor-core/pull/1,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/1#issuecomment-259113759,,Thanks for the concept idea. We'll rethink the idea of pluggable/configurable apps later. Now development is in rapid mode and we are breaking a lot of things and it's easier not to include extra stuff.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,3,2016-11-14T13:54:14Z,2016-11-14T14:21:45Z,2016-11-14T14:21:46Z,MERGED,True,11,5,1,https://github.com/karelbilek,Adding UDP ping,1,[],https://github.com/trezor/trezor-core/pull/3,https://github.com/karelbilek,1,https://github.com/trezor/trezor-core/pull/3,"It is useful for me (in the extension) to recognize if the emulator is turned on or off, so I can handle all the states gracefully.
So I added a hack - on a special ""ping"" message - 64 * 255 - I send back the same thing. It's purposefully away from the micropython code.","It is useful for me (in the extension) to recognize if the emulator is turned on or off, so I can handle all the states gracefully.
So I added a hack - on a special ""ping"" message - 64 * 255 - I send back the same thing. It's purposefully away from the micropython code.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,4,2017-03-24T13:31:15Z,2017-04-06T17:06:06Z,2017-04-06T17:07:18Z,MERGED,True,2147,112,17,https://github.com/jpochyla,Rewrite USB stack,23,[],https://github.com/trezor/trezor-core/pull/4,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/4,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,4,2017-03-24T13:31:15Z,2017-04-06T17:06:06Z,2017-04-06T17:07:18Z,MERGED,True,2147,112,17,https://github.com/jpochyla,Rewrite USB stack,23,[],https://github.com/trezor/trezor-core/pull/4,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/4#issuecomment-292240244,,Whoop de doo!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,5,2017-03-31T22:11:00Z,2017-03-31T22:22:25Z,2017-03-31T22:22:27Z,MERGED,True,61,5,12,https://github.com/jhoenicke,Put loader/firmware header into image,1,[],https://github.com/trezor/trezor-core/pull/5,https://github.com/jhoenicke,1,https://github.com/trezor/trezor-core/pull/5,"Put the 512 byte loader and firmware header into the image.
Fix the addresses of the vector table.","Put the 512 byte loader and firmware header into the image.
Fix the addresses of the vector table.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,7,2017-07-25T14:28:49Z,2017-08-15T16:14:15Z,2017-08-15T16:21:20Z,MERGED,True,1741,1758,63,https://github.com/jpochyla,Simplify wire & protobuf modules,15,[],https://github.com/trezor/trezor-core/pull/7,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/7,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/9,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/9#issuecomment-325990999,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/9#issuecomment-326415888,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","I was just wiring this up and noticed that it can't be using the STM32F405RGT6, that the micropython pyboard uses, because the display uses the ""E"" port. I didn't find mention of any other part number in the repo. Can you point me in the direction of the MCU that you are thinking of targeting? Do you really need more pins than the LQFP64 of the STM32F405RGT6 offers?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/9#issuecomment-326416187,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","We are using LQFP100 variant of STM32F405, because we need FSMC controller to push 8-bit parallel data into the display.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,5,https://github.com/trezor/trezor-core/pull/9#issuecomment-326416605,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","Ah, I was wondering that when I saw it was not supported on the STM32F405RG in the datasheet. I was hoping it was a mistake.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/9#issuecomment-326417342,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8",I was wondering if you tried SPI for the SD card and found it unacceptable? Using SPI instead makes it more accessible for hobbyist use and would allow the design to go back to the LQFP64.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/9#issuecomment-326417782,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","We used the reference design from pyboard and this used SDIO, but I think SPI should be also fine.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,8,https://github.com/trezor/trezor-core/pull/9#issuecomment-326418393,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","The pyboard uses a STM32F405RGT6 though. How could it use SDIO without the FSMC memory controller? FWIW, breakout boards with a display, touch, and SPI microSD are easier to get.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/prusnak,9,https://github.com/trezor/trezor-core/pull/9#issuecomment-326418699,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","We use FSMC for display, SDIO for SD card.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,10,https://github.com/trezor/trezor-core/pull/9#issuecomment-326419662,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","Doh, you're right, I mixed that up. The displays are commonly driven with SPI on the breakouts too. Any chance that SPI could be used for the display, or is that too slow?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/prusnak,11,https://github.com/trezor/trezor-core/pull/9#issuecomment-326420063,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","The display we picked does not have SPI, that's why we use FSMC. I think you could be fine with SPI as well. The change needed to support both should be really trivial in code.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,12,https://github.com/trezor/trezor-core/pull/9#issuecomment-326420311,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8",Interesting. Thanks for the help! I'll look into it.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/prusnak,13,https://github.com/trezor/trezor-core/pull/9#issuecomment-326420440,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8",I would say: try getting a breakout board with SPI display and SPI microSD and together we'll update the code to work on both platforms (SPI+SPI and FSMC+SDIO). Should not be a big issue at all.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,14,https://github.com/trezor/trezor-core/pull/9#issuecomment-326421121,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","Wow, cool, will do.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/mcudev,15,https://github.com/trezor/trezor-core/pull/9#issuecomment-326620877,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8","I found some parts that may match closer to the existing code. I'll update you after I try them.
Which version of the pyboard reference design did you use (I'm guessing 1.0)? The differences are listed at the bottom of https://store.micropython.org/#/features.
It looks like the code is configured for an 8 MHz high-speed external crystal. That's a good common frequency on available parts -- are you sticking with that?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,9,2017-08-29T13:29:40Z,2017-08-30T13:31:44Z,2017-09-01T23:10:18Z,MERGED,True,103,0,2,https://github.com/mcudev,docs: add reference hardware and dev kit info,1,[],https://github.com/trezor/trezor-core/pull/9,https://github.com/prusnak,16,https://github.com/trezor/trezor-core/pull/9#issuecomment-326702110,"This is a rough draft (not ready to be merged) to get the discussion going.
I'm trying to piece together what is needed from the code, and searching Google.
For example, there are some TODOs with questions.
Referencing #8",Pyboard v1.1 was used as the reference. But we use 8MHz crystal.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,10,2017-09-05T20:24:18Z,2017-09-05T20:44:23Z,2017-09-08T17:36:50Z,MERGED,True,27,25,3,https://github.com/mcudev,fix minor compile time bug and update docs,1,[],https://github.com/trezor/trezor-core/pull/10,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/10,"the compile time bug only occurs when compiling with DISPLAY_ILI9341V for that type of display.
the rest of the changes are comment adds and documentation updates.","the compile time bug only occurs when compiling with DISPLAY_ILI9341V for that type of display.
the rest of the changes are comment adds and documentation updates.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,10,2017-09-05T20:24:18Z,2017-09-05T20:44:23Z,2017-09-08T17:36:50Z,MERGED,True,27,25,3,https://github.com/mcudev,fix minor compile time bug and update docs,1,[],https://github.com/trezor/trezor-core/pull/10,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/10#issuecomment-327298409,"the compile time bug only occurs when compiling with DISPLAY_ILI9341V for that type of display.
the rest of the changes are comment adds and documentation updates.","Thank you!
Btw, I see you changed the dev board to Discovery Board from STM32.
This one is also quite interesting - 32F429IDISCOVERY - $10 more than your selection, but it already contains a ILI9341 display. Not sure how it is wired (most probably SPI, not 8-bit parallel) or if it has PWM backlight.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,10,2017-09-05T20:24:18Z,2017-09-05T20:44:23Z,2017-09-08T17:36:50Z,MERGED,True,27,25,3,https://github.com/mcudev,fix minor compile time bug and update docs,1,[],https://github.com/trezor/trezor-core/pull/10,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/10#issuecomment-327307040,"the compile time bug only occurs when compiling with DISPLAY_ILI9341V for that type of display.
the rest of the changes are comment adds and documentation updates.","Interesting, thanks for sharing the info. It looks like the 32F429IDISCOVERY has its display pins mapped to different GPIO ports/pins than we need though. In that respect separate display breakouts are more flexible. Also looks like a resistive touch panel.
I may change the dev board again. I've got some more stuff in the pipeline to try. One annoying thing about the current board is that it won't power through the micro-USB port. So you need both USB's plugged-in (which is kind of dorky).
EDIT: The 32F429IDISCOVERY has a resistive touch screen controller too that makes it usable via I2C. I'll try one to see how it works out.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,10,2017-09-05T20:24:18Z,2017-09-05T20:44:23Z,2017-09-08T17:36:50Z,MERGED,True,27,25,3,https://github.com/mcudev,fix minor compile time bug and update docs,1,[],https://github.com/trezor/trezor-core/pull/10,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/10#issuecomment-328167644,"the compile time bug only occurs when compiling with DISPLAY_ILI9341V for that type of display.
the rest of the changes are comment adds and documentation updates.","I just tried firing up the 32F429IDISCOVERY and found that the MCU interface mode is set with some tiny resistors to ""4-wire 8-bit serial I, SDA:In/Out"". Like you thought might be the case, I couldn't find a PWM pin either. If it has one, it's disconnected. On to the next one.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,11,2017-09-07T20:23:16Z,2017-09-07T21:10:17Z,2017-09-07T21:11:05Z,MERGED,True,43,31,7,https://github.com/mcudev,"better support ILI9341 testing, make tearing effect synch optional, minor fixes",1,[],https://github.com/trezor/trezor-core/pull/11,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/11,"My current test display is ILI9341 and doesn't have the tearing effect line connected.
The build changes scratch that itch while defaulting to what you had already.
Example usage:
make build_boardloader TEARING_EFFECT=1 DISPLAY_ILI9341V=1
I removed the red flash on fatal error to avoid possibly triggering epileptic seizures for people.
Code review question:
Does the ST7789V really use RGB while the ILI9341V uses BGR? I tested with the ILI9341 and BGR works for it. I don't have my ST7789V display yet.","My current test display is ILI9341 and doesn't have the tearing effect line connected.
The build changes scratch that itch while defaulting to what you had already.
Example usage:
make build_boardloader TEARING_EFFECT=1 DISPLAY_ILI9341V=1
I removed the red flash on fatal error to avoid possibly triggering epileptic seizures for people.
Code review question:
Does the ST7789V really use RGB while the ILI9341V uses BGR? I tested with the ILI9341 and BGR works for it. I don't have my ST7789V display yet.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,11,2017-09-07T20:23:16Z,2017-09-07T21:10:17Z,2017-09-07T21:11:05Z,MERGED,True,43,31,7,https://github.com/mcudev,"better support ILI9341 testing, make tearing effect synch optional, minor fixes",1,[],https://github.com/trezor/trezor-core/pull/11,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/11#issuecomment-327920142,"My current test display is ILI9341 and doesn't have the tearing effect line connected.
The build changes scratch that itch while defaulting to what you had already.
Example usage:
make build_boardloader TEARING_EFFECT=1 DISPLAY_ILI9341V=1
I removed the red flash on fatal error to avoid possibly triggering epileptic seizures for people.
Code review question:
Does the ST7789V really use RGB while the ILI9341V uses BGR? I tested with the ILI9341 and BGR works for it. I don't have my ST7789V display yet.",CI build failures are unrelated to these changes.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,11,2017-09-07T20:23:16Z,2017-09-07T21:10:17Z,2017-09-07T21:11:05Z,MERGED,True,43,31,7,https://github.com/mcudev,"better support ILI9341 testing, make tearing effect synch optional, minor fixes",1,[],https://github.com/trezor/trezor-core/pull/11,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/11#issuecomment-327921405,"My current test display is ILI9341 and doesn't have the tearing effect line connected.
The build changes scratch that itch while defaulting to what you had already.
Example usage:
make build_boardloader TEARING_EFFECT=1 DISPLAY_ILI9341V=1
I removed the red flash on fatal error to avoid possibly triggering epileptic seizures for people.
Code review question:
Does the ST7789V really use RGB while the ILI9341V uses BGR? I tested with the ILI9341 and BGR works for it. I don't have my ST7789V display yet.","Does the ST7789V really use RGB while the ILI9341V uses BGR?

IIRC ST7789V works correctly for both methods. I had some problems with my ILI9341 that it did not support RGB correctly, just BGR. So that's why we use RGB for ST7789V and BGR for ILI9341.
If RGB works for your ILI9341, I suggest to just use RGB for both. I will wait for you to try it out, and if it works, please change your commit to use RGB everywhere.
Also please rename TEARING_EFFECT to DISPLAY_VSYNC and change the logic of it (so DISLAY_VSYNC is 1 by default).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,11,2017-09-07T20:23:16Z,2017-09-07T21:10:17Z,2017-09-07T21:11:05Z,MERGED,True,43,31,7,https://github.com/mcudev,"better support ILI9341 testing, make tearing effect synch optional, minor fixes",1,[],https://github.com/trezor/trezor-core/pull/11,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/11#issuecomment-327925474,"My current test display is ILI9341 and doesn't have the tearing effect line connected.
The build changes scratch that itch while defaulting to what you had already.
Example usage:
make build_boardloader TEARING_EFFECT=1 DISPLAY_ILI9341V=1
I removed the red flash on fatal error to avoid possibly triggering epileptic seizures for people.
Code review question:
Does the ST7789V really use RGB while the ILI9341V uses BGR? I tested with the ILI9341 and BGR works for it. I don't have my ST7789V display yet.","Updated, thanks.
I was asking because my ILI9341V also seems to only work with BGR. I was wondering if we should use BGR only in display_set_orientation to reduce code? Depends on how the ST7789V works. I'll just try it when I get my ST7789V and compact the code later if I can.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,11,2017-09-07T20:23:16Z,2017-09-07T21:10:17Z,2017-09-07T21:11:05Z,MERGED,True,43,31,7,https://github.com/mcudev,"better support ILI9341 testing, make tearing effect synch optional, minor fixes",1,[],https://github.com/trezor/trezor-core/pull/11,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/11#issuecomment-327928420,"My current test display is ILI9341 and doesn't have the tearing effect line connected.
The build changes scratch that itch while defaulting to what you had already.
Example usage:
make build_boardloader TEARING_EFFECT=1 DISPLAY_ILI9341V=1
I removed the red flash on fatal error to avoid possibly triggering epileptic seizures for people.
Code review question:
Does the ST7789V really use RGB while the ILI9341V uses BGR? I tested with the ILI9341 and BGR works for it. I don't have my ST7789V display yet.",Thanks! Merged!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/13,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.","Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/13#issuecomment-328326949,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.","Please don't mix formatting (whitespace) changes and functional changes in one commit.
Also, can we rename lcd_pwm_timer_init to display_pwm_init?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/13#issuecomment-328339077,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.","Sure, updated. Tested with make clean build flash DISPLAY_ILI9341V=1 DISPLAY_VSYNC=0 STLINKv21=1",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/13#issuecomment-332637322,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.","I also rebased this onto master today. I think it's still good.
In addition to these changes, if you can keep PA7 low until display_pwm_init runs for the first time, then you can avoid the initial white flash/flicker too.
But, I think you'd have to add a switch that defaulted to low and could be controlled by a GPIO, or an external pull-down, maybe (the GPIO's are floating inputs at reset).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/13#issuecomment-332808491,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.",Is that intentional that display_init is never called?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/13#issuecomment-332811620,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.","It's called from the boardloader's main in embed/boardloader/main.c. Other than that, yes. It's the re-initializing over and over again that I was trying to avoid.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/mcudev,7,https://github.com/trezor/trezor-core/pull/13#issuecomment-332813992,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.",just rebased onto master again to pull in the latest changes,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/13#issuecomment-332814302,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.","It's called from the boardloader's main in embed/boardloader/main.c

makes sense, I missed that",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/prusnak,9,https://github.com/trezor/trezor-core/pull/13#issuecomment-332814574,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/13#issuecomment-332817260,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.","JFYI: it is now possible to compile firmware in standalone mode (to be flashed to location 0800000 and skipping the boardloader/bootloader completely) - I added a quick hack in cfe9c73 (+ fix d33ce4a) to detect this and call display_init in this case.
We might want to come up with nicer solution later, but I think it's OK for now.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,13,2017-09-08T02:10:07Z,2017-09-28T11:58:59Z,2017-09-28T12:14:46Z,MERGED,True,54,46,8,https://github.com/mcudev,"display related updates, flashing++",1,[],https://github.com/trezor/trezor-core/pull/13,https://github.com/mcudev,11,https://github.com/trezor/trezor-core/pull/13#issuecomment-332817857,"Smoothed out the display (re)initializing and clearing to reduce flashing during startup and clear the whole display for 240x320 displays.
Also, removing the display_init from the python binding fixes some sporadic artifacts on the trezor.io/start message (the initial screen after the 1 second green SL logo).

With these changes, there is only one white flash at the very beginning, before the display is initialized. That may be solvable by hardware design on the backight pin (just a guess, I did not try this).
Tested with:
make build_boardloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make build_bootloader DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1
make vendorheader
make build_firmware DISPLAY_VSYNC=0 DISPLAY_ILI9341V=1


Some function brace cleanup while I was touching the files.","OK, thanks for the heads-up.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,14,2017-09-08T12:00:45Z,2017-09-27T12:03:21Z,2017-09-27T15:11:37Z,MERGED,True,23,14,2,https://github.com/mcudev,transition to openocd from st-flash,1,[],https://github.com/trezor/trezor-core/pull/14,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/14,"openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1","openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,14,2017-09-08T12:00:45Z,2017-09-27T12:03:21Z,2017-09-27T15:11:37Z,MERGED,True,23,14,2,https://github.com/mcudev,transition to openocd from st-flash,1,[],https://github.com/trezor/trezor-core/pull/14,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/14#issuecomment-329734652,"openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1","Any chance this'll get pulled in? If not, I'll close it. Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,14,2017-09-08T12:00:45Z,2017-09-27T12:03:21Z,2017-09-27T15:11:37Z,MERGED,True,23,14,2,https://github.com/mcudev,transition to openocd from st-flash,1,[],https://github.com/trezor/trezor-core/pull/14,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/14#issuecomment-329735484,"openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1","Don't close please. I am on vacation. The PR looks fine at first sight,
will review later.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,14,2017-09-08T12:00:45Z,2017-09-27T12:03:21Z,2017-09-27T15:11:37Z,MERGED,True,23,14,2,https://github.com/mcudev,transition to openocd from st-flash,1,[],https://github.com/trezor/trezor-core/pull/14,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/14#issuecomment-332193979,"openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1",Just rebased onto master and is again merge-able :),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,14,2017-09-08T12:00:45Z,2017-09-27T12:03:21Z,2017-09-27T15:11:37Z,MERGED,True,23,14,2,https://github.com/mcudev,transition to openocd from st-flash,1,[],https://github.com/trezor/trezor-core/pull/14,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/14#issuecomment-332295672,"openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1",Please don't remove comments starting with ##. They are used to print help using make help.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,14,2017-09-08T12:00:45Z,2017-09-27T12:03:21Z,2017-09-27T15:11:37Z,MERGED,True,23,14,2,https://github.com/mcudev,transition to openocd from st-flash,1,[],https://github.com/trezor/trezor-core/pull/14,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/14#issuecomment-332295839,"openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1",Also is -H in call to sudo necessary?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,14,2017-09-08T12:00:45Z,2017-09-27T12:03:21Z,2017-09-27T15:11:37Z,MERGED,True,23,14,2,https://github.com/mcudev,transition to openocd from st-flash,1,[],https://github.com/trezor/trezor-core/pull/14,https://github.com/mcudev,7,https://github.com/trezor/trezor-core/pull/14#issuecomment-332490241,"openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1","I just put the comments back.
The -H allows pip cache to be used. Otherwise, you get a warning message that caching fails and it recommends to use -H. It works both ways. This way has cleaner screen output.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,14,2017-09-08T12:00:45Z,2017-09-27T12:03:21Z,2017-09-27T15:11:37Z,MERGED,True,23,14,2,https://github.com/mcudev,transition to openocd from st-flash,1,[],https://github.com/trezor/trezor-core/pull/14,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/14#issuecomment-332498948,"openocd is solid and this removes dependency on another tool, st-flash.
Tested:
make openocd STLINKv21=1
make flash STLINKv21=1
make flash_erase STLINKv21=1
make flash_boardloader STLINKv21=1
make flash_bootloader STLINKv21=1
make flash_firmware STLINKv21=1
make combine flash_combine STLINKv21=1",Looks nice. Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,15,2017-09-10T16:35:39Z,2017-09-28T11:31:03Z,2017-09-28T11:41:00Z,MERGED,True,1,80,1,https://github.com/mcudev,hardfault handler update,1,[],https://github.com/trezor/trezor-core/pull/15,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/15,"I noticed this while working on the startup code. To me, it seems unsafe to print memory to the display when that could potentially include sensitive things. What do you think?","I noticed this while working on the startup code. To me, it seems unsafe to print memory to the display when that could potentially include sensitive things. What do you think?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,15,2017-09-10T16:35:39Z,2017-09-28T11:31:03Z,2017-09-28T11:41:00Z,MERGED,True,1,80,1,https://github.com/mcudev,hardfault handler update,1,[],https://github.com/trezor/trezor-core/pull/15,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/15#issuecomment-332809110,"I noticed this while working on the startup code. To me, it seems unsafe to print memory to the display when that could potentially include sensitive things. What do you think?","Right, this was useful during developing the board, but not a good idea to have this included now.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,16,2017-09-18T22:34:48Z,2017-09-19T16:10:57Z,2017-09-19T17:32:36Z,CLOSED,False,3,3,2,https://github.com/mcudev,propose re-mapping sd card detect pin from PC13 to PC7,1,[],https://github.com/trezor/trezor-core/pull/16,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/16,"@prusnak This PR proposes re-mapping the microSD Socket SD_CARDDETECT pin from PC13 to PC7.
I found a dev board that has a microSD socket that supports SDIO mode.
Hopefully I'm still early enough in the process that the reference hardware design can still be changed to accomodate this.
Example dev board: http://www.ebay.com/itm/STM32F407VGT6-ARM-Cortex-M4-32bit-MCU-Core-Development-Board-STM32F4Discovery-/182450698403","@prusnak This PR proposes re-mapping the microSD Socket SD_CARDDETECT pin from PC13 to PC7.
I found a dev board that has a microSD socket that supports SDIO mode.
Hopefully I'm still early enough in the process that the reference hardware design can still be changed to accomodate this.
Example dev board: http://www.ebay.com/itm/STM32F407VGT6-ARM-Cortex-M4-32bit-MCU-Core-Development-Board-STM32F4Discovery-/182450698403",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,16,2017-09-18T22:34:48Z,2017-09-19T16:10:57Z,2017-09-19T17:32:36Z,CLOSED,False,3,3,2,https://github.com/mcudev,propose re-mapping sd card detect pin from PC13 to PC7,1,[],https://github.com/trezor/trezor-core/pull/16,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/16#issuecomment-330590493,"@prusnak This PR proposes re-mapping the microSD Socket SD_CARDDETECT pin from PC13 to PC7.
I found a dev board that has a microSD socket that supports SDIO mode.
Hopefully I'm still early enough in the process that the reference hardware design can still be changed to accomodate this.
Example dev board: http://www.ebay.com/itm/STM32F407VGT6-ARM-Cortex-M4-32bit-MCU-Core-Development-Board-STM32F4Discovery-/182450698403","Sorry, we cannot change the pin anymore. The hardware for T2 is fixed already. :-(",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,16,2017-09-18T22:34:48Z,2017-09-19T16:10:57Z,2017-09-19T17:32:36Z,CLOSED,False,3,3,2,https://github.com/mcudev,propose re-mapping sd card detect pin from PC13 to PC7,1,[],https://github.com/trezor/trezor-core/pull/16,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/16#issuecomment-330613921,"@prusnak This PR proposes re-mapping the microSD Socket SD_CARDDETECT pin from PC13 to PC7.
I found a dev board that has a microSD socket that supports SDIO mode.
Hopefully I'm still early enough in the process that the reference hardware design can still be changed to accomodate this.
Example dev board: http://www.ebay.com/itm/STM32F407VGT6-ARM-Cortex-M4-32bit-MCU-Core-Development-Board-STM32F4Discovery-/182450698403",Thanks for considering. It turns out that this dev board has poor quality / mechanical design anyways. The USB connector popped off after only a few days of light use.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,17,2017-09-27T16:45:35Z,2017-09-27T16:49:57Z,2017-09-27T16:53:50Z,MERGED,True,24,9,1,https://github.com/mcudev,docs: hardware updates,1,[],https://github.com/trezor/trezor-core/pull/17,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/17,"The most important change here is syncing up the LCD_PWM PB13 to PA7 change.
Also added some more specifics.
By the way, what does SBU stand for? embed/trezorhal/sbu.h","The most important change here is syncing up the LCD_PWM PB13 to PA7 change.
Also added some more specifics.
By the way, what does SBU stand for? embed/trezorhal/sbu.h",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,17,2017-09-27T16:45:35Z,2017-09-27T16:49:57Z,2017-09-27T16:53:50Z,MERGED,True,24,9,1,https://github.com/mcudev,docs: hardware updates,1,[],https://github.com/trezor/trezor-core/pull/17,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/17#issuecomment-332585439,"The most important change here is syncing up the LCD_PWM PB13 to PA7 change.
Also added some more specifics.
By the way, what does SBU stand for? embed/trezorhal/sbu.h","T2 has USB-C port. SBU pins are ""SideBand Use"" - see https://en.wikipedia.org/wiki/USB-C
We decided to wire these to MCU for future use.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,17,2017-09-27T16:45:35Z,2017-09-27T16:49:57Z,2017-09-27T16:53:50Z,MERGED,True,24,9,1,https://github.com/mcudev,docs: hardware updates,1,[],https://github.com/trezor/trezor-core/pull/17,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/17#issuecomment-332586041,"The most important change here is syncing up the LCD_PWM PB13 to PA7 change.
Also added some more specifics.
By the way, what does SBU stand for? embed/trezorhal/sbu.h","oh, cool! thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,18,2017-09-28T16:59:00Z,2017-09-29T07:49:52Z,2017-09-29T10:08:53Z,MERGED,True,488,147,5,https://github.com/mcudev,issue 12: startup related changes,1,[],https://github.com/trezor/trezor-core/pull/18,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/18,"@prusnak Here's some work towards #12. It's ok, but, I'm not sure I totally like it. I have some other versions that don't depend on the HAL and are way smaller and incorporate a lot of other review notes that I haven't mentioned yet. Maybe take a glance and let me know your reaction / first opinion, please.
I think the reason why I removed the exception handlers in this commit (from a few weeks ago IIRC) was because the code they run is not reliable during those exceptions anyways.","@prusnak Here's some work towards #12. It's ok, but, I'm not sure I totally like it. I have some other versions that don't depend on the HAL and are way smaller and incorporate a lot of other review notes that I haven't mentioned yet. Maybe take a glance and let me know your reaction / first opinion, please.
I think the reason why I removed the exception handlers in this commit (from a few weeks ago IIRC) was because the code they run is not reliable during those exceptions anyways.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,18,2017-09-28T16:59:00Z,2017-09-29T07:49:52Z,2017-09-29T10:08:53Z,MERGED,True,488,147,5,https://github.com/mcudev,issue 12: startup related changes,1,[],https://github.com/trezor/trezor-core/pull/18,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/18#issuecomment-332903554,"@prusnak Here's some work towards #12. It's ok, but, I'm not sure I totally like it. I have some other versions that don't depend on the HAL and are way smaller and incorporate a lot of other review notes that I haven't mentioned yet. Maybe take a glance and let me know your reaction / first opinion, please.
I think the reason why I removed the exception handlers in this commit (from a few weeks ago IIRC) was because the code they run is not reliable during those exceptions anyways.","Generally, I really like the direction this is going.
We are in the process of finalizing boardloader (by Monday), so you are more than welcome to share other stuff that needs review.
Just a really small nitpick, can we keep FLASH/CCMRAM/RAM uppercase and rx/wal lowercase to stay consistent with micropython?
Also, now that we dropped __fatal_error from all handlers, can we at least indicate we are in the default_handler (simple pattern using display PWM LED comes to mind). What do you think?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,18,2017-09-28T16:59:00Z,2017-09-29T07:49:52Z,2017-09-29T10:08:53Z,MERGED,True,488,147,5,https://github.com/mcudev,issue 12: startup related changes,1,[],https://github.com/trezor/trezor-core/pull/18,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/18#issuecomment-332906401,"@prusnak Here's some work towards #12. It's ok, but, I'm not sure I totally like it. I have some other versions that don't depend on the HAL and are way smaller and incorporate a lot of other review notes that I haven't mentioned yet. Maybe take a glance and let me know your reaction / first opinion, please.
I think the reason why I removed the exception handlers in this commit (from a few weeks ago IIRC) was because the code they run is not reliable during those exceptions anyways.","Also NMI_Handler, SVC_Handler and DebugMon_Handler were empty, but now they will result in infinite loop. Is that intended? I am fine, just want to confirm this.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,18,2017-09-28T16:59:00Z,2017-09-29T07:49:52Z,2017-09-29T10:08:53Z,MERGED,True,488,147,5,https://github.com/mcudev,issue 12: startup related changes,1,[],https://github.com/trezor/trezor-core/pull/18,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/18#issuecomment-332922040,"@prusnak Here's some work towards #12. It's ok, but, I'm not sure I totally like it. I have some other versions that don't depend on the HAL and are way smaller and incorporate a lot of other review notes that I haven't mentioned yet. Maybe take a glance and let me know your reaction / first opinion, please.
I think the reason why I removed the exception handlers in this commit (from a few weeks ago IIRC) was because the code they run is not reliable during those exceptions anyways.","Just a really small nitpick, can we keep FLASH/CCMRAM/RAM uppercase and rx/wal lowercase to stay consistent with micropython?

Done, just rebased and force pushed.

Also, now that we dropped __fatal_error from all handlers, can we at least indicate we are in the default_handler (simple pattern using display PWM LED comes to mind).

Maybe in things after the boardloader. But early in the boardloader, no. IIRC, I came to this conclusion while playing around glitching my clock (while testing some stuff I had done around the clock security system). On my dev board, it was really easy to trigger the CSS by touching a specific pin (I guess my finger had enough capacitance to throw off the HSE).

Also NMI_Handler, SVC_Handler and DebugMon_Handler were empty, but now they will result in infinite loop. Is that intended?

Yes, I figured that was one safe way to fail and is easy to review :) Definitely the case for NMI because that's where the CSS fails to.

We are in the process of finalizing boardloader (by Monday), so you are more than welcome to share other stuff that needs review.

OK, I'll need to dig out my notes and other code tonight and refresh my thinking (it's been like a month). Generally, things I had on my mind were:

Setup clocks (clock security system too) and RNG before wiping memory?
Any other peripheral local memories that should/could be cleared? e.g.- display, usb, touch sensor, fsmc, sdio?
port over mature memory_protect and RNG using code from TREZORv1
glitching protection and checks (I've read some of the public literature about v1 attacks)
there's an awful lot that goes into linking the boardloader right now that is unnecessary; could definitely be cleaned up; want the boardloader very small and well understood because that's what gets write protected.
and more, but I forget right now...",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,18,2017-09-28T16:59:00Z,2017-09-29T07:49:52Z,2017-09-29T10:08:53Z,MERGED,True,488,147,5,https://github.com/mcudev,issue 12: startup related changes,1,[],https://github.com/trezor/trezor-core/pull/18,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/18#issuecomment-333057251,"@prusnak Here's some work towards #12. It's ok, but, I'm not sure I totally like it. I have some other versions that don't depend on the HAL and are way smaller and incorporate a lot of other review notes that I haven't mentioned yet. Maybe take a glance and let me know your reaction / first opinion, please.
I think the reason why I removed the exception handlers in this commit (from a few weeks ago IIRC) was because the code they run is not reliable during those exceptions anyways.","Done, just rebased and force pushed.

Thank you, just merged!

On my dev board, it was really easy to trigger the CSS by touching a specific pin (I guess my finger had enough capacitance to throw off the HSE).

That's how I was checking whether CSS works on T1  :-)

OK, I'll need to dig out my notes and other code

Please do, would love to see these!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,19,2017-09-29T16:06:13Z,2017-09-29T16:13:31Z,2017-09-29T16:13:35Z,MERGED,True,9,8,1,https://github.com/baloo,u2f: Adds Gandi.net as verified app,1,[],https://github.com/trezor/trezor-core/pull/19,https://github.com/baloo,1,https://github.com/trezor/trezor-core/pull/19,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,19,2017-09-29T16:06:13Z,2017-09-29T16:13:31Z,2017-09-29T16:13:35Z,MERGED,True,9,8,1,https://github.com/baloo,u2f: Adds Gandi.net as verified app,1,[],https://github.com/trezor/trezor-core/pull/19,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/19#issuecomment-333170187,,Thank you!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,20,2017-09-30T01:30:06Z,2017-09-30T07:46:12Z,2017-09-30T11:14:02Z,MERGED,True,10,2,1,https://github.com/mcudev,Makefile GDB updates,1,[],https://github.com/trezor/trezor-core/pull/20,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/20,"I find these helpful.
I was thinking about leaving the original gdb rule alone, in-case you like how it works for firmware debugging (or making gdb_firmware the new gdb).
I tend to prefer the automatic monitor reset halt and lack of confirmation prompts as well as separate targets for different symbols.","I find these helpful.
I was thinking about leaving the original gdb rule alone, in-case you like how it works for firmware debugging (or making gdb_firmware the new gdb).
I tend to prefer the automatic monitor reset halt and lack of confirmation prompts as well as separate targets for different symbols.",True,{'THUMBS_UP': ['https://github.com/jpochyla']}
trezor/trezor-core,https://github.com/trezor/trezor-core,20,2017-09-30T01:30:06Z,2017-09-30T07:46:12Z,2017-09-30T11:14:02Z,MERGED,True,10,2,1,https://github.com/mcudev,Makefile GDB updates,1,[],https://github.com/trezor/trezor-core/pull/20,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/20#issuecomment-333291255,"I find these helpful.
I was thinking about leaving the original gdb rule alone, in-case you like how it works for firmware debugging (or making gdb_firmware the new gdb).
I tend to prefer the automatic monitor reset halt and lack of confirmation prompts as well as separate targets for different symbols.",Spot on! Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/21,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/21#issuecomment-333378389,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:",I just squashed a new commit into this that fixes the firmware_standalone for firmware0 and then uses it to call SystemInit too.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/21#issuecomment-333507212,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","I tested the clock switching in SystemInit on my scope via the clock-out function. I was able to verify the HSE at 8 MHz, the PLL at 168 MHz, the HSI going off, and the HSI coming back on in the NMI handler after triggering the clock security system with my finger.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/21#issuecomment-334129458,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:",@prusnak any thoughts? yes/no/maybe/uninteresting :) ?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/21#issuecomment-334483761,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","Sorry, swamped by other stuff. Left questions/suggestions in review. This work is much appreciated!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/21#issuecomment-334600462,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:",No worries. I don't see your comments. Did you submit them?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/21#issuecomment-334600545,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","Just now, sorry :-/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/21#issuecomment-334701343,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:",Splendid! Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/mcudev,9,https://github.com/trezor/trezor-core/pull/21#issuecomment-334775396,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","Just adding a note to include some clock testing code (that I used with my scope to verify the clocks --
this can be put in embed/trezorhal/stm32_system.c and then a call can be added to SystemInit etc...):
void setup_clockout(void) {
    // reference RM0090 section 7.3.3 and 7.2.10
    // MCO1 prescaler = division by 2 (due to 100 MHz GPIO limit), MCO1 clock = PLL, should see 84 MHz (= 168 MHz / 2) on PA8 when everything is setup
    RCC->CFGR |= (4 << RCC_CFGR_MCO1PRE_Pos) | (3 << RCC_CFGR_MCO1_Pos);
    // MCO1 prescaler = no division, MCO1 clock = HSE, should see 8 MHz on PA8 when everything is setup
    // RCC->CFGR |= (0 << RCC_CFGR_MCO1PRE_Pos) | (2 << RCC_CFGR_MCO1_Pos);
    // enable GPIO A clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    // configure PA8 to MCO1; alternate function push pull mode
    GPIOA->OSPEEDR |= (3 << GPIO_OSPEEDR_OSPEED8_Pos); // very high speed
    GPIOA->PUPDR |= (0 << GPIO_PUPDR_PUPD8_Pos); // no pull-up, no pull-down
    GPIOA->AFR[1] |= (0 << GPIO_AFRH_AFSEL8_Pos); // MCO1 / AF0
    GPIOA->MODER |= (2 << GPIO_MODER_MODER8_Pos); // alternate function mode
}",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/jpochyla,10,https://github.com/trezor/trezor-core/pull/21#issuecomment-340462738,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","@mcudev @prusnak I think we'll need to introduce spread spectrum for the main PLL (right now, we're over the EMI limit at 48Mhz). Should be done through RCC_SSCGR register before enabling the PLL. Any experience or thoughts? How would it interact with CSS?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/mcudev,11,https://github.com/trezor/trezor-core/pull/21#issuecomment-340471122,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","Thanks! Any info you have in this area is helpful as I don't know much about it. The CSS is only active after the HSE is stable in SystemInit which I believe was after line 28. Since this has to be done before enabling the PLL, I would guess it should not have a bad interaction with the CSS.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/jpochyla,12,https://github.com/trezor/trezor-core/pull/21#issuecomment-340754508,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","Ok, thanks! Added in c632f94, device boots, we'll see what it does to EMI tests.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/mcudev,13,https://github.com/trezor/trezor-core/pull/21#issuecomment-340797745,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","The peripherals that use the 48MHz clock output from the main PLL are the TRNG, SDIO, and USB (BTW, the clock tree is at the bottom of https://github.com/trezor/trezor-core/blob/master/docs/hardware.md).
I'm 75% sure that it has to be 48MHz because of the USB HS (the USB FS needs 48 MHz +- 0.25% -- I did not see a statement about the USB HS, but assume it's the same because we're using FS in HS mode). Can you say anymore about the test that fails? I'm just trying to see if maybe there's another way to solve it besides adding clock jitter (if we have to, then ok, I just want to know more).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,21,2017-09-30T15:46:36Z,2017-10-06T09:09:22Z,2017-11-03T18:30:55Z,MERGED,True,34,52,6,https://github.com/mcudev,clock related updates,1,[],https://github.com/trezor/trezor-core/pull/21,https://github.com/prusnak,14,https://github.com/trezor/trezor-core/pull/21#issuecomment-341789870,"It seemed awkward/unclean to me that the clock configs were forgotten and reconfigured by each stage (the SystemInit + periph_init combo).
My preference is to setup the clock tree early in the boardloader and then be able to bring peripherals online that depend on the clock settings, like the TRNG, as needed.
For example, I'd like to have the HSE+PLL+CSS and TRNG setup before wiping memory so that it could be wiped with unpredictable data (a follow-up to this PR).
These changes configure the PLLM  to 4 instead of 8 to adhere to the RM0090, section 7.3.2, recommendation that: ""The software has to set these bits correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.""
Some unnecessary stuff, like re-enabling the CCMRAM and the stack alignment thing (reference PM0214 section 4.4.7) (note: the STKALIGN is in every version of Cortex-M4, it was not present/set on some revisions of Cortex-M3 according to the revision history in the ""Cortex-M3 Processor Technical Reference Manual""), is removed too (there is much more that can be removed, but I wanted to keep the PR reviewable).
Since the HAL is C code, and has the .data/.bss dependencies, it can't be used early in the boardloader because of the memory wiping either. Its clock updating code also has unnecessary dependencies on the SysTick.
Here's the clock tree that this configures:","Followup: TREZOR passed EMC tests for CE even without the SSC enabled, but with SSC enabled, the EMC values are 50% lower. Not sure what the values are needed for FCC, but if there are no hardware issues with SSC enabled, I think we should keep that enabled. I wonder if that helps against (potential) side channel attacks ...",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,22,2017-09-30T18:22:51Z,2017-09-30T21:20:22Z,2017-09-30T21:48:47Z,MERGED,True,1,1,1,https://github.com/mcudev,flash_otp_write: uninitialized variable,1,[],https://github.com/trezor/trezor-core/pull/22,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/22,"I was compiling a test with CCFLAGS='-Og ' instead of CCFLAGS='-Os ' and came across this:
embed/trezorhal/flash.c: In function 'flash_otp_write':
embed/trezorhal/flash.c:123:12: error: 'ret' may be used uninitialized in this function [-Werror=maybe-uninitialized]
     return ret;","I was compiling a test with CCFLAGS='-Og ' instead of CCFLAGS='-Os ' and came across this:
embed/trezorhal/flash.c: In function 'flash_otp_write':
embed/trezorhal/flash.c:123:12: error: 'ret' may be used uninitialized in this function [-Werror=maybe-uninitialized]
     return ret;",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,22,2017-09-30T18:22:51Z,2017-09-30T21:20:22Z,2017-09-30T21:48:47Z,MERGED,True,1,1,1,https://github.com/mcudev,flash_otp_write: uninitialized variable,1,[],https://github.com/trezor/trezor-core/pull/22,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/22#issuecomment-333336654,"I was compiling a test with CCFLAGS='-Og ' instead of CCFLAGS='-Os ' and came across this:
embed/trezorhal/flash.c: In function 'flash_otp_write':
embed/trezorhal/flash.c:123:12: error: 'ret' may be used uninitialized in this function [-Werror=maybe-uninitialized]
     return ret;",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,23,2017-10-02T15:01:30Z,2017-10-02T15:35:20Z,2017-10-02T17:44:49Z,MERGED,True,10,0,1,https://github.com/tsusanka,readme: how to compile on Arch Linux,1,[],https://github.com/trezor/trezor-core/pull/23,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/23,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,24,2017-10-04T11:42:08Z,2017-10-06T09:11:44Z,2017-10-06T10:55:11Z,MERGED,True,55,13,6,https://github.com/mcudev,rng updates,3,[],https://github.com/trezor/trezor-core/pull/24,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/24,"This is a follow-up (it builds on) to #21 (that is, this PR is smaller when diffed against #21).
This enables the RNG during SystemInit and uses its output to make a first pass over memory. It also changes to follow guidance from the reference manual RM0090 section 24.3.1 about the FIPS continuous random number generator test (as was done in TREZOR v1).","This is a follow-up (it builds on) to #21 (that is, this PR is smaller when diffed against #21).
This enables the RNG during SystemInit and uses its output to make a first pass over memory. It also changes to follow guidance from the reference manual RM0090 section 24.3.1 about the FIPS continuous random number generator test (as was done in TREZOR v1).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,24,2017-10-04T11:42:08Z,2017-10-06T09:11:44Z,2017-10-06T10:55:11Z,MERGED,True,55,13,6,https://github.com/mcudev,rng updates,3,[],https://github.com/trezor/trezor-core/pull/24,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/24#issuecomment-334486620,"This is a follow-up (it builds on) to #21 (that is, this PR is smaller when diffed against #21).
This enables the RNG during SystemInit and uses its output to make a first pass over memory. It also changes to follow guidance from the reference manual RM0090 section 24.3.1 about the FIPS continuous random number generator test (as was done in TREZOR v1).",Looks nice - just two comments wrt using CMSIS constants instead of pure values.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,24,2017-10-04T11:42:08Z,2017-10-06T09:11:44Z,2017-10-06T10:55:11Z,MERGED,True,55,13,6,https://github.com/mcudev,rng updates,3,[],https://github.com/trezor/trezor-core/pull/24,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/24#issuecomment-334600177,"This is a follow-up (it builds on) to #21 (that is, this PR is smaller when diffed against #21).
This enables the RNG during SystemInit and uses its output to make a first pass over memory. It also changes to follow guidance from the reference manual RM0090 section 24.3.1 about the FIPS continuous random number generator test (as was done in TREZOR v1).",I don't see your comments. Did you submit them?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,24,2017-10-04T11:42:08Z,2017-10-06T09:11:44Z,2017-10-06T10:55:11Z,MERGED,True,55,13,6,https://github.com/mcudev,rng updates,3,[],https://github.com/trezor/trezor-core/pull/24,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/24#issuecomment-334600404,"This is a follow-up (it builds on) to #21 (that is, this PR is smaller when diffed against #21).
This enables the RNG during SystemInit and uses its output to make a first pass over memory. It also changes to follow guidance from the reference manual RM0090 section 24.3.1 about the FIPS continuous random number generator test (as was done in TREZOR v1).","Just now, sorry :-/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,24,2017-10-04T11:42:08Z,2017-10-06T09:11:44Z,2017-10-06T10:55:11Z,MERGED,True,55,13,6,https://github.com/mcudev,rng updates,3,[],https://github.com/trezor/trezor-core/pull/24,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/24#issuecomment-334701995,"This is a follow-up (it builds on) to #21 (that is, this PR is smaller when diffed against #21).
This enables the RNG during SystemInit and uses its output to make a first pass over memory. It also changes to follow guidance from the reference manual RM0090 section 24.3.1 about the FIPS continuous random number generator test (as was done in TREZOR v1).",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,25,2017-10-05T21:40:18Z,2017-10-06T09:11:59Z,2017-10-06T10:54:52Z,MERGED,True,2,1,2,https://github.com/mcudev,display: minor backlight handling,1,[],https://github.com/trezor/trezor-core/pull/25,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/25,"Minor updates for your last commit 6693d61


turn on back light to see copy_sdcard output


use display_backlight instead of display_set_backlight to also set DISPLAY_BACKLIGHT in embed/extmod/modtrezorui/display.c


I like that you turn the back light off earlier now. Good idea. At one point, I was thinking of only using the display in the boardloader for the SD card update messages. But, then I decided to leave the display init in the normal boot flow so that the display memory got cleared.","Minor updates for your last commit 6693d61


turn on back light to see copy_sdcard output


use display_backlight instead of display_set_backlight to also set DISPLAY_BACKLIGHT in embed/extmod/modtrezorui/display.c


I like that you turn the back light off earlier now. Good idea. At one point, I was thinking of only using the display in the boardloader for the SD card update messages. But, then I decided to leave the display init in the normal boot flow so that the display memory got cleared.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,25,2017-10-05T21:40:18Z,2017-10-06T09:11:59Z,2017-10-06T10:54:52Z,MERGED,True,2,1,2,https://github.com/mcudev,display: minor backlight handling,1,[],https://github.com/trezor/trezor-core/pull/25,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/25#issuecomment-334701972,"Minor updates for your last commit 6693d61


turn on back light to see copy_sdcard output


use display_backlight instead of display_set_backlight to also set DISPLAY_BACKLIGHT in embed/extmod/modtrezorui/display.c


I like that you turn the back light off earlier now. Good idea. At one point, I was thinking of only using the display in the boardloader for the SD card update messages. But, then I decided to leave the display init in the normal boot flow so that the display memory got cleared.",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,26,2017-10-08T17:41:16Z,2017-10-08T21:48:45Z,2017-10-08T23:59:43Z,MERGED,True,183,399,8,https://github.com/mcudev,"boardloader and bootloader: vector table, jump_to, etc...",4,[],https://github.com/trezor/trezor-core/pull/26,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/26,"This PR is a progression of commits that are prep work for #12 and also adds memory clearing upon leaving a stage of code, like was done by v1 (performed within jump_to).
I left the commits unsquashed to aid reviewing (it may help to be able to diff between commits to see the progression).
For the vector table updates, this command helps for reviewing:
arm-none-eabi-objdump -D -z -j .vector_table build/boardloader/boardloader.elf
Some of this will get cleaner as the work for #12 gets done too.","This PR is a progression of commits that are prep work for #12 and also adds memory clearing upon leaving a stage of code, like was done by v1 (performed within jump_to).
I left the commits unsquashed to aid reviewing (it may help to be able to diff between commits to see the progression).
For the vector table updates, this command helps for reviewing:
arm-none-eabi-objdump -D -z -j .vector_table build/boardloader/boardloader.elf
Some of this will get cleaner as the work for #12 gets done too.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,26,2017-10-08T17:41:16Z,2017-10-08T21:48:45Z,2017-10-08T23:59:43Z,MERGED,True,183,399,8,https://github.com/mcudev,"boardloader and bootloader: vector table, jump_to, etc...",4,[],https://github.com/trezor/trezor-core/pull/26,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/26#issuecomment-335041172,"This PR is a progression of commits that are prep work for #12 and also adds memory clearing upon leaving a stage of code, like was done by v1 (performed within jump_to).
I left the commits unsquashed to aid reviewing (it may help to be able to diff between commits to see the progression).
For the vector table updates, this command helps for reviewing:
arm-none-eabi-objdump -D -z -j .vector_table build/boardloader/boardloader.elf
Some of this will get cleaner as the work for #12 gets done too.",Looks great! Keeping the commit unsquashed. Thank you!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,26,2017-10-08T17:41:16Z,2017-10-08T21:48:45Z,2017-10-08T23:59:43Z,MERGED,True,183,399,8,https://github.com/mcudev,"boardloader and bootloader: vector table, jump_to, etc...",4,[],https://github.com/trezor/trezor-core/pull/26,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/26#issuecomment-335041594,"This PR is a progression of commits that are prep work for #12 and also adds memory clearing upon leaving a stage of code, like was done by v1 (performed within jump_to).
I left the commits unsquashed to aid reviewing (it may help to be able to diff between commits to see the progression).
For the vector table updates, this command helps for reviewing:
arm-none-eabi-objdump -D -z -j .vector_table build/boardloader/boardloader.elf
Some of this will get cleaner as the work for #12 gets done too.",Also moving stuff from embed/common to embed/trezorhal in 7bbfba1 (trezorhal is basically common),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,27,2017-10-09T11:40:43Z,2017-10-09T15:43:39Z,2017-10-09T16:11:58Z,MERGED,True,15,35,1,https://github.com/mcudev,boardloader: simplify linker script,1,[],https://github.com/trezor/trezor-core/pull/27,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/27,"More prep work that makes the bootloader and firmware portion of #12 much easier.
I have the bootloader and firmware updates too. I'll push them up later, after more testing.


The changes like this: KEEP(*(.text)) to *(.text*)
These changes fully embrace the link time garbage colector and remove the reliance on details of orphan section processing.
The script is much more intuitive now. I'm glad that I got past the mental block that made me want to use the KEEPs.


Sets the FLASH memory region to 32K to act as a build time assertion on the code size


Other trivial general cleanup/simplifying changes","More prep work that makes the bootloader and firmware portion of #12 much easier.
I have the bootloader and firmware updates too. I'll push them up later, after more testing.


The changes like this: KEEP(*(.text)) to *(.text*)
These changes fully embrace the link time garbage colector and remove the reliance on details of orphan section processing.
The script is much more intuitive now. I'm glad that I got past the mental block that made me want to use the KEEPs.


Sets the FLASH memory region to 32K to act as a build time assertion on the code size


Other trivial general cleanup/simplifying changes",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,27,2017-10-09T11:40:43Z,2017-10-09T15:43:39Z,2017-10-09T16:11:58Z,MERGED,True,15,35,1,https://github.com/mcudev,boardloader: simplify linker script,1,[],https://github.com/trezor/trezor-core/pull/27,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/27#issuecomment-335197168,"More prep work that makes the bootloader and firmware portion of #12 much easier.
I have the bootloader and firmware updates too. I'll push them up later, after more testing.


The changes like this: KEEP(*(.text)) to *(.text*)
These changes fully embrace the link time garbage colector and remove the reliance on details of orphan section processing.
The script is much more intuitive now. I'm glad that I got past the mental block that made me want to use the KEEPs.


Sets the FLASH memory region to 32K to act as a build time assertion on the code size


Other trivial general cleanup/simplifying changes",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,28,2017-10-09T12:40:49Z,2017-10-09T15:44:58Z,2017-10-09T16:12:04Z,MERGED,True,81,918,5,https://github.com/mcudev,bootloader: issue #12,1,[],https://github.com/trezor/trezor-core/pull/28,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/28,bootloader portion,bootloader portion,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,28,2017-10-09T12:40:49Z,2017-10-09T15:44:58Z,2017-10-09T16:12:04Z,MERGED,True,81,918,5,https://github.com/mcudev,bootloader: issue #12,1,[],https://github.com/trezor/trezor-core/pull/28,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/28#issuecomment-335197555,bootloader portion,Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,29,2017-10-09T14:53:48Z,2017-10-09T15:45:46Z,2017-10-09T16:11:48Z,MERGED,True,147,997,5,https://github.com/mcudev,firmware: issue #12,1,[],https://github.com/trezor/trezor-core/pull/29,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/29,firmware portion,firmware portion,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,29,2017-10-09T14:53:48Z,2017-10-09T15:45:46Z,2017-10-09T16:11:48Z,MERGED,True,147,997,5,https://github.com/mcudev,firmware: issue #12,1,[],https://github.com/trezor/trezor-core/pull/29,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/29#issuecomment-335197768,firmware portion,Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,30,2017-10-09T17:39:42Z,2017-10-09T17:55:55Z,2017-10-09T20:52:07Z,MERGED,True,26,12,3,https://github.com/mcudev,"boardloader, bootloader, firmware stage switching updates for issue #12",1,[],https://github.com/trezor/trezor-core/pull/30,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/30,these should close out #12,these should close out #12,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,30,2017-10-09T17:39:42Z,2017-10-09T17:55:55Z,2017-10-09T20:52:07Z,MERGED,True,26,12,3,https://github.com/mcudev,"boardloader, bootloader, firmware stage switching updates for issue #12",1,[],https://github.com/trezor/trezor-core/pull/30,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/30#issuecomment-335235418,these should close out #12,Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,32,2017-10-09T22:52:59Z,2017-10-12T18:00:59Z,2017-10-12T18:01:32Z,CLOSED,False,30,2,2,https://github.com/mcudev,boardloader: memset_reg_wrap,1,['deferred'],https://github.com/trezor/trezor-core/pull/32,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/32,"I had this idea floating around... instead of just writing an unpredictable value, also write the range starting from an unpredictable place. I just imagine this making a power analysis type side channel more difficult. It's probably already sufficiently difficult. But, I figured that I'd throw this out there anyways.
Basically, this picks a random word-aligned address within the range to start at, then writes the memory range in a circular way until it gets back to where it started.
Uses separate random values for the data value to write and the address to begin at.","I had this idea floating around... instead of just writing an unpredictable value, also write the range starting from an unpredictable place. I just imagine this making a power analysis type side channel more difficult. It's probably already sufficiently difficult. But, I figured that I'd throw this out there anyways.
Basically, this picks a random word-aligned address within the range to start at, then writes the memory range in a circular way until it gets back to where it started.
Uses separate random values for the data value to write and the address to begin at.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,32,2017-10-09T22:52:59Z,2017-10-12T18:00:59Z,2017-10-12T18:01:32Z,CLOSED,False,30,2,2,https://github.com/mcudev,boardloader: memset_reg_wrap,1,['deferred'],https://github.com/trezor/trezor-core/pull/32,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/32#issuecomment-335459600,"I had this idea floating around... instead of just writing an unpredictable value, also write the range starting from an unpredictable place. I just imagine this making a power analysis type side channel more difficult. It's probably already sufficiently difficult. But, I figured that I'd throw this out there anyways.
Basically, this picks a random word-aligned address within the range to start at, then writes the memory range in a circular way until it gets back to where it started.
Uses separate random values for the data value to write and the address to begin at.",@jhoenicke What do you think? Is this something that makes sense? It complicates the code a lot and we are already quite paranoid as we erase the memory with random number instead of zeroes.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,32,2017-10-09T22:52:59Z,2017-10-12T18:00:59Z,2017-10-12T18:01:32Z,CLOSED,False,30,2,2,https://github.com/mcudev,boardloader: memset_reg_wrap,1,['deferred'],https://github.com/trezor/trezor-core/pull/32,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/32#issuecomment-336217786,"I had this idea floating around... instead of just writing an unpredictable value, also write the range starting from an unpredictable place. I just imagine this making a power analysis type side channel more difficult. It's probably already sufficiently difficult. But, I figured that I'd throw this out there anyways.
Basically, this picks a random word-aligned address within the range to start at, then writes the memory range in a circular way until it gets back to where it started.
Uses separate random values for the data value to write and the address to begin at.","Closing; this is not that important, was just an idea.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,33,2017-10-10T10:33:48Z,2017-10-10T12:40:58Z,2017-10-10T12:59:10Z,MERGED,True,12,0,1,https://github.com/mcudev,jump_to: reset registers to zero,1,[],https://github.com/trezor/trezor-core/pull/33,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/33,"we zero out memory, might as well get the registers too. the motivation behind this was that i wanted to make sure that the rng data used for memory clearing was not leaked to a later stage.","we zero out memory, might as well get the registers too. the motivation behind this was that i wanted to make sure that the rng data used for memory clearing was not leaked to a later stage.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,33,2017-10-10T10:33:48Z,2017-10-10T12:40:58Z,2017-10-10T12:59:10Z,MERGED,True,12,0,1,https://github.com/mcudev,jump_to: reset registers to zero,1,[],https://github.com/trezor/trezor-core/pull/33,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/33#issuecomment-335459277,"we zero out memory, might as well get the registers too. the motivation behind this was that i wanted to make sure that the rng data used for memory clearing was not leaked to a later stage.",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,35,2017-10-10T13:55:31Z,2017-10-10T18:56:16Z,2017-10-10T23:08:12Z,MERGED,True,16,2,2,https://github.com/mcudev,doc: STLINK_VER and boardloader description,1,[],https://github.com/trezor/trezor-core/pull/35,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/35,STLINK_VER related documentation update and some notes about the boardloader,STLINK_VER related documentation update and some notes about the boardloader,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,35,2017-10-10T13:55:31Z,2017-10-10T18:56:16Z,2017-10-10T23:08:12Z,MERGED,True,16,2,2,https://github.com/mcudev,doc: STLINK_VER and boardloader description,1,[],https://github.com/trezor/trezor-core/pull/35,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/35#issuecomment-335573295,STLINK_VER related documentation update and some notes about the boardloader,Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,36,2017-10-10T23:21:28Z,2017-10-11T10:58:37Z,2017-10-11T12:12:28Z,MERGED,True,18,0,3,https://github.com/mcudev,boardloader: issue #34,1,[],https://github.com/trezor/trezor-core/pull/36,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/36,"I looked into the peripherals mentioned in #34. Only the USB OTG HS seemed interesting as far as harboring data.
I found that I needed to enable the clock to the peripheral in order to read and write the data, but that was it. I didn't have to set it up more. So, clock it, write the local memory, and unclock it.
I don't think that leaves any unintended side-effects. It doesn't appear to as far as I tested.
Here's a good test:

in gdb, find nothing with: find 0x40060000,0x4007ffff,""arise! chikun arise!""
./trezorctl ping ""arise! chikun arise!""
in gdb, find a bunch of references with the same find command from step 1
Reset the device and step through and pay attention to when the data becomes visible and when it goes away. You'll notice that overwriting the 4KB block removes all of the references due to how the FIFO memory is mapped.","I looked into the peripherals mentioned in #34. Only the USB OTG HS seemed interesting as far as harboring data.
I found that I needed to enable the clock to the peripheral in order to read and write the data, but that was it. I didn't have to set it up more. So, clock it, write the local memory, and unclock it.
I don't think that leaves any unintended side-effects. It doesn't appear to as far as I tested.
Here's a good test:

in gdb, find nothing with: find 0x40060000,0x4007ffff,""arise! chikun arise!""
./trezorctl ping ""arise! chikun arise!""
in gdb, find a bunch of references with the same find command from step 1
Reset the device and step through and pay attention to when the data becomes visible and when it goes away. You'll notice that overwriting the 4KB block removes all of the references due to how the FIFO memory is mapped.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,36,2017-10-10T23:21:28Z,2017-10-11T10:58:37Z,2017-10-11T12:12:28Z,MERGED,True,18,0,3,https://github.com/mcudev,boardloader: issue #34,1,[],https://github.com/trezor/trezor-core/pull/36,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/36#issuecomment-335773549,"I looked into the peripherals mentioned in #34. Only the USB OTG HS seemed interesting as far as harboring data.
I found that I needed to enable the clock to the peripheral in order to read and write the data, but that was it. I didn't have to set it up more. So, clock it, write the local memory, and unclock it.
I don't think that leaves any unintended side-effects. It doesn't appear to as far as I tested.
Here's a good test:

in gdb, find nothing with: find 0x40060000,0x4007ffff,""arise! chikun arise!""
./trezorctl ping ""arise! chikun arise!""
in gdb, find a bunch of references with the same find command from step 1
Reset the device and step through and pay attention to when the data becomes visible and when it goes away. You'll notice that overwriting the 4KB block removes all of the references due to how the FIFO memory is mapped.",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,37,2017-10-10T23:41:18Z,2017-10-11T10:50:11Z,2017-10-11T12:12:10Z,MERGED,True,7,12,1,https://github.com/mcudev,docs: dev kit hardware updates mainly usb,1,[],https://github.com/trezor/trezor-core/pull/37,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/37,Mainly updating the dev kit info to use USB HS. Some other minor updates too.,Mainly updating the dev kit info to use USB HS. Some other minor updates too.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,37,2017-10-10T23:41:18Z,2017-10-11T10:50:11Z,2017-10-11T12:12:10Z,MERGED,True,7,12,1,https://github.com/mcudev,docs: dev kit hardware updates mainly usb,1,[],https://github.com/trezor/trezor-core/pull/37,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/37#issuecomment-335771657,Mainly updating the dev kit info to use USB HS. Some other minor updates too.,Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,38,2017-10-11T12:33:05Z,2017-10-11T14:17:18Z,2017-10-11T16:48:41Z,MERGED,True,1,1,1,https://github.com/mcudev,Makefile: vendor target add --recursive and --force,1,[],https://github.com/trezor/trezor-core/pull/38,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/38,"This saves me time and makes sure that I am working with fresh versions of the files. Not doing both has bitten me a couple of times.
Without the recursive, you don't get all the submodules. Without force, you can have stale versions of the files.
This shows what additional modules the recursive part picks up:
> git submodule update --init
Submodule 'vendor/micropython' (https://github.com/trezor/micropython.git) registered for path 'vendor/micropython'
Submodule 'vendor/nanopb' (https://github.com/nanopb/nanopb.git) registered for path 'vendor/nanopb'
Submodule 'vendor/norcow' (https://github.com/trezor/norcow.git) registered for path 'vendor/norcow'
Submodule 'vendor/trezor-common' (https://github.com/trezor/trezor-common.git) registered for path 'vendor/trezor-common'
Submodule 'vendor/trezor-crypto' (https://github.com/trezor/trezor-crypto.git) registered for path 'vendor/trezor-crypto'
Submodule 'vendor/trezor-qrenc' (https://github.com/trezor/trezor-qrenc.git) registered for path 'vendor/trezor-qrenc'
Submodule path 'vendor/micropython': checked out '6c5f953c797ff32911901215b8d0b7615d84ece8'
Submodule path 'vendor/nanopb': checked out '2c4c3948a9f9e2eb573706a354b89a55cb85639f'
Submodule path 'vendor/norcow': checked out '8d2843aeb58f8fd0fc5162a11d5be1e2575776ca'
Submodule path 'vendor/trezor-common': checked out '0001cb18c065d7f3aacd6f8d7c5be42cd7477a94'
Submodule path 'vendor/trezor-crypto': checked out 'ea227fd805fb97aa2fa76a89bfd05d44012d153f'
Submodule path 'vendor/trezor-qrenc': checked out '9344f23d869030fbe7261d3361862eaba12b9975'
> git submodule update --init --recursive
Submodule path 'vendor/micropython/lib/axtls': checked out '9b3092eb3b4b230a63c0c389bfbd3c55682c620f'
Submodule path 'vendor/micropython/lib/berkeley-db-1.xx': checked out 'dab957dacddcbf6cbc85d42df62e189e4877bb72'
Submodule path 'vendor/micropython/lib/libffi': checked out 'e9de7e35f2339598b16cbb375f9992643ed81209'
Submodule path 'vendor/micropython/lib/lwip': checked out '5b8b5d459e7dd890724515bbfad86c705234f9ec'
Submodule path 'vendor/micropython/lib/stm32lib': checked out 'd2bcfda543d3b99361e44112aca929225bdcc07f'","This saves me time and makes sure that I am working with fresh versions of the files. Not doing both has bitten me a couple of times.
Without the recursive, you don't get all the submodules. Without force, you can have stale versions of the files.
This shows what additional modules the recursive part picks up:
> git submodule update --init
Submodule 'vendor/micropython' (https://github.com/trezor/micropython.git) registered for path 'vendor/micropython'
Submodule 'vendor/nanopb' (https://github.com/nanopb/nanopb.git) registered for path 'vendor/nanopb'
Submodule 'vendor/norcow' (https://github.com/trezor/norcow.git) registered for path 'vendor/norcow'
Submodule 'vendor/trezor-common' (https://github.com/trezor/trezor-common.git) registered for path 'vendor/trezor-common'
Submodule 'vendor/trezor-crypto' (https://github.com/trezor/trezor-crypto.git) registered for path 'vendor/trezor-crypto'
Submodule 'vendor/trezor-qrenc' (https://github.com/trezor/trezor-qrenc.git) registered for path 'vendor/trezor-qrenc'
Submodule path 'vendor/micropython': checked out '6c5f953c797ff32911901215b8d0b7615d84ece8'
Submodule path 'vendor/nanopb': checked out '2c4c3948a9f9e2eb573706a354b89a55cb85639f'
Submodule path 'vendor/norcow': checked out '8d2843aeb58f8fd0fc5162a11d5be1e2575776ca'
Submodule path 'vendor/trezor-common': checked out '0001cb18c065d7f3aacd6f8d7c5be42cd7477a94'
Submodule path 'vendor/trezor-crypto': checked out 'ea227fd805fb97aa2fa76a89bfd05d44012d153f'
Submodule path 'vendor/trezor-qrenc': checked out '9344f23d869030fbe7261d3361862eaba12b9975'
> git submodule update --init --recursive
Submodule path 'vendor/micropython/lib/axtls': checked out '9b3092eb3b4b230a63c0c389bfbd3c55682c620f'
Submodule path 'vendor/micropython/lib/berkeley-db-1.xx': checked out 'dab957dacddcbf6cbc85d42df62e189e4877bb72'
Submodule path 'vendor/micropython/lib/libffi': checked out 'e9de7e35f2339598b16cbb375f9992643ed81209'
Submodule path 'vendor/micropython/lib/lwip': checked out '5b8b5d459e7dd890724515bbfad86c705234f9ec'
Submodule path 'vendor/micropython/lib/stm32lib': checked out 'd2bcfda543d3b99361e44112aca929225bdcc07f'",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,38,2017-10-11T12:33:05Z,2017-10-11T14:17:18Z,2017-10-11T16:48:41Z,MERGED,True,1,1,1,https://github.com/mcudev,Makefile: vendor target add --recursive and --force,1,[],https://github.com/trezor/trezor-core/pull/38,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/38#issuecomment-335825504,"This saves me time and makes sure that I am working with fresh versions of the files. Not doing both has bitten me a couple of times.
Without the recursive, you don't get all the submodules. Without force, you can have stale versions of the files.
This shows what additional modules the recursive part picks up:
> git submodule update --init
Submodule 'vendor/micropython' (https://github.com/trezor/micropython.git) registered for path 'vendor/micropython'
Submodule 'vendor/nanopb' (https://github.com/nanopb/nanopb.git) registered for path 'vendor/nanopb'
Submodule 'vendor/norcow' (https://github.com/trezor/norcow.git) registered for path 'vendor/norcow'
Submodule 'vendor/trezor-common' (https://github.com/trezor/trezor-common.git) registered for path 'vendor/trezor-common'
Submodule 'vendor/trezor-crypto' (https://github.com/trezor/trezor-crypto.git) registered for path 'vendor/trezor-crypto'
Submodule 'vendor/trezor-qrenc' (https://github.com/trezor/trezor-qrenc.git) registered for path 'vendor/trezor-qrenc'
Submodule path 'vendor/micropython': checked out '6c5f953c797ff32911901215b8d0b7615d84ece8'
Submodule path 'vendor/nanopb': checked out '2c4c3948a9f9e2eb573706a354b89a55cb85639f'
Submodule path 'vendor/norcow': checked out '8d2843aeb58f8fd0fc5162a11d5be1e2575776ca'
Submodule path 'vendor/trezor-common': checked out '0001cb18c065d7f3aacd6f8d7c5be42cd7477a94'
Submodule path 'vendor/trezor-crypto': checked out 'ea227fd805fb97aa2fa76a89bfd05d44012d153f'
Submodule path 'vendor/trezor-qrenc': checked out '9344f23d869030fbe7261d3361862eaba12b9975'
> git submodule update --init --recursive
Submodule path 'vendor/micropython/lib/axtls': checked out '9b3092eb3b4b230a63c0c389bfbd3c55682c620f'
Submodule path 'vendor/micropython/lib/berkeley-db-1.xx': checked out 'dab957dacddcbf6cbc85d42df62e189e4877bb72'
Submodule path 'vendor/micropython/lib/libffi': checked out 'e9de7e35f2339598b16cbb375f9992643ed81209'
Submodule path 'vendor/micropython/lib/lwip': checked out '5b8b5d459e7dd890724515bbfad86c705234f9ec'
Submodule path 'vendor/micropython/lib/stm32lib': checked out 'd2bcfda543d3b99361e44112aca929225bdcc07f'",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,39,2017-10-11T21:27:47Z,2017-10-11T21:36:08Z,2017-10-11T21:37:42Z,MERGED,True,4,3,4,https://github.com/mcudev,stm32f427 sram bigger,1,[],https://github.com/trezor/trezor-core/pull/39,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/39,just reviewing today's changes and saw this could be updated,just reviewing today's changes and saw this could be updated,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,39,2017-10-11T21:27:47Z,2017-10-11T21:36:08Z,2017-10-11T21:37:42Z,MERGED,True,4,3,4,https://github.com/mcudev,stm32f427 sram bigger,1,[],https://github.com/trezor/trezor-core/pull/39,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/39#issuecomment-335955971,just reviewing today's changes and saw this could be updated,👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,40,2017-10-12T10:14:27Z,2017-10-12T12:55:59Z,2017-10-12T12:57:54Z,MERGED,True,16,7,1,https://github.com/mcudev,stm32f427 vector table updates,1,[],https://github.com/trezor/trezor-core/pull/40,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/40,"First, I changed some zero definitions to architecture_reserved_handler which just winds up setting the default_handler for those entries. This is just a little cleaner to me. Technically, the zero definitions are invalid entries that would cause a UsageFault and wind up at the default_handler anyways because according to the ARMv7-M manual section B1.5.3, ""entries
must have bit[0] set to 1, because this bit defines the EPSR.T bit on exception entry"" and ""On exception entry, if bit[0] of the associated vector table entry is set to 0, execution of the first instruction causes
an INVSTATE UsageFault"".
I also added the new stm32f427 handler entries that all default to the default handler.","First, I changed some zero definitions to architecture_reserved_handler which just winds up setting the default_handler for those entries. This is just a little cleaner to me. Technically, the zero definitions are invalid entries that would cause a UsageFault and wind up at the default_handler anyways because according to the ARMv7-M manual section B1.5.3, ""entries
must have bit[0] set to 1, because this bit defines the EPSR.T bit on exception entry"" and ""On exception entry, if bit[0] of the associated vector table entry is set to 0, execution of the first instruction causes
an INVSTATE UsageFault"".
I also added the new stm32f427 handler entries that all default to the default handler.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,40,2017-10-12T10:14:27Z,2017-10-12T12:55:59Z,2017-10-12T12:57:54Z,MERGED,True,16,7,1,https://github.com/mcudev,stm32f427 vector table updates,1,[],https://github.com/trezor/trezor-core/pull/40,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/40#issuecomment-336086174,"First, I changed some zero definitions to architecture_reserved_handler which just winds up setting the default_handler for those entries. This is just a little cleaner to me. Technically, the zero definitions are invalid entries that would cause a UsageFault and wind up at the default_handler anyways because according to the ARMv7-M manual section B1.5.3, ""entries
must have bit[0] set to 1, because this bit defines the EPSR.T bit on exception entry"" and ""On exception entry, if bit[0] of the associated vector table entry is set to 0, execution of the first instruction causes
an INVSTATE UsageFault"".
I also added the new stm32f427 handler entries that all default to the default handler.","Also, I'm still testing the changes to f427 from yesterday. I want to put the new board on the scope to check that the clocks are still perfect. I think I'll have some minor updates in that area.
EDIT: clocks were ok, put the minor updates in #41
Side note: I am having some stability issues with the updated discovery board. Some times it works fine some times it doesn't. I think it's related to having the pins that we use for the display also being attached to a SDRAM chip. I might have to desolder that to be sure.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,40,2017-10-12T10:14:27Z,2017-10-12T12:55:59Z,2017-10-12T12:57:54Z,MERGED,True,16,7,1,https://github.com/mcudev,stm32f427 vector table updates,1,[],https://github.com/trezor/trezor-core/pull/40,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/40#issuecomment-336125758,"First, I changed some zero definitions to architecture_reserved_handler which just winds up setting the default_handler for those entries. This is just a little cleaner to me. Technically, the zero definitions are invalid entries that would cause a UsageFault and wind up at the default_handler anyways because according to the ARMv7-M manual section B1.5.3, ""entries
must have bit[0] set to 1, because this bit defines the EPSR.T bit on exception entry"" and ""On exception entry, if bit[0] of the associated vector table entry is set to 0, execution of the first instruction causes
an INVSTATE UsageFault"".
I also added the new stm32f427 handler entries that all default to the default handler.",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,41,2017-10-12T12:51:28Z,2017-10-12T12:56:13Z,2017-10-12T12:57:22Z,MERGED,True,8,3,1,https://github.com/mcudev,SystemInit: add more waiting just to be sure,1,[],https://github.com/trezor/trezor-core/pull/41,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/41,"just being a little more conservative. i put this on the scope and it works fine. the prior version works too on the f427, just this seems slightly safer.","just being a little more conservative. i put this on the scope and it works fine. the prior version works too on the f427, just this seems slightly safer.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,41,2017-10-12T12:51:28Z,2017-10-12T12:56:13Z,2017-10-12T12:57:22Z,MERGED,True,8,3,1,https://github.com/mcudev,SystemInit: add more waiting just to be sure,1,[],https://github.com/trezor/trezor-core/pull/41,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/41#issuecomment-336125845,"just being a little more conservative. i put this on the scope and it works fine. the prior version works too on the f427, just this seems slightly safer.",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,42,2017-10-12T19:36:53Z,2017-10-12T22:30:20Z,2017-10-12T22:39:42Z,MERGED,True,7,3,2,https://github.com/mcudev,RNG: Delay after an RCC peripheral clock enabling,2,[],https://github.com/trezor/trezor-core/pull/42,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/42,"I was going through the STM32F42xx and STM32F43xx Errata sheet and found this: 2.1.6 ""Delay after an RCC peripheral clock enabling"". The HAL handles it better. Let's use that here.
@prusnak  heads-up to check this one in the errata sheet too:
""2.1.11 Data cache might be corrupted during Flash read-while-write operation""
Not sure if that affects how you were going to use the flash (the memory layout docs that you updated yesterday came to mind when I saw this one).","I was going through the STM32F42xx and STM32F43xx Errata sheet and found this: 2.1.6 ""Delay after an RCC peripheral clock enabling"". The HAL handles it better. Let's use that here.
@prusnak  heads-up to check this one in the errata sheet too:
""2.1.11 Data cache might be corrupted during Flash read-while-write operation""
Not sure if that affects how you were going to use the flash (the memory layout docs that you updated yesterday came to mind when I saw this one).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,42,2017-10-12T19:36:53Z,2017-10-12T22:30:20Z,2017-10-12T22:39:42Z,MERGED,True,7,3,2,https://github.com/mcudev,RNG: Delay after an RCC peripheral clock enabling,2,[],https://github.com/trezor/trezor-core/pull/42,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/42#issuecomment-336252238,"I was going through the STM32F42xx and STM32F43xx Errata sheet and found this: 2.1.6 ""Delay after an RCC peripheral clock enabling"". The HAL handles it better. Let's use that here.
@prusnak  heads-up to check this one in the errata sheet too:
""2.1.11 Data cache might be corrupted during Flash read-while-write operation""
Not sure if that affects how you were going to use the flash (the memory layout docs that you updated yesterday came to mind when I saw this one).","added a second commit for clear_otg_hs_memory too since it could be affected the same way.
in testing, these don't seem to matter, but maybe in production it would. anyways, these changes lean conservative.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,42,2017-10-12T19:36:53Z,2017-10-12T22:30:20Z,2017-10-12T22:39:42Z,MERGED,True,7,3,2,https://github.com/mcudev,RNG: Delay after an RCC peripheral clock enabling,2,[],https://github.com/trezor/trezor-core/pull/42,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/42#issuecomment-336295505,"I was going through the STM32F42xx and STM32F43xx Errata sheet and found this: 2.1.6 ""Delay after an RCC peripheral clock enabling"". The HAL handles it better. Let's use that here.
@prusnak  heads-up to check this one in the errata sheet too:
""2.1.11 Data cache might be corrupted during Flash read-while-write operation""
Not sure if that affects how you were going to use the flash (the memory layout docs that you updated yesterday came to mind when I saw this one).",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/43,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.","Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/43#issuecomment-336628038,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.",This does not work for my DISPLAY_ST7789V display. Will look into that further tomorrow.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/43#issuecomment-336628449,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.","ok, thanks. it works fantastic for my DISPLAY_ILI9341V right now. hopefully it's just parameter value differences. also, i was thinking that after this works, you can use your gamma values with DISPLAY_ST7789V.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/43#issuecomment-336681517,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.",added a 2nd commit that removes the extra tearing effect / DISPLAY_VSYNC stuff because my display module supports that and i added the ILI9341V command that makes it work now.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/43#issuecomment-336735976,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.",After changing DataSetupTime from 1 to 5 (original value) the display started to work correctly.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/43#issuecomment-336737841,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.","I tested various combinations of possible values and these are the minimum values I am able to use: b6f9df1
If I decrease more any of the values, glitches start to appear on display.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/mcudev,7,https://github.com/trezor/trezor-core/pull/43#issuecomment-336738979,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.","Do any of the ones that I had marked as ""don't care"" matter for you? They're not supposed to matter according to table 266 in RM0090.
IIRC AddressSetupTime may have mattered the lower I took it, and that's why I set it to max at 15 (to be conservative). If you can live with that higher, it may be safer. It's a little magical to me because the display driver manual/datasheets are nearly garbage.
DataSetupTime really only affected how quickly my display drew itself. At 255, it was noticeably slower than 1. That's why I chose 1. 4 is fine.
b6f9df1 appears to work for me (doing some quick tests).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/43#issuecomment-336739325,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.","BusTurnAroundDuration, CLKDivision and DataLatency really don't matter, so I set them to lowest values allowed by RM0090
First three did matter, what is weird that according to my display datasheet the values shoud be:
AddressSetupTime: 0 ns
AddressHoldTime: 10 ns
DataSetupTime: 10 ns
If I set them to {0, 2, 2} (because 1 AHB clock cycle is 5.95 ns @ 168 MHz) it did not work, unless I set the address setup time to 4 clocks, then I could decrease to AddressHoldTime to 1 (lowest value allowed by RM0090) or even 0.
Original numbers - before your FMC->SRAM change - {2, 0, 5} also worked ...",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/mcudev,9,https://github.com/trezor/trezor-core/pull/43#issuecomment-336740094,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.","Interesting, I'll take another look at the manuals later to try to make sense of it. I think DataSetupTime is a +1 value for writes, or something.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/mcudev,10,https://github.com/trezor/trezor-core/pull/43#issuecomment-336756493,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.","Ha, yeah the timing characteristics don't exactly add up.
For my display, it's the same as yours except it has a 0ns AddressHoldTime specified.
These were actually just working for me:
    normal_mode_timing.AddressSetupTime = 1;
    normal_mode_timing.AddressHoldTime = 1;
    normal_mode_timing.DataSetupTime = 1;

I'm guessing that you need a higher AddressSetupTime value due to the Mode1 write timing diagram not having a portion for AddressHoldTime. So that just gets handled as ""AddressSetupTime"".
AddressSetupTime = 0 does not work for me.
I'm guessing DataSetupTime = 1 works because it actually gets one more HCLK added on, giving it the 2 that we supposedly need.
Have you tried this?:
    normal_mode_timing.AddressSetupTime = 4;
    normal_mode_timing.AddressHoldTime = 1;
    normal_mode_timing.DataSetupTime = 1;

That's just  a curiosity too. I think as long as we have values that are ""long enough"", we should be ok. I'm not sure if we should pad to give some safety margin too, or not.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,43,2017-10-13T18:48:18Z,2017-10-15T19:38:17Z,2017-10-16T08:28:22Z,MERGED,True,50,56,3,https://github.com/mcudev,boardloader: display_init stm32f42x updates,2,[],https://github.com/trezor/trezor-core/pull/43,https://github.com/prusnak,11,https://github.com/trezor/trezor-core/pull/43#issuecomment-336816352,"Please try this for DISPLAY_ST7789V. It works much better for DISPLAY_ILI9341V.
This seems to cure the weird display and general system issues that I experienced. I think they must have been tied to an async exception being triggered (one that was killing the debugger even).
Notably, this changes the memory type from FMC_MEMORY_TYPE_NOR to FMC_MEMORY_TYPE_SRAM.
I moved the display pwm init earlier to avoid more screen flicker.
The change to the CMD=0xEA is just because it only takes one parameter according to the DISPLAY_ILI9341V manual.","Yes, 4-1-1 does not work. 4-1-4 does.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,44,2017-10-13T21:22:12Z,2017-10-14T10:30:37Z,2017-10-14T10:52:19Z,MERGED,True,10,12,3,https://github.com/mcudev,SConscript: trivial string concat cleanup,2,[],https://github.com/trezor/trezor-core/pull/44,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/44,trivial cleanup,trivial cleanup,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,44,2017-10-13T21:22:12Z,2017-10-14T10:30:37Z,2017-10-14T10:52:19Z,MERGED,True,10,12,3,https://github.com/mcudev,SConscript: trivial string concat cleanup,2,[],https://github.com/trezor/trezor-core/pull/44,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/44#issuecomment-336589584,trivial cleanup,"I just added a second commit that builds on the first.
it adds the freestanding flag and links against the nano c library instead of using the micropython dependency. it's a little smaller. seems to work.
i also verified that it picked the ""thumb/v7e-m/fpv4-sp/hard"" version of the lib as desired.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,44,2017-10-13T21:22:12Z,2017-10-14T10:30:37Z,2017-10-14T10:52:19Z,MERGED,True,10,12,3,https://github.com/mcudev,SConscript: trivial string concat cleanup,2,[],https://github.com/trezor/trezor-core/pull/44,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/44#issuecomment-336626087,trivial cleanup,👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,45,2017-10-13T21:30:03Z,2017-10-14T10:26:35Z,2017-10-14T10:52:08Z,MERGED,True,28,24,2,https://github.com/mcudev,docs: dev kit hardware updates related to mcu upgrade,1,[],https://github.com/trezor/trezor-core/pull/45,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/45,dev kit hardware updates related to mcu upgrade,dev kit hardware updates related to mcu upgrade,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,45,2017-10-13T21:30:03Z,2017-10-14T10:26:35Z,2017-10-14T10:52:08Z,MERGED,True,28,24,2,https://github.com/mcudev,docs: dev kit hardware updates related to mcu upgrade,1,[],https://github.com/trezor/trezor-core/pull/45,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/45#issuecomment-336625907,dev kit hardware updates related to mcu upgrade,👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,46,2017-10-14T02:15:52Z,2017-10-14T10:25:14Z,2017-10-14T10:51:59Z,MERGED,True,15,3,6,https://github.com/mcudev,startup: setup the stack protector for the stage before main function,1,[],https://github.com/trezor/trezor-core/pull/46,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/46,setup the stack protector for the stage before main function,setup the stack protector for the stage before main function,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,46,2017-10-14T02:15:52Z,2017-10-14T10:25:14Z,2017-10-14T10:51:59Z,MERGED,True,15,3,6,https://github.com/mcudev,startup: setup the stack protector for the stage before main function,1,[],https://github.com/trezor/trezor-core/pull/46,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/46#issuecomment-336625848,setup the stack protector for the stage before main function,👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,47,2017-10-14T11:49:55Z,2017-10-15T17:27:45Z,2017-10-15T19:58:07Z,MERGED,True,12,1,2,https://github.com/mcudev,docs: bootloader microsd creation note and typo fix,1,[],https://github.com/trezor/trezor-core/pull/47,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/47,"add notes on how to manually create a bootloader microSD and fix a typo.
i was going to make this a make target, but then figured that i didn't want to make it a dangerous footgun tool.","add notes on how to manually create a bootloader microSD and fix a typo.
i was going to make this a make target, but then figured that i didn't want to make it a dangerous footgun tool.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,47,2017-10-14T11:49:55Z,2017-10-15T17:27:45Z,2017-10-15T19:58:07Z,MERGED,True,12,1,2,https://github.com/mcudev,docs: bootloader microsd creation note and typo fix,1,[],https://github.com/trezor/trezor-core/pull/47,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/47#issuecomment-336727094,"add notes on how to manually create a bootloader microSD and fix a typo.
i was going to make this a make target, but then figured that i didn't want to make it a dangerous footgun tool.",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,48,2017-10-14T16:15:51Z,2017-10-15T17:34:17Z,2017-10-15T19:58:18Z,MERGED,True,22,43,5,https://github.com/mcudev,code cleanup,3,[],https://github.com/trezor/trezor-core/pull/48,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/48,"It was easier to do this all together.

disable stack protector for the 3 rng functions: rng_init, rng_read, and rng_get
change return type of rng_init to void
in multiple spots, i added type qualifiers to unsigned literals (just being pedantic)
in stm32.c, the previous way of disabling the stack protector was still applying to all the functions in the file, no matter what i tried. so i switched to the explicit pragma for the whole file (reference gcc manual section 6.61.15).
changed the type of cfgr from int to uint32_t (just being pedantic)
removed the fpu coprocessor preprocessor stuff since it's always been enabled and always will be
SysTick_Handler removed some bad comments. the machine code generated is actually the same. we want volatile specified so that reads of the shared variable don't miss writes too. we do not want the compiler optimizing updates to uwTick so that only the handler sees them.","It was easier to do this all together.

disable stack protector for the 3 rng functions: rng_init, rng_read, and rng_get
change return type of rng_init to void
in multiple spots, i added type qualifiers to unsigned literals (just being pedantic)
in stm32.c, the previous way of disabling the stack protector was still applying to all the functions in the file, no matter what i tried. so i switched to the explicit pragma for the whole file (reference gcc manual section 6.61.15).
changed the type of cfgr from int to uint32_t (just being pedantic)
removed the fpu coprocessor preprocessor stuff since it's always been enabled and always will be
SysTick_Handler removed some bad comments. the machine code generated is actually the same. we want volatile specified so that reads of the shared variable don't miss writes too. we do not want the compiler optimizing updates to uwTick so that only the handler sees them.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,48,2017-10-14T16:15:51Z,2017-10-15T17:34:17Z,2017-10-15T19:58:18Z,MERGED,True,22,43,5,https://github.com/mcudev,code cleanup,3,[],https://github.com/trezor/trezor-core/pull/48,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/48#issuecomment-336671051,"It was easier to do this all together.

disable stack protector for the 3 rng functions: rng_init, rng_read, and rng_get
change return type of rng_init to void
in multiple spots, i added type qualifiers to unsigned literals (just being pedantic)
in stm32.c, the previous way of disabling the stack protector was still applying to all the functions in the file, no matter what i tried. so i switched to the explicit pragma for the whole file (reference gcc manual section 6.61.15).
changed the type of cfgr from int to uint32_t (just being pedantic)
removed the fpu coprocessor preprocessor stuff since it's always been enabled and always will be
SysTick_Handler removed some bad comments. the machine code generated is actually the same. we want volatile specified so that reads of the shared variable don't miss writes too. we do not want the compiler optimizing updates to uwTick so that only the handler sees them.","added a 2nd commit that:

explicitly places __stack_chk_guard and uwTick in .bss by setting to zero (instead of making the linker decode to put them there -- otherwise COMMON)
output boardloader linker map for ease of code review
further simplified SysTick_Handler since sys_tick_get_microseconds does not exist in the code base. the code was vestigial.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,48,2017-10-14T16:15:51Z,2017-10-15T17:34:17Z,2017-10-15T19:58:18Z,MERGED,True,22,43,5,https://github.com/mcudev,code cleanup,3,[],https://github.com/trezor/trezor-core/pull/48,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/48#issuecomment-336708712,"It was easier to do this all together.

disable stack protector for the 3 rng functions: rng_init, rng_read, and rng_get
change return type of rng_init to void
in multiple spots, i added type qualifiers to unsigned literals (just being pedantic)
in stm32.c, the previous way of disabling the stack protector was still applying to all the functions in the file, no matter what i tried. so i switched to the explicit pragma for the whole file (reference gcc manual section 6.61.15).
changed the type of cfgr from int to uint32_t (just being pedantic)
removed the fpu coprocessor preprocessor stuff since it's always been enabled and always will be
SysTick_Handler removed some bad comments. the machine code generated is actually the same. we want volatile specified so that reads of the shared variable don't miss writes too. we do not want the compiler optimizing updates to uwTick so that only the handler sees them.","added 3rd commit with minor systick handler updates that add a note about timer wrap and use the increment operator instead of +=1.
i doubt a normal user would leave the device plugged in that long (although i suppose it's possible). i'm curious if the timer wrap matters for more adversarial conditions.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,48,2017-10-14T16:15:51Z,2017-10-15T17:34:17Z,2017-10-15T19:58:18Z,MERGED,True,22,43,5,https://github.com/mcudev,code cleanup,3,[],https://github.com/trezor/trezor-core/pull/48,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/48#issuecomment-336727520,"It was easier to do this all together.

disable stack protector for the 3 rng functions: rng_init, rng_read, and rng_get
change return type of rng_init to void
in multiple spots, i added type qualifiers to unsigned literals (just being pedantic)
in stm32.c, the previous way of disabling the stack protector was still applying to all the functions in the file, no matter what i tried. so i switched to the explicit pragma for the whole file (reference gcc manual section 6.61.15).
changed the type of cfgr from int to uint32_t (just being pedantic)
removed the fpu coprocessor preprocessor stuff since it's always been enabled and always will be
SysTick_Handler removed some bad comments. the machine code generated is actually the same. we want volatile specified so that reads of the shared variable don't miss writes too. we do not want the compiler optimizing updates to uwTick so that only the handler sees them.",Thank you!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,51,2017-10-16T12:19:40Z,2017-10-16T12:46:21Z,2017-10-16T12:46:35Z,MERGED,True,2,8,1,https://github.com/mcudev,display: remove redundant display commands and increase wait after reset,1,[],https://github.com/trezor/trezor-core/pull/51,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/51,"These are some easy simplifications that remove redundant commands due to software reset being used.
Also, the default value of power on and software reset is sleep-in mode. So, this applies:
""If software reset is sent during sleep in mode, it will be necessary to wait 120msec before sending sleep out command.""
Section 15.1 in this manual, http://www.buydisplay.com/download/ic/ILI9341.pdf, is very helpful. So are the application notes at the end of the manual.
I'll have further changes in this area but these were the first simple set and I wanted to keep them easy to review.","These are some easy simplifications that remove redundant commands due to software reset being used.
Also, the default value of power on and software reset is sleep-in mode. So, this applies:
""If software reset is sent during sleep in mode, it will be necessary to wait 120msec before sending sleep out command.""
Section 15.1 in this manual, http://www.buydisplay.com/download/ic/ILI9341.pdf, is very helpful. So are the application notes at the end of the manual.
I'll have further changes in this area but these were the first simple set and I wanted to keep them easy to review.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,51,2017-10-16T12:19:40Z,2017-10-16T12:46:21Z,2017-10-16T12:46:35Z,MERGED,True,2,8,1,https://github.com/mcudev,display: remove redundant display commands and increase wait after reset,1,[],https://github.com/trezor/trezor-core/pull/51,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/51#issuecomment-336874621,"These are some easy simplifications that remove redundant commands due to software reset being used.
Also, the default value of power on and software reset is sleep-in mode. So, this applies:
""If software reset is sent during sleep in mode, it will be necessary to wait 120msec before sending sleep out command.""
Section 15.1 in this manual, http://www.buydisplay.com/download/ic/ILI9341.pdf, is very helpful. So are the application notes at the end of the manual.
I'll have further changes in this area but these were the first simple set and I wanted to keep them easy to review.","Here is the datasheet for ST7789V. It seems it contains exactly the same sentences: ""If software reset is sent during sleep in mode, it will be necessary to wait 120msec before sending sleep out command."", etc.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,51,2017-10-16T12:19:40Z,2017-10-16T12:46:21Z,2017-10-16T12:46:35Z,MERGED,True,2,8,1,https://github.com/mcudev,display: remove redundant display commands and increase wait after reset,1,[],https://github.com/trezor/trezor-core/pull/51,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/51#issuecomment-336875124,"These are some easy simplifications that remove redundant commands due to software reset being used.
Also, the default value of power on and software reset is sleep-in mode. So, this applies:
""If software reset is sent during sleep in mode, it will be necessary to wait 120msec before sending sleep out command.""
Section 15.1 in this manual, http://www.buydisplay.com/download/ic/ILI9341.pdf, is very helpful. So are the application notes at the end of the manual.
I'll have further changes in this area but these were the first simple set and I wanted to keep them easy to review.","Yep, agreed. I double checked these changes in both manuals. I just don't have the other display to test. These work with my ILI9341.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,51,2017-10-16T12:19:40Z,2017-10-16T12:46:21Z,2017-10-16T12:46:35Z,MERGED,True,2,8,1,https://github.com/mcudev,display: remove redundant display commands and increase wait after reset,1,[],https://github.com/trezor/trezor-core/pull/51,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/51#issuecomment-336875746,"These are some easy simplifications that remove redundant commands due to software reset being used.
Also, the default value of power on and software reset is sleep-in mode. So, this applies:
""If software reset is sent during sleep in mode, it will be necessary to wait 120msec before sending sleep out command.""
Section 15.1 in this manual, http://www.buydisplay.com/download/ic/ILI9341.pdf, is very helpful. So are the application notes at the end of the manual.
I'll have further changes in this area but these were the first simple set and I wanted to keep them easy to review.",Send me your address to stick@satoshilabs.com and I'll get you a dev board delivered to you!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,52,2017-10-16T18:12:14Z,2017-10-16T18:56:06Z,2017-10-16T21:30:08Z,MERGED,True,20,29,4,https://github.com/mcudev,"boardloader, bootloader, firmware: factor out display_pwm_init",1,[],https://github.com/trezor/trezor-core/pull/52,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/52,"addressing #50.
the diff looks a little weird. just keep in mind that i removed display_pwm_init and it will make more sense.
also removed some extra calls to display_backlight.
will probably do something similar with periph_init later.","addressing #50.
the diff looks a little weird. just keep in mind that i removed display_pwm_init and it will make more sense.
also removed some extra calls to display_backlight.
will probably do something similar with periph_init later.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,53,2017-10-16T22:38:32Z,2017-10-16T22:43:48Z,2017-10-16T22:44:12Z,MERGED,True,0,13,1,https://github.com/mcudev,SDIO: remove SDIO_IRQHandler and interrupt config,1,[],https://github.com/trezor/trezor-core/pull/53,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/53,"Addressing #49
With these changes, the boardloader vector table is clean.
I've tested that the boardloader SDIO stuff works with this code removed. I was able to put a new bootloader on and install a firmware using that (Nice work! Those are changes from today that I haven't reviewed other than to run functional tests so far).
The bootloader already did not have this interrupt handler in its vector table.
That left the firmware as the only place that might use SDIO interrupts. Upon further inspection, I don't think we use SDIO interrupts anywhere, so I've removed the IRQ setup etc...","Addressing #49
With these changes, the boardloader vector table is clean.
I've tested that the boardloader SDIO stuff works with this code removed. I was able to put a new bootloader on and install a firmware using that (Nice work! Those are changes from today that I haven't reviewed other than to run functional tests so far).
The bootloader already did not have this interrupt handler in its vector table.
That left the firmware as the only place that might use SDIO interrupts. Upon further inspection, I don't think we use SDIO interrupts anywhere, so I've removed the IRQ setup etc...",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,53,2017-10-16T22:38:32Z,2017-10-16T22:43:48Z,2017-10-16T22:44:12Z,MERGED,True,0,13,1,https://github.com/mcudev,SDIO: remove SDIO_IRQHandler and interrupt config,1,[],https://github.com/trezor/trezor-core/pull/53,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/53#issuecomment-337065253,"Addressing #49
With these changes, the boardloader vector table is clean.
I've tested that the boardloader SDIO stuff works with this code removed. I was able to put a new bootloader on and install a firmware using that (Nice work! Those are changes from today that I haven't reviewed other than to run functional tests so far).
The bootloader already did not have this interrupt handler in its vector table.
That left the firmware as the only place that might use SDIO interrupts. Upon further inspection, I don't think we use SDIO interrupts anywhere, so I've removed the IRQ setup etc...",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,54,2017-10-16T23:31:32Z,2017-10-17T09:42:57Z,2017-10-17T10:48:48Z,MERGED,True,27,31,5,https://github.com/mcudev,"boardloader, bootloader, firmware: only call periph_init in boardloader",1,[],https://github.com/trezor/trezor-core/pull/54,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/54,"don't need to call periph_init from each stage. just call it once in the boardloader.
future PR todos:


i still have to research the flash caching to see if that's desirable for this particular application. (errata notes)


some of the other things going on in periph_init also seem unnecessary.


might further consolidate where the clocks are enabled (right now it's split between here and display_init for example).","don't need to call periph_init from each stage. just call it once in the boardloader.
future PR todos:


i still have to research the flash caching to see if that's desirable for this particular application. (errata notes)


some of the other things going on in periph_init also seem unnecessary.


might further consolidate where the clocks are enabled (right now it's split between here and display_init for example).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,54,2017-10-16T23:31:32Z,2017-10-17T09:42:57Z,2017-10-17T10:48:48Z,MERGED,True,27,31,5,https://github.com/mcudev,"boardloader, bootloader, firmware: only call periph_init in boardloader",1,[],https://github.com/trezor/trezor-core/pull/54,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/54#issuecomment-337177482,"don't need to call periph_init from each stage. just call it once in the boardloader.
future PR todos:


i still have to research the flash caching to see if that's desirable for this particular application. (errata notes)


some of the other things going on in periph_init also seem unnecessary.


might further consolidate where the clocks are enabled (right now it's split between here and display_init for example).",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,55,2017-10-17T11:05:54Z,2017-10-17T12:27:55Z,2017-10-17T12:42:24Z,MERGED,True,4,4,1,https://github.com/mcudev,display: handle TEON and COLMOD the same for both display types,1,[],https://github.com/trezor/trezor-core/pull/55,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/55,"trivial change to make the startup sequence the same for both display types for these commands.
order does not matter to the display driver for these. just makes the code a little easier to review being in numerical order. i did test these on my ILI9341.
i'm still reviewing the reset of the display commands. the manuals must have errors because they show examples using parameter values that are invalid according to the command + parameter specifications. still trying to make sense of it...","trivial change to make the startup sequence the same for both display types for these commands.
order does not matter to the display driver for these. just makes the code a little easier to review being in numerical order. i did test these on my ILI9341.
i'm still reviewing the reset of the display commands. the manuals must have errors because they show examples using parameter values that are invalid according to the command + parameter specifications. still trying to make sense of it...",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,55,2017-10-17T11:05:54Z,2017-10-17T12:27:55Z,2017-10-17T12:42:24Z,MERGED,True,4,4,1,https://github.com/mcudev,display: handle TEON and COLMOD the same for both display types,1,[],https://github.com/trezor/trezor-core/pull/55,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/55#issuecomment-337215262,"trivial change to make the startup sequence the same for both display types for these commands.
order does not matter to the display driver for these. just makes the code a little easier to review being in numerical order. i did test these on my ILI9341.
i'm still reviewing the reset of the display commands. the manuals must have errors because they show examples using parameter values that are invalid according to the command + parameter specifications. still trying to make sense of it...",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,56,2017-10-17T13:13:47Z,2017-11-05T19:19:16Z,2017-11-05T19:25:39Z,CLOSED,False,838,53,13,https://github.com/jpochyla,Check PIN in C,15,[],https://github.com/trezor/trezor-core/pull/56,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/56,"Not ready for merge yet, mostly PoC of T1 approach.

 Pull norcow to trezor-core tree.
 Port norcow on top of new flash API, remove unix-specific code.
 Move PIN-related code out of modtrezorconfig.
 Figure out a better way of storing PIN (outside of norcow).
 Review everything.
 Unit test everything.","Not ready for merge yet, mostly PoC of T1 approach.

 Pull norcow to trezor-core tree.
 Port norcow on top of new flash API, remove unix-specific code.
 Move PIN-related code out of modtrezorconfig.
 Figure out a better way of storing PIN (outside of norcow).
 Review everything.
 Unit test everything.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,57,2017-10-17T14:37:52Z,2017-10-17T15:35:11Z,2017-10-21T11:45:29Z,MERGED,True,1,1,1,https://github.com/mcudev,boardloader: disable flash data cache,1,[],https://github.com/trezor/trezor-core/pull/57,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/57,"This is related to the switch to STM32F42X.
This change disables the HAL from enabling the flash data cache and leaves the instruction and prefetch caches enabled. The instruction cache is required for the SDIO code to work (strange but true).
Motivation is section 2.1.11, ""Data cache might be corrupted during Flash read-while-write operation"" of the STM32F42xx and STM32F43xx Errata sheet:
When a write operation to the internal Flash memory is done, the data cache is updated to
reflect the data update. If a read operation to the other memory bank occurs during the data
cache update, the data cache content may be corrupted. In this case, subsequent read
operations from the same address (Cache hits) will be corrupted.
This issue only occurs in dual bank mode when reading (data access or code execution)
from one Flash bank while writing to the other Flash bank with data cache enabled.

My 429 board works both before and after this change. But, I just want to avoid this errata possibly being an issue with the boardloader's microSD + flash erasing code.","This is related to the switch to STM32F42X.
This change disables the HAL from enabling the flash data cache and leaves the instruction and prefetch caches enabled. The instruction cache is required for the SDIO code to work (strange but true).
Motivation is section 2.1.11, ""Data cache might be corrupted during Flash read-while-write operation"" of the STM32F42xx and STM32F43xx Errata sheet:
When a write operation to the internal Flash memory is done, the data cache is updated to
reflect the data update. If a read operation to the other memory bank occurs during the data
cache update, the data cache content may be corrupted. In this case, subsequent read
operations from the same address (Cache hits) will be corrupted.
This issue only occurs in dual bank mode when reading (data access or code execution)
from one Flash bank while writing to the other Flash bank with data cache enabled.

My 429 board works both before and after this change. But, I just want to avoid this errata possibly being an issue with the boardloader's microSD + flash erasing code.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,57,2017-10-17T14:37:52Z,2017-10-17T15:35:11Z,2017-10-21T11:45:29Z,MERGED,True,1,1,1,https://github.com/mcudev,boardloader: disable flash data cache,1,[],https://github.com/trezor/trezor-core/pull/57,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/57#issuecomment-337272372,"This is related to the switch to STM32F42X.
This change disables the HAL from enabling the flash data cache and leaves the instruction and prefetch caches enabled. The instruction cache is required for the SDIO code to work (strange but true).
Motivation is section 2.1.11, ""Data cache might be corrupted during Flash read-while-write operation"" of the STM32F42xx and STM32F43xx Errata sheet:
When a write operation to the internal Flash memory is done, the data cache is updated to
reflect the data update. If a read operation to the other memory bank occurs during the data
cache update, the data cache content may be corrupted. In this case, subsequent read
operations from the same address (Cache hits) will be corrupted.
This issue only occurs in dual bank mode when reading (data access or code execution)
from one Flash bank while writing to the other Flash bank with data cache enabled.

My 429 board works both before and after this change. But, I just want to avoid this errata possibly being an issue with the boardloader's microSD + flash erasing code.",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,57,2017-10-17T14:37:52Z,2017-10-17T15:35:11Z,2017-10-21T11:45:29Z,MERGED,True,1,1,1,https://github.com/mcudev,boardloader: disable flash data cache,1,[],https://github.com/trezor/trezor-core/pull/57,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/57#issuecomment-338385878,"This is related to the switch to STM32F42X.
This change disables the HAL from enabling the flash data cache and leaves the instruction and prefetch caches enabled. The instruction cache is required for the SDIO code to work (strange but true).
Motivation is section 2.1.11, ""Data cache might be corrupted during Flash read-while-write operation"" of the STM32F42xx and STM32F43xx Errata sheet:
When a write operation to the internal Flash memory is done, the data cache is updated to
reflect the data update. If a read operation to the other memory bank occurs during the data
cache update, the data cache content may be corrupted. In this case, subsequent read
operations from the same address (Cache hits) will be corrupted.
This issue only occurs in dual bank mode when reading (data access or code execution)
from one Flash bank while writing to the other Flash bank with data cache enabled.

My 429 board works both before and after this change. But, I just want to avoid this errata possibly being an issue with the boardloader's microSD + flash erasing code.","Found another supporting reason to leave data cache disabled: RM0090 section 3.6.4:
""If an erase operation in Flash memory also concerns data in the data or instruction cache,
you have to make sure that these data are rewritten before they are accessed during code
execution. If this cannot be done safely, it is recommended to flush the caches by setting the
DCRST and ICRST bits in the FLASH_CR register.""
""The I/D cache should be flushed only when it is disabled (I/DCEN = 0).""",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,58,2017-10-17T15:59:22Z,2017-10-17T16:29:52Z,2017-10-17T16:39:49Z,MERGED,True,0,5,1,https://github.com/mcudev,boardloader: stop enabling debug features to get clock cycle counts,1,[],https://github.com/trezor/trezor-core/pull/58,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/58,"This removes some micropython related code that enables debug features with the intention of retrieving clock cycle counts.
It seems like a bad idea to enable this stuff (in the boardloader):
""TRCENA...Global enable for all DWT and ITM features""
""The DWT contains support for both invasive and non-invasive debug features.""
No, thanks.","This removes some micropython related code that enables debug features with the intention of retrieving clock cycle counts.
It seems like a bad idea to enable this stuff (in the boardloader):
""TRCENA...Global enable for all DWT and ITM features""
""The DWT contains support for both invasive and non-invasive debug features.""
No, thanks.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,58,2017-10-17T15:59:22Z,2017-10-17T16:29:52Z,2017-10-17T16:39:49Z,MERGED,True,0,5,1,https://github.com/mcudev,boardloader: stop enabling debug features to get clock cycle counts,1,[],https://github.com/trezor/trezor-core/pull/58,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/58#issuecomment-337288750,"This removes some micropython related code that enables debug features with the intention of retrieving clock cycle counts.
It seems like a bad idea to enable this stuff (in the boardloader):
""TRCENA...Global enable for all DWT and ITM features""
""The DWT contains support for both invasive and non-invasive debug features.""
No, thanks.",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/59,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).","Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/59#issuecomment-337618592,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).","Incidentally, I am looking into the same issue. As you could've guessed from my commit the touch does not work for me, neither. Oddly enough, the touch_click works.
I will merge this and continue investigating the issue.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/59#issuecomment-337621584,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).","OK, I'll look into it some too. I'm using a FT6206 capacitive touch panel controller. Is that the same as yours?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/59#issuecomment-337623364,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).","We are using FT6236, but I would expect they are very similar if not the same.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/59#issuecomment-337625979,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).","Ah, it was a stupid mistake, I'll fix it.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/59#issuecomment-337627001,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).",Fixed in 749b80b,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/mcudev,7,https://github.com/trezor/trezor-core/pull/59#issuecomment-337629159,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).","yes, definitely better. i have to do more than statically touch. i have to do a move also and it has missed it a few times. but the majority of the time it works to get me into bootloader mode.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/mcudev,8,https://github.com/trezor/trezor-core/pull/59#issuecomment-337635236,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).","off-topic but kind of related because of the bootloader: I had to do sudo update-usbids to get more than just the InterBiometrics info in my lsusb output. Now it shows: 1209:53c0 InterBiometrics SatoshiLabs TREZOR Bootloader.
I'm also wondering if you have requested to have the USB ID list in chromium updated (they are way behind the source)? https://chromium.googlesource.com/chromium/src/+/lkgr/third_party/usb_ids",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,59,2017-10-18T14:50:31Z,2017-10-18T14:54:04Z,2017-10-19T13:19:42Z,MERGED,True,4,15,1,https://github.com/mcudev,"bootloader, firmware: do not need touch interrupt handlers or to enable touch interrupts",1,[],https://github.com/trezor/trezor-core/pull/59,https://github.com/prusnak,9,https://github.com/trezor/trezor-core/pull/59#issuecomment-337905317,"Removing these do not change any functionality for me. These changes do rid the bootloader and firmware vector tables of the entries. I'll probably remove the USB HS interrupt handlers too, but I need to test that.
Generally, touch does not work well for me.
The bootloader touch click to continue is reliable.
But, the bootloader press to stay in bootloader mode (https://github.com/trezor/trezor-core/blob/master/embed/bootloader/main.c#L262-L268) does not work at all for me (both before and after this change).","No, have not contacted Google.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,60,2017-10-18T17:35:59Z,2017-10-19T13:20:25Z,2017-10-19T13:37:17Z,MERGED,True,9,9,2,https://github.com/mcudev,"docs: pip to pip3 no cache, add some hardware details",1,[],https://github.com/trezor/trezor-core/pull/60,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/60,"follows-up to the python3 updates.
other trivial doc updates too.","follows-up to the python3 updates.
other trivial doc updates too.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,61,2017-10-19T03:45:30Z,2017-10-19T16:45:58Z,2017-10-19T16:49:06Z,MERGED,True,21,27,5,https://github.com/mcudev, image_parse_header: remove undefined behavior and other updates,3,[],https://github.com/trezor/trezor-core/pull/61,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/61,"first commit simply removes the undefined behavior.
second commit, updates the function declaration and changes to not use memcpy as much.
switched one comparison to & 511 instead of % 512
added a todo to do more with the expiry field. maybe what it is compared to should be an argument to the func too?","first commit simply removes the undefined behavior.
second commit, updates the function declaration and changes to not use memcpy as much.
switched one comparison to & 511 instead of % 512
added a todo to do more with the expiry field. maybe what it is compared to should be an argument to the func too?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,61,2017-10-19T03:45:30Z,2017-10-19T16:45:58Z,2017-10-19T16:49:06Z,MERGED,True,21,27,5,https://github.com/mcudev, image_parse_header: remove undefined behavior and other updates,3,[],https://github.com/trezor/trezor-core/pull/61,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/61#issuecomment-337946521,"first commit simply removes the undefined behavior.
second commit, updates the function declaration and changes to not use memcpy as much.
switched one comparison to & 511 instead of % 512
added a todo to do more with the expiry field. maybe what it is compared to should be an argument to the func too?","Updates made. I also added some updates for the image sizes. I wasn't sure whether to add the size for the 7 ""firmware extra"" sectors (to make it 13 instead of 6 sectors), but decided not to right now to be safe because of how _read_payload is currently implemented (doesn't look like it would skip the sector gap to the extra ones correctly).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,61,2017-10-19T03:45:30Z,2017-10-19T16:45:58Z,2017-10-19T16:49:06Z,MERGED,True,21,27,5,https://github.com/mcudev, image_parse_header: remove undefined behavior and other updates,3,[],https://github.com/trezor/trezor-core/pull/61,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/61#issuecomment-337967937,"first commit simply removes the undefined behavior.
second commit, updates the function declaration and changes to not use memcpy as much.
switched one comparison to & 511 instead of % 512
added a todo to do more with the expiry field. maybe what it is compared to should be an argument to the func too?",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,62,2017-10-19T04:12:51Z,2017-10-19T13:35:04Z,2017-10-19T15:14:30Z,CLOSED,False,7,10,3,https://github.com/mcudev,vendor_parse_header: remove undefined behavior add todos,1,[],https://github.com/trezor/trezor-core/pull/62,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/62,"title says it all.
the undefined behavior is when using a pointer to a variable that has gone out of scope.","title says it all.
the undefined behavior is when using a pointer to a variable that has gone out of scope.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,62,2017-10-19T04:12:51Z,2017-10-19T13:35:04Z,2017-10-19T15:14:30Z,CLOSED,False,7,10,3,https://github.com/mcudev,vendor_parse_header: remove undefined behavior add todos,1,[],https://github.com/trezor/trezor-core/pull/62,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/62#issuecomment-337909355,"title says it all.
the undefined behavior is when using a pointer to a variable that has gone out of scope.","Can you please add this commit into pull request #61?
Few comments:


please change the prototype to  bool vendor_parse_header(const uint8_t * const data, vendor_header * const vhdr) so it matches the image_parse_header prototype


remove // todo: then what is the point of having this field? - the point is when there is a safe way to get current time into trezor (for example as a signed message from NTP server) we could check for expiration of firmware. For now just accept firmwares that don't expire.


use capitalization of todo into TODO for sanity check comment, that's the form what most tools are using",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,63,2017-10-19T12:59:41Z,2017-10-19T13:27:15Z,2017-10-19T13:37:37Z,MERGED,True,7,7,4,https://github.com/mcudev,build: further cleanup common symbols,1,[],https://github.com/trezor/trezor-core/pull/63,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/63,"The common symbol stuff was still a little sloppy (my own doing) so I cleaned it up for the boardloader, bootloader, and firmware. The variables were effectively all getting placed at the end of .bss. This does not change that. This just makes it a little more explicit that that is the intention, and it also makes multiple definitions output a warning (a sign of sloppiness).
COMMON         0x000000001000055c       0x20 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
               0x000000001000055c                pFlash

becomes

 .bss.pFlash   0x00000000100004cc       0x20 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

COMMON         0x00000000100010e4       0x20 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
               0x00000000100010e4                pFlash

becomes

 .bss.pFlash   0x0000000010000714       0x20 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

 COMMON         0x00000000200030f0        0x4 build/firmware/vendor/micropython/lib/utils/interrupt_char.o
                0x00000000200030f0                mp_interrupt_char
 COMMON         0x00000000200030f4      0x1e4 build/firmware/vendor/micropython/py/mpstate.o
                0x00000000200030f4                mp_state_ctx
 COMMON         0x00000000200032d8        0x4 build/firmware/vendor/micropython/ports/stm32/pendsv.o
                0x00000000200032d8                pendsv_object
 COMMON         0x00000000200032dc       0x20 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
                0x00000000200032dc                pFlash
becomes

 .bss.mp_interrupt_char 0x0000000020002694        0x4 build/firmware/vendor/micropython/lib/utils/interrupt_char.o
 .bss.mp_state_ctx      0x00000000200026a0      0x1e4 build/firmware/vendor/micropython/py/mpstate.o
 .bss.pendsv_object     0x0000000020002884        0x4 build/firmware/vendor/micropython/ports/stm32/pendsv.o
 .bss.pFlash            0x0000000020002888       0x20 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

And uwTick stays in .bss:

 .bss.uwTick    0x00000000100004ec        0x4 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o
 .bss.uwTick    0x0000000010000734        0x4 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o
 .bss.uwTick    0x00000000200028a8        0x4 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o","The common symbol stuff was still a little sloppy (my own doing) so I cleaned it up for the boardloader, bootloader, and firmware. The variables were effectively all getting placed at the end of .bss. This does not change that. This just makes it a little more explicit that that is the intention, and it also makes multiple definitions output a warning (a sign of sloppiness).
COMMON         0x000000001000055c       0x20 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
               0x000000001000055c                pFlash

becomes

 .bss.pFlash   0x00000000100004cc       0x20 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

COMMON         0x00000000100010e4       0x20 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
               0x00000000100010e4                pFlash

becomes

 .bss.pFlash   0x0000000010000714       0x20 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

 COMMON         0x00000000200030f0        0x4 build/firmware/vendor/micropython/lib/utils/interrupt_char.o
                0x00000000200030f0                mp_interrupt_char
 COMMON         0x00000000200030f4      0x1e4 build/firmware/vendor/micropython/py/mpstate.o
                0x00000000200030f4                mp_state_ctx
 COMMON         0x00000000200032d8        0x4 build/firmware/vendor/micropython/ports/stm32/pendsv.o
                0x00000000200032d8                pendsv_object
 COMMON         0x00000000200032dc       0x20 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
                0x00000000200032dc                pFlash
becomes

 .bss.mp_interrupt_char 0x0000000020002694        0x4 build/firmware/vendor/micropython/lib/utils/interrupt_char.o
 .bss.mp_state_ctx      0x00000000200026a0      0x1e4 build/firmware/vendor/micropython/py/mpstate.o
 .bss.pendsv_object     0x0000000020002884        0x4 build/firmware/vendor/micropython/ports/stm32/pendsv.o
 .bss.pFlash            0x0000000020002888       0x20 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

And uwTick stays in .bss:

 .bss.uwTick    0x00000000100004ec        0x4 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o
 .bss.uwTick    0x0000000010000734        0x4 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o
 .bss.uwTick    0x00000000200028a8        0x4 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,63,2017-10-19T12:59:41Z,2017-10-19T13:27:15Z,2017-10-19T13:37:37Z,MERGED,True,7,7,4,https://github.com/mcudev,build: further cleanup common symbols,1,[],https://github.com/trezor/trezor-core/pull/63,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/63#issuecomment-337907367,"The common symbol stuff was still a little sloppy (my own doing) so I cleaned it up for the boardloader, bootloader, and firmware. The variables were effectively all getting placed at the end of .bss. This does not change that. This just makes it a little more explicit that that is the intention, and it also makes multiple definitions output a warning (a sign of sloppiness).
COMMON         0x000000001000055c       0x20 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
               0x000000001000055c                pFlash

becomes

 .bss.pFlash   0x00000000100004cc       0x20 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

COMMON         0x00000000100010e4       0x20 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
               0x00000000100010e4                pFlash

becomes

 .bss.pFlash   0x0000000010000714       0x20 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

 COMMON         0x00000000200030f0        0x4 build/firmware/vendor/micropython/lib/utils/interrupt_char.o
                0x00000000200030f0                mp_interrupt_char
 COMMON         0x00000000200030f4      0x1e4 build/firmware/vendor/micropython/py/mpstate.o
                0x00000000200030f4                mp_state_ctx
 COMMON         0x00000000200032d8        0x4 build/firmware/vendor/micropython/ports/stm32/pendsv.o
                0x00000000200032d8                pendsv_object
 COMMON         0x00000000200032dc       0x20 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o
                0x00000000200032dc                pFlash
becomes

 .bss.mp_interrupt_char 0x0000000020002694        0x4 build/firmware/vendor/micropython/lib/utils/interrupt_char.o
 .bss.mp_state_ctx      0x00000000200026a0      0x1e4 build/firmware/vendor/micropython/py/mpstate.o
 .bss.pendsv_object     0x0000000020002884        0x4 build/firmware/vendor/micropython/ports/stm32/pendsv.o
 .bss.pFlash            0x0000000020002888       0x20 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o

And uwTick stays in .bss:

 .bss.uwTick    0x00000000100004ec        0x4 build/boardloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o
 .bss.uwTick    0x0000000010000734        0x4 build/bootloader/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o
 .bss.uwTick    0x00000000200028a8        0x4 build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,64,2017-10-19T23:22:14Z,2017-10-20T12:41:02Z,2017-10-20T13:24:22Z,MERGED,True,38,26,5,https://github.com/mcudev,"boardloader, flash: flash option bytes updates, remove flash_init",2,[],https://github.com/trezor/trezor-core/pull/64,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/64,"First, I trivially removed the empty flash_init function from the boardloader, bootloader, and firmware.
Second, I updated the flash option byte code. Notice that I changed the opts.OptionType = to opts.OptionType |=. After looking through the HAL code, I believe the new way is the correct usage.
I also made the option byte setting code erase other non-boardloader flash sectors, attempt to write the option bytes, and then loop again to check, repeating until they are set. Untested code, but probably close.","First, I trivially removed the empty flash_init function from the boardloader, bootloader, and firmware.
Second, I updated the flash option byte code. Notice that I changed the opts.OptionType = to opts.OptionType |=. After looking through the HAL code, I believe the new way is the correct usage.
I also made the option byte setting code erase other non-boardloader flash sectors, attempt to write the option bytes, and then loop again to check, repeating until they are set. Untested code, but probably close.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,64,2017-10-19T23:22:14Z,2017-10-20T12:41:02Z,2017-10-20T13:24:22Z,MERGED,True,38,26,5,https://github.com/mcudev,"boardloader, flash: flash option bytes updates, remove flash_init",2,[],https://github.com/trezor/trezor-core/pull/64,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/64#issuecomment-338196819,"First, I trivially removed the empty flash_init function from the boardloader, bootloader, and firmware.
Second, I updated the flash option byte code. Notice that I changed the opts.OptionType = to opts.OptionType |=. After looking through the HAL code, I believe the new way is the correct usage.
I also made the option byte setting code erase other non-boardloader flash sectors, attempt to write the option bytes, and then loop again to check, repeating until they are set. Untested code, but probably close.","I removed the sector erasing from flash_set_option_bytes for now (21fac2e). While it is generally a good idea, there is a disadvantage it makes it impossible to flash {boardloader + bootloader + testing firmware} on brand new board during the production at once, because on first run the bootloader + testing firmware would be deleted and this would require another flashing procedure. Also we check whether the option bytes were set correctly afterwards via the flash_check_option_bytes call and then we call flash_erase_sectors if something is wrong.
If I find a better way how to do it, I will reconsider adding it back.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,64,2017-10-19T23:22:14Z,2017-10-20T12:41:02Z,2017-10-20T13:24:22Z,MERGED,True,38,26,5,https://github.com/mcudev,"boardloader, flash: flash option bytes updates, remove flash_init",2,[],https://github.com/trezor/trezor-core/pull/64,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/64#issuecomment-338203219,"First, I trivially removed the empty flash_init function from the boardloader, bootloader, and firmware.
Second, I updated the flash option byte code. Notice that I changed the opts.OptionType = to opts.OptionType |=. After looking through the HAL code, I believe the new way is the correct usage.
I also made the option byte setting code erase other non-boardloader flash sectors, attempt to write the option bytes, and then loop again to check, repeating until they are set. Untested code, but probably close.","OK, thanks. I was mainly focused on giving multiple opportunities to clear the storage sectors in that situation. The other sectors were ""might as well, while I'm doing this already"". The only times when this should apply are at production time, and if there's an attack like the one described in ""Shedding too much Light on a Microcontroller’s Firmware Protection"".
Are you going to ship v2 without firmware like v1? If so, does the testing firmware make changes to the firmware sectors before it completes? The testing firmware could run from SRAM.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,64,2017-10-19T23:22:14Z,2017-10-20T12:41:02Z,2017-10-20T13:24:22Z,MERGED,True,38,26,5,https://github.com/mcudev,"boardloader, flash: flash option bytes updates, remove flash_init",2,[],https://github.com/trezor/trezor-core/pull/64,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/64#issuecomment-338205061,"First, I trivially removed the empty flash_init function from the boardloader, bootloader, and firmware.
Second, I updated the flash option byte code. Notice that I changed the opts.OptionType = to opts.OptionType |=. After looking through the HAL code, I believe the new way is the correct usage.
I also made the option byte setting code erase other non-boardloader flash sectors, attempt to write the option bytes, and then loop again to check, repeating until they are set. Untested code, but probably close.","Yes, v2 will ship with boardloader and bootloader, no firmware.
Testing firmware does not write to flash (except OTP area, where date of production is stored).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/65,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/65#issuecomment-338493130,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","Second commit: there is no reason to enter standby mode (we don't that i know of), therefore there is no reason to mask the fact that we were in standby mode (if somehow that happened)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/65#issuecomment-338495601,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","Third commit: make use of the reset flags to check for unusual conditions and bail out if encountered. also updated the boardloader startup code to branch to shutdown.
helpful for testing this (in the Makefile):
OPENOCD = openocd -f interface/stlink-$(STLINK_VER).cfg -c ""transport select hla_swd"" -f target/stm32f4x.cfg -c ""reset_config srst_only separate srst_nogate srst_open_drain connect_assert_srst""",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/65#issuecomment-338498734,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","Fourth commit: do not use ensure before display_init, just return (since the previous commit returning calls shutdown).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/mcudev,5,https://github.com/trezor/trezor-core/pull/65#issuecomment-338498956,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","Fifth commit: another avoid calling shutdown directly, and let the startup code handle it",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/65#issuecomment-339005466,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","@prusnak Just checking to see if you did not like these, or if you're just too busy to review right now?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/65#issuecomment-339007322,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..",I will review soon. Too busy last 2 days.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/65#issuecomment-339026284,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","Very nice. I have only one comment to 23f86b5
We might want to allow switching from bootloader to firmware (after successful firmware update) and from firmware to bootloader (so one can ""reboot"" to bootloader from the sofware UI).
I THINK this might not break this functionality, but I am not really sure. Can you confirm that this change will not break this intention?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/mcudev,9,https://github.com/trezor/trezor-core/pull/65#issuecomment-339037438,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","It depends how that stage switching is implemented. If it's via branches/jumps, then likely no problem. If it's via something like NVIC_SystemReset, then that reset flag checking code would block it in production. The bootloader already continues on to new firmware on successful update, so it's really just a question of how a firmware back to bootloader would work.
BTW, in quick tests of bootloader to firmware switch after firmware update, I think that there is a bug with USB preventing that from working all the way. I can see that the firmware takes over, but that it gets stuck in the USB code. Probably the bootloader endpoint still being active causing that, but I have not looked closely enough.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/65#issuecomment-339038361,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","Correct, I plan to use jump_to, not SystemReset.
Correct two that the current jump from bootloader to firmware does not work atm. :-/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,65,2017-10-22T16:21:27Z,2017-10-24T15:17:21Z,2017-10-24T15:57:12Z,MERGED,True,36,8,4,https://github.com/mcudev,"boardloader: enable PVD programmable voltage detector and interrupt, don't clear standby flag",5,[],https://github.com/trezor/trezor-core/pull/65,https://github.com/mcudev,11,https://github.com/trezor/trezor-core/pull/65#issuecomment-339040017,"The peripherals used, especially, but not limited to, the display, preclude level 6 and 7 on my dev board. The risk of enabling this detector, and continuing to use the BOR level 3 option byte, is that they affect regular users (maybe longer USB cables, bad USB ports, etc... causing voltages closer to the thresholds). The reason to enable these thresholds is to provide a level of defense against voltage glitching attacks, and/or poorly functioning components (similar to the CSS does for the HSE clock).
Level 5 seems to work for me. I tested the regular startup and also a boardloader microSD reflash.
Level 7 trips in the boardloader for me while wiping the USB HS memory. Level 6 trips in the firmware while drawing the initial screen (if it doesn't then try an all white trezor logo with full backlight and see if it does).
I left the PVD_IRQHandler mapped to default_handler as the intent of this is to hinder voltage glitching attacks.
Side note: it maybe worthwhile profiling the power supply on actual devices to see how they hold up when full current draw is made in unison by the display, flash, cpu, etc..","should be fine then.
it seems a little dangerous to do the code updates and then switch immediately, but i can't think of a specific vulnerability right now (maybe sectors don't erase? but now with the extra voltage detection, that's even less likely). definitely an area worthy of extra review when it's ready.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,67,2017-10-24T12:00:46Z,2017-11-05T20:04:49Z,2017-11-05T20:04:58Z,MERGED,True,79,275,10,https://github.com/jpochyla,Unlock storage after boot,2,[],https://github.com/trezor/trezor-core/pull/67,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/67,"Builds on top of #56, mostly Python changes.","Builds on top of #56, mostly Python changes.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,68,2017-10-24T16:32:47Z,2017-10-24T16:45:03Z,2017-10-24T17:36:20Z,MERGED,True,2,0,1,https://github.com/mcudev,bootloader: cleanup usb on firmware upload success before jumping to firmware,1,[],https://github.com/trezor/trezor-core/pull/68,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/68,"This fixes the firmware hanging after successful upload by the bootloader.
Not sure if this is the best way to handle this, but it seems to work. Notably, this works best after the 3 second wait. Otherwise, IO read errors are encountered by trezorctl.
Tested with lsusb and python-trezor> ./trezorctl firmware_update -f ../trezor-core/build/firmware/firmware.bin","This fixes the firmware hanging after successful upload by the bootloader.
Not sure if this is the best way to handle this, but it seems to work. Notably, this works best after the 3 second wait. Otherwise, IO read errors are encountered by trezorctl.
Tested with lsusb and python-trezor> ./trezorctl firmware_update -f ../trezor-core/build/firmware/firmware.bin",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,68,2017-10-24T16:32:47Z,2017-10-24T16:45:03Z,2017-10-24T17:36:20Z,MERGED,True,2,0,1,https://github.com/mcudev,bootloader: cleanup usb on firmware upload success before jumping to firmware,1,[],https://github.com/trezor/trezor-core/pull/68,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/68#issuecomment-339055270,"This fixes the firmware hanging after successful upload by the bootloader.
Not sure if this is the best way to handle this, but it seems to work. Notably, this works best after the 3 second wait. Otherwise, IO read errors are encountered by trezorctl.
Tested with lsusb and python-trezor> ./trezorctl firmware_update -f ../trezor-core/build/firmware/firmware.bin",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,68,2017-10-24T16:32:47Z,2017-10-24T16:45:03Z,2017-10-24T17:36:20Z,MERGED,True,2,0,1,https://github.com/mcudev,bootloader: cleanup usb on firmware upload success before jumping to firmware,1,[],https://github.com/trezor/trezor-core/pull/68,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/68#issuecomment-339060476,"This fixes the firmware hanging after successful upload by the bootloader.
Not sure if this is the best way to handle this, but it seems to work. Notably, this works best after the 3 second wait. Otherwise, IO read errors are encountered by trezorctl.
Tested with lsusb and python-trezor> ./trezorctl firmware_update -f ../trezor-core/build/firmware/firmware.bin","Added the same deinit+stop combo to other options where device is supposed to be unplugged (after successful wipe or failed wipe/upgrade) in 9e31e0f.
I thought it would help with USB IO errors after the device has called shut down, but they are still there. Oddly enough, I see IO errors even if I call hal_delay(3000); before usb_stop+usb_deinit combo or after the combo. :-/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,68,2017-10-24T16:32:47Z,2017-10-24T16:45:03Z,2017-10-24T17:36:20Z,MERGED,True,2,0,1,https://github.com/mcudev,bootloader: cleanup usb on firmware upload success before jumping to firmware,1,[],https://github.com/trezor/trezor-core/pull/68,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/68#issuecomment-339060919,"This fixes the firmware hanging after successful upload by the bootloader.
Not sure if this is the best way to handle this, but it seems to work. Notably, this works best after the 3 second wait. Otherwise, IO read errors are encountered by trezorctl.
Tested with lsusb and python-trezor> ./trezorctl firmware_update -f ../trezor-core/build/firmware/firmware.bin","ok, i'll keep that in mind. the usb code is a weak area for me that i need to review more to understand.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,68,2017-10-24T16:32:47Z,2017-10-24T16:45:03Z,2017-10-24T17:36:20Z,MERGED,True,2,0,1,https://github.com/mcudev,bootloader: cleanup usb on firmware upload success before jumping to firmware,1,[],https://github.com/trezor/trezor-core/pull/68,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/68#issuecomment-339067380,"This fixes the firmware hanging after successful upload by the bootloader.
Not sure if this is the best way to handle this, but it seems to work. Notably, this works best after the 3 second wait. Otherwise, IO read errors are encountered by trezorctl.
Tested with lsusb and python-trezor> ./trezorctl firmware_update -f ../trezor-core/build/firmware/firmware.bin",Added calls to USBD_LL_FlushEP in 8bd258d but it does not help anyway. I guess we need to wait with WFI or something like that.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,68,2017-10-24T16:32:47Z,2017-10-24T16:45:03Z,2017-10-24T17:36:20Z,MERGED,True,2,0,1,https://github.com/mcudev,bootloader: cleanup usb on firmware upload success before jumping to firmware,1,[],https://github.com/trezor/trezor-core/pull/68,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/68#issuecomment-339070744,"This fixes the firmware hanging after successful upload by the bootloader.
Not sure if this is the best way to handle this, but it seems to work. Notably, this works best after the 3 second wait. Otherwise, IO read errors are encountered by trezorctl.
Tested with lsusb and python-trezor> ./trezorctl firmware_update -f ../trezor-core/build/firmware/firmware.bin","I guess we need to wait with WFI or something like that.

That could be. I only reviewed the USB code as far as to know that the OTG_HS_IRQHandler is used and when I was doing that, I remember seeing code doing exactly that.
EDIT: I also verified that 8bd258d does not allow me to move the stop/deinit before the waits without causing read errors.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,70,2017-10-26T10:27:03Z,2018-02-19T08:11:36Z,2018-02-19T08:11:36Z,CLOSED,False,13,0,2,https://github.com/romanornr,Viacoin: Add network and test,1,[],https://github.com/trezor/trezor-core/pull/70,https://github.com/romanornr,1,https://github.com/trezor/trezor-core/pull/70,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,71,2017-10-26T14:32:20Z,2017-11-05T15:20:38Z,2017-11-05T15:29:40Z,MERGED,True,82,53,6,https://github.com/mcudev,touch: Use full 12-bit X and Y values,5,[],https://github.com/trezor/trezor-core/pull/71,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/71,"I was getting truncated touch coordinate values on my 240x320 screen.
This changes to use the full 12-bit X and Y values (reference the touch panel controller manual) and still leaves plenty of event type bits.","I was getting truncated touch coordinate values on my 240x320 screen.
This changes to use the full 12-bit X and Y values (reference the touch panel controller manual) and still leaves plenty of event type bits.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,71,2017-10-26T14:32:20Z,2017-11-05T15:20:38Z,2017-11-05T15:29:40Z,MERGED,True,82,53,6,https://github.com/mcudev,touch: Use full 12-bit X and Y values,5,[],https://github.com/trezor/trezor-core/pull/71,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/71#issuecomment-340275159,"I was getting truncated touch coordinate values on my 240x320 screen.
This changes to use the full 12-bit X and Y values (reference the touch panel controller manual) and still leaves plenty of event type bits.",about going into bootloader mode by pressing during power on: the user has to do something more than just hold down their finger and plug-in/reset/power-up the device. the touch panel controller chip only sends back useless reports until a significant (capacitance changing) event occurs. even pressing (before reset) and moving without lifting the finger (after reset) will not generate such an event unless done quickly/far enough (verified in debugger).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,71,2017-10-26T14:32:20Z,2017-11-05T15:20:38Z,2017-11-05T15:29:40Z,MERGED,True,82,53,6,https://github.com/mcudev,touch: Use full 12-bit X and Y values,5,[],https://github.com/trezor/trezor-core/pull/71,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/71#issuecomment-341085104,"I was getting truncated touch coordinate values on my 240x320 screen.
This changes to use the full 12-bit X and Y values (reference the touch panel controller manual) and still leaves plenty of event type bits.","@jpochyla Do you happen to know if the touch panel controller interrupt or reset lines are connected in the hardware design? Or, can you tell me which lines to the touch panel controller are connected to the MCU (obviously, I know I2C clock and data and 3v3 and GND are)?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,71,2017-10-26T14:32:20Z,2017-11-05T15:20:38Z,2017-11-05T15:29:40Z,MERGED,True,82,53,6,https://github.com/mcudev,touch: Use full 12-bit X and Y values,5,[],https://github.com/trezor/trezor-core/pull/71,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/71#issuecomment-341793129,"I was getting truncated touch coordinate values on my 240x320 screen.
This changes to use the full 12-bit X and Y values (reference the touch panel controller manual) and still leaves plenty of event type bits.","EINT is connected to PC4, REST is connected to PC5",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,71,2017-10-26T14:32:20Z,2017-11-05T15:20:38Z,2017-11-05T15:29:40Z,MERGED,True,82,53,6,https://github.com/mcudev,touch: Use full 12-bit X and Y values,5,[],https://github.com/trezor/trezor-core/pull/71,https://github.com/mcudev,5,https://github.com/trezor/trezor-core/pull/71#issuecomment-341860321,"I was getting truncated touch coordinate values on my 240x320 screen.
This changes to use the full 12-bit X and Y values (reference the touch panel controller manual) and still leaves plenty of event type bits.","added a commit to reset the touch panel module (CTPM). i noticed that without this, during development, i'd generate a touch event, then reset my dev board (but not the CTPM) and wind up getting a copy of the previous touch event reported again.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,71,2017-10-26T14:32:20Z,2017-11-05T15:20:38Z,2017-11-05T15:29:40Z,MERGED,True,82,53,6,https://github.com/mcudev,touch: Use full 12-bit X and Y values,5,[],https://github.com/trezor/trezor-core/pull/71,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/71#issuecomment-341980901,"I was getting truncated touch coordinate values on my 240x320 screen.
This changes to use the full 12-bit X and Y values (reference the touch panel controller manual) and still leaves plenty of event type bits.",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/72,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/72#issuecomment-341979195,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",The patch works fine except one detail: the picture is moved 80px to the top border of the display (in all 4 directions) leaving bottom part of the display untouched:,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/72#issuecomment-341985609,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",Thanks! I'll fix this when I have a ST7789V to test against. I have a feeling there are a few other things that I can do to simplify at the same time.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/72#issuecomment-343594577,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","@prusnak ok, these changes work now. i re-arranged the commits to try to make them easier to follow.
you might find make openocd_reset or make build_boardloader flash_boardloader openocd_reset useful, especially after flashing code, i know i do :)
this fixes some subtle bugs, for example, when orientation is such that the top of the lock is pointing right on the homescreen, running ./trezorctl wipe_device has a incompletely drawn screen.
I'd really like to remove the ST7789V config for PWCTRL1 in display_init. I left it because you had it, but I don't see it doing anything that I can easily observe. Also, you can change the gamma values if you'd like. They do make noticeable changes to the appearance of the colors.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,5,https://github.com/trezor/trezor-core/pull/72#issuecomment-343675823,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",added a couple more commits for display and ctpm reset and usage updates,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/72#issuecomment-346061804,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",@prusnak rebased just now. do i need to do anything else to get this merged?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/72#issuecomment-346181818,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","No, I will get this merged soon. Sorry.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,8,https://github.com/trezor/trezor-core/pull/72#issuecomment-346327047,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","No worries, this code is not easy to review and I didn't package it well. Also, just pointing out that the make target openocd_reset will probably make your testing life easier :)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,9,https://github.com/trezor/trezor-core/pull/72#issuecomment-346396634,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","The code works as expected, with one minor detail - the vertical orientation is inverted. (Device starts with upside down image).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,10,https://github.com/trezor/trezor-core/pull/72#issuecomment-346398506,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Hmm, works for me on the stuff you sent, try this:
make clean vendor vendorheader build_boardloader build_bootloader build_firmware flash openocd_reset",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,11,https://github.com/trezor/trezor-core/pull/72#issuecomment-346399828,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Also, I was wondering if you added the ""PWCTRL1: Power Control 1"" line for ST7789V for a particular reason, or if you were told to put that in by the manufacturer, etc...?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,12,https://github.com/trezor/trezor-core/pull/72#issuecomment-346401171,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Hah, I have two boards that produce different results (one is ok, another is upside-down). I guess we need to keep set the orientation explicitly because it's not the same by default everywhere. :-/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,13,https://github.com/trezor/trezor-core/pull/72#issuecomment-346401687,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","if you were told to put that in by the manufacturer, etc...?

I think I copied the sequence from some example I found online. It was not from the manufacturer.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,14,https://github.com/trezor/trezor-core/pull/72#issuecomment-346403917,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","two boards that produce different results

lolwut, display_clear still sets the orientation at the beginning. is the logo upside down in the bootloader, or just later in the firmware?
edit:
what happens with sd card inserted?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,15,https://github.com/trezor/trezor-core/pull/72#issuecomment-346404255,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",Both,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,16,https://github.com/trezor/trezor-core/pull/72#issuecomment-346405513,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","and what happens with the sd card inserted (code stays in the boardloader)?
that would be weird if the screen orientation is different within a batch for a prod run.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,17,https://github.com/trezor/trezor-core/pull/72#issuecomment-346405875,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",Just confirmed that the board works correctly with the code in master.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,18,https://github.com/trezor/trezor-core/pull/72#issuecomment-346406401,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",The only time I can remember the logo being upside down was when I forgot to flash the subsequent stages. That's why I was curious about the SD card test (since it stays in the boardloader and thus would be the latest flash definitely).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,19,https://github.com/trezor/trezor-core/pull/72#issuecomment-346408223,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Bootloader is also upside down on that particular board.
The other board is fine.
puzzled",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,20,https://github.com/trezor/trezor-core/pull/72#issuecomment-346409166,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","bootloader and firmware, if they don't get flashed with this new code, but the boardloader does, i can understand.
boardloader should display the text correctly though all the time because you'd need to flash it to get these changes. hence the sd card test.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,21,https://github.com/trezor/trezor-core/pull/72#issuecomment-346409994,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Bootloader is also upside down on that particular board.

I meant boardloader = the SD card test.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,22,https://github.com/trezor/trezor-core/pull/72#issuecomment-346410378,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","now that is puzzling. that sounds like a difference in the device manufacture. when holding the device upright, normally, (0,0) of the display is in the bottom right corner. the CTPM has (0,0) in the top left.
then the code compensates for that and rearranges the display (0,0) to match the CTPM.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,23,https://github.com/trezor/trezor-core/pull/72#issuecomment-346414188,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","on the board that is upside down, please try this on the GATECTRL line:
CMD(0xE4); DATA(0x1d); DATA(0x0A); DATA(0x10);
that flips the gate scan to be the normal 0->319 mode.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,24,https://github.com/trezor/trezor-core/pull/72#issuecomment-346415930,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",It is still upside down in boardloader.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,25,https://github.com/trezor/trezor-core/pull/72#issuecomment-346417038,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",wow. does make flash_erase work for that board?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,26,https://github.com/trezor/trezor-core/pull/72#issuecomment-346417394,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",if you swap display between boards does anything change?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,27,https://github.com/trezor/trezor-core/pull/72#issuecomment-346421383,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Hmm, well thanks for testing. I did not foresee this problem. I'll assume the old code works on both and my code does not and I'll try to reconcile that later.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,28,https://github.com/trezor/trezor-core/pull/72#issuecomment-346426030,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",make flash_erase does work on that board,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,29,https://github.com/trezor/trezor-core/pull/72#issuecomment-346427650,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","I confirm that if I swap displays between two board, the odd behaviour is appearing on the other board.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,30,https://github.com/trezor/trezor-core/pull/72#issuecomment-346432335,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Please try:
CMD(0xC0); DATA(0x00); // LCMCTRL: LCM Control: toggle default XOR RGB setting
If the display changes, we can rule out the hypothesis below.
If nothing changes, then the below hypothesis is worth further analysis.
Since the 0xE4 command did not have the effect that I was expecting, I have a hypothesis that the EXTC pin, which allows access to the extension commands(0xE4 is one such command), might not be high. If so, that could indicate a display module quality issue. To test this, we can try the 0xC0 command (also an extension command) and see if changing it has an effect on the display.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,31,https://github.com/trezor/trezor-core/pull/72#issuecomment-346433402,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",Nothing changed,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,32,https://github.com/trezor/trezor-core/pull/72#issuecomment-346433891,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Also I confirm that if I switched the display (non-weird one) on the same board, this display showed blue triangle instead of yellow one in the bootloader.
So I think you are on the right track",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,33,https://github.com/trezor/trezor-core/pull/72#issuecomment-346435104,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Exactly. Now, this is low probability, but if you add this next line just after the 0x3A COLMOD line and before the 0xC0 line, does the upside down display work?
CMD(0xDF); DATA(0x5A); DATA(0x69); DATA(0x02); DATA(0x01);
0xDF is an extension command, but its description says that when enabled, ""Commands in command table 2 can be executed when EXTC level is “Low”.""",True,{'HEART': ['https://github.com/faust64']}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,34,https://github.com/trezor/trezor-core/pull/72#issuecomment-346435742,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",Yeah! This line fixed the issue!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,35,https://github.com/trezor/trezor-core/pull/72#issuecomment-346435866,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","Sweet, that is an important find! Add that line and we should be good.Thanks!!!!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/prusnak,36,https://github.com/trezor/trezor-core/pull/72#issuecomment-346437648,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.",Thank you very much! You are truly a wizard! :D,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,72,2017-10-27T02:23:55Z,2017-11-22T18:34:09Z,2017-11-22T18:45:24Z,MERGED,True,122,133,8,https://github.com/mcudev,display: driver cleanup,10,['hardware'],https://github.com/trezor/trezor-core/pull/72,https://github.com/mcudev,37,https://github.com/trezor/trezor-core/pull/72#issuecomment-346440284,"I'd like for someone to try this with ST7789V and let me know if it fails.
I don't think it'll be too far off since it works great for ILI9341.","haha, i got lucky, but i'll take it :)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,73,2017-10-30T12:23:34Z,2017-11-03T18:33:16Z,2017-11-03T21:30:11Z,MERGED,True,17,20,2,https://github.com/mcudev,clear_otg_hs_memory: remove unpredictable write,2,[],https://github.com/trezor/trezor-core/pull/73,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/73,linking in discussion 6738796,linking in discussion 6738796,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,73,2017-10-30T12:23:34Z,2017-11-03T18:33:16Z,2017-11-03T21:30:11Z,MERGED,True,17,20,2,https://github.com/mcudev,clear_otg_hs_memory: remove unpredictable write,2,[],https://github.com/trezor/trezor-core/pull/73,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/73#issuecomment-340444138,linking in discussion 6738796,"added a second commit that reorders the operations done during shutdown. changed to call clear_otg_hs_memory last just in-case there is a problem -- do everything more important first. i also considered setting everything to 0xaaaaaaaa instead of 0. but didn't feel strongly about it. if it makes sense to do that, it's a simple change.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,74,2017-10-30T17:33:28Z,2017-11-03T18:38:19Z,2017-11-03T21:30:28Z,MERGED,True,2,2,1,https://github.com/mcudev,secbool: trivial addition of the unsigned suffix to the literals,1,[],https://github.com/trezor/trezor-core/pull/74,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/74,trivial addition of the unsigned suffix to the literals,trivial addition of the unsigned suffix to the literals,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/75,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/75#issuecomment-341982182,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","Inserting SD card with BOR level 3 restarts the board.
Inserting SD card with PVD level 5 halts the board.
If I set BOR to level 2 and PVD to level 4 it works without problems.
I am going to merge this, but change the values to the ones above. :-/
I am not sure if there is something we can do here, unfortunately.
PS: I am using 1 meter long USB-C cable connected directly to my laptop.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/75#issuecomment-341982430,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","First commit merged in 1737f17
Second commit ignored (as PVD level stays at 4).
BOR level set to 2 in 8190e09",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/75#issuecomment-341985406,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","Thanks for merging what you did!
I'll do more testing and scope some different code paths. It seems fairly obvious that some peripherals are drawing more current and thus causing a voltage drop due to the increased resistance of a longer USB cable.
I do feel somewhat strongly that BOR 3 and PVD 5 should be used even if it means that longer cables are not usable. At lower voltages, the device is operating functionally out of spec according to the manuals. It's better for security too if the proper voltages are enforced.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/mcudev,5,https://github.com/trezor/trezor-core/pull/75#issuecomment-342010537,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","@prusnak I noticed that the act of inserting the microSD seems to short the power supply to GND. That was unexpected. You don't even have to push it all the way in, just play with the spring a little and the brownout reset triggers (based on the reset flags that I see).
EDIT: Maybe in-rush current: https://resources.altium.com/pcb-design-blog/how-to-design-microsd-power-circuits-without-destabilizing-on-board-voltage-supply
Happens on my dev kit board too even when only the 3v3 and GND are connected to microSD.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/75#issuecomment-342013109,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","Happens on my dev kit board too even when only the 3v3 and GND are connected to microSD.

You mean the Discovery board or the board I've sent you?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/mcudev,7,https://github.com/trezor/trezor-core/pull/75#issuecomment-342013173,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","both, well, i mean, i only tried with only 3v3 and GND on my dev kit board. but the problem happens on both. i also verified that the reset flags show brownout occurred. i scoped my dev kit and the voltage drops to 0V.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/75#issuecomment-342014089,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","Thanks for the investigation! I'll discuss with the team if it is acceptable to reboot on SD card insertion (could be seen as a feature). Halt was not nice, but reboot is kinda OK.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/mcudev,9,https://github.com/trezor/trezor-core/pull/75#issuecomment-342014549,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","You're welcome! I don't think it's a reliable feature though. Sometimes when I did it, the bootloader hanged before fading away etc... I'm not sure if the processor went into lockup, or if it was just because of oscillation in the power supply. What I fear is that that it's just a symptom pointing at the power supply needing some work though. More capacitance at least. Maybe some more advanced stuff possibly.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/mcudev,10,https://github.com/trezor/trezor-core/pull/75#issuecomment-342141188,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","BTW, if you wind up making power subsystem changes, here are some thoughts:

Except for power-on and power-off, you always want to be in the range 2.7V - 3.6V; targeting 3.3V (ref RM0090 section 3.5, 3.6.2 and datasheet tables)
It would be nice to be able to use PVD level 7 (2.9V)
Add MCU controlled switches to control power supply to display, touch panel, and microSD (this will allow for example, to control screen flicker at startup)
Add any MCU recommended capacitors
Add decoupling capacitors near microSD and maybe display

Adding two informational links:

http://www.ti.com/lit/an/slva670a/slva670a.pdf
Guy mentiones microSD in-rush current around 200mA: http://www.smallridge.com.au/download/SD-MMC%20Integration.pdf",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/mcudev,11,https://github.com/trezor/trezor-core/pull/75#issuecomment-343592144,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008",@prusnak just following-up to see if you all have decided on any power subsystem changes?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/prusnak,12,https://github.com/trezor/trezor-core/pull/75#issuecomment-344055783,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","For the first batch of devices, it is already too late. :-/ We'll revisit the hardware changes for the next batch.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/mcudev,13,https://github.com/trezor/trezor-core/pull/75#issuecomment-344068733,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","dang, too bad. i did some testing with my dev kit and was able to keep the sd card from power faulting (due to in-rush current) by adding capacitors. i have more research too as i went partially through the process of creating some contingency code to try and persevere even with low voltage. it gets ugly though. maybe i should just open an issue to centralize the tracking for power related issues?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,75,2017-10-31T14:29:09Z,2017-11-05T15:43:57Z,2017-11-13T21:51:37Z,CLOSED,False,111,54,5,https://github.com/mcudev,"boardloader: production changes, flash option bytes, pvd level 5",2,[],https://github.com/trezor/trezor-core/pull/75,https://github.com/prusnak,14,https://github.com/trezor/trezor-core/pull/75#issuecomment-344070820,"Addressing a few things with this PR:

311a282
16f6573
a08f18c

I got the HAL version working, but noticed these things while doing it that made me think that what I'm proposing here is better:

HAL code does not actually check flash memory values
HAL flash code does not perform all recommended waits
HAL code depends on systick timer
HAL does not reset flash status flags

These changes also makes sure that the option byte code gets tested more as it is in the normal flow, and only a couple data values are different. I tested that setting the BOR, RDP (levels0 and 1), and WRP option bytes works.
There are a couple of subtle bug fixes mixed in.
I changed the header guards to not use reserved names.
There is a status flag addition for the 427 chip in flash_unlock.
Useful GDB debugging/testing commands for getting back to RDP level 0 from level 1:
// check FLASH->SR register
x/1xw 0x40023c0c

// check FLASH->OPTCR register
x/1xw 0x40023c14

// check FLASH->OPTCR1 register
x/1xw 0x40023c18

// unlock FLASH->OPTKEYR register
set * (unsigned int *) 0x40023c08 = 0x08192A3B
set * (unsigned int *) 0x40023c08 = 0x4C5D6E7F

// set defaults in FLASH->OPTCR1 register
set * (unsigned int *) 0x40023c18 = 0x0fff0000

// set defaults in FLASH->OPTCR register and commit changes to flash
set * (unsigned int *) 0x40023c14 = 0x0fffaaee

// check OPTION_BYTES_RDP_USER in flash memory
x/1xh 0x1fffc000

// check OPTION_BYTES_BANK1_WRP in flash memory
x/1xh 0x1fffc008

// check OPTION_BYTES_BANK2_WRP in flash memory
x/1xh 0x1ffec008","Yes, please do. I have a tracker issue with your comments in my internal
todo list, but having it on Github would be most probably much better.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,76,2017-11-05T18:24:47Z,2017-11-05T18:37:07Z,2017-11-05T19:02:01Z,MERGED,True,38,31,7,https://github.com/mcudev,cleanup and jump_to update,4,[],https://github.com/trezor/trezor-core/pull/76,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/76,"4 self-contained commits here. The 4th is most important:


Updated the secbool header guards to not use reserved identifiers


RNG while loop codestyle, RNG header guards, and minor cleanup


Change to follow the typical pattern of including the CMSIS device header instead of the HAL header because the CMSIS device header will include the HAL header when USE_HAL_DRIVER is defined.


The last commit clears the registers before even the next stage's NMI handler can run. don't want to leak to that either. also call clear_otg_hs_memory before jumping. the other changes are just re-arranging / cleanup.


Side note: There are newer versions of the CMSIS and device specific files available. Do you want to use those, or stick to what comes from micropython?:


https://github.com/ARM-software/CMSIS_5


http://www.st.com/en/embedded-software/stm32cubef4.html


I almost changed ""STM32_HAL_H"" to ""STM32_DEVICE_H"" except micropython example ports use this name and norcow would need a change merged too.","4 self-contained commits here. The 4th is most important:


Updated the secbool header guards to not use reserved identifiers


RNG while loop codestyle, RNG header guards, and minor cleanup


Change to follow the typical pattern of including the CMSIS device header instead of the HAL header because the CMSIS device header will include the HAL header when USE_HAL_DRIVER is defined.


The last commit clears the registers before even the next stage's NMI handler can run. don't want to leak to that either. also call clear_otg_hs_memory before jumping. the other changes are just re-arranging / cleanup.


Side note: There are newer versions of the CMSIS and device specific files available. Do you want to use those, or stick to what comes from micropython?:


https://github.com/ARM-software/CMSIS_5


http://www.st.com/en/embedded-software/stm32cubef4.html


I almost changed ""STM32_HAL_H"" to ""STM32_DEVICE_H"" except micropython example ports use this name and norcow would need a change merged too.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,76,2017-11-05T18:24:47Z,2017-11-05T18:37:07Z,2017-11-05T19:02:01Z,MERGED,True,38,31,7,https://github.com/mcudev,cleanup and jump_to update,4,[],https://github.com/trezor/trezor-core/pull/76,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/76#issuecomment-341994973,"4 self-contained commits here. The 4th is most important:


Updated the secbool header guards to not use reserved identifiers


RNG while loop codestyle, RNG header guards, and minor cleanup


Change to follow the typical pattern of including the CMSIS device header instead of the HAL header because the CMSIS device header will include the HAL header when USE_HAL_DRIVER is defined.


The last commit clears the registers before even the next stage's NMI handler can run. don't want to leak to that either. also call clear_otg_hs_memory before jumping. the other changes are just re-arranging / cleanup.


Side note: There are newer versions of the CMSIS and device specific files available. Do you want to use those, or stick to what comes from micropython?:


https://github.com/ARM-software/CMSIS_5


http://www.st.com/en/embedded-software/stm32cubef4.html


I almost changed ""STM32_HAL_H"" to ""STM32_DEVICE_H"" except micropython example ports use this name and norcow would need a change merged too.","Thanks!
Let's stick to the ones used by uPy if there is nothing really interesting in newer versions. (ATM looking into CMSIS 5, but haven't found anything worth yet ...)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,78,2017-11-06T11:57:02Z,2017-11-06T13:36:57Z,2017-11-06T13:40:50Z,MERGED,True,4,2,1,https://github.com/mcudev,boardloader: ensure check_sdcard fails when read fails,1,[],https://github.com/trezor/trezor-core/pull/78,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/78,"During testing, I was curious why disabling INSTRUCTION_CACHE_ENABLE caused the SD card code to fail. It turns out that it causes SDIO Rx FIFO overruns (my guess is that it is due to the extra flash waits introduced by instruction loads from flash). At least it does not look to be caused by SD power draw.
These code changes ensure that the checks fail when the read fails.","During testing, I was curious why disabling INSTRUCTION_CACHE_ENABLE caused the SD card code to fail. It turns out that it causes SDIO Rx FIFO overruns (my guess is that it is due to the extra flash waits introduced by instruction loads from flash). At least it does not look to be caused by SD power draw.
These code changes ensure that the checks fail when the read fails.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,78,2017-11-06T11:57:02Z,2017-11-06T13:36:57Z,2017-11-06T13:40:50Z,MERGED,True,4,2,1,https://github.com/mcudev,boardloader: ensure check_sdcard fails when read fails,1,[],https://github.com/trezor/trezor-core/pull/78,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/78#issuecomment-342150440,"During testing, I was curious why disabling INSTRUCTION_CACHE_ENABLE caused the SD card code to fail. It turns out that it causes SDIO Rx FIFO overruns (my guess is that it is due to the extra flash waits introduced by instruction loads from flash). At least it does not look to be caused by SD power draw.
These code changes ensure that the checks fail when the read fails.",Nice catch!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,79,2017-11-06T13:41:36Z,2017-11-06T13:57:00Z,2017-11-06T14:40:49Z,CLOSED,False,1,6,1,https://github.com/mcudev,emulator: set default HEAPSIZE to roughly equal value from firmware.elf,1,[],https://github.com/trezor/trezor-core/pull/79,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/79,"fixes #77
not sure why HEAPSIZE would be different based on operating system architecture, so i collapsed it. works for me.","fixes #77
not sure why HEAPSIZE would be different based on operating system architecture, so i collapsed it. works for me.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,79,2017-11-06T13:41:36Z,2017-11-06T13:57:00Z,2017-11-06T14:40:49Z,CLOSED,False,1,6,1,https://github.com/mcudev,emulator: set default HEAPSIZE to roughly equal value from firmware.elf,1,[],https://github.com/trezor/trezor-core/pull/79,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/79#issuecomment-342154934,"fixes #77
not sure why HEAPSIZE would be different based on operating system architecture, so i collapsed it. works for me.",Because on 64-bit build all micropython variables are twice as big and they will not fit the heap that is enough on 32-bit (x86 and ARM).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,79,2017-11-06T13:41:36Z,2017-11-06T13:57:00Z,2017-11-06T14:40:49Z,CLOSED,False,1,6,1,https://github.com/mcudev,emulator: set default HEAPSIZE to roughly equal value from firmware.elf,1,[],https://github.com/trezor/trezor-core/pull/79,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/79#issuecomment-342155555,"fixes #77
not sure why HEAPSIZE would be different based on operating system architecture, so i collapsed it. works for me.",Fixed differently in e40c436. Thx!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,79,2017-11-06T13:41:36Z,2017-11-06T13:57:00Z,2017-11-06T14:40:49Z,CLOSED,False,1,6,1,https://github.com/mcudev,emulator: set default HEAPSIZE to roughly equal value from firmware.elf,1,[],https://github.com/trezor/trezor-core/pull/79,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/79#issuecomment-342166981,"fixes #77
not sure why HEAPSIZE would be different based on operating system architecture, so i collapsed it. works for me.","hmm, ok, cool. i wonder if the generated binary is ever 64-bit. i'm on x86_64 and the micropython binary generated is ELF 32-bit. eh, it works.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,79,2017-11-06T13:41:36Z,2017-11-06T13:57:00Z,2017-11-06T14:40:49Z,CLOSED,False,1,6,1,https://github.com/mcudev,emulator: set default HEAPSIZE to roughly equal value from firmware.elf,1,[],https://github.com/trezor/trezor-core/pull/79,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/79#issuecomment-342168253,"fixes #77
not sure why HEAPSIZE would be different based on operating system architecture, so i collapsed it. works for me.","It's always 32-bit, because we build it that way. Upstream build defaults to 64-bit.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,80,2017-11-06T15:11:19Z,2017-11-06T17:03:02Z,2017-11-06T18:40:11Z,MERGED,True,4,4,1,https://github.com/mcudev,firmware: get_entropy text wrapping,1,[],https://github.com/trezor/trezor-core/pull/80,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/80,testing with trezorctl get_entropy 4 the text was going off screen.,testing with trezorctl get_entropy 4 the text was going off screen.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,80,2017-11-06T15:11:19Z,2017-11-06T17:03:02Z,2017-11-06T18:40:11Z,MERGED,True,4,4,1,https://github.com/mcudev,firmware: get_entropy text wrapping,1,[],https://github.com/trezor/trezor-core/pull/80,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/80#issuecomment-342187047,testing with trezorctl get_entropy 4 the text was going off screen.,"wow, the emulator is slick!
make clean vendor build_unix emu
trezorctl -t udp get_entropy 4",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,80,2017-11-06T15:11:19Z,2017-11-06T17:03:02Z,2017-11-06T18:40:11Z,MERGED,True,4,4,1,https://github.com/mcudev,firmware: get_entropy text wrapping,1,[],https://github.com/trezor/trezor-core/pull/80,https://github.com/jpochyla,3,https://github.com/trezor/trezor-core/pull/80#issuecomment-342216281,testing with trezorctl get_entropy 4 the text was going off screen.,"Thanks! Btw, as you've started digging trough the Python code, what do think about it? It is primary meant to be a platform, so any early feedback is welcome!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,80,2017-11-06T15:11:19Z,2017-11-06T17:03:02Z,2017-11-06T18:40:11Z,MERGED,True,4,4,1,https://github.com/mcudev,firmware: get_entropy text wrapping,1,[],https://github.com/trezor/trezor-core/pull/80,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/80#issuecomment-342244119,testing with trezorctl get_entropy 4 the text was going off screen.,"I only know a little python right now, so I was like, ""what is all this async and await stuff...I'll have to read about that sometime"". :)
I ended up just trying a couple of things like load_device and wipe_device until I found something close enough that I could copy and change just a little bit for what I needed.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,84,2017-11-12T09:10:58Z,2017-11-13T20:27:52Z,2017-11-13T20:27:52Z,CLOSED,False,88,47,6,https://github.com/m1ck2,Recovery,3,[],https://github.com/trezor/trezor-core/pull/84,https://github.com/m1ck2,1,https://github.com/trezor/trezor-core/pull/84,trying to recover old wallet,trying to recover old wallet,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,84,2017-11-12T09:10:58Z,2017-11-13T20:27:52Z,2017-11-13T20:27:52Z,CLOSED,False,88,47,6,https://github.com/m1ck2,Recovery,3,[],https://github.com/trezor/trezor-core/pull/84,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/84#issuecomment-344047348,trying to recover old wallet,We will pull this branch to master when it is ready.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,85,2017-11-13T12:51:43Z,2017-11-24T14:01:46Z,2017-11-25T00:04:57Z,MERGED,True,2035,454,22,https://github.com/jpochyla,Segwit,23,[],https://github.com/trezor/trezor-core/pull/85,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/85,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,85,2017-11-13T12:51:43Z,2017-11-24T14:01:46Z,2017-11-25T00:04:57Z,MERGED,True,2035,454,22,https://github.com/jpochyla,Segwit,23,[],https://github.com/trezor/trezor-core/pull/85,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/85#issuecomment-346651995,,Somewhat squashed and force pushed. I suggest to merge this --no-ff to make clear what was part of the segwit PR,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,85,2017-11-13T12:51:43Z,2017-11-24T14:01:46Z,2017-11-25T00:04:57Z,MERGED,True,2035,454,22,https://github.com/jpochyla,Segwit,23,[],https://github.com/trezor/trezor-core/pull/85,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/85#issuecomment-346907887,,🎉,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,87,2017-11-20T14:33:23Z,2017-11-20T14:57:23Z,2017-11-24T14:05:27Z,CLOSED,False,396,193,4,https://github.com/m1ck2,Tsusanka/wip segwit2,6,[],https://github.com/trezor/trezor-core/pull/87,https://github.com/m1ck2,1,https://github.com/trezor/trezor-core/pull/87,Looking to recover old wallet.,Looking to recover old wallet.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,87,2017-11-20T14:33:23Z,2017-11-20T14:57:23Z,2017-11-24T14:05:27Z,CLOSED,False,396,193,4,https://github.com/m1ck2,Tsusanka/wip segwit2,6,[],https://github.com/trezor/trezor-core/pull/87,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/87#issuecomment-345720697,Looking to recover old wallet.,Please stop.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,88,2017-12-12T23:25:51Z,2017-12-14T16:47:45Z,2017-12-14T16:48:07Z,MERGED,True,127,75,11,https://github.com/jhoenicke,Remove PIN failure area,3,[],https://github.com/trezor/trezor-core/pull/88,https://github.com/jhoenicke,1,https://github.com/trezor/trezor-core/pull/88,Instead put a small area into the norcow sector.,Instead put a small area into the norcow sector.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,88,2017-12-12T23:25:51Z,2017-12-14T16:47:45Z,2017-12-14T16:48:07Z,MERGED,True,127,75,11,https://github.com/jhoenicke,Remove PIN failure area,3,[],https://github.com/trezor/trezor-core/pull/88,https://github.com/jhoenicke,2,https://github.com/trezor/trezor-core/pull/88#issuecomment-351759827,Instead put a small area into the norcow sector.,Added callback back to python for wait countdown,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,88,2017-12-12T23:25:51Z,2017-12-14T16:47:45Z,2017-12-14T16:48:07Z,MERGED,True,127,75,11,https://github.com/jhoenicke,Remove PIN failure area,3,[],https://github.com/trezor/trezor-core/pull/88,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/88#issuecomment-351768086,Instead put a small area into the norcow sector.,Thanks! 👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,1,https://github.com/trezor/trezor-core/pull/90,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction",True,"{'HEART': ['https://github.com/punkr0ck', 'https://github.com/karek314', 'https://github.com/4miners', 'https://github.com/tobiaslins', 'https://github.com/pawnsmaster'], 'THUMBS_UP': ['https://github.com/punkr0ck', 'https://github.com/karek314', 'https://github.com/fjrojasgarcia', 'https://github.com/MPiaggi', 'https://github.com/tobiaslins', 'https://github.com/baw9a'], 'HOORAY': ['https://github.com/tobiaslins']}"
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/slush0,2,https://github.com/trezor/trezor-core/pull/90#issuecomment-373410825,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","Hello @alepop,any progress on this?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,3,https://github.com/trezor/trezor-core/pull/90#issuecomment-373412402,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@slush0 hi! Yes, I work on it, and a lot of code is not pushed to the repo. I've seen that project code is changed, and try to adapt my one to follow best practices. Why are you asking?
I try to finish all code for the end of this week.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/matejcik,4,https://github.com/trezor/trezor-core/pull/90#issuecomment-380542143,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","let me just point out here that amount and fee and other fields are declared as strings??
that doesn't seem right",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,5,https://github.com/trezor/trezor-core/pull/90#issuecomment-380581928,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@matejcik Lisk is written on javascript, and as you maybe know, there is a problem with big numbers in this language. And because of this Lisk transactions use string for each field except date and type. Previous version use number for amount and fee but in 1.0 version will use string.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/90#issuecomment-380592487,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","Well FML this is really fugly. Let me think about this. Please review
the rest and we'll discuss this later. At the moment I am inclining to
using ints in our API.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/90#issuecomment-380740716,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@alepop Can you point me to documentation where there is defined what is the valid range of values for amount/fee? I feel like we should have ints in our protocol and the conversion burden should be in the library interfacing with TREZOR, not in the TREZOR itself, so I would love to use ints in protobuf, but I need to know the range first.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,8,https://github.com/trezor/trezor-core/pull/90#issuecomment-380778071,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@prusnak I understand your point of view. You can't find any valid range for an amount in the documentation, you only can find this 64-bit integer representing the amount of Lisk to be transferred in the documentation. But based on code the valid range for the amount is from 0 to 18446744073709551615.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/prusnak,9,https://github.com/trezor/trezor-core/pull/90#issuecomment-380778797,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@alepop last question, can you confirm that amounts and fees are always non-negative numbers? so we can use uint64?
If yes, can you please send a PR to trezor-common, where you change string to uint64 where needed? (amount/fee for sure, not sure about votes/data/... fields)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,10,https://github.com/trezor/trezor-core/pull/90#issuecomment-380781971,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@prusnak yes, amounts and fees are non-negative numbers. yes, we can useuint64.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,11,https://github.com/trezor/trezor-core/pull/90#issuecomment-380816663,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@prusnak so, now I need to update trezo-common messages to use uint64 and make something like converter for this fields (str -> int ) in python-trezor?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/prusnak,12,https://github.com/trezor/trezor-core/pull/90#issuecomment-380824356,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@alepop yes, please, update fields where it makes sense to uint64
For python-trezor it is just enough to strip the quotes as python has proper int implementation, but let's discuss further there if needed.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,13,https://github.com/trezor/trezor-core/pull/90#issuecomment-380899975,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction",@prusnak done trezor/trezor-common#95,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/prusnak,14,https://github.com/trezor/trezor-core/pull/90#issuecomment-381578683,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","Just merged in trezor/trezor-common#95
Please rework this PR if needed.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,15,https://github.com/trezor/trezor-core/pull/90#issuecomment-381585124,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@prusnak thanks, in progress",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,16,https://github.com/trezor/trezor-core/pull/90#issuecomment-381739245,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction",@prusnak done.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/prusnak,17,https://github.com/trezor/trezor-core/pull/90#issuecomment-382394264,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@alepop thanks!
@matejcik can you please have a look at this and help with the review? @jpochyla will do the final review.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,18,https://github.com/trezor/trezor-core/pull/90#issuecomment-383320693,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@matejcik I appreciate your review and suggestions. Please take a look now. Also, I found a bug in logic and provide a pr with fixed tests trezor/python-trezor#252",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/jpochyla,19,https://github.com/trezor/trezor-core/pull/90#issuecomment-390621158,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","Thank you for promptly responding @alepop, but after further discussions, I'm a bit hesitant to merge the sign_message/verify_message code. Signing arbitrary digests with arbitrary key vector is dangerous. Let's escalate this up stream. In case more restricted signing scheme gets adopted, we can revisit it later.
So, basically -- ACK with a bit of style changes TBD on my part, just without the sign/verify code.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,20,https://github.com/trezor/trezor-core/pull/90#issuecomment-390758603,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction",@jpochyla sorry I don't understand what part of sign/verify message bothered you? I fixed the part of code when I take only 64 bytes of a long signature because now Lisk uses crypto_sign_detached and computed signature are exactly 64 bytes long because don't include message body anymore.  Thanks.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/jpochyla,21,https://github.com/trezor/trezor-core/pull/90#issuecomment-390790239,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","@alepop In Bitcoin and clones, before signing a message, we prefix it with a header:
https://github.com/trezor/trezor-core/blob/master/src/apps/common/signverify.py#L12
Reasons are:

separation of message signing and transaction signing. When I'm signing arbitrary Bitcoin message, I can be sure that it won't lead to coinloss. apps.lisk signs whatever you give to it, even a transaction digest.
separation of coins on the same curve. For example Litecoin has a different message prefix. apps.lisk doesn't do that, it allows signing any message with any key derived from seed on ed25519 curve.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,22,https://github.com/trezor/trezor-core/pull/90#issuecomment-390797426,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction",@jpochyla got it. thank you for the explanation,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/prusnak,23,https://github.com/trezor/trezor-core/pull/90#issuecomment-391064082,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","JFYI: I removed Lisk{SignMessage,MessageSignature,VerifyMessage} in trezor/trezor-common@fb662e5, so let's drop Sign/Verify message for Lisk for now.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,24,https://github.com/trezor/trezor-core/pull/90#issuecomment-391118136,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction",@prusnak @jpochyla I've opened an issue about signed message prefix in the LiskHQ repository. I will make new pr with message sign/verify after correct implementation for this feature in Lisk.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/matejcik,25,https://github.com/trezor/trezor-core/pull/90#issuecomment-391327408,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","for the record, python-trezor removes Lisk sign/verify functionality in trezor/python-trezor@bc27089 and trezor/python-trezor@4b79262",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,90,2018-01-06T11:39:49Z,2018-05-23T11:54:01Z,2018-06-06T21:08:36Z,MERGED,True,1192,4,47,https://github.com/alepop,Add Lisk support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/90,https://github.com/alepop,26,https://github.com/trezor/trezor-core/pull/90#issuecomment-395214454,"This is a work in progress to add support for Lisk to the trezor-core.
Messages: trezor/trezor-common#68
Trezor-pyton: trezor/python-trezor#197
Progress:

 Lisk get address
 Lisk get public key
 Lisk sign message
 Lisk verify message
 Lisk sign tx

 send transaction
 signature ransaction
 delegate transaction
 vote transaction
 multisignature transaction
dApp tx types wil not allowed in the Lisk 1.0 release
dapp tansaction
dapp In transfer transaction
dapp out transfer transaction","for the record, open pr with restored functionality for signing and verifying messages #217",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,92,2018-01-11T12:56:16Z,2018-01-11T22:08:37Z,2018-01-11T22:12:21Z,MERGED,True,94,71,4,https://github.com/tsusanka,Ethereum signing,3,[],https://github.com/trezor/trezor-core/pull/92,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/92,"Some final fixes for Ethereum. Few tiny things are missing:

check the ""ux"" and wording in layout.py
data progress is not implemented","Some final fixes for Ethereum. Few tiny things are missing:

check the ""ux"" and wording in layout.py
data progress is not implemented",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,92,2018-01-11T12:56:16Z,2018-01-11T22:08:37Z,2018-01-11T22:12:21Z,MERGED,True,94,71,4,https://github.com/tsusanka,Ethereum signing,3,[],https://github.com/trezor/trezor-core/pull/92,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/92#issuecomment-357078314,"Some final fixes for Ethereum. Few tiny things are missing:

check the ""ux"" and wording in layout.py
data progress is not implemented","Cool!
Added commit af93c72 which fixes compatibility with T1 and also passes the device test in python-trezor.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,93,2018-01-16T14:44:23Z,2018-01-16T15:10:07Z,2018-01-16T15:10:14Z,MERGED,True,408,290,31,https://github.com/jpochyla,Recovery,14,[],https://github.com/trezor/trezor-core/pull/93,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/93,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,94,2018-01-17T20:18:19Z,2018-01-17T22:45:54Z,2018-07-21T10:52:03Z,CLOSED,False,1,1,1,https://github.com/ph4r05,embed/unix/usb.c: usb write fix,1,[],https://github.com/trezor/trezor-core/pull/94,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/94,"Hi!
I've got some small assertion problem with usb.c. This PR fixes it.
Pls take a look.
The problem:
FATAL ERROR:
expr: usb_hid_write(0, (const uint8_t *)ping_resp, strlen(ping_resp))
msg : usb_hid_write
file: embed/unix/usb.c:121
func: usb_hid_read
rev : 9c71bd8-dirty
SHUTDOWN","Hi!
I've got some small assertion problem with usb.c. This PR fixes it.
Pls take a look.
The problem:
FATAL ERROR:
expr: usb_hid_write(0, (const uint8_t *)ping_resp, strlen(ping_resp))
msg : usb_hid_write
file: embed/unix/usb.c:121
func: usb_hid_read
rev : 9c71bd8-dirty
SHUTDOWN",True,{'THUMBS_UP': ['https://github.com/karelbilek']}
trezor/trezor-core,https://github.com/trezor/trezor-core,94,2018-01-17T20:18:19Z,2018-01-17T22:45:54Z,2018-07-21T10:52:03Z,CLOSED,False,1,1,1,https://github.com/ph4r05,embed/unix/usb.c: usb write fix,1,[],https://github.com/trezor/trezor-core/pull/94,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/94#issuecomment-358475080,"Hi!
I've got some small assertion problem with usb.c. This PR fixes it.
Pls take a look.
The problem:
FATAL ERROR:
expr: usb_hid_write(0, (const uint8_t *)ping_resp, strlen(ping_resp))
msg : usb_hid_write
file: embed/unix/usb.c:121
func: usb_hid_read
rev : 9c71bd8-dirty
SHUTDOWN",Thanks for the fix. I fixed the issue a little bit differently in 3098dc8 (didn't like we are misusing usb_hid_write from usb_hid_read).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,94,2018-01-17T20:18:19Z,2018-01-17T22:45:54Z,2018-07-21T10:52:03Z,CLOSED,False,1,1,1,https://github.com/ph4r05,embed/unix/usb.c: usb write fix,1,[],https://github.com/trezor/trezor-core/pull/94,https://github.com/ph4r05,3,https://github.com/trezor/trezor-core/pull/94#issuecomment-358476471,"Hi!
I've got some small assertion problem with usb.c. This PR fixes it.
Pls take a look.
The problem:
FATAL ERROR:
expr: usb_hid_write(0, (const uint8_t *)ping_resp, strlen(ping_resp))
msg : usb_hid_write
file: embed/unix/usb.c:121
func: usb_hid_read
rev : 9c71bd8-dirty
SHUTDOWN",ok cool! thanks for the fix.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,98,2018-01-22T16:43:31Z,2018-01-22T16:58:39Z,2018-01-22T16:58:45Z,MERGED,True,99,71,10,https://github.com/jpochyla,Reset device,6,[],https://github.com/trezor/trezor-core/pull/98,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/98,Implements new reset device workflow.,Implements new reset device workflow.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,100,2018-01-23T20:58:38Z,2018-03-11T13:03:35Z,2018-03-11T13:03:35Z,CLOSED,False,26,0,2,https://github.com/TheSin-,Terracoin: Add network and test,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/100,https://github.com/TheSin-,1,https://github.com/trezor/trezor-core/pull/100,"Adding Terracoin (TRC) to Trezor, this adds the coin and adds it to the tests.
This compliments the PR on trezor-common trezor/trezor-common#75","Adding Terracoin (TRC) to Trezor, this adds the coin and adds it to the tests.
This compliments the PR on trezor-common trezor/trezor-common#75",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,100,2018-01-23T20:58:38Z,2018-03-11T13:03:35Z,2018-03-11T13:03:35Z,CLOSED,False,26,0,2,https://github.com/TheSin-,Terracoin: Add network and test,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/100,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/100#issuecomment-372113910,"Adding Terracoin (TRC) to Trezor, this adds the coin and adds it to the tests.
This compliments the PR on trezor-common trezor/trezor-common#75",No need to send a separate PR here. The coin definition will get propagated from trezor-common repository.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,105,2018-02-08T14:32:29Z,2018-02-26T15:14:13Z,2018-02-26T15:18:44Z,MERGED,True,2376,573,135,https://github.com/tsusanka,Multisig,40,[],https://github.com/trezor/trezor-core/pull/105,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/105,"Multisig support. To be reviewed and discussed, but all tests are passing","Multisig support. To be reviewed and discussed, but all tests are passing",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/106,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/106#issuecomment-364203418,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","Also, if this PR is accepted, then probably something similar for v1 devices should be done.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/106#issuecomment-364203455,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","Nice find, but I would rather not workaround this in our stack. The bug will be fixed in Chrome eventually and we have a redirect from HTTP to HTTPS.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/106#issuecomment-364204538,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","Yes, I saw the 301 redirect. It leaves some to be desired from a SSL stripping and response manipulation perspective. This is kind of a pet peeve of mine. I was also going to work on a commit to change all the trezor.io/start URLs to https. When I help people setup devices, I always have to tell them to put ""https://"" in front of the URL on the device screen. I get that the overall security model can withstand a malicious website (due to on device verification), but by using http sometimes, it reduces the barrier to user error causing loss.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/mcudev,5,https://github.com/trezor/trezor-core/pull/106#issuecomment-364207347,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","The nice side effect of this PR stopping the trezor.io/start notificationon every plug when Chrome is active is because that notification only helps new users. After initialization, it would be more helpful to notify a link to https://wallet.trezor.io/. I think the notifications are annnoying all the time. But that's just me :)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/106#issuecomment-364217274,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","Related; the redirects could use some updating too since the trailing slash matters:
http://trezor.io/start -> https://trezor.io/start
https://trezor.io/start -> http://trezor.io/start/
http://trezor.io/start/ -> https://trezor.io/start/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/mcudev,7,https://github.com/trezor/trezor-core/pull/106#issuecomment-364221269,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","I went ahead and added a commit to specify https on the trezor.io/start user prompts. On the firmware homescreen, I removed the ""Go to"". I understand this will probably get closed unmerged (no problem), but felt like presenting it anyways.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/106#issuecomment-364270489,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","I see your points and kind of agree with them, but like you said, I am going to close this unmerged.
We purposefully copied the narrative from Chrome popup and used ""Go to trezor.io/start"" so the user is not confused. Also I suppose that Chrome is slowly trying to kill HTTP, so we should be good eventually.
Thanks for the ideas, nevertheless!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/mcudev,9,https://github.com/trezor/trezor-core/pull/106#issuecomment-364650625,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","@prusnak hey, i'm stupid, i just looked closer at the network capture. the http request is not a chrome bug. it is a result of the weird redirects that i mentioned where https://trezor.io/start redirects to http://trezor.io/start/ which then redirects back to https://trezor.io/start/.
easiest fix is to fix the redirect loop by making https://trezor.io/start redirect to https://trezor.io/start/.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/106#issuecomment-364658002,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","Ah, I remember. This is caused by a combination of Clouflare running on
top of GitHub pages.
GitHub does the redirect from /start to /start/ but it uses HTTP,
because it doesn't now about Cloudflare running on top.
This could be fixed in CF and we are looking into it ATM.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/slush0,11,https://github.com/trezor/trezor-core/pull/106#issuecomment-364658443,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","Fixed now, thanks for pointing it out.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,106,2018-02-08T18:20:32Z,2018-02-08T22:29:11Z,2018-02-10T14:31:39Z,CLOSED,False,9,6,3,https://github.com/mcudev,webusb: avoid chrome http bug and nice side-effect of avoiding annoying notifications,2,[],https://github.com/trezor/trezor-core/pull/106,https://github.com/mcudev,12,https://github.com/trezor/trezor-core/pull/106#issuecomment-364658997,"I was testing with the latest version of Chrome on a Ubuntu machine with Wireshark running.
When I plugged the device in, Chrome showed a notification. When I clicked on that notification, Chrome erroneously generated a plain HTTP request to http://trezor.io/start. This is a Chrome bug as it ignored the descriptor value being set to the HTTPS scheme (I verified the descriptor value with Wireshark listening on my USB bus also) (descriptor reference https://wicg.github.io/webusb/#webusb-descriptors). This bug is tied to Chrome's current cache status as well. So, clear your cache to easily reproduce.
This PR sets the scheme value to 255 which is supposed to encode the entire URL. This causes Chrome to neither show the notification, nor send a request. I'm fine with this because I thought that the notification was annoying anyways and at least it doesn't cause insecure requests to be processed by the browser.","yep, i confirm that fixed it. https://trezor.io/start returns a 302 instead of 301, but that is very minor.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,108,2018-02-10T14:12:06Z,2018-02-12T13:40:51Z,2018-02-12T19:54:05Z,MERGED,True,0,7,1,https://github.com/mcudev,bootloader: fix process_msg_unknown remaining chunk calculation,2,[],https://github.com/trezor/trezor-core/pull/108,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/108,"I was getting a red screen in the bootloader when I sent the unknown/invalid message reset_device. The message size, 22 was less than 55, and thus wrapping around to a large unsigned int. Also, the calculation was not rounding up to process all bytes. Finally, I made a small change to actually use the iface_num argument. I have not checked to see if a similar bug is in the firmware, but I'll look and open a separate PR if I find one.
I verified that this patch works against these tests that send messages having 1, 2, and 3 chunks:
python2 trezorctl reset_device

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon agent'","I was getting a red screen in the bootloader when I sent the unknown/invalid message reset_device. The message size, 22 was less than 55, and thus wrapping around to a large unsigned int. Also, the calculation was not rounding up to process all bytes. Finally, I made a small change to actually use the iface_num argument. I have not checked to see if a similar bug is in the firmware, but I'll look and open a separate PR if I find one.
I verified that this patch works against these tests that send messages having 1, 2, and 3 chunks:
python2 trezorctl reset_device

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon agent'",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,108,2018-02-10T14:12:06Z,2018-02-12T13:40:51Z,2018-02-12T19:54:05Z,MERGED,True,0,7,1,https://github.com/mcudev,bootloader: fix process_msg_unknown remaining chunk calculation,2,[],https://github.com/trezor/trezor-core/pull/108,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/108#issuecomment-364705593,"I was getting a red screen in the bootloader when I sent the unknown/invalid message reset_device. The message size, 22 was less than 55, and thus wrapping around to a large unsigned int. Also, the calculation was not rounding up to process all bytes. Finally, I made a small change to actually use the iface_num argument. I have not checked to see if a similar bug is in the firmware, but I'll look and open a separate PR if I find one.
I verified that this patch works against these tests that send messages having 1, 2, and 3 chunks:
python2 trezorctl reset_device

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon agent'","i pushed up a second commit to override the first. on second thought, i don't think we need that code because the bootloader bootloader_usb_loop eats the remaining bytes already, but with header processing too so that the message stream synchs.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,108,2018-02-10T14:12:06Z,2018-02-12T13:40:51Z,2018-02-12T19:54:05Z,MERGED,True,0,7,1,https://github.com/mcudev,bootloader: fix process_msg_unknown remaining chunk calculation,2,[],https://github.com/trezor/trezor-core/pull/108,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/108#issuecomment-364925190,"I was getting a red screen in the bootloader when I sent the unknown/invalid message reset_device. The message size, 22 was less than 55, and thus wrapping around to a large unsigned int. Also, the calculation was not rounding up to process all bytes. Finally, I made a small change to actually use the iface_num argument. I have not checked to see if a similar bug is in the firmware, but I'll look and open a separate PR if I find one.
I verified that this patch works against these tests that send messages having 1, 2, and 3 chunks:
python2 trezorctl reset_device

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon agent'","I know that bootloader_usb_loop eats the remaining bytes, but I like that we have a specific eater in process_msg_unknown. Therefore I cherry-picked just the first commit and left out the second one. Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,108,2018-02-10T14:12:06Z,2018-02-12T13:40:51Z,2018-02-12T19:54:05Z,MERGED,True,0,7,1,https://github.com/mcudev,bootloader: fix process_msg_unknown remaining chunk calculation,2,[],https://github.com/trezor/trezor-core/pull/108,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/108#issuecomment-364926197,"I was getting a red screen in the bootloader when I sent the unknown/invalid message reset_device. The message size, 22 was less than 55, and thus wrapping around to a large unsigned int. Also, the calculation was not rounding up to process all bytes. Finally, I made a small change to actually use the iface_num argument. I have not checked to see if a similar bug is in the firmware, but I'll look and open a separate PR if I find one.
I verified that this patch works against these tests that send messages having 1, 2, and 3 chunks:
python2 trezorctl reset_device

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon agent'",The second wrong usage of  USB_IFACE_NUM was fixed in 8a409bd,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,108,2018-02-10T14:12:06Z,2018-02-12T13:40:51Z,2018-02-12T19:54:05Z,MERGED,True,0,7,1,https://github.com/mcudev,bootloader: fix process_msg_unknown remaining chunk calculation,2,[],https://github.com/trezor/trezor-core/pull/108,https://github.com/mcudev,5,https://github.com/trezor/trezor-core/pull/108#issuecomment-364942509,"I was getting a red screen in the bootloader when I sent the unknown/invalid message reset_device. The message size, 22 was less than 55, and thus wrapping around to a large unsigned int. Also, the calculation was not rounding up to process all bytes. Finally, I made a small change to actually use the iface_num argument. I have not checked to see if a similar bug is in the firmware, but I'll look and open a separate PR if I find one.
I verified that this patch works against these tests that send messages having 1, 2, and 3 chunks:
python2 trezorctl reset_device

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'

python2 trezorctl load_device -m 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon agent'","the only other thing that i thought of that makes me like the second commit more is that if the msg_size is specified to be like 0xffffffff, then the calc does a -55 + 62 and wraps around. we fall back to the bootloader_usb_loop eater anyways. i don't think we can trust the msg_size, it seems like more of a hint for what the size might be.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,110,2018-02-10T16:31:10Z,2018-02-10T21:43:04Z,2018-02-10T21:43:08Z,CLOSED,False,2,2,2,https://github.com/mcudev,firmware: fix bugs affecting pb message handling and wipe device flow,1,[],https://github.com/trezor/trezor-core/pull/110,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/110,fix bugs introduced by c1e1e8b,fix bugs introduced by c1e1e8b,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,110,2018-02-10T16:31:10Z,2018-02-10T21:43:04Z,2018-02-10T21:43:08Z,CLOSED,False,2,2,2,https://github.com/mcudev,firmware: fix bugs affecting pb message handling and wipe device flow,1,[],https://github.com/trezor/trezor-core/pull/110,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/110#issuecomment-364671500,fix bugs introduced by c1e1e8b,"The second fix should not be needed IMHO. If the field is not present, the parser should create a None entry in the structure. If it doesn't it is a bug, but it does so for my configuration.
Have you pulled in this change? 6fad2f4#diff-8d77dcd85cebc83082ad5ffbcc3bc7b1 (it adds state field into the Initialize structure).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,110,2018-02-10T16:31:10Z,2018-02-10T21:43:04Z,2018-02-10T21:43:08Z,CLOSED,False,2,2,2,https://github.com/mcudev,firmware: fix bugs affecting pb message handling and wipe device flow,1,[],https://github.com/trezor/trezor-core/pull/110,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/110#issuecomment-364696213,fix bugs introduced by c1e1e8b,"yeah, you're right, just take the one change. closing.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,117,2018-02-17T15:23:54Z,2018-02-18T22:19:24Z,2018-02-18T22:19:37Z,CLOSED,False,3,3,1,https://github.com/saleemrashid,Use GCC as linker for firmware build,1,[],https://github.com/trezor/trezor-core/pull/117,https://github.com/saleemrashid,1,https://github.com/trezor/trezor-core/pull/117,"Using GCC passes the correct flags to the linker. Including, if we choose to use features such as LTO, linker plugins.
Needs to be tested on real hardware because it gives very minor differences in the binary.","Using GCC passes the correct flags to the linker. Including, if we choose to use features such as LTO, linker plugins.
Needs to be tested on real hardware because it gives very minor differences in the binary.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,117,2018-02-17T15:23:54Z,2018-02-18T22:19:24Z,2018-02-18T22:19:37Z,CLOSED,False,3,3,1,https://github.com/saleemrashid,Use GCC as linker for firmware build,1,[],https://github.com/trezor/trezor-core/pull/117,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/117#issuecomment-366553158,"Using GCC passes the correct flags to the linker. Including, if we choose to use features such as LTO, linker plugins.
Needs to be tested on real hardware because it gives very minor differences in the binary.","Applied as bigger changeset (for all targets) here: 3f63acd
Also I tested that bootloader built using previous method works with new firmware and also that new boardloader + bootloader + firmware work together.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,117,2018-02-17T15:23:54Z,2018-02-18T22:19:24Z,2018-02-18T22:19:37Z,CLOSED,False,3,3,1,https://github.com/saleemrashid,Use GCC as linker for firmware build,1,[],https://github.com/trezor/trezor-core/pull/117,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/117#issuecomment-366553179,"Using GCC passes the correct flags to the linker. Including, if we choose to use features such as LTO, linker plugins.
Needs to be tested on real hardware because it gives very minor differences in the binary.",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,119,2018-02-19T08:54:16Z,2018-03-11T13:02:40Z,2018-03-11T13:02:40Z,CLOSED,False,27,0,2,https://github.com/romanornr,Viacoin: Add network and test,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/119,https://github.com/romanornr,1,https://github.com/trezor/trezor-core/pull/119,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,119,2018-02-19T08:54:16Z,2018-03-11T13:02:40Z,2018-03-11T13:02:40Z,CLOSED,False,27,0,2,https://github.com/romanornr,Viacoin: Add network and test,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/119,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/119#issuecomment-372113853,,Please submit a pull request to https://github.com/trezor/trezor-common/blob/master/coins.json where we hold coin definitions. The python file you edited is generated from JSON source.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,120,2018-02-20T08:06:54Z,2018-02-20T15:54:40Z,2018-02-20T15:54:41Z,CLOSED,False,26,0,1,https://github.com/flashbountyhunter,Adding support for Flashcoin,1,[],https://github.com/trezor/trezor-core/pull/120,https://github.com/flashbountyhunter,1,https://github.com/trezor/trezor-core/pull/120,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,120,2018-02-20T08:06:54Z,2018-02-20T15:54:40Z,2018-02-20T15:54:41Z,CLOSED,False,26,0,1,https://github.com/flashbountyhunter,Adding support for Flashcoin,1,[],https://github.com/trezor/trezor-core/pull/120,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/120#issuecomment-367022839,,This file is not supposed to be edited manually. Wait until your PR to trezor-common is merged.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,129,2018-02-28T15:54:15Z,2018-02-28T16:04:09Z,2018-02-28T16:04:11Z,MERGED,True,1,1,1,https://github.com/matejcik,src/apps/homescreen: fix typo in Ping response,1,[],https://github.com/trezor/trezor-core/pull/129,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/129,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,129,2018-02-28T15:54:15Z,2018-02-28T16:04:09Z,2018-02-28T16:04:11Z,MERGED,True,1,1,1,https://github.com/matejcik,src/apps/homescreen: fix typo in Ping response,1,[],https://github.com/trezor/trezor-core/pull/129,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/129#issuecomment-369287832,,👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,130,2018-02-28T22:48:14Z,2018-03-01T02:19:30Z,2018-03-01T02:19:34Z,CLOSED,False,2,2,1,https://github.com/karelbilek,Making bigger heapsize,1,[],https://github.com/trezor/trezor-core/pull/130,https://github.com/karelbilek,1,https://github.com/trezor/trezor-core/pull/130,"With current heapsize, emulator constantly fails; I made it 800k and it worked.
It is not scientific, I just increased the number and webwallet (with trezord-go from master) started to work.","With current heapsize, emulator constantly fails; I made it 800k and it worked.
It is not scientific, I just increased the number and webwallet (with trezord-go from master) started to work.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,130,2018-02-28T22:48:14Z,2018-03-01T02:19:30Z,2018-03-01T02:19:34Z,CLOSED,False,2,2,1,https://github.com/karelbilek,Making bigger heapsize,1,[],https://github.com/trezor/trezor-core/pull/130,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/130#issuecomment-369452143,"With current heapsize, emulator constantly fails; I made it 800k and it worked.
It is not scientific, I just increased the number and webwallet (with trezord-go from master) started to work.",Fixed in b776469,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,134,2018-03-01T13:47:19Z,2018-03-01T13:59:37Z,2018-03-01T13:59:44Z,MERGED,True,9,1,1,https://github.com/matejcik,embed/unix: emit TOUCH_END when mouse leaves active area.,1,[],https://github.com/trezor/trezor-core/pull/134,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/134,"This fixes the ""swiping bug"", swiping in emulator now feels more natural.","This fixes the ""swiping bug"", swiping in emulator now feels more natural.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,134,2018-03-01T13:47:19Z,2018-03-01T13:59:37Z,2018-03-01T13:59:44Z,MERGED,True,9,1,1,https://github.com/matejcik,embed/unix: emit TOUCH_END when mouse leaves active area.,1,[],https://github.com/trezor/trezor-core/pull/134,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/134#issuecomment-369599680,"This fixes the ""swiping bug"", swiping in emulator now feels more natural.",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,138,2018-03-02T15:49:15Z,2018-03-06T00:15:18Z,2018-03-06T00:15:22Z,MERGED,True,3,2,1,https://github.com/prusnak,src/apps/management: delay flag setting by one step in backup,1,[],https://github.com/trezor/trezor-core/pull/138,https://github.com/prusnak,1,https://github.com/trezor/trezor-core/pull/138,Fixes #137,Fixes #137,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,140,2018-03-04T21:31:06Z,2018-03-05T11:35:29Z,2018-03-05T11:35:30Z,CLOSED,False,142,1,4,https://github.com/tyrion70,Wanchain support in trezor-core,5,[],https://github.com/trezor/trezor-core/pull/140,https://github.com/tyrion70,1,https://github.com/trezor/trezor-core/pull/140,Added wanchain_sign_tx function and WanchainSignTx message. Tried to do it with as less duplication as possible. Because there is an extra field in the beginning of the message (txtype) I couldn't modify EthereumSignTx and had to create a new message and some functions.,Added wanchain_sign_tx function and WanchainSignTx message. Tried to do it with as less duplication as possible. Because there is an extra field in the beginning of the message (txtype) I couldn't modify EthereumSignTx and had to create a new message and some functions.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,140,2018-03-04T21:31:06Z,2018-03-05T11:35:29Z,2018-03-05T11:35:30Z,CLOSED,False,142,1,4,https://github.com/tyrion70,Wanchain support in trezor-core,5,[],https://github.com/trezor/trezor-core/pull/140,https://github.com/jhoenicke,2,https://github.com/trezor/trezor-core/pull/140#issuecomment-370380591,Added wanchain_sign_tx function and WanchainSignTx message. Tried to do it with as less duplication as possible. Because there is an extra field in the beginning of the message (txtype) I couldn't modify EthereumSignTx and had to create a new message and some functions.,"Please note that the files in trezorlib.messages are generated from the protobuf definitions in trezor-common/protob.  You should change messages.proto and then regenerate the files.
You can add the new txtype to ethereum_sign_tx; just give it a new number and mark the field as optional.  The order of the fields doesn't have to match the order in which they are signed.  The function could then check if txtype is present (check for None).
Does wanchain uses a different chain_id?  We usually use the chain_id to determine the currency that is displayed on the confirmation screen.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,140,2018-03-04T21:31:06Z,2018-03-05T11:35:29Z,2018-03-05T11:35:30Z,CLOSED,False,142,1,4,https://github.com/tyrion70,Wanchain support in trezor-core,5,[],https://github.com/trezor/trezor-core/pull/140,https://github.com/tyrion70,3,https://github.com/trezor/trezor-core/pull/140#issuecomment-370388485,Added wanchain_sign_tx function and WanchainSignTx message. Tried to do it with as less duplication as possible. Because there is an extra field in the beginning of the message (txtype) I couldn't modify EthereumSignTx and had to create a new message and some functions.,"Unfortunately Wanchain does not have a different chain_id (yet). I think they didn't change it because adding an extra field ensures replay protection in itself, but I expect it to be changed pretty soon. I'll build the stuff with protobuf (had trouble getting that working earlier so I'll give it another go). That does mean I need to make a PR to trezor-common as well btw.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,140,2018-03-04T21:31:06Z,2018-03-05T11:35:29Z,2018-03-05T11:35:30Z,CLOSED,False,142,1,4,https://github.com/tyrion70,Wanchain support in trezor-core,5,[],https://github.com/trezor/trezor-core/pull/140,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/140#issuecomment-370392437,Added wanchain_sign_tx function and WanchainSignTx message. Tried to do it with as less duplication as possible. Because there is an extra field in the beginning of the message (txtype) I couldn't modify EthereumSignTx and had to create a new message and some functions.,Closing this. Please reopen with new changeset once we have merged the trezor-common change (ideally minimal required change to get this working).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,148,2018-03-06T21:20:05Z,2018-03-07T11:16:22Z,2018-03-07T11:16:29Z,MERGED,True,1,1,1,https://github.com/jhoenicke,passphrase: include all ASCII characters,1,"['firmware', 'ui']",https://github.com/trezor/trezor-core/pull/148,https://github.com/jhoenicke,1,https://github.com/trezor/trezor-core/pull/148,I'm not sure about the optimal order.  Also note that * and # are missing since they are already on the alphabet layers.,I'm not sure about the optimal order.  Also note that * and # are missing since they are already on the alphabet layers.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,148,2018-03-06T21:20:05Z,2018-03-07T11:16:22Z,2018-03-07T11:16:29Z,MERGED,True,1,1,1,https://github.com/jhoenicke,passphrase: include all ASCII characters,1,"['firmware', 'ui']",https://github.com/trezor/trezor-core/pull/148,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/148#issuecomment-371106747,I'm not sure about the optimal order.  Also note that * and # are missing since they are already on the alphabet layers.,"Thank you, Jochen! 👍",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,149,2018-03-06T21:48:24Z,2018-05-02T14:48:11Z,2018-05-02T14:48:15Z,MERGED,True,29,13,5,https://github.com/tyrion70,Wanchain,8,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/149,https://github.com/tyrion70,1,https://github.com/trezor/trezor-core/pull/149,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,149,2018-03-06T21:48:24Z,2018-05-02T14:48:11Z,2018-05-02T14:48:15Z,MERGED,True,29,13,5,https://github.com/tyrion70,Wanchain,8,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/149,https://github.com/jhoenicke,2,https://github.com/trezor/trezor-core/pull/149#issuecomment-370966805,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,"I think we should check that tx_type is None or 1.  Just as a safety precaution that we don't sign a transaction we don't understand.
Is there a reason to use ""bytes"" for tx_types instead of, e.g., uint32?  The latter would be easier, but may be an issue if they use tx_types with more than 32 bits some day.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,149,2018-03-06T21:48:24Z,2018-05-02T14:48:11Z,2018-05-02T14:48:15Z,MERGED,True,29,13,5,https://github.com/tyrion70,Wanchain,8,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/149,https://github.com/tyrion70,3,https://github.com/trezor/trezor-core/pull/149#issuecomment-371061820,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,"I checked about the tx_type, its currently either 0x01 or 0x06 so I can change it to an uint32 safely. I agree that adding a precaution to sign only those is prudent, I'll add that to the check function in sign_tx.py.
Regarding the tx_type change to uint, I can do that, but I'd need to change trezor-common then as well again. @prusnak you got any preferences here? I would personally prefer keeping it bytes now since it would have been easier only if I had done it from the start ;) But I'm fine with changing it in all repos.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,149,2018-03-06T21:48:24Z,2018-05-02T14:48:11Z,2018-05-02T14:48:15Z,MERGED,True,29,13,5,https://github.com/tyrion70,Wanchain,8,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/149,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/149#issuecomment-371103385,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,Please change to uint32 if possible.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,149,2018-03-06T21:48:24Z,2018-05-02T14:48:11Z,2018-05-02T14:48:15Z,MERGED,True,29,13,5,https://github.com/tyrion70,Wanchain,8,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/149,https://github.com/tyrion70,5,https://github.com/trezor/trezor-core/pull/149#issuecomment-371191803,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,"Tx_type was changed to uint in all three repo's. latest trezor-common was used to generate again. Check was also added to only allow tx_type 1, 6 and None.
@jhoenicke @prusnak please let me know if i need to add anything more. Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,149,2018-03-06T21:48:24Z,2018-05-02T14:48:11Z,2018-05-02T14:48:15Z,MERGED,True,29,13,5,https://github.com/tyrion70,Wanchain,8,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/149,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/149#issuecomment-372114082,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,Can you please rebase on top of master? There were some fixes and your changes are in conflict with them.,True,{'THUMBS_UP': ['https://github.com/tyrion70']}
trezor/trezor-core,https://github.com/trezor/trezor-core,149,2018-03-06T21:48:24Z,2018-05-02T14:48:11Z,2018-05-02T14:48:15Z,MERGED,True,29,13,5,https://github.com/tyrion70,Wanchain,8,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/149,https://github.com/tyrion70,7,https://github.com/trezor/trezor-core/pull/149#issuecomment-372143976,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,@prusnak I just rebased with master as per your request.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,149,2018-03-06T21:48:24Z,2018-05-02T14:48:11Z,2018-05-02T14:48:15Z,MERGED,True,29,13,5,https://github.com/tyrion70,Wanchain,8,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/149,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/149#issuecomment-386004034,Added support for Wanchain. In order to display the name Wan in the display I made a change to layout.py and networks.py since the chain_id of wanchain is currently set to 1 as well. If and when the chain_id is set to another id it can be reverted. Hope this is an acceptable solution for now.,Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,150,2018-03-08T11:15:33Z,2018-03-08T17:49:29Z,2018-03-08T17:49:39Z,MERGED,True,11,12,3,https://github.com/jhoenicke,Ethereum: Fix fee computation.,1,[],https://github.com/trezor/trezor-core/pull/150,https://github.com/jhoenicke,1,https://github.com/trezor/trezor-core/pull/150,"Gas is always in ether, even when sending tokens.
Fee is computed by multiplying gas limit with gas price.
Parse numbers already in sign_tx.
Made rlp.encode non-recursive (also fixes not passing include_length).","Gas is always in ether, even when sending tokens.
Fee is computed by multiplying gas limit with gas price.
Parse numbers already in sign_tx.
Made rlp.encode non-recursive (also fixes not passing include_length).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,150,2018-03-08T11:15:33Z,2018-03-08T17:49:29Z,2018-03-08T17:49:39Z,MERGED,True,11,12,3,https://github.com/jhoenicke,Ethereum: Fix fee computation.,1,[],https://github.com/trezor/trezor-core/pull/150,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/150#issuecomment-371473354,"Gas is always in ether, even when sending tokens.
Fee is computed by multiplying gas limit with gas price.
Parse numbers already in sign_tx.
Made rlp.encode non-recursive (also fixes not passing include_length).",Cc @tsusanka,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,150,2018-03-08T11:15:33Z,2018-03-08T17:49:29Z,2018-03-08T17:49:39Z,MERGED,True,11,12,3,https://github.com/jhoenicke,Ethereum: Fix fee computation.,1,[],https://github.com/trezor/trezor-core/pull/150,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/150#issuecomment-371477463,"Gas is always in ether, even when sending tokens.
Fee is computed by multiplying gas limit with gas price.
Parse numbers already in sign_tx.
Made rlp.encode non-recursive (also fixes not passing include_length).","Ah, I expected the gas limit already includes the gas price. Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,150,2018-03-08T11:15:33Z,2018-03-08T17:49:29Z,2018-03-08T17:49:39Z,MERGED,True,11,12,3,https://github.com/jhoenicke,Ethereum: Fix fee computation.,1,[],https://github.com/trezor/trezor-core/pull/150,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/150#issuecomment-371567116,"Gas is always in ether, even when sending tokens.
Fee is computed by multiplying gas limit with gas price.
Parse numbers already in sign_tx.
Made rlp.encode non-recursive (also fixes not passing include_length).",👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,151,2018-03-08T13:45:14Z,2018-03-09T17:31:32Z,2018-04-23T15:21:06Z,MERGED,True,24,24,1,https://github.com/tsusanka,wallet/signing: segwit has priority over force_bip143,1,['firmware'],https://github.com/trezor/trezor-core/pull/151,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/151,"This commit only rearranges the if main branch, so the segwit branch
has priority over bip143. Since Bitcoin Gold is allowing both segwit and
forcing bip143, the bitcoin gold segwit transactions were failing.
updates #147","This commit only rearranges the if main branch, so the segwit branch
has priority over bip143. Since Bitcoin Gold is allowing both segwit and
forcing bip143, the bitcoin gold segwit transactions were failing.
updates #147",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,153,2018-03-08T16:35:25Z,2018-03-08T17:37:46Z,2018-03-08T17:37:50Z,MERGED,True,1,1,1,https://github.com/romanz,src/protobuf: Fix small typo in docstring,1,[],https://github.com/trezor/trezor-core/pull/153,https://github.com/romanz,1,https://github.com/trezor/trezor-core/pull/153,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,153,2018-03-08T16:35:25Z,2018-03-08T17:37:46Z,2018-03-08T17:37:50Z,MERGED,True,1,1,1,https://github.com/romanz,src/protobuf: Fix small typo in docstring,1,[],https://github.com/trezor/trezor-core/pull/153,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/153#issuecomment-371563550,,👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,156,2018-03-09T06:44:59Z,2018-03-09T08:58:07Z,2018-03-09T08:58:07Z,CLOSED,False,26,0,1,https://github.com/sulmone,Added Bitcoin Private to coins,1,[],https://github.com/trezor/trezor-core/pull/156,https://github.com/sulmone,1,https://github.com/trezor/trezor-core/pull/156,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,156,2018-03-09T06:44:59Z,2018-03-09T08:58:07Z,2018-03-09T08:58:07Z,CLOSED,False,26,0,1,https://github.com/sulmone,Added Bitcoin Private to coins,1,[],https://github.com/trezor/trezor-core/pull/156,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/156#issuecomment-371752883,,"# the following list is generated using tools/codegen/gen_coins.py
# do not edit manually!

Coins are defined in https://github.com/trezor/trezor-common repository.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,157,2018-03-09T07:54:02Z,2018-03-10T20:17:30Z,2018-03-10T20:17:30Z,MERGED,True,2,2,1,https://github.com/romanz,docs: fix 'vendorheader' to 'vendor' at build.md,1,[],https://github.com/trezor/trezor-core/pull/157,https://github.com/romanz,1,https://github.com/trezor/trezor-core/pull/157,Following cf9c972.,Following cf9c972.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,158,2018-03-09T11:32:00Z,2018-03-11T21:53:48Z,2018-03-12T08:38:24Z,MERGED,True,82,16,4,https://github.com/romanz,apps/wallet/ecdh: support decryption (for GnuPG),2,['firmware'],https://github.com/trezor/trezor-core/pull/158,https://github.com/romanz,1,https://github.com/trezor/trezor-core/pull/158,"Tested both with NIST256 and Curve25519 GnuPG keys:

(similar to trezor/trezor-mcu@c86086e)","Tested both with NIST256 and Curve25519 GnuPG keys:

(similar to trezor/trezor-mcu@c86086e)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,158,2018-03-09T11:32:00Z,2018-03-11T21:53:48Z,2018-03-12T08:38:24Z,MERGED,True,82,16,4,https://github.com/romanz,apps/wallet/ecdh: support decryption (for GnuPG),2,['firmware'],https://github.com/trezor/trezor-core/pull/158,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/158#issuecomment-372113654,"Tested both with NIST256 and Curve25519 GnuPG keys:

(similar to trezor/trezor-mcu@c86086e)","Can you please add GetECDHSessionKey unit test to https://github.com/trezor/python-trezor/tree/master/trezorlib/tests/device_tests similar to https://github.com/trezor/python-trezor/blob/master/trezorlib/tests/device_tests/test_msg_getpublickey_curve.py?
So we can test behaviour on both T1 and T2 and whether they are the same?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,158,2018-03-09T11:32:00Z,2018-03-11T21:53:48Z,2018-03-12T08:38:24Z,MERGED,True,82,16,4,https://github.com/romanz,apps/wallet/ecdh: support decryption (for GnuPG),2,['firmware'],https://github.com/trezor/trezor-core/pull/158,https://github.com/romanz,3,https://github.com/trezor/trezor-core/pull/158#issuecomment-372114167,"Tested both with NIST256 and Curve25519 GnuPG keys:

(similar to trezor/trezor-mcu@c86086e)","Sounds good, will add it today :)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,158,2018-03-09T11:32:00Z,2018-03-11T21:53:48Z,2018-03-12T08:38:24Z,MERGED,True,82,16,4,https://github.com/romanz,apps/wallet/ecdh: support decryption (for GnuPG),2,['firmware'],https://github.com/trezor/trezor-core/pull/158,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/158#issuecomment-372152894,"Tested both with NIST256 and Curve25519 GnuPG keys:

(similar to trezor/trezor-mcu@c86086e)",Thank you!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,159,2018-03-09T15:13:16Z,2018-03-09T16:42:29Z,2018-05-04T13:39:15Z,MERGED,True,26,26,1,https://github.com/tsusanka,tests: ethereum format_address takes int as an input,1,[],https://github.com/trezor/trezor-core/pull/159,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/159,"@jhoenicke changed the function to take int as an input
see 8cdec06","@jhoenicke changed the function to take int as an input
see 8cdec06",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,164,2018-03-11T11:00:43Z,2018-03-13T07:00:20Z,2018-03-13T07:21:07Z,CLOSED,False,2,5,1,https://github.com/romanz,scons: use env.Program() to build micropython emulator,1,['emulator'],https://github.com/trezor/trezor-core/pull/164,https://github.com/romanz,1,https://github.com/trezor/trezor-core/pull/164,"Currently, running make clean build_unix fails with the following error (it seems to create build/unix/micropython as a directory, failing the final linking stage of the build).","Currently, running make clean build_unix fails with the following error (it seems to create build/unix/micropython as a directory, failing the final linking stage of the build).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,164,2018-03-11T11:00:43Z,2018-03-13T07:00:20Z,2018-03-13T07:21:07Z,CLOSED,False,2,5,1,https://github.com/romanz,scons: use env.Program() to build micropython emulator,1,['emulator'],https://github.com/trezor/trezor-core/pull/164,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/164#issuecomment-372149182,"Currently, running make clean build_unix fails with the following error (it seems to create build/unix/micropython as a directory, failing the final linking stage of the build).",This is really weird. What version of GCC and Scons do you use?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,164,2018-03-11T11:00:43Z,2018-03-13T07:00:20Z,2018-03-13T07:21:07Z,CLOSED,False,2,5,1,https://github.com/romanz,scons: use env.Program() to build micropython emulator,1,['emulator'],https://github.com/trezor/trezor-core/pull/164,https://github.com/romanz,3,https://github.com/trezor/trezor-core/pull/164#issuecomment-372151612,"Currently, running make clean build_unix fails with the following error (it seems to create build/unix/micropython as a directory, failing the final linking stage of the build).","$ gcc --version
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

$ scons -v
SCons by Steven Knight et al.:
	script: v2.4.1.rel_2.4.1:3453:73fefd3ea0b0, 2015/11/09 03:25:05, by bdbaddog on ubuntu1404-32bit
	engine: v2.4.1.rel_2.4.1:3453:73fefd3ea0b0, 2015/11/09 03:25:05, by bdbaddog on ubuntu1404-32bit
	engine path: ['/usr/lib/scons/SCons']
Copyright (c) 2001 - 2015 The SCons Foundation

I'll update scons and try to reproduce this issue...",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,164,2018-03-11T11:00:43Z,2018-03-13T07:00:20Z,2018-03-13T07:21:07Z,CLOSED,False,2,5,1,https://github.com/romanz,scons: use env.Program() to build micropython emulator,1,['emulator'],https://github.com/trezor/trezor-core/pull/164,https://github.com/romanz,4,https://github.com/trezor/trezor-core/pull/164#issuecomment-372151827,"Currently, running make clean build_unix fails with the following error (it seems to create build/unix/micropython as a directory, failing the final linking stage of the build).","This still happens with latest (3.0.1) SCons :(
Something weird is going on my machine... will debug this tomorrow.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,164,2018-03-11T11:00:43Z,2018-03-13T07:00:20Z,2018-03-13T07:21:07Z,CLOSED,False,2,5,1,https://github.com/romanz,scons: use env.Program() to build micropython emulator,1,['emulator'],https://github.com/trezor/trezor-core/pull/164,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/164#issuecomment-372152428,"Currently, running make clean build_unix fails with the following error (it seems to create build/unix/micropython as a directory, failing the final linking stage of the build).","For reference: I am using SCons 3.0.1, GCC 7.3.0 and binutils 2.29.1.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,164,2018-03-11T11:00:43Z,2018-03-13T07:00:20Z,2018-03-13T07:21:07Z,CLOSED,False,2,5,1,https://github.com/romanz,scons: use env.Program() to build micropython emulator,1,['emulator'],https://github.com/trezor/trezor-core/pull/164,https://github.com/romanz,6,https://github.com/trezor/trezor-core/pull/164#issuecomment-372565987,"Currently, running make clean build_unix fails with the following error (it seems to create build/unix/micropython as a directory, failing the final linking stage of the build).","Upgraded to Ubuntu 17.10 - no more strange build errors :)
$ dpkg -s gcc scons binutils | grep Version 
Version: 4:7.2.0-1ubuntu1
Version: 2.5.1-1
Version: 2.29.1-4ubuntu1",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,168,2018-03-14T09:12:21Z,2018-03-14T11:50:32Z,2018-03-14T17:04:03Z,MERGED,True,26,9,2,https://github.com/romanz,"apps/wallet/{sign_identity, ecdh}: show protocol as part of the header",1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/168,https://github.com/romanz,1,https://github.com/trezor/trezor-core/pull/168,"This PR should make signature/decryption dialogs a bit nicer (compared to #158):

What do you think?","This PR should make signature/decryption dialogs a bit nicer (compared to #158):

What do you think?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,168,2018-03-14T09:12:21Z,2018-03-14T11:50:32Z,2018-03-14T17:04:03Z,MERGED,True,26,9,2,https://github.com/romanz,"apps/wallet/{sign_identity, ecdh}: show protocol as part of the header",1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/168,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/168#issuecomment-372987517,"This PR should make signature/decryption dialogs a bit nicer (compared to #158):

What do you think?","Overally, I really like the change.",True,{'LAUGH': ['https://github.com/romanz']}
trezor/trezor-core,https://github.com/trezor/trezor-core,168,2018-03-14T09:12:21Z,2018-03-14T11:50:32Z,2018-03-14T17:04:03Z,MERGED,True,26,9,2,https://github.com/romanz,"apps/wallet/{sign_identity, ecdh}: show protocol as part of the header",1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/168,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/168#issuecomment-372994563,"This PR should make signature/decryption dialogs a bit nicer (compared to #158):

What do you think?",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,168,2018-03-14T09:12:21Z,2018-03-14T11:50:32Z,2018-03-14T17:04:03Z,MERGED,True,26,9,2,https://github.com/romanz,"apps/wallet/{sign_identity, ecdh}: show protocol as part of the header",1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/168,https://github.com/romanz,4,https://github.com/trezor/trezor-core/pull/168#issuecomment-372996191,"This PR should make signature/decryption dialogs a bit nicer (compared to #158):

What do you think?",My pleasure :),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,174,2018-03-18T17:16:21Z,2018-06-04T11:50:23Z,2018-06-04T11:50:27Z,MERGED,True,13,2,6,https://github.com/prusnak,firmware: disable WebUSB landing page,1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/174,https://github.com/prusnak,1,https://github.com/trezor/trezor-core/pull/174,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,178,2018-03-26T16:08:21Z,2018-04-05T10:35:45Z,2018-04-05T10:35:45Z,CLOSED,False,37,5,2,https://github.com/slush0,Allow registering custom protobuf messages,2,['firmware'],https://github.com/trezor/trezor-core/pull/178,https://github.com/slush0,1,https://github.com/trezor/trezor-core/pull/178,"New applications should self-contain protobuf messages, instead of storing them in global src/trezor/messages namespace.","New applications should self-contain protobuf messages, instead of storing them in global src/trezor/messages namespace.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,178,2018-03-26T16:08:21Z,2018-04-05T10:35:45Z,2018-04-05T10:35:45Z,CLOSED,False,37,5,2,https://github.com/slush0,Allow registering custom protobuf messages,2,['firmware'],https://github.com/trezor/trezor-core/pull/178,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/178#issuecomment-378892672,"New applications should self-contain protobuf messages, instead of storing them in global src/trezor/messages namespace.","Reimplemented with little changes in 60bec0b and 2731742, thank you!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,179,2018-03-26T16:12:28Z,2018-06-07T11:31:07Z,2018-06-07T12:12:38Z,MERGED,True,2629,14,46,https://github.com/tsusanka,NEM,53,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/179,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/179,"To be reviewed, now complete","To be reviewed, now complete",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,179,2018-03-26T16:12:28Z,2018-06-07T11:31:07Z,2018-06-07T12:12:38Z,MERGED,True,2629,14,46,https://github.com/tsusanka,NEM,53,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/179,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/179#issuecomment-391991268,"To be reviewed, now complete",Just for reference: closes #142,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,179,2018-03-26T16:12:28Z,2018-06-07T11:31:07Z,2018-06-07T12:12:38Z,MERGED,True,2629,14,46,https://github.com/tsusanka,NEM,53,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/179,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/179#issuecomment-395394052,"To be reviewed, now complete",🎉,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,180,2018-03-27T16:04:17Z,2018-03-27T17:39:21Z,2018-03-27T17:39:21Z,MERGED,True,1,1,1,https://github.com/jhoenicke,display: show qr-code correctly (was mirrored),1,[],https://github.com/trezor/trezor-core/pull/180,https://github.com/jhoenicke,1,https://github.com/trezor/trezor-core/pull/180,Note that qrenc submodule should also be updated.,Note that qrenc submodule should also be updated.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,182,2018-04-04T10:10:55Z,2018-04-11T10:30:42Z,2018-04-11T10:30:46Z,CLOSED,False,1,1,1,https://github.com/tsusanka,vendor: trezor-crypto updated to b0af159,1,[],https://github.com/trezor/trezor-core/pull/182,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/182,@jpochyla may I? I could use the nem related commits,@jpochyla may I? I could use the nem related commits,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,182,2018-04-04T10:10:55Z,2018-04-11T10:30:42Z,2018-04-11T10:30:46Z,CLOSED,False,1,1,1,https://github.com/tsusanka,vendor: trezor-crypto updated to b0af159,1,[],https://github.com/trezor/trezor-core/pull/182,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/182#issuecomment-380405405,@jpochyla may I? I could use the nem related commits,vendor/trezor-crypto updated in master. Closing,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,185,2018-04-05T14:22:26Z,2018-04-23T15:12:46Z,2018-04-23T15:21:04Z,MERGED,True,140,92,17,https://github.com/jpochyla,src/trezor/wire: add exceptions for all defined FailureTypes,2,[],https://github.com/trezor/trezor-core/pull/185,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/185,Makes the error API much more ergonomic.,Makes the error API much more ergonomic.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,185,2018-04-05T14:22:26Z,2018-04-23T15:12:46Z,2018-04-23T15:21:04Z,MERGED,True,140,92,17,https://github.com/jpochyla,src/trezor/wire: add exceptions for all defined FailureTypes,2,[],https://github.com/trezor/trezor-core/pull/185,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/185#issuecomment-380404995,Makes the error API much more ergonomic.,utACK,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,191,2018-04-16T13:34:04Z,2018-05-14T14:51:39Z,2018-05-14T14:51:39Z,CLOSED,False,1,1,1,https://github.com/doc-hex,replace mp_obj_get_int_truncated with mp_obj_int_get_checked,1,[],https://github.com/trezor/trezor-core/pull/191,https://github.com/doc-hex,1,https://github.com/trezor/trezor-core/pull/191,"I strongly recommend you change mp_obj_get_int_truncated into mp_obj_int_get_checked in
modtrezorcrypto-random.h on line 29.
Because otherwise, modtrezorcrypto.random.uniform((2*32)+1) will always return zero.
Similarly, any call with an argument larger than 2**32 will not do what you want.
I couldn't find any codepaths where that could happen under control of an attacker, but it's quite possible there is one, or could be someday.","I strongly recommend you change mp_obj_get_int_truncated into mp_obj_int_get_checked in
modtrezorcrypto-random.h on line 29.
Because otherwise, modtrezorcrypto.random.uniform((2*32)+1) will always return zero.
Similarly, any call with an argument larger than 2**32 will not do what you want.
I couldn't find any codepaths where that could happen under control of an attacker, but it's quite possible there is one, or could be someday.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,191,2018-04-16T13:34:04Z,2018-05-14T14:51:39Z,2018-05-14T14:51:39Z,CLOSED,False,1,1,1,https://github.com/doc-hex,replace mp_obj_get_int_truncated with mp_obj_int_get_checked,1,[],https://github.com/trezor/trezor-core/pull/191,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/191#issuecomment-381603882,"I strongly recommend you change mp_obj_get_int_truncated into mp_obj_int_get_checked in
modtrezorcrypto-random.h on line 29.
Because otherwise, modtrezorcrypto.random.uniform((2*32)+1) will always return zero.
Similarly, any call with an argument larger than 2**32 will not do what you want.
I couldn't find any codepaths where that could happen under control of an attacker, but it's quite possible there is one, or could be someday.","We also use mp_obj_get_int_truncated at two more locations:


BIP32: 
  
    
      trezor-core/embed/extmod/modtrezorcrypto/modtrezorcrypto-bip32.h
    
    
        Lines 69 to 71
      in
      3b67cb6
    
  
  
    

        
          
           const uint32_t depth       = mp_obj_get_int_truncated(vals[0].u_obj); 
        

        
          
           const uint32_t fingerprint = mp_obj_get_int_truncated(vals[1].u_obj); 
        

        
          
           const uint32_t child_num   = mp_obj_get_int_truncated(vals[2].u_obj); 
        
    
  




CRC: 
  
    
      trezor-core/embed/extmod/modtrezorcrypto/modtrezorcrypto-crc.h
    
    
         Line 26
      in
      3b67cb6
    
  
  
    

        
          
           uint32_t crc = (n_args > 1) ? mp_obj_get_int_truncated(args[1]) : 0; 
        
    
  




I would rather change all 3 usages or neither (while changing the documentation to mention the limitation) because they are all semantically the same (user wants to pass uint32 value from python to C code).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,191,2018-04-16T13:34:04Z,2018-05-14T14:51:39Z,2018-05-14T14:51:39Z,CLOSED,False,1,1,1,https://github.com/doc-hex,replace mp_obj_get_int_truncated with mp_obj_int_get_checked,1,[],https://github.com/trezor/trezor-core/pull/191,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/191#issuecomment-381604439,"I strongly recommend you change mp_obj_get_int_truncated into mp_obj_int_get_checked in
modtrezorcrypto-random.h on line 29.
Because otherwise, modtrezorcrypto.random.uniform((2*32)+1) will always return zero.
Similarly, any call with an argument larger than 2**32 will not do what you want.
I couldn't find any codepaths where that could happen under control of an attacker, but it's quite possible there is one, or could be someday.",@jpochyla thoughts?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,191,2018-04-16T13:34:04Z,2018-05-14T14:51:39Z,2018-05-14T14:51:39Z,CLOSED,False,1,1,1,https://github.com/doc-hex,replace mp_obj_get_int_truncated with mp_obj_int_get_checked,1,[],https://github.com/trezor/trezor-core/pull/191,https://github.com/jpochyla,4,https://github.com/trezor/trezor-core/pull/191#issuecomment-381625250,"I strongly recommend you change mp_obj_get_int_truncated into mp_obj_int_get_checked in
modtrezorcrypto-random.h on line 29.
Because otherwise, modtrezorcrypto.random.uniform((2*32)+1) will always return zero.
Similarly, any call with an argument larger than 2**32 will not do what you want.
I couldn't find any codepaths where that could happen under control of an attacker, but it's quite possible there is one, or could be someday.","I would rather change all 3 usages or neither (while changing the documentation to mention the limitation) because they are all semantically the same (user wants to pass uint32 value from python to C code).

I agree, let's change it to mp_obj_get_int everywhere.  That should:

return good error message for values of incorrect type
return good error message for overflowing values

One possible down-side is that boolean values would get automatically converted to int, but I think we can live with that.

We also use mp_obj_get_int_truncated at two more locations:

Also mp_obj_int_get_truncated should get replaced:

  
    
      trezor-core/embed/extmod/modtrezorio/modtrezorio-poll.h
    
    
         Line 60
      in
      3b67cb6
    
  
  
    

        
          
           const mp_uint_t i = mp_obj_int_get_truncated(item);",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,191,2018-04-16T13:34:04Z,2018-05-14T14:51:39Z,2018-05-14T14:51:39Z,CLOSED,False,1,1,1,https://github.com/doc-hex,replace mp_obj_get_int_truncated with mp_obj_int_get_checked,1,[],https://github.com/trezor/trezor-core/pull/191,https://github.com/jpochyla,5,https://github.com/trezor/trezor-core/pull/191#issuecomment-388845375,"I strongly recommend you change mp_obj_get_int_truncated into mp_obj_int_get_checked in
modtrezorcrypto-random.h on line 29.
Because otherwise, modtrezorcrypto.random.uniform((2*32)+1) will always return zero.
Similarly, any call with an argument larger than 2**32 will not do what you want.
I couldn't find any codepaths where that could happen under control of an attacker, but it's quite possible there is one, or could be someday.",Superseded by #201.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,193,2018-04-20T09:15:41Z,2018-04-20T13:00:12Z,2018-04-20T13:51:13Z,CLOSED,False,26,0,1,https://github.com/Bertrand256,Dash Testnet support,1,[],https://github.com/trezor/trezor-core/pull/193,https://github.com/Bertrand256,1,https://github.com/trezor/trezor-core/pull/193,"Please, enable Dash Testnet support.","Please, enable Dash Testnet support.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,193,2018-04-20T09:15:41Z,2018-04-20T13:00:12Z,2018-04-20T13:51:13Z,CLOSED,False,26,0,1,https://github.com/Bertrand256,Dash Testnet support,1,[],https://github.com/trezor/trezor-core/pull/193,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/193#issuecomment-383088088,"Please, enable Dash Testnet support.","Coins should be added to https://github.com/trezor/trezor-common/blob/master/coins.json not to this generated file.
But we won't be adding testnet coins to the production firmware anyway, so don't send a PR there.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,193,2018-04-20T09:15:41Z,2018-04-20T13:00:12Z,2018-04-20T13:51:13Z,CLOSED,False,26,0,1,https://github.com/Bertrand256,Dash Testnet support,1,[],https://github.com/trezor/trezor-core/pull/193,https://github.com/Bertrand256,3,https://github.com/trezor/trezor-core/pull/193#issuecomment-383102010,"Please, enable Dash Testnet support.","Oops, I somehow missed that it was a generated file.
I see, however, that several testnets are supported in the production firmware.
Well, we will have to live with it using the not-so-comfortable solution based on custom firmware. Anyway, thanks for the quick review.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,195,2018-05-04T15:03:46Z,2018-05-04T15:47:45Z,2018-07-04T14:21:22Z,MERGED,True,319,78,6,https://github.com/matejcik,use pipenv to run python-trezor testsuite reproducibly,3,[],https://github.com/trezor/trezor-core/pull/195,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/195,"this freezes dependency versions (most importantly right now, rlp is frozen at 0.6.0 which is the last that supports Travis python3.4) so that third-party changes shouldn't break the builds anymore.
Along with some nice new docs about testing.","this freezes dependency versions (most importantly right now, rlp is frozen at 0.6.0 which is the last that supports Travis python3.4) so that third-party changes shouldn't break the builds anymore.
Along with some nice new docs about testing.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,195,2018-05-04T15:03:46Z,2018-05-04T15:47:45Z,2018-07-04T14:21:22Z,MERGED,True,319,78,6,https://github.com/matejcik,use pipenv to run python-trezor testsuite reproducibly,3,[],https://github.com/trezor/trezor-core/pull/195,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/195#issuecomment-386643019,"this freezes dependency versions (most importantly right now, rlp is frozen at 0.6.0 which is the last that supports Travis python3.4) so that third-party changes shouldn't break the builds anymore.
Along with some nice new docs about testing.",LGTM! 👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,196,2018-05-09T11:35:05Z,2018-05-24T14:01:17Z,2018-05-24T14:01:20Z,CLOSED,False,44,24,3,https://github.com/matejcik,protobuf: support signed ints properly,2,[],https://github.com/trezor/trezor-core/pull/196,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/196,"this is an equivalent of trezor/python-trezor#250 for core
it should fix #189","this is an equivalent of trezor/python-trezor#250 for core
it should fix #189",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,196,2018-05-09T11:35:05Z,2018-05-24T14:01:17Z,2018-05-24T14:01:20Z,CLOSED,False,44,24,3,https://github.com/matejcik,protobuf: support signed ints properly,2,[],https://github.com/trezor/trezor-core/pull/196,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/196#issuecomment-387711971,"this is an equivalent of trezor/python-trezor#250 for core
it should fix #189",utACK,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,196,2018-05-09T11:35:05Z,2018-05-24T14:01:17Z,2018-05-24T14:01:20Z,CLOSED,False,44,24,3,https://github.com/matejcik,protobuf: support signed ints properly,2,[],https://github.com/trezor/trezor-core/pull/196,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/196#issuecomment-391725912,"this is an equivalent of trezor/python-trezor#250 for core
it should fix #189",Merged via 88ea30b,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,197,2018-05-09T12:15:35Z,2018-05-24T13:43:13Z,2018-05-24T13:49:46Z,CLOSED,False,229,219,4,https://github.com/matejcik,pb2py refactor,7,[],https://github.com/trezor/trezor-core/pull/197,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/197,"basically the goal here is to have an identical build_protobuf and pb2py between trezor-core and python-trezor
i took the opportunity to make better type hints, fix the kwargs syntax error that happens to work in uPy but not CPy, and some other minor things.","basically the goal here is to have an identical build_protobuf and pb2py between trezor-core and python-trezor
i took the opportunity to make better type hints, fix the kwargs syntax error that happens to work in uPy but not CPy, and some other minor things.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,197,2018-05-09T12:15:35Z,2018-05-24T13:43:13Z,2018-05-24T13:49:46Z,CLOSED,False,229,219,4,https://github.com/matejcik,pb2py refactor,7,[],https://github.com/trezor/trezor-core/pull/197,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/197#issuecomment-391719456,"basically the goal here is to have an identical build_protobuf and pb2py between trezor-core and python-trezor
i took the opportunity to make better type hints, fix the kwargs syntax error that happens to work in uPy but not CPy, and some other minor things.","Merged via 5885cb8
Good job!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,197,2018-05-09T12:15:35Z,2018-05-24T13:43:13Z,2018-05-24T13:49:46Z,CLOSED,False,229,219,4,https://github.com/matejcik,pb2py refactor,7,[],https://github.com/trezor/trezor-core/pull/197,https://github.com/matejcik,3,https://github.com/trezor/trezor-core/pull/197#issuecomment-391721719,"basically the goal here is to have an identical build_protobuf and pb2py between trezor-core and python-trezor
i took the opportunity to make better type hints, fix the kwargs syntax error that happens to work in uPy but not CPy, and some other minor things.",note that this will break without #196,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,199,2018-05-09T15:05:35Z,2018-05-24T13:24:27Z,2018-05-24T13:24:39Z,MERGED,True,197,440,110,https://github.com/matejcik,drop kwargs from protobuf generated messages,4,[],https://github.com/trezor/trezor-core/pull/199,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/199,"This is a follow-up to #197. I'm opening this as a PR to the pb2py-refactor branch for review purposes only.
What this does:

removes **kwargs arguments to protobuf classes
adapts CoinTypes to handle that

Important things to note (in fa18652 commit message):

the CoinTypes subclass should have an explicit (and appropriately typed) list of properties, but it doesn't now.
there's several places where messages.CoinType is expected but that use properties which belong to coins.CoinType now. Type hints should be updated at some point. But right now that would mean importing coins.py in these places, and that might not be what we want.
Given that typing is not enforced yet, this doesn't matter, and it will become obvious whenever we start enforcing it.","This is a follow-up to #197. I'm opening this as a PR to the pb2py-refactor branch for review purposes only.
What this does:

removes **kwargs arguments to protobuf classes
adapts CoinTypes to handle that

Important things to note (in fa18652 commit message):

the CoinTypes subclass should have an explicit (and appropriately typed) list of properties, but it doesn't now.
there's several places where messages.CoinType is expected but that use properties which belong to coins.CoinType now. Type hints should be updated at some point. But right now that would mean importing coins.py in these places, and that might not be what we want.
Given that typing is not enforced yet, this doesn't matter, and it will become obvious whenever we start enforcing it.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,199,2018-05-09T15:05:35Z,2018-05-24T13:24:27Z,2018-05-24T13:24:39Z,MERGED,True,197,440,110,https://github.com/matejcik,drop kwargs from protobuf generated messages,4,[],https://github.com/trezor/trezor-core/pull/199,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/199#issuecomment-391713278,"This is a follow-up to #197. I'm opening this as a PR to the pb2py-refactor branch for review purposes only.
What this does:

removes **kwargs arguments to protobuf classes
adapts CoinTypes to handle that

Important things to note (in fa18652 commit message):

the CoinTypes subclass should have an explicit (and appropriately typed) list of properties, but it doesn't now.
there's several places where messages.CoinType is expected but that use properties which belong to coins.CoinType now. Type hints should be updated at some point. But right now that would mean importing coins.py in these places, and that might not be what we want.
Given that typing is not enforced yet, this doesn't matter, and it will become obvious whenever we start enforcing it.",LGTM,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/200,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198","When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/200#issuecomment-388034108,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198","I would change `token_by_chain_address` to return UNKNOWN_TOKEN and drop
conversion from None to UNKNOWN_TOKEN in format function.
Also not sure about using True as UNKNOWN_TOKEN, seems a little bit
hackish. @matejcik what do you think?
Thirdly, const(foo) makes sense only for int values, not bool.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/200#issuecomment-388034413,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198","I meant conversion in sign, not format.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/200#issuecomment-388034645,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198","Also not sure about using True as UNKNOWN_TOKEN, seems a little bit
hackish. @matejcik what do you think?

Yeah, it is.

Thirdly, const(foo) makes sense only for int values, not bool.

I was thinking about const(1) but it probably isn't better",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/matejcik,5,https://github.com/trezor/trezor-core/pull/200#issuecomment-388037840,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198","as i commented before, UNKNOWN_TOKEN = object() would ensure its uniqueness
alternately it could be a good idea to keep the structure, and set it to (None, None, None, None)? (which is also an unique object)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/tsusanka,6,https://github.com/trezor/trezor-core/pull/200#issuecomment-388044122,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198","(None, None, None, None) I like that! Fixed.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/tsusanka,7,https://github.com/trezor/trezor-core/pull/200#issuecomment-388353842,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198","I think we can merge this, agree?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/200#issuecomment-388354511,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198",utACK,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,200,2018-05-10T11:45:09Z,2018-05-11T13:33:34Z,2018-05-11T13:33:38Z,MERGED,True,7,4,3,https://github.com/tsusanka,eth: unknown token transfer is recognized and displayed as unknown,2,[],https://github.com/trezor/trezor-core/pull/200,https://github.com/tsusanka,9,https://github.com/trezor/trezor-core/pull/200#issuecomment-388364719,"When unknown token was transferred (meaning: the token address was not listed in the tokens list), we didn't treat it as a token transfer but as some arbitrary data. Since we know it is a token transfer it is beneficial to display the user such information and notify them that the token is unknown. In other words that the value is unknown, because we do not know the divisibility, nor the token suffix.
closes #198","I'm daring to merge this, it's pretty small. cc @jpochyla have a look when you come back, just so you know",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,201,2018-05-14T14:50:36Z,2018-05-24T16:17:18Z,2018-05-25T11:04:00Z,MERGED,True,143,48,12,https://github.com/jpochyla,Introduce trezor_obj_get_int and trezor_obj_get_uint,4,[],https://github.com/trezor/trezor-core/pull/201,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/201,"Continuing discussion from #191.
This PR replaces all occurrences of mp_obj_get_int_truncated and mp_obj_int_get_truncated with new helper functions.
Remaining work:

 Replace mp_obj_get_int for unsigned cases
 Tests","Continuing discussion from #191.
This PR replaces all occurrences of mp_obj_get_int_truncated and mp_obj_int_get_truncated with new helper functions.
Remaining work:

 Replace mp_obj_get_int for unsigned cases
 Tests",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,201,2018-05-14T14:50:36Z,2018-05-24T16:17:18Z,2018-05-25T11:04:00Z,MERGED,True,143,48,12,https://github.com/jpochyla,Introduce trezor_obj_get_int and trezor_obj_get_uint,4,[],https://github.com/trezor/trezor-core/pull/201,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/201#issuecomment-389474138,"Continuing discussion from #191.
This PR replaces all occurrences of mp_obj_get_int_truncated and mp_obj_int_get_truncated with new helper functions.
Remaining work:

 Replace mp_obj_get_int for unsigned cases
 Tests",utACK 450cb96,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,201,2018-05-14T14:50:36Z,2018-05-24T16:17:18Z,2018-05-25T11:04:00Z,MERGED,True,143,48,12,https://github.com/jpochyla,Introduce trezor_obj_get_int and trezor_obj_get_uint,4,[],https://github.com/trezor/trezor-core/pull/201,https://github.com/jpochyla,3,https://github.com/trezor/trezor-core/pull/201#issuecomment-389504690,"Continuing discussion from #191.
This PR replaces all occurrences of mp_obj_get_int_truncated and mp_obj_int_get_truncated with new helper functions.
Remaining work:

 Replace mp_obj_get_int for unsigned cases
 Tests",Added trezor_obj_get_uint8 and replaced some usages of mp_obj_get_int.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,204,2018-05-21T16:24:04Z,2018-05-22T15:28:54Z,2018-05-22T15:29:20Z,MERGED,True,32,5,3,https://github.com/matejcik,custom runxfail for better testing of new feature PRs,1,[],https://github.com/trezor/trezor-core/pull/204,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/204,as per trezor/python-trezor#263,as per trezor/python-trezor#263,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,206,2018-05-24T08:56:53Z,2018-05-25T11:43:43Z,2018-05-25T12:02:17Z,MERGED,True,7,6,2,https://github.com/tsusanka,wallet: isinstance in __init__,1,[],https://github.com/trezor/trezor-core/pull/206,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/206,"This is just a tiny refactoring of the init function in the wallet, isinstance is now used. Tests are passing, so good to merge?","This is just a tiny refactoring of the init function in the wallet, isinstance is now used. Tests are passing, so good to merge?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,206,2018-05-24T08:56:53Z,2018-05-25T11:43:43Z,2018-05-25T12:02:17Z,MERGED,True,7,6,2,https://github.com/tsusanka,wallet: isinstance in __init__,1,[],https://github.com/trezor/trezor-core/pull/206,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/206#issuecomment-391671325,"This is just a tiny refactoring of the init function in the wallet, isinstance is now used. Tests are passing, so good to merge?",I've found just one more instance of this. Should be all,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,207,2018-05-25T08:54:08Z,2018-05-25T14:09:35Z,2018-05-25T14:09:40Z,CLOSED,False,198,0,2,https://github.com/tsusanka,crypto: base32,1,[],https://github.com/trezor/trezor-core/pull/207,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/207,"I need base32 for Stellar, but I'm filling this as a separate PR to make it a bit clearer.
I've copied the base32 implementation from the micropython lib with one minor modification: the encode function returns str instead of bytes. See line 200 vs 66. I'm now looking at the official Python base32 implementation though and it returns bytes as well, so maybe this is a bad idea?","I need base32 for Stellar, but I'm filling this as a separate PR to make it a bit clearer.
I've copied the base32 implementation from the micropython lib with one minor modification: the encode function returns str instead of bytes. See line 200 vs 66. I'm now looking at the official Python base32 implementation though and it returns bytes as well, so maybe this is a bad idea?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,207,2018-05-25T08:54:08Z,2018-05-25T14:09:35Z,2018-05-25T14:09:40Z,CLOSED,False,198,0,2,https://github.com/tsusanka,crypto: base32,1,[],https://github.com/trezor/trezor-core/pull/207,https://github.com/matejcik,2,https://github.com/trezor/trezor-core/pull/207#issuecomment-392006312,"I need base32 for Stellar, but I'm filling this as a separate PR to make it a bit clearer.
I've copied the base32 implementation from the micropython lib with one minor modification: the encode function returns str instead of bytes. See line 200 vs 66. I'm now looking at the official Python base32 implementation though and it returns bytes as well, so maybe this is a bad idea?","other encode functions (base64, binascii.hexlify) also return bytes. I wonder what's the rationale for that.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,207,2018-05-25T08:54:08Z,2018-05-25T14:09:35Z,2018-05-25T14:09:40Z,CLOSED,False,198,0,2,https://github.com/tsusanka,crypto: base32,1,[],https://github.com/trezor/trezor-core/pull/207,https://github.com/matejcik,3,https://github.com/trezor/trezor-core/pull/207#issuecomment-392008744,"I need base32 for Stellar, but I'm filling this as a separate PR to make it a bit clearer.
I've copied the base32 implementation from the micropython lib with one minor modification: the encode function returns str instead of bytes. See line 200 vs 66. I'm now looking at the official Python base32 implementation though and it returns bytes as well, so maybe this is a bad idea?","ah, here it is: https://stackoverflow.com/a/42776711/222189
Python's stdlib considers ""bytes -> str"" a decode operation, but in this case it would be an encode. So it's an API regularity thing.
That reasoning doesn't apply to us. But it might be a matter of conforming to Pythonist's expectations?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,207,2018-05-25T08:54:08Z,2018-05-25T14:09:35Z,2018-05-25T14:09:40Z,CLOSED,False,198,0,2,https://github.com/tsusanka,crypto: base32,1,[],https://github.com/trezor/trezor-core/pull/207,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/207#issuecomment-392020209,"I need base32 for Stellar, but I'm filling this as a separate PR to make it a bit clearer.
I've copied the base32 implementation from the micropython lib with one minor modification: the encode function returns str instead of bytes. See line 200 vs 66. I'm now looking at the official Python base32 implementation though and it returns bytes as well, so maybe this is a bad idea?",utACK,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,207,2018-05-25T08:54:08Z,2018-05-25T14:09:35Z,2018-05-25T14:09:40Z,CLOSED,False,198,0,2,https://github.com/tsusanka,crypto: base32,1,[],https://github.com/trezor/trezor-core/pull/207,https://github.com/tsusanka,5,https://github.com/trezor/trezor-core/pull/207#issuecomment-392021580,"I need base32 for Stellar, but I'm filling this as a separate PR to make it a bit clearer.
I've copied the base32 implementation from the micropython lib with one minor modification: the encode function returns str instead of bytes. See line 200 vs 66. I'm now looking at the official Python base32 implementation though and it returns bytes as well, so maybe this is a bad idea?","That reasoning doesn't apply to us. But it might be a matter of conforming to Pythonist's expectations?

Yeah, I think I agree, I guess it's better to remove my modification. Let's see what @jpochyla thinks though",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,207,2018-05-25T08:54:08Z,2018-05-25T14:09:35Z,2018-05-25T14:09:40Z,CLOSED,False,198,0,2,https://github.com/tsusanka,crypto: base32,1,[],https://github.com/trezor/trezor-core/pull/207,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/207#issuecomment-392069911,"I need base32 for Stellar, but I'm filling this as a separate PR to make it a bit clearer.
I've copied the base32 implementation from the micropython lib with one minor modification: the encode function returns str instead of bytes. See line 200 vs 66. I'm now looking at the official Python base32 implementation though and it returns bytes as well, so maybe this is a bad idea?",Merged via bb57000 with small changes,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,211,2018-05-31T17:23:59Z,2018-06-02T11:06:25Z,2018-06-02T11:06:28Z,MERGED,True,1,1,1,https://github.com/karelbilek,readme: Add scons to build dependency,1,[],https://github.com/trezor/trezor-core/pull/211,https://github.com/karelbilek,1,https://github.com/trezor/trezor-core/pull/211,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,213,2018-06-04T08:23:22Z,2018-06-08T13:18:08Z,2018-06-08T13:19:15Z,MERGED,True,124,40,3,https://github.com/jpochyla,Efficient text layout,3,"['firmware', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/213,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/213,First shot at the algorithm.,First shot at the algorithm.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,216,2018-06-06T15:29:39Z,2018-07-12T11:26:00Z,2018-07-13T10:38:48Z,MERGED,True,977,10,20,https://github.com/tsusanka,Stellar implementation,21,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/216,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/216,closes #202,closes #202,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,216,2018-06-06T15:29:39Z,2018-07-12T11:26:00Z,2018-07-13T10:38:48Z,MERGED,True,977,10,20,https://github.com/tsusanka,Stellar implementation,21,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/216,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/216#issuecomment-396324203,closes #202,JFYI I added show_display flags to StellarGetAddress/StellarGetPublicKey to match the API of other coins.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,216,2018-06-06T15:29:39Z,2018-07-12T11:26:00Z,2018-07-13T10:38:48Z,MERGED,True,977,10,20,https://github.com/tsusanka,Stellar implementation,21,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/216,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/216#issuecomment-398564815,closes #202,Please don't merge before 2.0.7 is released.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,216,2018-06-06T15:29:39Z,2018-07-12T11:26:00Z,2018-07-13T10:38:48Z,MERGED,True,977,10,20,https://github.com/tsusanka,Stellar implementation,21,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/216,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/216#issuecomment-403895042,closes #202,tACK 31c1570,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,217,2018-06-06T21:06:34Z,2018-06-07T13:55:22Z,2018-06-07T14:13:06Z,MERGED,True,145,2,9,https://github.com/alepop,Lisk sign/verify functionality ,4,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/217,https://github.com/alepop,1,https://github.com/trezor/trezor-core/pull/217,"After this #90 (comment), Lisk functionality for message signing and verifying was removed from trezor-coomon, trezor-core and python-trezor.
Now Lisk have the prefix for signed messages (LiskArchive/lisk-elements#673)
Relevant PR's:
python-trezor: trezor/python-trezor#270
trezor-common: trezor/trezor-common#120
closes #218","After this #90 (comment), Lisk functionality for message signing and verifying was removed from trezor-coomon, trezor-core and python-trezor.
Now Lisk have the prefix for signed messages (LiskArchive/lisk-elements#673)
Relevant PR's:
python-trezor: trezor/python-trezor#270
trezor-common: trezor/trezor-common#120
closes #218",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,217,2018-06-06T21:06:34Z,2018-06-07T13:55:22Z,2018-06-07T14:13:06Z,MERGED,True,145,2,9,https://github.com/alepop,Lisk sign/verify functionality ,4,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/217,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/217#issuecomment-395393825,"After this #90 (comment), Lisk functionality for message signing and verifying was removed from trezor-coomon, trezor-core and python-trezor.
Now Lisk have the prefix for signed messages (LiskArchive/lisk-elements#673)
Relevant PR's:
python-trezor: trezor/python-trezor#270
trezor-common: trezor/trezor-common#120
closes #218","trezor/trezor-common#120 is merged now
I changed the order of fields in LiskVerifyMessage (trezor/trezor-common@babc60a) so this message needs to be regenerated.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,217,2018-06-06T21:06:34Z,2018-06-07T13:55:22Z,2018-06-07T14:13:06Z,MERGED,True,145,2,9,https://github.com/alepop,Lisk sign/verify functionality ,4,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/217,https://github.com/alepop,3,https://github.com/trezor/trezor-core/pull/217#issuecomment-395407312,"After this #90 (comment), Lisk functionality for message signing and verifying was removed from trezor-coomon, trezor-core and python-trezor.
Now Lisk have the prefix for signed messages (LiskArchive/lisk-elements#673)
Relevant PR's:
python-trezor: trezor/python-trezor#270
trezor-common: trezor/trezor-common#120
closes #218",@prusnak done,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,217,2018-06-06T21:06:34Z,2018-06-07T13:55:22Z,2018-06-07T14:13:06Z,MERGED,True,145,2,9,https://github.com/alepop,Lisk sign/verify functionality ,4,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/217,https://github.com/alepop,4,https://github.com/trezor/trezor-core/pull/217#issuecomment-395435187,"After this #90 (comment), Lisk functionality for message signing and verifying was removed from trezor-coomon, trezor-core and python-trezor.
Now Lisk have the prefix for signed messages (LiskArchive/lisk-elements#673)
Relevant PR's:
python-trezor: trezor/python-trezor#270
trezor-common: trezor/trezor-common#120
closes #218",@prusnak @jpochyla thank you,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,222,2018-06-08T11:55:46Z,2018-06-08T11:57:42Z,2018-06-08T12:21:51Z,CLOSED,False,15,0,1,https://github.com/hypermoist,Crown Support,1,[],https://github.com/trezor/trezor-core/pull/222,https://github.com/hypermoist,1,https://github.com/trezor/trezor-core/pull/222,Addition of Crown,Addition of Crown,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,222,2018-06-08T11:55:46Z,2018-06-08T11:57:42Z,2018-06-08T12:21:51Z,CLOSED,False,15,0,1,https://github.com/hypermoist,Crown Support,1,[],https://github.com/trezor/trezor-core/pull/222,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/222#issuecomment-395739009,Addition of Crown,We'll process the coin addition manually.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,222,2018-06-08T11:55:46Z,2018-06-08T11:57:42Z,2018-06-08T12:21:51Z,CLOSED,False,15,0,1,https://github.com/hypermoist,Crown Support,1,[],https://github.com/trezor/trezor-core/pull/222,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/222#issuecomment-395743525,Addition of Crown,I just noticed that address_type=0 - we won't be adding this coin unless you change address_type of the currency so it does not collide with Bitcoin.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,222,2018-06-08T11:55:46Z,2018-06-08T11:57:42Z,2018-06-08T12:21:51Z,CLOSED,False,15,0,1,https://github.com/hypermoist,Crown Support,1,[],https://github.com/trezor/trezor-core/pull/222,https://github.com/hypermoist,4,https://github.com/trezor/trezor-core/pull/222#issuecomment-395744189,Addition of Crown,"Heya, Thanks for getting back about that :) will try have something done",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,223,2018-06-08T18:58:24Z,2018-06-10T20:12:50Z,2018-06-10T20:12:51Z,CLOSED,False,66,10,5,https://github.com/josephnicholas,Zencash Support,6,[],https://github.com/trezor/trezor-core/pull/223,https://github.com/josephnicholas,1,https://github.com/trezor/trezor-core/pull/223,"Zencash integration for Trezor Model T
Added additional script support for replay protection","Zencash integration for Trezor Model T
Added additional script support for replay protection",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,223,2018-06-08T18:58:24Z,2018-06-10T20:12:50Z,2018-06-10T20:12:51Z,CLOSED,False,66,10,5,https://github.com/josephnicholas,Zencash Support,6,[],https://github.com/trezor/trezor-core/pull/223,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/223#issuecomment-396078554,"Zencash integration for Trezor Model T
Added additional script support for replay protection","Don't send PR to trezor-core unless the PR to trezor-common is accepted first.
This PR is really horrible. It is full of merge conflicts (such as 83d92e8#diff-711e9d4abbb3c6798636eb0324377c3eR271). Field replay_protection does not make any sense as bool, etc. You really need to work on your code hygiene before you send another PR, but for now let's focus on PR in trezor-common first.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,230,2018-06-11T12:56:41Z,2018-06-11T17:36:03Z,2018-06-13T14:10:11Z,MERGED,True,14,0,2,https://github.com/malinah,bootloader: ask again for block if invalid,1,[],https://github.com/trezor/trezor-core/pull/230,https://github.com/malinah,1,https://github.com/trezor/trezor-core/pull/230,fixes #135,fixes #135,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,230,2018-06-11T12:56:41Z,2018-06-11T17:36:03Z,2018-06-13T14:10:11Z,MERGED,True,14,0,2,https://github.com/malinah,bootloader: ask again for block if invalid,1,[],https://github.com/trezor/trezor-core/pull/230,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/230#issuecomment-396323890,fixes #135,LGTM Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,231,2018-06-11T15:21:52Z,2018-06-11T15:23:41Z,2018-06-11T17:34:53Z,CLOSED,False,1,1,1,https://github.com/ilanolkies,Update trezor-common,1,[],https://github.com/trezor/trezor-core/pull/231,https://github.com/ilanolkies,1,https://github.com/trezor/trezor-core/pull/231,"General
Rootstock is no more the network name, it's RSK.
Related

trezor-common issue.

Solution
Update trezor-common submodule.","General
Rootstock is no more the network name, it's RSK.
Related

trezor-common issue.

Solution
Update trezor-common submodule.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,231,2018-06-11T15:21:52Z,2018-06-11T15:23:41Z,2018-06-11T17:34:53Z,CLOSED,False,1,1,1,https://github.com/ilanolkies,Update trezor-common,1,[],https://github.com/trezor/trezor-core/pull/231,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/231#issuecomment-396282777,"General
Rootstock is no more the network name, it's RSK.
Related

trezor-common issue.

Solution
Update trezor-common submodule.",Will be fixed as a part of bigger fix,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,231,2018-06-11T15:21:52Z,2018-06-11T15:23:41Z,2018-06-11T17:34:53Z,CLOSED,False,1,1,1,https://github.com/ilanolkies,Update trezor-common,1,[],https://github.com/trezor/trezor-core/pull/231,https://github.com/ilanolkies,3,https://github.com/trezor/trezor-core/pull/231#issuecomment-396284012,"General
Rootstock is no more the network name, it's RSK.
Related

trezor-common issue.

Solution
Update trezor-common submodule.",Thank you! This change also applies for trezor-mcu.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,232,2018-06-11T15:35:20Z,2018-06-11T17:09:08Z,2018-06-12T14:04:19Z,CLOSED,False,20,4,2,https://github.com/ilanolkies,RSK uses a different checksum encoding.,6,[],https://github.com/trezor/trezor-core/pull/232,https://github.com/ilanolkies,1,https://github.com/trezor/trezor-core/pull/232,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Derive node id from Derivation Path
Apply checksum","General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Derive node id from Derivation Path
Apply checksum",True,{'THUMBS_UP': ['https://github.com/herrerameri']}
trezor/trezor-core,https://github.com/trezor/trezor-core,232,2018-06-11T15:35:20Z,2018-06-11T17:09:08Z,2018-06-12T14:04:19Z,CLOSED,False,20,4,2,https://github.com/ilanolkies,RSK uses a different checksum encoding.,6,[],https://github.com/trezor/trezor-core/pull/232,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/232#issuecomment-396297037,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Derive node id from Derivation Path
Apply checksum",Please squash your commits into one. Also please rebase on top of the master and use the new networks api: ad1e0e8 (use networks.by_chain_id or networks.by_slip44 methods to retrieve the NetworkInfo class and check whether its field rskip60 is set to True or `False).,True,{'THUMBS_UP': ['https://github.com/ilanolkies']}
trezor/trezor-core,https://github.com/trezor/trezor-core,232,2018-06-11T15:35:20Z,2018-06-11T17:09:08Z,2018-06-12T14:04:19Z,CLOSED,False,20,4,2,https://github.com/ilanolkies,RSK uses a different checksum encoding.,6,[],https://github.com/trezor/trezor-core/pull/232,https://github.com/ilanolkies,3,https://github.com/trezor/trezor-core/pull/232#issuecomment-396598106,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Derive node id from Derivation Path
Apply checksum","Hi! @prusnak . EthereumGetAddress receives an ""unsigned int 32"" representing slip-44 coin id. Do you have any function to ""parse it to int""?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,232,2018-06-11T15:35:20Z,2018-06-11T17:09:08Z,2018-06-12T14:04:19Z,CLOSED,False,20,4,2,https://github.com/ilanolkies,RSK uses a different checksum encoding.,6,[],https://github.com/trezor/trezor-core/pull/232,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/232#issuecomment-396600700,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Derive node id from Derivation Path
Apply checksum",You can use val & 0x7fffffff,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,232,2018-06-11T15:35:20Z,2018-06-11T17:09:08Z,2018-06-12T14:04:19Z,CLOSED,False,20,4,2,https://github.com/ilanolkies,RSK uses a different checksum encoding.,6,[],https://github.com/trezor/trezor-core/pull/232,https://github.com/ilanolkies,5,https://github.com/trezor/trezor-core/pull/232#issuecomment-396601269,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Derive node id from Derivation Path
Apply checksum",True! Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,233,2018-06-11T15:35:42Z,2018-06-20T10:57:43Z,2018-06-20T11:01:37Z,MERGED,True,69,56,7,https://github.com/tsusanka,NEM: display QR code in get address and display address refactoring,2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/233,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/233,"@jpochyla I've moved the show_qr and show_address to apps.common.display_address (not 100% sure about the name), because it's shared between the apps. I think this is better than grabbing it from apps.wallet.
Also as part of that, I've added a QR code displaying into NEM's Get Address, as instructed in #227.","@jpochyla I've moved the show_qr and show_address to apps.common.display_address (not 100% sure about the name), because it's shared between the apps. I think this is better than grabbing it from apps.wallet.
Also as part of that, I've added a QR code displaying into NEM's Get Address, as instructed in #227.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,235,2018-06-12T15:10:14Z,2018-06-13T16:39:26Z,2018-06-13T18:43:46Z,CLOSED,False,123,71,8,https://github.com/ilanolkies,RSKIP-60 based checksum address encoding,3,[],https://github.com/trezor/trezor-core/pull/235,https://github.com/ilanolkies,1,https://github.com/trezor/trezor-core/pull/235,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivtion path (always positive)
Line 37: lazy conditional avoids double checking networks.by_","General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivtion path (always positive)
Line 37: lazy conditional avoids double checking networks.by_",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,235,2018-06-12T15:10:14Z,2018-06-13T16:39:26Z,2018-06-13T18:43:46Z,CLOSED,False,123,71,8,https://github.com/ilanolkies,RSKIP-60 based checksum address encoding,3,[],https://github.com/trezor/trezor-core/pull/235,https://github.com/ilanolkies,2,https://github.com/trezor/trezor-core/pull/235#issuecomment-396635227,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivtion path (always positive)
Line 37: lazy conditional avoids double checking networks.by_","Isn't it related with #236?
networks.by_slip44 returns Undefined when 37310 is not found.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,235,2018-06-12T15:10:14Z,2018-06-13T16:39:26Z,2018-06-13T18:43:46Z,CLOSED,False,123,71,8,https://github.com/ilanolkies,RSKIP-60 based checksum address encoding,3,[],https://github.com/trezor/trezor-core/pull/235,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/235#issuecomment-396639501,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivtion path (always positive)
Line 37: lazy conditional avoids double checking networks.by_","What's the purpose of predefined_applying_rskip60? Let's drop it.
Please add unit test for your code to tests/test_apps.ethereum.get_address.py as test_ethereum_address_hex_rskip60 method.
Failure should be resolved as #236 is merged now.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,235,2018-06-12T15:10:14Z,2018-06-13T16:39:26Z,2018-06-13T18:43:46Z,CLOSED,False,123,71,8,https://github.com/ilanolkies,RSKIP-60 based checksum address encoding,3,[],https://github.com/trezor/trezor-core/pull/235,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/235#issuecomment-396898606,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivtion path (always positive)
Line 37: lazy conditional avoids double checking networks.by_","It's not required to close the pull request, just push (or push-force) into your branch and the pull request will get updated.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,239,2018-06-13T16:08:58Z,2018-06-19T16:26:44Z,2018-06-19T16:28:46Z,MERGED,True,58,76,19,https://github.com/jpochyla,Update micropython to 1.9.4,8,[],https://github.com/trezor/trezor-core/pull/239,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/239,"Review mpconfig.h and figure out if we can disable some optional features.
 Can we use newly-introduced MP_STATIC_ASSERT somewhere?
 Can we somehow benefit from pystack?","Review mpconfig.h and figure out if we can disable some optional features.
 Can we use newly-introduced MP_STATIC_ASSERT somewhere?
 Can we somehow benefit from pystack?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,239,2018-06-13T16:08:58Z,2018-06-19T16:26:44Z,2018-06-19T16:28:46Z,MERGED,True,58,76,19,https://github.com/jpochyla,Update micropython to 1.9.4,8,[],https://github.com/trezor/trezor-core/pull/239,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/239#issuecomment-398461484,"Review mpconfig.h and figure out if we can disable some optional features.
 Can we use newly-introduced MP_STATIC_ASSERT somewhere?
 Can we somehow benefit from pystack?",Great!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,239,2018-06-13T16:08:58Z,2018-06-19T16:26:44Z,2018-06-19T16:28:46Z,MERGED,True,58,76,19,https://github.com/jpochyla,Update micropython to 1.9.4,8,[],https://github.com/trezor/trezor-core/pull/239,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/239#issuecomment-398461784,"Review mpconfig.h and figure out if we can disable some optional features.
 Can we use newly-introduced MP_STATIC_ASSERT somewhere?
 Can we somehow benefit from pystack?",Moved questions from comment 0 to #247,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,240,2018-06-13T16:45:45Z,2018-06-13T17:03:58Z,2018-06-13T18:43:46Z,CLOSED,False,50,4,3,https://github.com/ilanolkies,Implement RSKIP-60 based checksum address encoding,1,[],https://github.com/trezor/trezor-core/pull/240,https://github.com/ilanolkies,1,https://github.com/trezor/trezor-core/pull/240,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivation path.
predefined_rskip60: prevents double search in networks list.
Line 35-42: defines wether to use RSKIP-60 prefix or not.","General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivation path.
predefined_rskip60: prevents double search in networks list.
Line 35-42: defines wether to use RSKIP-60 prefix or not.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,240,2018-06-13T16:45:45Z,2018-06-13T17:03:58Z,2018-06-13T18:43:46Z,CLOSED,False,50,4,3,https://github.com/ilanolkies,Implement RSKIP-60 based checksum address encoding,1,[],https://github.com/trezor/trezor-core/pull/240,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/240#issuecomment-397010540,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivation path.
predefined_rskip60: prevents double search in networks list.
Line 35-42: defines wether to use RSKIP-60 prefix or not.","Your code does not work with your unit test
AssertionError: '0x5aaEB6053f3e94c9b9a09f33669435E7ef1bEAeD' vs (expected) '0x5AaEb6053f3e94C9B9A09f33669435e7Ef1BeaeD'",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,240,2018-06-13T16:45:45Z,2018-06-13T17:03:58Z,2018-06-13T18:43:46Z,CLOSED,False,50,4,3,https://github.com/ilanolkies,Implement RSKIP-60 based checksum address encoding,1,[],https://github.com/trezor/trezor-core/pull/240,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/240#issuecomment-397012762,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivation path.
predefined_rskip60: prevents double search in networks list.
Line 35-42: defines wether to use RSKIP-60 prefix or not.","Found the bug and commited as 0c13a43
Thank you!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,240,2018-06-13T16:45:45Z,2018-06-13T17:03:58Z,2018-06-13T18:43:46Z,CLOSED,False,50,4,3,https://github.com/ilanolkies,Implement RSKIP-60 based checksum address encoding,1,[],https://github.com/trezor/trezor-core/pull/240,https://github.com/ilanolkies,4,https://github.com/trezor/trezor-core/pull/240#issuecomment-397043166,"General
RSK uses a different address checksum encoding, not the same as Etherum. It's described in RSKIP-60, and it's compatible with EIP-55 ecnoding.
Solution

Implement RSK checksum in Ethereum require_confirm_tx
Implement RSK checksum in EthereumGetAddress

Implementation

Line 20: SLIP-44 coin id derived from derivation path.
predefined_rskip60: prevents double search in networks list.
Line 35-42: defines wether to use RSKIP-60 prefix or not.","Thanks @prusnak
RSKIP-60 is going to change: '|' spearator will be changed for '0x'.
We are going to create a new PR including this changes. It can be merged when RSKIP-60 is updated.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,241,2018-06-13T19:19:19Z,2018-06-13T21:21:20Z,2018-06-15T17:39:54Z,MERGED,True,1,1,1,https://github.com/ilanolkies,Apply RSKIP-60 in require_confirm_tx,1,[],https://github.com/trezor/trezor-core/pull/241,https://github.com/ilanolkies,1,https://github.com/trezor/trezor-core/pull/241,Change was not included in last PR.,Change was not included in last PR.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,242,2018-06-14T02:28:29Z,2018-06-15T08:29:02Z,2018-06-15T08:29:54Z,MERGED,True,1,1,1,https://github.com/marceloneil,fix: emulator docs link,1,[],https://github.com/trezor/trezor-core/pull/242,https://github.com/marceloneil,1,https://github.com/trezor/trezor-core/pull/242,Fixes link from the emulator.md to build.md,Fixes link from the emulator.md to build.md,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,242,2018-06-14T02:28:29Z,2018-06-15T08:29:02Z,2018-06-15T08:29:54Z,MERGED,True,1,1,1,https://github.com/marceloneil,fix: emulator docs link,1,[],https://github.com/trezor/trezor-core/pull/242,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/242#issuecomment-397551714,Fixes link from the emulator.md to build.md,Thanks,True,{'THUMBS_UP': ['https://github.com/marceloneil']}
trezor/trezor-core,https://github.com/trezor/trezor-core,243,2018-06-14T02:37:42Z,2018-06-15T08:20:33Z,2018-06-19T16:17:18Z,MERGED,True,5,5,1,https://github.com/karelbilek,zcash: use personal field in blake2b,1,[],https://github.com/trezor/trezor-core/pull/243,https://github.com/karelbilek,1,https://github.com/trezor/trezor-core/pull/243,"Fixes #237
It needs this PR trezor/trezor-crypto#156 first - now this PR fails to build, because of the missing call
Locally, I used this commit in the trezor-crypto submodule - https://github.com/karel-3d/trezor-crypto/tree/fix_blake_crypto - because trezor-core fails to build with current trezor-crypto master for reasons unknown, so I cherry-picked the fix on top of the submodule.
Tested on zcash testnet, it works perfectly.","Fixes #237
It needs this PR trezor/trezor-crypto#156 first - now this PR fails to build, because of the missing call
Locally, I used this commit in the trezor-crypto submodule - https://github.com/karel-3d/trezor-crypto/tree/fix_blake_crypto - because trezor-core fails to build with current trezor-crypto master for reasons unknown, so I cherry-picked the fix on top of the submodule.
Tested on zcash testnet, it works perfectly.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,243,2018-06-14T02:37:42Z,2018-06-15T08:20:33Z,2018-06-19T16:17:18Z,MERGED,True,5,5,1,https://github.com/karelbilek,zcash: use personal field in blake2b,1,[],https://github.com/trezor/trezor-core/pull/243,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/243#issuecomment-398045509,"Fixes #237
It needs this PR trezor/trezor-crypto#156 first - now this PR fails to build, because of the missing call
Locally, I used this commit in the trezor-crypto submodule - https://github.com/karel-3d/trezor-crypto/tree/fix_blake_crypto - because trezor-core fails to build with current trezor-crypto master for reasons unknown, so I cherry-picked the fix on top of the submodule.
Tested on zcash testnet, it works perfectly.",I think this brakes the test_trezor.crypto.hashlib.blake2b.py unit test,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,243,2018-06-14T02:37:42Z,2018-06-15T08:20:33Z,2018-06-19T16:17:18Z,MERGED,True,5,5,1,https://github.com/karelbilek,zcash: use personal field in blake2b,1,[],https://github.com/trezor/trezor-core/pull/243,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/243#issuecomment-398458333,"Fixes #237
It needs this PR trezor/trezor-crypto#156 first - now this PR fails to build, because of the missing call
Locally, I used this commit in the trezor-crypto submodule - https://github.com/karel-3d/trezor-crypto/tree/fix_blake_crypto - because trezor-core fails to build with current trezor-crypto master for reasons unknown, so I cherry-picked the fix on top of the submodule.
Tested on zcash testnet, it works perfectly.",Fixed broken test in 97bb26b (needed a bigger refactor),True,{'HOORAY': ['https://github.com/karelbilek']}
trezor/trezor-core,https://github.com/trezor/trezor-core,244,2018-06-14T18:25:46Z,2018-06-16T11:08:18Z,2018-06-16T11:08:18Z,MERGED,True,9,9,2,https://github.com/ilanolkies,Update RSKIP-60 checksum separator,1,[],https://github.com/trezor/trezor-core/pull/244,https://github.com/ilanolkies,1,https://github.com/trezor/trezor-core/pull/244,"RSKIP-60 checksum separator has changed: '0x' instead of '|'
Reference: https://github.com/rsksmart/RSKIPs/blob/master/IPs/RSKIP60.md","RSKIP-60 checksum separator has changed: '0x' instead of '|'
Reference: https://github.com/rsksmart/RSKIPs/blob/master/IPs/RSKIP60.md",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,244,2018-06-14T18:25:46Z,2018-06-16T11:08:18Z,2018-06-16T11:08:18Z,MERGED,True,9,9,2,https://github.com/ilanolkies,Update RSKIP-60 checksum separator,1,[],https://github.com/trezor/trezor-core/pull/244,https://github.com/ilanolkies,2,https://github.com/trezor/trezor-core/pull/244#issuecomment-397643859,"RSKIP-60 checksum separator has changed: '0x' instead of '|'
Reference: https://github.com/rsksmart/RSKIPs/blob/master/IPs/RSKIP60.md",@prusnak Amended!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,244,2018-06-14T18:25:46Z,2018-06-16T11:08:18Z,2018-06-16T11:08:18Z,MERGED,True,9,9,2,https://github.com/ilanolkies,Update RSKIP-60 checksum separator,1,[],https://github.com/trezor/trezor-core/pull/244,https://github.com/ilanolkies,3,https://github.com/trezor/trezor-core/pull/244#issuecomment-397698041,"RSKIP-60 checksum separator has changed: '0x' instead of '|'
Reference: https://github.com/rsksmart/RSKIPs/blob/master/IPs/RSKIP60.md","@prusnak blake2b is failing... something was changed in the last few commits about this.
Has something to be with the failure?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,244,2018-06-14T18:25:46Z,2018-06-16T11:08:18Z,2018-06-16T11:08:18Z,MERGED,True,9,9,2,https://github.com/ilanolkies,Update RSKIP-60 checksum separator,1,[],https://github.com/trezor/trezor-core/pull/244,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/244#issuecomment-397805056,"RSKIP-60 checksum separator has changed: '0x' instead of '|'
Reference: https://github.com/rsksmart/RSKIPs/blob/master/IPs/RSKIP60.md",Blake2b failure is unrelated. Merged in.,True,{'THUMBS_UP': ['https://github.com/ilanolkies']}
trezor/trezor-core,https://github.com/trezor/trezor-core,245,2018-06-16T05:01:56Z,2018-07-20T14:44:40Z,2018-07-20T14:44:40Z,CLOSED,False,696,107,28,https://github.com/jurajselep,Tezos integration,35,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/245,https://github.com/jurajselep,1,https://github.com/trezor/trezor-core/pull/245,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,245,2018-06-16T05:01:56Z,2018-07-20T14:44:40Z,2018-07-20T14:44:40Z,CLOSED,False,696,107,28,https://github.com/jurajselep,Tezos integration,35,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/245,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/245#issuecomment-398006893,,Don't merge unless trezor/trezor-common#139 is merged first,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,245,2018-06-16T05:01:56Z,2018-07-20T14:44:40Z,2018-07-20T14:44:40Z,CLOSED,False,696,107,28,https://github.com/jurajselep,Tezos integration,35,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/245,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/245#issuecomment-403929477,,"Can you please rebase on top of master?
Also we started to use black and isort for our python code in src/ so please use this to avoid being rejected by Travis.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,245,2018-06-16T05:01:56Z,2018-07-20T14:44:40Z,2018-07-20T14:44:40Z,CLOSED,False,696,107,28,https://github.com/jurajselep,Tezos integration,35,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/245,https://github.com/Adman,4,https://github.com/trezor/trezor-core/pull/245#issuecomment-404144648,,"Rebased it, but sign_tx is not done yet. I will create a pull request to trezor-common with updated fields.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,245,2018-06-16T05:01:56Z,2018-07-20T14:44:40Z,2018-07-20T14:44:40Z,CLOSED,False,696,107,28,https://github.com/jurajselep,Tezos integration,35,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/245,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/245#issuecomment-404163445,,Ack!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,245,2018-06-16T05:01:56Z,2018-07-20T14:44:40Z,2018-07-20T14:44:40Z,CLOSED,False,696,107,28,https://github.com/jurajselep,Tezos integration,35,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/245,https://github.com/Adman,6,https://github.com/trezor/trezor-core/pull/245#issuecomment-405171123,,updated fields of trezor-common trezor/trezor-common#170,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,245,2018-06-16T05:01:56Z,2018-07-20T14:44:40Z,2018-07-20T14:44:40Z,CLOSED,False,696,107,28,https://github.com/jurajselep,Tezos integration,35,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/245,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/245#issuecomment-406622435,,This is still work in progress - closing for now. Reopen once you are finished and want to have this reviewed. Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,248,2018-06-20T13:01:28Z,2018-06-21T14:23:29Z,2018-06-21T14:43:43Z,MERGED,True,16,3,3,https://github.com/prusnak,embed/firmware: update linker to use firmware_extra section,1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/248,https://github.com/prusnak,1,https://github.com/trezor/trezor-core/pull/248,"These changes modify the linker script to utilize also the firmware extra flash area as well. Currently, the MicroPython bytecode (frozen_mpy.o) is moved there (around 300K).
Old layout used almost full 768K in the firmware section and nothing was used in the firmware extra section (out of 896K) (i.e. 100% and 0%).
After the change the firmware section usage is around 470K and the firmware extra section usage is around 300K (i.e. 60% and  33%).
The resulting firmware is slightly bigger (because we need to pad the first section with zeroes) totalling at around 1070K (instead of the original 770K), but this provides space for future updates.","These changes modify the linker script to utilize also the firmware extra flash area as well. Currently, the MicroPython bytecode (frozen_mpy.o) is moved there (around 300K).
Old layout used almost full 768K in the firmware section and nothing was used in the firmware extra section (out of 896K) (i.e. 100% and 0%).
After the change the firmware section usage is around 470K and the firmware extra section usage is around 300K (i.e. 60% and  33%).
The resulting firmware is slightly bigger (because we need to pad the first section with zeroes) totalling at around 1070K (instead of the original 770K), but this provides space for future updates.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,248,2018-06-20T13:01:28Z,2018-06-21T14:23:29Z,2018-06-21T14:43:43Z,MERGED,True,16,3,3,https://github.com/prusnak,embed/firmware: update linker to use firmware_extra section,1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/248,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/248#issuecomment-399120050,"These changes modify the linker script to utilize also the firmware extra flash area as well. Currently, the MicroPython bytecode (frozen_mpy.o) is moved there (around 300K).
Old layout used almost full 768K in the firmware section and nothing was used in the firmware extra section (out of 896K) (i.e. 100% and 0%).
After the change the firmware section usage is around 470K and the firmware extra section usage is around 300K (i.e. 60% and  33%).
The resulting firmware is slightly bigger (because we need to pad the first section with zeroes) totalling at around 1070K (instead of the original 770K), but this provides space for future updates.",utACK,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,1,https://github.com/trezor/trezor-core/pull/250,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/250#issuecomment-400427583,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com",Do not merge unless trezor/trezor-common#148 is merged first,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,3,https://github.com/trezor/trezor-core/pull/250#issuecomment-400581410,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","@prusnak there was a problem with firmware build, where it errored on undefined reference to _sbrk
For our testing purposes I applied fix as suggested here in point 6 and 12.
I added -lrdimon but it should also work with -lnosys not sure which one is correct or better",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/250#issuecomment-400586683,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com",Adding libraries is not the solution. Can you post the line where you have encountered undefined reference to _sbrk? This usually means you used malloc or similar which is forbidden in our code.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,5,https://github.com/trezor/trezor-core/pull/250#issuecomment-400596730,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","Will look into it. We are not using malloc directly but from build output it looks that something is:
arm-none-eabi-gcc -o build/firmware/firmware.elf -Os -g3 -nostdlib -std=gnu99 -Wall -Werror -Wdouble-promotion -Wpointer-arith -fno-common -mthumb -mtune=cortex-m4 -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard -fsingle-precision-constant -fdata-sections -ffunction-sections -ffreestanding -fstack-protector-all -Wno-sequence-point -DGITREV=b529969 -DPRODUCTION=0 -DPYOPT=1 -T embed/firmware/memory.ld -Wl,--gc-sections -Wl,-Map=build/firmware/firmware.map -Wl,--warn-common build/firmware/embed/extmod/modtrezorconfig/modtrezorconfig.o build/firmware/embed/extmod/modtrezorconfig/norcow.o build/firmware/embed/extmod/modtrezorconfig/storage.o build/firmware/embed/extmod/modtrezorcrypto/modtrezorcrypto.o build/firmware/embed/extmod/modtrezorcrypto/crc.o build/firmware/embed/extmod/modtrezorcrypto/rand.o build/firmware/vendor/trezor-crypto/address.o build/firmware/vendor/trezor-crypto/aes/aescrypt.o build/firmware/vendor/trezor-crypto/aes/aeskey.o build/firmware/vendor/trezor-crypto/aes/aes_modes.o build/firmware/vendor/trezor-crypto/aes/aestab.o build/firmware/vendor/trezor-crypto/base58.o build/firmware/vendor/trezor-crypto/base32.o build/firmware/vendor/trezor-crypto/bignum.o build/firmware/vendor/trezor-crypto/bip32.o build/firmware/vendor/trezor-crypto/bip39.o build/firmware/vendor/trezor-crypto/blake256.o build/firmware/vendor/trezor-crypto/blake2b.o build/firmware/vendor/trezor-crypto/blake2s.o build/firmware/vendor/trezor-crypto/curves.o build/firmware/vendor/trezor-crypto/ecdsa.o build/firmware/vendor/trezor-crypto/chacha20poly1305/chacha20poly1305.o build/firmware/vendor/trezor-crypto/chacha20poly1305/chacha_merged.o build/firmware/vendor/trezor-crypto/chacha20poly1305/poly1305-donna.o build/firmware/vendor/trezor-crypto/chacha20poly1305/rfc7539.o build/firmware/vendor/trezor-crypto/ed25519-donna/curve25519-donna-32bit.o build/firmware/vendor/trezor-crypto/ed25519-donna/curve25519-donna-helpers.o build/firmware/vendor/trezor-crypto/ed25519-donna/curve25519-donna-scalarmult-base.o build/firmware/vendor/trezor-crypto/ed25519-donna/ed25519.o build/firmware/vendor/trezor-crypto/ed25519-donna/ed25519-donna-32bit-tables.o build/firmware/vendor/trezor-crypto/ed25519-donna/ed25519-donna-basepoint-table.o build/firmware/vendor/trezor-crypto/ed25519-donna/ed25519-donna-impl-base.o build/firmware/vendor/trezor-crypto/ed25519-donna/ed25519-keccak.o build/firmware/vendor/trezor-crypto/ed25519-donna/ed25519-sha3.o build/firmware/vendor/trezor-crypto/ed25519-donna/modm-donna-32bit.o build/firmware/vendor/trezor-crypto/groestl.o build/firmware/vendor/trezor-crypto/hasher.o build/firmware/vendor/trezor-crypto/hmac.o build/firmware/vendor/trezor-crypto/memzero.o build/firmware/vendor/trezor-crypto/nem.o build/firmware/vendor/trezor-crypto/nist256p1.o build/firmware/vendor/trezor-crypto/pbkdf2.o build/firmware/vendor/trezor-crypto/rand.o build/firmware/vendor/trezor-crypto/ripemd160.o build/firmware/vendor/trezor-crypto/secp256k1.o build/firmware/vendor/trezor-crypto/sha2.o build/firmware/vendor/trezor-crypto/sha3.o build/firmware/embed/extmod/modtrezorio/modtrezorio.o build/firmware/embed/extmod/modtrezorui/display.o build/firmware/embed/extmod/modtrezorui/inflate.o build/firmware/embed/extmod/modtrezorui/font_bitmap.o build/firmware/embed/extmod/modtrezorui/font_roboto_bold_20.o build/firmware/embed/extmod/modtrezorui/font_roboto_regular_20.o build/firmware/embed/extmod/modtrezorui/font_robotomono_regular_20.o build/firmware/embed/extmod/modtrezorui/modtrezorui.o build/firmware/embed/extmod/modtrezorui/trezor-qrenc/qr_encode.o build/firmware/embed/extmod/modtrezorutils/modtrezorutils.o build/firmware/embed/firmware/modutime.o build/firmware/embed/firmware/startup.o build/firmware/embed/firmware/header.o build/firmware/embed/firmware/main.o build/firmware/embed/firmware/mphalport.o build/firmware/embed/firmware/nlrthumb.o build/firmware/vendor/micropython/extmod/modubinascii.o build/firmware/vendor/micropython/extmod/moductypes.o build/firmware/vendor/micropython/extmod/moduheapq.o build/firmware/vendor/micropython/extmod/modutimeq.o build/firmware/vendor/micropython/extmod/utime_mphal.o build/firmware/vendor/micropython/lib/embed/abort_.o build/firmware/vendor/micropython/lib/mp-readline/readline.o build/firmware/vendor/micropython/lib/utils/interrupt_char.o build/firmware/vendor/micropython/lib/utils/printf.o build/firmware/vendor/micropython/lib/utils/pyexec.o build/firmware/vendor/micropython/lib/utils/stdout_helpers.o build/firmware/vendor/micropython/py/argcheck.o build/firmware/vendor/micropython/py/asmarm.o build/firmware/vendor/micropython/py/asmbase.o build/firmware/vendor/micropython/py/asmthumb.o build/firmware/vendor/micropython/py/asmx64.o build/firmware/vendor/micropython/py/asmx86.o build/firmware/vendor/micropython/py/asmxtensa.o build/firmware/vendor/micropython/py/bc.o build/firmware/vendor/micropython/py/binary.o build/firmware/vendor/micropython/py/builtinevex.o build/firmware/vendor/micropython/py/builtinhelp.o build/firmware/vendor/micropython/py/builtinimport.o build/firmware/vendor/micropython/py/compile.o build/firmware/vendor/micropython/py/emitbc.o build/firmware/vendor/micropython/py/emitcommon.o build/firmware/vendor/micropython/py/emitglue.o build/firmware/vendor/micropython/py/emitinlinethumb.o build/firmware/vendor/micropython/py/emitinlinextensa.o build/firmware/vendor/micropython/py/formatfloat.o build/firmware/vendor/micropython/py/frozenmod.o build/firmware/vendor/micropython/py/lexer.o build/firmware/vendor/micropython/py/malloc.o build/firmware/vendor/micropython/py/map.o build/firmware/vendor/micropython/py/modarray.o build/firmware/vendor/micropython/py/modbuiltins.o build/firmware/vendor/micropython/py/modgc.o build/firmware/vendor/micropython/py/modmath.o build/firmware/vendor/micropython/py/modmicropython.o build/firmware/vendor/micropython/py/modstruct.o build/firmware/vendor/micropython/py/modsys.o build/firmware/vendor/micropython/py/mpprint.o build/firmware/vendor/micropython/py/mpstate.o build/firmware/vendor/micropython/py/mpz.o build/firmware/vendor/micropython/py/nativeglue.o build/firmware/vendor/micropython/py/obj.o build/firmware/vendor/micropython/py/objarray.o build/firmware/vendor/micropython/py/objattrtuple.o build/firmware/vendor/micropython/py/objbool.o build/firmware/vendor/micropython/py/objboundmeth.o build/firmware/vendor/micropython/py/objcell.o build/firmware/vendor/micropython/py/objclosure.o build/firmware/vendor/micropython/py/objcomplex.o build/firmware/vendor/micropython/py/objdict.o build/firmware/vendor/micropython/py/objenumerate.o build/firmware/vendor/micropython/py/objexcept.o build/firmware/vendor/micropython/py/objfilter.o build/firmware/vendor/micropython/py/objfloat.o build/firmware/vendor/micropython/py/objfun.o build/firmware/vendor/micropython/py/objgenerator.o build/firmware/vendor/micropython/py/objgetitemiter.o build/firmware/vendor/micropython/py/objint_longlong.o build/firmware/vendor/micropython/py/objint_mpz.o build/firmware/vendor/micropython/py/objint.o build/firmware/vendor/micropython/py/objlist.o build/firmware/vendor/micropython/py/objmap.o build/firmware/vendor/micropython/py/objmodule.o build/firmware/vendor/micropython/py/objnamedtuple.o build/firmware/vendor/micropython/py/objnone.o build/firmware/vendor/micropython/py/objobject.o build/firmware/vendor/micropython/py/objpolyiter.o build/firmware/vendor/micropython/py/objproperty.o build/firmware/vendor/micropython/py/objrange.o build/firmware/vendor/micropython/py/objreversed.o build/firmware/vendor/micropython/py/objset.o build/firmware/vendor/micropython/py/objsingleton.o build/firmware/vendor/micropython/py/objslice.o build/firmware/vendor/micropython/py/objstr.o build/firmware/vendor/micropython/py/objstringio.o build/firmware/vendor/micropython/py/objstrunicode.o build/firmware/vendor/micropython/py/objtuple.o build/firmware/vendor/micropython/py/objtype.o build/firmware/vendor/micropython/py/objzip.o build/firmware/vendor/micropython/py/opmethods.o build/firmware/vendor/micropython/py/parse.o build/firmware/vendor/micropython/py/parsenum.o build/firmware/vendor/micropython/py/parsenumbase.o build/firmware/vendor/micropython/py/persistentcode.o build/firmware/vendor/micropython/py/qstr.o build/firmware/vendor/micropython/py/reader.o build/firmware/vendor/micropython/py/repl.o build/firmware/vendor/micropython/py/runtime_utils.o build/firmware/vendor/micropython/py/runtime.o build/firmware/vendor/micropython/py/scope.o build/firmware/vendor/micropython/py/sequence.o build/firmware/vendor/micropython/py/showbc.o build/firmware/vendor/micropython/py/smallint.o build/firmware/vendor/micropython/py/stackctrl.o build/firmware/vendor/micropython/py/stream.o build/firmware/vendor/micropython/py/unicode.o build/firmware/vendor/micropython/py/vstr.o build/firmware/vendor/micropython/py/warning.o build/firmware/vendor/micropython/ports/stm32/gccollect.o build/firmware/vendor/micropython/ports/stm32/gchelper.o build/firmware/vendor/micropython/ports/stm32/pendsv.o build/firmware/vendor/micropython/py/gc.o build/firmware/vendor/micropython/py/vm.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc_ex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dac_ex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dac.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rng.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc_ex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sd.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sram.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_fmc.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_sdmmc.o build/firmware/vendor/micropython/lib/stm32lib/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.o build/firmware/embed/trezorhal/common.o build/firmware/embed/trezorhal/flash.o build/firmware/embed/trezorhal/mini_printf.o build/firmware/embed/trezorhal/mpu.o build/firmware/embed/trezorhal/rng.o build/firmware/embed/trezorhal/sbu.o build/firmware/embed/trezorhal/sdcard.o build/firmware/embed/trezorhal/stm32.o build/firmware/embed/trezorhal/systick.o build/firmware/embed/trezorhal/touch.o build/firmware/embed/trezorhal/usb.o build/firmware/embed/trezorhal/usbd_conf.o build/firmware/embed/trezorhal/usbd_core.o build/firmware/embed/trezorhal/usbd_ctlreq.o build/firmware/embed/trezorhal/usbd_ioreq.o build/firmware/embed/trezorhal/util.o build/firmware/embed/trezorhal/vectortable.o build/firmware/frozen_mpy.o build/firmware/embed/firmware/vendorheader.o -lc_nano -lm -lgcc
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-abs.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-memcmp.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-memcpy.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-memmove.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-memset.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sf_copysign.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sf_fpclassify.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sf_frexp.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sf_ldexp.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sf_modf.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sf_nan.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sf_scalbn.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sprintf.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-strchr.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-strcpy.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-strlen.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-strncmp.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-errno.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-impure.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-nano-svfprintf.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-nano-vfprintf_i.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sf_finite.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-memchr.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-nano-freer.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-nano-mallocr.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-nano-reallocr.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sbrkr.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-nano-msizer.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: /usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-reent.o) uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a(lib_a-sbrkr.o): In function `_sbrk_r':
/build/newlib-5zwpxE/newlib-2.2.0+git20150830.5a3d536/build_nano/arm-none-eabi/armv7e-m/fpu/newlib/libc/reent/../../../../../../../newlib/libc/reent/sbrkr.c:58: undefined reference to `_sbrk'",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/250#issuecomment-400598532,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","You have really old gcc for arm (we use gcc 7, you have gcc 4). Please use the Docker build (build-docker.sh) or install the toolchain from here: https://github.com/trezor/trezor-core/blob/master/Dockerfile#L15",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,7,https://github.com/trezor/trezor-core/pull/250#issuecomment-400604100,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com",It is caused by sprintf will replace it,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,8,https://github.com/trezor/trezor-core/pull/250#issuecomment-400625950,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","Fixed, sprintf was in the crypto repo. It was replaced by decitoa implementation for convertin int to string and I removed build script modifications from this repo.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/prusnak,9,https://github.com/trezor/trezor-core/pull/250#issuecomment-403926095,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","Hi! I just merged in trezor/trezor-crypto#160
Can you please rebase on top of master?
Also we started to use black and isort for our python code in src/ so please use this to avoid being rejected by Travis.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,10,https://github.com/trezor/trezor-core/pull/250#issuecomment-404088025,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","Done, rebased and fixed linting errors",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,11,https://github.com/trezor/trezor-core/pull/250#issuecomment-404154772,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","Done, CR fixes are committed.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/prusnak,12,https://github.com/trezor/trezor-core/pull/250#issuecomment-404173527,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","Changes in embed/extmod/modtrezorcrypto/* look fine!
@jpochyla will look at src/apps/cardano/* and tests/*",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,13,https://github.com/trezor/trezor-core/pull/250#issuecomment-404775940,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com",Fixed CR notes and also added small number of type hints. Micropython was on version 3.4 and typing is accepted in python 3.5 so I used just :list instead of List(int),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/ddeath,14,https://github.com/trezor/trezor-core/pull/250#issuecomment-405964866,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com",@jpochyla are the changes sufficient or does it need some more changes?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/jpochyla,15,https://github.com/trezor/trezor-core/pull/250#issuecomment-406258504,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","Sorry about the delay. The changes are fine, I'll merge it ASAP.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/jpochyla,16,https://github.com/trezor/trezor-core/pull/250#issuecomment-407806017,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","Merged with very minor, mostly code-style, changes. Thanks a lot!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/KingHodor,17,https://github.com/trezor/trezor-core/pull/250#issuecomment-452334696,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com",Why Trezor does not support address with 'D' ? Most Cardano wallets generate their addresses with 'D' using additional data buy Trezor do not. Can I ask why? Is there any specific reason for that?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,250,2018-06-26T14:53:40Z,2018-07-25T15:56:31Z,2019-01-08T22:42:57Z,MERGED,True,1296,2,22,https://github.com/ddeath,Add Cardano currency support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/250,https://github.com/refi93,18,https://github.com/trezor/trezor-core/pull/250#issuecomment-452477462,"For the support of Cardano currency was required to add cardano-specific ed25519 crypto support.
The crypto code is based on cardano-crypto and cardano-sl - official Cardano repos.
The functions are designed to work with the cardanolite wallet - a lightweight wallet for Cardano based on the official Daedalus wallet. A beta version of cardanolite allowing connecting with the experimental trezor firmware will be available soon.
We are NOT official developers of Cardano, however we are developers of www.cardanolite.com","@KingHodor Trezor implements the new derivation scheme (also referred to as V2), used by Yoroi (the other cardano official wallet, apart from Daedalus). The ""D"" addresses are the old ones. They contained additional metadata which are not needed if you derive the addresses deterministically.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,251,2018-06-28T04:02:59Z,2018-06-28T09:07:39Z,2018-06-28T09:07:39Z,MERGED,True,1,1,1,https://github.com/jhoenicke,signtx layout: check if address starts with prefix,1,[],https://github.com/trezor/trezor-core/pull/251,https://github.com/jhoenicke,1,https://github.com/trezor/trezor-core/pull/251,"Only addresses starting with bitcoincash: should get their prefix
skipped. This fixes a bug where it skips the first bytes of legacy
addresses.","Only addresses starting with bitcoincash: should get their prefix
skipped. This fixes a bug where it skips the first bytes of legacy
addresses.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,252,2018-06-28T09:10:05Z,2018-07-02T12:16:27Z,2018-07-17T13:47:29Z,MERGED,True,19,5,4,https://github.com/idimon4uk,Add supporting Zencash,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/252,https://github.com/idimon4uk,1,https://github.com/trezor/trezor-core/pull/252,"Hi, we have added support for ZenCash to trezor-core but we found that some of the existing unit tests are failing.
We made some investigation and found that a merge in trezor-common, commit: 6c540db, moved values from 'bitcore' to 'blockbook' for some coins and these changes lead to breakdown of tests. The tests for our changes are completed successfully (we had to skip the other coins failing tests).","Hi, we have added support for ZenCash to trezor-core but we found that some of the existing unit tests are failing.
We made some investigation and found that a merge in trezor-common, commit: 6c540db, moved values from 'bitcore' to 'blockbook' for some coins and these changes lead to breakdown of tests. The tests for our changes are completed successfully (we had to skip the other coins failing tests).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,252,2018-06-28T09:10:05Z,2018-07-02T12:16:27Z,2018-07-17T13:47:29Z,MERGED,True,19,5,4,https://github.com/idimon4uk,Add supporting Zencash,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/252,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/252#issuecomment-400972281,"Hi, we have added support for ZenCash to trezor-core but we found that some of the existing unit tests are failing.
We made some investigation and found that a merge in trezor-common, commit: 6c540db, moved values from 'bitcore' to 'blockbook' for some coins and these changes lead to breakdown of tests. The tests for our changes are completed successfully (we had to skip the other coins failing tests).","Please fix the following failure: https://travis-ci.org/trezor/trezor-core/jobs/397706350#L1238
Also run make style to see which style changes you need to apply to the Python code.
Otherwise the changes look good!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,252,2018-06-28T09:10:05Z,2018-07-02T12:16:27Z,2018-07-17T13:47:29Z,MERGED,True,19,5,4,https://github.com/idimon4uk,Add supporting Zencash,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/252,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/252#issuecomment-401014717,"Hi, we have added support for ZenCash to trezor-core but we found that some of the existing unit tests are failing.
We made some investigation and found that a merge in trezor-common, commit: 6c540db, moved values from 'bitcore' to 'blockbook' for some coins and these changes lead to breakdown of tests. The tests for our changes are completed successfully (we had to skip the other coins failing tests).","Please rebase the changes on top of the new master (changing your branch and force-pushing is OK, so this PR will get updated).
I renamed the field coin.replay_protection_bip115 to coin.bip115 so apply the change as well.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,252,2018-06-28T09:10:05Z,2018-07-02T12:16:27Z,2018-07-17T13:47:29Z,MERGED,True,19,5,4,https://github.com/idimon4uk,Add supporting Zencash,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/252,https://github.com/idimon4uk,4,https://github.com/trezor/trezor-core/pull/252#issuecomment-401397558,"Hi, we have added support for ZenCash to trezor-core but we found that some of the existing unit tests are failing.
We made some investigation and found that a merge in trezor-common, commit: 6c540db, moved values from 'bitcore' to 'blockbook' for some coins and these changes lead to breakdown of tests. The tests for our changes are completed successfully (we had to skip the other coins failing tests).","Hello Pavol,
We have removed the related issues and made code changes according to your comments.
Could you please review the updated pull request?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,252,2018-06-28T09:10:05Z,2018-07-02T12:16:27Z,2018-07-17T13:47:29Z,MERGED,True,19,5,4,https://github.com/idimon4uk,Add supporting Zencash,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/252,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/252#issuecomment-401785070,"Hi, we have added support for ZenCash to trezor-core but we found that some of the existing unit tests are failing.
We made some investigation and found that a merge in trezor-common, commit: 6c540db, moved values from 'bitcore' to 'blockbook' for some coins and these changes lead to breakdown of tests. The tests for our changes are completed successfully (we had to skip the other coins failing tests).",Thank you!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,252,2018-06-28T09:10:05Z,2018-07-02T12:16:27Z,2018-07-17T13:47:29Z,MERGED,True,19,5,4,https://github.com/idimon4uk,Add supporting Zencash,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/252,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/252#issuecomment-402515801,"Hi, we have added support for ZenCash to trezor-core but we found that some of the existing unit tests are failing.
We made some investigation and found that a merge in trezor-common, commit: 6c540db, moved values from 'bitcore' to 'blockbook' for some coins and these changes lead to breakdown of tests. The tests for our changes are completed successfully (we had to skip the other coins failing tests).",I changed block_height in bip115 to uint32 and corrected the processing of block_height param in script_replay_protection_bip115 - commit 622eb00,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,252,2018-06-28T09:10:05Z,2018-07-02T12:16:27Z,2018-07-17T13:47:29Z,MERGED,True,19,5,4,https://github.com/idimon4uk,Add supporting Zencash,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/252,https://github.com/idimon4uk,7,https://github.com/trezor/trezor-core/pull/252#issuecomment-402530687,"Hi, we have added support for ZenCash to trezor-core but we found that some of the existing unit tests are failing.
We made some investigation and found that a merge in trezor-common, commit: 6c540db, moved values from 'bitcore' to 'blockbook' for some coins and these changes lead to breakdown of tests. The tests for our changes are completed successfully (we had to skip the other coins failing tests).","Yes, Pavol, it absolutely makes sense. Thank you",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,255,2018-06-30T13:26:19Z,2018-07-02T11:42:32Z,2018-07-02T11:47:06Z,MERGED,True,17,0,1,https://github.com/wilsonmeier,Add BTG testnet config,1,[],https://github.com/trezor/trezor-core/pull/255,https://github.com/wilsonmeier,1,https://github.com/trezor/trezor-core/pull/255,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,255,2018-06-30T13:26:19Z,2018-07-02T11:42:32Z,2018-07-02T11:47:06Z,MERGED,True,17,0,1,https://github.com/wilsonmeier,Add BTG testnet config,1,[],https://github.com/trezor/trezor-core/pull/255,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/255#issuecomment-401541878,,"Address types collide with BTC values, please change them .",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,255,2018-06-30T13:26:19Z,2018-07-02T11:42:32Z,2018-07-02T11:47:06Z,MERGED,True,17,0,1,https://github.com/wilsonmeier,Add BTG testnet config,1,[],https://github.com/trezor/trezor-core/pull/255,https://github.com/h4x3rotab,3,https://github.com/trezor/trezor-core/pull/255#issuecomment-401550621,,We originally keep the testnet address value by intention because then we won't need to change a lot of testing stuff. It usually doesn't cause problem as it's just testnet. For bech32 address we have tbtg.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,255,2018-06-30T13:26:19Z,2018-07-02T11:42:32Z,2018-07-02T11:47:06Z,MERGED,True,17,0,1,https://github.com/wilsonmeier,Add BTG testnet config,1,[],https://github.com/trezor/trezor-core/pull/255,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/255#issuecomment-401778342,,"Please send a pull request to https://github.com/trezor/trezor-common/tree/master/defs/coins
That's how you add new coins to TREZOR.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,256,2018-07-01T18:21:20Z,2018-07-01T18:35:23Z,2018-07-01T18:35:23Z,MERGED,True,9,2,1,https://github.com/yura-pakhuchiy,Docker: support local build and build from other gh repos,1,[],https://github.com/trezor/trezor-core/pull/256,https://github.com/yura-pakhuchiy,1,https://github.com/trezor/trezor-core/pull/256,Similar to recent trezor-mcu changes,Similar to recent trezor-mcu changes,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,257,2018-07-01T21:25:46Z,2018-07-09T19:30:12Z,2018-07-09T19:30:23Z,MERGED,True,940,63,23,https://github.com/yura-pakhuchiy,Add Groestlcoin support,9,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/257,https://github.com/yura-pakhuchiy,1,https://github.com/trezor/trezor-core/pull/257,Tests are not yet updated. Please review are these changes acceptable.,Tests are not yet updated. Please review are these changes acceptable.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,257,2018-07-01T21:25:46Z,2018-07-09T19:30:12Z,2018-07-09T19:30:23Z,MERGED,True,940,63,23,https://github.com/yura-pakhuchiy,Add Groestlcoin support,9,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/257,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/257#issuecomment-401638396,Tests are not yet updated. Please review are these changes acceptable.,"Some tests are failing in Travis, see here:
https://travis-ci.org/trezor/trezor-core/jobs/398907671
Most probably you just forgot to add API changes to the tests.

Also please add Groestl512 tests similar to
https://github.com/trezor/trezor-core/blob/master/tests/test_trezor.crypto.hashlib.sha512.py",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,257,2018-07-01T21:25:46Z,2018-07-09T19:30:12Z,2018-07-09T19:30:23Z,MERGED,True,940,63,23,https://github.com/yura-pakhuchiy,Add Groestlcoin support,9,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/257,https://github.com/yura-pakhuchiy,3,https://github.com/trezor/trezor-core/pull/257#issuecomment-401738611,Tests are not yet updated. Please review are these changes acceptable.,@prusnak Thank you! I've fixed existing tests and  added some test vectors from groestl reference implementation: www.groestl.info/Groestl.zip,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,257,2018-07-01T21:25:46Z,2018-07-09T19:30:12Z,2018-07-09T19:30:23Z,MERGED,True,940,63,23,https://github.com/yura-pakhuchiy,Add Groestlcoin support,9,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/257,https://github.com/yura-pakhuchiy,4,https://github.com/trezor/trezor-core/pull/257#issuecomment-403284726,Tests are not yet updated. Please review are these changes acceptable.,I've added tests for Groestlcoin addresses and transaction signing to ensure that changes to other coins will not break GRS accidentally.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,257,2018-07-01T21:25:46Z,2018-07-09T19:30:12Z,2018-07-09T19:30:23Z,MERGED,True,940,63,23,https://github.com/yura-pakhuchiy,Add Groestlcoin support,9,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/257,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/257#issuecomment-403593886,Tests are not yet updated. Please review are these changes acceptable.,Thanks! Looks great!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,258,2018-07-02T13:29:15Z,2018-07-03T14:49:53Z,2018-07-15T10:46:12Z,MERGED,True,311,305,30,https://github.com/jpochyla,Mutable Text API,5,[],https://github.com/trezor/trezor-core/pull/258,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/258,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,261,2018-07-02T16:49:46Z,2018-07-02T18:19:18Z,2018-07-02T18:19:28Z,MERGED,True,334,460,157,https://github.com/matejcik,use pb2py from trezor-common,2,[],https://github.com/trezor/trezor-core/pull/261,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/261,"plus:

WAY simpler build_protobuf
common pb2py for our repos (also reusable for other kinds of protobufs)

changes in messages are just churn:

fmt: off
adding trailing commas on the argument list (this didn't work originally with **kwargs and I mistakenly kept it even when we threw kwargs away)
# type: ignore on List = None
different ""default="" comments because we get them as strings now","plus:

WAY simpler build_protobuf
common pb2py for our repos (also reusable for other kinds of protobufs)

changes in messages are just churn:

fmt: off
adding trailing commas on the argument list (this didn't work originally with **kwargs and I mistakenly kept it even when we threw kwargs away)
# type: ignore on List = None
different ""default="" comments because we get them as strings now",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,261,2018-07-02T16:49:46Z,2018-07-02T18:19:18Z,2018-07-02T18:19:28Z,MERGED,True,334,460,157,https://github.com/matejcik,use pb2py from trezor-common,2,[],https://github.com/trezor/trezor-core/pull/261,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/261#issuecomment-401890877,"plus:

WAY simpler build_protobuf
common pb2py for our repos (also reusable for other kinds of protobufs)

changes in messages are just churn:

fmt: off
adding trailing commas on the argument list (this didn't work originally with **kwargs and I mistakenly kept it even when we threw kwargs away)
# type: ignore on List = None
different ""default="" comments because we get them as strings now",Great!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,263,2018-07-03T15:41:11Z,2018-07-10T11:19:28Z,2018-07-10T11:46:42Z,MERGED,True,6783,2588,127,https://github.com/jpochyla,Automatic code style enforcement,12,[],https://github.com/trezor/trezor-core/pull/263,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/263,Uses black for source code formatting and isort for sorting imports. make style was modified to check for both.,Uses black for source code formatting and isort for sorting imports. make style was modified to check for both.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,263,2018-07-03T15:41:11Z,2018-07-10T11:19:28Z,2018-07-10T11:46:42Z,MERGED,True,6783,2588,127,https://github.com/jpochyla,Automatic code style enforcement,12,[],https://github.com/trezor/trezor-core/pull/263,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/263#issuecomment-402205867,Uses black for source code formatting and isort for sorting imports. make style was modified to check for both.,"utACK, nice!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,264,2018-07-04T19:22:53Z,2019-04-17T14:55:55Z,2019-04-17T14:55:55Z,CLOSED,False,2,4,2,https://github.com/mcudev,openocd: separate stlink configs deprecated - now combined,1,"['deferred', 'enhancement']",https://github.com/trezor/trezor-core/pull/264,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/264,"I noticed while running the latest commit of openocd (4999c9d98013eeb9746082f6b018e4b763ae3d37) the line:
WARNING: interface/stlink-v2-1.cfg is deprecated, please switch to interface/stlink.cfg
That file supposedly handles STMicroelectronics ST-LINK/V1, ST-LINK/V2, ST-LINK/V2-1 now.
The commit message for that file says: Extend HLA interface to allow multiple VID/PID pairs and use it to autodetect the connected stlink version.
It seems to work with my dev kit (0483:374b STMicroelectronics ST-LINK/V2.1) and demo board (0483:3748 STMicroelectronics ST-LINK/V2) for erasing flash, re-flashing, and debugging - basically everything.
If it works for the openocd version that other developers are using please merge this. Thanks!","I noticed while running the latest commit of openocd (4999c9d98013eeb9746082f6b018e4b763ae3d37) the line:
WARNING: interface/stlink-v2-1.cfg is deprecated, please switch to interface/stlink.cfg
That file supposedly handles STMicroelectronics ST-LINK/V1, ST-LINK/V2, ST-LINK/V2-1 now.
The commit message for that file says: Extend HLA interface to allow multiple VID/PID pairs and use it to autodetect the connected stlink version.
It seems to work with my dev kit (0483:374b STMicroelectronics ST-LINK/V2.1) and demo board (0483:3748 STMicroelectronics ST-LINK/V2) for erasing flash, re-flashing, and debugging - basically everything.
If it works for the openocd version that other developers are using please merge this. Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,264,2018-07-04T19:22:53Z,2019-04-17T14:55:55Z,2019-04-17T14:55:55Z,CLOSED,False,2,4,2,https://github.com/mcudev,openocd: separate stlink configs deprecated - now combined,1,"['deferred', 'enhancement']",https://github.com/trezor/trezor-core/pull/264,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/264#issuecomment-402691780,"I noticed while running the latest commit of openocd (4999c9d98013eeb9746082f6b018e4b763ae3d37) the line:
WARNING: interface/stlink-v2-1.cfg is deprecated, please switch to interface/stlink.cfg
That file supposedly handles STMicroelectronics ST-LINK/V1, ST-LINK/V2, ST-LINK/V2-1 now.
The commit message for that file says: Extend HLA interface to allow multiple VID/PID pairs and use it to autodetect the connected stlink version.
It seems to work with my dev kit (0483:374b STMicroelectronics ST-LINK/V2.1) and demo board (0483:3748 STMicroelectronics ST-LINK/V2) for erasing flash, re-flashing, and debugging - basically everything.
If it works for the openocd version that other developers are using please merge this. Thanks!","My distro ships latest stable openocd (0.10.0). As can be seen from this tag: https://github.com/ntfreak/openocd/tree/v0.10.0/tcl/interface - this tagged version does not have interface/stlink.cfg as opposed to master.
It makes sense to merge this change once there is a new openocd stable release.
Let's keep it here for the future. Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,264,2018-07-04T19:22:53Z,2019-04-17T14:55:55Z,2019-04-17T14:55:55Z,CLOSED,False,2,4,2,https://github.com/mcudev,openocd: separate stlink configs deprecated - now combined,1,"['deferred', 'enhancement']",https://github.com/trezor/trezor-core/pull/264,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/264#issuecomment-408009706,"I noticed while running the latest commit of openocd (4999c9d98013eeb9746082f6b018e4b763ae3d37) the line:
WARNING: interface/stlink-v2-1.cfg is deprecated, please switch to interface/stlink.cfg
That file supposedly handles STMicroelectronics ST-LINK/V1, ST-LINK/V2, ST-LINK/V2-1 now.
The commit message for that file says: Extend HLA interface to allow multiple VID/PID pairs and use it to autodetect the connected stlink version.
It seems to work with my dev kit (0483:374b STMicroelectronics ST-LINK/V2.1) and demo board (0483:3748 STMicroelectronics ST-LINK/V2) for erasing flash, re-flashing, and debugging - basically everything.
If it works for the openocd version that other developers are using please merge this. Thanks!","tangentially related to this, i added a faq, pinout, and photos for how to connect the debugger under reset to https://mcudev.github.io/trezor-model-t-dev-kit/index.html (search for ""under reset"" in that page).
i was only able to get ""connect under reset"" working with the ST-LINK/V2-B that was on my dev board. it might be because the cheapo separate ST-LINK/V2 usb debug adapter is not fully featured. but if this does not work with your V2 debugger, it might be a reason for you to upgrade debug adapters. with the dev kit used like this, you also get an external reset button.
or, this might not be too interesting :) connecting under reset is mainly useful in certain situations.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,264,2018-07-04T19:22:53Z,2019-04-17T14:55:55Z,2019-04-17T14:55:55Z,CLOSED,False,2,4,2,https://github.com/mcudev,openocd: separate stlink configs deprecated - now combined,1,"['deferred', 'enhancement']",https://github.com/trezor/trezor-core/pull/264,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/264#issuecomment-408049554,"I noticed while running the latest commit of openocd (4999c9d98013eeb9746082f6b018e4b763ae3d37) the line:
WARNING: interface/stlink-v2-1.cfg is deprecated, please switch to interface/stlink.cfg
That file supposedly handles STMicroelectronics ST-LINK/V1, ST-LINK/V2, ST-LINK/V2-1 now.
The commit message for that file says: Extend HLA interface to allow multiple VID/PID pairs and use it to autodetect the connected stlink version.
It seems to work with my dev kit (0483:374b STMicroelectronics ST-LINK/V2.1) and demo board (0483:3748 STMicroelectronics ST-LINK/V2) for erasing flash, re-flashing, and debugging - basically everything.
If it works for the openocd version that other developers are using please merge this. Thanks!","connecting under reset is mainly useful in certain situations.

During my development I had several ""bricked"" boards which I was able to recover using ""connect under reset"", so this is definitively interesting.
I am aware of the fact that cheap ST-LINK clones don't provide this method and I had to use my original ST-LINK/V2.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,264,2018-07-04T19:22:53Z,2019-04-17T14:55:55Z,2019-04-17T14:55:55Z,CLOSED,False,2,4,2,https://github.com/mcudev,openocd: separate stlink configs deprecated - now combined,1,"['deferred', 'enhancement']",https://github.com/trezor/trezor-core/pull/264,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/264#issuecomment-484125694,"I noticed while running the latest commit of openocd (4999c9d98013eeb9746082f6b018e4b763ae3d37) the line:
WARNING: interface/stlink-v2-1.cfg is deprecated, please switch to interface/stlink.cfg
That file supposedly handles STMicroelectronics ST-LINK/V1, ST-LINK/V2, ST-LINK/V2-1 now.
The commit message for that file says: Extend HLA interface to allow multiple VID/PID pairs and use it to autodetect the connected stlink version.
It seems to work with my dev kit (0483:374b STMicroelectronics ST-LINK/V2.1) and demo board (0483:3748 STMicroelectronics ST-LINK/V2) for erasing flash, re-flashing, and debugging - basically everything.
If it works for the openocd version that other developers are using please merge this. Thanks!",Superseded by trezor/trezor-firmware#45,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,266,2018-07-05T15:09:10Z,2018-07-05T20:42:47Z,2018-07-05T22:32:07Z,MERGED,True,2,0,1,https://github.com/mcudev,firmware: update flash_firmware target to use two-part flashing fix,1,[],https://github.com/trezor/trezor-core/pull/266,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/266,binctl changes firmware.bin after it's put together from p1 and p2. so just need to copy back out p1 from firmware.bin.,binctl changes firmware.bin after it's put together from p1 and p2. so just need to copy back out p1 from firmware.bin.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,266,2018-07-05T15:09:10Z,2018-07-05T20:42:47Z,2018-07-05T22:32:07Z,MERGED,True,2,0,1,https://github.com/mcudev,firmware: update flash_firmware target to use two-part flashing fix,1,[],https://github.com/trezor/trezor-core/pull/266,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/266#issuecomment-402846730,binctl changes firmware.bin after it's put together from p1 and p2. so just need to copy back out p1 from firmware.bin.,Right! Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,267,2018-07-06T16:53:51Z,2018-07-09T18:59:36Z,2018-07-09T21:12:09Z,MERGED,True,5,5,5,https://github.com/mcudev,build: make it easier to build binaries optimized for debugging,1,[],https://github.com/trezor/trezor-core/pull/267,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/267,"this is just a little development aid so that i don't have to keep patching the scons files to build binaries that are not optimized for size. the size optimized binaries are a pain to debug because the optimizations cause a lot of jumping around in the source.
example dev kit usage with this patch applied:
pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
simply leave off the OPTIMIZE variable to get default current behavior.","this is just a little development aid so that i don't have to keep patching the scons files to build binaries that are not optimized for size. the size optimized binaries are a pain to debug because the optimizations cause a lot of jumping around in the source.
example dev kit usage with this patch applied:
pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
simply leave off the OPTIMIZE variable to get default current behavior.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,267,2018-07-06T16:53:51Z,2018-07-09T18:59:36Z,2018-07-09T21:12:09Z,MERGED,True,5,5,5,https://github.com/mcudev,build: make it easier to build binaries optimized for debugging,1,[],https://github.com/trezor/trezor-core/pull/267,https://github.com/matejcik,2,https://github.com/trezor/trezor-core/pull/267#issuecomment-403459822,"this is just a little development aid so that i don't have to keep patching the scons files to build binaries that are not optimized for size. the size optimized binaries are a pain to debug because the optimizations cause a lot of jumping around in the source.
example dev kit usage with this patch applied:
pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
simply leave off the OPTIMIZE variable to get default current behavior.","utACK, this doesn't seem to affect anything unless OPTIMIZE is specified",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,267,2018-07-06T16:53:51Z,2018-07-09T18:59:36Z,2018-07-09T21:12:09Z,MERGED,True,5,5,5,https://github.com/mcudev,build: make it easier to build binaries optimized for debugging,1,[],https://github.com/trezor/trezor-core/pull/267,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/267#issuecomment-403469572,"this is just a little development aid so that i don't have to keep patching the scons files to build binaries that are not optimized for size. the size optimized binaries are a pain to debug because the optimizations cause a lot of jumping around in the source.
example dev kit usage with this patch applied:
pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
simply leave off the OPTIMIZE variable to get default current behavior.",yep. i just had an idea on how to make this even simpler. i'll have it pushed up a short while.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,267,2018-07-06T16:53:51Z,2018-07-09T18:59:36Z,2018-07-09T21:12:09Z,MERGED,True,5,5,5,https://github.com/mcudev,build: make it easier to build binaries optimized for debugging,1,[],https://github.com/trezor/trezor-core/pull/267,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/267#issuecomment-403472521,"this is just a little development aid so that i don't have to keep patching the scons files to build binaries that are not optimized for size. the size optimized binaries are a pain to debug because the optimizations cause a lot of jumping around in the source.
example dev kit usage with this patch applied:
pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
simply leave off the OPTIMIZE variable to get default current behavior.","@matejcik just pushed up a simplified version that changes less but has the same usage and effects. if you like this, then we could do the same for the PRODUCTION flag too (not that it matters much besides making things a little easier to read/understand).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,267,2018-07-06T16:53:51Z,2018-07-09T18:59:36Z,2018-07-09T21:12:09Z,MERGED,True,5,5,5,https://github.com/mcudev,build: make it easier to build binaries optimized for debugging,1,[],https://github.com/trezor/trezor-core/pull/267,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/267#issuecomment-403586674,"this is just a little development aid so that i don't have to keep patching the scons files to build binaries that are not optimized for size. the size optimized binaries are a pain to debug because the optimizations cause a lot of jumping around in the source.
example dev kit usage with this patch applied:
pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
simply leave off the OPTIMIZE variable to get default current behavior.",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,272,2018-07-11T13:07:59Z,2018-07-30T15:00:02Z,2018-07-30T15:02:50Z,MERGED,True,493,9,13,https://github.com/tsusanka,Ripple support,4,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/272,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/272,"This introduces a support for Ripple. Only simple payments are supported. The only thing missing is a README, which I'll add soon.

 add README
 test on main net","This introduces a support for Ripple. Only simple payments are supported. The only thing missing is a README, which I'll add soon.

 add README
 test on main net",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,272,2018-07-11T13:07:59Z,2018-07-30T15:00:02Z,2018-07-30T15:02:50Z,MERGED,True,493,9,13,https://github.com/tsusanka,Ripple support,4,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/272,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/272#issuecomment-405528260,"This introduces a support for Ripple. Only simple payments are supported. The only thing missing is a README, which I'll add soon.

 add README
 test on main net",closes #259,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,275,2018-07-12T11:54:54Z,2018-07-12T22:13:40Z,2018-07-12T22:14:32Z,MERGED,True,6,6,4,https://github.com/mcudev,build: update to use latest arm none eabi toolchain gcc-arm-none-eabi-7-2018-q2-update,1,[],https://github.com/trezor/trezor-core/pull/275,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/275,"There is an updated gcc-arm-none-eabi-7-2018-q2-update toolchain available at https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads. They fixed the GDB TUI so it works again in this release (aids working in the debugger).
Things seem to work for building and debugging without any grief. I didn't see any extra built time warning messages either. I did NOT diff the binaries before and after (might later). Here's what I have verified works:
tested dev kit:

pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
make openocd STLINK_VER=v2-1
make gdb_boardloader

tested prototype hardware:

pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
make openocd
make gdb_boardloader","There is an updated gcc-arm-none-eabi-7-2018-q2-update toolchain available at https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads. They fixed the GDB TUI so it works again in this release (aids working in the debugger).
Things seem to work for building and debugging without any grief. I didn't see any extra built time warning messages either. I did NOT diff the binaries before and after (might later). Here's what I have verified works:
tested dev kit:

pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
make openocd STLINK_VER=v2-1
make gdb_boardloader

tested prototype hardware:

pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
make openocd
make gdb_boardloader",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,275,2018-07-12T11:54:54Z,2018-07-12T22:13:40Z,2018-07-12T22:14:32Z,MERGED,True,6,6,4,https://github.com/mcudev,build: update to use latest arm none eabi toolchain gcc-arm-none-eabi-7-2018-q2-update,1,[],https://github.com/trezor/trezor-core/pull/275,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/275#issuecomment-404560577,"There is an updated gcc-arm-none-eabi-7-2018-q2-update toolchain available at https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads. They fixed the GDB TUI so it works again in this release (aids working in the debugger).
Things seem to work for building and debugging without any grief. I didn't see any extra built time warning messages either. I did NOT diff the binaries before and after (might later). Here's what I have verified works:
tested dev kit:

pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
make openocd STLINK_VER=v2-1
make gdb_boardloader

tested prototype hardware:

pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
make openocd
make gdb_boardloader","I compared the bin output of the toolchains for the command: pipenv run make clean vendor build_boardloader build_bootloader build_firmware
build/boardloader/boardloader.bin, build/bootloader/bootloader.bin, and build/firmware/firmware.bin all had the exact same file size.
the boardloader bin files had matching sha256sum's (which is nice because the boardloader is the most important to not screw up).
the bootloader and firmware bin files were different between the versions of the toolchain. i eyeball compared xxd output and it's probably mostly address differences. i don't think it's anything to worry about.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,275,2018-07-12T11:54:54Z,2018-07-12T22:13:40Z,2018-07-12T22:14:32Z,MERGED,True,6,6,4,https://github.com/mcudev,build: update to use latest arm none eabi toolchain gcc-arm-none-eabi-7-2018-q2-update,1,[],https://github.com/trezor/trezor-core/pull/275,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/275#issuecomment-404667380,"There is an updated gcc-arm-none-eabi-7-2018-q2-update toolchain available at https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads. They fixed the GDB TUI so it works again in this release (aids working in the debugger).
Things seem to work for building and debugging without any grief. I didn't see any extra built time warning messages either. I did NOT diff the binaries before and after (might later). Here's what I have verified works:
tested dev kit:

pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset DISPLAY_ILI9341V=1 STLINK_VER=v2-1 OPTIMIZE=-Og
make openocd STLINK_VER=v2-1
make gdb_boardloader

tested prototype hardware:

pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
make openocd
make gdb_boardloader",Thank you for the extensive testing!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,278,2018-07-14T21:01:25Z,2018-07-16T09:11:10Z,2018-07-16T11:13:21Z,MERGED,True,60,14,11,https://github.com/mcudev,"docs: hardware: add photos, add more pin info, other related updates",1,[],https://github.com/trezor/trezor-core/pull/278,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/278,"here are some hardware doc updates that add photos and info for the new power pins and some other old, but unused things like the usb sbu pins.
i also verified that the sdram chip and the touch panel don't have to be removed from the STM32F429I-DISC1 dev board for things to work (although people may prefer to still remove those things and that is fine too).
i wired a couple of new boards from these instructions. they work. so we can probably close #246","here are some hardware doc updates that add photos and info for the new power pins and some other old, but unused things like the usb sbu pins.
i also verified that the sdram chip and the touch panel don't have to be removed from the STM32F429I-DISC1 dev board for things to work (although people may prefer to still remove those things and that is fine too).
i wired a couple of new boards from these instructions. they work. so we can probably close #246",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,278,2018-07-14T21:01:25Z,2018-07-16T09:11:10Z,2018-07-16T11:13:21Z,MERGED,True,60,14,11,https://github.com/mcudev,"docs: hardware: add photos, add more pin info, other related updates",1,[],https://github.com/trezor/trezor-core/pull/278,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/278#issuecomment-405188335,"here are some hardware doc updates that add photos and info for the new power pins and some other old, but unused things like the usb sbu pins.
i also verified that the sdram chip and the touch panel don't have to be removed from the STM32F429I-DISC1 dev board for things to work (although people may prefer to still remove those things and that is fine too).
i wired a couple of new boards from these instructions. they work. so we can probably close #246",Sweet!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/279,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/279#issuecomment-405080951,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","This is worse than I realized. In production, if my prototype board works like the rest, it will usually fail reset_flags_check and black screen when the sd card is simply present. Basically, switching the SD MOSFET on is causing a power fault still.
Put a breakpoint at reset_flags_check with:
(gdb) b *reset_flags_check
(gdb) display /x RCC->CSR
sometimes I get PINRSTF and sometimes I get PINRSTF | BORRSTF when PC0 is set low in sdcard_power_on. For example:
1: /x RCC->CSR = 0x0
(gdb) bt
#0  sdcard_power_on () at embed/trezorhal/sdcard.c:114
#1  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#2  0x08005ec8 in main () at embed/boardloader/main.c:186
(gdb) n
halted: PC: 0x08009190
halted: PC: 0x08009192
halted: PC: 0x08009194
halted: PC: 0x08006828

Breakpoint 4, reset_flags_check () at embed/boardloader/lowlevel.c:165
1: /x RCC->CSR = 0x4000000
or sometimes
1: /x RCC->CSR = 0x6000000",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/279#issuecomment-405082716,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","From https://resources.altium.com/pcb-design-blog/how-to-design-microsd-power-circuits-without-destabilizing-on-board-voltage-supply, some things to try:

""[capacitance] values above 45uF will do""
""use an FDN340P MOSFET to control the power supply of the microSD"" which I suppose is a MOSFET that they've tested with an acceptable voltage slew rate
check into something like this? http://www.mouser.com/ds/2/149/FDG901D-94072.pdf",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/279#issuecomment-405871660,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Merged the fix, but I am aware of the outstanding issues and I'll report my further investigations.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/279#issuecomment-405918407,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I tried this with 3 boards I have on my desk and have not seen the behavior you are describing ...
My test:


checkout master (fecc6e5)


comment lines https://github.com/trezor/trezor-core/blob/master/embed/boardloader/lowlevel.c#L156 and https://github.com/trezor/trezor-core/blob/master/embed/boardloader/lowlevel.c#L163 (so we check RCC->CSR in non-PRODUCTION build)


make build and make combine and make flash_combine


Then I run the device without SD card (boots to firmare) and with SD card (boardloader shows the countdown).
Am I missing something? Maybe this depends on SD card used?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/279#issuecomment-405931489,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I can still reproduce with fecc6e53a0ca45a852d9964c6ba1a3a0a35ae4e9.
It could potentially be the microSD card I'm using. Maybe it has less favorable electrical characteristics. I'll try another in a bit. The one I am using here is a Kingston 32GB microSD HC model SDCA3/32GB (https://www.amazon.com/Kingston-Digital-32GB-microSDHC-SDCA3/dp/B00RVNGGT8).

I reset my branch to be exactly fecc6e5
I commented out the two lines you listed
I built and flashed it to my board (pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og)
I unplugged the debugger and the main USB cable
I made sure that the microSD card was removed and plugged in main USB -- things work as normal
I unplugged main USB, inserted microSD, plugged main USB and screen stays black

I did this a few times and it was reproducible.
Try this:

reset your branch to be exactly fecc6e5
build and flash
insert microSD card
make openocd
in a new window: make gdb_boardloader

(gdb) b *reset_flags_check
(gdb) c
(gdb) display /x RCC->CSR
(gdb) c

If the breakpoint hits a second time, you know that you went through another reset and you'll get the RCC->CSR output to see the circumstances of the reset.
Here's what I see on my run that shows a brownout reset having happened when you see at the end RCC->CSR = 0x6000000:
(gdb) b *reset_flags_check
Breakpoint 1 at 0x8005bc0: file embed/boardloader/lowlevel.c, line 165.
(gdb) c
Continuing.
Note: automatically using hardware breakpoints for read-only addresses.

Breakpoint 1, reset_flags_check () at embed/boardloader/lowlevel.c:165
165	    RCC->CSR |= RCC_CSR_RMVF; // clear the reset flags
(gdb) display /x RCC->CSR
1: /x RCC->CSR = 0x14000000
(gdb) c
Continuing.
halted: PC: 0x08005bc2

Breakpoint 1, reset_flags_check () at embed/boardloader/lowlevel.c:165
165	    RCC->CSR |= RCC_CSR_RMVF; // clear the reset flags
1: /x RCC->CSR = 0x6000000",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,7,https://github.com/trezor/trezor-core/pull/279#issuecomment-405934155,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","NOT reproducible with Samsung 182 EVO+ Micro SDXC MB-MC128D (https://www.amazon.com/Samsung-128GB-UHS-i-Adapter-MB-MC128D/dp/B00WR0HIR4). So, I guess the Kingston card might draw more current? I'll try some more cards...",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,8,https://github.com/trezor/trezor-core/pull/279#issuecomment-405939418,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Could NOT reproduce with a SanDisk 32GB microSD HC UHS-I U1 Class 10.
Could NOT reproduce with a SanDisk Extreme 32GB microSD XC UHS-I U3 sdsqxne-032g-gn6ma (https://www.amazon.com/SanDisk-Extreme-microSDXC-Adapter-SDSQXNE-032G-GN6MA/dp/B013CP5HCK).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,9,https://github.com/trezor/trezor-core/pull/279#issuecomment-405990198,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","BTW, thanks for merging and testing the partial fix!
The Kingston card seems to work for me in other places that I use it, so I can't just write it off as being a bard card. Maybe you want to get one and try it? If it fails also, then you have a good card for testing closer to the limits (again, assuming that model operates within the microSD spec limits).
In summary, it appears that the microSD subsystem still causes power faults for some subset of cards. The two potential ways that I can think of to fix that are 1) to add more capacitance to the power rail near the microSD and 2) to reduce the slew rate.
There are still some cases in the code where the microSD power switch is left on even after the card has been removed. There is no circuit to automatically turn it off and we use polling instead of an interrupt to handle the card detect + power on/off. I'm kind of not very excited to try to handle it with an interrupt due to debouncing and trying to keep the boardloader as simple as possible to follow.
I'm not sure how far along production with this hardware is, so let me know what you're thinking. If hardware changes are still possible, then I'll also add that maybe a switch for the display power would be neat too. Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/279#issuecomment-406028952,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Was able to find a card that is also behaving oddly. Boardloader with bootloader on SD card will start, show countdown - number 10, LDO Voltage Regulator goes really hot and afterwards the screen goes black (I suspect BOR reset).
The card is Kingston Micro SDHC SDC4/16GB. I have two of them and behave exactly the same.
OTOH Kingston SDC10G2/8GB works fine. Also I have tried numerous 1GB SD cards (not SDHC) by A-Data and they worked also fine.
I will give the problematic SD cards to our HW development lab, so they can investigate the issue.

I'm kind of not very excited to try to handle it with an interrupt due to debouncing and trying to keep the boardloader as simple as possible to follow.

Same here, let's not complicate things more than needed.

If hardware changes are still possible, then I'll also add that maybe a switch for the display power

I would avoid the changes for this production run. But we'll keep revisiting the design, so next production run might include this change too.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,11,https://github.com/trezor/trezor-core/pull/279#issuecomment-406038309,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Yep, agree with all that, thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,12,https://github.com/trezor/trezor-core/pull/279#issuecomment-406089195,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I refactored some stuff in sdcard/touch so these two are now more similar - see https://github.com/trezor/trezor-core/tree/touch_on_off. It also allows us to do touch_init, so we can properly set CTP pins in boardloader without turning the CTP on. This is now done using touch_power_on/off.
What do you think?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,13,https://github.com/trezor/trezor-core/pull/279#issuecomment-406097592,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Hm, it seems that the touch is working when I use init, then power_on, but when I call power_off and power_on again, it won't work again :-(",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,14,https://github.com/trezor/trezor-core/pull/279#issuecomment-406145624,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","i2c_handle is a .bss section variable that gets initialized to zeros already, so I would remove the reference to i2c_handle by touch_init to clarify that it's only manipulating GPIOs.
My thoughts on calling touch_init from within the boardloader:

it's more flexible to have CTPM code in the bootloader and later stage code where it's upgradeable and not write protected.
since the GPIO's are floating inputs coming out of reset, the pull up should ensure that the CTPM is powered off during the boardloader already. so it'll be off with or without this in the boardloader.
we currently don't use touch input or need it in the boardloader. this code change doesn't power on the ctpm, but i'd rather not open up the possibility of interacting with the ctpm from within the boardloader (with a future code change) by even just init'ing the GPIO's right now. i'm still wary of the external touch panel and display driver chips. their docs are not great, and i'm suspicious of the ctpm driver chip's potential to be used by someone craftier than myself. i think of it like we have to treat the FT6236 as any other untrustworthy external device. we can be careful with it in later stages, but i'd rather not deal with it in the boardloader.

i suppose the benefit is that we only have to call touch_init once in the boardloader and then never again.
but if we change the pins used in the future (e.g.- start using PC4), then the initialization gets spread out into later stage code anyways because of the write protection.
additional tangential thoughts:

i feel the same way about the SDIO peripheral for the microSD, but i realize that it's a necessary evil to avoid a device being bricked when the bootloader ever gets corrupted. at least the sd card is removable and thus the bulk of the SDIO code does not run most of the time. plus it's anon-chip peripheral so i feel a little better about it.
the primary purpose of init'ing the display in the boardloader is to clear the GRAM. of course we need the display available to show any boardloader error messages too. but the primary concern for me was wiping the display memory. i think of the boardloader as our secure little area to take care of things like that (modulo invasive/sophisticated physical attack). this is part of the reason why i keep asking about a display power switch and a default off display :) the tertiary concern is avoiding screen flicker and giving a snappy and user experience.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,15,https://github.com/trezor/trezor-core/pull/279#issuecomment-406219220,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Hm, it got me thinking and did some changes (in the new https://github.com/trezor/trezor-core/tree/hw branch, removed the older branch touch_on_off):

removed the touch stuff from the boardloader again
removed {sd_handle,i2c_handle}.Instance = NULL; from {sdcard,touch}_init, because of the BSS observation
move turning on SD card circuitry in sdcard_power_on after the sdcard_is_present check (we don't need to turn on the whole sd card circuit just to check the sd_present pin)

I still observe the problem the CTP is not working after the following sequence: init, on, (works), off, on (does not work). Investigating.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,16,https://github.com/trezor/trezor-core/pull/279#issuecomment-406232852,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I am also thinking about moving the call to {sdcard,touch}_default_pin_state to the beginning of {sdcard,touch}_init function and dropping subsequent calls to HAL_GPIO_WritePin in init.
edit: done in 2eeb3c3 where I also fixed the problem with not being able to turn on CTP after turning it off: 2eeb3c3#diff-f514afe97e3aaa0cf4fa113b1fb1fbf8R46",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,17,https://github.com/trezor/trezor-core/pull/279#issuecomment-406237957,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","ack
ack
ack

Will need to add a touch_power_on(); in  embed/firmware/main.c just after touch_init();
Regarding, touch_default_pin_state I don't think you need to drive the alternate function open drain pins PB6 & PB7. With that in mind, I think moving touch_default_pin_state to the beginning of touch_init is ok, then you can remove the inline HAL_GPIO_WritePin later in the function.
Similar feedback for sdcard_default_pin_state. I don't think we need to HAL_GPIO_WritePin for PC8-12 and PD2 since they are alternate function inputs.

I still observe the problem the CTP is not working after the following sequence...

I have not looked into this yet, but I can.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,18,https://github.com/trezor/trezor-core/pull/279#issuecomment-406241725,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Will need to add a touch_power_on(); in embed/firmware/main.c just after touch_init();

Ack

I have not looked into this yet, but I can.

Already fixed

I don't think we need to HAL_GPIO_WritePin for PC8-12 and PD2 since they are alternate function inputs.

I was told that SD circuit gets still voltage from DATA pins after the SD_ON PIN is turned off. Maybe we should set these pins to OUTPUT in the init?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,19,https://github.com/trezor/trezor-core/pull/279#issuecomment-406243994,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I was told that SD circuit gets still voltage from DATA pins after the SD_ON PIN is turned off. Maybe we should set these pins to OUTPUT in the init?

Isn't that because of of the GPIO_PULLUP? Maybe we could use GPIO_NOPULL. I'd double check some usage examples and the manual for SDIO before changing that, but that seems plausible as an explanation for why.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,20,https://github.com/trezor/trezor-core/pull/279#issuecomment-406244204,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",I tried NOPULL and PULLDOWN and SDIO works only with PULLUP,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,21,https://github.com/trezor/trezor-core/pull/279#issuecomment-406244835,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",Do the HAL_GPIO_WritePin calls for those pins in sdcard_default_pin_state even have an effect or are they ignored because of being in alternate function mode?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,22,https://github.com/trezor/trezor-core/pull/279#issuecomment-406248509,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I set pins to OUTPUT default_pin_state and set them to required values in new active_pin_state => ced85b0
This solved my issue with the Kingston 16GB card.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,23,https://github.com/trezor/trezor-core/pull/279#issuecomment-406260141,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Interesting that that worked for you. I'll review this closer in a little bit.
I just put ced85b0 onto my board and unplugged my board entirely. Insert microSD card and plug in the main USB cable (not the debug adapter). I get a black screen until I eject the microSD which I am able to reproduce reliably causes:
FATAL ERROR:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: ced85b01

I then verified in the debugger that I'm getting the brownout reset still with the reset_flags_check breakpoint and RCC->CSR display.
I set a break point on sdcard_power_on and when I step into sdcard_active_pin_state, attempting to run HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,  GPIO_PIN_RESET); resets my board.
This is all with my Kingston 32GB microSD HC model SDCA3/32GB.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,24,https://github.com/trezor/trezor-core/pull/279#issuecomment-406262313,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",The last thing on my mind is the cable. Maybe you are using a very long cable - I tried both 1 m A-DATA USB A-C cable and the same USB A-C cable we ship in the box (30 cm?). Dunno ...,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,25,https://github.com/trezor/trezor-core/pull/279#issuecomment-406266228,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","The cable I'm using is about 26cm tip to tip. I just tried the cable that came with the production Model T (which is something like roughly 46cm) and got the same results.
I also just noticed that this latest commit has sdcard_is_present being used before it's been configured with its GPIO_PULLUP. So, it's a floating input which may cause spurious results early in the boardloader.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,26,https://github.com/trezor/trezor-core/pull/279#issuecomment-406267962,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I also just noticed that this latest commit has sdcard_is_present being used before it's been configured with its GPIO_PULLUP. So, it's a floating input which may cause spurious results early in the boardloader.

Good catch. Fixed in b0d350d",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,27,https://github.com/trezor/trezor-core/pull/279#issuecomment-406271429,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","ok, i'm going to tinker with this for a while. i'll get back to you a bit later.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,28,https://github.com/trezor/trezor-core/pull/279#issuecomment-406287255,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",Thank you!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,29,https://github.com/trezor/trezor-core/pull/279#issuecomment-406294732,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I just got report from the lab that the changes fix the issue because SD_ON is set to log 0 (circuit active) most of the time, and just before the operation it is set to log 1 (circuit inactive) for 25 ms, then returns to normal. 🤣 I guess that means I have to revisit the changes ... :-/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,30,https://github.com/trezor/trezor-core/pull/279#issuecomment-406295269,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I am seeing something strange with PC9 on my dev board. It appears that PC9 is driven high as an output (even during reset) when it's configured, and supposed to be a floating input. Thus my sd card adapter has the power light on even when 3v3 is disconnected. When your change drives PC9 low, the power light goes off. I do not understand why PC9 is doing that.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,31,https://github.com/trezor/trezor-core/pull/279#issuecomment-406295671,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",I also pushed another small fix (or rather removing the unnecesary code): ee89e42,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,32,https://github.com/trezor/trezor-core/pull/279#issuecomment-406298247,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Do you get the same benefit for your Kingston card by only init'ing PC9 in sdcard_default_pin_state? Like this:
-    GPIO_InitStructure.Pin   = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
+    GPIO_InitStructure.Pin   = GPIO_PIN_9;",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,33,https://github.com/trezor/trezor-core/pull/279#issuecomment-406302796,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Do you get the same benefit for your Kingston card by only init'ing PC9 in sdcard_default_pin_state?

No, it still halts for the problematic card.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,34,https://github.com/trezor/trezor-core/pull/279#issuecomment-406317746,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",gah! there's an external pullup on PC9 on this STM32F429I-DISC1 dev board. nevermind that.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,35,https://github.com/trezor/trezor-core/pull/279#issuecomment-406340224,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I just got report from the lab that the changes fix the issue because SD_ON is set to log 0 (circuit active) most of the time...

I feel like I'm misreading that. Do you mean that the external pullup on PC0 is not effective and so driving it high in sdcard_default_pin_state is necessary?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,36,https://github.com/trezor/trezor-core/pull/279#issuecomment-406340990,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","This is what they see (yellow line is SD_ON):

SD_ON is log 0 most of the time (SD circuit enabled). It goes to log 1 just for a while, then it goes back.
According to my intentions and hopefully code too, it should be log 1 most of the time (SD circuit disabled) and go to log 0 when interaction with SD card is needed, then go to log 1 again.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,37,https://github.com/trezor/trezor-core/pull/279#issuecomment-406342857,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","ok, so then i guess that the 25ms of being high is between the middle of  sdcard_default_pin_state and the beginning of sdcard_active_pin_state? that would seem to indicate that the external pullup is not keeping the gate to the MOSFET high, right? my assumption is that the left part of that is before the sdcard_default_pin_state where PC0 is a floating input.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,38,https://github.com/trezor/trezor-core/pull/279#issuecomment-406343966,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",Do you suggest to use PULLUP for PC0 output or changing the R2/R3 value or a combination of these?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,39,https://github.com/trezor/trezor-core/pull/279#issuecomment-406344779,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I think the resistors external to the MCU because the PC0 pin will be a floating input for some amount of time before we could set its pullup. I was assuming that the external pullup was keeping the gate high already. So, maybe it turns out that it isn't strong enough of a pullup right now?
EDIT: And by strong enough of a pullup, I mean that the resistance is too large. Strong pullup == low resistance and weak pullup == high resistance. Therefore, maybe the 470k is too high? There are tradeoffs in sensitivity.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,40,https://github.com/trezor/trezor-core/pull/279#issuecomment-406351391,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Yes, that's what I thought. Thank you!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,41,https://github.com/trezor/trezor-core/pull/279#issuecomment-406354465,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.",Looks like TOUCH_ON has a 10K resistor which is what I typically think of for external pullups. We rely on that in the same way so it would be interesting to get a scope on TOUCH_ON to make sure that it is high and the touch panel is indeed off.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,42,https://github.com/trezor/trezor-core/pull/279#issuecomment-406374549,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","For reference, I verified with page 795 of UM1725 about the HAL SD Generic Driver that we are doing as the manual says to do (https://www.st.com/content/ccc/resource/technical/document/user_manual/2f/71/ba/b8/75/54/47/cf/DM00105879.pdf/files/DM00105879.pdf/jcr:content/translations/en.DM00105879.pdf):
""Configure these SDIO pins as alternate function pull-up"".
EDIT: GPIO_NOPULL seems like it would be better to me so that it's not fighting the ground when the MOSFET is turned off (gate high). But I'll defer this thought.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,43,https://github.com/trezor/trezor-core/pull/279#issuecomment-406586053,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Hm, I was told that the circuit is correct and that the SD_ON scope above is directly from the PC0 pin and should not be influenced by attached circuitry.
I pushed another commit which I used during the investigation: 0f7a90d
We can control the default_pin_state via the #if on line 73.
#if 0 behavior:

SD_ON behaves correctly, but SD data pins (PC8-PC12 + PD2) are PULLUP even when SD card is unused providing some power to it, it also FAILS with Kingston 16GB card (lockup)

#if 1 behavior:

SD_ON behaves like in the scope above, SD data pins are not providing power to SD card, WORKS with Kingston 16GB card (as the SD circuit is powered almost all the time).

I am really puzzled about this observation.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,44,https://github.com/trezor/trezor-core/pull/279#issuecomment-406641723,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","If the circuit is working as I assumed it would, then the PC0 behaving as in the scope for the #if 1 case would not have the SD circuit being powered almost all the time. The left part of the scope before the rise would be PC0 as a floating input and then SD circuit would be off (because of the external pullup) until PC0 is driven low in the scope output.
I'll see if I can get it on a scope with my debugger and step through. It'll be difficult because everything's so small and close together and I don't have a great toolset. Do you have any docs on the location of test points on the PCB (perhaps the brd file)?
EDIT: I have found the DMG3415U-7 MOSFET controlled by PC0 and can scope it's pins. I'm pretty sure that TP15 is just south of the MOSFET as it seems to match the VDD pin 4 of the microSD socket.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,45,https://github.com/trezor/trezor-core/pull/279#issuecomment-406726759,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I'll do more digging over the weekend.
This might be nothing, or it might be something, I don't know yet.
I was poking around with my scope and saw that pin 2 on the microSD socket (CD/DAT3) had different behavior. Section 5.1.1 in http://www.mouser.com/ds/2/302/AN10911-112956.pdf describes that pin.
The HAL code does not appear to disable the card detect pull-up internal to the sd cards. Maybe that matters for some of them?
I found some links with seemingly good related info:
https://electronics.stackexchange.com/questions/39571/how-to-do-pulling-up-or-down-correctly-when-interfacing-a-microsd-card
https://electronics.stackexchange.com/questions/224200/sd-card-acmd42-command
https://www.kingston.com/datasheets/SDCIT-specsheet-8gb-32gb_en.pdf
https://embdev.net/attachment/39390/TOSHIBA_SD_Card_Specification.pdf
https://github.com/LonelyWolf/stm32/blob/master/cube-usb-msc/sdcard-sdio.c",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,46,https://github.com/trezor/trezor-core/pull/279#issuecomment-406742524,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Figured that I'd share this. With my problem card, the Kingston 32GB microSD HC model SDCA3/32GB, this is the brownout that I see on the v12 prototype board with no display module attached, running 0f7a90d, and when probing the source pin of the microSD MOSFET when I run this line: 
  
    
      trezor-core/embed/trezorhal/sdcard.c
    
    
         Line 97
      in
      0f7a90d
    
  
  
    

        
          
           HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,  GPIO_PIN_RESET);  // SD_ON/PC0 
        
    
  



Same observation, but from the JTAG 3V3 pin (verified again today):",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,47,https://github.com/trezor/trezor-core/pull/279#issuecomment-406932530,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I verified that the gate pin on the sdcard MOSFET is high until we set PC0 low.
I verified that the gate pin on the CTPM MOSFET is high until we set PB10 low.
The external pullups appear to be keeping the switches off while the pins on the MCU are still floating inputs (under reset and until we configure and use them to drive the gate pins).
That's all good. That's what I had assumed (and was hoping) was going to happen based on the schematic.
I also probed around TP15 and TP16 and the source and drain pins of the MOSFETs and all confirm those verifications.
I did this while stepping through with the debugger.
With your #if 0 case and a card that works for me, the sdcard socket 3V3 pin measures about 1V and the AF pullup pins measure about 1.4V while PC0 is high (MOSFET is off).
When I run the same measurements with my problem card, the same pins measure about 400mV lower at the same points in the code.
I also did some tinkering with the ACMD42 card detect resistor. It's not the cause of our main issue here, but we might want to disable that resistor so that we don't run into any issues because of it. This doc said a little more about DAT3.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,48,https://github.com/trezor/trezor-core/pull/279#issuecomment-407005949,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","We (hopefully) fixed the issue with our faulty card today, see 08725c1 (hw branch now merged into master and deleted).
SD DATA pins are set to OUTPUT/NOPULL/log0 when inactive and we added HAL_Delay(10); after turning on the SD card circuit via PC0. After these changes, the circuit behaves correctly (checked with an oscilloscope).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,49,https://github.com/trezor/trezor-core/pull/279#issuecomment-407058722,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","My problem card still acts the same way with these changes.
With my good card, I can cause a fatal error by ejecting it during the boardloader 10 second count down (doesn't happen every time, so probably a race like before):
FATAL ERROR:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 8cf0b93d",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/prusnak,50,https://github.com/trezor/trezor-core/pull/279#issuecomment-407070580,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","Can you try adding 2,2nF capacitor (marked yellow) between gate and drain of T1?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,279,2018-07-15T02:58:03Z,2018-07-18T09:33:07Z,2018-07-23T17:54:12Z,MERGED,True,5,7,1,https://github.com/mcudev,boardloader: partial fix for powering off sd card,1,['bootloader'],https://github.com/trezor/trezor-core/pull/279,https://github.com/mcudev,51,https://github.com/trezor/trezor-core/pull/279#issuecomment-407135143,"Referencing #183 and https://github.com/trezor/trezor-core/issues/86
I was testing with the new prototype board and found this bug.
Running build of current master: pipenv run make clean vendor build_boardloader build_bootloader build_firmware flash openocd_reset OPTIMIZE=-Og
I found this bug by starting up with the sd card inserted.
During 10 second countdown eject sd the card (or rapidly eject and re-insert -- it's a race condition).
You'll get a red screen fatal error, like:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard
rev: 95416629

Re-insert the sd card and the system resets.
I think this bug shows that the problem of in-rush current causing a power fault while inserting a micro sd card while the sd power is on is still not entirely solved.
Maybe the circuitry should only allow the MOSFET to turn on if the gate is low AND the SD card detect (debounced) is low?
To simulate the race in the debugger:

plug in debug adapter
plug in prototype board
make openocd
make gdb_boardloader
insert bootloader formatted micro sdcard

(gdb) b *copy_sdcard
(gdb) c
(gdb) b *sdcard_power_on
(gdb) c
(gdb) b *sdcard_is_present
(gdb) c
(gdb) lay src
(gdb) bt (note that the micro sdcard is powered on at this point)
#0  sdcard_is_present () at embed/trezorhal/sdcard.c:108
#1  0x08009162 in sdcard_power_on () at embed/trezorhal/sdcard.c:117
#2  0x08005c04 in check_sdcard () at embed/boardloader/main.c:52
#3  0x08005d0e in copy_sdcard () at embed/boardloader/main.c:97
#4  0x08005ece in main () at embed/boardloader/main.c:187


eject sd card
(gdb) c
get the fatal error screen
insert card and get system reset

This PR fixes this particular bug. With it, the system will not reset because the SD power switch is turned off. But, it does not fix for other similar cases, like ejecting the sd card in the middle of the boardloader's copying of the bootloader from the sdcard like at line ensure(sdcard_read_blocks(buf, i, 1), NULL);
That's why I wonder if the circuitry needs to be AND'ed with the card detect circuit.","I'm working on it. This is more of a dexterity test :) I need to go digging to find more caps. So, far I've tried a 22pF and a 10,000pF and every once in a while the board does not reset. It's a crude test because I'm literally pressing the ceramic cap leads onto the pins and reaching over to continue the debugger.
EDIT 1: FWIW, a ceramic 0.1uF (mfg part C320C104J5R5TA and looks like this https://octopart.com/c320c104j5r5ta-kemet-969453) pressed across the gate and drain works pretty reliably with my problem card. I mean the test is not perfect because I'm just pressing the pins together. But it works most of the time.
EDIT2: The 10,000pF == 10nF works ok'ish. It's not as reliable as the 0.1uF that works pretty darn reliably now that I have a good way to hold and work. I don't think I have any more good caps available to test. If I find something, I'll add it later.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,285,2018-07-23T11:49:40Z,2018-07-23T13:01:47Z,2018-07-23T13:26:36Z,MERGED,True,34,6,1,https://github.com/ph4r05,extmod-sha3: keccak parameter in the constructor,1,[],https://github.com/trezor/trezor-core/pull/285,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/285,Enables to construct keccak-sha3 so the Digest object can be used in hmac / pbkdf transparently (without need to call special digest(keccak=True) as some functions taking Digest object call digest() directly so keccak mode have to be specified before that point),Enables to construct keccak-sha3 so the Digest object can be used in hmac / pbkdf transparently (without need to call special digest(keccak=True) as some functions taking Digest object call digest() directly so keccak mode have to be specified before that point),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,285,2018-07-23T11:49:40Z,2018-07-23T13:01:47Z,2018-07-23T13:26:36Z,MERGED,True,34,6,1,https://github.com/ph4r05,extmod-sha3: keccak parameter in the constructor,1,[],https://github.com/trezor/trezor-core/pull/285,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/285#issuecomment-407050022,Enables to construct keccak-sha3 so the Digest object can be used in hmac / pbkdf transparently (without need to call special digest(keccak=True) as some functions taking Digest object call digest() directly so keccak mode have to be specified before that point),Will do the proposed changes by myself in master. Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,285,2018-07-23T11:49:40Z,2018-07-23T13:01:47Z,2018-07-23T13:26:36Z,MERGED,True,34,6,1,https://github.com/ph4r05,extmod-sha3: keccak parameter in the constructor,1,[],https://github.com/trezor/trezor-core/pull/285,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/285#issuecomment-407055559,Enables to construct keccak-sha3 so the Digest object can be used in hmac / pbkdf transparently (without need to call special digest(keccak=True) as some functions taking Digest object call digest() directly so keccak mode have to be specified before that point),Further API cleanup in cb9e7b5 (dropped keccak arg from digest() completely).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,285,2018-07-23T11:49:40Z,2018-07-23T13:01:47Z,2018-07-23T13:26:36Z,MERGED,True,34,6,1,https://github.com/ph4r05,extmod-sha3: keccak parameter in the constructor,1,[],https://github.com/trezor/trezor-core/pull/285,https://github.com/ph4r05,4,https://github.com/trezor/trezor-core/pull/285#issuecomment-407057163,Enables to construct keccak-sha3 so the Digest object can be used in hmac / pbkdf transparently (without need to call special digest(keccak=True) as some functions taking Digest object call digest() directly so keccak mode have to be specified before that point),Great work! Thanks.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,286,2018-07-23T11:50:41Z,2018-08-10T01:40:47Z,2018-08-10T01:40:48Z,CLOSED,False,1039,0,2,https://github.com/ph4r05,extmod: Monero module added (trezor-crypto binding) [for review],1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/286,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/286,"Extmod with trezor-crypto monero binding.
Depends on trezor/trezor-crypto#162
Provides python binding to the trezor-crypto monero related code.","Extmod with trezor-crypto monero binding.
Depends on trezor/trezor-crypto#162
Provides python binding to the trezor-crypto monero related code.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,286,2018-07-23T11:50:41Z,2018-08-10T01:40:47Z,2018-08-10T01:40:48Z,CLOSED,False,1039,0,2,https://github.com/ph4r05,extmod: Monero module added (trezor-crypto binding) [for review],1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/286,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/286#issuecomment-410689931,"Extmod with trezor-crypto monero binding.
Depends on trezor/trezor-crypto#162
Provides python binding to the trezor-crypto monero related code.","note: the other Monero PR #293 also includes this code, so we'll most likely close this PR",True,{'THUMBS_UP': ['https://github.com/ph4r05']}
trezor/trezor-core,https://github.com/trezor/trezor-core,286,2018-07-23T11:50:41Z,2018-08-10T01:40:47Z,2018-08-10T01:40:48Z,CLOSED,False,1039,0,2,https://github.com/ph4r05,extmod: Monero module added (trezor-crypto binding) [for review],1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/286,https://github.com/ph4r05,3,https://github.com/trezor/trezor-core/pull/286#issuecomment-411949421,"Extmod with trezor-crypto monero binding.
Depends on trezor/trezor-crypto#162
Provides python binding to the trezor-crypto monero related code.",Closing as it is part of #293,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,288,2018-07-24T11:09:42Z,2018-07-24T13:05:41Z,2018-07-24T13:09:33Z,MERGED,True,23,23,1,https://github.com/jpochyla,Fix U2F compatibility with Trezor One,2,"['firmware', 'bug']",https://github.com/trezor/trezor-core/pull/288,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/288,Fixes #276 in a backwards-compatible manner.,Fixes #276 in a backwards-compatible manner.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,288,2018-07-24T11:09:42Z,2018-07-24T13:05:41Z,2018-07-24T13:09:33Z,MERGED,True,23,23,1,https://github.com/jpochyla,Fix U2F compatibility with Trezor One,2,"['firmware', 'bug']",https://github.com/trezor/trezor-core/pull/288,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/288#issuecomment-407378671,Fixes #276 in a backwards-compatible manner.,utACK,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,290,2018-07-25T09:42:55Z,2018-07-25T09:52:29Z,2018-07-25T14:28:09Z,MERGED,True,1,3,1,https://github.com/mcudev,"boardloader, sdcard: avoid fatal error when card is ejected during countdown",1,[],https://github.com/trezor/trezor-core/pull/290,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/290,"during the 10 second countdown, there is a race between the sdcard_is_present check and the sdcard_is_present check just within the sdcard_power_on.
if you pass the first and fail the second by ejecting at just the right time, you get a message like:
FATAL ERROR:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard

instead of no SD card, aborting
this fixes:
#279 (comment)
the way to reproduce the condition with the debugger is much the same process as documented at #279 (comment)","during the 10 second countdown, there is a race between the sdcard_is_present check and the sdcard_is_present check just within the sdcard_power_on.
if you pass the first and fail the second by ejecting at just the right time, you get a message like:
FATAL ERROR:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard

instead of no SD card, aborting
this fixes:
#279 (comment)
the way to reproduce the condition with the debugger is much the same process as documented at #279 (comment)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,290,2018-07-25T09:42:55Z,2018-07-25T09:52:29Z,2018-07-25T14:28:09Z,MERGED,True,1,3,1,https://github.com/mcudev,"boardloader, sdcard: avoid fatal error when card is ejected during countdown",1,[],https://github.com/trezor/trezor-core/pull/290,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/290#issuecomment-407699900,"during the 10 second countdown, there is a race between the sdcard_is_present check and the sdcard_is_present check just within the sdcard_power_on.
if you pass the first and fail the second by ejecting at just the right time, you get a message like:
FATAL ERROR:
expr: sdcard_power_on()
file: embed/boardloader/main.c:52
func: check_sdcard

instead of no SD card, aborting
this fixes:
#279 (comment)
the way to reproduce the condition with the debugger is much the same process as documented at #279 (comment)","Makes sense, thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,291,2018-07-26T23:04:50Z,2018-08-21T15:25:20Z,2018-08-22T11:18:47Z,MERGED,True,27,32,2,https://github.com/mcudev,touch: follow ft6236 power on sequence closer,1,"['hardware', 'bootloader']",https://github.com/trezor/trezor-core/pull/291,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/291,"removed the inline attribute on touch_default_pin_state and touch_active_pin_state to make setting debug breakpoints easier


follow direction of section 3.5 of FT6236 datasheet regarding power on sequence


setup PC4 and the interrupt polling mode (even though it's still not used). i did this because the datasheet recommended to set the pin low during power off. so, i also configured it for when power was on.


moved the 100ms wait into touch_default_pin_state to account for when touch_init is called at the beginning of the firmware. that goes through an implicit power off with the setting of the default for the CTPM power pin.


changed to keep the CTPM in reset state after power-on until all the other pins are configured


i did try polling the interrupt line at the beginning of the bootloader to see if it would go low just by touching before plugging in and then holding your finger still (to get into the bootloader) and that still did not work. oh well. users still have to move their finger around to get into the bootloader.


i tested this PR with my v12 and v10 prototype boards. it seemed to work with both. but now that i'm thinking about it, i wonder if the way that we refactored the touch and sdcard stuff to drive low outputs will have negative impact on the older boards. we have to account for the old devices always having the CTPM and sdcard powered. is that going to be a problem? how should we handle that? i'm too tired to think of it right now -- just leaving a note so it doesn't get forgotten. (EDIT: due to this, please don't merge yet)","removed the inline attribute on touch_default_pin_state and touch_active_pin_state to make setting debug breakpoints easier


follow direction of section 3.5 of FT6236 datasheet regarding power on sequence


setup PC4 and the interrupt polling mode (even though it's still not used). i did this because the datasheet recommended to set the pin low during power off. so, i also configured it for when power was on.


moved the 100ms wait into touch_default_pin_state to account for when touch_init is called at the beginning of the firmware. that goes through an implicit power off with the setting of the default for the CTPM power pin.


changed to keep the CTPM in reset state after power-on until all the other pins are configured


i did try polling the interrupt line at the beginning of the bootloader to see if it would go low just by touching before plugging in and then holding your finger still (to get into the bootloader) and that still did not work. oh well. users still have to move their finger around to get into the bootloader.


i tested this PR with my v12 and v10 prototype boards. it seemed to work with both. but now that i'm thinking about it, i wonder if the way that we refactored the touch and sdcard stuff to drive low outputs will have negative impact on the older boards. we have to account for the old devices always having the CTPM and sdcard powered. is that going to be a problem? how should we handle that? i'm too tired to think of it right now -- just leaving a note so it doesn't get forgotten. (EDIT: due to this, please don't merge yet)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,291,2018-07-26T23:04:50Z,2018-08-21T15:25:20Z,2018-08-22T11:18:47Z,MERGED,True,27,32,2,https://github.com/mcudev,touch: follow ft6236 power on sequence closer,1,"['hardware', 'bootloader']",https://github.com/trezor/trezor-core/pull/291,https://github.com/mcudev,2,https://github.com/trezor/trezor-core/pull/291#issuecomment-412647243,"removed the inline attribute on touch_default_pin_state and touch_active_pin_state to make setting debug breakpoints easier


follow direction of section 3.5 of FT6236 datasheet regarding power on sequence


setup PC4 and the interrupt polling mode (even though it's still not used). i did this because the datasheet recommended to set the pin low during power off. so, i also configured it for when power was on.


moved the 100ms wait into touch_default_pin_state to account for when touch_init is called at the beginning of the firmware. that goes through an implicit power off with the setting of the default for the CTPM power pin.


changed to keep the CTPM in reset state after power-on until all the other pins are configured


i did try polling the interrupt line at the beginning of the bootloader to see if it would go low just by touching before plugging in and then holding your finger still (to get into the bootloader) and that still did not work. oh well. users still have to move their finger around to get into the bootloader.


i tested this PR with my v12 and v10 prototype boards. it seemed to work with both. but now that i'm thinking about it, i wonder if the way that we refactored the touch and sdcard stuff to drive low outputs will have negative impact on the older boards. we have to account for the old devices always having the CTPM and sdcard powered. is that going to be a problem? how should we handle that? i'm too tired to think of it right now -- just leaving a note so it doesn't get forgotten. (EDIT: due to this, please don't merge yet)","i wonder if the way that we refactored the touch and sdcard stuff to drive low outputs will have negative impact on the older boards

i did some testing and looked at the schematic differences and didn't notice any problems. i guess this is ready.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,291,2018-07-26T23:04:50Z,2018-08-21T15:25:20Z,2018-08-22T11:18:47Z,MERGED,True,27,32,2,https://github.com/mcudev,touch: follow ft6236 power on sequence closer,1,"['hardware', 'bootloader']",https://github.com/trezor/trezor-core/pull/291,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/291#issuecomment-414714924,"removed the inline attribute on touch_default_pin_state and touch_active_pin_state to make setting debug breakpoints easier


follow direction of section 3.5 of FT6236 datasheet regarding power on sequence


setup PC4 and the interrupt polling mode (even though it's still not used). i did this because the datasheet recommended to set the pin low during power off. so, i also configured it for when power was on.


moved the 100ms wait into touch_default_pin_state to account for when touch_init is called at the beginning of the firmware. that goes through an implicit power off with the setting of the default for the CTPM power pin.


changed to keep the CTPM in reset state after power-on until all the other pins are configured


i did try polling the interrupt line at the beginning of the bootloader to see if it would go low just by touching before plugging in and then holding your finger still (to get into the bootloader) and that still did not work. oh well. users still have to move their finger around to get into the bootloader.


i tested this PR with my v12 and v10 prototype boards. it seemed to work with both. but now that i'm thinking about it, i wonder if the way that we refactored the touch and sdcard stuff to drive low outputs will have negative impact on the older boards. we have to account for the old devices always having the CTPM and sdcard powered. is that going to be a problem? how should we handle that? i'm too tired to think of it right now -- just leaving a note so it doesn't get forgotten. (EDIT: due to this, please don't merge yet)",Checked and it's fine. Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,1,https://github.com/trezor/trezor-core/pull/292,Updated fields of messages trezor/trezor-common#170,Updated fields of messages trezor/trezor-common#170,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/292#issuecomment-408403496,Updated fields of messages trezor/trezor-common#170,Please fix the failure in https://travis-ci.org/trezor/trezor-core/jobs/408917280#L852-L854,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,3,https://github.com/trezor/trezor-core/pull/292#issuecomment-408450054,Updated fields of messages trezor/trezor-common#170,@prusnak fixed,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/292#issuecomment-415751024,Updated fields of messages trezor/trezor-common#170,"@Adman could you add python-trezor support and some device tests along the way please? We have two types of tests:

unit tests, directly included in trezor-core/trezor-mcu repositories, which you've added so that's great
device tests (aka integration tests), which are part of the python-trezor repository and are ""trezor model independent"". In other words those are tests that can be run against both Trezor One and Trezor T. They actually send protobuf messages to the device and expect some other protobuf messages with results

Have a look on the Cardano's or Ripple's PR for example for some inspiration.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,5,https://github.com/trezor/trezor-core/pull/292#issuecomment-416187329,Updated fields of messages trezor/trezor-common#170,"@tsusanka ok, I'll add python-trezor support and make a PR.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,6,https://github.com/trezor/trezor-core/pull/292#issuecomment-416583939,Updated fields of messages trezor/trezor-common#170,"@tsusanka Can you give me a hint how to run device_tests in python-trezor?
When running python -m pytest -v from python-trezor/trezorlib/tests/device_tests folder it fails
StopIteration ERROR: could not load python-trezor/trezorlib/tests/device_tests/conftest.py.
unit_tests work properly.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/292#issuecomment-416585516,Updated fields of messages trezor/trezor-common#170,"Run emulator first via PYOPT=0 ./emu.sh

Then in another window run ""pytest"" in device_tests directory.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,8,https://github.com/trezor/trezor-core/pull/292#issuecomment-417653802,Updated fields of messages trezor/trezor-common#170,@tsusanka @prusnak Here's the python-trezor implementation: trezor/python-trezor#302,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,9,https://github.com/trezor/trezor-core/pull/292#issuecomment-418029742,Updated fields of messages trezor/trezor-common#170,"@tsusanka @prusnak Here's the python-trezor implementation: trezor/python-trezor#302

Awesome! We are currently in the process of finalizing our next release. When that's done we'll review your PR completely. Thanks",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,10,https://github.com/trezor/trezor-core/pull/292#issuecomment-418722025,Updated fields of messages trezor/trezor-common#170,@Adman What do you think about supporting just one curve instead of all three? Supporting all three brings unnecessary complexity. We can add the other later but I believe in the first version of Tezos support we should use just one. You can choose (maybe do a bit of research what is used the most?) but I suggest secp256k or ed25519. What do you think?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/prusnak,11,https://github.com/trezor/trezor-core/pull/292#issuecomment-418759387,Updated fields of messages trezor/trezor-common#170,"As per agreement on Gitter, we'll support only Ed25519 curve = tz1. Relevant commit to trezor-common: trezor/trezor-common@b6f59d3
Please update this PR (and PR to python-trezor) to use only tz1/Ed25519 curve. Thank you!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,12,https://github.com/trezor/trezor-core/pull/292#issuecomment-419420460,Updated fields of messages trezor/trezor-common#170,@prusnak @tsusanka done.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,13,https://github.com/trezor/trezor-core/pull/292#issuecomment-419425112,Updated fields of messages trezor/trezor-common#170,"@Adman please do a rebase (let me know if you need help), the tests should be passing then",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,14,https://github.com/trezor/trezor-core/pull/292#issuecomment-419427719,Updated fields of messages trezor/trezor-common#170,"@tsusanka rebased, but master is failing because of cardano's get_public_key and address tests https://travis-ci.org/trezor/trezor-core/jobs/425716279#L1550",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/prusnak,15,https://github.com/trezor/trezor-core/pull/292#issuecomment-419430442,Updated fields of messages trezor/trezor-common#170,"You did not rebase the commits - you did merge. Rebase is being done with git rebase master. https://git-scm.com/docs/git-rebase
Be careful, this can be quite dangerous, but if there are no conflicts, it should be pretty straightforward.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,16,https://github.com/trezor/trezor-core/pull/292#issuecomment-419434785,Updated fields of messages trezor/trezor-common#170,"@prusnak There were some conflicts, but I hope everything's fine now.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,17,https://github.com/trezor/trezor-core/pull/292#issuecomment-419948637,Updated fields of messages trezor/trezor-common#170,"Now that python-trezor is merged, please do a rebase and set run_xfail = tezos in setup.cfg. That way we'll see the tests are passing. I'm working on a review, I'll publish it tonight/tomorrow.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,18,https://github.com/trezor/trezor-core/pull/292#issuecomment-419983313,Updated fields of messages trezor/trezor-common#170,"@tsusanka Ok, I rebased and set run_xfail = tezos",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,19,https://github.com/trezor/trezor-core/pull/292#issuecomment-420242527,Updated fields of messages trezor/trezor-common#170,"@tsusanka Requested changes applied.
It would be cool if the common split_address function had optional parameter size, because using size=17 the address won't fit on display. I kept the function there for now.
GetPublicKey - @jurajselep will post a comment about it here.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/jurajselep,20,https://github.com/trezor/trezor-core/pull/292#issuecomment-420248558,Updated fields of messages trezor/trezor-common#170,"When we inject transaction, origination or delegation into Tezos node for first time, we need to ""reveal"" public_key.
http://tezos.gitlab.io/betanet/api/p2p.html?highlight=reveal
We are using GetPublicKey on front-end side for operation preapply and forge .
http://tezos.gitlab.io/betanet/api/rpc.html?highlight=reveal#post-block-id-helpers-forge-operations
http://tezos.gitlab.io/betanet/api/rpc.html?highlight=reveal#post-block-id-helpers-preapply-operations
{ 
 ""kind"": ""reveal"",
 ""source"": $contract_id,
 ""fee"": $mutez,
 ""counter"": $positive_bignum,
 ""gas_limit"": $positive_bignum,
 ""storage_limit"": $positive_bignum,
 ""public_key"": $Signature.Public_key 
}",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,21,https://github.com/trezor/trezor-core/pull/292#issuecomment-420253702,Updated fields of messages trezor/trezor-common#170,"@jurajselep thanks for the explanation, that's fine by me.
@Adman please note, that the tests are failing currently becuase of style",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,22,https://github.com/trezor/trezor-core/pull/292#issuecomment-420260614,Updated fields of messages trezor/trezor-common#170,"@tsusanka Tests should be passing, but travis build failed with message The command ""curl -LO ""https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protoc-${PROTOBUF_VERSION}-linux-x86_64.zip"""" failed and exited with 56.
I assume it's problem on travis side.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,23,https://github.com/trezor/trezor-core/pull/292#issuecomment-420266581,Updated fields of messages trezor/trezor-common#170,"@tsusanka Ok, I restarted the build and it is passing. If you have further comments on this PR I will fix them.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,24,https://github.com/trezor/trezor-core/pull/292#issuecomment-420273225,Updated fields of messages trezor/trezor-common#170,"Great. Looks good to me. I'd like @jpochyla to have a final look later, but this is on a good way to be merged. Please be patient, he's busy with other things.
@jpochyla the only thing where I'm not sure is whether _encode_zarith could be simplified or moved to writers with a better name.
tACK dc6e405",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,25,https://github.com/trezor/trezor-core/pull/292#issuecomment-420273439,Updated fields of messages trezor/trezor-common#170,"(grr, the closing was of course unintentional)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,26,https://github.com/trezor/trezor-core/pull/292#issuecomment-420276933,Updated fields of messages trezor/trezor-common#170,"Maybe one more thing. Could you add a brief README? Have a look on Ripple and feel free to omit the maintainer/reviewer fields. It doesn't have to be verbose, but some links to documentation/explorer etc. would be nice.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,27,https://github.com/trezor/trezor-core/pull/292#issuecomment-420297249,Updated fields of messages trezor/trezor-common#170,@tsusanka Readme added.,True,{'THUMBS_UP': ['https://github.com/tsusanka']}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/tsusanka,28,https://github.com/trezor/trezor-core/pull/292#issuecomment-420999712,Updated fields of messages trezor/trezor-common#170,Thank you!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,292,2018-07-27T12:08:37Z,2018-09-13T13:06:05Z,2018-09-13T20:19:10Z,MERGED,True,504,1,11,https://github.com/Adman,Tezos integration,7,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/292,https://github.com/Adman,29,https://github.com/trezor/trezor-core/pull/292#issuecomment-421139544,Updated fields of messages trezor/trezor-common#170,Thanks all for the collaboration!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/293,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",True,"{'HEART': ['https://github.com/nolim1t', 'https://github.com/jonathancross', 'https://github.com/MrMebelMan', 'https://github.com/bentonoliver'], 'HOORAY': ['https://github.com/ph4r05', 'https://github.com/MrMebelMan', 'https://github.com/bentonoliver']}"
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/293#issuecomment-410652374,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","@ph4r05 I'll be doing some sort of preliminary review with @jpochyla doing review of my review later :). Consider it more as questions/suggestions. First, I would like to clarify few things:

The https://github.com/ph4r05/trezor-core/tree/xmr-total-full branch includes this PR alongside with all dependencies merged, is that correct?
What is the difference between https://github.com/ph4r05/trezor-core/tree/xmr-total-full and https://github.com/ph4r05/trezor-core/tree/xmr-total-2 ? Is the xmr-total-2 the same just with the commits squashed and no dependencies?
If I would like to test it all, I can use the xmr-total-full branch and follow the instructions in monero-agent:PoC.md@master, correct?
Is it okay if I merge this into a 'monero' branch in the very same manner as @prusnak has done with trezor-crypto? It feels bit hostile to replace your PR with mine, but it does make modifications easier.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,3,https://github.com/trezor/trezor-core/pull/293#issuecomment-410688208,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","OK thanks!


xmr-total-full branch is basically my development branch with lots of commits and with my custom git submodule forks of trezor-common and trezor-crypto with all required stuff merged in.


xmr-total-2 is all monero work done in one squashed commit, rebased on top of the master. It has original git submodules so this branch tests are failing, e.g. there is no monero functionality in trezor-crypto.


Regarding the testing - yes. If you fork my xmr-total-full with all my submodules and follow PoC.md@master you should be able to both run trezor-specific tests (16 testing transactions) and sign transactions with agent as you did in the PoC phase of the project.


PR merge - if the proposed way is easier for you then I think its OK. I am not sure how github / @prusnak is doing it in trezor/trezor-crypto#169 but there is also my avatar alongside the modified commits so its fine :)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,4,https://github.com/trezor/trezor-core/pull/293#issuecomment-410688611,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",ad PoC: if you had setup the environment for PoC previously just skip to Testing with Trezor section in PoC.md,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,5,https://github.com/trezor/trezor-core/pull/293#issuecomment-410699736,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","BTW


is there a way to set a timer after reception of a message, e.g. for a minute so if no next protocol message is received within the timeout the whole state is wiped out?


what is the safest way to wipe out secrets from the memory allocated in the python code? E.g., spending keys for UTXO would be nice to zero out before garbage collecting. Is the currently only way to do it manually?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/tsusanka,6,https://github.com/trezor/trezor-core/pull/293#issuecomment-410711243,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","@ph4r05 there is no such file trezor-crypto/monero/crypto.c as required in SConscript.firmware. This is probably due to trezor/trezor-crypto#169 (comment). I've modified the line to trezor-crypto/ed25519-donna/ge25519.c, however the build still fails due to ""ROTL32"" redefined error. Would you like to look into it?
PS: you can use the monero branch to see the error or see travis",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,7,https://github.com/trezor/trezor-core/pull/293#issuecomment-410713583,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Hmm I think this PR is not directly usable with trezor/trezor-crypto until all changes are merged. As there are still ongoing changes and review process I decided not to keep it up-to-date with the trezor/trezor-crypto until the merging and review is finished.
For the testing purposes, you may use the branch ph4r05/xmr-total-full with working trezor-crypto changes. It uses my fork of the library with merged monero changes.
That should also fix the ""ROTL32"" redefined error as it is defined in ed25510-donna.h which did not have include-once ifndef",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/tsusanka,8,https://github.com/trezor/trezor-core/pull/293#issuecomment-410714214,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",Ok fair enough. Let's wait then. @prusnak could you answer @ph4r05's questions above?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/tsusanka,9,https://github.com/trezor/trezor-core/pull/293#issuecomment-410727036,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",note: the monero branch includes this PR and is rebased on top of the current master,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/293#issuecomment-410742111,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","is there a way to set a timer after reception of a message, e.g. for a minute so if no next protocol message is received within the timeout the whole state is wiped out?

No, this is not yet possible.

what is the safest way to wipe out secrets from the memory allocated in the python code? E.g., spending keys for UTXO would be nice to zero out before garbage collecting. Is the currently only way to do it manually?

Your request sparked an idea, which I implemented here: ebf912c
Since our modtrezorcrypto objects implement memzero descructors in __del__, we can use the following syntax to acheive what you want:
from trezor.crypto import SecureContext

with SecureContext() as sc:
    sc.var1 = ...
    sc.var2 = ...

Later we might move this variables to different parts of the CPU memory (CCRAM instead of main RAM) or something even more sofisticated.",True,{'THUMBS_UP': ['https://github.com/ph4r05']}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,11,https://github.com/trezor/trezor-core/pull/293#issuecomment-412979236,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",I've refactored transaction signing so it uses protob serialization where suitable - to avoid cryptonote serialization for complex messages which are not forward compatible.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,12,https://github.com/trezor/trezor-core/pull/293#issuecomment-413188805,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",From now I will stop squashing commits after each change. I will squash it to one eventually after the review.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,13,https://github.com/trezor/trezor-core/pull/293#issuecomment-413342726,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","@tsusanka Change address is not confirmed by user now, it is verified to match primary account address (i.e., subaddress with index (account, 0)).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,14,https://github.com/trezor/trezor-core/pull/293#issuecomment-413375962,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","@tsusanka I've added tests for Monero Cryptonote serializer. For that I needed to add support for async test cases, which is also in a separate PR:
#319
EDIT: I've added some basic Monero crypto tests as well.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,15,https://github.com/trezor/trezor-core/pull/293#issuecomment-414807656,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","I've changed trezor-crypto to my fork until the required changes are merged into trezor-crypto, namely:

trezor/trezor-crypto#173
trezor/trezor-crypto#169
trezor/trezor-crypto#174 OR trezor/trezor-crypto#175

The commit of the trezor-crypto submodule has marged all required PRs so this PR can be of any use / tested.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,16,https://github.com/trezor/trezor-core/pull/293#issuecomment-416936957,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","btw @prusnak another thing I found very useful w.r.t. memory saving is to wrap certain blocks with:
from trezor import utils

mods = utils.unimport_begin()
result = memory_heavy_computation()
utils.unimport_end(mods)
As this sweeps also some packages imported in the memory_heavy_computation(). It would be maybe also nice to have some context manager for that, like:
with utils.mods_block():
    result = memory_heavy_computation()",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/prusnak,17,https://github.com/trezor/trezor-core/pull/293#issuecomment-416942254,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","@jpochyla What do you think about the comment above? Context manager for
memory heavy stuff seems like a nice idea",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,18,https://github.com/trezor/trezor-core/pull/293#issuecomment-418138014,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Adapted to master for trezor-crypto.
Travis fails because of some problem on trezor-common master.
The command ""test ""$GOAL"" != ""src"" || pipenv run make templates_check"" exited with 2.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/tsusanka,19,https://github.com/trezor/trezor-core/pull/293#issuecomment-418734888,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",The tests should be fixed now.,True,{'THUMBS_UP': ['https://github.com/ph4r05']}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,20,https://github.com/trezor/trezor-core/pull/293#issuecomment-419411761,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",I will address remaining comments soon,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,21,https://github.com/trezor/trezor-core/pull/293#issuecomment-422056192,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Trezor-crypto related: range_proof.{c,h} and the corresponding unit test can be now removed as I deprecated C-implementation of the Borromean range proof due to heap fragmentation problems. Python implementation is almost as fast as the C implementation (using in-place operations).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,22,https://github.com/trezor/trezor-core/pull/293#issuecomment-422399313,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Btw just a minor thing, after using the latest trezor-common the src Travis job started failing. Ideas? I thought it may be good to fix it before merging protobuf PR with get_fields, maybe?
1.89s$ test ""$GOAL"" != ""src"" || pipenv run make templates_check
./tools/build_templates --check
--- ./tools/../src/apps/common/coininfo.py	2018-09-17 15:11:06.743812764 +0000
+++ /tmp/tmp.CucSLkIfYY	2018-09-17 15:12:11.042755779 +0000
@@ -520,7 +520,7 @@
         address_type_p2sh=5
         maxfee_kb=10000000
         signed_message_header=""Namecoin Signed Message:\n""
-        xpub_magic=0x019da462
+        xpub_magic=0x0488b21e
         xpub_magic_segwit_p2sh=None
         xpub_magic_segwit_native=None
         bech32_prefix=None
make: *** [templates_check] Error 1",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/tsusanka,23,https://github.com/trezor/trezor-core/pull/293#issuecomment-422401962,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",@ph4r05 run ./tools/build_templates,True,{'THUMBS_UP': ['https://github.com/ph4r05']}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,24,https://github.com/trezor/trezor-core/pull/293#issuecomment-422417855,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","After pip install mako munch I've got:
Traceback (most recent call last):
  File ""./../vendor/trezor-common/tools/cointool.py"", line 706, in <module>
    cli()
  File ""/Users/dusanklinec/.pyenv/versions/3.6.5/lib/python3.6/site-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)
  File ""/Users/dusanklinec/.pyenv/versions/3.6.5/lib/python3.6/site-packages/click/core.py"", line 697, in main
    rv = self.invoke(ctx)
  File ""/Users/dusanklinec/.pyenv/versions/3.6.5/lib/python3.6/site-packages/click/core.py"", line 1066, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File ""/Users/dusanklinec/.pyenv/versions/3.6.5/lib/python3.6/site-packages/click/core.py"", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Users/dusanklinec/.pyenv/versions/3.6.5/lib/python3.6/site-packages/click/core.py"", line 535, in invoke
    return callback(*args, **kwargs)
  File ""./../vendor/trezor-common/tools/cointool.py"", line 702, in render
    do_render(file, dst)
  File ""./../vendor/trezor-common/tools/cointool.py"", line 675, in do_render
    render_file(src, dst, defs, support_info)
  File ""./../vendor/trezor-common/tools/cointool.py"", line 131, in render_file
    template = mako.template.Template(filename=src)
  File ""/Users/dusanklinec/.pyenv/versions/3.6.5/lib/python3.6/site-packages/mako/template.py"", line 283, in __init__
    ""of the root path."" % self.uri)
mako.exceptions.TemplateLookupException: Template uri ""../src/apps/common/coininfo.py.mako"" is invalid - it cannot be relative outside of the root path.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/tsusanka,25,https://github.com/trezor/trezor-core/pull/293#issuecomment-422418804,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Mmmm, maybe cd tools; ./build_templates?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,26,https://github.com/trezor/trezor-core/pull/293#issuecomment-422419887,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Aah I was originally in the tools/ dir, now I tried ./tools/build_templates and that worked.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,27,https://github.com/trezor/trezor-core/pull/293#issuecomment-426403791,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Hmm I think there is a small issue with generated mocks at the moment.
The trezorcrypto mock is one file but maybe it should actually be a package which contains submodules like monero.
Why: A function add256_modm defined in modtrezorcrypto-monero.h is in the generated mock in trezorcrypto.add256_modm, not in trezorcrypto.monero.add256_modm as it should be.
A Quick & dirty hack is to class-scope all packages in modtrezorcrypto:
class monero:

    @staticmethod
    add256_modm(a, b): 
        """"""Scalar addition""""""

    class Ge25519:
        """"""EC point""""""""
Now the mock import / typing should work.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,28,https://github.com/trezor/trezor-core/pull/293#issuecomment-428700017,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Tests failing due to:
../../../../.local/share/virtualenvs/trezor-core-h18d73Mo/src/trezor/trezorlib/tests/device_tests/test_msg_signtx_decred.py:268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.local/share/virtualenvs/trezor-core-h18d73Mo/src/trezor/trezorlib/btc.py:200: in sign_tx
    res = client.call(proto.TxAck(tx=msg))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <trezorlib.debuglink.TrezorClientDebugLink object at 0x2ac4d3d0d2b0>
msg = <TxAck: {'tx': <TransactionType: {'bin_outputs': [<TxOutputBinType: {'amount': 190000000, 'script_pubkey': b'v\xa9\x14\x81\x9d)\x1a/\x7f\xbfw\x0exK\xfdx\xb5\xce\x92\xc5\x8e\x95\xea\x88\xac', 'decred_script_version': 0}>]}>}>
    @tools.session
    def call(self, msg):
>       resp = self.call_raw(msg)
E       AssertionError: Expected responses:

Maybe rebasing on master?
@jpochyla @tsusanka let me pls know once you are done with the current work in progress so I can squash and rebase on the master.
Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/tsusanka,29,https://github.com/trezor/trezor-core/pull/293#issuecomment-428704712,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)",@ph4r05 just pushed smth. So it's a go from my side,True,{'HOORAY': ['https://github.com/MrMebelMan']}
trezor/trezor-core,https://github.com/trezor/trezor-core,293,2018-07-27T14:02:11Z,2018-10-25T13:23:23Z,2018-10-25T13:23:23Z,MERGED,True,9889,761,121,https://github.com/ph4r05,Monero support added [for review],2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/293,https://github.com/ph4r05,30,https://github.com/trezor/trezor-core/pull/293#issuecomment-430627017,"The first  review attempt for Monero code.
Code can be tested with monero-agent as with the previous PoC:
https://github.com/ph4r05/monero-agent
Documentation for PoC (section ""Testing with Trezor""):
https://github.com/ph4r05/monero-agent/blob/master/PoC.md
For testing you may actually need my forks as I use my dependencies with PRs merged (update submodules after clone).
https://github.com/ph4r05/trezor-core/tree/xmr-total-full
Integration docs:
https://github.com/ph4r05/monero-trezor-doc
This PR depends on PRs:

trezor/trezor-crypto#169


Code review TODO

 import tests into python-trezor/travis
 split tx builder steps into seperate files (@tsusanka)
 rethink how to tie the steps together (@tsusanka, @jpochyla)
 modify iface to layout based on other coins (@tsusanka)
 move hmac/enc keys to seperate file (@tsusanka)
 remove multisig (@ph4r05)
 simplify (de)serialization code (@jpochyla)
 remove most of xmr/crypto.py (@ph4r05)
 review the package structure (@jpochyla)
 remove the lite protocol (@ph4r05)
 investigate hashers (keccak_hasher, mlsag_hasher) (@jpochyla)
 thoroughly review signing steps (@tsusanka)

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10


 state.in_memory?
 common.ct_equal? (@jpochyla)
 ring_ct, mlsag2 (@tsusanka)
 bulletproofs (Ondra + Andrew)
 batch_size < output_count test (@ph4r05)
 key image sync (@jpochyla)
 monero.py (@tsusanka)","Just to note: the builds are currently failing because of
pypa/pipenv#3026",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,296,2018-08-04T14:57:15Z,2018-08-04T15:03:42Z,2018-08-04T18:26:15Z,MERGED,True,16,2,1,https://github.com/mcudev,display_identify: improve identification of ILI9341,1,[],https://github.com/trezor/trezor-core/pull/296,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/296,"I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.","I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,296,2018-08-04T14:57:15Z,2018-08-04T15:03:42Z,2018-08-04T18:26:15Z,MERGED,True,16,2,1,https://github.com/mcudev,display_identify: improve identification of ILI9341,1,[],https://github.com/trezor/trezor-core/pull/296,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/296#issuecomment-410455661,"I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.",Nice! Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,296,2018-08-04T14:57:15Z,2018-08-04T15:03:42Z,2018-08-04T18:26:15Z,MERGED,True,16,2,1,https://github.com/mcudev,display_identify: improve identification of ILI9341,1,[],https://github.com/trezor/trezor-core/pull/296,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/296#issuecomment-410456424,"I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.",Did small related refactor in bc5dba7,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,296,2018-08-04T14:57:15Z,2018-08-04T15:03:42Z,2018-08-04T18:26:15Z,MERGED,True,16,2,1,https://github.com/mcudev,display_identify: improve identification of ILI9341,1,[],https://github.com/trezor/trezor-core/pull/296,https://github.com/mcudev,4,https://github.com/trezor/trezor-core/pull/296#issuecomment-410457202,"I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.",i like that refactor! thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,296,2018-08-04T14:57:15Z,2018-08-04T15:03:42Z,2018-08-04T18:26:15Z,MERGED,True,16,2,1,https://github.com/mcudev,display_identify: improve identification of ILI9341,1,[],https://github.com/trezor/trezor-core/pull/296,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/296#issuecomment-410458115,"I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.","And finally the runtime detection of connected display controller: 3022cd5
Comments welcome!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,296,2018-08-04T14:57:15Z,2018-08-04T15:03:42Z,2018-08-04T18:26:15Z,MERGED,True,16,2,1,https://github.com/mcudev,display_identify: improve identification of ILI9341,1,[],https://github.com/trezor/trezor-core/pull/296,https://github.com/mcudev,6,https://github.com/trezor/trezor-core/pull/296#issuecomment-410459981,"I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.",will review. do you have a manual or datasheet for GC9307 anywhere? couldn't find one.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,296,2018-08-04T14:57:15Z,2018-08-04T15:03:42Z,2018-08-04T18:26:15Z,MERGED,True,16,2,1,https://github.com/mcudev,display_identify: improve identification of ILI9341,1,[],https://github.com/trezor/trezor-core/pull/296,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/296#issuecomment-410461421,"I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.",Sent via email,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,296,2018-08-04T14:57:15Z,2018-08-04T15:03:42Z,2018-08-04T18:26:15Z,MERGED,True,16,2,1,https://github.com/mcudev,display_identify: improve identification of ILI9341,1,[],https://github.com/trezor/trezor-core/pull/296,https://github.com/mcudev,8,https://github.com/trezor/trezor-core/pull/296#issuecomment-410465060,"I found another ID register in the datasheet for the ILI9341. 0xD3 is not mentioned in the ST7789V datasheet. That is why I only read the register if we don't already have a positive identification from the 0x04 register.
tested on prototype board + st7789v and with dev kit + ili9341.","review:

 no more extra build flags and recompiling, yay!
 all references to DISPLAY_ILI9341V, DISPLAY_ST7789V, DISPLAY_GC9307 are removed
 need to re-identify for each code stage to set DISPLAY_ID since it gets re-initialized every time to 0 (.bss section variable). need to do before trying to call display_clear.
 may want to update hardware.md to: Driver IC: ST7789V, GC9307, or ILI9341V (on-chip display data RAM of 240x320x18 bits)
 the special case for the new driver in display_refresh seems odd because the datasheet indicates similar support. may just need some tinkering?

did something for items 3 and 4 at #297.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,297,2018-08-04T18:25:48Z,2018-08-04T19:53:18Z,2018-08-04T23:00:32Z,CLOSED,False,9,5,7,https://github.com/mcudev,display_identify: re-identify for each code stage,1,[],https://github.com/trezor/trezor-core/pull/297,https://github.com/mcudev,1,https://github.com/trezor/trezor-core/pull/297,"#296 (comment)
this just gets the display working for my dev kit and prototype boards. may need refactoring.","#296 (comment)
this just gets the display working for my dev kit and prototype boards. may need refactoring.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,297,2018-08-04T18:25:48Z,2018-08-04T19:53:18Z,2018-08-04T23:00:32Z,CLOSED,False,9,5,7,https://github.com/mcudev,display_identify: re-identify for each code stage,1,[],https://github.com/trezor/trezor-core/pull/297,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/297#issuecomment-410469870,"#296 (comment)
this just gets the display working for my dev kit and prototype boards. may need refactoring.","I just pushed another approach into https://github.com/trezor/trezor-core/tree/display_id_refactor branch.
Both approaches have its (dis)advantages:
yours - smaller code, more error-prone to refactoring mistakes (programmer forgets to call display_identify)
mine - bigger code, less error-prone
Not sure which one to pick :-)",True,{'THUMBS_UP': ['https://github.com/mcudev']}
trezor/trezor-core,https://github.com/trezor/trezor-core,297,2018-08-04T18:25:48Z,2018-08-04T19:53:18Z,2018-08-04T23:00:32Z,CLOSED,False,9,5,7,https://github.com/mcudev,display_identify: re-identify for each code stage,1,[],https://github.com/trezor/trezor-core/pull/297,https://github.com/mcudev,3,https://github.com/trezor/trezor-core/pull/297#issuecomment-410472896,"#296 (comment)
this just gets the display working for my dev kit and prototype boards. may need refactoring.",we can go with yours. it keeps it all in one file.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,297,2018-08-04T18:25:48Z,2018-08-04T19:53:18Z,2018-08-04T23:00:32Z,CLOSED,False,9,5,7,https://github.com/mcudev,display_identify: re-identify for each code stage,1,[],https://github.com/trezor/trezor-core/pull/297,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/297#issuecomment-410473689,"#296 (comment)
this just gets the display working for my dev kit and prototype boards. may need refactoring.","Ok, closing in favor of e3d18ec",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,297,2018-08-04T18:25:48Z,2018-08-04T19:53:18Z,2018-08-04T23:00:32Z,CLOSED,False,9,5,7,https://github.com/mcudev,display_identify: re-identify for each code stage,1,[],https://github.com/trezor/trezor-core/pull/297,https://github.com/mcudev,5,https://github.com/trezor/trezor-core/pull/297#issuecomment-410473836,"#296 (comment)
this just gets the display working for my dev kit and prototype boards. may need refactoring.","cool, hey do you want to grab the small update to docs/hardware.md ?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,297,2018-08-04T18:25:48Z,2018-08-04T19:53:18Z,2018-08-04T23:00:32Z,CLOSED,False,9,5,7,https://github.com/mcudev,display_identify: re-identify for each code stage,1,[],https://github.com/trezor/trezor-core/pull/297,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/297#issuecomment-410483172,"#296 (comment)
this just gets the display working for my dev kit and prototype boards. may need refactoring.",Docs update done on the following commit.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,311,2018-08-14T15:24:49Z,2018-08-14T17:46:28Z,2018-08-14T17:46:33Z,MERGED,True,4,2,1,https://github.com/hackmod,src/apps/ethereum: support full 32bit chain_id,1,[],https://github.com/trezor/trezor-core/pull/311,https://github.com/hackmod,1,https://github.com/trezor/trezor-core/pull/311,"remove chain_id restriction to support full 32bit chain_id.
for chain_id > MAX_CHAIN_ID(2147483630) case, simply return v signature parity.
see also trezor/trezor-mcu#399","remove chain_id restriction to support full 32bit chain_id.
for chain_id > MAX_CHAIN_ID(2147483630) case, simply return v signature parity.
see also trezor/trezor-mcu#399",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,311,2018-08-14T15:24:49Z,2018-08-14T17:46:28Z,2018-08-14T17:46:33Z,MERGED,True,4,2,1,https://github.com/hackmod,src/apps/ethereum: support full 32bit chain_id,1,[],https://github.com/trezor/trezor-core/pull/311,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/311#issuecomment-412957713,"remove chain_id restriction to support full 32bit chain_id.
for chain_id > MAX_CHAIN_ID(2147483630) case, simply return v signature parity.
see also trezor/trezor-mcu#399",Thanks!,True,{'THUMBS_UP': ['https://github.com/hackmod']}
trezor/trezor-core,https://github.com/trezor/trezor-core,312,2018-08-14T15:36:51Z,2018-08-14T17:43:20Z,2018-08-14T17:43:40Z,MERGED,True,5,1,1,https://github.com/hackmod,docker: protobuf stuff added,1,[],https://github.com/trezor/trezor-core/pull/312,https://github.com/hackmod,1,https://github.com/trezor/trezor-core/pull/312,"Im not sure why, but anyway I can build with this fix
$ sh build-docker.sh
....
  * fngprnt : 9fc8eb527f6563b283ce2f52f53bb47f4cfb6f6a7f8f76e0d951e107979ba520

dd if=build/firmware/firmware.bin of=build/firmware/firmware.bin.p1 skip=0 bs=128k count=6
6+0 records in
6+0 records out
786432 bytes (786 kB, 768 KiB) copied, 0.000696389 s, 1.1 GB/s
$","Im not sure why, but anyway I can build with this fix
$ sh build-docker.sh
....
  * fngprnt : 9fc8eb527f6563b283ce2f52f53bb47f4cfb6f6a7f8f76e0d951e107979ba520

dd if=build/firmware/firmware.bin of=build/firmware/firmware.bin.p1 skip=0 bs=128k count=6
6+0 records in
6+0 records out
786432 bytes (786 kB, 768 KiB) copied, 0.000696389 s, 1.1 GB/s
$",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,312,2018-08-14T15:36:51Z,2018-08-14T17:43:20Z,2018-08-14T17:43:40Z,MERGED,True,5,1,1,https://github.com/hackmod,docker: protobuf stuff added,1,[],https://github.com/trezor/trezor-core/pull/312,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/312#issuecomment-412956755,"Im not sure why, but anyway I can build with this fix
$ sh build-docker.sh
....
  * fngprnt : 9fc8eb527f6563b283ce2f52f53bb47f4cfb6f6a7f8f76e0d951e107979ba520

dd if=build/firmware/firmware.bin of=build/firmware/firmware.bin.p1 skip=0 bs=128k count=6
6+0 records in
6+0 records out
786432 bytes (786 kB, 768 KiB) copied, 0.000696389 s, 1.1 GB/s
$",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,319,2018-08-15T23:51:11Z,2018-08-20T14:09:44Z,2018-08-20T14:09:45Z,MERGED,True,6,1,1,https://github.com/ph4r05,tests: support async test cases added,1,[],https://github.com/trezor/trezor-core/pull/319,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/319,"test cases starting with 'test_async' are executed on the async manner
quite handy for testing serialization routines and other async tasks (e.g., Monero serialization tests)","test cases starting with 'test_async' are executed on the async manner
quite handy for testing serialization routines and other async tasks (e.g., Monero serialization tests)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,319,2018-08-15T23:51:11Z,2018-08-20T14:09:44Z,2018-08-20T14:09:45Z,MERGED,True,6,1,1,https://github.com/ph4r05,tests: support async test cases added,1,[],https://github.com/trezor/trezor-core/pull/319,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/319#issuecomment-414257747,"test cases starting with 'test_async' are executed on the async manner
quite handy for testing serialization routines and other async tasks (e.g., Monero serialization tests)",Great! Ready to merge when the tests are green.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,319,2018-08-15T23:51:11Z,2018-08-20T14:09:44Z,2018-08-20T14:09:45Z,MERGED,True,6,1,1,https://github.com/ph4r05,tests: support async test cases added,1,[],https://github.com/trezor/trezor-core/pull/319,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/319#issuecomment-414261343,"test cases starting with 'test_async' are executed on the async manner
quite handy for testing serialization routines and other async tasks (e.g., Monero serialization tests)","We have a failing master, we'll look into it",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,319,2018-08-15T23:51:11Z,2018-08-20T14:09:44Z,2018-08-20T14:09:45Z,MERGED,True,6,1,1,https://github.com/ph4r05,tests: support async test cases added,1,[],https://github.com/trezor/trezor-core/pull/319,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/319#issuecomment-414329346,"test cases starting with 'test_async' are executed on the async manner
quite handy for testing serialization routines and other async tasks (e.g., Monero serialization tests)","Master was fixed, I've restarted the tests and it's all good so I'm merging.",True,{'THUMBS_UP': ['https://github.com/ph4r05']}
trezor/trezor-core,https://github.com/trezor/trezor-core,322,2018-08-18T14:47:02Z,2018-08-19T17:00:17Z,2018-08-19T17:00:17Z,MERGED,True,3,1,1,https://github.com/alepop,lisk: fix raw transaction fields update,1,[],https://github.com/trezor/trezor-core/pull/322,https://github.com/alepop,1,https://github.com/trezor/trezor-core/pull/322,"If a device is using for second signature calculation sender_public_key field must exist in a Lisk transaction message and not be replaced by the device public key.
trezor/trezor-mcu#351 updated with the right logic too.","If a device is using for second signature calculation sender_public_key field must exist in a Lisk transaction message and not be replaced by the device public key.
trezor/trezor-mcu#351 updated with the right logic too.",True,{'THUMBS_UP': ['https://github.com/karek314']}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,1,https://github.com/trezor/trezor-core/pull/323,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/323#issuecomment-414158358,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","To run emulator in debug mode, just run `PYOPT=0 ./emu.sh`",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,3,https://github.com/trezor/trezor-core/pull/323#issuecomment-414204841,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Thanks, will finish the tests and make PR to python-trezor",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,4,https://github.com/trezor/trezor-core/pull/323#issuecomment-414558599,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Hello, I added the python-trezor PR here trezor/python-trezor#301",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/tsusanka,5,https://github.com/trezor/trezor-core/pull/323#issuecomment-415749270,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","@backslash47 am I correct to assume that Ontology does not have some sort of ""change"" concept similar to bitcoin? The reason I'm asking is that I'm wondering what kind of bip-32 paths will go to trezor. Since nist256p1 does have normal derivation I suggest it to be 44'/1024'/a' for GetPublicKey (to get a xpub) and 44'/1024'/a'/0/0 for GetAddress and signing methods, where a is an account index and 0/0 is fixed. Or maybe keep the address index - 44'/1024'/a'/0/x. Any thoughts?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,6,https://github.com/trezor/trezor-core/pull/323#issuecomment-415752419,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Hi,
Your assumption is correct. There is no concept of change. About the bip32 path: in ledger integration we use 44'/1024'/0'/0/x
It will be good to have the same paths.
And because lot of people holding ont is also holding neo and because there is currently a swap from nep-5 to main net tokens, the path could also be 44'/888'/0'/0/x where 888 is NEO coin. I called it NEO compatible addresses in my wallet (Cyano wallet -https://github.com/OntologyCommunityDevelopers/cyano-wallet )",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/tsusanka,7,https://github.com/trezor/trezor-core/pull/323#issuecomment-415766169,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Your assumption is correct. There is no concept of change. About the bip32 path: in ledger integration we use 44'/1024'/0'/0/x

Ok, great.

And because lot of people holding ont is also holding neo and because there is currently a swap from nep-5 to main net tokens, the path could also be 44'/888'/0'/0/x where 888 is NEO coin. I called it NEO compatible addresses in my wallet (Cyano wallet -OntologyCommunityDevelopers/cyano-wallet )

Uff, sorry I don't know much about Ontology and NEO. So you can store NEO coins on a an Ontology address?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,8,https://github.com/trezor/trezor-core/pull/323#issuecomment-415769465,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Let me explain:
The address format is the same. ONT holders are in many cases also NEO holders.
Ontology came to existence first as a NEP-5 token (similar to ERC20 token on Ethereum).
This year a main net was launched and a swap procedure from NEP-5 token to main net token is undergoing.
And yes, basically you can store NEO and ONT on the same addresses, it is just on different network.",True,{'THUMBS_UP': ['https://github.com/tsusanka']}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,9,https://github.com/trezor/trezor-core/pull/323#issuecomment-416981895,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Hello,
Anything else needs to be improved?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/323#issuecomment-416988989,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","We are in process of stabilizing the new firmware release, which will be released in the following weeks. Once this is done, we'll review your pull request.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,11,https://github.com/trezor/trezor-core/pull/323#issuecomment-417064522,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.",Thanks for the information,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/prusnak,12,https://github.com/trezor/trezor-core/pull/323#issuecomment-420333185,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","I got time to review some of the stuff. Please rebase on top of current master and do the following:


Please drop the setup.cfg change. We have Ontology tests in python-trezor already, so there is no need to have them as xfail.


Please remove ontology/writer.py and use writers from apps/common/writers.py. Seems there is one writer missing (write_bytes_with_length), please add it to common writers too.


We have simplified registering of the messages, please check src/apps/cardano/__init__.py for example and edit apps/ontology/__init__.py in similar fashion.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/matejcik,13,https://github.com/trezor/trezor-core/pull/323#issuecomment-420588330,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","@prusnak the point of setup.cfg line is to enable the tests for this PR - so that we see results of tests that are xfailed by default
so please keep that line.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,14,https://github.com/trezor/trezor-core/pull/323#issuecomment-421238088,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Hi,
about the writers:
There is missing write_uint16, write_bool (can be replaced by write_uint8), write_varint (specific to NEO and Ontology) and write_bytes_with_length (also specific to NEO and Ontology, because it uses write_varint). But I can move the missing methods to common writers if you want.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,15,https://github.com/trezor/trezor-core/pull/323#issuecomment-421241130,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","@prusnak I simplified the message registration, but I can not test it, because the build is failing due to some cardano inconsistencies.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/prusnak,16,https://github.com/trezor/trezor-core/pull/323#issuecomment-421260402,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.",Rebase your work on top of the master and it should work (don't touch trezor-crypto and trezor-common submodules).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,17,https://github.com/trezor/trezor-core/pull/323#issuecomment-421266600,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","I have it already rebased on master. Please have a look at https://travis-ci.org/trezor/trezor-core/jobs/428480375 starting from line 1969, that is exactly the same error I encountered locally.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/prusnak,18,https://github.com/trezor/trezor-core/pull/323#issuecomment-421267911,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.",In e576f7a you change both trezor-common and trezor-crypto submodules. If you fix this (remove this change from the commit and rebase) it will work.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,19,https://github.com/trezor/trezor-core/pull/323#issuecomment-421268098,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.",My mistake. Will try it without it.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,20,https://github.com/trezor/trezor-core/pull/323#issuecomment-421334612,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.",All should be ready.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,21,https://github.com/trezor/trezor-core/pull/323#issuecomment-421894338,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","@prusnak Hello, I am wondering, the next step to add Ontology integration (after firmware) would be trezor-connect? Or is there something what should be done before.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/prusnak,22,https://github.com/trezor/trezor-core/pull/323#issuecomment-421909988,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Yes, Connect.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/backslash47,23,https://github.com/trezor/trezor-core/pull/323#issuecomment-436939323,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","Hi,
what is the timetable for merging this PR please? Is there anything I can do to help with it?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/matejcik,24,https://github.com/trezor/trezor-core/pull/323#issuecomment-473344964,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","In #323 (comment) you said that the bip32 path is m/44'/1024'/0'/0/i
That seems rather weird, given that the last part of the path is non-hardened. You're not exporting the public nodes so it doesn't seem to affect you in practice, but it's still weird.
It would be better if we could prefer paths like m/44'/1024'/a', and allow the /0/0 suffix for compatibility. However, we don't know the wallet landscape. It seems OK on Cyano wallet, where it seems there are no path-based accounts? But, are there wallets that iterate the last part for accounts instead of the usual account part?
see Ripple in https://github.com/trezor/trezor-core/tree/master/docs/coins, which seems most similar",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/matejcik,25,https://github.com/trezor/trezor-core/pull/323#issuecomment-483326389,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.","closing for cleanup now.
if you resume work on this, please apply your changes to the monorepo at https://github.com/trezor/trezor-firmware and resubmit",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,323,2018-08-19T21:12:46Z,2019-04-15T16:35:18Z,2019-05-25T10:27:10Z,CLOSED,False,897,1,19,https://github.com/backslash47,add Ontology support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/323,https://github.com/prusnak,26,https://github.com/trezor/trezor-core/pull/323#issuecomment-495904649,"Hi,
I prepared signing support for Ontology based on the messages in trezor-common. Currently there are 6 methods defined:
getPublicKey, getAddress, signTransfer, signWithdrawOng, signOntIdRegister and signOntIdAddAttributes
Please review the code, if it is alright or something needs to be changed.
I have also prepared tests in python-trezor but I don't know how to build debug build of trezor-core and run in emulator, so I can use LoadDevice in the test.",The work is continued here: trezor/trezor-firmware#177,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,327,2018-08-21T09:27:49Z,2018-08-21T11:48:24Z,2018-08-21T11:48:29Z,MERGED,True,29,52,15,https://github.com/tsusanka,GetPublicKey consolidation,4,[],https://github.com/trezor/trezor-core/pull/327,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/327,to be discussed in person,to be discussed in person,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,327,2018-08-21T09:27:49Z,2018-08-21T11:48:24Z,2018-08-21T11:48:29Z,MERGED,True,29,52,15,https://github.com/tsusanka,GetPublicKey consolidation,4,[],https://github.com/trezor/trezor-core/pull/327,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/327#issuecomment-414611744,to be discussed in person,closes #324,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,328,2018-08-22T11:30:32Z,2018-08-23T09:24:00Z,2018-08-23T13:00:40Z,MERGED,True,13,13,8,https://github.com/tsusanka,Total amount fix,2,[],https://github.com/trezor/trezor-core/pull/328,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/328,"So this is rather sensitive, so I'm filing a PR. The ""total amount"" now includes fee
closes #318","So this is rather sensitive, so I'm filing a PR. The ""total amount"" now includes fee
closes #318",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,329,2018-08-23T12:41:20Z,2018-08-23T18:06:01Z,2018-08-23T18:06:06Z,MERGED,True,512,399,21,https://github.com/jpochyla,Unify common writer logic,1,[],https://github.com/trezor/trezor-core/pull/329,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/329,"Serialization logic from altcoin and bitcoin apps was moved to apps.common.writers. Also:

write_* functions always take the writer as first param
serialize_* functions always return bytes","Serialization logic from altcoin and bitcoin apps was moved to apps.common.writers. Also:

write_* functions always take the writer as first param
serialize_* functions always return bytes",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,329,2018-08-23T12:41:20Z,2018-08-23T18:06:01Z,2018-08-23T18:06:06Z,MERGED,True,512,399,21,https://github.com/jpochyla,Unify common writer logic,1,[],https://github.com/trezor/trezor-core/pull/329,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/329#issuecomment-415423915,"Serialization logic from altcoin and bitcoin apps was moved to apps.common.writers. Also:

write_* functions always take the writer as first param
serialize_* functions always return bytes","(tests are failing on style)
src/apps/stellar/writers.py:1:1: F401 'ustruct' imported but unused
src/apps/wallet/sign_tx/writers.py:5:1: F401 'apps.common.writers.empty_bytearray' imported but unused",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,329,2018-08-23T12:41:20Z,2018-08-23T18:06:01Z,2018-08-23T18:06:06Z,MERGED,True,512,399,21,https://github.com/jpochyla,Unify common writer logic,1,[],https://github.com/trezor/trezor-core/pull/329,https://github.com/jpochyla,3,https://github.com/trezor/trezor-core/pull/329#issuecomment-415431079,"Serialization logic from altcoin and bitcoin apps was moved to apps.common.writers. Also:

write_* functions always take the writer as first param
serialize_* functions always return bytes","Fixed, thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,331,2018-08-24T15:08:25Z,2018-08-27T12:56:22Z,2018-08-27T12:56:28Z,MERGED,True,79,339,20,https://github.com/jpochyla,Unify wire registering of wire callbacks and load app modules automatically,1,[],https://github.com/trezor/trezor-core/pull/331,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/331,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,331,2018-08-24T15:08:25Z,2018-08-27T12:56:22Z,2018-08-27T12:56:28Z,MERGED,True,79,339,20,https://github.com/jpochyla,Unify wire registering of wire callbacks and load app modules automatically,1,[],https://github.com/trezor/trezor-core/pull/331,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/331#issuecomment-415795545,,Maybe rename wire.add to wire.register and wire.register to wire._register? Or do we use wire.register directly without the wire.add wrapper somewhere?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,331,2018-08-24T15:08:25Z,2018-08-27T12:56:22Z,2018-08-27T12:56:28Z,MERGED,True,79,339,20,https://github.com/jpochyla,Unify wire registering of wire callbacks and load app modules automatically,1,[],https://github.com/trezor/trezor-core/pull/331,https://github.com/jpochyla,3,https://github.com/trezor/trezor-core/pull/331#issuecomment-415962582,,Yes we use wire.register in some cases.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,331,2018-08-24T15:08:25Z,2018-08-27T12:56:22Z,2018-08-27T12:56:28Z,MERGED,True,79,339,20,https://github.com/jpochyla,Unify wire registering of wire callbacks and load app modules automatically,1,[],https://github.com/trezor/trezor-core/pull/331,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/331#issuecomment-416168140,,"I love it and I think add is fine. I have to say I've liked the previous version where you've spelled out the package name maybe a bit more (mainly for new programmers I think it is a little bit easier to grasp). But we've already discussed this, so we can leave this.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,331,2018-08-24T15:08:25Z,2018-08-27T12:56:22Z,2018-08-27T12:56:28Z,MERGED,True,79,339,20,https://github.com/jpochyla,Unify wire registering of wire callbacks and load app modules automatically,1,[],https://github.com/trezor/trezor-core/pull/331,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/331#issuecomment-416216723,,utACK,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,333,2018-08-27T10:15:11Z,2018-08-27T13:36:03Z,2018-08-27T13:36:12Z,MERGED,True,35,35,24,https://github.com/jpochyla,Refactor structure of packages and modules,1,[],https://github.com/trezor/trezor-core/pull/333,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/333,Fixes #317,Fixes #317,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,336,2018-08-27T18:11:37Z,2018-08-29T10:04:39Z,2018-08-29T10:05:00Z,MERGED,True,1382,4556,18,https://github.com/matejcik,"Mako templates for coins, tokens, etc.",4,[],https://github.com/trezor/trezor-core/pull/336,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/336,"with updated trezor-common, handy make templates that render every found foo.bar.mako to the corresponding foo.bar, and make templates_check for Travis to make sure that you're not commiting changes in the autogenerated files","with updated trezor-common, handy make templates that render every found foo.bar.mako to the corresponding foo.bar, and make templates_check for Travis to make sure that you're not commiting changes in the autogenerated files",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,336,2018-08-27T18:11:37Z,2018-08-29T10:04:39Z,2018-08-29T10:05:00Z,MERGED,True,1382,4556,18,https://github.com/matejcik,"Mako templates for coins, tokens, etc.",4,[],https://github.com/trezor/trezor-core/pull/336,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/336#issuecomment-416628992,"with updated trezor-common, handy make templates that render every found foo.bar.mako to the corresponding foo.bar, and make templates_check for Travis to make sure that you're not commiting changes in the autogenerated files","utACK, I like this
If @jpochyla and @tsusanka are OK with this, we'll merge this",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,336,2018-08-27T18:11:37Z,2018-08-29T10:04:39Z,2018-08-29T10:05:00Z,MERGED,True,1382,4556,18,https://github.com/matejcik,"Mako templates for coins, tokens, etc.",4,[],https://github.com/trezor/trezor-core/pull/336,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/336#issuecomment-416688711,"with updated trezor-common, handy make templates that render every found foo.bar.mako to the corresponding foo.bar, and make templates_check for Travis to make sure that you're not commiting changes in the autogenerated files","utACK
I might test tomorrow. The concept is great though",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,336,2018-08-27T18:11:37Z,2018-08-29T10:04:39Z,2018-08-29T10:05:00Z,MERGED,True,1382,4556,18,https://github.com/matejcik,"Mako templates for coins, tokens, etc.",4,[],https://github.com/trezor/trezor-core/pull/336,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/336#issuecomment-416898664,"with updated trezor-common, handy make templates that render every found foo.bar.mako to the corresponding foo.bar, and make templates_check for Travis to make sure that you're not commiting changes in the autogenerated files",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,337,2018-08-28T12:27:14Z,2018-08-28T14:12:14Z,2018-08-28T14:12:22Z,MERGED,True,350,0,2,https://github.com/tsusanka,List of used derivation paths,1,[],https://github.com/trezor/trezor-core/pull/337,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/337,"This documents tries to summarize what paths should be provided for which coin. If another path is provided, trezor shows a warning. Few notes:

If NEM's correct path is 44'/43'/a', we should allow it as well, shouldn't we? Not just the historical one, similar as we do for Ethereum. And maybe the same goes for Ripple?
I'm putting this into docs/ folder and I think we might move all the coin's README here (as @prusnak suggested already before).

@prusnak @jpochyla @matejcik @szymonlesisz could you have a look if this seems fine?","This documents tries to summarize what paths should be provided for which coin. If another path is provided, trezor shows a warning. Few notes:

If NEM's correct path is 44'/43'/a', we should allow it as well, shouldn't we? Not just the historical one, similar as we do for Ethereum. And maybe the same goes for Ripple?
I'm putting this into docs/ folder and I think we might move all the coin's README here (as @prusnak suggested already before).

@prusnak @jpochyla @matejcik @szymonlesisz could you have a look if this seems fine?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,337,2018-08-28T12:27:14Z,2018-08-28T14:12:14Z,2018-08-28T14:12:22Z,MERGED,True,350,0,2,https://github.com/tsusanka,List of used derivation paths,1,[],https://github.com/trezor/trezor-core/pull/337,https://github.com/matejcik,2,https://github.com/trezor/trezor-core/pull/337#issuecomment-416573601,"This documents tries to summarize what paths should be provided for which coin. If another path is provided, trezor shows a warning. Few notes:

If NEM's correct path is 44'/43'/a', we should allow it as well, shouldn't we? Not just the historical one, similar as we do for Ethereum. And maybe the same goes for Ripple?
I'm putting this into docs/ folder and I think we might move all the coin's README here (as @prusnak suggested already before).

@prusnak @jpochyla @matejcik @szymonlesisz could you have a look if this seems fine?",lgtm,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,337,2018-08-28T12:27:14Z,2018-08-28T14:12:14Z,2018-08-28T14:12:22Z,MERGED,True,350,0,2,https://github.com/tsusanka,List of used derivation paths,1,[],https://github.com/trezor/trezor-core/pull/337,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/337#issuecomment-416599618,"This documents tries to summarize what paths should be provided for which coin. If another path is provided, trezor shows a warning. Few notes:

If NEM's correct path is 44'/43'/a', we should allow it as well, shouldn't we? Not just the historical one, similar as we do for Ethereum. And maybe the same goes for Ripple?
I'm putting this into docs/ folder and I think we might move all the coin's README here (as @prusnak suggested already before).

@prusnak @jpochyla @matejcik @szymonlesisz could you have a look if this seems fine?",Merged! Thx,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,338,2018-08-29T14:48:35Z,2018-08-30T12:12:04Z,2018-08-30T12:12:05Z,MERGED,True,2,2,1,https://github.com/ph4r05,workflow: allow more arguments to the import workflow,1,[],https://github.com/trezor/trezor-core/pull/338,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/338,"Allows to use stateful message handlers
wire.add(MessageType.MoneroTransactionSign, __name__, ""get_address"", STATE)","Allows to use stateful message handlers
wire.add(MessageType.MoneroTransactionSign, __name__, ""get_address"", STATE)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,340,2018-08-30T13:36:22Z,2018-09-06T11:52:39Z,2018-10-09T15:34:32Z,MERGED,True,27,50,11,https://github.com/jpochyla,Remove split_words,1,[],https://github.com/trezor/trezor-core/pull/340,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/340,"split_words and the Text component implement the same layout algorithm.
Fixes #330","split_words and the Text component implement the same layout algorithm.
Fixes #330",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,340,2018-08-30T13:36:22Z,2018-09-06T11:52:39Z,2018-10-09T15:34:32Z,MERGED,True,27,50,11,https://github.com/jpochyla,Remove split_words,1,[],https://github.com/trezor/trezor-core/pull/340,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/340#issuecomment-417326164,"split_words and the Text component implement the same layout algorithm.
Fixes #330",So does this mean we can remove split_words? Because I don't see the remove,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,340,2018-08-30T13:36:22Z,2018-09-06T11:52:39Z,2018-10-09T15:34:32Z,MERGED,True,27,50,11,https://github.com/jpochyla,Remove split_words,1,[],https://github.com/trezor/trezor-core/pull/340,https://github.com/jpochyla,3,https://github.com/trezor/trezor-core/pull/340#issuecomment-417327158,"split_words and the Text component implement the same layout algorithm.
Fixes #330","Updated, sorry.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,340,2018-08-30T13:36:22Z,2018-09-06T11:52:39Z,2018-10-09T15:34:32Z,MERGED,True,27,50,11,https://github.com/jpochyla,Remove split_words,1,[],https://github.com/trezor/trezor-core/pull/340,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/340#issuecomment-417594738,"split_words and the Text component implement the same layout algorithm.
Fixes #330","This looks good, but I still don't like the API - probably same as you :). I tried to come up with a better one, but yes it's tricky. How about:
class WordsText(Text):
    def __init__(...):
        super().__init__(..., new_lines=False)

    def words(self, content: str):
        self.normal(*content.split("" ""))
and then simply t = WordsText(...) and t.words('some words'). But I've realized this sucks as well, it is really unintuitive which one to use (Text or WordsText). I guess the correct solution is to have the new_lines=True as default, but I understand it is breaking change.
So the conclusion is we can merge this one and revisit again as part of the UI redesign.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,340,2018-08-30T13:36:22Z,2018-09-06T11:52:39Z,2018-10-09T15:34:32Z,MERGED,True,27,50,11,https://github.com/jpochyla,Remove split_words,1,[],https://github.com/trezor/trezor-core/pull/340,https://github.com/tsusanka,5,https://github.com/trezor/trezor-core/pull/340#issuecomment-419031114,"split_words and the Text component implement the same layout algorithm.
Fixes #330","@jpochyla let's merge this? It's not perfect, but I see it as an improvement",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,340,2018-08-30T13:36:22Z,2018-09-06T11:52:39Z,2018-10-09T15:34:32Z,MERGED,True,27,50,11,https://github.com/jpochyla,Remove split_words,1,[],https://github.com/trezor/trezor-core/pull/340,https://github.com/jpochyla,6,https://github.com/trezor/trezor-core/pull/340#issuecomment-419035167,"split_words and the Text component implement the same layout algorithm.
Fixes #330","Yes same here, let's merge it and revisit in the future.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,341,2018-08-31T12:08:47Z,2018-11-19T14:54:11Z,2018-11-30T15:07:36Z,MERGED,True,1085,483,59,https://github.com/tsusanka,Bip 44 path checks,4,[],https://github.com/trezor/trezor-core/pull/341,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/341,"This is a preliminary PR for BIP44 derivation path checks (#326). All altcoins are now checked (Bitcoin to be done). Each coin has a function which checks if the path is valid or not. This function is then passed into apps.common.paths.validate_path and called. If it returns False a warning is displayed.
There are still a few things that need to be addressed:

 allow 44'/43'/a' for NEM (just a tiny fix)
 investigate if address_n = msg.address_n or () is needed, it is quite common in the apps' code and I am not really sure it is needed removed and moved to #343
 I currently send the ButtonRequestType.Other message when displaying the warning - should I use a different one? Or create a new one?  renamed to UnknownDerivationPath
 the warning is now displayed as a first thing that happens. However, sometimes there are other check, so it is a bit stupid to confirm a path and then recieve a message that the data are invalid anyway. So maybe move it before the actual action (such as signing)?
 do Bitcoin checks

The tests are currently failing, but their correction is in tsusanka/paths in python-trezor.","This is a preliminary PR for BIP44 derivation path checks (#326). All altcoins are now checked (Bitcoin to be done). Each coin has a function which checks if the path is valid or not. This function is then passed into apps.common.paths.validate_path and called. If it returns False a warning is displayed.
There are still a few things that need to be addressed:

 allow 44'/43'/a' for NEM (just a tiny fix)
 investigate if address_n = msg.address_n or () is needed, it is quite common in the apps' code and I am not really sure it is needed removed and moved to #343
 I currently send the ButtonRequestType.Other message when displaying the warning - should I use a different one? Or create a new one?  renamed to UnknownDerivationPath
 the warning is now displayed as a first thing that happens. However, sometimes there are other check, so it is a bit stupid to confirm a path and then recieve a message that the data are invalid anyway. So maybe move it before the actual action (such as signing)?
 do Bitcoin checks

The tests are currently failing, but their correction is in tsusanka/paths in python-trezor.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,341,2018-08-31T12:08:47Z,2018-11-19T14:54:11Z,2018-11-30T15:07:36Z,MERGED,True,1085,483,59,https://github.com/tsusanka,Bip 44 path checks,4,[],https://github.com/trezor/trezor-core/pull/341,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/341#issuecomment-418743396,"This is a preliminary PR for BIP44 derivation path checks (#326). All altcoins are now checked (Bitcoin to be done). Each coin has a function which checks if the path is valid or not. This function is then passed into apps.common.paths.validate_path and called. If it returns False a warning is displayed.
There are still a few things that need to be addressed:

 allow 44'/43'/a' for NEM (just a tiny fix)
 investigate if address_n = msg.address_n or () is needed, it is quite common in the apps' code and I am not really sure it is needed removed and moved to #343
 I currently send the ButtonRequestType.Other message when displaying the warning - should I use a different one? Or create a new one?  renamed to UnknownDerivationPath
 the warning is now displayed as a first thing that happens. However, sometimes there are other check, so it is a bit stupid to confirm a path and then recieve a message that the data are invalid anyway. So maybe move it before the actual action (such as signing)?
 do Bitcoin checks

The tests are currently failing, but their correction is in tsusanka/paths in python-trezor.","Please note that this currently does not work on wallet.trezor.io, because:

the coin_name is always set to Bitcoin probably (trezor/trezor.js#73)
the wallet does not know UnknownDerivationPath ButtonRequestType (trezor/trezor.js#74)

And also waits for the tests to be fixed (WIP).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,341,2018-08-31T12:08:47Z,2018-11-19T14:54:11Z,2018-11-30T15:07:36Z,MERGED,True,1085,483,59,https://github.com/tsusanka,Bip 44 path checks,4,[],https://github.com/trezor/trezor-core/pull/341,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/341#issuecomment-436978929,"This is a preliminary PR for BIP44 derivation path checks (#326). All altcoins are now checked (Bitcoin to be done). Each coin has a function which checks if the path is valid or not. This function is then passed into apps.common.paths.validate_path and called. If it returns False a warning is displayed.
There are still a few things that need to be addressed:

 allow 44'/43'/a' for NEM (just a tiny fix)
 investigate if address_n = msg.address_n or () is needed, it is quite common in the apps' code and I am not really sure it is needed removed and moved to #343
 I currently send the ButtonRequestType.Other message when displaying the warning - should I use a different one? Or create a new one?  renamed to UnknownDerivationPath
 the warning is now displayed as a first thing that happens. However, sometimes there are other check, so it is a bit stupid to confirm a path and then recieve a message that the data are invalid anyway. So maybe move it before the actual action (such as signing)?
 do Bitcoin checks

The tests are currently failing, but their correction is in tsusanka/paths in python-trezor.",Note: we have agreed we will leave out checks for GetPublicKey for now till trezor/trezor.js#73 is implemented.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,341,2018-08-31T12:08:47Z,2018-11-19T14:54:11Z,2018-11-30T15:07:36Z,MERGED,True,1085,483,59,https://github.com/tsusanka,Bip 44 path checks,4,[],https://github.com/trezor/trezor-core/pull/341,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/341#issuecomment-437012651,"This is a preliminary PR for BIP44 derivation path checks (#326). All altcoins are now checked (Bitcoin to be done). Each coin has a function which checks if the path is valid or not. This function is then passed into apps.common.paths.validate_path and called. If it returns False a warning is displayed.
There are still a few things that need to be addressed:

 allow 44'/43'/a' for NEM (just a tiny fix)
 investigate if address_n = msg.address_n or () is needed, it is quite common in the apps' code and I am not really sure it is needed removed and moved to #343
 I currently send the ButtonRequestType.Other message when displaying the warning - should I use a different one? Or create a new one?  renamed to UnknownDerivationPath
 the warning is now displayed as a first thing that happens. However, sometimes there are other check, so it is a bit stupid to confirm a path and then recieve a message that the data are invalid anyway. So maybe move it before the actual action (such as signing)?
 do Bitcoin checks

The tests are currently failing, but their correction is in tsusanka/paths in python-trezor.",This is ready for review. Trezor will show this warning if the path is unknown:,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/ddeath,1,https://github.com/trezor/trezor-core/pull/342,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code","Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",True,{'HOORAY': ['https://github.com/vsubhuman']}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/342#issuecomment-418684557,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code","Please drop the changes in .gitmodules - the change in trezor-common is not needed anymore, changes in trezor-crypto were fully merged - please set the submodule to this commit to pick my other changes: trezor/trezor-crypto@0d21516",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/ddeath,3,https://github.com/trezor/trezor-core/pull/342#issuecomment-418758555,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",Changed submodules for common and crypto repositories,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/ddeath,4,https://github.com/trezor/trezor-core/pull/342#issuecomment-419090483,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",Forgot to add network parameter to signing transaction. Will add it asap.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/ddeath,5,https://github.com/trezor/trezor-core/pull/342#issuecomment-419165631,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code","I rebased the code to the master so the cardano verify and cardano sign message are removed, but it looks like on the master are python-trezor test failing - trezorlib/tests/device_tests/test_msg_resetdevice_t2.py and it is probably not caused with this PR",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/tsusanka,6,https://github.com/trezor/trezor-core/pull/342#issuecomment-419471706,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",@ddeath I've fixed the resetdevice test. However I think your tests are still failing. If I remove xfail mark from python-trezor I still get some failures in test_msg_cardano_sign_transaction.py. Could you have a look?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/ddeath,7,https://github.com/trezor/trezor-core/pull/342#issuecomment-419477340,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",@tsusanka yes it fails because python-trezor was merged before trezor-common so python-trezor does not have correct cardano messages. If you will run it with this trezor-common it will pass trezor/trezor-common@ab58324,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/342#issuecomment-419479638,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",Pushed update to python-trezor. Let's see how it goes.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/ddeath,9,https://github.com/trezor/trezor-core/pull/342#issuecomment-419489300,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",@tsusanka not sure what is going on here. The test are passing with gcc but not with clang could it be somehow caching some stuff? Not sure,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/342#issuecomment-419491340,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",Trying to restart the build,True,"{'HOORAY': ['https://github.com/tsusanka', 'https://github.com/ddeath']}"
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/prusnak,11,https://github.com/trezor/trezor-core/pull/342#issuecomment-419493257,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",All good!,True,{'THUMBS_UP': ['https://github.com/ddeath']}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/prusnak,12,https://github.com/trezor/trezor-core/pull/342#issuecomment-419499399,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",Please fix the 2 issues above and squash the commits into one. Then I'll merge.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/ddeath,13,https://github.com/trezor/trezor-core/pull/342#issuecomment-419503602,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code",Fixed,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,342,2018-09-04T10:41:17Z,2018-09-07T17:07:15Z,2018-09-07T17:18:02Z,MERGED,True,133,142,10,https://github.com/ddeath,Cardano derivation scheme v2,1,[],https://github.com/trezor/trezor-core/pull/342,https://github.com/prusnak,14,https://github.com/trezor/trezor-core/pull/342#issuecomment-419504955,"Added support for cardano derivation scheme v2.
The changes are also in trezor-crypto, trezor-common and python-trezor.
V1 is mainly used in the official cardano wallet Daedalus and V2 is new derivation scheme used in cardano project Icarus
Basicaly was added new parameter scheme to the calls and changes to the derivation code","LGTM, Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,348,2018-09-08T18:15:21Z,2018-09-28T08:43:19Z,2018-09-28T08:43:22Z,MERGED,True,2,1,1,https://github.com/alepop,lisk: fix _update_raw_tx function for second signature calculation,1,[],https://github.com/trezor/trezor-core/pull/348,https://github.com/alepop,1,https://github.com/trezor/trezor-core/pull/348,"This pr provides additional fixes for the previous PR #322
Transaction fields sender_public_key and recipient_id should be created by a device if they are not provided.
trezor-mcu pr for lisk integration also updated trezor/trezor-mcu@3404836","This pr provides additional fixes for the previous PR #322
Transaction fields sender_public_key and recipient_id should be created by a device if they are not provided.
trezor-mcu pr for lisk integration also updated trezor/trezor-mcu@3404836",True,{'THUMBS_UP': ['https://github.com/karek314']}
trezor/trezor-core,https://github.com/trezor/trezor-core,348,2018-09-08T18:15:21Z,2018-09-28T08:43:19Z,2018-09-28T08:43:22Z,MERGED,True,2,1,1,https://github.com/alepop,lisk: fix _update_raw_tx function for second signature calculation,1,[],https://github.com/trezor/trezor-core/pull/348,https://github.com/alepop,2,https://github.com/trezor/trezor-core/pull/348#issuecomment-425364344,"This pr provides additional fixes for the previous PR #322
Transaction fields sender_public_key and recipient_id should be created by a device if they are not provided.
trezor-mcu pr for lisk integration also updated trezor/trezor-mcu@3404836",@jpochyla could you please review this pr. thanks,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,348,2018-09-08T18:15:21Z,2018-09-28T08:43:19Z,2018-09-28T08:43:22Z,MERGED,True,2,1,1,https://github.com/alepop,lisk: fix _update_raw_tx function for second signature calculation,1,[],https://github.com/trezor/trezor-core/pull/348,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/348#issuecomment-425366340,"This pr provides additional fixes for the previous PR #322
Transaction fields sender_public_key and recipient_id should be created by a device if they are not provided.
trezor-mcu pr for lisk integration also updated trezor/trezor-mcu@3404836",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,350,2018-09-11T01:56:09Z,2018-09-18T08:59:57Z,2018-09-18T09:00:28Z,MERGED,True,1,1,1,https://github.com/zulucrypto,"Stellar: explicitly specifying native asset in payment op causes ""firmware error""",1,[],https://github.com/trezor/trezor-core/pull/350,https://github.com/zulucrypto,1,https://github.com/trezor/trezor-core/pull/350,"A payment op that uses the native asset will have an asset of type 0 and no other fields populated.
This gets parsed into a protobuf message like:
StellarPaymentOp (67 bytes) {
    amount: 10000000,
    asset: StellarAssetType (2 bytes) {
        type: 0,
    },
    destination_account: '<redacted>',
}

This shows up in python as an asset with a type but without a code or issuer. Since the asset is non-null, the code in _write_asset attempts to read asset.code and fails.
You can reproduce this by running the following command against the Model T emulator:
trezorctl -v stellar_sign_transaction -n ""Test SDF Network ; September 2015"" AAAAABXWSL/k028ZbPtXNf/YylTNS4Iz90PyJEnefPMBzbRpAAAAZAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAdV71t94srF0FKF9TmMK7sgQXPj9XH+Ma8Mv213jtSksAAAAAAAAAAACYloAAAAAAAAAAAA==

Adding a test?
I tried to add a test for this to the trezor-python repo but when I ran the test suite and it tried to load the mnemonic I got the following error:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trezorlib/tests/device_tests/common.py:72: in setup_mnemonic_nopin_nopassphrase
    self._setup_mnemonic()
trezorlib/tests/device_tests/common.py:65: in _setup_mnemonic
    language=""english"",
trezorlib/tools.py:192: in wrapped_f
    ret = f(*args, **kwargs)
trezorlib/debuglink.py:186: in load_device_by_mnemonic
    skip_checksum=skip_checksum,
trezorlib/client.py:148: in call
    msg = handler(resp)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trezorlib.client.TrezorClientDebugLink object at 0x7f0a84bcd2b0>
msg = <Failure: {'code': 1, 'message': 'Unexpected message'}>

    def callback_Failure(self, msg):
        if msg.code in (
            proto.FailureType.PinInvalid,
            proto.FailureType.PinCancelled,
            proto.FailureType.PinExpected,
        ):
            raise PinException(msg.code, msg.message)
    
>       raise tools.CallException(msg.code, msg.message)
E       trezorlib.tools.CallException: (1, 'Unexpected message')

trezorlib/client.py:165: CallException
--------------------------------------- Captured stdout setup ----------------------------------------
Pressing True
User pressed ""y""

I'm also unable to load the mnemonic from the command line into the Model T emulator (I get the same ""unexpected message"" error). Is there a workaround or would you like me to log a separate issue?","A payment op that uses the native asset will have an asset of type 0 and no other fields populated.
This gets parsed into a protobuf message like:
StellarPaymentOp (67 bytes) {
    amount: 10000000,
    asset: StellarAssetType (2 bytes) {
        type: 0,
    },
    destination_account: '<redacted>',
}

This shows up in python as an asset with a type but without a code or issuer. Since the asset is non-null, the code in _write_asset attempts to read asset.code and fails.
You can reproduce this by running the following command against the Model T emulator:
trezorctl -v stellar_sign_transaction -n ""Test SDF Network ; September 2015"" AAAAABXWSL/k028ZbPtXNf/YylTNS4Iz90PyJEnefPMBzbRpAAAAZAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAdV71t94srF0FKF9TmMK7sgQXPj9XH+Ma8Mv213jtSksAAAAAAAAAAACYloAAAAAAAAAAAA==

Adding a test?
I tried to add a test for this to the trezor-python repo but when I ran the test suite and it tried to load the mnemonic I got the following error:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trezorlib/tests/device_tests/common.py:72: in setup_mnemonic_nopin_nopassphrase
    self._setup_mnemonic()
trezorlib/tests/device_tests/common.py:65: in _setup_mnemonic
    language=""english"",
trezorlib/tools.py:192: in wrapped_f
    ret = f(*args, **kwargs)
trezorlib/debuglink.py:186: in load_device_by_mnemonic
    skip_checksum=skip_checksum,
trezorlib/client.py:148: in call
    msg = handler(resp)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trezorlib.client.TrezorClientDebugLink object at 0x7f0a84bcd2b0>
msg = <Failure: {'code': 1, 'message': 'Unexpected message'}>

    def callback_Failure(self, msg):
        if msg.code in (
            proto.FailureType.PinInvalid,
            proto.FailureType.PinCancelled,
            proto.FailureType.PinExpected,
        ):
            raise PinException(msg.code, msg.message)
    
>       raise tools.CallException(msg.code, msg.message)
E       trezorlib.tools.CallException: (1, 'Unexpected message')

trezorlib/client.py:165: CallException
--------------------------------------- Captured stdout setup ----------------------------------------
Pressing True
User pressed ""y""

I'm also unable to load the mnemonic from the command line into the Model T emulator (I get the same ""unexpected message"" error). Is there a workaround or would you like me to log a separate issue?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,350,2018-09-11T01:56:09Z,2018-09-18T08:59:57Z,2018-09-18T09:00:28Z,MERGED,True,1,1,1,https://github.com/zulucrypto,"Stellar: explicitly specifying native asset in payment op causes ""firmware error""",1,[],https://github.com/trezor/trezor-core/pull/350,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/350#issuecomment-420190569,"A payment op that uses the native asset will have an asset of type 0 and no other fields populated.
This gets parsed into a protobuf message like:
StellarPaymentOp (67 bytes) {
    amount: 10000000,
    asset: StellarAssetType (2 bytes) {
        type: 0,
    },
    destination_account: '<redacted>',
}

This shows up in python as an asset with a type but without a code or issuer. Since the asset is non-null, the code in _write_asset attempts to read asset.code and fails.
You can reproduce this by running the following command against the Model T emulator:
trezorctl -v stellar_sign_transaction -n ""Test SDF Network ; September 2015"" AAAAABXWSL/k028ZbPtXNf/YylTNS4Iz90PyJEnefPMBzbRpAAAAZAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAdV71t94srF0FKF9TmMK7sgQXPj9XH+Ma8Mv213jtSksAAAAAAAAAAACYloAAAAAAAAAAAA==

Adding a test?
I tried to add a test for this to the trezor-python repo but when I ran the test suite and it tried to load the mnemonic I got the following error:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trezorlib/tests/device_tests/common.py:72: in setup_mnemonic_nopin_nopassphrase
    self._setup_mnemonic()
trezorlib/tests/device_tests/common.py:65: in _setup_mnemonic
    language=""english"",
trezorlib/tools.py:192: in wrapped_f
    ret = f(*args, **kwargs)
trezorlib/debuglink.py:186: in load_device_by_mnemonic
    skip_checksum=skip_checksum,
trezorlib/client.py:148: in call
    msg = handler(resp)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trezorlib.client.TrezorClientDebugLink object at 0x7f0a84bcd2b0>
msg = <Failure: {'code': 1, 'message': 'Unexpected message'}>

    def callback_Failure(self, msg):
        if msg.code in (
            proto.FailureType.PinInvalid,
            proto.FailureType.PinCancelled,
            proto.FailureType.PinExpected,
        ):
            raise PinException(msg.code, msg.message)
    
>       raise tools.CallException(msg.code, msg.message)
E       trezorlib.tools.CallException: (1, 'Unexpected message')

trezorlib/client.py:165: CallException
--------------------------------------- Captured stdout setup ----------------------------------------
Pressing True
User pressed ""y""

I'm also unable to load the mnemonic from the command line into the Model T emulator (I get the same ""unexpected message"" error). Is there a workaround or would you like me to log a separate issue?","I'm also unable to load the mnemonic from the command line into the Model T emulator (I get the same ""unexpected message"" error). Is there a workaround or would you like me to log a separate issue?

You need to run the emulator in debug mode to enable this message (PYOPT=0 ./emu.sh) - this will also erase storage on every start.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,350,2018-09-11T01:56:09Z,2018-09-18T08:59:57Z,2018-09-18T09:00:28Z,MERGED,True,1,1,1,https://github.com/zulucrypto,"Stellar: explicitly specifying native asset in payment op causes ""firmware error""",1,[],https://github.com/trezor/trezor-core/pull/350,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/350#issuecomment-420352558,"A payment op that uses the native asset will have an asset of type 0 and no other fields populated.
This gets parsed into a protobuf message like:
StellarPaymentOp (67 bytes) {
    amount: 10000000,
    asset: StellarAssetType (2 bytes) {
        type: 0,
    },
    destination_account: '<redacted>',
}

This shows up in python as an asset with a type but without a code or issuer. Since the asset is non-null, the code in _write_asset attempts to read asset.code and fails.
You can reproduce this by running the following command against the Model T emulator:
trezorctl -v stellar_sign_transaction -n ""Test SDF Network ; September 2015"" AAAAABXWSL/k028ZbPtXNf/YylTNS4Iz90PyJEnefPMBzbRpAAAAZAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAdV71t94srF0FKF9TmMK7sgQXPj9XH+Ma8Mv213jtSksAAAAAAAAAAACYloAAAAAAAAAAAA==

Adding a test?
I tried to add a test for this to the trezor-python repo but when I ran the test suite and it tried to load the mnemonic I got the following error:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trezorlib/tests/device_tests/common.py:72: in setup_mnemonic_nopin_nopassphrase
    self._setup_mnemonic()
trezorlib/tests/device_tests/common.py:65: in _setup_mnemonic
    language=""english"",
trezorlib/tools.py:192: in wrapped_f
    ret = f(*args, **kwargs)
trezorlib/debuglink.py:186: in load_device_by_mnemonic
    skip_checksum=skip_checksum,
trezorlib/client.py:148: in call
    msg = handler(resp)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trezorlib.client.TrezorClientDebugLink object at 0x7f0a84bcd2b0>
msg = <Failure: {'code': 1, 'message': 'Unexpected message'}>

    def callback_Failure(self, msg):
        if msg.code in (
            proto.FailureType.PinInvalid,
            proto.FailureType.PinCancelled,
            proto.FailureType.PinExpected,
        ):
            raise PinException(msg.code, msg.message)
    
>       raise tools.CallException(msg.code, msg.message)
E       trezorlib.tools.CallException: (1, 'Unexpected message')

trezorlib/client.py:165: CallException
--------------------------------------- Captured stdout setup ----------------------------------------
Pressing True
User pressed ""y""

I'm also unable to load the mnemonic from the command line into the Model T emulator (I get the same ""unexpected message"" error). Is there a workaround or would you like me to log a separate issue?","LGTM, but please add the test as instructed by @prusnak. I'll merge then",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,350,2018-09-11T01:56:09Z,2018-09-18T08:59:57Z,2018-09-18T09:00:28Z,MERGED,True,1,1,1,https://github.com/zulucrypto,"Stellar: explicitly specifying native asset in payment op causes ""firmware error""",1,[],https://github.com/trezor/trezor-core/pull/350,https://github.com/zulucrypto,4,https://github.com/trezor/trezor-core/pull/350#issuecomment-422221067,"A payment op that uses the native asset will have an asset of type 0 and no other fields populated.
This gets parsed into a protobuf message like:
StellarPaymentOp (67 bytes) {
    amount: 10000000,
    asset: StellarAssetType (2 bytes) {
        type: 0,
    },
    destination_account: '<redacted>',
}

This shows up in python as an asset with a type but without a code or issuer. Since the asset is non-null, the code in _write_asset attempts to read asset.code and fails.
You can reproduce this by running the following command against the Model T emulator:
trezorctl -v stellar_sign_transaction -n ""Test SDF Network ; September 2015"" AAAAABXWSL/k028ZbPtXNf/YylTNS4Iz90PyJEnefPMBzbRpAAAAZAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAdV71t94srF0FKF9TmMK7sgQXPj9XH+Ma8Mv213jtSksAAAAAAAAAAACYloAAAAAAAAAAAA==

Adding a test?
I tried to add a test for this to the trezor-python repo but when I ran the test suite and it tried to load the mnemonic I got the following error:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trezorlib/tests/device_tests/common.py:72: in setup_mnemonic_nopin_nopassphrase
    self._setup_mnemonic()
trezorlib/tests/device_tests/common.py:65: in _setup_mnemonic
    language=""english"",
trezorlib/tools.py:192: in wrapped_f
    ret = f(*args, **kwargs)
trezorlib/debuglink.py:186: in load_device_by_mnemonic
    skip_checksum=skip_checksum,
trezorlib/client.py:148: in call
    msg = handler(resp)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trezorlib.client.TrezorClientDebugLink object at 0x7f0a84bcd2b0>
msg = <Failure: {'code': 1, 'message': 'Unexpected message'}>

    def callback_Failure(self, msg):
        if msg.code in (
            proto.FailureType.PinInvalid,
            proto.FailureType.PinCancelled,
            proto.FailureType.PinExpected,
        ):
            raise PinException(msg.code, msg.message)
    
>       raise tools.CallException(msg.code, msg.message)
E       trezorlib.tools.CallException: (1, 'Unexpected message')

trezorlib/client.py:165: CallException
--------------------------------------- Captured stdout setup ----------------------------------------
Pressing True
User pressed ""y""

I'm also unable to load the mnemonic from the command line into the Model T emulator (I get the same ""unexpected message"" error). Is there a workaround or would you like me to log a separate issue?",Added test in trezor/python-trezor#311,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,350,2018-09-11T01:56:09Z,2018-09-18T08:59:57Z,2018-09-18T09:00:28Z,MERGED,True,1,1,1,https://github.com/zulucrypto,"Stellar: explicitly specifying native asset in payment op causes ""firmware error""",1,[],https://github.com/trezor/trezor-core/pull/350,https://github.com/tsusanka,5,https://github.com/trezor/trezor-core/pull/350#issuecomment-422314171,"A payment op that uses the native asset will have an asset of type 0 and no other fields populated.
This gets parsed into a protobuf message like:
StellarPaymentOp (67 bytes) {
    amount: 10000000,
    asset: StellarAssetType (2 bytes) {
        type: 0,
    },
    destination_account: '<redacted>',
}

This shows up in python as an asset with a type but without a code or issuer. Since the asset is non-null, the code in _write_asset attempts to read asset.code and fails.
You can reproduce this by running the following command against the Model T emulator:
trezorctl -v stellar_sign_transaction -n ""Test SDF Network ; September 2015"" AAAAABXWSL/k028ZbPtXNf/YylTNS4Iz90PyJEnefPMBzbRpAAAAZAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAdV71t94srF0FKF9TmMK7sgQXPj9XH+Ma8Mv213jtSksAAAAAAAAAAACYloAAAAAAAAAAAA==

Adding a test?
I tried to add a test for this to the trezor-python repo but when I ran the test suite and it tried to load the mnemonic I got the following error:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trezorlib/tests/device_tests/common.py:72: in setup_mnemonic_nopin_nopassphrase
    self._setup_mnemonic()
trezorlib/tests/device_tests/common.py:65: in _setup_mnemonic
    language=""english"",
trezorlib/tools.py:192: in wrapped_f
    ret = f(*args, **kwargs)
trezorlib/debuglink.py:186: in load_device_by_mnemonic
    skip_checksum=skip_checksum,
trezorlib/client.py:148: in call
    msg = handler(resp)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trezorlib.client.TrezorClientDebugLink object at 0x7f0a84bcd2b0>
msg = <Failure: {'code': 1, 'message': 'Unexpected message'}>

    def callback_Failure(self, msg):
        if msg.code in (
            proto.FailureType.PinInvalid,
            proto.FailureType.PinCancelled,
            proto.FailureType.PinExpected,
        ):
            raise PinException(msg.code, msg.message)
    
>       raise tools.CallException(msg.code, msg.message)
E       trezorlib.tools.CallException: (1, 'Unexpected message')

trezorlib/client.py:165: CallException
--------------------------------------- Captured stdout setup ----------------------------------------
Pressing True
User pressed ""y""

I'm also unable to load the mnemonic from the command line into the Model T emulator (I get the same ""unexpected message"" error). Is there a workaround or would you like me to log a separate issue?","All good, thank you!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,352,2018-09-14T15:56:07Z,2018-10-02T14:50:45Z,2018-10-02T14:50:45Z,MERGED,True,1,1,1,https://github.com/ph4r05,mock: fixes error in generated trezorcrypto mock,1,[],https://github.com/trezor/trezor-core/pull/352,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/352,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,353,2018-09-14T15:56:34Z,2018-10-02T14:50:53Z,2018-10-02T14:50:53Z,MERGED,True,1,1,1,https://github.com/ph4r05,tools/build_mocks fix,1,[],https://github.com/trezor/trezor-core/pull/353,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/353,"Fixes
uilding mocks for ../embed/extmod to ../mocks/generated
Traceback (most recent call last):
  File ""./build_mocks"", line 112, in <module>
    build_directory(""../embed/extmod"", ""../mocks/generated"")
  File ""./build_mocks"", line 87, in build_directory
    for mod in sorted(os.listdir(os.path.join(dir, pkg))):
NotADirectoryError: [Errno 20] Not a directory: '../embed/extmod/trezorobj.h'","Fixes
uilding mocks for ../embed/extmod to ../mocks/generated
Traceback (most recent call last):
  File ""./build_mocks"", line 112, in <module>
    build_directory(""../embed/extmod"", ""../mocks/generated"")
  File ""./build_mocks"", line 87, in build_directory
    for mod in sorted(os.listdir(os.path.join(dir, pkg))):
NotADirectoryError: [Errno 20] Not a directory: '../embed/extmod/trezorobj.h'",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,354,2018-09-15T12:45:04Z,2019-04-15T16:35:35Z,2019-04-15T16:35:36Z,CLOSED,False,683,0,7,https://github.com/fbsobreira,Add Tron Support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/354,https://github.com/fbsobreira,1,https://github.com/trezor/trezor-core/pull/354,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,354,2018-09-15T12:45:04Z,2019-04-15T16:35:35Z,2019-04-15T16:35:36Z,CLOSED,False,683,0,7,https://github.com/fbsobreira,Add Tron Support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/354,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/354#issuecomment-421749413,,Don't define your own writers in apps/tron/serialize.py but rather reuse ones from apps/common/writers.py,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,354,2018-09-15T12:45:04Z,2019-04-15T16:35:35Z,2019-04-15T16:35:36Z,CLOSED,False,683,0,7,https://github.com/fbsobreira,Add Tron Support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/354,https://github.com/fbsobreira,3,https://github.com/trezor/trezor-core/pull/354#issuecomment-421749679,,"Ok, thanks... I will work on it!
…
On Sun, Sep 16, 2018, 8:30 AM Pavol Rusnak ***@***.***> wrote:
 Don't define your own writers in apps/tron/serialize.py but rather reuse
 ones from apps/common/writers.py

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#354 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AIG_iC80GkOp_UH6UsyBmGliQzUNbUafks5ubjZMgaJpZM4WqV-y>
 .",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,354,2018-09-15T12:45:04Z,2019-04-15T16:35:35Z,2019-04-15T16:35:36Z,CLOSED,False,683,0,7,https://github.com/fbsobreira,Add Tron Support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/354,https://github.com/fbsobreira,4,https://github.com/trezor/trezor-core/pull/354#issuecomment-421839369,,"@prusnak  I have removed the writers that I was not using and also revert to prior trezor-common commit. Please let me know if there is any other suggestions.
Thank you",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,354,2018-09-15T12:45:04Z,2019-04-15T16:35:35Z,2019-04-15T16:35:36Z,CLOSED,False,683,0,7,https://github.com/fbsobreira,Add Tron Support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/354,https://github.com/fbsobreira,5,https://github.com/trezor/trezor-core/pull/354#issuecomment-424668392,,"@prusnak I removed Tron Messages from the PR, as they are already merged into trezor-core. Please let me know if there is anything else I should do.
Thank you.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,354,2018-09-15T12:45:04Z,2019-04-15T16:35:35Z,2019-04-15T16:35:36Z,CLOSED,False,683,0,7,https://github.com/fbsobreira,Add Tron Support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/354,https://github.com/matejcik,6,https://github.com/trezor/trezor-core/pull/354#issuecomment-472545352,,"let's reuse our built-in protobuf serialization capability instead of typing it out explicitly.
we probably don't want to use the protobuf definitions from trezor's protocol, because a) they (deliberately) don't match the Tron protobufs, and b) they should be able to evolve independently from Tron.
instead, please describe the parts of protobufs that you use in the same format as our protobuf generator uses, e.g., https://github.com/trezor/trezor-core/blob/master/src/trezor/messages/TezosDelegationOp.py, and place them into a submodule of your tron app.
You can probably avoid writing the __init__ method, just get_fields with appropriate data should be sufficient.
then you can create a BufferWriter class that lets you call protobuf.dump_message and retrieve the result, instead of explicitly writing out the serialization field by field",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,354,2018-09-15T12:45:04Z,2019-04-15T16:35:35Z,2019-04-15T16:35:36Z,CLOSED,False,683,0,7,https://github.com/fbsobreira,Add Tron Support,1,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/354,https://github.com/matejcik,7,https://github.com/trezor/trezor-core/pull/354#issuecomment-483326475,,"closing for cleanup now.
if you resume work on this, please apply your changes to the monorepo at https://github.com/trezor/trezor-firmware, along with your python-trezor PR, and resubmit",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,357,2018-09-18T16:24:22Z,2018-09-19T13:59:25Z,2018-09-19T13:59:31Z,MERGED,True,2383,1282,239,https://github.com/ph4r05,Protobuf message fields moved to get_fields method,2,[],https://github.com/trezor/trezor-core/pull/357,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/357,"Related to:

trezor/trezor-common#171
trezor/trezor-common#212
2 commits, version bump + re-generated messages and templates, protobuf.py update","Related to:

trezor/trezor-common#171
trezor/trezor-common#212
2 commits, version bump + re-generated messages and templates, protobuf.py update",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,357,2018-09-18T16:24:22Z,2018-09-19T13:59:25Z,2018-09-19T13:59:31Z,MERGED,True,2383,1282,239,https://github.com/ph4r05,Protobuf message fields moved to get_fields method,2,[],https://github.com/trezor/trezor-core/pull/357,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/357#issuecomment-422814760,"Related to:

trezor/trezor-common#171
trezor/trezor-common#212
2 commits, version bump + re-generated messages and templates, protobuf.py update",Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,1,https://github.com/trezor/trezor-core/pull/358,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).",True,{'THUMBS_UP': ['https://github.com/peterzen']}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/358#issuecomment-423495215,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","I put some inline comments, please address them, finish # TODO check if input changed and I think we are good to go!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/358#issuecomment-423496253,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Also if you know how to extract long chunks of code in the signing loop into separate functions, such as get_prev_output_value_decred you mention above, please do so.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,4,https://github.com/trezor/trezor-core/pull/358#issuecomment-424081642,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Addressed the review items, plus added a restriction to spending to/from decred_script_version != 0 as was done in trezor-mcu.
Long term, I think it might be better to add decred as a separate app (similar to tezos, etc) so that we'll support staking, changes to signature hash scheme, other signature types, etc. But this should suffice for initial support.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/358#issuecomment-424319120,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).",What wallet are you using to test the integration with?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,6,https://github.com/trezor/trezor-core/pull/358#issuecomment-424331259,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","dcrwallet+decrediton and dcrwallet+my custom decred/trezor cli wallet.
It will be slightly tricky if you want to try and get your hands into this to test because it needs custom dcrwallet and decrediton builds, but I can either arrange binaries or help you out if you want to try and build yourself.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/358#issuecomment-427567245,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Merged via 7834d06
Thank you!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/358#issuecomment-427573226,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","@matheusd I just noticed that your code behaves differently then the code on Trezor One - so this test fails: https://github.com/trezor/python-trezor/blob/master/trezorlib/tests/device_tests/test_msg_signtx_decred.py
Please advise.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,9,https://github.com/trezor/trezor-core/pull/358#issuecomment-427575342,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","I'm trying to setup my dev env to run the tests in python-trezor.
But looking at the test, maybe the problem was the change of the master key we introduced in trezor-crypto?
Nvm, seems you have updated the tests for that.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,10,https://github.com/trezor/trezor-core/pull/358#issuecomment-427583329,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Ok, so I've ran the test and reviewed things. Given that the protocol implemented for T2 is slightly different, the easiest thing would be to implement a new test specifically for T2.
Would that be acceptable?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,11,https://github.com/trezor/trezor-core/pull/358#issuecomment-427642395,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Would that be acceptable?

I strongly prefer to have the same protocol for T1 and T2. Why is your protocol for T2 different? Why did you implement it in a different fashion than on T1?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,12,https://github.com/trezor/trezor-core/pull/358#issuecomment-427799768,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Why did you implement it in a different fashion than on T1?

To minimize the amount of changes to the existing signing.py.
For example, check_tx_fee() in T2 returns a hash (h_first) but that's not the same as the prefix hash needed by decred, so I have to request the initial tx data again inside sign_tx().
singing.c in T1 uses global variables for all state, so it was easier to just add an additional hash (hash_prefix) and modify the appropriate places to fill it, which I assumed wouldn't be acceptable for T2.
If having the same protocol for decred is a hard requirement, I add further changes to support it, no problem.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,13,https://github.com/trezor/trezor-core/pull/358#issuecomment-427815228,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","@matheusd I understand the motivation now. However, when I remove all calls to self.client.set_expected_responses in trezorlib/tests/device_tests/test_msg_signtx_decred.py from python-trezor, the test will still fail with error in the emulator:
Traceback (most recent call last):
  File ""/home/stick/work/trezor/trezor-core/src/trezor/wire/__init__.py"", line 127, in session_handler
  File ""/home/stick/work/trezor/trezor-core/src/trezor/wire/__init__.py"", line 124, in session_handler
  File ""/home/stick/work/trezor/trezor-core/src/trezor/wire/__init__.py"", line 162, in protobuf_workflow
  File ""/home/stick/work/trezor/trezor-core/src/trezor/wire/__init__.py"", line 149, in protobuf_workflow
  File ""/home/stick/work/trezor/trezor-core/src/trezor/ui/__init__.py"", line 125, in inner
  File ""/home/stick/work/trezor/trezor-core/src/trezor/ui/__init__.py"", line 122, in inner
  File ""/home/stick/work/trezor/trezor-core/src/apps/wallet/sign_tx/__init__.py"", line 38, in sign_tx
  File ""/home/stick/work/trezor/trezor-core/src/apps/wallet/sign_tx/__init__.py"", line 28, in sign_tx
  File ""/home/stick/work/trezor/trezor-core/src/apps/wallet/sign_tx/signing.py"", line 482, in sign_tx
TypeError: unsupported types for __gt__: 'NoneType', 'int'

The problematic line contains:
            if txi.amount > authorized_in:

but the txi object does not contain amount field. This is weird - the amount field for inputs should be filled-in only for segwit-enabled coins and we have segwit: False for decred.
I am reverting the decred code in master for now. I created a decred branch where we can work on the integration further. I'll disable the decred test (test_msg_signtx_decred.py) in python-trezor, but please re-enable it in your local checkout (remove skip_t2 directive) and try it with self.client.set_expected_responses removed from the code.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,14,https://github.com/trezor/trezor-core/pull/358#issuecomment-428174633,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Removed the offending line, fixed multisig (which I wasn't testing because our wallet doesn't support bip48) and sign/verify.
I'll also submit a PR to python-trezor adding a test for sign/verify that should pass in both T1 and T2.
A note about the offending line in the previous comment: decred does support specifying the input amount irrespective of segwit, though currently it's not included in the signed hash. It does need to be either pushed by the client or filled as 0 by write_tx_input_decred_witness since it needs to be transmitted. Our wallet client code was filling it correctly, that's why the python test was failing in this particular line.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,15,https://github.com/trezor/trezor-core/pull/358#issuecomment-428178211,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","It seems the changes are going into the right direction, but you managed to break other signing tests. Please revisit your changes and try to fix all unit test breakages.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,16,https://github.com/trezor/trezor-core/pull/358#issuecomment-428225061,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","I picked up your changes into the decred branch and squashed them into a single commit.
Now when I run test_msg_signtx_decred.py (after removal of skip_t2 attribute) I see the following error in the emulator. The good thing is that other signtx tests are not broken this time.
1539096516439618 trezor.wire WARNING failure: Encountered invalid prev_hash

The error comes from this place: https://github.com/trezor/trezor-core/blob/decred/src/apps/wallet/sign_tx/signing.py#L625-L626 and it indicates you are hashing the prev_tx incorrectly.
If I remove the check, the decred test breaks on set_expected_responses. If I remove these from the test, the test is green! 🎉
So all we need is to fix the Encountered invalid prev_hash issue and create a new test_msg_signtx_decred_t2.py test with different fields in set_expected_responses that match the T2 behaviour.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,17,https://github.com/trezor/trezor-core/pull/358#issuecomment-428253385,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","I was just looking more into the unit test and realized that T2 signing, as suggested by you, has more messages in the signing exchange. I think it would be better if we follows T1 way more closely as it is more efficient when it comes to number of messages. ""Global"" state is not a problem if it just about introducing more hashers. You already introduced 3 of them anyway.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,18,https://github.com/trezor/trezor-core/pull/358#issuecomment-428374606,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Updated to use a ""pseudo-bip143"" hasher during the check_fee stage, such that the prefix hash is stored and then reused in sign_tx.
This will fail the CI due to requiring trezor/python-trezor#319 to fix the invalid_prev_hash error, so I'll rebase, update the submodule and retest everything once 319 is in.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/prusnak,19,https://github.com/trezor/trezor-core/pull/358#issuecomment-428540177,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).","Merged via 2277a9c
Thank you Matheus! 🎉",True,"{'HOORAY': ['https://github.com/matheusd', 'https://github.com/goodc0re', 'https://github.com/xaur']}"
trezor/trezor-core,https://github.com/trezor/trezor-core,358,2018-09-20T20:07:25Z,2018-10-10T11:42:09Z,2018-10-10T12:01:17Z,CLOSED,False,291,31,13,https://github.com/matheusd,decred: add initial support,2,[],https://github.com/trezor/trezor-core/pull/358,https://github.com/matheusd,20,https://github.com/trezor/trezor-core/pull/358#issuecomment-428545015,"Sending for early review to know whether the approach is acceptable for inclusion.
I've roughly followed what was done in trezor-mcu: adding a few conditional checks for decred then customizing where needed.
Please advise on whether this approach will be acceptable so I can do some clean up and improvements or if you'd prefer a more modular implementation (eg: creating a sign_tx_decred, get_prev_output_value_decred, etc).",Thank you for all the help and patience in getting this in!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,359,2018-09-23T16:48:54Z,2018-09-23T22:30:35Z,2018-09-23T22:30:59Z,MERGED,True,1,1,1,https://github.com/zulucrypto,Stellar - Fix typo in confirm_init,1,[],https://github.com/trezor/trezor-core/pull/359,https://github.com/zulucrypto,1,https://github.com/trezor/trezor-core/pull/359,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,359,2018-09-23T16:48:54Z,2018-09-23T22:30:35Z,2018-09-23T22:30:59Z,MERGED,True,1,1,1,https://github.com/zulucrypto,Stellar - Fix typo in confirm_init,1,[],https://github.com/trezor/trezor-core/pull/359,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/359#issuecomment-423852922,,thanks! although singing is also good :D,True,{'LAUGH': ['https://github.com/zulucrypto']}
trezor/trezor-core,https://github.com/trezor/trezor-core,369,2018-10-09T14:08:09Z,2018-10-10T12:53:06Z,2018-10-10T12:53:06Z,CLOSED,False,301,8,13,https://github.com/malinah,emulator debug build options and persistent flash across runtimes,4,"['emulator', 'enhancement']",https://github.com/trezor/trezor-core/pull/369,https://github.com/malinah,1,https://github.com/trezor/trezor-core/pull/369,"Handy patches to make the emulator more debug friendly.

Patched emulator build script for consistent debug builds.
Hotpatch tool for emulator to prevent flash wipe when running with PYOPT=0","Handy patches to make the emulator more debug friendly.

Patched emulator build script for consistent debug builds.
Hotpatch tool for emulator to prevent flash wipe when running with PYOPT=0",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,370,2018-10-10T12:56:10Z,2018-10-10T15:11:13Z,2018-10-10T15:37:42Z,CLOSED,False,39,8,5,https://github.com/malinah,unix: emulator debug build options and persistent flash across runtimes,3,"['emulator', 'enhancement']",https://github.com/trezor/trezor-core/pull/370,https://github.com/malinah,1,https://github.com/trezor/trezor-core/pull/370,"Handy patches to make the emulator more debug friendly.

Patched emulator build script for consistent debug builds.
Hotpatch tool for emulator to prevent flash wipe when running with PYOPT=0","Handy patches to make the emulator more debug friendly.

Patched emulator build script for consistent debug builds.
Hotpatch tool for emulator to prevent flash wipe when running with PYOPT=0",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,371,2018-10-10T12:58:22Z,2018-10-11T14:51:48Z,2018-10-11T14:51:52Z,CLOSED,False,202,2,7,https://github.com/malinah,unix: user profiles support for emulator,3,"['emulator', 'feature']",https://github.com/trezor/trezor-core/pull/371,https://github.com/malinah,1,https://github.com/trezor/trezor-core/pull/371,Support for user profiles allowing switching of emulator configurations.,Support for user profiles allowing switching of emulator configurations.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,371,2018-10-10T12:58:22Z,2018-10-11T14:51:48Z,2018-10-11T14:51:52Z,CLOSED,False,202,2,7,https://github.com/malinah,unix: user profiles support for emulator,3,"['emulator', 'feature']",https://github.com/trezor/trezor-core/pull/371,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/371#issuecomment-428985507,Support for user profiles allowing switching of emulator configurations.,Merged via fc9bc85,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,372,2018-10-10T15:44:55Z,2018-10-11T14:34:43Z,2018-10-11T14:34:49Z,CLOSED,False,37,7,4,https://github.com/malinah,unix: emulator debug build options,2,['enhancement'],https://github.com/trezor/trezor-core/pull/372,https://github.com/malinah,1,https://github.com/trezor/trezor-core/pull/372,To make the emulator more debug friendly patch emulator build script for consistent debug builds.,To make the emulator more debug friendly patch emulator build script for consistent debug builds.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,372,2018-10-10T15:44:55Z,2018-10-11T14:34:43Z,2018-10-11T14:34:49Z,CLOSED,False,37,7,4,https://github.com/malinah,unix: emulator debug build options,2,['enhancement'],https://github.com/trezor/trezor-core/pull/372,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/372#issuecomment-428979034,To make the emulator more debug friendly patch emulator build script for consistent debug builds.,Merged via 32fe5d2,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,373,2018-10-10T17:39:03Z,2018-10-15T11:37:38Z,2018-10-15T11:43:50Z,MERGED,True,13,4,4,https://github.com/malinah,firmware: log exceptions in debug mode (no silent unhandled exceptions),1,[],https://github.com/trezor/trezor-core/pull/373,https://github.com/malinah,1,https://github.com/trezor/trezor-core/pull/373,If the exceptions are not handled as part of the program logic at least log them. Now you can find out when you run out of memory etc.,If the exceptions are not handled as part of the program logic at least log them. Now you can find out when you run out of memory etc.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,373,2018-10-10T17:39:03Z,2018-10-15T11:37:38Z,2018-10-15T11:43:50Z,MERGED,True,13,4,4,https://github.com/malinah,firmware: log exceptions in debug mode (no silent unhandled exceptions),1,[],https://github.com/trezor/trezor-core/pull/373,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/373#issuecomment-429817363,If the exceptions are not handled as part of the program logic at least log them. Now you can find out when you run out of memory etc.,❤️,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,375,2018-10-13T02:14:43Z,2018-10-14T14:12:49Z,2018-10-14T14:12:49Z,CLOSED,False,16,2,3,https://github.com/leoreinaux,Add SmartCash support,2,[],https://github.com/trezor/trezor-core/pull/375,https://github.com/leoreinaux,1,https://github.com/trezor/trezor-core/pull/375,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,375,2018-10-13T02:14:43Z,2018-10-14T14:12:49Z,2018-10-14T14:12:49Z,CLOSED,False,16,2,3,https://github.com/leoreinaux,Add SmartCash support,2,[],https://github.com/trezor/trezor-core/pull/375,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/375#issuecomment-429629749,,Merged as 33e9dac. Thanks!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,381,2018-10-20T18:56:00Z,2018-11-14T16:36:54Z,2018-11-14T16:36:55Z,CLOSED,False,16,2,6,https://github.com/tarpas,Capricoin support.,2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/381,https://github.com/tarpas,1,https://github.com/trezor/trezor-core/pull/381,Please comment. This passes basic tests. We're working on more and will create pull request to python-trezor later.,Please comment. This passes basic tests. We're working on more and will create pull request to python-trezor later.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,381,2018-10-20T18:56:00Z,2018-11-14T16:36:54Z,2018-11-14T16:36:55Z,CLOSED,False,16,2,6,https://github.com/tarpas,Capricoin support.,2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/381,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/381#issuecomment-431662989,Please comment. This passes basic tests. We're working on more and will create pull request to python-trezor later.,Looks good. Please create device tests for new field in python-trezor and send a pull request there.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,381,2018-10-20T18:56:00Z,2018-11-14T16:36:54Z,2018-11-14T16:36:55Z,CLOSED,False,16,2,6,https://github.com/tarpas,Capricoin support.,2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/381,https://github.com/tarpas,3,https://github.com/trezor/trezor-core/pull/381#issuecomment-432219382,Please comment. This passes basic tests. We're working on more and will create pull request to python-trezor later.,"Tests done here: trezor/python-trezor#325 . It was pleasure to work on this, the code is very nicely engineered. Looking forward to your feedback/merge.",True,{'THUMBS_UP': ['https://github.com/knaperek']}
trezor/trezor-core,https://github.com/trezor/trezor-core,381,2018-10-20T18:56:00Z,2018-11-14T16:36:54Z,2018-11-14T16:36:55Z,CLOSED,False,16,2,6,https://github.com/tarpas,Capricoin support.,2,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/381,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/381#issuecomment-438728727,Please comment. This passes basic tests. We're working on more and will create pull request to python-trezor later.,"Merged via be58549
Thank you!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,385,2018-10-25T21:02:40Z,2018-10-26T12:42:16Z,2018-10-26T12:42:16Z,MERGED,True,6,0,1,https://github.com/Adman,Tezos: delegating contract in origination,1,[],https://github.com/trezor/trezor-core/pull/385,https://github.com/Adman,1,https://github.com/trezor/trezor-core/pull/385,"When creating contract, the user can immediately delegate it to baker. Therefore, we need to show this information on the screen, so we improve the security of setting that delegate.
Signed-off-by: Adrian Matejov adrian.matejov@simplestaking.com","When creating contract, the user can immediately delegate it to baker. Therefore, we need to show this information on the screen, so we improve the security of setting that delegate.
Signed-off-by: Adrian Matejov adrian.matejov@simplestaking.com",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,387,2018-10-27T12:03:14Z,2018-10-27T13:22:54Z,2018-11-02T15:07:23Z,MERGED,True,3,0,1,https://github.com/ph4r05,xmr: fixes sending to self with stealth payment ID,1,[],https://github.com/trezor/trezor-core/pull/387,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/387,"Fixes a bug when sending to the wallet address with stealth payment ID.
https://github.com/monero-project/monero/blob/4cbb476cd1f215926d3cc2b4ff6f397ffa5f347b/src/cryptonote_core/cryptonote_tx_utils.cpp#L196","Fixes a bug when sending to the wallet address with stealth payment ID.
https://github.com/monero-project/monero/blob/4cbb476cd1f215926d3cc2b4ff6f397ffa5f347b/src/cryptonote_core/cryptonote_tx_utils.cpp#L196",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,391,2018-11-01T09:34:33Z,2018-11-01T10:17:24Z,2018-11-02T15:07:23Z,MERGED,True,41,38,3,https://github.com/ph4r05,xmr: sort extra fields,1,[],https://github.com/trezor/trezor-core/pull/391,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/391,"Monero implemented sorting fields in the tx.extra in the https://github.com/monero-project/monero/blob/557c17e206c697174982d28636a29c149f07f630/src/cryptonote_core/cryptonote_tx_utils.cpp#L88
The tag ordering is:

TX_EXTRA_TAG_PUBKEY
TX_EXTRA_TAG_ADDITIONAL_PUBKEYS
TX_EXTRA_NONCE

I've implemented a small change that preserves this ordering on the Trezor so transactions do not leak info (ordering can indicate signer of the transaction) to the blockchain.
The only required change was to move TX_EXTRA_NONCE to the end of the extra field - so I've added state.extra_nonce field which is added to the tx.extra after all previous tags are in place.
I've also did some small refactoring to minimize buffer reallocation for extras.","Monero implemented sorting fields in the tx.extra in the https://github.com/monero-project/monero/blob/557c17e206c697174982d28636a29c149f07f630/src/cryptonote_core/cryptonote_tx_utils.cpp#L88
The tag ordering is:

TX_EXTRA_TAG_PUBKEY
TX_EXTRA_TAG_ADDITIONAL_PUBKEYS
TX_EXTRA_NONCE

I've implemented a small change that preserves this ordering on the Trezor so transactions do not leak info (ordering can indicate signer of the transaction) to the blockchain.
The only required change was to move TX_EXTRA_NONCE to the end of the extra field - so I've added state.extra_nonce field which is added to the tx.extra after all previous tags are in place.
I've also did some small refactoring to minimize buffer reallocation for extras.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,391,2018-11-01T09:34:33Z,2018-11-01T10:17:24Z,2018-11-02T15:07:23Z,MERGED,True,41,38,3,https://github.com/ph4r05,xmr: sort extra fields,1,[],https://github.com/trezor/trezor-core/pull/391,https://github.com/ph4r05,2,https://github.com/trezor/trezor-core/pull/391#issuecomment-434985550,"Monero implemented sorting fields in the tx.extra in the https://github.com/monero-project/monero/blob/557c17e206c697174982d28636a29c149f07f630/src/cryptonote_core/cryptonote_tx_utils.cpp#L88
The tag ordering is:

TX_EXTRA_TAG_PUBKEY
TX_EXTRA_TAG_ADDITIONAL_PUBKEYS
TX_EXTRA_NONCE

I've implemented a small change that preserves this ordering on the Trezor so transactions do not leak info (ordering can indicate signer of the transaction) to the blockchain.
The only required change was to move TX_EXTRA_NONCE to the end of the extra field - so I've added state.extra_nonce field which is added to the tx.extra after all previous tags are in place.
I've also did some small refactoring to minimize buffer reallocation for extras.","Moreover, I've added another testing scenario - transaction with all 3 tags in place - to the monero-agent.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,391,2018-11-01T09:34:33Z,2018-11-01T10:17:24Z,2018-11-02T15:07:23Z,MERGED,True,41,38,3,https://github.com/ph4r05,xmr: sort extra fields,1,[],https://github.com/trezor/trezor-core/pull/391,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/391#issuecomment-434995991,"Monero implemented sorting fields in the tx.extra in the https://github.com/monero-project/monero/blob/557c17e206c697174982d28636a29c149f07f630/src/cryptonote_core/cryptonote_tx_utils.cpp#L88
The tag ordering is:

TX_EXTRA_TAG_PUBKEY
TX_EXTRA_TAG_ADDITIONAL_PUBKEYS
TX_EXTRA_NONCE

I've implemented a small change that preserves this ordering on the Trezor so transactions do not leak info (ordering can indicate signer of the transaction) to the blockchain.
The only required change was to move TX_EXTRA_NONCE to the end of the extra field - so I've added state.extra_nonce field which is added to the tx.extra after all previous tags are in place.
I've also did some small refactoring to minimize buffer reallocation for extras.",LGTM! Thank you,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,394,2018-11-02T06:40:52Z,2018-11-02T14:26:49Z,2018-11-02T15:07:23Z,MERGED,True,183,130,5,https://github.com/ph4r05,xmr: MLSAG computation optimized,7,[],https://github.com/trezor/trezor-core/pull/394,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/394,"The PR has multiple commits so it is easier to follow the thought process of the refactoring.


90fd0bb MLSAG optimized to use in-memory computations, to reduce allocations and heap fragmentation


a462ea3 Manual MgSig structure serialization with precise size computation (maybe review this one very lightly as the most manual code serialization is removed later)


ddcb836: Generates MLSAG signature directly in a serialized form to MgSig to reduce memory overhead by half.


cdf9d51: Unimport after hmac and decrypt


0414a8e: My attempt to implement @jpochyla suggestion. I had to check whether the element of the array is not int or bool as some code seems to pass list of integers to bytes fields.


3d66ba1: Breaks down MgSig to list to avoid problems with fragmented heap if mixin number grows larger.","The PR has multiple commits so it is easier to follow the thought process of the refactoring.


90fd0bb MLSAG optimized to use in-memory computations, to reduce allocations and heap fragmentation


a462ea3 Manual MgSig structure serialization with precise size computation (maybe review this one very lightly as the most manual code serialization is removed later)


ddcb836: Generates MLSAG signature directly in a serialized form to MgSig to reduce memory overhead by half.


cdf9d51: Unimport after hmac and decrypt


0414a8e: My attempt to implement @jpochyla suggestion. I had to check whether the element of the array is not int or bool as some code seems to pass list of integers to bytes fields.


3d66ba1: Breaks down MgSig to list to avoid problems with fragmented heap if mixin number grows larger.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,394,2018-11-02T06:40:52Z,2018-11-02T14:26:49Z,2018-11-02T15:07:23Z,MERGED,True,183,130,5,https://github.com/ph4r05,xmr: MLSAG computation optimized,7,[],https://github.com/trezor/trezor-core/pull/394,https://github.com/ph4r05,2,https://github.com/trezor/trezor-core/pull/394#issuecomment-435356282,"The PR has multiple commits so it is easier to follow the thought process of the refactoring.


90fd0bb MLSAG optimized to use in-memory computations, to reduce allocations and heap fragmentation


a462ea3 Manual MgSig structure serialization with precise size computation (maybe review this one very lightly as the most manual code serialization is removed later)


ddcb836: Generates MLSAG signature directly in a serialized form to MgSig to reduce memory overhead by half.


cdf9d51: Unimport after hmac and decrypt


0414a8e: My attempt to implement @jpochyla suggestion. I had to check whether the element of the array is not int or bool as some code seems to pass list of integers to bytes fields.


3d66ba1: Breaks down MgSig to list to avoid problems with fragmented heap if mixin number grows larger.","Tests passed:
Testing[bp=True]: tsx_t_uns_08_sub_mix19_inp32_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix19_inp64_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix49_inp32_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix49_inp64_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix99_inp32_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix99_inp64_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix19_inp128_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix19_inp256_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix49_inp128_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix49_inp256_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix99_inp128_out16.txt
OK
Testing[bp=True]: tsx_t_uns_08_sub_mix99_inp256_out16.txt
OK",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,394,2018-11-02T06:40:52Z,2018-11-02T14:26:49Z,2018-11-02T15:07:23Z,MERGED,True,183,130,5,https://github.com/ph4r05,xmr: MLSAG computation optimized,7,[],https://github.com/trezor/trezor-core/pull/394,https://github.com/ph4r05,3,https://github.com/trezor/trezor-core/pull/394#issuecomment-435356502,"The PR has multiple commits so it is easier to follow the thought process of the refactoring.


90fd0bb MLSAG optimized to use in-memory computations, to reduce allocations and heap fragmentation


a462ea3 Manual MgSig structure serialization with precise size computation (maybe review this one very lightly as the most manual code serialization is removed later)


ddcb836: Generates MLSAG signature directly in a serialized form to MgSig to reduce memory overhead by half.


cdf9d51: Unimport after hmac and decrypt


0414a8e: My attempt to implement @jpochyla suggestion. I had to check whether the element of the array is not int or bool as some code seems to pass list of integers to bytes fields.


3d66ba1: Breaks down MgSig to list to avoid problems with fragmented heap if mixin number grows larger.","monero-agent updated to v1.7.4, supports these heavy test cases
TREZOR_PATH=webusb:020:1 EC_BACKEND_FORCE=1 EC_BACKEND=1 ./venv/bin/python -m unittest trezor_monero_test.test_trezor_heavy.TrezorTestHeavy",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,395,2018-11-02T13:43:00Z,2018-11-02T14:47:44Z,2018-11-02T15:07:23Z,MERGED,True,11,0,2,https://github.com/ph4r05,xmr: key image sync progress info,1,[],https://github.com/trezor/trezor-core/pull/395,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/395,Adds very simple progress view for key image sync so user knows Trezor is working on the sync (otherwise it could look like something went wrong / frozen),Adds very simple progress view for key image sync so user knows Trezor is working on the sync (otherwise it could look like something went wrong / frozen),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,396,2018-11-06T14:52:41Z,2018-12-03T16:39:17Z,2018-12-03T16:39:31Z,CLOSED,False,312,283,19,https://github.com/jpochyla,WIP: Refactor Bitcoin-like transaction signing,2,[],https://github.com/trezor/trezor-core/pull/396,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/396,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,396,2018-11-06T14:52:41Z,2018-12-03T16:39:17Z,2018-12-03T16:39:31Z,CLOSED,False,312,283,19,https://github.com/jpochyla,WIP: Refactor Bitcoin-like transaction signing,2,[],https://github.com/trezor/trezor-core/pull/396,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/396#issuecomment-443777157,,"Deferred, current commits moved into #411.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/atkachyshyn,1,https://github.com/trezor/trezor-core/pull/397,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/397#issuecomment-436433236,,Depends on trezor/trezor-common#231,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/atkachyshyn,3,https://github.com/trezor/trezor-core/pull/397#issuecomment-436596274,,Conflicts resolved,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/397#issuecomment-437369783,,Can you please rebase on top of master and squash the commits into one?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/keepkeyjon,5,https://github.com/trezor/trezor-core/pull/397#issuecomment-437632309,,"I think you need to check that the action named in EosTxActionAck.common matches which field was populated in the other half of that message. Otherwise a user could be tricked into confirming a different action than they intended. Likewise, as a safety measure, in the hasher for EosActionUnknown, you should have it inspect the first few bytes to be signed, and reject the whole transaction if it specifies an action that is handled by one of the other messages.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/keepkeyjon,6,https://github.com/trezor/trezor-core/pull/397#issuecomment-437680102,,"Related thought: should each of these ""blessed"" actions be pinned to the relevant contract that they're for? I.e. one shouldn't be able to use the dialogs for eosio.token::transfer to sign actions for foobar.contract::transfer, as the latter may have different semantics than what the dialogs tell you.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/tarassh,7,https://github.com/trezor/trezor-core/pull/397#issuecomment-438353069,,"@keepkeyjon partially you are right. But, from empirical observation, transfer for other tokens are compatible with eosio.token semantic. Without this restriction we are able to cover all generic tokens that are already deployed and will be deployed in future.
Also, on practice it is easier to update smart contract with semantic in order to not overlap with transfer that has no relation to tokens than sequentially update firmware with new tokens.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/keepkeyjon,8,https://github.com/trezor/trezor-core/pull/397#issuecomment-438371144,,"Good point. It's probably good enough to print the contract name.
As a side-thought, I've been considering how we could encode every contract's abi in a big table, much like ethereum_tokens.c in trezor-mcu, and use the lookup to properly format / serialize all actions for all known contracts. For unknown contracts, we could provide a way for a user to upload & verify table entries, or even sign them & store them off-device for use later. It'd be really cool to have a solution that scales across ETH/EOS/etc, with different chain-specific serialization primitives.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/tsusanka,9,https://github.com/trezor/trezor-core/pull/397#issuecomment-448147633,,Note to us: let's have a look at https://github.com/satoshilabs/slips/blob/master/slip-0048.md if it is used or should be,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/keepkeyjon,10,https://github.com/trezor/trezor-core/pull/397#issuecomment-448278291,,"FWIW, Ledger and Exodus both use a SLIP44-like path of: m/44'/194'/0'/0/0. I'd be interested to see a list of wallets that adopted SLIP48 on EOS.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/matejcik,11,https://github.com/trezor/trezor-core/pull/397#issuecomment-448278938,,"FWIW, Ledger and Exodus both use a SLIP44-like path of: m/44'/194'/0'/0/0. I'd be interested to see a list of wallets that adopted SLIP48 on EOS.

what's the point of the /0/0 at end though?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/keepkeyjon,12,https://github.com/trezor/trezor-core/pull/397#issuecomment-448279176,,Beats me.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/prusnak,13,https://github.com/trezor/trezor-core/pull/397#issuecomment-448280450,,"Same fuckup as Ripple, see https://github.com/trezor/trezor-core/tree/master/docs/coins#Ripple",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/tarassh,14,https://github.com/trezor/trezor-core/pull/397#issuecomment-448343409,,"If this is a mistake then why PR satoshilabs/slips#217
was accepted?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/matejcik,15,https://github.com/trezor/trezor-core/pull/397#issuecomment-473387185,,"for now let's ignore SLIP-48 and use m/44'/194'/a'/0/0, same as the Ripple fuckup.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/matejcik,16,https://github.com/trezor/trezor-core/pull/397#issuecomment-478670753,,"Given that every transfer encodes its own token symbol, I'm wondering what to do about the possibility that some random.token starts using EOS symbol, or similar.
There's a risk to the user if two contracts decide to use the same symbol: from the current UI you can't tell which contract you're using. So the user might confirm a transaction of ""12 XYZ"", intending cheaptoken account, but instead confirming expensivetkn account.
The Transfer UI should probably show account name. (System actions don't need it because it's always ""eosio"", and unknown actions display it already).
We might also want a system for ""supported tokens"" similar to Ethereum, by which we would link known account names to token symbols.
What do you think?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/tarassh,17,https://github.com/trezor/trezor-core/pull/397#issuecomment-478914609,,"Given that every transfer encodes its own token symbol, I'm wondering what to do about the possibility that some random.token starts using EOS symbol, or similar.
There's a risk to the user if two contracts decide to use the same symbol: from the current UI you can't tell which contract you're using. So the user might confirm a transaction of ""12 XYZ"", intending cheaptoken account, but instead confirming expensivetkn account.
The Transfer UI should probably show account name. (System actions don't need it because it's always ""eosio"", and unknown actions display it already).
We might also want a system for ""supported tokens"" similar to Ethereum, by which we would link known account names to token symbols.
What do you think?

Yes, good point. I can confirm Ledger displays contract name on transfer.
As for system of ""supported tokens"", I am not sure if there is a need for that as in Eos contract address is a name which is readable.",True,{'THUMBS_UP': ['https://github.com/matejcik']}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/atkachyshyn,18,https://github.com/trezor/trezor-core/pull/397#issuecomment-480414232,,"@matejcik There are some strange issues with test, it doesn't see Eos messages. I thought that after i have added Eos to build_protobuf it would be fixed, but unfortunately it's not. Do i miss something?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/prusnak,19,https://github.com/trezor/trezor-core/pull/397#issuecomment-480426695,,@atkachyshyn you need to run the build_protobuf script manually and commit the newly created files. the script is not run automatically during the build.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/atkachyshyn,20,https://github.com/trezor/trezor-core/pull/397#issuecomment-480530000,,"@atkachyshyn you need to run the build_protobuf script manually and commit the newly created files. the script is not run automatically during the build.

Thanks, i've already committed them and it helped. I have also fixed build and stylings.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/matejcik,21,https://github.com/trezor/trezor-core/pull/397#issuecomment-480813938,,"I have added a small tweak to the process_action function. Overall, LGTM from me, modulo the address_n feature.
passing onto @jpochyla",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/jpochyla,22,https://github.com/trezor/trezor-core/pull/397#issuecomment-482058061,,"Requested some very minor changes, otherwise ack.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,397,2018-11-06T18:29:48Z,2019-04-15T16:27:23Z,2019-04-15T16:27:23Z,CLOSED,False,1877,1,44,https://github.com/atkachyshyn,Add Eos support,16,"['firmware', 'altcoin']",https://github.com/trezor/trezor-core/pull/397,https://github.com/matejcik,23,https://github.com/trezor/trezor-core/pull/397#issuecomment-483323457,,"closing for cleanup now.
please apply your changes to the monorepo at https://github.com/trezor/trezor-firmware, together with the corresponding python-trezor PR, and resubmit.
feel free to simply copy over the changes, or if you want to do a merge, have a look at https://github.com/trezor/trezor-firmware/blob/master/README-monorepo.md",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,398,2018-11-07T16:42:10Z,2018-11-08T14:55:48Z,2018-11-08T14:55:51Z,MERGED,True,123,79,12,https://github.com/prusnak,embed/extmod/modtrezorconfig: refactor PIN UI wait callback,1,[],https://github.com/trezor/trezor-core/pull/398,https://github.com/prusnak,1,https://github.com/trezor/trezor-core/pull/398,"This commit accomplishes several goals:

it removes any upy dependencies from storage.c/storage.h
ui wait callback is set during config_init and storage_init, which allows to simplify the code dramatically","This commit accomplishes several goals:

it removes any upy dependencies from storage.c/storage.h
ui wait callback is set during config_init and storage_init, which allows to simplify the code dramatically",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,407,2018-11-09T18:13:24Z,2018-11-12T11:00:58Z,2018-11-12T11:39:29Z,CLOSED,False,20,0,1,https://github.com/brakmic,added CoinInfo for Actinium (ACM),1,[],https://github.com/trezor/trezor-core/pull/407,https://github.com/brakmic,1,https://github.com/trezor/trezor-core/pull/407,"Expanded COINS array in coininfo.py.
I've already checked the protos in trezor-common but couldn't find anything that should be adapted to Actinium. However, there is a high probability that I have missed some important parts, so please, correct me if I am wrong.
I am currently reading the docs on API, Testing, and Emulation in trezor-core.
Regards,","Expanded COINS array in coininfo.py.
I've already checked the protos in trezor-common but couldn't find anything that should be adapted to Actinium. However, there is a high probability that I have missed some important parts, so please, correct me if I am wrong.
I am currently reading the docs on API, Testing, and Emulation in trezor-core.
Regards,",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,407,2018-11-09T18:13:24Z,2018-11-12T11:00:58Z,2018-11-12T11:39:29Z,CLOSED,False,20,0,1,https://github.com/brakmic,added CoinInfo for Actinium (ACM),1,[],https://github.com/trezor/trezor-core/pull/407,https://github.com/matejcik,2,https://github.com/trezor/trezor-core/pull/407#issuecomment-437839546,"Expanded COINS array in coininfo.py.
I've already checked the protos in trezor-common but couldn't find anything that should be adapted to Actinium. However, there is a high probability that I have missed some important parts, so please, correct me if I am wrong.
I am currently reading the docs on API, Testing, and Emulation in trezor-core.
Regards,","the file you edited is autogenerated.
you will need to add the appropriate data to trezor-common/defs, update reference in trezor-core and regenerate this file with make templates",True,{'THUMBS_UP': ['https://github.com/brakmic']}
trezor/trezor-core,https://github.com/trezor/trezor-core,407,2018-11-09T18:13:24Z,2018-11-12T11:00:58Z,2018-11-12T11:39:29Z,CLOSED,False,20,0,1,https://github.com/brakmic,added CoinInfo for Actinium (ACM),1,[],https://github.com/trezor/trezor-core/pull/407,https://github.com/matejcik,3,https://github.com/trezor/trezor-core/pull/407#issuecomment-437840034,"Expanded COINS array in coininfo.py.
I've already checked the protos in trezor-common but couldn't find anything that should be adapted to Actinium. However, there is a high probability that I have missed some important parts, so please, correct me if I am wrong.
I am currently reading the docs on API, Testing, and Emulation in trezor-core.
Regards,","seeing that ACM is already merged in trezor-common, all left to do is the steps outlined above",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,407,2018-11-09T18:13:24Z,2018-11-12T11:00:58Z,2018-11-12T11:39:29Z,CLOSED,False,20,0,1,https://github.com/brakmic,added CoinInfo for Actinium (ACM),1,[],https://github.com/trezor/trezor-core/pull/407,https://github.com/brakmic,4,https://github.com/trezor/trezor-core/pull/407#issuecomment-437840073,"Expanded COINS array in coininfo.py.
I've already checked the protos in trezor-common but couldn't find anything that should be adapted to Actinium. However, there is a high probability that I have missed some important parts, so please, correct me if I am wrong.
I am currently reading the docs on API, Testing, and Emulation in trezor-core.
Regards,",Many thanks for the explanation! 👍,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,407,2018-11-09T18:13:24Z,2018-11-12T11:00:58Z,2018-11-12T11:39:29Z,CLOSED,False,20,0,1,https://github.com/brakmic,added CoinInfo for Actinium (ACM),1,[],https://github.com/trezor/trezor-core/pull/407,https://github.com/brakmic,5,https://github.com/trezor/trezor-core/pull/407#issuecomment-437846574,"Expanded COINS array in coininfo.py.
I've already checked the protos in trezor-common but couldn't find anything that should be adapted to Actinium. However, there is a high probability that I have missed some important parts, so please, correct me if I am wrong.
I am currently reading the docs on API, Testing, and Emulation in trezor-core.
Regards,","Just a hint: the referenced submodules in trezor-core point at versions without ACM defs under vendor/trezor-common/defs/bitcoin subdir. Therefore, I would have to manually move ACM def files there before executing make templates.
Not sure if this is the correct way of doing things. I have hoped that my initial git clone --recursive trezor-core-repo would bring the latest vendor/trezor-common module as well. A quick check of the currently referenced version of trezor-common inside trezor-core via GitHub brought me to a different version without ACM defs.
Not sure what to do now.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,407,2018-11-09T18:13:24Z,2018-11-12T11:00:58Z,2018-11-12T11:39:29Z,CLOSED,False,20,0,1,https://github.com/brakmic,added CoinInfo for Actinium (ACM),1,[],https://github.com/trezor/trezor-core/pull/407,https://github.com/matejcik,6,https://github.com/trezor/trezor-core/pull/407#issuecomment-437847402,"Expanded COINS array in coininfo.py.
I've already checked the protos in trezor-common but couldn't find anything that should be adapted to Actinium. However, there is a high probability that I have missed some important parts, so please, correct me if I am wrong.
I am currently reading the docs on API, Testing, and Emulation in trezor-core.
Regards,","Submodule references in Git point to a specific commit by design. What your git clone --recursive does is fetch that particular commit. It's not supposed to get the latest version; on the contrary, you're supposed to update the reference so that it points to a commit with your defs in it. (usually to the most up-to-date version, through e.g. going to the vendor/trezor-common subdir and git checkout master; git pull)",True,{'THUMBS_UP': ['https://github.com/brakmic']}
trezor/trezor-core,https://github.com/trezor/trezor-core,407,2018-11-09T18:13:24Z,2018-11-12T11:00:58Z,2018-11-12T11:39:29Z,CLOSED,False,20,0,1,https://github.com/brakmic,added CoinInfo for Actinium (ACM),1,[],https://github.com/trezor/trezor-core/pull/407,https://github.com/brakmic,7,https://github.com/trezor/trezor-core/pull/407#issuecomment-437849377,"Expanded COINS array in coininfo.py.
I've already checked the protos in trezor-common but couldn't find anything that should be adapted to Actinium. However, there is a high probability that I have missed some important parts, so please, correct me if I am wrong.
I am currently reading the docs on API, Testing, and Emulation in trezor-core.
Regards,",Many thanks. Already changing it!,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,408,2018-11-12T10:38:10Z,2018-11-12T11:04:56Z,2018-11-12T11:04:56Z,MERGED,True,1,1,1,https://github.com/vladimirvolek,Added missing package for OS X,1,[],https://github.com/trezor/trezor-core/pull/408,https://github.com/vladimirvolek,1,https://github.com/trezor/trezor-core/pull/408,This package was missing while build (make build_unix),This package was missing while build (make build_unix),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,409,2018-11-12T11:45:51Z,2018-11-12T13:14:48Z,2018-11-12T13:18:44Z,CLOSED,False,108,1,3,https://github.com/brakmic,add Actinium (ACM) support,1,[],https://github.com/trezor/trezor-core/pull/409,https://github.com/brakmic,1,https://github.com/trezor/trezor-core/pull/409,"Pulled latest changes from trezor-common that also contain coin info on ACM.
Generated coin info via make templates.
Created a separate branch on my side, actinium-integration, in case other changes are needed.
This Pull Request is 2nd attempt to bring ACM into trezor-core.","Pulled latest changes from trezor-common that also contain coin info on ACM.
Generated coin info via make templates.
Created a separate branch on my side, actinium-integration, in case other changes are needed.
This Pull Request is 2nd attempt to bring ACM into trezor-core.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,409,2018-11-12T11:45:51Z,2018-11-12T13:14:48Z,2018-11-12T13:18:44Z,CLOSED,False,108,1,3,https://github.com/brakmic,add Actinium (ACM) support,1,[],https://github.com/trezor/trezor-core/pull/409,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/409#issuecomment-437875364,"Pulled latest changes from trezor-common that also contain coin info on ACM.
Generated coin info via make templates.
Created a separate branch on my side, actinium-integration, in case other changes are needed.
This Pull Request is 2nd attempt to bring ACM into trezor-core.",updated via 342c364,True,{'HOORAY': ['https://github.com/brakmic']}
trezor/trezor-core,https://github.com/trezor/trezor-core,411,2018-11-13T16:10:38Z,2018-12-13T15:06:02Z,2019-01-15T12:32:00Z,MERGED,True,783,658,70,https://github.com/jpochyla,Introduce Keychain API,11,[],https://github.com/trezor/trezor-core/pull/411,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/411,"Introduces a new way for obtaining keys derived from the master secret. Deriving itself is now synchronous, and namespaced to a set of key-spaces, consisting of curve name and namespacing path.
Fixes #343","Introduces a new way for obtaining keys derived from the master secret. Deriving itself is now synchronous, and namespaced to a set of key-spaces, consisting of curve name and namespacing path.
Fixes #343",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,411,2018-11-13T16:10:38Z,2018-12-13T15:06:02Z,2019-01-15T12:32:00Z,MERGED,True,783,658,70,https://github.com/jpochyla,Introduce Keychain API,11,[],https://github.com/trezor/trezor-core/pull/411,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/411#issuecomment-441626377,"Introduces a new way for obtaining keys derived from the master secret. Deriving itself is now synchronous, and namespaced to a set of key-spaces, consisting of curve name and namespacing path.
Fixes #343","I'm happy with the code now, requesting review.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,411,2018-11-13T16:10:38Z,2018-12-13T15:06:02Z,2019-01-15T12:32:00Z,MERGED,True,783,658,70,https://github.com/jpochyla,Introduce Keychain API,11,[],https://github.com/trezor/trezor-core/pull/411,https://github.com/jpochyla,3,https://github.com/trezor/trezor-core/pull/411#issuecomment-443726129,"Introduces a new way for obtaining keys derived from the master secret. Deriving itself is now synchronous, and namespaced to a set of key-spaces, consisting of curve name and namespacing path.
Fixes #343",Let's include namespace values for all apps in the PR as well.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,412,2018-11-14T16:13:27Z,2018-11-15T15:33:32Z,2018-11-15T15:33:32Z,CLOSED,False,8,7,1,https://github.com/RostarMarek,Reworked export address to be consistent with other currencies,1,[],https://github.com/trezor/trezor-core/pull/412,https://github.com/RostarMarek,1,https://github.com/trezor/trezor-core/pull/412,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,412,2018-11-14T16:13:27Z,2018-11-15T15:33:32Z,2018-11-15T15:33:32Z,CLOSED,False,8,7,1,https://github.com/RostarMarek,Reworked export address to be consistent with other currencies,1,[],https://github.com/trezor/trezor-core/pull/412,https://github.com/refi93,2,https://github.com/trezor/trezor-core/pull/412#issuecomment-438723112,,"we will reopen the PR soon, just wanted to review it internally first",True,{'THUMBS_UP': ['https://github.com/ladykevs']}
trezor/trezor-core,https://github.com/trezor/trezor-core,412,2018-11-14T16:13:27Z,2018-11-15T15:33:32Z,2018-11-15T15:33:32Z,CLOSED,False,8,7,1,https://github.com/RostarMarek,Reworked export address to be consistent with other currencies,1,[],https://github.com/trezor/trezor-core/pull/412,https://github.com/RostarMarek,3,https://github.com/trezor/trezor-core/pull/412#issuecomment-439081541,,"Closing, since this functionality will be added in PR together with signing ux improvement which is coming soon and partially depends on this PR",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,413,2018-11-14T17:52:55Z,2019-01-15T17:04:51Z,2019-01-15T20:27:01Z,MERGED,True,22,2,2,https://github.com/MrMebelMan,"make help - typo fix, add spacing & refactor",3,[],https://github.com/trezor/trezor-core/pull/413,https://github.com/MrMebelMan,1,https://github.com/trezor/trezor-core/pull/413,"Fixed ""code generation"" label (there was  ## instead of :)
Added nice spacing after each group of commands.
Moved the awk command to a separate file for readability.","Fixed ""code generation"" label (there was  ## instead of :)
Added nice spacing after each group of commands.
Moved the awk command to a separate file for readability.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,413,2018-11-14T17:52:55Z,2019-01-15T17:04:51Z,2019-01-15T20:27:01Z,MERGED,True,22,2,2,https://github.com/MrMebelMan,"make help - typo fix, add spacing & refactor",3,[],https://github.com/trezor/trezor-core/pull/413,https://github.com/MrMebelMan,2,https://github.com/trezor/trezor-core/pull/413#issuecomment-454538730,"Fixed ""code generation"" label (there was  ## instead of :)
Added nice spacing after each group of commands.
Moved the awk command to a separate file for readability.",❤️,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,416,2018-11-19T17:01:22Z,2018-11-27T13:42:50Z,2018-11-27T13:42:50Z,MERGED,True,1,1,1,https://github.com/tarpas,Fixing make test_emu in some environments.,1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/416,https://github.com/tarpas,1,https://github.com/trezor/trezor-core/pull/416,"Running make test_emu in trezor-core doesn't work for me. trezor-core/tests/unittest.py overshadows the standard library unittest, so pytest is unable to start at all (exception below).
(trezor-core) bash-3.2$ make test_emu
cd tests ; ./run_tests_device_emu.sh 
Traceback (most recent call last):
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/bin/pytest"", line 7, in <module>
    from pytest import main
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/pytest.py"", line 13, in <module>
    from _pytest.debugging import pytestPDB as __pytestPDB
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/_pytest/debugging.py"", line 8, in <module>
    from doctest import UnexpectedException
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/doctest.py"", line 104, in <module>
    import unittest
  File ""/Users/tibor/cpc/trezor-core/tests/unittest.py"", line 1, in <module>
    from trezor.utils import ensure
ModuleNotFoundError: No module named 'trezor'
make: *** [test_emu] Error 1

I've seen the test_emu target work for people but I'm not sure how.","Running make test_emu in trezor-core doesn't work for me. trezor-core/tests/unittest.py overshadows the standard library unittest, so pytest is unable to start at all (exception below).
(trezor-core) bash-3.2$ make test_emu
cd tests ; ./run_tests_device_emu.sh 
Traceback (most recent call last):
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/bin/pytest"", line 7, in <module>
    from pytest import main
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/pytest.py"", line 13, in <module>
    from _pytest.debugging import pytestPDB as __pytestPDB
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/_pytest/debugging.py"", line 8, in <module>
    from doctest import UnexpectedException
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/doctest.py"", line 104, in <module>
    import unittest
  File ""/Users/tibor/cpc/trezor-core/tests/unittest.py"", line 1, in <module>
    from trezor.utils import ensure
ModuleNotFoundError: No module named 'trezor'
make: *** [test_emu] Error 1

I've seen the test_emu target work for people but I'm not sure how.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,416,2018-11-19T17:01:22Z,2018-11-27T13:42:50Z,2018-11-27T13:42:50Z,MERGED,True,1,1,1,https://github.com/tarpas,Fixing make test_emu in some environments.,1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/416,https://github.com/matejcik,2,https://github.com/trezor/trezor-core/pull/416#issuecomment-439966529,"Running make test_emu in trezor-core doesn't work for me. trezor-core/tests/unittest.py overshadows the standard library unittest, so pytest is unable to start at all (exception below).
(trezor-core) bash-3.2$ make test_emu
cd tests ; ./run_tests_device_emu.sh 
Traceback (most recent call last):
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/bin/pytest"", line 7, in <module>
    from pytest import main
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/pytest.py"", line 13, in <module>
    from _pytest.debugging import pytestPDB as __pytestPDB
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/_pytest/debugging.py"", line 8, in <module>
    from doctest import UnexpectedException
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/doctest.py"", line 104, in <module>
    import unittest
  File ""/Users/tibor/cpc/trezor-core/tests/unittest.py"", line 1, in <module>
    from trezor.utils import ensure
ModuleNotFoundError: No module named 'trezor'
make: *** [test_emu] Error 1

I've seen the test_emu target work for people but I'm not sure how.","this is reasonable, but it should probably be cd .. instead; you don't want to linger in the src directory either",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,416,2018-11-19T17:01:22Z,2018-11-27T13:42:50Z,2018-11-27T13:42:50Z,MERGED,True,1,1,1,https://github.com/tarpas,Fixing make test_emu in some environments.,1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/416,https://github.com/tarpas,3,https://github.com/trezor/trezor-core/pull/416#issuecomment-439970668,"Running make test_emu in trezor-core doesn't work for me. trezor-core/tests/unittest.py overshadows the standard library unittest, so pytest is unable to start at all (exception below).
(trezor-core) bash-3.2$ make test_emu
cd tests ; ./run_tests_device_emu.sh 
Traceback (most recent call last):
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/bin/pytest"", line 7, in <module>
    from pytest import main
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/pytest.py"", line 13, in <module>
    from _pytest.debugging import pytestPDB as __pytestPDB
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/_pytest/debugging.py"", line 8, in <module>
    from doctest import UnexpectedException
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/doctest.py"", line 104, in <module>
    import unittest
  File ""/Users/tibor/cpc/trezor-core/tests/unittest.py"", line 1, in <module>
    from trezor.utils import ensure
ModuleNotFoundError: No module named 'trezor'
make: *** [test_emu] Error 1

I've seen the test_emu target work for people but I'm not sure how.","this is reasonable, but it should probably be cd .. instead; you don't want to linger in the src directory either

done.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,416,2018-11-19T17:01:22Z,2018-11-27T13:42:50Z,2018-11-27T13:42:50Z,MERGED,True,1,1,1,https://github.com/tarpas,Fixing make test_emu in some environments.,1,"['firmware', 'enhancement']",https://github.com/trezor/trezor-core/pull/416,https://github.com/matejcik,4,https://github.com/trezor/trezor-core/pull/416#issuecomment-439971210,"Running make test_emu in trezor-core doesn't work for me. trezor-core/tests/unittest.py overshadows the standard library unittest, so pytest is unable to start at all (exception below).
(trezor-core) bash-3.2$ make test_emu
cd tests ; ./run_tests_device_emu.sh 
Traceback (most recent call last):
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/bin/pytest"", line 7, in <module>
    from pytest import main
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/pytest.py"", line 13, in <module>
    from _pytest.debugging import pytestPDB as __pytestPDB
  File ""/Users/tibor/.virtualenvs/trezor-core-JdiA6MQI/lib/python3.7/site-packages/_pytest/debugging.py"", line 8, in <module>
    from doctest import UnexpectedException
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/doctest.py"", line 104, in <module>
    import unittest
  File ""/Users/tibor/cpc/trezor-core/tests/unittest.py"", line 1, in <module>
    from trezor.utils import ensure
ModuleNotFoundError: No module named 'trezor'
make: *** [test_emu] Error 1

I've seen the test_emu target work for people but I'm not sure how.","Just for completeness: in a properly configured Python environment, CWD is not added to path, as that would be insane. The original problem is most likely caused by explicitly adding . to Python path, possibly through PYTHONPATH=. in your environment.
I think this PR is a good idea anyway though.",True,{'THUMBS_UP': ['https://github.com/tarpas']}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/refi93,1,https://github.com/trezor/trezor-core/pull/417,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant","unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/refi93,2,https://github.com/trezor/trezor-core/pull/417#issuecomment-440223268,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant","Question: How to properly display the derivation path in the title for exporting an address? Since cardano's index is 1815', it does not leave a lot of space to fit an address index with more than one or two digits. What solution do you suggest?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/refi93,3,https://github.com/trezor/trezor-core/pull/417#issuecomment-443232801,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant","We thought a bit more about the ""network"" attribute being sent with the transaction and we suggest changing it directly to protocol magic - the integer being serialized in the signature, specific for the network. This allows trezor to sign transactions for custom networks, which is not possible right now. There are already PRs on trezor-common and trezor-connect repos to update the name of the field in the calls: trezor/trezor-common#244 , trezor/connect#272, https://github.com/trezor/python-trezor/pull/342/files
To prevent an attack where the adversary tricks the signer into taking transaction inputs from the mainnet when wanting to send a testnet transaction we suggest displaying the network explicitly. It's probably a hypothetical attack, but better stay on the safe side. We made this change a separate commit, so if you think this should be a separate PR we can easily do it.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/417#issuecomment-443237103,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant",Depends on trezor/trezor-common#244,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/refi93,5,https://github.com/trezor/trezor-core/pull/417#issuecomment-453744746,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant","@jpochyla fixed code style and removed dead code. I did not manage to successfully run the tests in python-trezor though: trezor/python-trezor#342 seems like emulation of swipe and confirm does not work for test_msg_cardano_sign_transaction.py. It waits for manually swiping and confirming. And I do not understand from the code, how to properly emulate those events. What am I missing?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/jpochyla,6,https://github.com/trezor/trezor-core/pull/417#issuecomment-454422223,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant","@refi93 We are testing the swipable dialogs this way: https://github.com/trezor/python-trezor/blob/master/trezorlib/tests/device_tests/test_msg_resetdevice_t2.py#L56, it should work in all cases that use trezor.ui.scroll.",True,{'THUMBS_UP': ['https://github.com/refi93']}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/prusnak,7,https://github.com/trezor/trezor-core/pull/417#issuecomment-455570896,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant",FYI I just merged trezor/trezor-common#244 into master,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/refi93,8,https://github.com/trezor/trezor-core/pull/417#issuecomment-455595252,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant","@jpochyla I added ButtonRequests to confirm_transaction and confirm_sending screens so it is testable, hence the force push.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/refi93,9,https://github.com/trezor/trezor-core/pull/417#issuecomment-455623959,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant",updated trezor-common submodule,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,417,2018-11-20T10:16:44Z,2019-01-29T15:47:26Z,2019-01-29T15:47:26Z,MERGED,True,170,86,6,https://github.com/refi93,Cardano improvements,2,"['altcoin', 'ui', 'enhancement']",https://github.com/trezor/trezor-core/pull/417,https://github.com/refi93,10,https://github.com/trezor/trezor-core/pull/417#issuecomment-457612501,"unified address export screen with other cryptourrencies (displaying QR/string)
changed UI of signing transactions to be more similar to BTC
better grouping of information when signing Tx and dropping info about network and tx size which we deem redundant","I recently added output address validation, updated tests (i.e. python-trezor) accordingly",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,418,2018-11-20T15:54:01Z,2019-01-10T14:49:06Z,2019-01-10T14:49:06Z,CLOSED,False,49,0,5,https://github.com/vladimirvolek,Run emulator in docker,10,[],https://github.com/trezor/trezor-core/pull/418,https://github.com/vladimirvolek,1,https://github.com/trezor/trezor-core/pull/418,resolves: #415,resolves: #415,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,418,2018-11-20T15:54:01Z,2019-01-10T14:49:06Z,2019-01-10T14:49:06Z,CLOSED,False,49,0,5,https://github.com/vladimirvolek,Run emulator in docker,10,[],https://github.com/trezor/trezor-core/pull/418,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/418#issuecomment-440644676,resolves: #415,Btw the docker-build.sh and docker-run.sh could/should be replaced by docker-compose. I might be able to help with that if needed,True,{'THUMBS_UP': ['https://github.com/jpochyla']}
trezor/trezor-core,https://github.com/trezor/trezor-core,418,2018-11-20T15:54:01Z,2019-01-10T14:49:06Z,2019-01-10T14:49:06Z,CLOSED,False,49,0,5,https://github.com/vladimirvolek,Run emulator in docker,10,[],https://github.com/trezor/trezor-core/pull/418,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/418#issuecomment-442036927,resolves: #415,"Agreed, we'll look into this after bridge is added.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,418,2018-11-20T15:54:01Z,2019-01-10T14:49:06Z,2019-01-10T14:49:06Z,CLOSED,False,49,0,5,https://github.com/vladimirvolek,Run emulator in docker,10,[],https://github.com/trezor/trezor-core/pull/418,https://github.com/vladimirvolek,4,https://github.com/trezor/trezor-core/pull/418#issuecomment-451503101,resolves: #415,Bridge in docker: trezor/trezord-go#125,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,418,2018-11-20T15:54:01Z,2019-01-10T14:49:06Z,2019-01-10T14:49:06Z,CLOSED,False,49,0,5,https://github.com/vladimirvolek,Run emulator in docker,10,[],https://github.com/trezor/trezor-core/pull/418,https://github.com/vladimirvolek,5,https://github.com/trezor/trezor-core/pull/418#issuecomment-452691827,resolves: #415,related to trezor/trezor-wallet#311,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,418,2018-11-20T15:54:01Z,2019-01-10T14:49:06Z,2019-01-10T14:49:06Z,CLOSED,False,49,0,5,https://github.com/vladimirvolek,Run emulator in docker,10,[],https://github.com/trezor/trezor-core/pull/418,https://github.com/tsusanka,6,https://github.com/trezor/trezor-core/pull/418#issuecomment-453121128,resolves: #415,Merged via 6ea25bd,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,420,2018-11-22T15:17:30Z,2018-11-26T13:47:07Z,2018-11-26T15:48:42Z,MERGED,True,33,10,1,https://github.com/matejcik,embed/trezorhal: only poll CTPM when touch is detected,1,[],https://github.com/trezor/trezor-core/pull/420,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/420,"Because CTPM dislikes being polled when no touches are seen, keeps resetting, and maybe freezes once in a while. This is very likely a fix for #334.
Before, we would simply read the touch registers on every loop. Now we first check whether the interrupt line is down, which indicates that the CTPM has data to tell us.
Tracking the touching flag is necessary, as sometimes we don't poll frequently enough to catch the TOUCH_END event before interrupt line goes up again.
The last_packet handling miiight not be necessary - AFAICT, the CTPM has some sort of buffer and always returns TOUCH_START at first and TOUCH_END at last. Still, better safe than sorry.

I'm still testing whether #334 is actually fixed with this. But this patch is likely correct in any case.","Because CTPM dislikes being polled when no touches are seen, keeps resetting, and maybe freezes once in a while. This is very likely a fix for #334.
Before, we would simply read the touch registers on every loop. Now we first check whether the interrupt line is down, which indicates that the CTPM has data to tell us.
Tracking the touching flag is necessary, as sometimes we don't poll frequently enough to catch the TOUCH_END event before interrupt line goes up again.
The last_packet handling miiight not be necessary - AFAICT, the CTPM has some sort of buffer and always returns TOUCH_START at first and TOUCH_END at last. Still, better safe than sorry.

I'm still testing whether #334 is actually fixed with this. But this patch is likely correct in any case.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,425,2018-11-27T13:34:35Z,2018-11-27T13:50:00Z,2018-11-30T15:12:19Z,MERGED,True,40,35,6,https://github.com/jpochyla,"Reduce flickering, fix MacOS Mojave issues",2,[],https://github.com/trezor/trezor-core/pull/425,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/425,"Fixes #402
Fixes #104","Fixes #402
Fixes #104",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,426,2018-11-27T21:23:29Z,2018-11-28T08:37:48Z,2018-11-29T03:58:35Z,MERGED,True,1,1,1,https://github.com/ph4r05,xmr: payment ID computation fix,1,[],https://github.com/trezor/trezor-core/pull/426,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/426,"Typo in tail differentiating tag caused invalid short payment id encryption. was 0x8B, should have been 0x8D.
Correct computation:
enc_payment_id = payment_id ^ cn_fast_hash(derivation + b'\x8D')
Tail tag 0x8D was mistyped as 0x8B which yields a different hash which is used for XOR.
No funds are lost, but payment ID is incorrect which can cause payment linking problems when using exchanges / markets.
Recipient of the message can recompute the payment ID:
derivation = 8 * view_key_private * tx_key_public
correct_payment_id = enc_payment_id ^ cn_fast_hash(derivation + b'\x8D')
OR from the wrongly decrypted plain payment id:
correct_payment_id = wrongly_decrypted_payment_id ^ cn_fast_hash(derivation + b'\x8D') ^ cn_fast_hash(derivation + b'\x8B')
Demonstration code that decodes payment ID correctly, takes transaction ID and secret view key:
https://gist.github.com/ph4r05/b95c085b101cd9c9ba5dad104dfab007
The PR will be added to the Monero-wallet-cli which will check for firmware version and block transactions with short payment IDs if the firmware version is <=2.0.9. Stay tuned.
Sources:

https://github.com/monero-project/monero/blob/69b646494b17a02e381128e54caebccf2d2b7729/src/device/device_default.cpp#L39
https://github.com/monero-project/monero/blob/69b646494b17a02e381128e54caebccf2d2b7729/src/device/device_default.cpp#L287
Fixes problem reported in https://www.reddit.com/r/TREZOR/comments/a0ugt8/problem_when_using_monero/","Typo in tail differentiating tag caused invalid short payment id encryption. was 0x8B, should have been 0x8D.
Correct computation:
enc_payment_id = payment_id ^ cn_fast_hash(derivation + b'\x8D')
Tail tag 0x8D was mistyped as 0x8B which yields a different hash which is used for XOR.
No funds are lost, but payment ID is incorrect which can cause payment linking problems when using exchanges / markets.
Recipient of the message can recompute the payment ID:
derivation = 8 * view_key_private * tx_key_public
correct_payment_id = enc_payment_id ^ cn_fast_hash(derivation + b'\x8D')
OR from the wrongly decrypted plain payment id:
correct_payment_id = wrongly_decrypted_payment_id ^ cn_fast_hash(derivation + b'\x8D') ^ cn_fast_hash(derivation + b'\x8B')
Demonstration code that decodes payment ID correctly, takes transaction ID and secret view key:
https://gist.github.com/ph4r05/b95c085b101cd9c9ba5dad104dfab007
The PR will be added to the Monero-wallet-cli which will check for firmware version and block transactions with short payment IDs if the firmware version is <=2.0.9. Stay tuned.
Sources:

https://github.com/monero-project/monero/blob/69b646494b17a02e381128e54caebccf2d2b7729/src/device/device_default.cpp#L39
https://github.com/monero-project/monero/blob/69b646494b17a02e381128e54caebccf2d2b7729/src/device/device_default.cpp#L287
Fixes problem reported in https://www.reddit.com/r/TREZOR/comments/a0ugt8/problem_when_using_monero/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,426,2018-11-27T21:23:29Z,2018-11-28T08:37:48Z,2018-11-29T03:58:35Z,MERGED,True,1,1,1,https://github.com/ph4r05,xmr: payment ID computation fix,1,[],https://github.com/trezor/trezor-core/pull/426,https://github.com/ph4r05,2,https://github.com/trezor/trezor-core/pull/426#issuecomment-442233444,"Typo in tail differentiating tag caused invalid short payment id encryption. was 0x8B, should have been 0x8D.
Correct computation:
enc_payment_id = payment_id ^ cn_fast_hash(derivation + b'\x8D')
Tail tag 0x8D was mistyped as 0x8B which yields a different hash which is used for XOR.
No funds are lost, but payment ID is incorrect which can cause payment linking problems when using exchanges / markets.
Recipient of the message can recompute the payment ID:
derivation = 8 * view_key_private * tx_key_public
correct_payment_id = enc_payment_id ^ cn_fast_hash(derivation + b'\x8D')
OR from the wrongly decrypted plain payment id:
correct_payment_id = wrongly_decrypted_payment_id ^ cn_fast_hash(derivation + b'\x8D') ^ cn_fast_hash(derivation + b'\x8B')
Demonstration code that decodes payment ID correctly, takes transaction ID and secret view key:
https://gist.github.com/ph4r05/b95c085b101cd9c9ba5dad104dfab007
The PR will be added to the Monero-wallet-cli which will check for firmware version and block transactions with short payment IDs if the firmware version is <=2.0.9. Stay tuned.
Sources:

https://github.com/monero-project/monero/blob/69b646494b17a02e381128e54caebccf2d2b7729/src/device/device_default.cpp#L39
https://github.com/monero-project/monero/blob/69b646494b17a02e381128e54caebccf2d2b7729/src/device/device_default.cpp#L287
Fixes problem reported in https://www.reddit.com/r/TREZOR/comments/a0ugt8/problem_when_using_monero/","Tests fixed too, pls re-run Travis",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,426,2018-11-27T21:23:29Z,2018-11-28T08:37:48Z,2018-11-29T03:58:35Z,MERGED,True,1,1,1,https://github.com/ph4r05,xmr: payment ID computation fix,1,[],https://github.com/trezor/trezor-core/pull/426,https://github.com/ph4r05,3,https://github.com/trezor/trezor-core/pull/426#issuecomment-442698038,"Typo in tail differentiating tag caused invalid short payment id encryption. was 0x8B, should have been 0x8D.
Correct computation:
enc_payment_id = payment_id ^ cn_fast_hash(derivation + b'\x8D')
Tail tag 0x8D was mistyped as 0x8B which yields a different hash which is used for XOR.
No funds are lost, but payment ID is incorrect which can cause payment linking problems when using exchanges / markets.
Recipient of the message can recompute the payment ID:
derivation = 8 * view_key_private * tx_key_public
correct_payment_id = enc_payment_id ^ cn_fast_hash(derivation + b'\x8D')
OR from the wrongly decrypted plain payment id:
correct_payment_id = wrongly_decrypted_payment_id ^ cn_fast_hash(derivation + b'\x8D') ^ cn_fast_hash(derivation + b'\x8B')
Demonstration code that decodes payment ID correctly, takes transaction ID and secret view key:
https://gist.github.com/ph4r05/b95c085b101cd9c9ba5dad104dfab007
The PR will be added to the Monero-wallet-cli which will check for firmware version and block transactions with short payment IDs if the firmware version is <=2.0.9. Stay tuned.
Sources:

https://github.com/monero-project/monero/blob/69b646494b17a02e381128e54caebccf2d2b7729/src/device/device_default.cpp#L39
https://github.com/monero-project/monero/blob/69b646494b17a02e381128e54caebccf2d2b7729/src/device/device_default.cpp#L287
Fixes problem reported in https://www.reddit.com/r/TREZOR/comments/a0ugt8/problem_when_using_monero/",Mitigation implemented in monero-project/monero#4839,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,427,2018-11-30T11:34:32Z,2018-11-30T12:32:15Z,2018-11-30T13:43:05Z,MERGED,True,7,6,1,https://github.com/tsusanka,eth/verify: path is not validated; improve invalid signature handling,1,[],https://github.com/trezor/trezor-core/pull/427,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/427,"Ethereum's verify_function takes an actual address as an argument not a
derivation path. So any path validation does not make any sense.
Also, if the verify_recover function raises an exception, it gets
propogated as a DataError (additional fix for #422).","Ethereum's verify_function takes an actual address as an argument not a
derivation path. So any path validation does not make any sense.
Also, if the verify_recover function raises an exception, it gets
propogated as a DataError (additional fix for #422).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,428,2018-11-30T13:45:17Z,2018-11-30T14:56:31Z,2018-11-30T14:56:31Z,MERGED,True,9,2,3,https://github.com/tsusanka,wallet: do not validate script type in sign message function,1,[],https://github.com/trezor/trezor-core/pull/428,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/428,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,434,2018-12-13T18:18:14Z,2018-12-24T12:16:17Z,2018-12-24T18:32:23Z,CLOSED,False,26,3,3,https://github.com/charlesrocket,Add AXE support,2,[],https://github.com/trezor/trezor-core/pull/434,https://github.com/charlesrocket,1,https://github.com/trezor/trezor-core/pull/434,"bump trezor-common to 6708499
update templates","bump trezor-common to 6708499
update templates",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,434,2018-12-13T18:18:14Z,2018-12-24T12:16:17Z,2018-12-24T18:32:23Z,CLOSED,False,26,3,3,https://github.com/charlesrocket,Add AXE support,2,[],https://github.com/trezor/trezor-core/pull/434,https://github.com/charlesrocket,2,https://github.com/trezor/trezor-core/pull/434#issuecomment-449682933,"bump trezor-common to 6708499
update templates",should I re-pull common to fix new conflicts?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,434,2018-12-13T18:18:14Z,2018-12-24T12:16:17Z,2018-12-24T18:32:23Z,CLOSED,False,26,3,3,https://github.com/charlesrocket,Add AXE support,2,[],https://github.com/trezor/trezor-core/pull/434,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/434#issuecomment-449727131,"bump trezor-common to 6708499
update templates","No, we will update the list  before the release.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,438,2018-12-16T20:23:00Z,2018-12-16T20:34:34Z,2018-12-16T20:36:11Z,CLOSED,False,21,1,2,https://github.com/bedeabza,Added Gincoin support,2,[],https://github.com/trezor/trezor-core/pull/438,https://github.com/bedeabza,1,https://github.com/trezor/trezor-core/pull/438,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,438,2018-12-16T20:23:00Z,2018-12-16T20:34:34Z,2018-12-16T20:36:11Z,CLOSED,False,21,1,2,https://github.com/bedeabza,Added Gincoin support,2,[],https://github.com/trezor/trezor-core/pull/438,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/438#issuecomment-447673616,,This we'll do automatically before the release of next firmware.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,438,2018-12-16T20:23:00Z,2018-12-16T20:34:34Z,2018-12-16T20:36:11Z,CLOSED,False,21,1,2,https://github.com/bedeabza,Added Gincoin support,2,[],https://github.com/trezor/trezor-core/pull/438,https://github.com/bedeabza,3,https://github.com/trezor/trezor-core/pull/438#issuecomment-447673703,,"Ok, was not familiar with the process. What is the ETA and how will I know of the updates?
Thank you!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,439,2018-12-16T22:04:33Z,2019-02-12T13:47:08Z,2019-02-12T13:47:13Z,CLOSED,False,41,0,4,https://github.com/prusnak,Find ideal value for touch screen sensitivity (aka threshold),1,[],https://github.com/trezor/trezor-core/pull/439,https://github.com/prusnak,1,https://github.com/trezor/trezor-core/pull/439,"It is possible to set touch screen sensitivity. The default seems to be 0x12 (I read this value from 0x80 register), but maybe a lower value is a better choice.
See the example of touch screen sensitivity issue here:  #402 (and video inside: https://youtu.be/cbt5-aXAhCw)
Do not merge until we find out the ideal value!","It is possible to set touch screen sensitivity. The default seems to be 0x12 (I read this value from 0x80 register), but maybe a lower value is a better choice.
See the example of touch screen sensitivity issue here:  #402 (and video inside: https://youtu.be/cbt5-aXAhCw)
Do not merge until we find out the ideal value!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,439,2018-12-16T22:04:33Z,2019-02-12T13:47:08Z,2019-02-12T13:47:13Z,CLOSED,False,41,0,4,https://github.com/prusnak,Find ideal value for touch screen sensitivity (aka threshold),1,[],https://github.com/trezor/trezor-core/pull/439,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/439#issuecomment-448009663,"It is possible to set touch screen sensitivity. The default seems to be 0x12 (I read this value from 0x80 register), but maybe a lower value is a better choice.
See the example of touch screen sensitivity issue here:  #402 (and video inside: https://youtu.be/cbt5-aXAhCw)
Do not merge until we find out the ideal value!","I have just checked the new sensitivity value on regular Model T and it seems OK.
(I use reset_device workflow as a test, because it is possible to use it immediately after uploading the firmware and it contians regular confirm button, hold to confirm button and also swiping - all 3 usecases are good for testing sensitivity).
@jpochyla  Please merge if you feel the results are the same for you too.",True,{'THUMBS_UP': ['https://github.com/charlesrocket']}
trezor/trezor-core,https://github.com/trezor/trezor-core,439,2018-12-16T22:04:33Z,2019-02-12T13:47:08Z,2019-02-12T13:47:13Z,CLOSED,False,41,0,4,https://github.com/prusnak,Find ideal value for touch screen sensitivity (aka threshold),1,[],https://github.com/trezor/trezor-core/pull/439,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/439#issuecomment-448939063,"It is possible to set touch screen sensitivity. The default seems to be 0x12 (I read this value from 0x80 register), but maybe a lower value is a better choice.
See the example of touch screen sensitivity issue here:  #402 (and video inside: https://youtu.be/cbt5-aXAhCw)
Do not merge until we find out the ideal value!","I've just added modified prodtest to the commit. New command ""SENS"" can test sensitivity setting.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,439,2018-12-16T22:04:33Z,2019-02-12T13:47:08Z,2019-02-12T13:47:13Z,CLOSED,False,41,0,4,https://github.com/prusnak,Find ideal value for touch screen sensitivity (aka threshold),1,[],https://github.com/trezor/trezor-core/pull/439,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/439#issuecomment-462765152,"It is possible to set touch screen sensitivity. The default seems to be 0x12 (I read this value from 0x80 register), but maybe a lower value is a better choice.
See the example of touch screen sensitivity issue here:  #402 (and video inside: https://youtu.be/cbt5-aXAhCw)
Do not merge until we find out the ideal value!",merged in 4dc8110,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/442,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/442#issuecomment-454052373,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","I'll finally look into this.

Could pls rebase?
It's hard to do a review of trezor-common without reviewing this. I suggest to merge trezor-common now although we might find something worth changing later. Agreed?
If we'll have live refresh, should we consider removing hw_key_image_sync? Probably not, but just thinking out loud.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/ph4r05,3,https://github.com/trezor/trezor-core/pull/442#issuecomment-454750871,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","Thanks! I will check that out by the end of next week (after 25.1.).


It's hard to do a review of trezor-common without reviewing this. I suggest to merge trezor-common now although we might find something worth changing later. Agreed?


OK let's do that


If we'll have live refresh, should we consider removing hw_key_image_sync? Probably not, but just thinking out loud.


It is very similar to live refresh so we can maybe reuse existing parts. Sync is nice after wallet restore or in case of inconsistencies in the wallet cache file. However, we could reimplement that in the client software so it uses new get_tx functionality.
So maybe lets support both and after client has merged support for live refresh then mark this as deprecated in trezor-core?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/442#issuecomment-454810156,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","So maybe lets support both and after client has merged support for live refresh then mark this as deprecated in trezor-core?

Well if you decide to reimplement it so it uses get_tx we can remove it. But it's not that important, so if it is too much of an effort, let's keep it.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/tsusanka,5,https://github.com/trezor/trezor-core/pull/442#issuecomment-459358782,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","I think this is it from my side. I've pushed some typos. There's not too much of things to do, just the live_refresh should use some existing code from key image sync, shouldn't it?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/ph4r05,6,https://github.com/trezor/trezor-core/pull/442#issuecomment-462896173,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","@tsusanka I've made some fixes as suggested + enabled tests for new features.
Regarding the live_refresh and key_image_sync sharing the code - I double checked it and I could not find the appropriate common code to factor out 😕 . Most of the common logic is outside, in the monero and key_image modules. Live refresh works a bit differently as it avoids hassle with sub-addresses. The host provides the derivation directly so the logic is a bit different here.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/tsusanka,7,https://github.com/trezor/trezor-core/pull/442#issuecomment-463151526,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","@ph4r05 Ok, but I think this and this is the same, isn't it?
It is also similar to misc.compute_tx_key, but I understand the usage is different there.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/ph4r05,8,https://github.com/trezor/trezor-core/pull/442#issuecomment-463158215,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","@ph4r05 Ok, but I think this and this is the same, isn't it?

True this is the same and can be pulled to misc again.
I've done that + did some magic with needed crypto import. As importing crypto is memory heavy we don't want to import it globally so local import was used in the misc methods for key derivation. Now I've added the last parameter crypto which can be set by caller to already imported module.
I am now not sure how micropytohn handles the case for local imports when the module was already globaly imported by the caller.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,442,2018-12-19T03:16:15Z,2019-02-13T12:50:31Z,2019-02-13T12:50:31Z,MERGED,True,234,8,9,https://github.com/ph4r05,"xmr: get_tx_keys, live_refresh",1,[],https://github.com/trezor/trezor-core/pull/442,https://github.com/ph4r05,9,https://github.com/trezor/trezor-core/pull/442#issuecomment-463159320,"Relates to: trezor/trezor-common#255
This PR adds get_tx_key and live_refresh features.

get_tx_key supports retrieval of private tx keys (not spend keys, just random transaction privates, r and additional private keys if applicable) required by users to check the transaction or when resolving disputes with the recipient
get_tx_key supports to return transaction derivations = private tx key * public view key. This enables to compute tx_proof for outgoing transactions which are also a nice tool when resolving disputes, provides better protection as tx private key are not exported in this case.
live refresh enables computation of key images on the fly during the refresh. This helps to completely avoid key image sync and enables to use the Trezor with untrusted node. KI sync was designed for the cold wallet integration when we have to cooperate with wallet RPC. Direct integration to Monero codebase enables more effective key image computation.

I have new tests for this working but it requires changes to trezor-common first.","OK I've changed my mind 😄
Micropython should be smart enough not to double import. If this happens to be a problem in the future we can use this trick of passing module as param.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,445,2018-12-29T04:39:44Z,2019-01-02T11:21:31Z,2019-01-02T11:21:31Z,CLOSED,False,20,0,1,https://github.com/Flurbos,Add Unobtanium (UNO) Support ,4,[],https://github.com/trezor/trezor-core/pull/445,https://github.com/Flurbos,1,https://github.com/trezor/trezor-core/pull/445,"More info is available in the trezor-common PR (link below)
Unobtanium trezor-common PR request:  trezor/trezor-common#257","More info is available in the trezor-common PR (link below)
Unobtanium trezor-common PR request:  trezor/trezor-common#257",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,445,2018-12-29T04:39:44Z,2019-01-02T11:21:31Z,2019-01-02T11:21:31Z,CLOSED,False,20,0,1,https://github.com/Flurbos,Add Unobtanium (UNO) Support ,4,[],https://github.com/trezor/trezor-core/pull/445,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/445#issuecomment-450839884,"More info is available in the trezor-common PR (link below)
Unobtanium trezor-common PR request:  trezor/trezor-common#257",We'll update the submodule once the trezor-common PR will go in.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,448,2019-01-04T09:59:17Z,2019-01-04T10:18:34Z,2019-01-04T10:18:34Z,CLOSED,False,16,12,3,https://github.com/andrewkozlik,Improve PIN dialog messages,4,[],https://github.com/trezor/trezor-core/pull/448,https://github.com/andrewkozlik,1,https://github.com/trezor/trezor-core/pull/448,Improve the messages in the PIN dialog and seed recovery dialog to better match the terminology used in Trezor wallet.,Improve the messages in the PIN dialog and seed recovery dialog to better match the terminology used in Trezor wallet.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,450,2019-01-08T16:28:10Z,2019-01-09T14:33:17Z,2019-01-09T14:34:27Z,MERGED,True,22,0,1,https://github.com/tsusanka,Add git pre-push hook to docs,1,[],https://github.com/trezor/trezor-core/pull/450,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/450,"Quite frequently my code fails on CI because I've simply forgotten to run make templates or make style. This git hook runs both and if the it does not succeed it aborts the push.
If interested, insert the file into .git/hooks.","Quite frequently my code fails on CI because I've simply forgotten to run make templates or make style. This git hook runs both and if the it does not succeed it aborts the push.
If interested, insert the file into .git/hooks.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,450,2019-01-08T16:28:10Z,2019-01-09T14:33:17Z,2019-01-09T14:34:27Z,MERGED,True,22,0,1,https://github.com/tsusanka,Add git pre-push hook to docs,1,[],https://github.com/trezor/trezor-core/pull/450,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/450#issuecomment-452362139,"Quite frequently my code fails on CI because I've simply forgotten to run make templates or make style. This git hook runs both and if the it does not succeed it aborts the push.
If interested, insert the file into .git/hooks.","Also, if you have any other ideas what to add, let me know. Or just add it",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,451,2019-01-09T13:45:41Z,2019-01-09T14:32:51Z,2019-01-09T14:33:42Z,MERGED,True,3,1,2,https://github.com/matejcik,wallet/signing: clear extra_data fields after we're done with them,2,[],https://github.com/trezor/trezor-core/pull/451,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/451,"otherwise the values are repeated in every subsequent TxRequest
this also fixes a build failure in the new Dash test, where the TxRequestDetailsType only specifies request_index, but actually receives the extra_data fields from the previous round.
This can also be fixed on python-trezor side (so that the child protobufs matching is relaxed, same as the top-level matching), but I decided to keep the strict equality check for now, as it allowed us to catch this minor bug :)","otherwise the values are repeated in every subsequent TxRequest
this also fixes a build failure in the new Dash test, where the TxRequestDetailsType only specifies request_index, but actually receives the extra_data fields from the previous round.
This can also be fixed on python-trezor side (so that the child protobufs matching is relaxed, same as the top-level matching), but I decided to keep the strict equality check for now, as it allowed us to catch this minor bug :)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,452,2019-01-09T13:48:24Z,2019-01-09T15:26:19Z,2019-01-09T15:26:19Z,CLOSED,False,3,4,1,https://github.com/TheCharlatan,Add sha256sum check to arm-none-abi toolchain binaries in Dockerfile,1,[],https://github.com/trezor/trezor-core/pull/452,https://github.com/TheCharlatan,1,https://github.com/trezor/trezor-core/pull/452,The docker build fails if the hash is incorrect.,The docker build fails if the hash is incorrect.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,452,2019-01-09T13:48:24Z,2019-01-09T15:26:19Z,2019-01-09T15:26:19Z,CLOSED,False,3,4,1,https://github.com/TheCharlatan,Add sha256sum check to arm-none-abi toolchain binaries in Dockerfile,1,[],https://github.com/trezor/trezor-core/pull/452,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/452#issuecomment-452711196,The docker build fails if the hash is incorrect.,This won't work if a developer changes TOOLCHAIN_FLAVOR to src.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,452,2019-01-09T13:48:24Z,2019-01-09T15:26:19Z,2019-01-09T15:26:19Z,CLOSED,False,3,4,1,https://github.com/TheCharlatan,Add sha256sum check to arm-none-abi toolchain binaries in Dockerfile,1,[],https://github.com/trezor/trezor-core/pull/452,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/452#issuecomment-452711432,The docker build fails if the hash is incorrect.,Also please update to a new release gcc-arm-none-eabi-8-2018-q4-major while you are at it.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,452,2019-01-09T13:48:24Z,2019-01-09T15:26:19Z,2019-01-09T15:26:19Z,CLOSED,False,3,4,1,https://github.com/TheCharlatan,Add sha256sum check to arm-none-abi toolchain binaries in Dockerfile,1,[],https://github.com/trezor/trezor-core/pull/452,https://github.com/TheCharlatan,4,https://github.com/trezor/trezor-core/pull/452#issuecomment-452722238,The docker build fails if the hash is incorrect.,Force-pushed. Now uses gcc and downloads to a generic filename.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,452,2019-01-09T13:48:24Z,2019-01-09T15:26:19Z,2019-01-09T15:26:19Z,CLOSED,False,3,4,1,https://github.com/TheCharlatan,Add sha256sum check to arm-none-abi toolchain binaries in Dockerfile,1,[],https://github.com/trezor/trezor-core/pull/452,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/452#issuecomment-452725587,The docker build fails if the hash is incorrect.,"That was not what I had in mind, you still totally ignore TOOLCHAIN_FLAVOUR=src path in your code. I will rework the patch by myself. Thanks for the idea.",True,{'THUMBS_UP': ['https://github.com/TheCharlatan']}
trezor/trezor-core,https://github.com/trezor/trezor-core,452,2019-01-09T13:48:24Z,2019-01-09T15:26:19Z,2019-01-09T15:26:19Z,CLOSED,False,3,4,1,https://github.com/TheCharlatan,Add sha256sum check to arm-none-abi toolchain binaries in Dockerfile,1,[],https://github.com/trezor/trezor-core/pull/452,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/452#issuecomment-452735941,The docker build fails if the hash is incorrect.,Closed via a3cca11,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,453,2019-01-10T13:34:45Z,2019-01-14T16:54:08Z,2019-01-14T16:54:13Z,CLOSED,False,36,8,2,https://github.com/jpochyla,Show a waiting screen before bip39 derivation,2,[],https://github.com/trezor/trezor-core/pull/453,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/453,"Right now just a textual waiting screen. We could do a loader, but that would require a callback from the bip39 seed derivation.

Fixes #433","Right now just a textual waiting screen. We could do a loader, but that would require a callback from the bip39 seed derivation.

Fixes #433",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,453,2019-01-10T13:34:45Z,2019-01-14T16:54:08Z,2019-01-14T16:54:13Z,CLOSED,False,36,8,2,https://github.com/jpochyla,Show a waiting screen before bip39 derivation,2,[],https://github.com/trezor/trezor-core/pull/453,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/453#issuecomment-454012242,"Right now just a textual waiting screen. We could do a loader, but that would require a callback from the bip39 seed derivation.

Fixes #433","Added the loader, very nice beautiful now.",True,"{'THUMBS_UP': ['https://github.com/matejcik', 'https://github.com/bosomt'], 'LAUGH': ['https://github.com/bosomt']}"
trezor/trezor-core,https://github.com/trezor/trezor-core,453,2019-01-10T13:34:45Z,2019-01-14T16:54:08Z,2019-01-14T16:54:13Z,CLOSED,False,36,8,2,https://github.com/jpochyla,Show a waiting screen before bip39 derivation,2,[],https://github.com/trezor/trezor-core/pull/453,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/453#issuecomment-454077525,"Right now just a textual waiting screen. We could do a loader, but that would require a callback from the bip39 seed derivation.

Fixes #433",Wonderful. Merged via 4ee69f1,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/ca333,1,https://github.com/trezor/trezor-core/pull/455,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.","This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/ca333,2,https://github.com/trezor/trezor-core/pull/455#issuecomment-453367953,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.",Added definition to trezor/trezor-common#260. Will update this PR with reformated komodo.py.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/455#issuecomment-453470022,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.","Don't copypaste sign_tx/zcash.py to sign_tx/komodo.py, just override the constructor so you can specify whether Zcash or Komodo hashes should be used.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/ca333,4,https://github.com/trezor/trezor-core/pull/455#issuecomment-453495438,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.",Thanks for the hint @prusnak  - will do,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/ca333,5,https://github.com/trezor/trezor-core/pull/455#issuecomment-458944575,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.",please let me know if all is good now @prusnak,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/455#issuecomment-459032556,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.","This is much nicer. Can you please explain timestamp - 777 magic? It does not make any sense to me, you are modifying the preimage so different thing is being signed.
Ideally point me to the Komodo documentation where 777 constant is described.
Why can't you just provide different value when calling Trezor sign_tx from outside?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/ca333,7,https://github.com/trezor/trezor-core/pull/455#issuecomment-459154338,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.","Komodo has a reward feature which allows a utxo>=10KMD to collect this bonus [1] which sums up to ~5.1 % p.a. and can be seen as some sort of blockchain based ""interest/reward"". Our implementation does check against the set nLockTime which has to be explicitly set in the past (recent timestamp) since the ""interest/reward"" checks would otherwise prevent the utxo from accumulating the bonus [2]. We could technically also do an offset of 500 or 1000. However, we traditionally have been using 777 and also refered to 777 in other similar cases [3]. Hardcoding this value would be a big help for our Trezor integrations and automatically prevent any potential issue. Should this be a problem please let me know and i will inherit zcash hashing and pass nlocktime from sign_tx().
[1] https://komodoplatform.atlassian.net/wiki/spaces/KPSD/pages/71729215/What+is+the+5+Komodo+Stake+Reward
[2] https://github.com/komodoplatform/komodo/blob/master/src/komodo_interest.h#L101
[3] LedgerHQ/ledger-nano-s#21",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/455#issuecomment-459438832,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.","However, my question was, whether we can keep the Trezor logic unchanged and just change the value that is passed to Trezor from the caller (software wallet) - in another word - the caller would decrease the value.
If we keep the Zcash hashing, the change would be really trivial - we'd just need to add the KMD definition and software wallet interacting with Trezor would do the rest.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/ca333,9,https://github.com/trezor/trezor-core/pull/455#issuecomment-459460814,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.","@prusnak Yes, we can pass the decreased locktime via our wallet (caller).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/455#issuecomment-459480444,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.","In that case, none of these changes are needed and this commit: trezor/trezor-common@a37e809 will enable KMD in the next firmware release, so I am closing this.
I recommend you to add unit test similar to this one to python-trezor:
https://github.com/trezor/python-trezor/blob/master/trezorlib/tests/device_tests/test_msg_signtx_zcash.py",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,455,2019-01-11T01:57:20Z,2019-01-31T19:46:34Z,2019-01-31T21:51:22Z,CLOSED,False,38,4,4,https://github.com/ca333,add Komodo support,12,[],https://github.com/trezor/trezor-core/pull/455,https://github.com/ca333,11,https://github.com/trezor/trezor-core/pull/455#issuecomment-459509734,"This PR adds support for Komodo (https://komodoplatform.com)
Komodo Transactions need the nLockTime to be set with a recent timestamp in order for the outputs to be eligible for reward claiming hence we did timestamp - 777 and modified the class SigningError to differentiate between zcash and komodo overwintered/sapling TX.","Thanks a lot @prusnak - yes i have confirmed that our branch IDs are identical with zcash, so all is good. I will add python device tests this week. Looking forward to the next firmware release.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,458,2019-01-15T03:31:08Z,2019-01-15T14:21:56Z,2019-01-15T14:21:56Z,CLOSED,False,489,1,17,https://github.com/JoowonYun,support hycon,1,[],https://github.com/trezor/trezor-core/pull/458,https://github.com/JoowonYun,1,https://github.com/trezor/trezor-core/pull/458,"I make a hycon util function & test code.
Check to this one.
Thank you.","I make a hycon util function & test code.
Check to this one.
Thank you.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,458,2019-01-15T03:31:08Z,2019-01-15T14:21:56Z,2019-01-15T14:21:56Z,CLOSED,False,489,1,17,https://github.com/JoowonYun,support hycon,1,[],https://github.com/trezor/trezor-core/pull/458,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/458#issuecomment-454408346,"I make a hycon util function & test code.
Check to this one.
Thank you.","Closing without merge, see the comment in trezor/trezor-common#263",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,459,2019-01-15T12:34:37Z,2019-01-15T13:31:29Z,2019-01-15T13:31:34Z,CLOSED,False,130,47,11,https://github.com/jpochyla,Add EthereumGetPublicKey message handling,4,[],https://github.com/trezor/trezor-core/pull/459,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/459,Introduced in trezor/trezor-common@ff34e73,Introduced in trezor/trezor-common@ff34e73,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,459,2019-01-15T12:34:37Z,2019-01-15T13:31:29Z,2019-01-15T13:31:34Z,CLOSED,False,130,47,11,https://github.com/jpochyla,Add EthereumGetPublicKey message handling,4,[],https://github.com/trezor/trezor-core/pull/459,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/459#issuecomment-454379213,Introduced in trezor/trezor-common@ff34e73,"Do not merge yet, waits for updates in trezor-connect and its consumers.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,459,2019-01-15T12:34:37Z,2019-01-15T13:31:29Z,2019-01-15T13:31:34Z,CLOSED,False,130,47,11,https://github.com/jpochyla,Add EthereumGetPublicKey message handling,4,[],https://github.com/trezor/trezor-core/pull/459,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/459#issuecomment-454392546,Introduced in trezor/trezor-common@ff34e73,Replaced with #461,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,461,2019-01-15T13:30:57Z,2019-01-15T15:25:03Z,2019-01-15T15:25:08Z,MERGED,True,79,6,7,https://github.com/tsusanka,eth: get public key,1,[],https://github.com/trezor/trezor-core/pull/461,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/461,"This PR adds GetPublicKey to ETH, but does not add validation checks for wallet's get public key.
Currently Frontend (Connect, Wallet etc.) uses Bitcoin's GetPublicKey for getting Ethereum's xpub. This a) is incosistent b) prohibits adding validation checks for Bitcoin's GetPublicKey, because the checks use the 'coin_name' field, which is meant for Bitcoin-like coins only.
EthereumGetPublicKey will not be used right away, but it is ready for future use on Frontend. It should replace the current usage of Bitcoin's GetPublicKey in Ethereum.
When Frontend is ready, the validation checks will be merged into core, as tracked in #406.","This PR adds GetPublicKey to ETH, but does not add validation checks for wallet's get public key.
Currently Frontend (Connect, Wallet etc.) uses Bitcoin's GetPublicKey for getting Ethereum's xpub. This a) is incosistent b) prohibits adding validation checks for Bitcoin's GetPublicKey, because the checks use the 'coin_name' field, which is meant for Bitcoin-like coins only.
EthereumGetPublicKey will not be used right away, but it is ready for future use on Frontend. It should replace the current usage of Bitcoin's GetPublicKey in Ethereum.
When Frontend is ready, the validation checks will be merged into core, as tracked in #406.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,464,2019-01-16T12:19:22Z,2019-01-19T15:06:13Z,2019-01-19T15:06:18Z,MERGED,True,12,0,1,https://github.com/tsusanka,docs: contributing file,1,[],https://github.com/trezor/trezor-core/pull/464,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/464,A CONTRIBUTING file with a link to our wiki.,A CONTRIBUTING file with a link to our wiki.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,467,2019-01-23T16:56:43Z,2019-01-24T15:15:57Z,2019-01-24T15:15:57Z,CLOSED,False,323,670,18,https://github.com/andrewkozlik,Andrewkozlik/trezor storage integration,31,[],https://github.com/trezor/trezor-core/pull/467,https://github.com/andrewkozlik,1,https://github.com/trezor/trezor-core/pull/467,Integrate the new trezor-storage module into trezor-core.,Integrate the new trezor-storage module into trezor-core.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,467,2019-01-23T16:56:43Z,2019-01-24T15:15:57Z,2019-01-24T15:15:57Z,CLOSED,False,323,670,18,https://github.com/andrewkozlik,Andrewkozlik/trezor storage integration,31,[],https://github.com/trezor/trezor-core/pull/467,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/467#issuecomment-457233282,Integrate the new trezor-storage module into trezor-core.,superseded by #469,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,469,2019-01-24T15:15:26Z,2019-02-15T12:59:40Z,2019-02-15T12:59:45Z,CLOSED,False,428,740,32,https://github.com/prusnak,Trezor storage integration rebased,43,[],https://github.com/trezor/trezor-core/pull/469,https://github.com/prusnak,1,https://github.com/trezor/trezor-core/pull/469,supersedes #467,supersedes #467,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,469,2019-01-24T15:15:26Z,2019-02-15T12:59:40Z,2019-02-15T12:59:45Z,CLOSED,False,428,740,32,https://github.com/prusnak,Trezor storage integration rebased,43,[],https://github.com/trezor/trezor-core/pull/469,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/469#issuecomment-464042185,supersedes #467,"Merged via 6d817a8
Thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,470,2019-01-29T15:33:58Z,2019-01-29T16:05:49Z,2019-01-29T18:32:53Z,MERGED,True,25,27,6,https://github.com/petrkr,UART,3,[],https://github.com/trezor/trezor-core/pull/470,https://github.com/petrkr,1,https://github.com/trezor/trezor-core/pull/470,"Converted USART to UART, fixed RX pin","Converted USART to UART, fixed RX pin",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,471,2019-01-30T15:37:17Z,2019-01-30T16:30:07Z,2019-01-30T18:19:26Z,MERGED,True,23,19,4,https://github.com/petrkr,embded: Make variable timeout with default value,1,[],https://github.com/trezor/trezor-core/pull/471,https://github.com/petrkr,1,https://github.com/trezor/trezor-core/pull/471,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,472,2019-01-30T15:50:18Z,2019-01-30T16:28:01Z,2019-01-30T18:19:38Z,MERGED,True,1,0,1,https://github.com/petrkr,FIX: Build in docker due missing python bin,1,[],https://github.com/trezor/trezor-core/pull/472,https://github.com/petrkr,1,https://github.com/trezor/trezor-core/pull/472,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/adonagy,1,https://github.com/trezor/trezor-core/pull/473,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267","Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/adonagy,2,https://github.com/trezor/trezor-core/pull/473#issuecomment-474252815,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267",Thank you @matejcik and @Adman for the comments. I will work on changes ASAP,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/matejcik,3,https://github.com/trezor/trezor-core/pull/473#issuecomment-474399709,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267","I'm still thinking about whether we need a way to disable the staking mode at run-time (as opposed to restarting the device). The ability to exit staking mode complicates doing this securely.
My current idea is this: when you receive ""enable staking"" message, you unregister all protobuf handlers, and enter an infinite loop inside the tezos app. This loop would only await the Baker op and process it forever. Any other message would cause a failure, which could either be handled within the app, or if you managed to shoot the app down, Trezor would not be able to process any more messages.
given that this veers deep into implementation details, i'm also ccing @jpochyla :)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/adonagy,4,https://github.com/trezor/trezor-core/pull/473#issuecomment-480199379,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267","Thank you for the review. I've updated the code according the requested changes.

When you receive ""enable staking"" message, you unregister all protobuf handlers, and enter an infinite loop inside the tezos app.

We discussed it with @jurajselep and we think the proposed flow is indeed a better approach.
We now unregister all the unused (in tezos baking) protobuf handlers when the device receives the ""enable staking"" messages.

So if the device in staking mode gets disconnected, you already need to enter the pin (and therefore perform user interaction)

To exit this mode you need to disconnect the device. As you mentioned above, the user is required to enter the pin after he plugs back the device. This also simplifies the workflow in our app by removing the need for a ""stop_staking"" operation.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/matejcik,5,https://github.com/trezor/trezor-core/pull/473#issuecomment-480332388,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267","re last commit: in Trezor only ed25519 is supported which does not have non-hardened path derivation
therefore only 3-component fully hardened path was allowed.
Is there any reason to allow a 4- or 5-component paths?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/adonagy,6,https://github.com/trezor/trezor-core/pull/473#issuecomment-482835142,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267","Is there any reason to allow a 4- or 5-component paths?

I've changed the validation so 3 and 4 component paths are allowed (all hardened). The reason being  is that we want to allow migration from ledger, which uses 4 component hardened paths.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/adonagy,7,https://github.com/trezor/trezor-core/pull/473#issuecomment-482838793,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267",I also rebased the branch to be up to date with master.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/adonagy,8,https://github.com/trezor/trezor-core/pull/473#issuecomment-483239091,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267","The ability to stop staking is still in question. A baker, who has been delegated coins, needs to move those tokens frequently (to achieve this he needs to reconnect the device in the current flow). And having the ability to move tokens (transaction operations) in baking mode is not secure IMO.
If we stay with the current flow, an alternative approach would be to get an another Trezor T device with the same seed and use that for transactions while the other one is handling the baking.
Any thoughts?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/adonagy,9,https://github.com/trezor/trezor-core/pull/473#issuecomment-483257425,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267",last commit: I've added the option to sign the baking operation without displaying it on the device,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,473,2019-02-12T10:09:58Z,2019-04-15T16:21:56Z,2019-04-15T16:21:56Z,CLOSED,False,362,25,17,https://github.com/adonagy,tezos: add staking support,17,[],https://github.com/trezor/trezor-core/pull/473,https://github.com/matejcik,10,https://github.com/trezor/trezor-core/pull/473#issuecomment-483321529,"Added staking support - signing endorsements and baked block headers - for tezos.
The signing process is automatic after the user confirms entering staking mode on the device. While in this mode, the device is rejecting all messages except the ones used for staking and others like initialize, wipe device, etc.. To leave staking mode the device ask for PIN.
Depends on trezor/trezor-common#267","closing for cleanup now.
please apply your changes to the monorepo at https://github.com/trezor/trezor-firmware, together with the corresponding trezor-common PR, and resubmit",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/478,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.","Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/ph4r05,2,https://github.com/trezor/trezor-core/pull/478#issuecomment-464684687,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.",PR description updated,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/ph4r05,3,https://github.com/trezor/trezor-core/pull/478#issuecomment-464720369,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.",trezor-common version bump,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/ph4r05,4,https://github.com/trezor/trezor-core/pull/478#issuecomment-464738293,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.","From some reason, test_apps.common.coins.py and test_trezor.config.py tests are failing now. Idea why? 😕",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/ph4r05,5,https://github.com/trezor/trezor-core/pull/478#issuecomment-464758346,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.",Hmm my monero tests are passing locally but failing on Travis. I suspect it is because of outdated python-trezor.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/tsusanka,6,https://github.com/trezor/trezor-core/pull/478#issuecomment-464794841,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.","It should be fixed. I wanted to do a rebase and push, but it seems I can't push into this PR.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/ph4r05,7,https://github.com/trezor/trezor-core/pull/478#issuecomment-464845237,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.","Great! The tests are now passing. The tests perform TX signature for client_version=0 HF9. Additionally, also client_version=1 HF9 and HF10 are tested.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/tsusanka,8,https://github.com/trezor/trezor-core/pull/478#issuecomment-465513928,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.",I will do those myself. Soon,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,478,2019-02-18T02:05:19Z,2019-02-20T12:51:03Z,2019-02-20T13:57:33Z,MERGED,True,965,791,30,https://github.com/ph4r05,xmr: hardfork 10 upgrade,3,[],https://github.com/trezor/trezor-core/pull/478,https://github.com/tsusanka,9,https://github.com/trezor/trezor-core/pull/478#issuecomment-465584720,"Monero hardfork 10 upgrades:

Code now supports only hardforks 9 and 10 (Borromean range sig removed, Full MLSAG signature removed).
Deterministic output commitment masks, based on amount_key
Bulletproof v2 serialization, EcdhInfo serialized as 8 B amount, XOR encrypted by a specific key derived from amount key
Signing: pseudo_out recomputation on inputs, sign step. Due to the deterministic output masks, balancing has to be done on input commitments. As HF8 support is discontinued, pseudo_out are not hashed in the signature as it has been moved to prunnable section in HF9.
Dummy encrypted payment ID (if applicable) for better transaction uniformity (implemented in Monero wallet already)

Requires trezor/trezor-common#280 to be merged for tests to work. Test are ready but I need to version-bump python-trezor and monero-agent.
Deterministic masks
Since HF10, the output masks are deterministic, based on the amount_key. The decision is the deterministic masks will be used also in HF9 if client supports this feature, i.e., client_version=1.
Currently, client_version=0 clients do not support deterministic output masks. The main reason is the mask balancing (i.e., sum output masks equals sum of input masks) was performed on the output masks side. The client_version=0 clients do not support the balancing on input side (there is no way for the client to update the masks after balancing).
However, masks are generated deterministically also in client_version=0, in the step 5 (not using amount key). This helps to lower memory footprint and makes code more unified.
Once all clients are updated, the old-way of generating masks will be removed from the step 5.
Protocol change
Due to the deterministic output masks the protocol was changed a bit. The masks are computed from the amount_keys which are computed in the step 6 (set output).
This affects the BP offloading logic. Masks need to be sent to the host so it can compute the BP. Thus the offloading can be done only after all outputs in the current batch have been generated.
In the BP offloading scenario the protocol goes as following:

MoneroTransactionSetOutputRequest per output (as before). The response MoneroTransactionSetOutputAck contains corresponding mask in the rsig_data field.
A new MoneroTransactionSetOutputRequest(is_offloaded_bp=1) message is sent by the host which contains computed BP in the rsig_data field after all masks from the current batch has been computed by the Trezor.

The masks balancing can be performed after all output masks were computed, thus no earlier than in step 7. The balancing is thus performed on the input masks in the step 9 (signing).
The last input mask in the sequence is modified so the sum of input and output masks equals. The host need to know about this change so it can update the transaction structures. The MoneroTransactionSignInputAck message now contains pseudo_out field which carries the updated output commitment value.",nit-picks implemented in 2b048ce,True,{'HEART': ['https://github.com/ph4r05']}
trezor/trezor-core,https://github.com/trezor/trezor-core,480,2019-02-21T08:45:58Z,2019-03-14T09:38:53Z,2019-03-14T09:38:56Z,MERGED,True,47,0,1,https://github.com/tsusanka,NumPad to enter a number from arbitrary range easily,1,[],https://github.com/trezor/trezor-core/pull/480,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/480,"To easily enter numbers from an arbitrary range. I've decided to go with the design where as much buttons are present as possible, because then 32 (the max number of shares in SLIP-39) fits in three pages.

For a perfect UI maybe a back button should be present when you click some + button? So you can go back","To easily enter numbers from an arbitrary range. I've decided to go with the design where as much buttons are present as possible, because then 32 (the max number of shares in SLIP-39) fits in three pages.

For a perfect UI maybe a back button should be present when you click some + button? So you can go back",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,481,2019-02-21T15:53:55Z,2019-04-20T10:36:16Z,2019-04-20T10:36:16Z,CLOSED,False,204,14,6,https://github.com/ph4r05,docker: emulator support refacoring,1,[],https://github.com/trezor/trezor-core/pull/481,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/481,"I was playing with the Trezor emulator support in docker a bit. I had some issues with the original Dockerfile (I needed also GUI) so I created a slightly modified version.
Dockerized Trezor-core emulator is beneficial also to other integrating projects, e.g., I could make use of it in Monero CI: monero-project/monero#4977
In the simplest version, the emulator runs without GUI, minimal setup for integration testing of the integration. The idea is to clone a trezor-core branch, build the docker image and run it.
We could also upload master firmware releases to the Docker repository (testing against released versions).
It is also possible to build and run with GUI. It was tested on OSX, should work on Linux too, potentially also on Windows with an appropriate X server.
All options are in docker/emulator/README.md
Give it a thought, if this is OK for you.
Thanks","I was playing with the Trezor emulator support in docker a bit. I had some issues with the original Dockerfile (I needed also GUI) so I created a slightly modified version.
Dockerized Trezor-core emulator is beneficial also to other integrating projects, e.g., I could make use of it in Monero CI: monero-project/monero#4977
In the simplest version, the emulator runs without GUI, minimal setup for integration testing of the integration. The idea is to clone a trezor-core branch, build the docker image and run it.
We could also upload master firmware releases to the Docker repository (testing against released versions).
It is also possible to build and run with GUI. It was tested on OSX, should work on Linux too, potentially also on Windows with an appropriate X server.
All options are in docker/emulator/README.md
Give it a thought, if this is OK for you.
Thanks",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,481,2019-02-21T15:53:55Z,2019-04-20T10:36:16Z,2019-04-20T10:36:16Z,CLOSED,False,204,14,6,https://github.com/ph4r05,docker: emulator support refacoring,1,[],https://github.com/trezor/trezor-core/pull/481,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/481#issuecomment-485088657,"I was playing with the Trezor emulator support in docker a bit. I had some issues with the original Dockerfile (I needed also GUI) so I created a slightly modified version.
Dockerized Trezor-core emulator is beneficial also to other integrating projects, e.g., I could make use of it in Monero CI: monero-project/monero#4977
In the simplest version, the emulator runs without GUI, minimal setup for integration testing of the integration. The idea is to clone a trezor-core branch, build the docker image and run it.
We could also upload master firmware releases to the Docker repository (testing against released versions).
It is also possible to build and run with GUI. It was tested on OSX, should work on Linux too, potentially also on Windows with an appropriate X server.
All options are in docker/emulator/README.md
Give it a thought, if this is OK for you.
Thanks",Moved to trezor/trezor-firmware#91,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,486,2019-03-04T09:02:31Z,2019-03-04T09:07:39Z,2019-03-04T15:33:45Z,CLOSED,False,40,0,1,https://github.com/icodeface,Add Qtum support,1,[],https://github.com/trezor/trezor-core/pull/486,https://github.com/icodeface,1,https://github.com/trezor/trezor-core/pull/486,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,486,2019-03-04T09:02:31Z,2019-03-04T09:07:39Z,2019-03-04T15:33:45Z,CLOSED,False,40,0,1,https://github.com/icodeface,Add Qtum support,1,[],https://github.com/trezor/trezor-core/pull/486,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/486#issuecomment-469173442,,This is not needed. It will be regenerated automatically when trezor-common PR is accepted.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,486,2019-03-04T09:02:31Z,2019-03-04T09:07:39Z,2019-03-04T15:33:45Z,CLOSED,False,40,0,1,https://github.com/icodeface,Add Qtum support,1,[],https://github.com/trezor/trezor-core/pull/486,https://github.com/icodeface,3,https://github.com/trezor/trezor-core/pull/486#issuecomment-469245882,,"Hi @prusnak , is there a contributing guide for supporting alt coins ? thanks",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,486,2019-03-04T09:02:31Z,2019-03-04T09:07:39Z,2019-03-04T15:33:45Z,CLOSED,False,40,0,1,https://github.com/icodeface,Add Qtum support,1,[],https://github.com/trezor/trezor-core/pull/486,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/486#issuecomment-469296196,,https://wiki.trezor.io/Developers_guide:Contributing,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,487,2019-03-04T11:17:38Z,2019-03-26T13:12:10Z,2019-03-26T13:12:10Z,MERGED,True,1,0,1,https://github.com/romanz,Allow running tests from any directory,1,[],https://github.com/trezor/trezor-core/pull/487,https://github.com/romanz,1,https://github.com/trezor/trezor-core/pull/487,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,489,2019-03-06T10:39:12Z,2019-03-06T12:26:46Z,2019-03-06T12:26:47Z,CLOSED,False,9,0,2,https://github.com/boczeratul,Add DEXON (DXN) support,1,[],https://github.com/trezor/trezor-core/pull/489,https://github.com/boczeratul,1,https://github.com/trezor/trezor-core/pull/489,"DEXON is a new blockchain with efficient consensus algorithm to provide

high TPS (around 10k at the moment)
low latency (about 1s at the moment)

It uses the same account system as Ethereum and is EVM compatible.
ChainID: 237
Registered coin type index: 237 ref: slip-0044","DEXON is a new blockchain with efficient consensus algorithm to provide

high TPS (around 10k at the moment)
low latency (about 1s at the moment)

It uses the same account system as Ethereum and is EVM compatible.
ChainID: 237
Registered coin type index: 237 ref: slip-0044",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,489,2019-03-06T10:39:12Z,2019-03-06T12:26:46Z,2019-03-06T12:26:47Z,CLOSED,False,9,0,2,https://github.com/boczeratul,Add DEXON (DXN) support,1,[],https://github.com/trezor/trezor-core/pull/489,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/489#issuecomment-470088852,"DEXON is a new blockchain with efficient consensus algorithm to provide

high TPS (around 10k at the moment)
low latency (about 1s at the moment)

It uses the same account system as Ethereum and is EVM compatible.
ChainID: 237
Registered coin type index: 237 ref: slip-0044",New Ethereum network definition should be added here: https://github.com/trezor/trezor-common/tree/master/defs/ethereum,True,{'THUMBS_UP': ['https://github.com/boczeratul']}
trezor/trezor-core,https://github.com/trezor/trezor-core,490,2019-03-07T11:45:50Z,2019-03-07T12:39:44Z,2019-03-07T12:39:44Z,MERGED,True,1,1,1,https://github.com/sowelisuwi,"u2f: ""u2f.bin.coffee checker"" -> ""u2f.bin.coffee""",1,[],https://github.com/trezor/trezor-core/pull/490,https://github.com/sowelisuwi,1,https://github.com/trezor/trezor-core/pull/490,"Trezor Model T can display 20 chars max, which causes this name to display as ""2f.bin.coffee checke"".","Trezor Model T can display 20 chars max, which causes this name to display as ""2f.bin.coffee checke"".",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,491,2019-03-07T11:50:03Z,2019-03-07T12:42:52Z,2019-03-07T12:42:52Z,MERGED,True,1,1,1,https://github.com/sowelisuwi,u2f: capitalize Bitwarden,2,[],https://github.com/trezor/trezor-core/pull/491,https://github.com/sowelisuwi,1,https://github.com/trezor/trezor-core/pull/491,E.g. see https://twitter.com/bitwarden.,E.g. see https://twitter.com/bitwarden.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,494,2019-03-11T09:01:55Z,2019-03-11T15:43:17Z,2019-03-11T15:43:21Z,MERGED,True,0,94,2,https://github.com/tsusanka,Cardano: remove sign/verify functions,1,[],https://github.com/trezor/trezor-core/pull/494,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/494,They are not currently used anyway. Protobuf messages are missing and they are not registered. Closes #492,They are not currently used anyway. Protobuf messages are missing and they are not registered. Closes #492,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,496,2019-03-11T13:08:22Z,2019-03-12T10:23:26Z,2019-03-12T10:23:29Z,MERGED,True,512,54,30,https://github.com/tsusanka,Store mnemonic as bytes,2,[],https://github.com/trezor/trezor-core/pull/496,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/496,"This is one of the preliminary works needed to introduce SLIP-39. It introduces another layer between seed.py and storage.py called mnemonic.py (though maybe we could find a better name?). The mnemonic module operates on storage and decides if mnemonic is BIP-39 or SLIP-39 and returns values appropriately.
For BIP-39 the mnemonic is stored in bytes, which is basically the same as it used to be (more of a syntax thing). We could also store the ""internal entropy"" of it but since the seed is then derived from hashing the string form, this makes more sense.
This PR contains temporary commit which points to python-trezor/trezor-common tsusanka/pre-slip39 branches. If approved I will commit those to master and regenerate this commit.","This is one of the preliminary works needed to introduce SLIP-39. It introduces another layer between seed.py and storage.py called mnemonic.py (though maybe we could find a better name?). The mnemonic module operates on storage and decides if mnemonic is BIP-39 or SLIP-39 and returns values appropriately.
For BIP-39 the mnemonic is stored in bytes, which is basically the same as it used to be (more of a syntax thing). We could also store the ""internal entropy"" of it but since the seed is then derived from hashing the string form, this makes more sense.
This PR contains temporary commit which points to python-trezor/trezor-common tsusanka/pre-slip39 branches. If approved I will commit those to master and regenerate this commit.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,496,2019-03-11T13:08:22Z,2019-03-12T10:23:26Z,2019-03-12T10:23:29Z,MERGED,True,512,54,30,https://github.com/tsusanka,Store mnemonic as bytes,2,[],https://github.com/trezor/trezor-core/pull/496,https://github.com/jpochyla,2,https://github.com/trezor/trezor-core/pull/496#issuecomment-471686778,"This is one of the preliminary works needed to introduce SLIP-39. It introduces another layer between seed.py and storage.py called mnemonic.py (though maybe we could find a better name?). The mnemonic module operates on storage and decides if mnemonic is BIP-39 or SLIP-39 and returns values appropriately.
For BIP-39 the mnemonic is stored in bytes, which is basically the same as it used to be (more of a syntax thing). We could also store the ""internal entropy"" of it but since the seed is then derived from hashing the string form, this makes more sense.
This PR contains temporary commit which points to python-trezor/trezor-common tsusanka/pre-slip39 branches. If approved I will commit those to master and regenerate this commit.","Looks good, let's review mnemonic.py after we add SLIP-39.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,499,2019-03-14T22:42:04Z,2019-03-15T10:58:36Z,2019-03-15T11:20:15Z,MERGED,True,1,1,1,https://github.com/real-or-random,docs: Use proper make targets for code style,1,[],https://github.com/trezor/trezor-core/pull/499,https://github.com/real-or-random,1,https://github.com/trezor/trezor-core/pull/499,I guess this is how you check if your contributors really read the guidelines. I'm proud that I passed the test.,I guess this is how you check if your contributors really read the guidelines. I'm proud that I passed the test.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,1,https://github.com/trezor/trezor-core/pull/500,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,2,https://github.com/trezor/trezor-core/pull/500#issuecomment-473223210,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",Note to self: We should also call secp256k1_context_randomize (https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1.h#L641) after creating the context,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/500#issuecomment-473242599,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","I would prefer not changing import secp256k1 to import secp256k1_zkp in our Python code via this pull request. It simplifies reviewing and I am not sure whether we are going to switch immediately. It makes sense to use secp256k1_zkp for Liquid, but I am not in favor of using it everywhere unless there are benchmarks done which prove the zkp implementation is faster and/or has other big advantages.
I agree we should use directories in #include to avoid clashes. I will address this in another pull request.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,4,https://github.com/trezor/trezor-core/pull/500#issuecomment-473252003,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","I would prefer not changing import secp256k1 to import secp256k1_zkp in our Python code via this pull request. It simplifies reviewing and I am not sure whether we are going to switch immediately. It makes sense to use secp256k1_zkp for Liquid, but I am not in favor of using it everywhere unless there are benchmarks done which prove the zkp implementation is faster and/or has other big advantages.

No problem, then we should first focus on just getting zkp imported and included in the build. I'll update this PR then. Anyway, it was still good to have these other commits to demonstrate that the build worked and can actually be used, and for the future.

I agree we should use directories in #include to avoid clashes. I will address this in another pull request.

Okay, I can also just do it when I update this.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/500#issuecomment-473253946,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","Anyway, it was still good to have these other commits to demonstrate that the build worked and can actually be used, and for the future.

Sure, I 100% agree. To be clear, I am not opposed to using secp256k1_zkp globally for ECDSA/ECDH operations. But let's test that first.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,6,https://github.com/trezor/trezor-core/pull/500#issuecomment-473265811,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","Maybe we can leverage the fact the tests for secp256k1 and secp256k1_zkp ar the same.
Something like this comes to mind:
from trezor.crypto.curve import secp256k1, secp256k1_zkp

class Secp256k1Common(unittest.TestCase):
   # all existing unit tests go here

   def test_foo(self):
       # use impl.method instead of secp256k1.method

class TestCryptoSecp256k1(Secp256k1Common): 
    def __init__(self):
         self.impl = secp256k1

class TestCryptoSecp256k1Zkp(Secp256k1Common): 
    def __init__(self):
         self.impl = secp256k1_zkp",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/romanz,7,https://github.com/trezor/trezor-core/pull/500#issuecomment-473665889,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","A small update to the PR (following a discussion with @real-or-random):
I have replaced f8b5bbc by 55a3948 (moving the read-only precomputed tables from the .flash to .flash2 section, which AFAIU is not used for storing executable code).
The resulting binary should compile and run successfully on TREZOR model T.",True,{'ROCKET': ['https://github.com/real-or-random']}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,8,https://github.com/trezor/trezor-core/pull/500#issuecomment-473721224,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","moving the read-only precomputed tables from the .flash to .flash2 section, which AFAIU is not used for storing executable code

Good!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,9,https://github.com/trezor/trezor-core/pull/500#issuecomment-474900358,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","I added two commits to address the file name issues and the size of the context.
(I'm leaving the replacement of the internal secp256k1 in at the moment for testing, we can remove that if everything looks good.)
@prusnak Do the callbacks look right to you?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,10,https://github.com/trezor/trezor-core/pull/500#issuecomment-476219807,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",@real-or-random offtopic: How hard is to add NIST P-256 curve to secp256k1 library? Is this even possible or desired?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/apoelstra,11,https://github.com/trezor/trezor-core/pull/500#issuecomment-476268650,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",@prusnak it would basically mean rewriting the library. It is neither possible nor desired :),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,12,https://github.com/trezor/trezor-core/pull/500#issuecomment-476340906,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",Got it :),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,13,https://github.com/trezor/trezor-core/pull/500#issuecomment-478985033,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","We have now ElementsProject/secp256k1-zkp#53 which (when merged) removes the need to use a modified branch/version of secp256k-zkp.
The remaining issues are the top three items in the list in first comment here in this PR
@prusnak Can you comment on these? :)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,14,https://github.com/trezor/trezor-core/pull/500#issuecomment-478987345,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?

Yes

4096 bytes (of RAM). Is this is fine for you as memory footprint?

Yes

The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?

I think that's fine as a PoC.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,15,https://github.com/trezor/trezor-core/pull/500#issuecomment-478987854,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","Can you please squash the changes into a single commit and resolve conflicts (rebase on top of the current master)? We have reformatted our code using clang-format. Config is in the .clang-format file but it should be picked up automatically, just use clang-format -i on newly added C files. This should help with the resolution.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,16,https://github.com/trezor/trezor-core/pull/500#issuecomment-479063754,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","Okay, I squashed and changed it to remove the commits that change the apps.
Two issues open left:

Your TODO where we don't raise an exception, see above.
We need to wait until  ElementsProject/secp256k1-zkp#53 is merged and change the submodule according.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,17,https://github.com/trezor/trezor-core/pull/500#issuecomment-479065338,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?

I think that's fine as a PoC.

Yes, indeed. I think in a PR that actually changes apps to use secp256k1-zkp, it's best to change this to a model where the verification table is only created when it's necessary (which is rare). Currently, we would create the verification table even when we would call into secp256k1-zkp for signing, which is kind of silly because signing is much more common and we don't need to build a table for signing (because the signing table it's statically built).",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,18,https://github.com/trezor/trezor-core/pull/500#issuecomment-479237963,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","I added two commits (will squash again if you approve):

I changed my mind about one the callbacks, namely the error_callback. This is only triggered when some internal check fails and we really just want to crash the entire device, because continuing execution could mean undefined behavior or leaking secrets etc, see https://github.com/ElementsProject/secp256k1-zkp/blob/secp256k1-zkp/include/secp256k1.h#L247 for an explanation. So this is a last resort thing, and I changed it to call __fatal_error() instead.
I removed your comment about returning None as explained here #500 (comment).

With these two commits, this PR is ready to be merged except that we need to wait for ElementsProject/secp256k1-zkp#53 to be merged and adjust the submodule.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,19,https://github.com/trezor/trezor-core/pull/500#issuecomment-479444969,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","(will squash again if you approve):

Agreed. Please squash.

this PR is ready to be merged except that we need to wait for #53 to be merged and adjust the submodule.

Ack. we'll review it in the meantime. @jpochyla can you have a look, please?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,20,https://github.com/trezor/trezor-core/pull/500#issuecomment-479845183,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",Squashed.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,21,https://github.com/trezor/trezor-core/pull/500#issuecomment-479969217,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","Okay, sorry, I pushed again because I additionally enabled some ASM optimizations for ASM in secp256k1-zkp.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,22,https://github.com/trezor/trezor-core/pull/500#issuecomment-482052864,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","Okay @real-or-random, great job! We are ready to merge. We'll wait until you merge ElementsProject/secp256k1-zkp#53 and adjust the submodule in this PR.",True,{'HOORAY': ['https://github.com/real-or-random']}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,23,https://github.com/trezor/trezor-core/pull/500#issuecomment-482625531,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","Okay force-pushed, I touched only .gitmodules. The other PR is not merged yet but should be today.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/apoelstra,24,https://github.com/trezor/trezor-core/pull/500#issuecomment-482643085,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",Merged the other PR.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,25,https://github.com/trezor/trezor-core/pull/500#issuecomment-482709131,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",@real-or-random do you want to change the revision of the included submodule to reflect the last change from @apoelstra or should we merge as is?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,26,https://github.com/trezor/trezor-core/pull/500#issuecomment-482729109,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",Oh yes I should have done this. I'll update it later. :),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/real-or-random,27,https://github.com/trezor/trezor-core/pull/500#issuecomment-482756928,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra",fixed,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,500,2019-03-14T23:33:37Z,2019-04-15T15:24:56Z,2019-04-15T15:58:14Z,MERGED,True,475,25,10,https://github.com/real-or-random,Add extmod for secp256k1-zkp,1,[],https://github.com/trezor/trezor-core/pull/500,https://github.com/prusnak,28,https://github.com/trezor/trezor-core/pull/500#issuecomment-483312641,"This includes the https://github.com/ElementsProject/secp256k1-zkp library (which is a fork from  sipa/secp256k1 used in Bitcoin Core)  and uses it for signing transactions and signing and verifying messages for ECDSA on the secp256k1 curve.
The Ethereum app is left untouched. I assume because they use Keccak-256 as a message digest and not SHA256. @apoelstra
This is the first step towards solving #282.
Some background to understand the open issues below:
secp256k1-zkp (and in fact sipa/secp256k1) relies on two precomputation tables to speed up signing and for verification.  secp256k1(-zkp) supports that the precomputed table values for the signing table are stored in the executable (by defining USE_ECMULT_STATIC_PRECOMPUTATION) and thus do not need to be created at running time.
It's WIP because the following is still open (and maybe more):

 secp256k1-zkp uses two ""error callbacks"". These are called when some bad error occurs and we don't know how to continue except for shutting down the execution properly, see https://github.com/bitcoin-core/secp256k1/blob/77668c09da756190e188521d87aaaa08736fa196/include/secp256k1.h#L218 and the function below for details. The default callbacks use abort() and fprintf(), so we need to replace them. I replaced them by functions which throw Python exceptions. Is this the right thing to do on trezor?
 The size of the verification table is configurable. A larger table makes verification possibly faster. We set it to 4096 bytes (of RAM). Is this is fine for you as memory footprint? I guess even smaller is okay because verification speed is not so crucial. We need to see if we want to move that to CCMRAM too as mentioned in https://github.com/trezor/trezor-core/issues/282#issuecomment-467508352 .
 The table(s) are stored in a secp256k1_context which is currently created when it's first used. Is that okay or do we want to create at program startup?
 This currently relies on a dev branch of secp256k1-zkp. We'll merge this into master once we know that we're on the right track.
 We wanted to enable USE_ECMULT_STATIC_PRECOMPUTATION but it increases the executable by 64 KiB, which is about 17 KiB too much after we rebased on master. To make the build work I've added a HACK commit that disables `USE_ECMULT_STATIC_PRECOMPUTATION in the firmware build again. But that means calling into secp256k1-zkp functions will fail at runtime because we don't give it enough memory to create the table. Note that it's probably really better to build this in the executable because otherwise we need 64 KiB of RAM instead of flash. Also, we need to keep in mind that currently no rangeproof functions are used, so those will be removed from the executable. If we really call these, the size will increase further.
 There is naming collision between with the header secp256k1.h. For some reason the build currently works (at least on my machine) but this is probably fragile. Our goal is to make all of this work without the need to vendor specific secp256k1-zkp changes, and we'd rather not want to rename our header. I think it's easiest to rename your currently used secp256k1.h? Is that fine for you? Otherwise we can also use #includes with directories.

We opened this mostly to get some feedback on the build system. We can also decide to use this PR just for the build system and handle the other stuff in a different PR if that works better for you.
cc @romanz @apoelstra","Great work @real-or-random, thanks for the contribution!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,502,2019-03-15T18:12:54Z,2019-03-18T11:21:57Z,2019-03-18T11:22:02Z,MERGED,True,74,29,1,https://github.com/matejcik,Coins doc update (WIP),2,[],https://github.com/trezor/trezor-core/pull/502,https://github.com/matejcik,1,https://github.com/trezor/trezor-core/pull/502,"This is a ""refactoring"" of the coins document, done as a side-effect of adding the new coins that currently have open PRs:

EOS #397

EOS is a candidate for SLIP-48 paths, but nobody uses these, and it seems simpler to go with a more basic scheme. Other vendors use Ripple-like paths: #397 (comment)

Ontology #323

Currently they seem to use Ethereum-like paths, which is the stupidest of the bunch: #323 (comment)
There's also a possibility to allow NEO SLIP-44 path: #323 (comment)
We prooobably don't want that, but maybe.
I'm hoping that it would at least be possible to use Ripple-like path, but I'm waiting for the implementer's response.

Tron #354

No info, no idea.","This is a ""refactoring"" of the coins document, done as a side-effect of adding the new coins that currently have open PRs:

EOS #397

EOS is a candidate for SLIP-48 paths, but nobody uses these, and it seems simpler to go with a more basic scheme. Other vendors use Ripple-like paths: #397 (comment)

Ontology #323

Currently they seem to use Ethereum-like paths, which is the stupidest of the bunch: #323 (comment)
There's also a possibility to allow NEO SLIP-44 path: #323 (comment)
We prooobably don't want that, but maybe.
I'm hoping that it would at least be possible to use Ripple-like path, but I'm waiting for the implementer's response.

Tron #354

No info, no idea.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,503,2019-03-18T14:05:25Z,2019-03-29T15:21:36Z,2019-03-29T15:21:36Z,MERGED,True,1,0,1,https://github.com/j-matus,cardano: taint pages to prevent blank screen,1,[],https://github.com/trezor/trezor-core/pull/503,https://github.com/j-matus,1,https://github.com/trezor/trezor-core/pull/503,Taint pages to ensure the texts are rendered when swiping. Closes #497,Taint pages to ensure the texts are rendered when swiping. Closes #497,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,503,2019-03-18T14:05:25Z,2019-03-29T15:21:36Z,2019-03-29T15:21:36Z,MERGED,True,1,0,1,https://github.com/j-matus,cardano: taint pages to prevent blank screen,1,[],https://github.com/trezor/trezor-core/pull/503,https://github.com/refi93,2,https://github.com/trezor/trezor-core/pull/503#issuecomment-474802917,Taint pages to ensure the texts are rendered when swiping. Closes #497,"@jpochyla btw, is this ""tainting"" the recommended way to deal with refreshing paginated content? It seems a bit weird to me that it has to be done explicitly.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,503,2019-03-18T14:05:25Z,2019-03-29T15:21:36Z,2019-03-29T15:21:36Z,MERGED,True,1,0,1,https://github.com/j-matus,cardano: taint pages to prevent blank screen,1,[],https://github.com/trezor/trezor-core/pull/503,https://github.com/jpochyla,3,https://github.com/trezor/trezor-core/pull/503#issuecomment-474834840,Taint pages to ensure the texts are rendered when swiping. Closes #497,"I'm in a process of rewriting this part, but it will take a while, as it's interacting with other UI stuff. Let's do it this way for now.",True,{'THUMBS_UP': ['https://github.com/refi93']}
trezor/trezor-core,https://github.com/trezor/trezor-core,503,2019-03-18T14:05:25Z,2019-03-29T15:21:36Z,2019-03-29T15:21:36Z,MERGED,True,1,0,1,https://github.com/j-matus,cardano: taint pages to prevent blank screen,1,[],https://github.com/trezor/trezor-core/pull/503,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/503#issuecomment-476675139,Taint pages to ensure the texts are rendered when swiping. Closes #497,@jpochyla let's merge this?,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,503,2019-03-18T14:05:25Z,2019-03-29T15:21:36Z,2019-03-29T15:21:36Z,MERGED,True,1,0,1,https://github.com/j-matus,cardano: taint pages to prevent blank screen,1,[],https://github.com/trezor/trezor-core/pull/503,https://github.com/tsusanka,5,https://github.com/trezor/trezor-core/pull/503#issuecomment-478037710,Taint pages to ensure the texts are rendered when swiping. Closes #497,I've tested this PR and it fixes the issue.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,504,2019-03-19T15:22:44Z,2019-03-20T11:57:22Z,2019-03-20T11:58:45Z,MERGED,True,52,4,2,https://github.com/tsusanka,ui: add back button to NumPad,1,[],https://github.com/trezor/trezor-core/pull/504,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/504,Adds back button to return to previous screen and improves style.,Adds back button to return to previous screen and improves style.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,505,2019-03-20T06:41:28Z,2019-03-20T06:43:53Z,2019-03-20T06:43:54Z,CLOSED,False,1489,2,33,https://github.com/chancity,Added KIN,9,[],https://github.com/trezor/trezor-core/pull/505,https://github.com/chancity,1,https://github.com/trezor/trezor-core/pull/505,"Added stellar based coin KIN
https://www.kin.org/","Added stellar based coin KIN
https://www.kin.org/",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,505,2019-03-20T06:41:28Z,2019-03-20T06:43:53Z,2019-03-20T06:43:54Z,CLOSED,False,1489,2,33,https://github.com/chancity,Added KIN,9,[],https://github.com/trezor/trezor-core/pull/505,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/505#issuecomment-474706795,"Added stellar based coin KIN
https://www.kin.org/",There is clearly a better way than just copy-pasting stellar code to another location. Think more about how you can reuse the Stellar messages to implement your coin.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,512,2019-03-26T12:46:58Z,2019-03-26T12:54:58Z,2019-03-26T12:54:58Z,CLOSED,False,1380,42,13,https://github.com/jpochyla,WIP: Simplify trezor.ui subsystem,9,[],https://github.com/trezor/trezor-core/pull/512,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/512,Explores a different approach to creating UI components.,Explores a different approach to creating UI components.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,513,2019-03-26T12:51:03Z,2019-04-20T10:37:46Z,2019-04-20T10:37:47Z,CLOSED,False,167,298,4,https://github.com/jpochyla,WIP: Synchronous protobuf and wire codecs,2,[],https://github.com/trezor/trezor-core/pull/513,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/513,"Explores a synchronous (buffering) approach to wire and protobuf codecs.
Goals:

Increase sending/receiving performance
Decrease pressure on memory (no need to constantly allocate generators in the protobuf codec)
Simplify code","Explores a synchronous (buffering) approach to wire and protobuf codecs.
Goals:

Increase sending/receiving performance
Decrease pressure on memory (no need to constantly allocate generators in the protobuf codec)
Simplify code",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,513,2019-03-26T12:51:03Z,2019-04-20T10:37:46Z,2019-04-20T10:37:47Z,CLOSED,False,167,298,4,https://github.com/jpochyla,WIP: Synchronous protobuf and wire codecs,2,[],https://github.com/trezor/trezor-core/pull/513,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/513#issuecomment-485088899,"Explores a synchronous (buffering) approach to wire and protobuf codecs.
Goals:

Increase sending/receiving performance
Decrease pressure on memory (no need to constantly allocate generators in the protobuf codec)
Simplify code",Please rebase and reopen against https://github.com/trezor/trezor-firmware repo,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,514,2019-03-26T12:56:40Z,2019-04-20T10:37:35Z,2019-04-20T10:37:35Z,CLOSED,False,1560,1639,48,https://github.com/jpochyla,WIP: Simplify trezor.ui subsystem,8,[],https://github.com/trezor/trezor-core/pull/514,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/514,Explores a different approach to creating UI components.,Explores a different approach to creating UI components.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,514,2019-03-26T12:56:40Z,2019-04-20T10:37:35Z,2019-04-20T10:37:35Z,CLOSED,False,1560,1639,48,https://github.com/jpochyla,WIP: Simplify trezor.ui subsystem,8,[],https://github.com/trezor/trezor-core/pull/514,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/514#issuecomment-485088868,Explores a different approach to creating UI components.,Please rebase and reopen against https://github.com/trezor/trezor-firmware repo,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,515,2019-03-26T12:58:28Z,2019-04-20T10:36:51Z,2019-04-20T10:36:51Z,CLOSED,False,938,723,73,https://github.com/jpochyla,WIP: Static typing,4,[],https://github.com/trezor/trezor-core/pull/515,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/515,Expands and formalizes used type annotations. Added mypy to statically type-check the code base.,Expands and formalizes used type annotations. Added mypy to statically type-check the code base.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,515,2019-03-26T12:58:28Z,2019-04-20T10:36:51Z,2019-04-20T10:36:51Z,CLOSED,False,938,723,73,https://github.com/jpochyla,WIP: Static typing,4,[],https://github.com/trezor/trezor-core/pull/515,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/515#issuecomment-485088750,Expands and formalizes used type annotations. Added mypy to statically type-check the code base.,Please rebase and reopen against https://github.com/trezor/trezor-firmware repo,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,518,2019-03-26T13:42:32Z,2019-04-17T13:59:57Z,2019-04-17T13:59:58Z,CLOSED,False,214,3,7,https://github.com/adonagy,Tezos: add voting support,1,"['firmware', 'altcoin', 'feature']",https://github.com/trezor/trezor-core/pull/518,https://github.com/adonagy,1,https://github.com/trezor/trezor-core/pull/518,Added support for signing tezos voting operations - proposal and ballot. With these operations we allow tezos user to participate in the protocol amendment process with a Trezor T device,Added support for signing tezos voting operations - proposal and ballot. With these operations we allow tezos user to participate in the protocol amendment process with a Trezor T device,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,518,2019-03-26T13:42:32Z,2019-04-17T13:59:57Z,2019-04-17T13:59:58Z,CLOSED,False,214,3,7,https://github.com/adonagy,Tezos: add voting support,1,"['firmware', 'altcoin', 'feature']",https://github.com/trezor/trezor-core/pull/518,https://github.com/adonagy,2,https://github.com/trezor/trezor-core/pull/518#issuecomment-476642986,Added support for signing tezos voting operations - proposal and ballot. With these operations we allow tezos user to participate in the protocol amendment process with a Trezor T device,Depends on trezor/trezor-common#300,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,518,2019-03-26T13:42:32Z,2019-04-17T13:59:57Z,2019-04-17T13:59:58Z,CLOSED,False,214,3,7,https://github.com/adonagy,Tezos: add voting support,1,"['firmware', 'altcoin', 'feature']",https://github.com/trezor/trezor-core/pull/518,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/518#issuecomment-478036110,Added support for signing tezos voting operations - proposal and ballot. With these operations we allow tezos user to participate in the protocol amendment process with a Trezor T device,Just a side note: let's make sure UI is correct - not just visually but also from the functioning side (Cancel buttons) etc.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,518,2019-03-26T13:42:32Z,2019-04-17T13:59:57Z,2019-04-17T13:59:58Z,CLOSED,False,214,3,7,https://github.com/adonagy,Tezos: add voting support,1,"['firmware', 'altcoin', 'feature']",https://github.com/trezor/trezor-core/pull/518,https://github.com/adonagy,4,https://github.com/trezor/trezor-core/pull/518#issuecomment-483227937,Added support for signing tezos voting operations - proposal and ballot. With these operations we allow tezos user to participate in the protocol amendment process with a Trezor T device,"@tsusanka The UI is correct functionally as well. When we sign a ballot operation,  there is the cancel button from request_confirm in case the user decides to cancel the operation.
The proposal screen also contains the same cancel button. When we are signing multiple proposals in the same operation, we use Scrollpage, with every proposal hash shown on a different page, the cancel button shown on the last screen.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,518,2019-03-26T13:42:32Z,2019-04-17T13:59:57Z,2019-04-17T13:59:58Z,CLOSED,False,214,3,7,https://github.com/adonagy,Tezos: add voting support,1,"['firmware', 'altcoin', 'feature']",https://github.com/trezor/trezor-core/pull/518,https://github.com/prusnak,5,https://github.com/trezor/trezor-core/pull/518#issuecomment-484102147,Added support for signing tezos voting operations - proposal and ballot. With these operations we allow tezos user to participate in the protocol amendment process with a Trezor T device,Superseded by trezor/trezor-firmware#41,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,527,2019-04-02T08:17:02Z,2019-04-10T18:33:07Z,2019-04-10T18:33:35Z,CLOSED,False,80,47,8,https://github.com/tsusanka,Permanent display rotation,3,[],https://github.com/trezor/trezor-core/pull/527,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/527,"Permanently store display rotation and disable swipe gesture, closes #162. After merged in trezor-common I'll force push here.
common: trezor/trezor-common#304
python-trezor: trezor/python-trezor#372
Any ideas how to test this?","Permanently store display rotation and disable swipe gesture, closes #162. After merged in trezor-common I'll force push here.
common: trezor/trezor-common#304
python-trezor: trezor/python-trezor#372
Any ideas how to test this?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,527,2019-04-02T08:17:02Z,2019-04-10T18:33:07Z,2019-04-10T18:33:35Z,CLOSED,False,80,47,8,https://github.com/tsusanka,Permanent display rotation,3,[],https://github.com/trezor/trezor-core/pull/527,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/527#issuecomment-478903084,"Permanently store display rotation and disable swipe gesture, closes #162. After merged in trezor-common I'll force push here.
common: trezor/trezor-common#304
python-trezor: trezor/python-trezor#372
Any ideas how to test this?",trezor/trezor-common#304 merged,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,527,2019-04-02T08:17:02Z,2019-04-10T18:33:07Z,2019-04-10T18:33:35Z,CLOSED,False,80,47,8,https://github.com/tsusanka,Permanent display rotation,3,[],https://github.com/trezor/trezor-core/pull/527,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/527#issuecomment-478907146,"Permanently store display rotation and disable swipe gesture, closes #162. After merged in trezor-common I'll force push here.
common: trezor/trezor-common#304
python-trezor: trezor/python-trezor#372
Any ideas how to test this?",Updated,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,527,2019-04-02T08:17:02Z,2019-04-10T18:33:07Z,2019-04-10T18:33:35Z,CLOSED,False,80,47,8,https://github.com/tsusanka,Permanent display rotation,3,[],https://github.com/trezor/trezor-core/pull/527,https://github.com/prusnak,4,https://github.com/trezor/trezor-core/pull/527#issuecomment-481810318,"Permanently store display rotation and disable swipe gesture, closes #162. After merged in trezor-common I'll force push here.
common: trezor/trezor-common#304
python-trezor: trezor/python-trezor#372
Any ideas how to test this?",Merged via bd812fe (I amended the commit where we update trezor-common to the latest version).,True,{'THUMBS_UP': ['https://github.com/tsusanka']}
trezor/trezor-core,https://github.com/trezor/trezor-core,530,2019-04-02T12:51:58Z,2019-04-02T13:26:35Z,2019-04-02T13:27:07Z,MERGED,True,27,12,5,https://github.com/jpochyla,Skip identical screenshots in display.save,1,[],https://github.com/trezor/trezor-core/pull/530,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/530,Base of architecture for UI tests and workflow documentation.,Base of architecture for UI tests and workflow documentation.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,531,2019-04-02T13:36:43Z,2019-04-10T14:34:32Z,2019-04-10T14:34:35Z,MERGED,True,15,2,4,https://github.com/jpochyla,Save screen after every refresh,2,[],https://github.com/trezor/trezor-core/pull/531,https://github.com/jpochyla,1,https://github.com/trezor/trezor-core/pull/531,"If environment variable TREZOR_SAVE_SCREEN is set, every screen refresh produces a screenshot in current directory. Useful for integration testing and generating workflow documentation.","If environment variable TREZOR_SAVE_SCREEN is set, every screen refresh produces a screenshot in current directory. Useful for integration testing and generating workflow documentation.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,531,2019-04-02T13:36:43Z,2019-04-10T14:34:32Z,2019-04-10T14:34:35Z,MERGED,True,15,2,4,https://github.com/jpochyla,Save screen after every refresh,2,[],https://github.com/trezor/trezor-core/pull/531,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/531#issuecomment-479011076,"If environment variable TREZOR_SAVE_SCREEN is set, every screen refresh produces a screenshot in current directory. Useful for integration testing and generating workflow documentation.",Cool! Tested ACK.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,532,2019-04-03T09:01:23Z,2019-04-04T11:41:00Z,2019-04-04T11:41:04Z,MERGED,True,53,31,31,https://github.com/tsusanka,Pass Keychain to path validation function to throw error before warning,2,[],https://github.com/trezor/trezor-core/pull/532,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/532,"Pass Keychain to path validation function, which then calls new function validate_path on the Keychain to see if it allows this path. This closes #519 .
For the time being, this ignores curves whatsoever. So, if the user provides path with a non-hardened item for an app, which uses uncompatible curve (ed25519), we still show a warning and then fail, which is exactly what we want to solve. Example: sending 44'/1729'/10'/11 to Tezos. We could either:

Ignore this. It is somewhat an edge case.
Pass curve to the validate_path function. It is yet another parameter (which is a bit ugly), but we could check the case above and also if the curve matches one of the Keychain's.
In Keychain.validate_path check if the curve is ed25519 and in that case forbid non-hardened items.","Pass Keychain to path validation function, which then calls new function validate_path on the Keychain to see if it allows this path. This closes #519 .
For the time being, this ignores curves whatsoever. So, if the user provides path with a non-hardened item for an app, which uses uncompatible curve (ed25519), we still show a warning and then fail, which is exactly what we want to solve. Example: sending 44'/1729'/10'/11 to Tezos. We could either:

Ignore this. It is somewhat an edge case.
Pass curve to the validate_path function. It is yet another parameter (which is a bit ugly), but we could check the case above and also if the curve matches one of the Keychain's.
In Keychain.validate_path check if the curve is ed25519 and in that case forbid non-hardened items.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,532,2019-04-03T09:01:23Z,2019-04-04T11:41:00Z,2019-04-04T11:41:04Z,MERGED,True,53,31,31,https://github.com/tsusanka,Pass Keychain to path validation function to throw error before warning,2,[],https://github.com/trezor/trezor-core/pull/532,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/532#issuecomment-479862683,"Pass Keychain to path validation function, which then calls new function validate_path on the Keychain to see if it allows this path. This closes #519 .
For the time being, this ignores curves whatsoever. So, if the user provides path with a non-hardened item for an app, which uses uncompatible curve (ed25519), we still show a warning and then fail, which is exactly what we want to solve. Example: sending 44'/1729'/10'/11 to Tezos. We could either:

Ignore this. It is somewhat an edge case.
Pass curve to the validate_path function. It is yet another parameter (which is a bit ugly), but we could check the case above and also if the curve matches one of the Keychain's.
In Keychain.validate_path check if the curve is ed25519 and in that case forbid non-hardened items.",I'm merging this and I'll file another PR for the curve issue.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,535,2019-04-04T12:05:02Z,2019-04-17T14:25:51Z,2019-04-17T14:26:44Z,CLOSED,False,28,31,5,https://github.com/real-or-random,extmod/modtrezorcrypto: return False or None consistently when a signature verification fails,1,[],https://github.com/trezor/trezor-core/pull/535,https://github.com/real-or-random,1,https://github.com/trezor/trezor-core/pull/535,"So far, we either return False (or None for public recovery) or raise a
ValueError (e.g., when the length of the signature). This is
inconsistent and dangerous because the inputs to signature verification
may be attacker-provided and cannot be assumed to be well-formed.
This led to issue #422 where a firmware error is raised when an invalid
signature is is provided. This has been fixed for the ethereum app but
not for the wallet app. This commit addresses the problem at the core of
the issue, i.e., at the verification functions in extmod such that all
apps are covered.
This is a draft PR because it builds on top of #500. It should not be merged currently. But the only commit is the last one, and this is ready for review.","So far, we either return False (or None for public recovery) or raise a
ValueError (e.g., when the length of the signature). This is
inconsistent and dangerous because the inputs to signature verification
may be attacker-provided and cannot be assumed to be well-formed.
This led to issue #422 where a firmware error is raised when an invalid
signature is is provided. This has been fixed for the ethereum app but
not for the wallet app. This commit addresses the problem at the core of
the issue, i.e., at the verification functions in extmod such that all
apps are covered.
This is a draft PR because it builds on top of #500. It should not be merged currently. But the only commit is the last one, and this is ready for review.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,535,2019-04-04T12:05:02Z,2019-04-17T14:25:51Z,2019-04-17T14:26:44Z,CLOSED,False,28,31,5,https://github.com/real-or-random,extmod/modtrezorcrypto: return False or None consistently when a signature verification fails,1,[],https://github.com/trezor/trezor-core/pull/535,https://github.com/real-or-random,2,https://github.com/trezor/trezor-core/pull/535#issuecomment-483280496,"So far, we either return False (or None for public recovery) or raise a
ValueError (e.g., when the length of the signature). This is
inconsistent and dangerous because the inputs to signature verification
may be attacker-provided and cannot be assumed to be well-formed.
This led to issue #422 where a firmware error is raised when an invalid
signature is is provided. This has been fixed for the ethereum app but
not for the wallet app. This commit addresses the problem at the core of
the issue, i.e., at the verification functions in extmod such that all
apps are covered.
This is a draft PR because it builds on top of #500. It should not be merged currently. But the only commit is the last one, and this is ready for review.",rebased on #500,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,535,2019-04-04T12:05:02Z,2019-04-17T14:25:51Z,2019-04-17T14:26:44Z,CLOSED,False,28,31,5,https://github.com/real-or-random,extmod/modtrezorcrypto: return False or None consistently when a signature verification fails,1,[],https://github.com/trezor/trezor-core/pull/535,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/535#issuecomment-483313065,"So far, we either return False (or None for public recovery) or raise a
ValueError (e.g., when the length of the signature). This is
inconsistent and dangerous because the inputs to signature verification
may be attacker-provided and cannot be assumed to be well-formed.
This led to issue #422 where a firmware error is raised when an invalid
signature is is provided. This has been fixed for the ethereum app but
not for the wallet app. This commit addresses the problem at the core of
the issue, i.e., at the verification functions in extmod such that all
apps are covered.
This is a draft PR because it builds on top of #500. It should not be merged currently. But the only commit is the last one, and this is ready for review.",@real-or-random I guess this one should be switched to regular PR? (After #500 has been merged),True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,535,2019-04-04T12:05:02Z,2019-04-17T14:25:51Z,2019-04-17T14:26:44Z,CLOSED,False,28,31,5,https://github.com/real-or-random,extmod/modtrezorcrypto: return False or None consistently when a signature verification fails,1,[],https://github.com/trezor/trezor-core/pull/535,https://github.com/real-or-random,4,https://github.com/trezor/trezor-core/pull/535#issuecomment-483315999,"So far, we either return False (or None for public recovery) or raise a
ValueError (e.g., when the length of the signature). This is
inconsistent and dangerous because the inputs to signature verification
may be attacker-provided and cannot be assumed to be well-formed.
This led to issue #422 where a firmware error is raised when an invalid
signature is is provided. This has been fixed for the ethereum app but
not for the wallet app. This commit addresses the problem at the core of
the issue, i.e., at the verification functions in extmod such that all
apps are covered.
This is a draft PR because it builds on top of #500. It should not be merged currently. But the only commit is the last one, and this is ready for review.","Yes, I had left this as draft because #500 is not merged yet, but this is ready for review!
edit: oh it's merged now and now Github complains that this PR needs a rebase... Weird. I'll look into tat",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,535,2019-04-04T12:05:02Z,2019-04-17T14:25:51Z,2019-04-17T14:26:44Z,CLOSED,False,28,31,5,https://github.com/real-or-random,extmod/modtrezorcrypto: return False or None consistently when a signature verification fails,1,[],https://github.com/trezor/trezor-core/pull/535,https://github.com/real-or-random,5,https://github.com/trezor/trezor-core/pull/535#issuecomment-483328496,"So far, we either return False (or None for public recovery) or raise a
ValueError (e.g., when the length of the signature). This is
inconsistent and dangerous because the inputs to signature verification
may be attacker-provided and cannot be assumed to be well-formed.
This led to issue #422 where a firmware error is raised when an invalid
signature is is provided. This has been fixed for the ethereum app but
not for the wallet app. This commit addresses the problem at the core of
the issue, i.e., at the verification functions in extmod such that all
apps are covered.
This is a draft PR because it builds on top of #500. It should not be merged currently. But the only commit is the last one, and this is ready for review.","Okay, sure, there were changes to master of course and I was confused. It's properly rebased now.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,535,2019-04-04T12:05:02Z,2019-04-17T14:25:51Z,2019-04-17T14:26:44Z,CLOSED,False,28,31,5,https://github.com/real-or-random,extmod/modtrezorcrypto: return False or None consistently when a signature verification fails,1,[],https://github.com/trezor/trezor-core/pull/535,https://github.com/tsusanka,6,https://github.com/trezor/trezor-core/pull/535#issuecomment-484112745,"So far, we either return False (or None for public recovery) or raise a
ValueError (e.g., when the length of the signature). This is
inconsistent and dangerous because the inputs to signature verification
may be attacker-provided and cannot be assumed to be well-formed.
This led to issue #422 where a firmware error is raised when an invalid
signature is is provided. This has been fixed for the ethereum app but
not for the wallet app. This commit addresses the problem at the core of
the issue, i.e., at the verification functions in extmod such that all
apps are covered.
This is a draft PR because it builds on top of #500. It should not be merged currently. But the only commit is the last one, and this is ready for review.","ACKed by @jpochyla. We're moving to monorepo: https://github.com/trezor/trezor-firmware . I've dared to merge it to master directly, so you don't have to resubmit, I hope that's alright, see trezor/trezor-firmware@5dc0a1e.",True,{'THUMBS_UP': ['https://github.com/real-or-random']}
trezor/trezor-core,https://github.com/trezor/trezor-core,536,2019-04-04T14:28:17Z,2019-04-10T13:24:54Z,2019-04-10T13:45:35Z,MERGED,True,26,21,2,https://github.com/andrewkozlik,recovery: Verify the return value of config.has_pin() in dry run reco…,1,[],https://github.com/trezor/trezor-core/pull/536,https://github.com/andrewkozlik,1,https://github.com/trezor/trezor-core/pull/536,"…very. Improve UI messages. Remove code duplication in modtrezorconfig.c.
See #534","…very. Improve UI messages. Remove code duplication in modtrezorconfig.c.
See #534",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,537,2019-04-04T21:02:32Z,2019-04-04T22:01:01Z,2019-04-04T22:01:02Z,CLOSED,False,3,0,1,https://github.com/kklash,"Add KCS, MITH, and TNB tokens",2,[],https://github.com/trezor/trezor-core/pull/537,https://github.com/kklash,1,https://github.com/trezor/trezor-core/pull/537,"Mithril (MITH): https://etherscan.io/address/0x3893b9422cd5d70a81edeffe3d5a1c6a978310bb
KuCoin (KCS): https://etherscan.io/address/0x039b5649a59967e3e936d7471f9c3700100ee1ab
Time Bank (TNB): https://etherscan.io/address/0xf7920b0768ecb20a123fac32311d07d193381d6f","Mithril (MITH): https://etherscan.io/address/0x3893b9422cd5d70a81edeffe3d5a1c6a978310bb
KuCoin (KCS): https://etherscan.io/address/0x039b5649a59967e3e936d7471f9c3700100ee1ab
Time Bank (TNB): https://etherscan.io/address/0xf7920b0768ecb20a123fac32311d07d193381d6f",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,537,2019-04-04T21:02:32Z,2019-04-04T22:01:01Z,2019-04-04T22:01:02Z,CLOSED,False,3,0,1,https://github.com/kklash,"Add KCS, MITH, and TNB tokens",2,[],https://github.com/trezor/trezor-core/pull/537,https://github.com/kklash,2,https://github.com/trezor/trezor-core/pull/537#issuecomment-480079678,"Mithril (MITH): https://etherscan.io/address/0x3893b9422cd5d70a81edeffe3d5a1c6a978310bb
KuCoin (KCS): https://etherscan.io/address/0x039b5649a59967e3e936d7471f9c3700100ee1ab
Time Bank (TNB): https://etherscan.io/address/0xf7920b0768ecb20a123fac32311d07d193381d6f","Ah sorry, didn't realized these came from trezor-common. Will open a PR there instead.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,539,2019-04-08T09:15:54Z,2019-04-09T10:54:54Z,2019-04-09T11:25:16Z,CLOSED,False,431,12,22,https://github.com/Adman,Add Onegram support,21,[],https://github.com/trezor/trezor-core/pull/539,https://github.com/Adman,1,https://github.com/trezor/trezor-core/pull/539,,,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,539,2019-04-08T09:15:54Z,2019-04-09T10:54:54Z,2019-04-09T11:25:16Z,CLOSED,False,431,12,22,https://github.com/Adman,Add Onegram support,21,[],https://github.com/trezor/trezor-core/pull/539,https://github.com/Adman,2,https://github.com/trezor/trezor-core/pull/539#issuecomment-480805369,,Note: I will link the common repo back when the review is done or the common is merged.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,539,2019-04-08T09:15:54Z,2019-04-09T10:54:54Z,2019-04-09T11:25:16Z,CLOSED,False,431,12,22,https://github.com/Adman,Add Onegram support,21,[],https://github.com/trezor/trezor-core/pull/539,https://github.com/prusnak,3,https://github.com/trezor/trezor-core/pull/539#issuecomment-481203273,,Let's not add this insignificant coin. Feel free to create a fork of the firmware and deliver it to Onegram users.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,539,2019-04-08T09:15:54Z,2019-04-09T10:54:54Z,2019-04-09T11:25:16Z,CLOSED,False,431,12,22,https://github.com/Adman,Add Onegram support,21,[],https://github.com/trezor/trezor-core/pull/539,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/539#issuecomment-481211827,,For reference to other users: please read this https://wiki.trezor.io/Developers_guide:Contributing before doing some larger amount of work,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,540,2019-04-08T11:49:58Z,2019-04-10T14:22:05Z,2019-04-10T14:22:37Z,MERGED,True,46,0,6,https://github.com/ciny,#506 display custom locktime,7,[],https://github.com/trezor/trezor-core/pull/540,https://github.com/ciny,1,https://github.com/trezor/trezor-core/pull/540,Dates need work on embed platforms. All tests pass.,Dates need work on embed platforms. All tests pass.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,540,2019-04-08T11:49:58Z,2019-04-10T14:22:05Z,2019-04-10T14:22:37Z,MERGED,True,46,0,6,https://github.com/ciny,#506 display custom locktime,7,[],https://github.com/trezor/trezor-core/pull/540,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/540#issuecomment-481712002,Dates need work on embed platforms. All tests pass.,"Great, thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/541,Testing with the official Monero binary client and trezor tests.,Testing with the official Monero binary client and trezor tests.,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/ph4r05,2,https://github.com/trezor/trezor-core/pull/541#issuecomment-480822055,Testing with the official Monero binary client and trezor tests.,"I've just tested that the binary compiled for Ubuntu 14.04 works also for Ubuntu {16.04, 18.04}.
Do you want to somehow condition binary on the current OS? Do you start these tests also on OSX?
After all the Monero PRs are merged I will add the branch which contains the code and Dockerfile to produce this binary. Currently it is a bit messy as I cherry-picked all non-merged PRs to make these tests work. Commit: ph4r05/monero@0f2bd1f",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/541#issuecomment-480836016,Testing with the official Monero binary client and trezor tests.,"I've tested this on my computer and it works, I have a few suggestions:

rename trezor_tests to trezor_monero_tests or similar
add trezor_tests{,.log} to .gitignore
fetch a hash first and compare it with trezor_tests file if present, so we can run the tests repeatedly without having to download the binary again


@jpochyla What's your take on OSX? Do we want to maintain that or we're fine with linux only? I'm not sure myself",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/ph4r05,4,https://github.com/trezor/trezor-core/pull/541#issuecomment-481221843,Testing with the official Monero binary client and trezor tests.,"rename trezor_tests to trezor_monero_tests or similar
add trezor_tests{,.log} to .gitignore
fetch a hash first and compare it with trezor_tests file if present, so we can run the tests repeatedly without having to download the binary again


I've addressed the suggestions, pls check.
For OSX I am creating an ephemeral docker container running the tests. Due to limitation of the UDP transport I had to use --network=host for the container and socat to make emulator accessible on localhostfrom within the container (monero client can connect only to localhost emulators)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/tsusanka,5,https://github.com/trezor/trezor-core/pull/541#issuecomment-481269177,Testing with the official Monero binary client and trezor tests.,"I've addressed the suggestions, pls check.

I've pushed some typos. Also, the pwd command gets evaluated to the root of the directory, so the .gitignore does not seem to work. I'm not really sure why though because I am in the tests directory.

From the docker side, probably someone with OSX should try it. @jpochyla want to give it a go?",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/tsusanka,6,https://github.com/trezor/trezor-core/pull/541#issuecomment-481269820,Testing with the official Monero binary client and trezor tests.,"I couldn't push to your PR, can you cherry-pick please? ed09b6b",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/ph4r05,7,https://github.com/trezor/trezor-core/pull/541#issuecomment-481311663,Testing with the official Monero binary client and trezor tests.,"I've pushed some typos. Also, the pwd command gets evaluated to the root of the directory, so the .gitignore does not seem to work. I'm not really sure why though because I am in the tests directory.

I was thinking about it also, the script does cd .. which is quite subtle and hard to spot. I've taken it from run_tests_device_emu.sh.

I couldn't push to your PR, can you cherry-pick please? ed09b6b

Done",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/ph4r05,8,https://github.com/trezor/trezor-core/pull/541#issuecomment-481320949,Testing with the official Monero binary client and trezor tests.,"From the docker side, probably someone with OSX should try it. @jpochyla want to give it a go?

I've made a slight change, you can test the docker as well now:
RUN_PYTHON_TESTS=0 FORCE_DOCKER_USE=1 ./run_tests_device_emu_monero.sh",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/ph4r05,9,https://github.com/trezor/trezor-core/pull/541#issuecomment-481765473,Testing with the official Monero binary client and trezor tests.,"Note: I will update the binary in the evening so pls don't merge until then, thanks",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,541,2019-04-08T12:35:49Z,2019-04-11T11:45:32Z,2019-04-11T11:45:33Z,MERGED,True,78,8,2,https://github.com/ph4r05,tests: monero binary test added,1,[],https://github.com/trezor/trezor-core/pull/541,https://github.com/jpochyla,10,https://github.com/trezor/trezor-core/pull/541#issuecomment-482026651,Testing with the official Monero binary client and trezor tests.,"Works well, thanks!",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,542,2019-04-08T14:14:32Z,2019-04-10T13:53:00Z,2019-04-10T13:53:04Z,MERGED,True,225,101,45,https://github.com/tsusanka,paths: validate curve as well,2,[],https://github.com/trezor/trezor-core/pull/542,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/542,"As discussed in #532, this PR adds also curve checking to the existing path validation.","As discussed in #532, this PR adds also curve checking to the existing path validation.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,542,2019-04-08T14:14:32Z,2019-04-10T13:53:00Z,2019-04-10T13:53:04Z,MERGED,True,225,101,45,https://github.com/tsusanka,paths: validate curve as well,2,[],https://github.com/trezor/trezor-core/pull/542,https://github.com/matejcik,2,https://github.com/trezor/trezor-core/pull/542#issuecomment-480864921,"As discussed in #532, this PR adds also curve checking to the existing path validation.","from a cursory read, this would break Cardano's non-hardened derivation on ed25519
(also not catching NEM's ed25519-keccak)
Also passing the curve argument seems kind of pointless? The curve is specified in the namespace, and right now it is not user-configurable, so we're validating whether you're passing the same constant to validate_path that you also passed to namespace in the next file over.
A more sensible argument would be something like allow_unhardened=None|True|False, with:

False explicitly disallowing (for NEM which doesn't use ""ed25519"")
True for explicitly allowing (for Cardano which can do unhardened derivation on ed25519)
and None for default (disallow for ""ed25519"", allow otherwise; or more generally, allow for curves that can do it and disallow for those that can't)",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,542,2019-04-08T14:14:32Z,2019-04-10T13:53:00Z,2019-04-10T13:53:04Z,MERGED,True,225,101,45,https://github.com/tsusanka,paths: validate curve as well,2,[],https://github.com/trezor/trezor-core/pull/542,https://github.com/tsusanka,3,https://github.com/trezor/trezor-core/pull/542#issuecomment-481230262,"As discussed in #532, this PR adds also curve checking to the existing path validation.","from a cursory read, this would break Cardano's non-hardened derivation on ed25519

It shouldn't, Cardano has its own Keychain.

(also not catching NEM's ed25519-keccak)

Great point!

Yeah, maybe you're right. I was also thinking if we shouldn't do this somehow automagically. For example, the validate_path function knows where from it was called, so it can fetch the app's CURVE constant from the module's __init__. But it seems as too much woodoo.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,542,2019-04-08T14:14:32Z,2019-04-10T13:53:00Z,2019-04-10T13:53:04Z,MERGED,True,225,101,45,https://github.com/tsusanka,paths: validate curve as well,2,[],https://github.com/trezor/trezor-core/pull/542,https://github.com/tsusanka,4,https://github.com/trezor/trezor-core/pull/542#issuecomment-481277604,"As discussed in #532, this PR adds also curve checking to the existing path validation.",Fixed NEM's case (ed25519-keccak).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,543,2019-04-08T23:17:19Z,2019-04-09T12:21:28Z,2019-04-09T15:30:16Z,MERGED,True,30,24,1,https://github.com/MrMebelMan,"Update run_tests.sh: show totals, allow interrupts, add colors",1,[],https://github.com/trezor/trezor-core/pull/543,https://github.com/MrMebelMan,1,https://github.com/trezor/trezor-core/pull/543,"show the number of passed and failed tests


allow the user to stop running tests via CTRL+C


colorize the output","show the number of passed and failed tests


allow the user to stop running tests via CTRL+C


colorize the output",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,543,2019-04-08T23:17:19Z,2019-04-09T12:21:28Z,2019-04-09T15:30:16Z,MERGED,True,30,24,1,https://github.com/MrMebelMan,"Update run_tests.sh: show totals, allow interrupts, add colors",1,[],https://github.com/trezor/trezor-core/pull/543,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/543#issuecomment-481228157,"show the number of passed and failed tests


allow the user to stop running tests via CTRL+C


colorize the output",This is great! Thanks.,True,{'HEART': ['https://github.com/MrMebelMan']}
trezor/trezor-core,https://github.com/trezor/trezor-core,544,2019-04-10T11:40:14Z,2019-04-10T14:30:55Z,2019-04-10T14:30:58Z,MERGED,True,7,1,1,https://github.com/tsusanka,u2f: pad last packet with zeros,1,[],https://github.com/trezor/trezor-core/pull/544,https://github.com/tsusanka,1,https://github.com/trezor/trezor-core/pull/544,Closes #529,Closes #529,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,549,2019-04-11T03:53:39Z,2019-04-11T11:22:01Z,2019-04-11T13:21:51Z,MERGED,True,8,14,1,https://github.com/MrMebelMan,utils: optimize __slots__ comparison,1,[],https://github.com/trezor/trezor-core/pull/549,https://github.com/MrMebelMan,1,https://github.com/trezor/trezor-core/pull/549,"I've noticed that when comparing __slots__' attributes, a new dictionary is being created.
To benefit from improved speed and memory usage we should access these attributes directly 💪","I've noticed that when comparing __slots__' attributes, a new dictionary is being created.
To benefit from improved speed and memory usage we should access these attributes directly 💪",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,549,2019-04-11T03:53:39Z,2019-04-11T11:22:01Z,2019-04-11T13:21:51Z,MERGED,True,8,14,1,https://github.com/MrMebelMan,utils: optimize __slots__ comparison,1,[],https://github.com/trezor/trezor-core/pull/549,https://github.com/prusnak,2,https://github.com/trezor/trezor-core/pull/549#issuecomment-482111586,"I've noticed that when comparing __slots__' attributes, a new dictionary is being created.
To benefit from improved speed and memory usage we should access these attributes directly 💪",🎉,True,{'ROCKET': ['https://github.com/MrMebelMan']}
trezor/trezor-core,https://github.com/trezor/trezor-core,551,2019-04-11T14:45:39Z,2019-04-11T19:17:04Z,2019-04-11T19:17:04Z,MERGED,True,11,11,1,https://github.com/ph4r05,"tests: minor monero script test fix, quotes",1,[],https://github.com/trezor/trezor-core/pull/551,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/551,After @MrMebelMan feedback I've added some quotes to make script more safe. @tsusanka sry for additional pr.,After @MrMebelMan feedback I've added some quotes to make script more safe. @tsusanka sry for additional pr.,True,{'HEART': ['https://github.com/MrMebelMan']}
trezor/trezor-core,https://github.com/trezor/trezor-core,551,2019-04-11T14:45:39Z,2019-04-11T19:17:04Z,2019-04-11T19:17:04Z,MERGED,True,11,11,1,https://github.com/ph4r05,"tests: minor monero script test fix, quotes",1,[],https://github.com/trezor/trezor-core/pull/551,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/551#issuecomment-482269375,After @MrMebelMan feedback I've added some quotes to make script more safe. @tsusanka sry for additional pr.,PRs are always welcome ;).,True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,552,2019-04-18T17:09:52Z,2019-04-19T14:09:22Z,2019-04-19T14:09:22Z,CLOSED,False,1,1,1,https://github.com/ph4r05,xmr: live refresh progress starts from 0,1,[],https://github.com/trezor/trezor-core/pull/552,https://github.com/ph4r05,1,https://github.com/trezor/trezor-core/pull/552,"Minor fix on live refresh progress monitoring, it started from -1 before.","Minor fix on live refresh progress monitoring, it started from -1 before.",True,{}
trezor/trezor-core,https://github.com/trezor/trezor-core,552,2019-04-18T17:09:52Z,2019-04-19T14:09:22Z,2019-04-19T14:09:22Z,CLOSED,False,1,1,1,https://github.com/ph4r05,xmr: live refresh progress starts from 0,1,[],https://github.com/trezor/trezor-core/pull/552,https://github.com/tsusanka,2,https://github.com/trezor/trezor-core/pull/552#issuecomment-484906994,"Minor fix on live refresh progress monitoring, it started from -1 before.","This was used only in UI so it does not have any other consequences, right?
Merged via trezor/trezor-firmware@021a8a0. From now on please open all PRs in trezor-firmware.",True,{}
