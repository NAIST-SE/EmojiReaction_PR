frida/frida-gum,https://github.com/frida/frida-gum,153,2016-03-08T16:02:53Z,2016-03-13T20:13:42Z,2016-03-13T20:13:42Z,MERGED,True,20,65,1,https://github.com/s1341,Implement enumerate_threads and modify_thread for qnx,2,[],https://github.com/frida/frida-gum/pull/153,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/153,"Currently this implementation uses a vfork to spawn a new process which can then inspect the threads of the original process, as inspecting the currently running process with procfs is broken on qnx","Currently this implementation uses a vfork to spawn a new process which can then inspect the threads of the original process, as inspecting the currently running process with procfs is broken on qnx",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,153,2016-03-08T16:02:53Z,2016-03-13T20:13:42Z,2016-03-13T20:13:42Z,MERGED,True,20,65,1,https://github.com/s1341,Implement enumerate_threads and modify_thread for qnx,2,[],https://github.com/frida/frida-gum/pull/153,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/153#issuecomment-196045524,"Currently this implementation uses a vfork to spawn a new process which can then inspect the threads of the original process, as inspecting the currently running process with procfs is broken on qnx",üëç,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,154,2016-03-18T00:54:57Z,2016-03-18T01:06:34Z,2016-03-18T01:07:05Z,MERGED,True,2004,11,15,https://github.com/oleavr,Add stream APIs for working with GIO streams,1,[],https://github.com/frida/frida-gum/pull/154,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/154,"For now we only expose constructors for the lowest level streams that
allow working with file-descriptors (UNIX) and HANDLEs (Windows), but
the JavaScript wrappers can obviously be used with any GInputStream and
GOutputStream implementation.","For now we only expose constructors for the lowest level streams that
allow working with file-descriptors (UNIX) and HANDLEs (Windows), but
the JavaScript wrappers can obviously be used with any GInputStream and
GOutputStream implementation.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,155,2016-03-24T09:02:05Z,2016-03-24T15:22:46Z,2016-03-24T15:22:46Z,MERGED,True,6,6,1,https://github.com/yusitek,"Check method type just for the invoked method, instead of method[0]",1,[],https://github.com/frida/frida-gum/pull/155,https://github.com/yusitek,1,https://github.com/frida/frida-gum/pull/155,"tech/yusi/fridademo/Jingdong.java
public class Jingdong { public static String a(String arg0, String arg1)   { return arg0 + arg1;  } public static int a(int arg0, int arg1)  {   return arg0 + arg1;   } }
frida js
Java.perform(function () { var Jingdong = Java.use(""tech.yusi.fridademo.Jingdong""); var ret = Jingdong.a(1, 2); send(ret); } 
It works well
if change Jingdong.java, remove one static
public class Jingdong { public String a(String arg0, String arg1)   { return arg0 + arg1;  } public static int a(int arg0, int arg1)  {   return arg0 + arg1;   } }
It  complains:
Error: a: cannot call instance method without an instance
In fact,
Jingdong.a.overload('int', 'int').type is staic
Jingdong.a.overload(""java.lang.String"", ""java.lang.String"").type is instaic,
methods[0]  == Jingdong.a.overload(""java.lang.String"", ""java.lang.String"")","tech/yusi/fridademo/Jingdong.java
public class Jingdong { public static String a(String arg0, String arg1)   { return arg0 + arg1;  } public static int a(int arg0, int arg1)  {   return arg0 + arg1;   } }
frida js
Java.perform(function () { var Jingdong = Java.use(""tech.yusi.fridademo.Jingdong""); var ret = Jingdong.a(1, 2); send(ret); } 
It works well
if change Jingdong.java, remove one static
public class Jingdong { public String a(String arg0, String arg1)   { return arg0 + arg1;  } public static int a(int arg0, int arg1)  {   return arg0 + arg1;   } }
It  complains:
Error: a: cannot call instance method without an instance
In fact,
Jingdong.a.overload('int', 'int').type is staic
Jingdong.a.overload(""java.lang.String"", ""java.lang.String"").type is instaic,
methods[0]  == Jingdong.a.overload(""java.lang.String"", ""java.lang.String"")",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,155,2016-03-24T09:02:05Z,2016-03-24T15:22:46Z,2016-03-24T15:22:46Z,MERGED,True,6,6,1,https://github.com/yusitek,"Check method type just for the invoked method, instead of method[0]",1,[],https://github.com/frida/frida-gum/pull/155,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/155#issuecomment-200884273,"tech/yusi/fridademo/Jingdong.java
public class Jingdong { public static String a(String arg0, String arg1)   { return arg0 + arg1;  } public static int a(int arg0, int arg1)  {   return arg0 + arg1;   } }
frida js
Java.perform(function () { var Jingdong = Java.use(""tech.yusi.fridademo.Jingdong""); var ret = Jingdong.a(1, 2); send(ret); } 
It works well
if change Jingdong.java, remove one static
public class Jingdong { public String a(String arg0, String arg1)   { return arg0 + arg1;  } public static int a(int arg0, int arg1)  {   return arg0 + arg1;   } }
It  complains:
Error: a: cannot call instance method without an instance
In fact,
Jingdong.a.overload('int', 'int').type is staic
Jingdong.a.overload(""java.lang.String"", ""java.lang.String"").type is instaic,
methods[0]  == Jingdong.a.overload(""java.lang.String"", ""java.lang.String"")","Whoah, nice catch! Thanks!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,156,2016-03-31T11:08:47Z,2016-03-31T14:02:03Z,2016-03-31T14:02:12Z,MERGED,True,3,0,1,https://github.com/s1341,Fix missing include on QNX,2,[],https://github.com/frida/frida-gum/pull/156,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/156,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,156,2016-03-31T11:08:47Z,2016-03-31T14:02:03Z,2016-03-31T14:02:12Z,MERGED,True,3,0,1,https://github.com/s1341,Fix missing include on QNX,2,[],https://github.com/frida/frida-gum/pull/156,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/156#issuecomment-203953785,,üëç,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,157,2016-03-31T14:30:00Z,2016-05-10T18:09:33Z,2016-05-10T18:09:33Z,MERGED,True,309,7,8,https://github.com/s1341,Implement temporary 'TLS' storage to work around malloc being called by pthread_setspecific,11,[],https://github.com/frida/frida-gum/pull/157,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/157,‚Ä¶in pthread_setspecific,‚Ä¶in pthread_setspecific,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,157,2016-03-31T14:30:00Z,2016-05-10T18:09:33Z,2016-05-10T18:09:33Z,MERGED,True,309,7,8,https://github.com/s1341,Implement temporary 'TLS' storage to work around malloc being called by pthread_setspecific,11,[],https://github.com/frida/frida-gum/pull/157,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/157#issuecomment-218241367,‚Ä¶in pthread_setspecific,üëç,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,158,2016-05-15T08:40:55Z,2016-05-17T14:40:34Z,2016-05-17T14:40:34Z,MERGED,True,81,29,1,https://github.com/s1341,Fix implementation of gum_module_find_export_by_name,2,[],https://github.com/frida/frida-gum/pull/158,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/158,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,158,2016-05-15T08:40:55Z,2016-05-17T14:40:34Z,2016-05-17T14:40:34Z,MERGED,True,81,29,1,https://github.com/s1341,Fix implementation of gum_module_find_export_by_name,2,[],https://github.com/frida/frida-gum/pull/158,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/158#issuecomment-219739042,,Sweet!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,159,2016-05-24T09:29:02Z,2017-02-17T23:09:04Z,2017-02-17T23:09:04Z,CLOSED,False,83,8,3,https://github.com/elvanderb,add ymm support,1,[],https://github.com/frida/frida-gum/pull/159,https://github.com/elvanderb,1,https://github.com/frida/frida-gum/pull/159,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,159,2016-05-24T09:29:02Z,2017-02-17T23:09:04Z,2017-02-17T23:09:04Z,CLOSED,False,83,8,3,https://github.com/elvanderb,add ymm support,1,[],https://github.com/frida/frida-gum/pull/159,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/159#issuecomment-280791552,,Merged with some minor style tweaks in bb62b18. Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,163,2016-06-22T14:08:49Z,2016-06-23T11:23:11Z,2016-06-23T11:23:11Z,MERGED,True,2999,21,36,https://github.com/s1341,Add mips support to frida-gum,52,[],https://github.com/frida/frida-gum/pull/163,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/163,"This patch set adds initial working support for linux-mips(el) (tested on a linux-mipsel box) to frida-gum.
There are still some things left to do, which will probably come as additional pull requests, but this is initial working support with all tests passing.","This patch set adds initial working support for linux-mips(el) (tested on a linux-mipsel box) to frida-gum.
There are still some things left to do, which will probably come as additional pull requests, but this is initial working support with all tests passing.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,163,2016-06-22T14:08:49Z,2016-06-23T11:23:11Z,2016-06-23T11:23:11Z,MERGED,True,2999,21,36,https://github.com/s1341,Add mips support to frida-gum,52,[],https://github.com/frida/frida-gum/pull/163,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/163#issuecomment-227897787,"This patch set adds initial working support for linux-mips(el) (tested on a linux-mipsel box) to frida-gum.
There are still some things left to do, which will probably come as additional pull requests, but this is initial working support with all tests passing.","Ok, reviewed everything. Awesome job! Let's merge this once the issues above have been addressed.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,163,2016-06-22T14:08:49Z,2016-06-23T11:23:11Z,2016-06-23T11:23:11Z,MERGED,True,2999,21,36,https://github.com/s1341,Add mips support to frida-gum,52,[],https://github.com/frida/frida-gum/pull/163,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/163#issuecomment-228009020,"This patch set adds initial working support for linux-mips(el) (tested on a linux-mipsel box) to frida-gum.
There are still some things left to do, which will probably come as additional pull requests, but this is initial working support with all tests passing.","w00t, looking great! One final thing, could you tweak the commit message of the last commit, ‚ÄúStyle fixes‚Äù, to follow the same form as the others?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,164,2016-06-27T09:11:57Z,2016-06-27T10:58:12Z,2016-06-27T10:58:12Z,MERGED,True,48,16,3,https://github.com/s1341,Some more mips support,6,[],https://github.com/frida/frida-gum/pull/164,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/164,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,167,2016-06-29T14:14:49Z,2016-06-29T14:17:16Z,2016-06-29T14:17:16Z,MERGED,True,20,0,1,https://github.com/s1341,Enhance mips fuzzy backtracer with more branch-and-link instructions,1,[],https://github.com/frida/frida-gum/pull/167,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/167,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,167,2016-06-29T14:14:49Z,2016-06-29T14:17:16Z,2016-06-29T14:17:16Z,MERGED,True,20,0,1,https://github.com/s1341,Enhance mips fuzzy backtracer with more branch-and-link instructions,1,[],https://github.com/frida/frida-gum/pull/167,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/167#issuecomment-229369623,,Awesome!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,168,2016-07-03T11:43:32Z,2016-07-03T12:19:56Z,2016-07-03T12:19:56Z,MERGED,True,1,1,1,https://github.com/0xItx,"Remove ""0x"" prefix from hexdump offsets",1,[],https://github.com/frida/frida-gum/pull/168,https://github.com/0xItx,1,https://github.com/frida/frida-gum/pull/168,"hexdump() is now reversible with ""xxd -r""","hexdump() is now reversible with ""xxd -r""",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,168,2016-07-03T11:43:32Z,2016-07-03T12:19:56Z,2016-07-03T12:19:56Z,MERGED,True,1,1,1,https://github.com/0xItx,"Remove ""0x"" prefix from hexdump offsets",1,[],https://github.com/frida/frida-gum/pull/168,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/168#issuecomment-230150645,"hexdump() is now reversible with ""xxd -r""",Sweet! Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,169,2016-07-11T10:09:09Z,2016-07-11T11:04:51Z,2016-07-11T11:04:51Z,MERGED,True,2,2,1,https://github.com/s1341,MIPS: Fix stack offset when getting/setting stack arguments,1,[],https://github.com/frida/frida-gum/pull/169,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/169,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,169,2016-07-11T10:09:09Z,2016-07-11T11:04:51Z,2016-07-11T11:04:51Z,MERGED,True,2,2,1,https://github.com/s1341,MIPS: Fix stack offset when getting/setting stack arguments,1,[],https://github.com/frida/frida-gum/pull/169,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/169#issuecomment-231705122,,Sweet!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,172,2016-10-10T03:07:10Z,2016-10-11T01:54:47Z,2016-10-11T21:30:12Z,MERGED,True,2486,198,20,https://github.com/oleavr,Add Socket.listen() and Socket.connect(),7,[],https://github.com/frida/frida-gum/pull/172,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/172,"By leveraging GSocketClient and GSocketListener, we get to re-use our
existing bindings for GInputStream and GOutputStream, and only need to add
bindings for GIOStream and GSocketConnection.
One could argue that this could be implemented in pure JavaScript by using
NativeFunction, but considering how many platform considerations need to be
taken into account, and that we already have this functionality in GIO (which
Frida depends on for its own needs), we might as well expose these APIs.
This will allow a Frida-specific net module to easily be built on top of these
building blocks. Consequently the idea is making it easy to use off-the-shelf
network modules from npm, e.g. for serving HTTP requests directly from an agent.

 V8: move guts of Native{Input,Output}Stream into {Input,Output}Stream and inherit from it
 V8: bind GIOStream
 V8: bind GSocketConnection (for setNoDelay())
 V8: connect
 V8: listen
 Duktape: move guts of Native{Input,Output}Stream into {Input,Output}Stream and inherit from it
 Duktape: bind GIOStream
 Duktape: bind GSocketConnection (for setNoDelay())
 Duktape: connect
 Duktape: listen","By leveraging GSocketClient and GSocketListener, we get to re-use our
existing bindings for GInputStream and GOutputStream, and only need to add
bindings for GIOStream and GSocketConnection.
One could argue that this could be implemented in pure JavaScript by using
NativeFunction, but considering how many platform considerations need to be
taken into account, and that we already have this functionality in GIO (which
Frida depends on for its own needs), we might as well expose these APIs.
This will allow a Frida-specific net module to easily be built on top of these
building blocks. Consequently the idea is making it easy to use off-the-shelf
network modules from npm, e.g. for serving HTTP requests directly from an agent.

 V8: move guts of Native{Input,Output}Stream into {Input,Output}Stream and inherit from it
 V8: bind GIOStream
 V8: bind GSocketConnection (for setNoDelay())
 V8: connect
 V8: listen
 Duktape: move guts of Native{Input,Output}Stream into {Input,Output}Stream and inherit from it
 Duktape: bind GIOStream
 Duktape: bind GSocketConnection (for setNoDelay())
 Duktape: connect
 Duktape: listen",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,174,2016-10-16T18:44:34Z,2016-10-16T19:08:06Z,2016-10-16T19:08:15Z,CLOSED,False,137,191,5,https://github.com/oleavr,Do not recycle the InvocationReturnValue object,1,[],https://github.com/frida/frida-gum/pull/174,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/174,"It's counter-intuitive that onLeave implementors need to deep-copy the
value to use it outside the callback.","It's counter-intuitive that onLeave implementors need to deep-copy the
value to use it outside the callback.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,174,2016-10-16T18:44:34Z,2016-10-16T19:08:06Z,2016-10-16T19:08:15Z,CLOSED,False,137,191,5,https://github.com/oleavr,Do not recycle the InvocationReturnValue object,1,[],https://github.com/frida/frida-gum/pull/174,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/174#issuecomment-254067013,"It's counter-intuitive that onLeave implementors need to deep-copy the
value to use it outside the callback.",Decided against this as even this rather optimized approach results in a severe performance regression.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,176,2016-10-20T22:37:26Z,2016-10-21T00:52:48Z,2016-10-21T00:52:50Z,MERGED,True,318,54,7,https://github.com/oleavr,Add SystemFunction API,1,[],https://github.com/frida/frida-gum/pull/176,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/176,"One shortcoming of NativeFunction is that it is not possible to get
errno / GetLastError() reliably, as Frida may have clobbered it.
This new API is just like NativeFunction except that the return value
is an object containing value and errno (or lastError on Windows).
For example calling open() with a path that does not exist, the return
value on Darwin would be:
{ value: -1, errno: 2 /* ENOENT */ }","One shortcoming of NativeFunction is that it is not possible to get
errno / GetLastError() reliably, as Frida may have clobbered it.
This new API is just like NativeFunction except that the return value
is an object containing value and errno (or lastError on Windows).
For example calling open() with a path that does not exist, the return
value on Darwin would be:
{ value: -1, errno: 2 /* ENOENT */ }",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,177,2016-10-21T04:22:58Z,2016-10-21T19:11:58Z,2016-10-21T19:12:05Z,MERGED,True,408,65,7,https://github.com/oleavr,Add .call() and .apply() to NativeFunction,1,[],https://github.com/frida/frida-gum/pull/177,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/177,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,178,2016-11-08T01:07:49Z,2016-11-11T00:02:16Z,2016-11-11T00:02:18Z,MERGED,True,4389,97,19,https://github.com/oleavr,Add a Darwin-specific Exceptor backend,30,[],https://github.com/frida/frida-gum/pull/178,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/178,"As it's quite common for Mac and iOS apps to plug in a Mach exception
handler through some crash-reporting framework, and our POSIX backend
relies on UNIX signals, this means that the app's handler takes precedence.
This new backend installs a Mach exception handler so we get full control.","As it's quite common for Mac and iOS apps to plug in a Mach exception
handler through some crash-reporting framework, and our POSIX backend
relies on UNIX signals, this means that the app's handler takes precedence.
This new backend installs a Mach exception handler so we get full control.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,179,2016-11-09T19:40:58Z,2016-11-09T20:28:56Z,2016-11-09T20:28:56Z,MERGED,True,3,0,1,https://github.com/s1341,Add -lm when building for QNX,1,[],https://github.com/frida/frida-gum/pull/179,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/179,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,180,2016-11-16T03:11:30Z,2016-11-16T14:58:04Z,2016-11-16T15:02:01Z,MERGED,True,1593,120,13,https://github.com/oleavr,Implement debugger support in the Duktape runtime,1,[],https://github.com/frida/frida-gum/pull/180,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/180,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,181,2016-11-19T02:33:21Z,2016-11-19T02:33:25Z,2016-11-19T02:33:27Z,MERGED,True,750,59,12,https://github.com/oleavr,Fix performance issue with source maps,1,[],https://github.com/frida/frida-gum/pull/181,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/181,"A typical source map takes ~5 seconds to parse with the Duktape runtime
on an iPhone 5S. This is way too slow, and there isn't much room for
optimizing the algorithm due to the sheer amount of bytes that need to
be munged. To solve this we implement a minimal source map parser in C
that only covers the bits that we need.","A typical source map takes ~5 seconds to parse with the Duktape runtime
on an iPhone 5S. This is way too slow, and there isn't much room for
optimizing the algorithm due to the sheer amount of bytes that need to
be munged. To solve this we implement a minimal source map parser in C
that only covers the bits that we need.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,182,2017-01-11T22:52:47Z,2017-01-12T01:05:42Z,2017-01-12T01:05:42Z,MERGED,True,3,6,2,https://github.com/riverar,Accommodate sourcemap changes in frida-compile/pull/2,1,[],https://github.com/frida/frida-gum/pull/182,https://github.com/riverar,1,https://github.com/frida/frida-gum/pull/182,"Depends on: frida/frida-compile#2
frida-compile now, by default, encodes source locations relative to where its invoked, not where the scripts live. This ensures that a debugger can correctly resolve paths using the frida-compile invocation site as the root directory.
So with that, ../node_modules handling is no longer required. For an input script runtime\foo.js that calls require ('promiscuous'), frida-compile will resolve to node_modules/promiscuous. The path then, as before, gets appended to a pseudo-fs-root frida/. To keep things tidy (and reduce debugger confusion), the path also has its slashes tweaked to fit canonical form.","Depends on: frida/frida-compile#2
frida-compile now, by default, encodes source locations relative to where its invoked, not where the scripts live. This ensures that a debugger can correctly resolve paths using the frida-compile invocation site as the root directory.
So with that, ../node_modules handling is no longer required. For an input script runtime\foo.js that calls require ('promiscuous'), frida-compile will resolve to node_modules/promiscuous. The path then, as before, gets appended to a pseudo-fs-root frida/. To keep things tidy (and reduce debugger confusion), the path also has its slashes tweaked to fit canonical form.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,182,2017-01-11T22:52:47Z,2017-01-12T01:05:42Z,2017-01-12T01:05:42Z,MERGED,True,3,6,2,https://github.com/riverar,Accommodate sourcemap changes in frida-compile/pull/2,1,[],https://github.com/frida/frida-gum/pull/182,https://github.com/riverar,2,https://github.com/frida/frida-gum/pull/182#issuecomment-272041734,"Depends on: frida/frida-compile#2
frida-compile now, by default, encodes source locations relative to where its invoked, not where the scripts live. This ensures that a debugger can correctly resolve paths using the frida-compile invocation site as the root directory.
So with that, ../node_modules handling is no longer required. For an input script runtime\foo.js that calls require ('promiscuous'), frida-compile will resolve to node_modules/promiscuous. The path then, as before, gets appended to a pseudo-fs-root frida/. To keep things tidy (and reduce debugger confusion), the path also has its slashes tweaked to fit canonical form.","Changes made, thanks!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,183,2017-01-12T10:16:33Z,2017-01-12T23:25:07Z,2017-01-12T23:25:07Z,CLOSED,False,18,3,4,https://github.com/riverar,Add Memory.zeroAlloc helper,1,[],https://github.com/frida/frida-gum/pull/183,https://github.com/riverar,1,https://github.com/frida/frida-gum/pull/183,"Old pattern:
const structPtr = Memory.alloc(structSize);
for (let i = 0; i < structSize; i++)
  Memory.writeU8(structPtr.add(i), 0)

New pattern:
const structPtr = Memory.zeroAlloc(structSize);","Old pattern:
const structPtr = Memory.alloc(structSize);
for (let i = 0; i < structSize; i++)
  Memory.writeU8(structPtr.add(i), 0)

New pattern:
const structPtr = Memory.zeroAlloc(structSize);",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,184,2017-01-12T23:39:20Z,2017-01-12T23:41:44Z,2017-01-12T23:41:44Z,MERGED,True,8,3,3,https://github.com/riverar,Ensure smaller allocations of memory are zero-initialized,1,[],https://github.com/frida/frida-gum/pull/184,https://github.com/riverar,1,https://github.com/frida/frida-gum/pull/184,"Aligns smaller (less than page size) allocations with behavior of larger ones (i.e. zero initializes all the time). Sub-ms perf impact measured.
Smaller allocations are now zero-initialized via g_malloc0.
Verified larger allocations are already zero-initialized across all the major platforms:

Windows

VirtualAlloc with MEM_COMMIT


Linux

mmap with MAP_ANONYMOUS


Mac

mach_vm_allocate (source)



Test added to catch any outliers.","Aligns smaller (less than page size) allocations with behavior of larger ones (i.e. zero initializes all the time). Sub-ms perf impact measured.
Smaller allocations are now zero-initialized via g_malloc0.
Verified larger allocations are already zero-initialized across all the major platforms:

Windows

VirtualAlloc with MEM_COMMIT


Linux

mmap with MAP_ANONYMOUS


Mac

mach_vm_allocate (source)



Test added to catch any outliers.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,184,2017-01-12T23:39:20Z,2017-01-12T23:41:44Z,2017-01-12T23:41:44Z,MERGED,True,8,3,3,https://github.com/riverar,Ensure smaller allocations of memory are zero-initialized,1,[],https://github.com/frida/frida-gum/pull/184,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/184#issuecomment-272319382,"Aligns smaller (less than page size) allocations with behavior of larger ones (i.e. zero initializes all the time). Sub-ms perf impact measured.
Smaller allocations are now zero-initialized via g_malloc0.
Verified larger allocations are already zero-initialized across all the major platforms:

Windows

VirtualAlloc with MEM_COMMIT


Linux

mmap with MAP_ANONYMOUS


Mac

mach_vm_allocate (source)



Test added to catch any outliers.",Sweet!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,189,2017-01-31T23:34:54Z,2017-02-01T23:12:03Z,2017-02-01T23:12:03Z,MERGED,True,3100,15,10,https://github.com/akiannillo,Stalker ARM64 Porting 1 - Follows and Events,26,[],https://github.com/frida/frida-gum/pull/189,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/189,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,193,2017-02-17T22:28:44Z,2017-02-18T01:08:07Z,2017-02-18T01:08:07Z,MERGED,True,120,34,2,https://github.com/akiannillo,Fix Stalker Arm64,41,[],https://github.com/frida/frida-gum/pull/193,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/193,"implemented load real register into for X29/X30 registers
added push|pull q registers in stalker code when calling functions
new performance test for stalker arm 64","implemented load real register into for X29/X30 registers
added push|pull q registers in stalker code when calling functions
new performance test for stalker arm 64",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,194,2017-02-18T01:26:08Z,2017-02-18T22:57:03Z,2017-02-18T22:57:03Z,CLOSED,False,133,35,2,https://github.com/akiannillo,Fix Arm64 Relocator,47,[],https://github.com/frida/frida-gum/pull/194,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/194,"fix can relocate function and add triggering test for Android 7 Arm 64
little change to work with android gdb","fix can relocate function and add triggering test for Android 7 Arm 64
little change to work with android gdb",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,194,2017-02-18T01:26:08Z,2017-02-18T22:57:03Z,2017-02-18T22:57:03Z,CLOSED,False,133,35,2,https://github.com/akiannillo,Fix Arm64 Relocator,47,[],https://github.com/frida/frida-gum/pull/194,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/194#issuecomment-280866818,"fix can relocate function and add triggering test for Android 7 Arm 64
little change to work with android gdb",Also there's a lot of compiler warnings introduced by this PR ‚Äì did you ignore them or are you using a different toolchain than me?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,194,2017-02-18T01:26:08Z,2017-02-18T22:57:03Z,2017-02-18T22:57:03Z,CLOSED,False,133,35,2,https://github.com/akiannillo,Fix Arm64 Relocator,47,[],https://github.com/frida/frida-gum/pull/194,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/194#issuecomment-280881546,"fix can relocate function and add triggering test for Android 7 Arm 64
little change to work with android gdb",Tweaked version merged in f59b0be. Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,198,2017-03-07T01:23:04Z,2020-03-20T23:55:14Z,2020-03-20T23:55:14Z,CLOSED,False,190,1,8,https://github.com/oleavr,Expose Profiler APIs to the JS bindings [WIP],1,[],https://github.com/frida/frida-gum/pull/198,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/198,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,198,2017-03-07T01:23:04Z,2020-03-20T23:55:14Z,2020-03-20T23:55:14Z,CLOSED,False,190,1,8,https://github.com/oleavr,Expose Profiler APIs to the JS bindings [WIP],1,[],https://github.com/frida/frida-gum/pull/198,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/198#issuecomment-601958015,,Might revisit this later; will keep the branch around.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,199,2017-03-09T14:48:34Z,2017-03-09T14:58:52Z,2017-03-09T14:58:54Z,MERGED,True,291,133,7,https://github.com/oleavr,Fix racy V8 teardown,3,[],https://github.com/frida/frida-gum/pull/199,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/199,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,205,2017-03-17T21:38:11Z,2017-03-20T13:54:35Z,2017-03-22T01:55:43Z,CLOSED,False,157,10,6,https://github.com/oleavr,Fix Interceptor thread context cleanup [WIP],3,[],https://github.com/frida/frida-gum/pull/205,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/205,"We cannot clean it up when we get the TLS callback, as the application
might call an intercepted function in one of its TLS callbacks called
after ours. Instead we emit ‚Äúflush-suggested‚Äù and defer cleanup until
a future gum_interceptor_flush(). At that point we check the lifetime
beacon and potentially perform the cleanup.","We cannot clean it up when we get the TLS callback, as the application
might call an intercepted function in one of its TLS callbacks called
after ours. Instead we emit ‚Äúflush-suggested‚Äù and defer cleanup until
a future gum_interceptor_flush(). At that point we check the lifetime
beacon and potentially perform the cleanup.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,206,2017-03-20T13:54:24Z,2017-03-22T01:55:02Z,2017-03-22T01:55:04Z,MERGED,True,76,96,11,https://github.com/oleavr,Update to the new GThread API,1,[],https://github.com/frida/frida-gum/pull/206,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/206,"Also get rid of the destructor support in GumTls, and rely on GPrivate
for such use-cases. Using GPrivate was previously not possible as any
intercepted function might be called from one of the application's own
thread-local storage destructor functions. Given how such destructors
are called in an unpredictable order, this would typically result in
memory leaks, where our own storage was allocated again right after
getting destroyed.","Also get rid of the destructor support in GumTls, and rely on GPrivate
for such use-cases. Using GPrivate was previously not possible as any
intercepted function might be called from one of the application's own
thread-local storage destructor functions. Given how such destructors
are called in an unpredictable order, this would typically result in
memory leaks, where our own storage was allocated again right after
getting destroyed.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,207,2017-03-21T11:05:19Z,2017-03-24T14:20:27Z,2017-03-24T14:20:27Z,CLOSED,False,77,0,3,https://github.com/pulsar-git,Added parsing of Uint64 / Int64 for native pointers,8,[],https://github.com/frida/frida-gum/pull/207,https://github.com/pulsar-git,1,https://github.com/frida/frida-gum/pull/207,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,207,2017-03-21T11:05:19Z,2017-03-24T14:20:27Z,2017-03-24T14:20:27Z,CLOSED,False,77,0,3,https://github.com/pulsar-git,Added parsing of Uint64 / Int64 for native pointers,8,[],https://github.com/frida/frida-gum/pull/207,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/207#issuecomment-288053996,,"Sweet, thanks for doing this! ‚ù§Ô∏è  Could you tweak the style so it matches the rest?

No tabs, 2 spaces only
Aligned blocks
Space between function name and opening parentheses
Space between function arguments
etc.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,207,2017-03-21T11:05:19Z,2017-03-24T14:20:27Z,2017-03-24T14:20:27Z,CLOSED,False,77,0,3,https://github.com/pulsar-git,Added parsing of Uint64 / Int64 for native pointers,8,[],https://github.com/frida/frida-gum/pull/207,https://github.com/pulsar-git,3,https://github.com/frida/frida-gum/pull/207#issuecomment-288076225,,"Yep sure should be done, tests failing:
process_threads_can_be_enumerated_synchronously
follow_syscall",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,207,2017-03-21T11:05:19Z,2017-03-24T14:20:27Z,2017-03-24T14:20:27Z,CLOSED,False,77,0,3,https://github.com/pulsar-git,Added parsing of Uint64 / Int64 for native pointers,8,[],https://github.com/frida/frida-gum/pull/207,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/207#issuecomment-288085899,,"Still see some tabs, and one unnecessary block. (I'll do a more thorough review afterwards, busy right now.)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,207,2017-03-21T11:05:19Z,2017-03-24T14:20:27Z,2017-03-24T14:20:27Z,CLOSED,False,77,0,3,https://github.com/pulsar-git,Added parsing of Uint64 / Int64 for native pointers,8,[],https://github.com/frida/frida-gum/pull/207,https://github.com/pulsar-git,5,https://github.com/frida/frida-gum/pull/207#issuecomment-289011483,,no worries it's my fault for trying to do stuffs too quick,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,207,2017-03-21T11:05:19Z,2017-03-24T14:20:27Z,2017-03-24T14:20:27Z,CLOSED,False,77,0,3,https://github.com/pulsar-git,Added parsing of Uint64 / Int64 for native pointers,8,[],https://github.com/frida/frida-gum/pull/207,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/207#issuecomment-289031563,,"Actually let me make those changes ‚Äì I'm about to cut a release, so would be good to get this PR merged.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,207,2017-03-21T11:05:19Z,2017-03-24T14:20:27Z,2017-03-24T14:20:27Z,CLOSED,False,77,0,3,https://github.com/pulsar-git,Added parsing of Uint64 / Int64 for native pointers,8,[],https://github.com/frida/frida-gum/pull/207,https://github.com/oleavr,7,https://github.com/frida/frida-gum/pull/207#issuecomment-289035362,,Cherry-picked as f96e448. Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,210,2017-04-04T20:44:55Z,2017-04-04T21:06:39Z,2017-04-04T21:06:40Z,MERGED,True,12,3,1,https://github.com/mrmacete,Fill all pages before triggering writes,1,[],https://github.com/frida/frida-gum/pull/210,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/210,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,210,2017-04-04T20:44:55Z,2017-04-04T21:06:39Z,2017-04-04T21:06:40Z,MERGED,True,12,3,1,https://github.com/mrmacete,Fill all pages before triggering writes,1,[],https://github.com/frida/frida-gum/pull/210,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/210#issuecomment-291631523,,Awesome! üí•,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,211,2017-04-12T08:00:42Z,2017-04-12T11:57:25Z,2017-04-12T14:47:50Z,MERGED,True,1,1,1,https://github.com/akiannillo,Fix illegal instruction on physical devices,1,[],https://github.com/frida/frida-gum/pull/211,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/211,"Tested on Samsung S6 Edge Android API 24.
Executing a load pair instruction that use the same register for both register operands results in Illegal Instruction error.
Using a second register (X15) as second register operand, even if not used later in the code, fixes it.","Tested on Samsung S6 Edge Android API 24.
Executing a load pair instruction that use the same register for both register operands results in Illegal Instruction error.
Using a second register (X15) as second register operand, even if not used later in the code, fixes it.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,211,2017-04-12T08:00:42Z,2017-04-12T11:57:25Z,2017-04-12T14:47:50Z,MERGED,True,1,1,1,https://github.com/akiannillo,Fix illegal instruction on physical devices,1,[],https://github.com/frida/frida-gum/pull/211,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/211#issuecomment-293554500,"Tested on Samsung S6 Edge Android API 24.
Executing a load pair instruction that use the same register for both register operands results in Illegal Instruction error.
Using a second register (X15) as second register operand, even if not used later in the code, fixes it.",üëåüçª,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,212,2017-04-12T18:24:38Z,2017-04-13T10:52:01Z,2017-04-13T10:52:01Z,MERGED,True,2,2,1,https://github.com/akiannillo,Android gdbserver,4,[],https://github.com/frida/frida-gum/pull/212,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/212,Gdbserver based on tcp:PORT instead of files in order to properly work with gdb and target remote.,Gdbserver based on tcp:PORT instead of files in order to properly work with gdb and target remote.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,215,2017-04-19T17:04:15Z,2017-05-29T14:31:02Z,2017-05-29T14:31:02Z,MERGED,True,2,0,1,https://github.com/akiannillo,Added clear cache code,13,[],https://github.com/frida/frida-gum/pull/215,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/215,"Unlike emulator, actual smartphones with actual ARM CPUs use an instruction cache that needs to be cleared every time frida dynamically writes code. Not clearing instruction cache produce intermittent and random errors (e.g., SIGILL, SIGSEGV) while executing stalker tests (errors are accelerated by using the smartphone meanwhile). The clear cache code fit perfectly in the flush function of the writer, and the range to clear is rounded to the page(s) size.
This should solve issues #196 and #195 ( I will contact @manizzle and let him test it )
Reading: 1 2
Thanks to @rnatella for the chat on this issue ;)","Unlike emulator, actual smartphones with actual ARM CPUs use an instruction cache that needs to be cleared every time frida dynamically writes code. Not clearing instruction cache produce intermittent and random errors (e.g., SIGILL, SIGSEGV) while executing stalker tests (errors are accelerated by using the smartphone meanwhile). The clear cache code fit perfectly in the flush function of the writer, and the range to clear is rounded to the page(s) size.
This should solve issues #196 and #195 ( I will contact @manizzle and let him test it )
Reading: 1 2
Thanks to @rnatella for the chat on this issue ;)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,215,2017-04-19T17:04:15Z,2017-05-29T14:31:02Z,2017-05-29T14:31:02Z,MERGED,True,2,0,1,https://github.com/akiannillo,Added clear cache code,13,[],https://github.com/frida/frida-gum/pull/215,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/215#issuecomment-295380182,"Unlike emulator, actual smartphones with actual ARM CPUs use an instruction cache that needs to be cleared every time frida dynamically writes code. Not clearing instruction cache produce intermittent and random errors (e.g., SIGILL, SIGSEGV) while executing stalker tests (errors are accelerated by using the smartphone meanwhile). The clear cache code fit perfectly in the flush function of the writer, and the range to clear is rounded to the page(s) size.
This should solve issues #196 and #195 ( I will contact @manizzle and let him test it )
Reading: 1 2
Thanks to @rnatella for the chat on this issue ;)","Ah yes, nice catch! üëç I totally missed this when reviewing the Stalker arm64 PR. This does not belong in Arm64Writer, though, due to the current separation of concerns. A codewriter generates code that may or may not be executed in the current process, so cache invalidation should not happen there. We currently do gum_clear_cache() in Interceptor, and Stalker should do the same.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,216,2017-05-06T21:50:07Z,2017-05-12T13:23:27Z,2017-05-12T13:23:27Z,MERGED,True,76,11,4,https://github.com/elvanderb,	adds the support of heap allocs enumeration for windows,1,[],https://github.com/frida/frida-gum/pull/216,https://github.com/elvanderb,1,https://github.com/frida/frida-gum/pull/216,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,216,2017-05-06T21:50:07Z,2017-05-12T13:23:27Z,2017-05-12T13:23:27Z,MERGED,True,76,11,4,https://github.com/elvanderb,	adds the support of heap allocs enumeration for windows,1,[],https://github.com/frida/frida-gum/pull/216,https://github.com/elvanderb,2,https://github.com/frida/frida-gum/pull/216#issuecomment-299801621,,done :),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,216,2017-05-06T21:50:07Z,2017-05-12T13:23:27Z,2017-05-12T13:23:27Z,MERGED,True,76,11,4,https://github.com/elvanderb,	adds the support of heap allocs enumeration for windows,1,[],https://github.com/frida/frida-gum/pull/216,https://github.com/elvanderb,3,https://github.com/frida/frida-gum/pull/216#issuecomment-299921870,,aaaaand done (I hope),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,216,2017-05-06T21:50:07Z,2017-05-12T13:23:27Z,2017-05-12T13:23:27Z,MERGED,True,76,11,4,https://github.com/elvanderb,	adds the support of heap allocs enumeration for windows,1,[],https://github.com/frida/frida-gum/pull/216,https://github.com/elvanderb,4,https://github.com/frida/frida-gum/pull/216#issuecomment-299970269,,I think we are good now :),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,216,2017-05-06T21:50:07Z,2017-05-12T13:23:27Z,2017-05-12T13:23:27Z,MERGED,True,76,11,4,https://github.com/elvanderb,	adds the support of heap allocs enumeration for windows,1,[],https://github.com/frida/frida-gum/pull/216,https://github.com/elvanderb,5,https://github.com/frida/frida-gum/pull/216#issuecomment-300518471,,üéµ Baby baby one more time üéµ,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,216,2017-05-06T21:50:07Z,2017-05-12T13:23:27Z,2017-05-12T13:23:27Z,MERGED,True,76,11,4,https://github.com/elvanderb,	adds the support of heap allocs enumeration for windows,1,[],https://github.com/frida/frida-gum/pull/216,https://github.com/elvanderb,6,https://github.com/frida/frida-gum/pull/216#issuecomment-300715910,,"Actually,  because we remove the loop, I think there is now a bug in my code. Please don't merge now, I'll investigate tonight.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,216,2017-05-06T21:50:07Z,2017-05-12T13:23:27Z,2017-05-12T13:23:27Z,MERGED,True,76,11,4,https://github.com/elvanderb,	adds the support of heap allocs enumeration for windows,1,[],https://github.com/frida/frida-gum/pull/216,https://github.com/elvanderb,7,https://github.com/frida/frida-gum/pull/216#issuecomment-301040233,,done :),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,216,2017-05-06T21:50:07Z,2017-05-12T13:23:27Z,2017-05-12T13:23:27Z,MERGED,True,76,11,4,https://github.com/elvanderb,	adds the support of heap allocs enumeration for windows,1,[],https://github.com/frida/frida-gum/pull/216,https://github.com/oleavr,8,https://github.com/frida/frida-gum/pull/216#issuecomment-301074861,,Thanks! üí•,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,217,2017-05-10T01:08:52Z,2017-05-10T01:08:59Z,2017-05-10T01:09:02Z,MERGED,True,1009,4,30,https://github.com/oleavr,Add Meson build system,1,[],https://github.com/frida/frida-gum/pull/217,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/217,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,219,2017-05-16T21:13:49Z,2017-05-16T21:40:37Z,2017-05-16T21:40:37Z,MERGED,True,0,24,2,https://github.com/mrmacete,Remove check for address < page_size in gum_darwin_read,2,[],https://github.com/frida/frida-gum/pull/219,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/219,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,219,2017-05-16T21:13:49Z,2017-05-16T21:40:37Z,2017-05-16T21:40:37Z,MERGED,True,0,24,2,https://github.com/mrmacete,Remove check for address < page_size in gum_darwin_read,2,[],https://github.com/frida/frida-gum/pull/219,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/219#issuecomment-301918457,,Sweet! Maybe we should also nuke it in write() while at it?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,219,2017-05-16T21:13:49Z,2017-05-16T21:40:37Z,2017-05-16T21:40:37Z,MERGED,True,0,24,2,https://github.com/mrmacete,Remove check for address < page_size in gum_darwin_read,2,[],https://github.com/frida/frida-gum/pull/219,https://github.com/mrmacete,3,https://github.com/frida/frida-gum/pull/219#issuecomment-301923399,,"done, pushed --force",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,220,2017-06-23T09:00:18Z,2017-06-25T02:51:41Z,2017-06-25T02:51:42Z,CLOSED,False,215418,0,13,https://github.com/oleavr,Add Database API backed by SQLite [WIP],13,[],https://github.com/frida/frida-gum/pull/220,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/220,"In-memory VFS
 Duktape

 Prepared statements and basics
 In-memory
 Disk


 V8
 Make SQLite use our memory allocator","In-memory VFS
 Duktape

 Prepared statements and basics
 In-memory
 Disk


 V8
 Make SQLite use our memory allocator",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,221,2017-06-25T02:52:57Z,2017-06-26T13:44:41Z,2017-06-26T13:44:48Z,MERGED,True,216175,2,20,https://github.com/oleavr,Add Database APIs backed by SQLite,23,[],https://github.com/frida/frida-gum/pull/221,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/221,"In-memory VFS
 Duktape

 Prepared statements and basics
 In-memory
 Disk


 V8
 Plug in our memory allocator through sqlite3_mem_methods","In-memory VFS
 Duktape

 Prepared statements and basics
 In-memory
 Disk


 V8
 Plug in our memory allocator through sqlite3_mem_methods",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,222,2017-07-08T10:56:42Z,2017-07-08T11:10:08Z,2017-07-08T11:10:10Z,MERGED,True,733,11,8,https://github.com/oleavr,Add Stalker API to the Duktape runtime,1,[],https://github.com/frida/frida-gum/pull/222,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/222,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,223,2017-07-17T11:40:43Z,2017-07-17T11:51:17Z,2017-07-17T11:51:17Z,MERGED,True,2,8,1,https://github.com/mrmacete,Fix stack alignment issue on arm64 ldr relocation,1,[],https://github.com/frida/frida-gum/pull/223,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/223,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,223,2017-07-17T11:40:43Z,2017-07-17T11:51:17Z,2017-07-17T11:51:17Z,MERGED,True,2,8,1,https://github.com/mrmacete,Fix stack alignment issue on arm64 ldr relocation,1,[],https://github.com/frida/frida-gum/pull/223,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/223#issuecomment-315734164,,w00t! üí•,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,225,2017-07-24T17:03:16Z,2017-07-24T18:17:04Z,2017-07-24T18:17:04Z,MERGED,True,117,4,4,https://github.com/mrmacete,Add block and compile events to Stalker,2,[],https://github.com/frida/frida-gum/pull/225,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/225,"compile events are emitted as soon as a basic block gets compiled by the Stalker. This happens once per block, so it's useful to understand which parts of code gets executed but it's not a full live trace of the execution.
block events are emitted each time a basic block is executed, so can be used to actually trace the execution.","compile events are emitted as soon as a basic block gets compiled by the Stalker. This happens once per block, so it's useful to understand which parts of code gets executed but it's not a full live trace of the execution.
block events are emitted each time a basic block is executed, so can be used to actually trace the execution.",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,226,2017-07-28T21:56:12Z,2017-07-29T14:43:03Z,2017-07-29T14:43:03Z,MERGED,True,59,2,1,https://github.com/erik-smit,Add testcases for repne jb (failing) and repne ret,8,[],https://github.com/frida/frida-gum/pull/226,https://github.com/erik-smit,1,https://github.com/frida/frida-gum/pull/226,Stalking a function using 'repne jb' currently causes frida-gum to generate invalid code.,Stalking a function using 'repne jb' currently causes frida-gum to generate invalid code.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,227,2017-07-30T11:57:05Z,2017-07-30T15:05:09Z,2017-07-30T15:05:16Z,MERGED,True,126,108,8,https://github.com/erik-smit,Fix handling of jcc instructions with rep prefixes,22,[],https://github.com/frida/frida-gum/pull/227,https://github.com/erik-smit,1,https://github.com/frida/frida-gum/pull/227,"refactor gum_x86_writer_put_jcc_* and gum_exec_block_virtualize_branch_insn to use capstone ids instead of opcode magic handling
to fix processing of unusual prefixes like ""REPNE JB""
0xF2 0x72 0x02 REPNE JB
fixes current failing test /Core/Stalker/follow_repne_jb","refactor gum_x86_writer_put_jcc_* and gum_exec_block_virtualize_branch_insn to use capstone ids instead of opcode magic handling
to fix processing of unusual prefixes like ""REPNE JB""
0xF2 0x72 0x02 REPNE JB
fixes current failing test /Core/Stalker/follow_repne_jb",True,{'HOORAY': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,228,2017-08-09T07:36:38Z,2017-08-09T17:31:27Z,2017-08-09T17:36:07Z,MERGED,True,10,1,1,https://github.com/erik-smit,Use OutputDebugString() for embedded-mode logging on Windows,6,[],https://github.com/frida/frida-gum/pull/228,https://github.com/erik-smit,1,https://github.com/frida/frida-gum/pull/228,"Currently debug() strings go to stdout/stderr on Windows, which means they're usually not visible.","Currently debug() strings go to stdout/stderr on Windows, which means they're usually not visible.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,228,2017-08-09T07:36:38Z,2017-08-09T17:31:27Z,2017-08-09T17:36:07Z,MERGED,True,10,1,1,https://github.com/erik-smit,Use OutputDebugString() for embedded-mode logging on Windows,6,[],https://github.com/frida/frida-gum/pull/228,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/228#issuecomment-321325637,"Currently debug() strings go to stdout/stderr on Windows, which means they're usually not visible.",Thanks! ‚ù§Ô∏è,True,{'HEART': ['https://github.com/erik-smit']}
frida/frida-gum,https://github.com/frida/frida-gum,229,2017-08-12T00:22:38Z,2017-08-14T15:46:32Z,2017-08-14T15:46:36Z,MERGED,True,2336,20,22,https://github.com/oleavr,"Expose Code{Writer,Relocator} APIs to JavaScript",1,[],https://github.com/frida/frida-gum/pull/229,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/229,"Expose writer implementations.
 Expose relocator implementations.
 Conditionally compile writers and relocators based on the target architecture.
 Replace code-writer assertions with return FALSE, and throw an ‚Äúinvalid argument‚Äù error instead of crashing the process.

 X86
 Arm
 Thumb
 Arm64
 Mips


 Refcount writers and relocators to make them more binding-friendly.

 X86
 Arm
 Thumb
 Arm64
 Mips


 Specify pc in options instead of argument, e.g.: new X86Writer(code, { pc: recv })
 Look at dropping the _no_label() variants... do we still need the implicit labels?
 Integrate autogeneration logic with build systems to avoid checking in generated code.","Expose writer implementations.
 Expose relocator implementations.
 Conditionally compile writers and relocators based on the target architecture.
 Replace code-writer assertions with return FALSE, and throw an ‚Äúinvalid argument‚Äù error instead of crashing the process.

 X86
 Arm
 Thumb
 Arm64
 Mips


 Refcount writers and relocators to make them more binding-friendly.

 X86
 Arm
 Thumb
 Arm64
 Mips


 Specify pc in options instead of argument, e.g.: new X86Writer(code, { pc: recv })
 Look at dropping the _no_label() variants... do we still need the implicit labels?
 Integrate autogeneration logic with build systems to avoid checking in generated code.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,230,2017-08-20T17:38:31Z,2017-12-21T12:18:40Z,2017-12-21T12:18:40Z,CLOSED,False,32,18,1,https://github.com/erik-smit,Add group parameter to `hexdump()`,2,[],https://github.com/frida/frida-gum/pull/230,https://github.com/erik-smit,1,https://github.com/frida/frida-gum/pull/230,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,230,2017-08-20T17:38:31Z,2017-12-21T12:18:40Z,2017-12-21T12:18:40Z,CLOSED,False,32,18,1,https://github.com/erik-smit,Add group parameter to `hexdump()`,2,[],https://github.com/frida/frida-gum/pull/230,https://github.com/erik-smit,2,https://github.com/frida/frida-gum/pull/230#issuecomment-325125239,,"Missing spaces around operators in many places.

Sorry, I don't see it. Can you give an example?

Endian should be taken into account. Feel free to add this as Process.endian, which should be either 'little' or 'big', i.e. strings.

Let it automatically decide whether or not to do the endian-conversion based on the contents of Process.endian?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,230,2017-08-20T17:38:31Z,2017-12-21T12:18:40Z,2017-12-21T12:18:40Z,CLOSED,False,32,18,1,https://github.com/erik-smit,Add group parameter to `hexdump()`,2,[],https://github.com/frida/frida-gum/pull/230,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/230#issuecomment-325132268,,"Sorry, I don't see it. Can you give an example?

E.g.:
printGroup-1 => printGroup - 1
(index+groupOffset) => (index + groupOffset)

Let it automatically decide whether or not to do the endian-conversion based on the contents of Process.endian?

Yep. I think it would make sense to write a test for this, using Memory.alloc() and Memory.writeU32() to set up a buffer with one value, and then hexdump() that.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,230,2017-08-20T17:38:31Z,2017-12-21T12:18:40Z,2017-12-21T12:18:40Z,CLOSED,False,32,18,1,https://github.com/erik-smit,Add group parameter to `hexdump()`,2,[],https://github.com/frida/frida-gum/pull/230,https://github.com/erik-smit,4,https://github.com/frida/frida-gum/pull/230#issuecomment-325156233,,"Yep. I think it would make sense to write a test for this, using Memory.alloc() and Memory.writeU32() to set up a buffer with one value, and then hexdump() that.

And... have the test also be endian-aware?
Or maybe... have the endian->output conversion be a parameter, with the default depending on the systems endianness?
And then having the test do two tests, one with endian set to convert and other with not-convert?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,230,2017-08-20T17:38:31Z,2017-12-21T12:18:40Z,2017-12-21T12:18:40Z,CLOSED,False,32,18,1,https://github.com/erik-smit,Add group parameter to `hexdump()`,2,[],https://github.com/frida/frida-gum/pull/230,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/230#issuecomment-325164020,,"And... have the test also be endian-aware?

I suppose the test could overwrite Process.endian before calling hexdump(), but definitely not give it as a parameter, that doesn't sound like a useful thing to support.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,230,2017-08-20T17:38:31Z,2017-12-21T12:18:40Z,2017-12-21T12:18:40Z,CLOSED,False,32,18,1,https://github.com/erik-smit,Add group parameter to `hexdump()`,2,[],https://github.com/frida/frida-gum/pull/230,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/230#issuecomment-353337242,,Closing for now. Feel free to reopen and continue at a later point.,True,{'THUMBS_UP': ['https://github.com/erik-smit']}
frida/frida-gum,https://github.com/frida/frida-gum,231,2017-08-25T20:17:04Z,2017-08-27T19:38:11Z,2017-08-27T19:38:11Z,CLOSED,False,58,2,4,https://github.com/fabianfreyer,Do not ignore interception of NativeFunction calls,1,[],https://github.com/frida/frida-gum/pull/231,https://github.com/fabianfreyer,1,https://github.com/frida/frida-gum/pull/231,"Interception is ignored for frida's own threads. However, this does not
make sense when calling NativeFunction calls.
To make gum_interceptor_unignore_current_thread work before
gum_interceptor_ignore_current_thread for theads that aren't ignored
yet, also invoke listeners for negative ignore_levels.
From IRC (these are mostly cited freely from @oleavr ):

 The Interceptor instance should be retrieved from core‚Äôs interceptor field, which has the interceptor impl. as a field (instead of calling obtain() and leaking the reference)
 Ignoring again should also happen when the call throws a native exception that we handle
 Style is off
 the test-harness doesn‚Äôt ignore Frida‚Äôs JS thread. We‚Äôll have to schedule an idle callback on the JS thread to ignore, then run the script, then undo the ignore by scheduling again (so other tests aren‚Äôt affected)","Interception is ignored for frida's own threads. However, this does not
make sense when calling NativeFunction calls.
To make gum_interceptor_unignore_current_thread work before
gum_interceptor_ignore_current_thread for theads that aren't ignored
yet, also invoke listeners for negative ignore_levels.
From IRC (these are mostly cited freely from @oleavr ):

 The Interceptor instance should be retrieved from core‚Äôs interceptor field, which has the interceptor impl. as a field (instead of calling obtain() and leaking the reference)
 Ignoring again should also happen when the call throws a native exception that we handle
 Style is off
 the test-harness doesn‚Äôt ignore Frida‚Äôs JS thread. We‚Äôll have to schedule an idle callback on the JS thread to ignore, then run the script, then undo the ignore by scheduling again (so other tests aren‚Äôt affected)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,231,2017-08-25T20:17:04Z,2017-08-27T19:38:11Z,2017-08-27T19:38:11Z,CLOSED,False,58,2,4,https://github.com/fabianfreyer,Do not ignore interception of NativeFunction calls,1,[],https://github.com/frida/frida-gum/pull/231,https://github.com/fabianfreyer,2,https://github.com/frida/frida-gum/pull/231#issuecomment-325068372,"Interception is ignored for frida's own threads. However, this does not
make sense when calling NativeFunction calls.
To make gum_interceptor_unignore_current_thread work before
gum_interceptor_ignore_current_thread for theads that aren't ignored
yet, also invoke listeners for negative ignore_levels.
From IRC (these are mostly cited freely from @oleavr ):

 The Interceptor instance should be retrieved from core‚Äôs interceptor field, which has the interceptor impl. as a field (instead of calling obtain() and leaking the reference)
 Ignoring again should also happen when the call throws a native exception that we handle
 Style is off
 the test-harness doesn‚Äôt ignore Frida‚Äôs JS thread. We‚Äôll have to schedule an idle callback on the JS thread to ignore, then run the script, then undo the ignore by scheduling again (so other tests aren‚Äôt affected)","I've updated the patch to address most of the issues discussed, but I'm still not really sure about scheduling jobs on the JS thread. My na√Øve approach would be something along these lines:
SCRIPT_TESTCASE (native_function_can_be_intercepted)
{
  GumScriptScheduler * scheduler = GUM_DUK_IS_SCRIPT_BACKEND (fixture->backend) ? 
    gum_duk_script_backend_get_scheduler (fixture->backend) : gum_v8_script_backend_get_scheduler (fixture->backend);
  gum_script_scheduler_push_job_on_js_thread (scheduler, G_PRIORITY_DEFAULT,
    (GumScriptJobFunc) gum_interceptor_ignore_current_thread, g_object_ref (interceptor), g_object_unref);
  COMPILE_AND_LOAD_SCRIPT(...);
  gum_script_scheduler_push_job_on_js_thread (scheduler, G_PRIORITY_DEFAULT,
    (GumScriptJobFunc) gum_interceptor_unignore_current_thread, g_object_ref (interceptor), g_object_unref);

  ...
}
However, I don't think I understand enough to be sure about this.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,231,2017-08-25T20:17:04Z,2017-08-27T19:38:11Z,2017-08-27T19:38:11Z,CLOSED,False,58,2,4,https://github.com/fabianfreyer,Do not ignore interception of NativeFunction calls,1,[],https://github.com/frida/frida-gum/pull/231,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/231#issuecomment-325219512,"Interception is ignored for frida's own threads. However, this does not
make sense when calling NativeFunction calls.
To make gum_interceptor_unignore_current_thread work before
gum_interceptor_ignore_current_thread for theads that aren't ignored
yet, also invoke listeners for negative ignore_levels.
From IRC (these are mostly cited freely from @oleavr ):

 The Interceptor instance should be retrieved from core‚Äôs interceptor field, which has the interceptor impl. as a field (instead of calling obtain() and leaking the reference)
 Ignoring again should also happen when the call throws a native exception that we handle
 Style is off
 the test-harness doesn‚Äôt ignore Frida‚Äôs JS thread. We‚Äôll have to schedule an idle callback on the JS thread to ignore, then run the script, then undo the ignore by scheduling again (so other tests aren‚Äôt affected)","Cherry-picked into 86ef4dd, ready for inclusion in the upcoming release üçª",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,232,2017-08-26T15:06:45Z,2017-08-26T15:42:28Z,2017-08-26T15:42:28Z,MERGED,True,14,21,2,https://github.com/mrmacete,Create capstone instance during module initialization,1,[],https://github.com/frida/frida-gum/pull/232,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/232,This ensures in a naive way that the capstone instance is created on all code paths which need it.,This ensures in a naive way that the capstone instance is created on all code paths which need it.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,232,2017-08-26T15:06:45Z,2017-08-26T15:42:28Z,2017-08-26T15:42:28Z,MERGED,True,14,21,2,https://github.com/mrmacete,Create capstone instance during module initialization,1,[],https://github.com/frida/frida-gum/pull/232,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/232#issuecomment-325139522,This ensures in a naive way that the capstone instance is created on all code paths which need it.,Thanks! üí•,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,233,2017-08-27T19:06:39Z,2017-08-27T19:41:01Z,2017-08-27T19:41:01Z,MERGED,True,43,3,2,https://github.com/mrmacete,"Fix x86writer‚Äôs sub_reg_reg, add cmp_reg_reg",1,[],https://github.com/frida/frida-gum/pull/233,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/233,"make sub_reg_reg compatible with 64-bits registers, by adding REX prefix
cmp_reg_reg is exactly the same, with different opcode","make sub_reg_reg compatible with 64-bits registers, by adding REX prefix
cmp_reg_reg is exactly the same, with different opcode",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,233,2017-08-27T19:06:39Z,2017-08-27T19:41:01Z,2017-08-27T19:41:01Z,MERGED,True,43,3,2,https://github.com/mrmacete,"Fix x86writer‚Äôs sub_reg_reg, add cmp_reg_reg",1,[],https://github.com/frida/frida-gum/pull/233,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/233#issuecomment-325219625,"make sub_reg_reg compatible with 64-bits registers, by adding REX prefix
cmp_reg_reg is exactly the same, with different opcode",Thanks! ‚ù§Ô∏è,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,234,2017-08-28T17:27:15Z,2017-08-28T17:42:19Z,2017-08-28T17:42:19Z,MERGED,True,39,2,1,https://github.com/mrmacete,Resolve writer labels using hash in duktape too,2,[],https://github.com/frida/frida-gum/pull/234,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/234,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,234,2017-08-28T17:27:15Z,2017-08-28T17:42:19Z,2017-08-28T17:42:19Z,MERGED,True,39,2,1,https://github.com/mrmacete,Resolve writer labels using hash in duktape too,2,[],https://github.com/frida/frida-gum/pull/234,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/234#issuecomment-325423407,,Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,236,2017-09-12T19:46:07Z,2017-09-12T21:27:24Z,2017-09-13T05:51:29Z,MERGED,True,45,9,1,https://github.com/mrmacete,Poll thread state if instruction pointer is NULL,2,[],https://github.com/frida/frida-gum/pull/236,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/236,"This is needed to avoid stalking threads at address 0, causing exceptions and / or deadlocks. At most it tries for 20 seconds, then gives up.","This is needed to avoid stalking threads at address 0, causing exceptions and / or deadlocks. At most it tries for 20 seconds, then gives up.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,236,2017-09-12T19:46:07Z,2017-09-12T21:27:24Z,2017-09-13T05:51:29Z,MERGED,True,45,9,1,https://github.com/mrmacete,Poll thread state if instruction pointer is NULL,2,[],https://github.com/frida/frida-gum/pull/236,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/236#issuecomment-328989439,"This is needed to avoid stalking threads at address 0, causing exceptions and / or deadlocks. At most it tries for 20 seconds, then gives up.",Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,236,2017-09-12T19:46:07Z,2017-09-12T21:27:24Z,2017-09-13T05:51:29Z,MERGED,True,45,9,1,https://github.com/mrmacete,Poll thread state if instruction pointer is NULL,2,[],https://github.com/frida/frida-gum/pull/236,https://github.com/mrmacete,3,https://github.com/frida/frida-gum/pull/236#issuecomment-329066166,"This is needed to avoid stalking threads at address 0, causing exceptions and / or deadlocks. At most it tries for 20 seconds, then gives up.",thank you!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,237,2017-09-26T12:35:41Z,2017-09-26T14:03:28Z,2017-09-26T14:03:28Z,MERGED,True,113,8,4,https://github.com/mrmacete,Expose sqlite open flags,2,[],https://github.com/frida/frida-gum/pull/237,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/237,"Example: SqliteDatabase.open(fileName, {flags: [‚Äòreadwrite‚Äô, ‚Äòcreate‚Äô]})
Possible flags are readonly, readwrite, create. The create flag can be combined only with readwrite. The default flags are [‚Äòreadwrite‚Äô, ‚Äòcreate‚Äô].","Example: SqliteDatabase.open(fileName, {flags: [‚Äòreadwrite‚Äô, ‚Äòcreate‚Äô]})
Possible flags are readonly, readwrite, create. The create flag can be combined only with readwrite. The default flags are [‚Äòreadwrite‚Äô, ‚Äòcreate‚Äô].",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,238,2017-09-27T01:20:32Z,2017-09-27T01:21:18Z,2017-09-27T01:21:20Z,MERGED,True,905,391,5,https://github.com/oleavr,Move to a libdwarf SymbolUtil backend on GNU/Linux,1,[],https://github.com/frida/frida-gum/pull/238,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/238,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,242,2017-11-13T14:41:27Z,2018-03-12T18:58:01Z,2018-03-12T18:58:01Z,CLOSED,False,1,1,1,https://github.com/dwarfcrank,Use os.linesep instead of plain \n in generate-bindings,1,[],https://github.com/frida/frida-gum/pull/242,https://github.com/dwarfcrank,1,https://github.com/frida/frida-gum/pull/242,"This is a fix for a Windows build issue (someone else reported it as Frida issue 327) due to line endings somehow being converted into CRLF. generate-bindings.py only replaces \n in the argument list, so the \r is still left there. Using os.linesep should handle different cases, but I haven't tried building on Linux or macOS, so can't say for sure.
I suspect some Windows Git client is responsible for this. I use the posh-git setup provided with GitHub for Windows, which I think does CRLF<->LF conversion behind the scenes.","This is a fix for a Windows build issue (someone else reported it as Frida issue 327) due to line endings somehow being converted into CRLF. generate-bindings.py only replaces \n in the argument list, so the \r is still left there. Using os.linesep should handle different cases, but I haven't tried building on Linux or macOS, so can't say for sure.
I suspect some Windows Git client is responsible for this. I use the posh-git setup provided with GitHub for Windows, which I think does CRLF<->LF conversion behind the scenes.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,242,2017-11-13T14:41:27Z,2018-03-12T18:58:01Z,2018-03-12T18:58:01Z,CLOSED,False,1,1,1,https://github.com/dwarfcrank,Use os.linesep instead of plain \n in generate-bindings,1,[],https://github.com/frida/frida-gum/pull/242,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/242#issuecomment-343976854,"This is a fix for a Windows build issue (someone else reported it as Frida issue 327) due to line endings somehow being converted into CRLF. generate-bindings.py only replaces \n in the argument list, so the \r is still left there. Using os.linesep should handle different cases, but I haven't tried building on Linux or macOS, so can't say for sure.
I suspect some Windows Git client is responsible for this. I use the posh-git setup provided with GitHub for Windows, which I think does CRLF<->LF conversion behind the scenes.",Thanks! This will unfortunately break it for users who have git configured to preserve line-endings. I think we need to make the parsing accept either.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,242,2017-11-13T14:41:27Z,2018-03-12T18:58:01Z,2018-03-12T18:58:01Z,CLOSED,False,1,1,1,https://github.com/dwarfcrank,Use os.linesep instead of plain \n in generate-bindings,1,[],https://github.com/frida/frida-gum/pull/242,https://github.com/dwarfcrank,3,https://github.com/frida/frida-gum/pull/242#issuecomment-344885832,"This is a fix for a Windows build issue (someone else reported it as Frida issue 327) due to line endings somehow being converted into CRLF. generate-bindings.py only replaces \n in the argument list, so the \r is still left there. Using os.linesep should handle different cases, but I haven't tried building on Linux or macOS, so can't say for sure.
I suspect some Windows Git client is responsible for this. I use the posh-git setup provided with GitHub for Windows, which I think does CRLF<->LF conversion behind the scenes.","Ah, good point, didn't realize git can be configured to preserve line endings. Would something like  raw_arglist = raw_arglist.replace(os.linesep, "" "").replace(""\n"", "" "") suffice for taking care of both at once?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,242,2017-11-13T14:41:27Z,2018-03-12T18:58:01Z,2018-03-12T18:58:01Z,CLOSED,False,1,1,1,https://github.com/dwarfcrank,Use os.linesep instead of plain \n in generate-bindings,1,[],https://github.com/frida/frida-gum/pull/242,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/242#issuecomment-353334958,"This is a fix for a Windows build issue (someone else reported it as Frida issue 327) due to line endings somehow being converted into CRLF. generate-bindings.py only replaces \n in the argument list, so the \r is still left there. Using os.linesep should handle different cases, but I haven't tried building on Linux or macOS, so can't say for sure.
I suspect some Windows Git client is responsible for this. I use the posh-git setup provided with GitHub for Windows, which I think does CRLF<->LF conversion behind the scenes.","(Sorry for the delay here.) Hmm, I suppose just replacing ""\r"" with nothing would also do the trick?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,242,2017-11-13T14:41:27Z,2018-03-12T18:58:01Z,2018-03-12T18:58:01Z,CLOSED,False,1,1,1,https://github.com/dwarfcrank,Use os.linesep instead of plain \n in generate-bindings,1,[],https://github.com/frida/frida-gum/pull/242,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/242#issuecomment-372425146,"This is a fix for a Windows build issue (someone else reported it as Frida issue 327) due to line endings somehow being converted into CRLF. generate-bindings.py only replaces \n in the argument list, so the \r is still left there. Using os.linesep should handle different cases, but I haven't tried building on Linux or macOS, so can't say for sure.
I suspect some Windows Git client is responsible for this. I use the posh-git setup provided with GitHub for Windows, which I think does CRLF<->LF conversion behind the scenes.",Timed out.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,246,2017-12-07T14:32:08Z,2017-12-07T15:00:45Z,2017-12-07T15:03:00Z,MERGED,True,27,3,3,https://github.com/akiannillo,Added some missing calls to gum_clear_cache,3,[],https://github.com/frida/frida-gum/pull/246,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/246,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,246,2017-12-07T14:32:08Z,2017-12-07T15:00:45Z,2017-12-07T15:03:00Z,MERGED,True,27,3,3,https://github.com/akiannillo,Added some missing calls to gum_clear_cache,3,[],https://github.com/frida/frida-gum/pull/246,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/246#issuecomment-349992396,,Awesome! <3,True,{'THUMBS_UP': ['https://github.com/JonForShort']}
frida/frida-gum,https://github.com/frida/frida-gum,247,2017-12-08T08:32:56Z,2017-12-08T08:51:48Z,2017-12-08T09:56:27Z,MERGED,True,4,4,1,https://github.com/akiannillo,Compile error,1,[],https://github.com/frida/frida-gum/pull/247,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/247,I'm so sorry about that.,I'm so sorry about that.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,247,2017-12-08T08:32:56Z,2017-12-08T08:51:48Z,2017-12-08T09:56:27Z,MERGED,True,4,4,1,https://github.com/akiannillo,Compile error,1,[],https://github.com/frida/frida-gum/pull/247,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/247#issuecomment-350208580,I'm so sorry about that.,Oops I totally missed that üòÑ Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,248,2017-12-08T10:02:59Z,2017-12-21T12:05:18Z,2017-12-21T12:38:05Z,MERGED,True,309,6,4,https://github.com/akiannillo,Add feature for the stalker exclusion when BLR,15,[],https://github.com/frida/frida-gum/pull/248,https://github.com/akiannillo,1,https://github.com/frida/frida-gum/pull/248,"I modified the virtualize branch instruction function in the stalker, added two tests, and a script to run test with android arm 64.
I have only a doubt whether to add something for the unfollow me, such in L554.
(new performance duration ratio is at most 1.15)","I modified the virtualize branch instruction function in the stalker, added two tests, and a script to run test with android arm 64.
I have only a doubt whether to add something for the unfollow me, such in L554.
(new performance duration ratio is at most 1.15)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,248,2017-12-08T10:02:59Z,2017-12-21T12:05:18Z,2017-12-21T12:38:05Z,MERGED,True,309,6,4,https://github.com/akiannillo,Add feature for the stalker exclusion when BLR,15,[],https://github.com/frida/frida-gum/pull/248,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/248#issuecomment-350254698,"I modified the virtualize branch instruction function in the stalker, added two tests, and a script to run test with android arm 64.
I have only a doubt whether to add something for the unfollow me, such in L554.
(new performance duration ratio is at most 1.15)",Did you test calling unfollow() from inside an excluded call? Probably worth having test-coverage for this.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,248,2017-12-08T10:02:59Z,2017-12-21T12:05:18Z,2017-12-21T12:38:05Z,MERGED,True,309,6,4,https://github.com/akiannillo,Add feature for the stalker exclusion when BLR,15,[],https://github.com/frida/frida-gum/pull/248,https://github.com/akiannillo,3,https://github.com/frida/frida-gum/pull/248#issuecomment-351006263,"I modified the virtualize branch instruction function in the stalker, added two tests, and a script to run test with android arm 64.
I have only a doubt whether to add something for the unfollow me, such in L554.
(new performance duration ratio is at most 1.15)","I added the tests to test calling unfollow() from inside an excluded call, and I changed the function that check the inclusion/exclusion of the address to modify also the boolean value has_call_to_excluded_range. It actually became a gum_exec_block_ function, and I changed the name so that it does not sound as a predicate.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,248,2017-12-08T10:02:59Z,2017-12-21T12:05:18Z,2017-12-21T12:38:05Z,MERGED,True,309,6,4,https://github.com/akiannillo,Add feature for the stalker exclusion when BLR,15,[],https://github.com/frida/frida-gum/pull/248,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/248#issuecomment-353334685,"I modified the virtualize branch instruction function in the stalker, added two tests, and a script to run test with android arm 64.
I have only a doubt whether to add something for the unfollow me, such in L554.
(new performance duration ratio is at most 1.15)",Thanks! ü§ò,True,{'HOORAY': ['https://github.com/akiannillo']}
frida/frida-gum,https://github.com/frida/frida-gum,252,2017-12-22T17:27:21Z,2017-12-27T21:31:14Z,2017-12-27T21:31:20Z,CLOSED,False,131,0,5,https://github.com/mrmacete,Expose ModuleMap‚Äôs modules to javascript,1,[],https://github.com/frida/frida-gum/pull/252,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/252,Add ModuleMap.enumerateModules{Sync} with the same semantics as Process.enumerateModules{Sync},Add ModuleMap.enumerateModules{Sync} with the same semantics as Process.enumerateModules{Sync},True,{}
frida/frida-gum,https://github.com/frida/frida-gum,252,2017-12-22T17:27:21Z,2017-12-27T21:31:14Z,2017-12-27T21:31:20Z,CLOSED,False,131,0,5,https://github.com/mrmacete,Expose ModuleMap‚Äôs modules to javascript,1,[],https://github.com/frida/frida-gum/pull/252,https://github.com/mrmacete,2,https://github.com/frida/frida-gum/pull/252#issuecomment-354180595,Add ModuleMap.enumerateModules{Sync} with the same semantics as Process.enumerateModules{Sync},"made it with a property instead, here: #253",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,253,2017-12-27T21:30:50Z,2018-01-04T12:54:26Z,2018-01-04T13:34:07Z,MERGED,True,54,0,4,https://github.com/mrmacete,Expose ModuleMap values() method,3,[],https://github.com/frida/frida-gum/pull/253,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/253,"It returns a copy of the current internal modules array. Example:
var mm = new ModuleMap();
mm.values(); // get a copy of current modules array","It returns a copy of the current internal modules array. Example:
var mm = new ModuleMap();
mm.values(); // get a copy of current modules array",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,253,2017-12-27T21:30:50Z,2018-01-04T12:54:26Z,2018-01-04T13:34:07Z,MERGED,True,54,0,4,https://github.com/mrmacete,Expose ModuleMap values() method,3,[],https://github.com/frida/frida-gum/pull/253,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/253#issuecomment-355275097,"It returns a copy of the current internal modules array. Example:
var mm = new ModuleMap();
mm.values(); // get a copy of current modules array",Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,258,2018-01-24T15:02:40Z,2018-01-24T16:19:59Z,2018-01-24T16:19:59Z,MERGED,True,0,2,1,https://github.com/elvanderb,remove unused variable in gumelfmodule.c,1,[],https://github.com/frida/frida-gum/pull/258,https://github.com/elvanderb,1,https://github.com/frida/frida-gum/pull/258,"bloom_shift is initialized but not used, that makes the compiler sad (-Wunused-but-set-variable)","bloom_shift is initialized but not used, that makes the compiler sad (-Wunused-but-set-variable)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,258,2018-01-24T15:02:40Z,2018-01-24T16:19:59Z,2018-01-24T16:19:59Z,MERGED,True,0,2,1,https://github.com/elvanderb,remove unused variable in gumelfmodule.c,1,[],https://github.com/frida/frida-gum/pull/258,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/258#issuecomment-360188098,"bloom_shift is initialized but not used, that makes the compiler sad (-Wunused-but-set-variable)",Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,259,2018-01-24T16:34:52Z,2018-01-30T20:55:51Z,2018-01-30T20:55:51Z,CLOSED,False,55,16,1,https://github.com/elvanderb,fix process_threads test,3,[],https://github.com/frida/frida-gum/pull/259,https://github.com/elvanderb,1,https://github.com/frida/frida-gum/pull/259,Make sure that threads are started before counting them,Make sure that threads are started before counting them,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,259,2018-01-24T16:34:52Z,2018-01-30T20:55:51Z,2018-01-30T20:55:51Z,CLOSED,False,55,16,1,https://github.com/elvanderb,fix process_threads test,3,[],https://github.com/frida/frida-gum/pull/259,https://github.com/elvanderb,2,https://github.com/frida/frida-gum/pull/259#issuecomment-360416898,Make sure that threads are started before counting them,fixed :),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,259,2018-01-24T16:34:52Z,2018-01-30T20:55:51Z,2018-01-30T20:55:51Z,CLOSED,False,55,16,1,https://github.com/elvanderb,fix process_threads test,3,[],https://github.com/frida/frida-gum/pull/259,https://github.com/elvanderb,3,https://github.com/frida/frida-gum/pull/259#issuecomment-360821493,Make sure that threads are started before counting them,done,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,259,2018-01-24T16:34:52Z,2018-01-30T20:55:51Z,2018-01-30T20:55:51Z,CLOSED,False,55,16,1,https://github.com/elvanderb,fix process_threads test,3,[],https://github.com/frida/frida-gum/pull/259,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/259#issuecomment-361727682,Make sure that threads are started before counting them,Let me merge this branch and make the final adjustments.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,259,2018-01-24T16:34:52Z,2018-01-30T20:55:51Z,2018-01-30T20:55:51Z,CLOSED,False,55,16,1,https://github.com/elvanderb,fix process_threads test,3,[],https://github.com/frida/frida-gum/pull/259,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/259#issuecomment-361731221,Make sure that threads are started before counting them,Landed in 4336ac9. Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,260,2018-01-25T10:14:52Z,2018-01-30T21:26:32Z,2018-01-31T10:46:00Z,CLOSED,False,129,12,3,https://github.com/elvanderb,improve x86_writer calls generation,1,[],https://github.com/frida/frida-gum/pull/260,https://github.com/elvanderb,1,https://github.com/frida/frida-gum/pull/260,"indirect calls were not correctly generated for AMD64, I also added the possibility to make indirect calls with labels and used this last feature to fix calls to 64bits addresses that previously trashed rax.","indirect calls were not correctly generated for AMD64, I also added the possibility to make indirect calls with labels and used this last feature to fix calls to 64bits addresses that previously trashed rax.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,260,2018-01-25T10:14:52Z,2018-01-30T21:26:32Z,2018-01-31T10:46:00Z,CLOSED,False,129,12,3,https://github.com/elvanderb,improve x86_writer calls generation,1,[],https://github.com/frida/frida-gum/pull/260,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/260#issuecomment-361732091,"indirect calls were not correctly generated for AMD64, I also added the possibility to make indirect calls with labels and used this last feature to fix calls to 64bits addresses that previously trashed rax.",I'll make the final tweaks so we can land this.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,260,2018-01-25T10:14:52Z,2018-01-30T21:26:32Z,2018-01-31T10:46:00Z,CLOSED,False,129,12,3,https://github.com/elvanderb,improve x86_writer calls generation,1,[],https://github.com/frida/frida-gum/pull/260,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/260#issuecomment-361739616,"indirect calls were not correctly generated for AMD64, I also added the possibility to make indirect calls with labels and used this last feature to fix calls to 64bits addresses that previously trashed rax.",Landed in 226ab0f. Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,260,2018-01-25T10:14:52Z,2018-01-30T21:26:32Z,2018-01-31T10:46:00Z,CLOSED,False,129,12,3,https://github.com/elvanderb,improve x86_writer calls generation,1,[],https://github.com/frida/frida-gum/pull/260,https://github.com/elvanderb,4,https://github.com/frida/frida-gum/pull/260#issuecomment-361894647,"indirect calls were not correctly generated for AMD64, I also added the possibility to make indirect calls with labels and used this last feature to fix calls to 64bits addresses that previously trashed rax.",Thank you and sorry!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,262,2018-01-30T14:24:42Z,2018-01-30T21:35:19Z,2018-01-30T21:35:19Z,MERGED,True,165,16,6,https://github.com/mrmacete,Adjust size of mapped ranges (darwin),4,[],https://github.com/frida/frida-gum/pull/262,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/262,"The tail of file-mapped segments is guaranteed to be accessible only within ‚Äúvm_kernel_page_size‚Äù boundary after the end of file, after that point SIGBUS is triggered - regardless of the real size of the memory map.
The returned ‚Äúsize‚Äù for ranges crossing the end of mapped files is now adjusted to be within the safe range.
As a plus, ‚Äúfile‚Äù object has the new ‚Äúsize‚Äù field which holds the size of the mapped file on disk in bytes.
Added the ‚Äúfile‚Äù object to ‚ÄúModule.enumerateRanges()‚Äù  results too.
__PAGEZERO segment is now skipped while enumerating Module‚Äôs ranges.","The tail of file-mapped segments is guaranteed to be accessible only within ‚Äúvm_kernel_page_size‚Äù boundary after the end of file, after that point SIGBUS is triggered - regardless of the real size of the memory map.
The returned ‚Äúsize‚Äù for ranges crossing the end of mapped files is now adjusted to be within the safe range.
As a plus, ‚Äúfile‚Äù object has the new ‚Äúsize‚Äù field which holds the size of the mapped file on disk in bytes.
Added the ‚Äúfile‚Äù object to ‚ÄúModule.enumerateRanges()‚Äù  results too.
__PAGEZERO segment is now skipped while enumerating Module‚Äôs ranges.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,262,2018-01-30T14:24:42Z,2018-01-30T21:35:19Z,2018-01-30T21:35:19Z,MERGED,True,165,16,6,https://github.com/mrmacete,Adjust size of mapped ranges (darwin),4,[],https://github.com/frida/frida-gum/pull/262,https://github.com/mrmacete,2,https://github.com/frida/frida-gum/pull/262#issuecomment-361729976,"The tail of file-mapped segments is guaranteed to be accessible only within ‚Äúvm_kernel_page_size‚Äù boundary after the end of file, after that point SIGBUS is triggered - regardless of the real size of the memory map.
The returned ‚Äúsize‚Äù for ranges crossing the end of mapped files is now adjusted to be within the safe range.
As a plus, ‚Äúfile‚Äù object has the new ‚Äúsize‚Äù field which holds the size of the mapped file on disk in bytes.
Added the ‚Äúfile‚Äù object to ‚ÄúModule.enumerateRanges()‚Äù  results too.
__PAGEZERO segment is now skipped while enumerating Module‚Äôs ranges.",no problem! still fighting with my vim config üòÑ,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,263,2018-01-30T20:50:22Z,2018-01-30T20:55:08Z,2018-01-30T20:55:14Z,CLOSED,False,57,16,1,https://github.com/oleavr,Fix process threads test,1,[],https://github.com/frida/frida-gum/pull/263,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/263,Finalized version of #259.,Finalized version of #259.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,263,2018-01-30T20:50:22Z,2018-01-30T20:55:08Z,2018-01-30T20:55:14Z,CLOSED,False,57,16,1,https://github.com/oleavr,Fix process threads test,1,[],https://github.com/frida/frida-gum/pull/263,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/263#issuecomment-361731028,Finalized version of #259.,Cherry-picked instead.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,264,2018-02-03T13:37:21Z,2018-02-04T18:48:04Z,2018-02-04T20:04:18Z,MERGED,True,40,0,9,https://github.com/mrmacete,Expose import slot for i/macOS,2,[],https://github.com/frida/frida-gum/pull/264,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/264,"The slot is the address (in the module which imports the symbol) where it gets bound.
Initialized in darwin backend for now, for other architectures is set to 0 (not shown in javascript).","The slot is the address (in the module which imports the symbol) where it gets bound.
Initialized in darwin backend for now, for other architectures is set to 0 (not shown in javascript).",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,264,2018-02-03T13:37:21Z,2018-02-04T18:48:04Z,2018-02-04T20:04:18Z,MERGED,True,40,0,9,https://github.com/mrmacete,Expose import slot for i/macOS,2,[],https://github.com/frida/frida-gum/pull/264,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/264#issuecomment-362901266,"The slot is the address (in the module which imports the symbol) where it gets bound.
Initialized in darwin backend for now, for other architectures is set to 0 (not shown in javascript).","Awesome! I'm wondering if there's a more suitable name, because offset makes it sound like it's an offset from some address, and not a pointer to a memory location. Perhaps slot, entry or something similar?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,264,2018-02-03T13:37:21Z,2018-02-04T18:48:04Z,2018-02-04T20:04:18Z,MERGED,True,40,0,9,https://github.com/mrmacete,Expose import slot for i/macOS,2,[],https://github.com/frida/frida-gum/pull/264,https://github.com/mrmacete,3,https://github.com/frida/frida-gum/pull/264#issuecomment-362905196,"The slot is the address (in the module which imports the symbol) where it gets bound.
Initialized in darwin backend for now, for other architectures is set to 0 (not shown in javascript).","yeah i was wondering the same, let's try with slot ?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,264,2018-02-03T13:37:21Z,2018-02-04T18:48:04Z,2018-02-04T20:04:18Z,MERGED,True,40,0,9,https://github.com/mrmacete,Expose import slot for i/macOS,2,[],https://github.com/frida/frida-gum/pull/264,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/264#issuecomment-362909981,"The slot is the address (in the module which imports the symbol) where it gets bound.
Initialized in darwin backend for now, for other architectures is set to 0 (not shown in javascript).",Sounds good!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,264,2018-02-03T13:37:21Z,2018-02-04T18:48:04Z,2018-02-04T20:04:18Z,MERGED,True,40,0,9,https://github.com/mrmacete,Expose import slot for i/macOS,2,[],https://github.com/frida/frida-gum/pull/264,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/264#issuecomment-362929662,"The slot is the address (in the module which imports the symbol) where it gets bound.
Initialized in darwin backend for now, for other architectures is set to 0 (not shown in javascript).",üí•,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,264,2018-02-03T13:37:21Z,2018-02-04T18:48:04Z,2018-02-04T20:04:18Z,MERGED,True,40,0,9,https://github.com/mrmacete,Expose import slot for i/macOS,2,[],https://github.com/frida/frida-gum/pull/264,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/264#issuecomment-362935048,"The slot is the address (in the module which imports the symbol) where it gets bound.
Initialized in darwin backend for now, for other architectures is set to 0 (not shown in javascript).",Released in 10.6.51 üéâ,True,{'HEART': ['https://github.com/mrmacete']}
frida/frida-gum,https://github.com/frida/frida-gum,265,2018-02-05T12:34:50Z,2018-02-05T13:58:59Z,2018-02-05T13:58:59Z,MERGED,True,1,21,1,https://github.com/mrmacete,Allow emitting i/macOS imports more than once per symbol,2,[],https://github.com/frida/frida-gum/pull/265,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/265,because they‚Äôll have different values for slot,because they‚Äôll have different values for slot,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,267,2018-03-09T16:34:55Z,2018-03-12T18:33:46Z,2018-03-12T18:33:46Z,MERGED,True,61,17,8,https://github.com/mrmacete,Add gum_query_page_allocation_range,5,[],https://github.com/frida/frida-gum/pull/267,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/267,This should be used to get the full extent of ranges allocated using gum_alloc_n_pages including the overhead (mostly useful for cloaking). This is implemented in the various backends.,This should be used to get the full extent of ranges allocated using gum_alloc_n_pages including the overhead (mostly useful for cloaking). This is implemented in the various backends.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,268,2018-03-12T16:44:02Z,2018-03-12T18:57:44Z,2018-03-12T18:57:44Z,MERGED,True,81,38,8,https://github.com/mrmacete,Potentially cloak more than one range for threads,10,[],https://github.com/frida/frida-gum/pull/268,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/268,"Implemented only on i/macOS for now.
The default behaviour when apple‚Äôs libpthread allocates resources for a thread is to create a contiguous range made of guard + stack + pthread. There‚Äôs also the possiblity to create a thread providing a separated stack, in that case no guard page will be provided by default and only the pthread structure will be allocated internally.
In any case, both the internal allocation extents and the stack itself can be retrieved by picking the right values out of the opaque pthread structure.
The gum_thread_try_get_ranges function detects if the allocation is contiguous or not. If it‚Äôs contiguous only one range is filled, otherwise there will be one range for stack and one for pthread structure. The number of produced ranges is returned. In backends which don‚Äôt implement this logic yet, a number of 0 ranges is returned.
Offsets in pthread structure have been pretty stable so far, the most notable change is that at some point (around iOS 10.x) the thread_id field has been moved after the fields we use. To account for this and provide compatibility with older versions of pthread structure, we check if thread_id is at the newer offset, if it‚Äôs not a skew of 8 bytes is added to all other offsets.","Implemented only on i/macOS for now.
The default behaviour when apple‚Äôs libpthread allocates resources for a thread is to create a contiguous range made of guard + stack + pthread. There‚Äôs also the possiblity to create a thread providing a separated stack, in that case no guard page will be provided by default and only the pthread structure will be allocated internally.
In any case, both the internal allocation extents and the stack itself can be retrieved by picking the right values out of the opaque pthread structure.
The gum_thread_try_get_ranges function detects if the allocation is contiguous or not. If it‚Äôs contiguous only one range is filled, otherwise there will be one range for stack and one for pthread structure. The number of produced ranges is returned. In backends which don‚Äôt implement this logic yet, a number of 0 ranges is returned.
Offsets in pthread structure have been pretty stable so far, the most notable change is that at some point (around iOS 10.x) the thread_id field has been moved after the fields we use. To account for this and provide compatibility with older versions of pthread structure, we check if thread_id is at the newer offset, if it‚Äôs not a skew of 8 bytes is added to all other offsets.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,269,2018-03-16T11:26:48Z,2018-03-16T13:03:32Z,2018-03-16T13:03:32Z,MERGED,True,2,0,1,https://github.com/krytarowski,Skip DT_GNU_HASH in gum_store_symtab_params if unavailable,1,[],https://github.com/frida/frida-gum/pull/269,https://github.com/krytarowski,1,https://github.com/frida/frida-gum/pull/269,"DT_GNU_HASH is not available on all ELF platforms and it is a GNU extension.
This corrects a build on NetBSD/amd64 8.99.12.","DT_GNU_HASH is not available on all ELF platforms and it is a GNU extension.
This corrects a build on NetBSD/amd64 8.99.12.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,269,2018-03-16T11:26:48Z,2018-03-16T13:03:32Z,2018-03-16T13:03:32Z,MERGED,True,2,0,1,https://github.com/krytarowski,Skip DT_GNU_HASH in gum_store_symtab_params if unavailable,1,[],https://github.com/frida/frida-gum/pull/269,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/269#issuecomment-373706634,"DT_GNU_HASH is not available on all ELF platforms and it is a GNU extension.
This corrects a build on NetBSD/amd64 8.99.12.",Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,270,2018-03-17T15:02:28Z,2018-03-19T10:39:27Z,2018-03-19T10:39:27Z,MERGED,True,5,0,1,https://github.com/mrmacete,Handle empty or undefined error stack in v8,2,[],https://github.com/frida/frida-gum/pull/270,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/270,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,271,2018-03-19T11:17:12Z,2018-03-19T12:05:41Z,2018-03-19T12:05:41Z,MERGED,True,55,0,3,https://github.com/mrmacete,Add OutputStream.writeMemoryRegion,2,[],https://github.com/frida/frida-gum/pull/271,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/271,to stream directly from memory without making copies of the data,to stream directly from memory without making copies of the data,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,272,2018-03-20T18:02:56Z,2018-03-20T18:53:27Z,2018-03-20T18:53:27Z,CLOSED,False,3,0,1,https://github.com/mrmacete,Let go js lock during findExportByName,1,[],https://github.com/frida/frida-gum/pull/272,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/272,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,272,2018-03-20T18:02:56Z,2018-03-20T18:53:27Z,2018-03-20T18:53:27Z,CLOSED,False,3,0,1,https://github.com/mrmacete,Let go js lock during findExportByName,1,[],https://github.com/frida/frida-gum/pull/272,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/272#issuecomment-374715799,,Thanks! ü§òLanded in 0b14e28 together with the corresponding change to the V8 runtime.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,274,2018-03-27T19:11:58Z,2018-03-31T21:28:50Z,2018-03-31T21:28:54Z,MERGED,True,241,13,16,https://github.com/oleavr,Add fork()-handling,2,[],https://github.com/frida/frida-gum/pull/274,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/274,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,277,2018-04-23T20:54:08Z,2018-04-24T18:07:47Z,2018-04-24T18:07:47Z,MERGED,True,3,2,1,https://github.com/mrmacete,Stop worker thread before modifying old_ports,2,[],https://github.com/frida/frida-gum/pull/277,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/277,This is to avoid corrupting old_ports->count while the worker thread is potentially iterating on it. That could have produced an infinite loop in the worker thread leading to indefinite hang or memory corruption.,This is to avoid corrupting old_ports->count while the worker thread is potentially iterating on it. That could have produced an infinite loop in the worker thread leading to indefinite hang or memory corruption.,True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,278,2018-04-23T21:07:35Z,2018-04-24T18:00:24Z,2018-04-24T18:00:25Z,MERGED,True,70,24,1,https://github.com/mrmacete,"Realize if supported, remap otherwise",3,[],https://github.com/frida/frida-gum/pull/278,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/278,"When realize could fail, avoid it entirely and directly remap the segment. This works where code signing isn‚Äôt an issue but sandboxing breaks executable file mapping (like Electra on iOS 11.1.2).","When realize could fail, avoid it entirely and directly remap the segment. This works where code signing isn‚Äôt an issue but sandboxing breaks executable file mapping (like Electra on iOS 11.1.2).",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,279,2018-04-24T13:36:01Z,2018-04-24T15:36:04Z,2018-04-24T15:36:04Z,MERGED,True,1,1,1,https://github.com/DavidCatalan,Added carriage return replacing,1,[],https://github.com/frida/frida-gum/pull/279,https://github.com/DavidCatalan,1,https://github.com/frida/frida-gum/pull/279,"Added replace(""\r"", """") after reading gum headers contents to avoid issues with different OS/git configurations.","Added replace(""\r"", """") after reading gum headers contents to avoid issues with different OS/git configurations.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,279,2018-04-24T13:36:01Z,2018-04-24T15:36:04Z,2018-04-24T15:36:04Z,MERGED,True,1,1,1,https://github.com/DavidCatalan,Added carriage return replacing,1,[],https://github.com/frida/frida-gum/pull/279,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/279#issuecomment-383977624,"Added replace(""\r"", """") after reading gum headers contents to avoid issues with different OS/git configurations.",Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,281,2018-05-13T21:34:18Z,2018-05-13T21:36:08Z,2018-05-13T21:46:22Z,MERGED,True,2,2,1,https://github.com/mrmacete,Fix tls_base calculation on arm64,1,[],https://github.com/frida/frida-gum/pull/281,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/281,reference: https://github.com/apple/darwin-xnu/blob/master/libsyscall/os/tsd.h#L122,reference: https://github.com/apple/darwin-xnu/blob/master/libsyscall/os/tsd.h#L122,True,{'HOORAY': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,284,2018-05-24T08:21:14Z,2018-05-24T11:28:54Z,2018-05-24T11:31:01Z,MERGED,True,1,1,1,https://github.com/TheKalin,Typo fix #283,1,[],https://github.com/frida/frida-gum/pull/284,https://github.com/TheKalin,1,https://github.com/frida/frida-gum/pull/284,,,True,{'THUMBS_UP': ['https://github.com/csftech']}
frida/frida-gum,https://github.com/frida/frida-gum,284,2018-05-24T08:21:14Z,2018-05-24T11:28:54Z,2018-05-24T11:31:01Z,MERGED,True,1,1,1,https://github.com/TheKalin,Typo fix #283,1,[],https://github.com/frida/frida-gum/pull/284,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/284#issuecomment-391680544,,Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,284,2018-05-24T08:21:14Z,2018-05-24T11:28:54Z,2018-05-24T11:31:01Z,MERGED,True,1,1,1,https://github.com/TheKalin,Typo fix #283,1,[],https://github.com/frida/frida-gum/pull/284,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/284#issuecomment-391681312,,Fix released in frida-gum-types@1.1.2 üéâ,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,285,2018-06-06T18:38:35Z,2018-06-06T22:46:59Z,2018-06-07T11:19:59Z,MERGED,True,267,1,5,https://github.com/mrmacete,Improve Frida Kernel,4,[],https://github.com/frida/frida-gum/pull/285,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/285,"make gum_kernel_read failsafe by reading in chunks smaller than page size
add Kernel.alloc(), Kernel.protect(), and Kernel.pageSize

obviously Kernel.protect() is a bit crippled because to really change to any protection it's required to patch parent page table entries too, but getting there!","make gum_kernel_read failsafe by reading in chunks smaller than page size
add Kernel.alloc(), Kernel.protect(), and Kernel.pageSize

obviously Kernel.protect() is a bit crippled because to really change to any protection it's required to patch parent page table entries too, but getting there!",True,"{'HOORAY': ['https://github.com/oleavr'], 'HEART': ['https://github.com/oleavr']}"
frida/frida-gum,https://github.com/frida/frida-gum,287,2018-06-29T13:25:33Z,2018-07-13T14:17:52Z,2018-07-13T14:41:03Z,MERGED,True,239,24,4,https://github.com/mrmacete,Add support for memory search with mask,2,[],https://github.com/frida/frida-gum/pull/287,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/287,"The mask is bitwise AND-ed against both the needle and the haystack.
To specify the mask it's now possible to append a : char after the needle, then the mask with the same syntax (radare2-style), example:
Memory.scanSync(address, size, ""13 37 13 37 : 1f ff ff f1"");

As a plus it's now possible to specify nibble-level wildcards, which are translated to masks under the hood, example:
Memory.scanSync(address, size, ""?3 37 13 ?7"");

Obviously this kind of search introduces a bit of overhead, but the design principle is to avoid all overhead when not actually using masks.","The mask is bitwise AND-ed against both the needle and the haystack.
To specify the mask it's now possible to append a : char after the needle, then the mask with the same syntax (radare2-style), example:
Memory.scanSync(address, size, ""13 37 13 37 : 1f ff ff f1"");

As a plus it's now possible to specify nibble-level wildcards, which are translated to masks under the hood, example:
Memory.scanSync(address, size, ""?3 37 13 ?7"");

Obviously this kind of search introduces a bit of overhead, but the design principle is to avoid all overhead when not actually using masks.",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,287,2018-06-29T13:25:33Z,2018-07-13T14:17:52Z,2018-07-13T14:41:03Z,MERGED,True,239,24,4,https://github.com/mrmacete,Add support for memory search with mask,2,[],https://github.com/frida/frida-gum/pull/287,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/287#issuecomment-401493996,"The mask is bitwise AND-ed against both the needle and the haystack.
To specify the mask it's now possible to append a : char after the needle, then the mask with the same syntax (radare2-style), example:
Memory.scanSync(address, size, ""13 37 13 37 : 1f ff ff f1"");

As a plus it's now possible to specify nibble-level wildcards, which are translated to masks under the hood, example:
Memory.scanSync(address, size, ""?3 37 13 ?7"");

Obviously this kind of search introduces a bit of overhead, but the design principle is to avoid all overhead when not actually using masks.","Wow, awesome! I will review later this weekend ‚Äì my brain is a bit mushy right now :-)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,288,2018-07-01T08:56:56Z,2018-07-01T13:58:51Z,2018-07-11T22:09:03Z,MERGED,True,1,1,1,https://github.com/mrmacete,Fix typo,1,[],https://github.com/frida/frida-gum/pull/288,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/288,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,288,2018-07-01T08:56:56Z,2018-07-01T13:58:51Z,2018-07-11T22:09:03Z,MERGED,True,1,1,1,https://github.com/mrmacete,Fix typo,1,[],https://github.com/frida/frida-gum/pull/288,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/288#issuecomment-401608700,,Oops! üòÇ Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,289,2018-07-18T20:29:15Z,2018-07-18T21:41:28Z,2018-07-18T21:41:42Z,MERGED,True,0,19,1,https://github.com/Knight-Ops,"Remove unnecessary/bug-inducing {get,set}context() stubs on MIPS",1,[],https://github.com/frida/frida-gum/pull/289,https://github.com/Knight-Ops,1,https://github.com/frida/frida-gum/pull/289,We don't need these with the proper toolchains available. Part of fixing mips support.,We don't need these with the proper toolchains available. Part of fixing mips support.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,289,2018-07-18T20:29:15Z,2018-07-18T21:41:28Z,2018-07-18T21:41:42Z,MERGED,True,0,19,1,https://github.com/Knight-Ops,"Remove unnecessary/bug-inducing {get,set}context() stubs on MIPS",1,[],https://github.com/frida/frida-gum/pull/289,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/289#issuecomment-406082791,We don't need these with the proper toolchains available. Part of fixing mips support.,Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,290,2018-08-09T09:39:46Z,2018-08-09T13:41:06Z,2018-08-09T14:11:21Z,MERGED,True,2,1,1,https://github.com/mrmacete,Fix CodeSegment probing in sandboxed processes,2,[],https://github.com/frida/frida-gum/pull/290,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/290,"Instead of failing the assertion, that will let the try_realize fail and take the alternative path before giving up.
This is enough to fix attach to com.apple.WebKit.* processes on iOS 11.x","Instead of failing the assertion, that will let the try_realize fail and take the alternative path before giving up.
This is enough to fix attach to com.apple.WebKit.* processes on iOS 11.x",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,291,2018-08-10T11:17:13Z,2018-08-10T12:04:27Z,2018-08-10T13:03:31Z,MERGED,True,1,0,1,https://github.com/korniltsev,Fix leak when probing Linux auxv struct,1,[],https://github.com/frida/frida-gum/pull/291,https://github.com/korniltsev,1,https://github.com/frida/frida-gum/pull/291,g_file_get_contents allocates buffer for /proc/$pid/auxv file and it was not freed,g_file_get_contents allocates buffer for /proc/$pid/auxv file and it was not freed,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,291,2018-08-10T11:17:13Z,2018-08-10T12:04:27Z,2018-08-10T13:03:31Z,MERGED,True,1,0,1,https://github.com/korniltsev,Fix leak when probing Linux auxv struct,1,[],https://github.com/frida/frida-gum/pull/291,https://github.com/korniltsev,2,https://github.com/frida/frida-gum/pull/291#issuecomment-412054904,g_file_get_contents allocates buffer for /proc/$pid/auxv file and it was not freed,"Not related to the PR, but I also noticed there is a loop in gum_linux_cpu_type_from_pid which checks for auxv[4:7] being NULL and it looks like the loop was supposed to check for auxv[i+4:i+7].",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,291,2018-08-10T11:17:13Z,2018-08-10T12:04:27Z,2018-08-10T13:03:31Z,MERGED,True,1,0,1,https://github.com/korniltsev,Fix leak when probing Linux auxv struct,1,[],https://github.com/frida/frida-gum/pull/291,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/291#issuecomment-412062004,g_file_get_contents allocates buffer for /proc/$pid/auxv file and it was not freed,"Thanks! ü§òGreat catch! That function is apparently full of fail :-) Feel free to open another PR for the loop fix btw ‚Äì or I can do it, just let me know.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,291,2018-08-10T11:17:13Z,2018-08-10T12:04:27Z,2018-08-10T13:03:31Z,MERGED,True,1,0,1,https://github.com/korniltsev,Fix leak when probing Linux auxv struct,1,[],https://github.com/frida/frida-gum/pull/291,https://github.com/korniltsev,4,https://github.com/frida/frida-gum/pull/291#issuecomment-412075772,g_file_get_contents allocates buffer for /proc/$pid/auxv file and it was not freed,I will be happy to do another PR.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,292,2018-08-11T09:35:42Z,2018-10-23T00:03:04Z,2018-10-23T00:03:04Z,CLOSED,False,153,26,10,https://github.com/mrmacete,WIP: Add script backend lock helper functions,5,[],https://github.com/frida/frida-gum/pull/292,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/292,"use only one js lock for duktape, living in the backend
add run_locked_func and is_locked interfaces to script backend","use only one js lock for duktape, living in the backend
add run_locked_func and is_locked interfaces to script backend",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,292,2018-08-11T09:35:42Z,2018-10-23T00:03:04Z,2018-10-23T00:03:04Z,CLOSED,False,153,26,10,https://github.com/mrmacete,WIP: Add script backend lock helper functions,5,[],https://github.com/frida/frida-gum/pull/292,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/292#issuecomment-432034060,"use only one js lock for duktape, living in the backend
add run_locked_func and is_locked interfaces to script backend",Tweaked version landed as a1a088e. Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,294,2018-08-31T16:15:59Z,2018-09-03T18:40:39Z,2018-09-03T18:40:39Z,MERGED,True,25,0,3,https://github.com/andreafioraldi,add size field to Instruction.operands,4,[],https://github.com/frida/frida-gum/pull/294,https://github.com/andreafioraldi,1,https://github.com/frida/frida-gum/pull/294,"Look here: #293
I tested the patch using ducktape on a x86 binary and it's ok.
My test build is python-64.
You should test all the other architectures and also the v8 patch, I didn't find how to select v8 in the compilation process.
Here an example:
>>> import frida
>>> 
>>> code = """"""
... i = Instruction.parse(ptr(""0x4005C7"")) //movzx   eax, byte ptr [rax]
... console.log(JSON.stringify(i.operands))
... """"""
>>> pid = frida.spawn([""./foo"", ""A""*30])
>>> session = frida.attach(pid)
>>> script = session.create_script(code)
>>> script.load()
[{""type"":""reg"",""value"":""eax"",""size"":4},{""type"":""mem"",""value"":{""base"":""rax"",""scale"":1,""disp"":0},""size"":1}]
>>>","Look here: #293
I tested the patch using ducktape on a x86 binary and it's ok.
My test build is python-64.
You should test all the other architectures and also the v8 patch, I didn't find how to select v8 in the compilation process.
Here an example:
>>> import frida
>>> 
>>> code = """"""
... i = Instruction.parse(ptr(""0x4005C7"")) //movzx   eax, byte ptr [rax]
... console.log(JSON.stringify(i.operands))
... """"""
>>> pid = frida.spawn([""./foo"", ""A""*30])
>>> session = frida.attach(pid)
>>> script = session.create_script(code)
>>> script.load()
[{""type"":""reg"",""value"":""eax"",""size"":4},{""type"":""mem"",""value"":{""base"":""rax"",""scale"":1,""disp"":0},""size"":1}]
>>>",True,{'THUMBS_UP': ['https://github.com/mrmacete']}
frida/frida-gum,https://github.com/frida/frida-gum,294,2018-08-31T16:15:59Z,2018-09-03T18:40:39Z,2018-09-03T18:40:39Z,MERGED,True,25,0,3,https://github.com/andreafioraldi,add size field to Instruction.operands,4,[],https://github.com/frida/frida-gum/pull/294,https://github.com/mrmacete,2,https://github.com/frida/frida-gum/pull/294#issuecomment-417785539,"Look here: #293
I tested the patch using ducktape on a x86 binary and it's ok.
My test build is python-64.
You should test all the other architectures and also the v8 patch, I didn't find how to select v8 in the compilation process.
Here an example:
>>> import frida
>>> 
>>> code = """"""
... i = Instruction.parse(ptr(""0x4005C7"")) //movzx   eax, byte ptr [rax]
... console.log(JSON.stringify(i.operands))
... """"""
>>> pid = frida.spawn([""./foo"", ""A""*30])
>>> session = frida.attach(pid)
>>> script = session.create_script(code)
>>> script.load()
[{""type"":""reg"",""value"":""eax"",""size"":4},{""type"":""mem"",""value"":{""base"":""rax"",""scale"":1,""disp"":0},""size"":1}]
>>>","v8 can be selected at runtime, just call:
session.enable_jit()

before creating the script",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,294,2018-08-31T16:15:59Z,2018-09-03T18:40:39Z,2018-09-03T18:40:39Z,MERGED,True,25,0,3,https://github.com/andreafioraldi,add size field to Instruction.operands,4,[],https://github.com/frida/frida-gum/pull/294,https://github.com/andreafioraldi,3,https://github.com/frida/frida-gum/pull/294#issuecomment-417843220,"Look here: #293
I tested the patch using ducktape on a x86 binary and it's ok.
My test build is python-64.
You should test all the other architectures and also the v8 patch, I didn't find how to select v8 in the compilation process.
Here an example:
>>> import frida
>>> 
>>> code = """"""
... i = Instruction.parse(ptr(""0x4005C7"")) //movzx   eax, byte ptr [rax]
... console.log(JSON.stringify(i.operands))
... """"""
>>> pid = frida.spawn([""./foo"", ""A""*30])
>>> session = frida.attach(pid)
>>> script = session.create_script(code)
>>> script.load()
[{""type"":""reg"",""value"":""eax"",""size"":4},{""type"":""mem"",""value"":{""base"":""rax"",""scale"":1,""disp"":0},""size"":1}]
>>>",V8 with X86 works.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,294,2018-08-31T16:15:59Z,2018-09-03T18:40:39Z,2018-09-03T18:40:39Z,MERGED,True,25,0,3,https://github.com/andreafioraldi,add size field to Instruction.operands,4,[],https://github.com/frida/frida-gum/pull/294,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/294#issuecomment-418175386,"Look here: #293
I tested the patch using ducktape on a x86 binary and it's ok.
My test build is python-64.
You should test all the other architectures and also the v8 patch, I didn't find how to select v8 in the compilation process.
Here an example:
>>> import frida
>>> 
>>> code = """"""
... i = Instruction.parse(ptr(""0x4005C7"")) //movzx   eax, byte ptr [rax]
... console.log(JSON.stringify(i.operands))
... """"""
>>> pid = frida.spawn([""./foo"", ""A""*30])
>>> session = frida.attach(pid)
>>> script = session.create_script(code)
>>> script.load()
[{""type"":""reg"",""value"":""eax"",""size"":4},{""type"":""mem"",""value"":{""base"":""rax"",""scale"":1,""disp"":0},""size"":1}]
>>>",Thanks! üëç,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,296,2018-09-03T15:33:01Z,2018-09-06T18:08:00Z,2018-09-06T18:08:09Z,CLOSED,False,1834,84,16,https://github.com/mrmacete,More kernel improvements,5,[],https://github.com/frida/frida-gum/pull/296,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/296,"add scan, enumerateModules, enumerateModuleRanges
add kernel base getter
fix overflow on section / segment names

this works on 64-bit devices, tested on versions from iOS 9.0 to iOS 11.3.
Added interfaces
Kernel.scan() / Kernel.scanSync() work exactly like their Memory counterparts, supporting bit masks too.
Kernel.enumerateModules() / Kernel.enumerateModulesSync() lists all the KEXTs, and the main kernel module (called ""Kernel""), example:
[iPhone::SystemSession]-> Kernel.enumerateModulesSync()
[
    {
        ""base"": ""0xfffffff016604000"",
        ""name"": ""Kernel"",
        ""path"": null,
        ""size"": 31886248
    },
    {
        ""base"": ""0xfffffff0152bc940"",
        ""name"": ""com.apple.driver.AppleEffaceableStorage"",
        ""path"": null,
        ""size"": 28550
    },
    {
        ""base"": ""0xfffffff015272dc0"",
        ""name"": ""com.apple.driver.AppleMultitouchSPI"",
        ""path"": null,
        ""size"": 111560
    },
...

Kernel.enumerateModuleRanges() / Kernel.enumerateModuleRangesSync() list sections of a module by name (taken by the previous call). The semantic is the same of Module.enumerateRanges() Example:
[iPhone::SystemSession]-> Kernel.enumerateModuleRangesSync('com.apple.driver.AppleMultitouchSPI', '---')
[
    {
        ""address"": ""0xfffffff0152733c8"",
        ""name"": ""__TEXT.__const"",
        ""protection"": ""r--"",
        ""size"": 288
    },
    {
        ""address"": ""0xfffffff0152734e8"",
        ""name"": ""__TEXT.__cstring"",
        ""protection"": ""r--"",
        ""size"": 14675
    },
    {
        ""address"": ""0xfffffff015276e3b"",
        ""name"": ""__TEXT.__os_log"",
        ""protection"": ""r--"",
        ""size"": 1577
    },
    {
        ""address"": ""0xfffffff015a44000"",
        ""name"": ""__TEXT_EXEC.__text"",
        ""protection"": ""r-x"",
        ""size"": 78788
    },
...

the Kernel.base property returns a pointer to the base of the kernel in memory (intended as the address of its __TEXT segment).","add scan, enumerateModules, enumerateModuleRanges
add kernel base getter
fix overflow on section / segment names

this works on 64-bit devices, tested on versions from iOS 9.0 to iOS 11.3.
Added interfaces
Kernel.scan() / Kernel.scanSync() work exactly like their Memory counterparts, supporting bit masks too.
Kernel.enumerateModules() / Kernel.enumerateModulesSync() lists all the KEXTs, and the main kernel module (called ""Kernel""), example:
[iPhone::SystemSession]-> Kernel.enumerateModulesSync()
[
    {
        ""base"": ""0xfffffff016604000"",
        ""name"": ""Kernel"",
        ""path"": null,
        ""size"": 31886248
    },
    {
        ""base"": ""0xfffffff0152bc940"",
        ""name"": ""com.apple.driver.AppleEffaceableStorage"",
        ""path"": null,
        ""size"": 28550
    },
    {
        ""base"": ""0xfffffff015272dc0"",
        ""name"": ""com.apple.driver.AppleMultitouchSPI"",
        ""path"": null,
        ""size"": 111560
    },
...

Kernel.enumerateModuleRanges() / Kernel.enumerateModuleRangesSync() list sections of a module by name (taken by the previous call). The semantic is the same of Module.enumerateRanges() Example:
[iPhone::SystemSession]-> Kernel.enumerateModuleRangesSync('com.apple.driver.AppleMultitouchSPI', '---')
[
    {
        ""address"": ""0xfffffff0152733c8"",
        ""name"": ""__TEXT.__const"",
        ""protection"": ""r--"",
        ""size"": 288
    },
    {
        ""address"": ""0xfffffff0152734e8"",
        ""name"": ""__TEXT.__cstring"",
        ""protection"": ""r--"",
        ""size"": 14675
    },
    {
        ""address"": ""0xfffffff015276e3b"",
        ""name"": ""__TEXT.__os_log"",
        ""protection"": ""r--"",
        ""size"": 1577
    },
    {
        ""address"": ""0xfffffff015a44000"",
        ""name"": ""__TEXT_EXEC.__text"",
        ""protection"": ""r-x"",
        ""size"": 78788
    },
...

the Kernel.base property returns a pointer to the base of the kernel in memory (intended as the address of its __TEXT segment).",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,296,2018-09-03T15:33:01Z,2018-09-06T18:08:00Z,2018-09-06T18:08:09Z,CLOSED,False,1834,84,16,https://github.com/mrmacete,More kernel improvements,5,[],https://github.com/frida/frida-gum/pull/296,https://github.com/mrmacete,2,https://github.com/frida/frida-gum/pull/296#issuecomment-418292100,"add scan, enumerateModules, enumerateModuleRanges
add kernel base getter
fix overflow on section / segment names

this works on 64-bit devices, tested on versions from iOS 9.0 to iOS 11.3.
Added interfaces
Kernel.scan() / Kernel.scanSync() work exactly like their Memory counterparts, supporting bit masks too.
Kernel.enumerateModules() / Kernel.enumerateModulesSync() lists all the KEXTs, and the main kernel module (called ""Kernel""), example:
[iPhone::SystemSession]-> Kernel.enumerateModulesSync()
[
    {
        ""base"": ""0xfffffff016604000"",
        ""name"": ""Kernel"",
        ""path"": null,
        ""size"": 31886248
    },
    {
        ""base"": ""0xfffffff0152bc940"",
        ""name"": ""com.apple.driver.AppleEffaceableStorage"",
        ""path"": null,
        ""size"": 28550
    },
    {
        ""base"": ""0xfffffff015272dc0"",
        ""name"": ""com.apple.driver.AppleMultitouchSPI"",
        ""path"": null,
        ""size"": 111560
    },
...

Kernel.enumerateModuleRanges() / Kernel.enumerateModuleRangesSync() list sections of a module by name (taken by the previous call). The semantic is the same of Module.enumerateRanges() Example:
[iPhone::SystemSession]-> Kernel.enumerateModuleRangesSync('com.apple.driver.AppleMultitouchSPI', '---')
[
    {
        ""address"": ""0xfffffff0152733c8"",
        ""name"": ""__TEXT.__const"",
        ""protection"": ""r--"",
        ""size"": 288
    },
    {
        ""address"": ""0xfffffff0152734e8"",
        ""name"": ""__TEXT.__cstring"",
        ""protection"": ""r--"",
        ""size"": 14675
    },
    {
        ""address"": ""0xfffffff015276e3b"",
        ""name"": ""__TEXT.__os_log"",
        ""protection"": ""r--"",
        ""size"": 1577
    },
    {
        ""address"": ""0xfffffff015a44000"",
        ""name"": ""__TEXT_EXEC.__text"",
        ""protection"": ""r-x"",
        ""size"": 78788
    },
...

the Kernel.base property returns a pointer to the base of the kernel in memory (intended as the address of its __TEXT segment).","nice, only doubt: g_strlcpy assumes the src string is nul terminated, which isn't the case here (it can use all the 16 bytes reserved for that field), from the docs:
src must be nul-terminated; dest_size is the buffer size, not the number of bytes to copy.

but yeah in this case the missing nul happens only at the end of dest, so probably it works anyways, though. i'll give it a try!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,296,2018-09-03T15:33:01Z,2018-09-06T18:08:00Z,2018-09-06T18:08:09Z,CLOSED,False,1834,84,16,https://github.com/mrmacete,More kernel improvements,5,[],https://github.com/frida/frida-gum/pull/296,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/296#issuecomment-418557278,"add scan, enumerateModules, enumerateModuleRanges
add kernel base getter
fix overflow on section / segment names

this works on 64-bit devices, tested on versions from iOS 9.0 to iOS 11.3.
Added interfaces
Kernel.scan() / Kernel.scanSync() work exactly like their Memory counterparts, supporting bit masks too.
Kernel.enumerateModules() / Kernel.enumerateModulesSync() lists all the KEXTs, and the main kernel module (called ""Kernel""), example:
[iPhone::SystemSession]-> Kernel.enumerateModulesSync()
[
    {
        ""base"": ""0xfffffff016604000"",
        ""name"": ""Kernel"",
        ""path"": null,
        ""size"": 31886248
    },
    {
        ""base"": ""0xfffffff0152bc940"",
        ""name"": ""com.apple.driver.AppleEffaceableStorage"",
        ""path"": null,
        ""size"": 28550
    },
    {
        ""base"": ""0xfffffff015272dc0"",
        ""name"": ""com.apple.driver.AppleMultitouchSPI"",
        ""path"": null,
        ""size"": 111560
    },
...

Kernel.enumerateModuleRanges() / Kernel.enumerateModuleRangesSync() list sections of a module by name (taken by the previous call). The semantic is the same of Module.enumerateRanges() Example:
[iPhone::SystemSession]-> Kernel.enumerateModuleRangesSync('com.apple.driver.AppleMultitouchSPI', '---')
[
    {
        ""address"": ""0xfffffff0152733c8"",
        ""name"": ""__TEXT.__const"",
        ""protection"": ""r--"",
        ""size"": 288
    },
    {
        ""address"": ""0xfffffff0152734e8"",
        ""name"": ""__TEXT.__cstring"",
        ""protection"": ""r--"",
        ""size"": 14675
    },
    {
        ""address"": ""0xfffffff015276e3b"",
        ""name"": ""__TEXT.__os_log"",
        ""protection"": ""r--"",
        ""size"": 1577
    },
    {
        ""address"": ""0xfffffff015a44000"",
        ""name"": ""__TEXT_EXEC.__text"",
        ""protection"": ""r-x"",
        ""size"": 78788
    },
...

the Kernel.base property returns a pointer to the base of the kernel in memory (intended as the address of its __TEXT segment).","Ooh good point! The only drawback with that is that it assumes that the destination buffer is exactly n + 1, and that isn't obvious, so I'd say the current code is clearer.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,296,2018-09-03T15:33:01Z,2018-09-06T18:08:00Z,2018-09-06T18:08:09Z,CLOSED,False,1834,84,16,https://github.com/mrmacete,More kernel improvements,5,[],https://github.com/frida/frida-gum/pull/296,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/296#issuecomment-419189450,"add scan, enumerateModules, enumerateModuleRanges
add kernel base getter
fix overflow on section / segment names

this works on 64-bit devices, tested on versions from iOS 9.0 to iOS 11.3.
Added interfaces
Kernel.scan() / Kernel.scanSync() work exactly like their Memory counterparts, supporting bit masks too.
Kernel.enumerateModules() / Kernel.enumerateModulesSync() lists all the KEXTs, and the main kernel module (called ""Kernel""), example:
[iPhone::SystemSession]-> Kernel.enumerateModulesSync()
[
    {
        ""base"": ""0xfffffff016604000"",
        ""name"": ""Kernel"",
        ""path"": null,
        ""size"": 31886248
    },
    {
        ""base"": ""0xfffffff0152bc940"",
        ""name"": ""com.apple.driver.AppleEffaceableStorage"",
        ""path"": null,
        ""size"": 28550
    },
    {
        ""base"": ""0xfffffff015272dc0"",
        ""name"": ""com.apple.driver.AppleMultitouchSPI"",
        ""path"": null,
        ""size"": 111560
    },
...

Kernel.enumerateModuleRanges() / Kernel.enumerateModuleRangesSync() list sections of a module by name (taken by the previous call). The semantic is the same of Module.enumerateRanges() Example:
[iPhone::SystemSession]-> Kernel.enumerateModuleRangesSync('com.apple.driver.AppleMultitouchSPI', '---')
[
    {
        ""address"": ""0xfffffff0152733c8"",
        ""name"": ""__TEXT.__const"",
        ""protection"": ""r--"",
        ""size"": 288
    },
    {
        ""address"": ""0xfffffff0152734e8"",
        ""name"": ""__TEXT.__cstring"",
        ""protection"": ""r--"",
        ""size"": 14675
    },
    {
        ""address"": ""0xfffffff015276e3b"",
        ""name"": ""__TEXT.__os_log"",
        ""protection"": ""r--"",
        ""size"": 1577
    },
    {
        ""address"": ""0xfffffff015a44000"",
        ""name"": ""__TEXT_EXEC.__text"",
        ""protection"": ""r-x"",
        ""size"": 78788
    },
...

the Kernel.base property returns a pointer to the base of the kernel in memory (intended as the address of its __TEXT segment).","Merged, thanks!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,297,2018-09-04T09:20:13Z,2018-09-04T16:21:00Z,2018-09-04T16:21:41Z,MERGED,True,2,3,1,https://github.com/cbayet,Fix Linux module enumeration assumption about executable ELF headers,1,[],https://github.com/frida/frida-gum/pull/297,https://github.com/cbayet,1,https://github.com/frida/frida-gum/pull/297,"Bugfix for the second issue already reported in frida/frida-core#208.
We're just removing the check of the executable permission on the section.
Thanks for pointing me the code !","Bugfix for the second issue already reported in frida/frida-core#208.
We're just removing the check of the executable permission on the section.
Thanks for pointing me the code !",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,297,2018-09-04T09:20:13Z,2018-09-04T16:21:00Z,2018-09-04T16:21:41Z,MERGED,True,2,3,1,https://github.com/cbayet,Fix Linux module enumeration assumption about executable ELF headers,1,[],https://github.com/frida/frida-gum/pull/297,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/297#issuecomment-418430244,"Bugfix for the second issue already reported in frida/frida-core#208.
We're just removing the check of the executable permission on the section.
Thanks for pointing me the code !",Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,298,2018-09-05T16:20:32Z,2018-09-05T16:51:15Z,2018-09-05T16:51:15Z,MERGED,True,10,10,1,https://github.com/hexploitable,ARM64 relocator x16 to x18 migration,1,[],https://github.com/frida/frida-gum/pull/298,https://github.com/hexploitable,1,https://github.com/frida/frida-gum/pull/298,"Modified the arm64 relocator to use x18 instead of x16 since x18 is actually unreserved.
x16 is used for supervisor calls so when we clobber it we can cause applications to crash.
E.g. using interceptor with the address of an svc instruction will clobber the syscall value held in x16.
@oleavr this works, have tried and tested it and I can now see the values in x18 instead, also x16 remains unclobbered. I'm not sure if all of the replacements were necessary, i'll let you comment since you're the brains üòÑ.
As discussed previously, there is definitely a more elegant way to preserve state without clobbering registers but this works for now. I think x18 is definitely most suitable for iOS at least.","Modified the arm64 relocator to use x18 instead of x16 since x18 is actually unreserved.
x16 is used for supervisor calls so when we clobber it we can cause applications to crash.
E.g. using interceptor with the address of an svc instruction will clobber the syscall value held in x16.
@oleavr this works, have tried and tested it and I can now see the values in x18 instead, also x16 remains unclobbered. I'm not sure if all of the replacements were necessary, i'll let you comment since you're the brains üòÑ.
As discussed previously, there is definitely a more elegant way to preserve state without clobbering registers but this works for now. I think x18 is definitely most suitable for iOS at least.",True,{'THUMBS_UP': ['https://github.com/GeekMasher']}
frida/frida-gum,https://github.com/frida/frida-gum,298,2018-09-05T16:20:32Z,2018-09-05T16:51:15Z,2018-09-05T16:51:15Z,MERGED,True,10,10,1,https://github.com/hexploitable,ARM64 relocator x16 to x18 migration,1,[],https://github.com/frida/frida-gum/pull/298,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/298#issuecomment-418801147,"Modified the arm64 relocator to use x18 instead of x16 since x18 is actually unreserved.
x16 is used for supervisor calls so when we clobber it we can cause applications to crash.
E.g. using interceptor with the address of an svc instruction will clobber the syscall value held in x16.
@oleavr this works, have tried and tested it and I can now see the values in x18 instead, also x16 remains unclobbered. I'm not sure if all of the replacements were necessary, i'll let you comment since you're the brains üòÑ.
As discussed previously, there is definitely a more elegant way to preserve state without clobbering registers but this works for now. I think x18 is definitely most suitable for iOS at least.","Thanks, let's move to X18! üëç",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,302,2018-09-25T14:22:01Z,2018-09-25T14:27:57Z,2018-09-25T14:29:19Z,MERGED,True,1,1,1,https://github.com/leonjza,Fix type definition for ApiResolver's constructor,1,[],https://github.com/frida/frida-gum/pull/302,https://github.com/leonjza,1,https://github.com/frida/frida-gum/pull/302,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,302,2018-09-25T14:22:01Z,2018-09-25T14:27:57Z,2018-09-25T14:29:19Z,MERGED,True,1,1,1,https://github.com/leonjza,Fix type definition for ApiResolver's constructor,1,[],https://github.com/frida/frida-gum/pull/302,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/302#issuecomment-424365666,,Thanks! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,302,2018-09-25T14:22:01Z,2018-09-25T14:27:57Z,2018-09-25T14:29:19Z,MERGED,True,1,1,1,https://github.com/leonjza,Fix type definition for ApiResolver's constructor,1,[],https://github.com/frida/frida-gum/pull/302,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/302#issuecomment-424366279,,frida-gum-types@2.0.2,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,303,2018-09-28T20:16:00Z,2018-09-29T20:04:19Z,2018-09-29T20:04:19Z,MERGED,True,1,1,1,https://github.com/leonjza,Improve type definition for ApiResolver.enumerateMatches(),1,[],https://github.com/frida/frida-gum/pull/303,https://github.com/leonjza,1,https://github.com/frida/frida-gum/pull/303,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,303,2018-09-28T20:16:00Z,2018-09-29T20:04:19Z,2018-09-29T20:04:19Z,MERGED,True,1,1,1,https://github.com/leonjza,Improve type definition for ApiResolver.enumerateMatches(),1,[],https://github.com/frida/frida-gum/pull/303,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/303#issuecomment-425672053,,Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,304,2018-10-01T09:01:00Z,2018-10-01T16:23:02Z,2018-10-01T16:23:05Z,MERGED,True,5,5,1,https://github.com/leonjza,Fix type definition for Thread.backtrace(),2,[],https://github.com/frida/frida-gum/pull/304,https://github.com/leonjza,1,https://github.com/frida/frida-gum/pull/304,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,304,2018-10-01T09:01:00Z,2018-10-01T16:23:02Z,2018-10-01T16:23:05Z,MERGED,True,5,5,1,https://github.com/leonjza,Fix type definition for Thread.backtrace(),2,[],https://github.com/frida/frida-gum/pull/304,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/304#issuecomment-425943149,,Thanks! How about also adding the enum while at it?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,305,2018-10-22T23:16:31Z,2018-10-23T00:01:58Z,2018-10-23T00:02:27Z,MERGED,True,147,48,10,https://github.com/oleavr,Add GumJS locking API and rework locking,1,[],https://github.com/frida/frida-gum/pull/305,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/305,"Provide a way to run some code with a ScriptBackend's lock held,
and a way to check if the lock is currently held.
Consolidate Duktape locking to one lock like on V8.
Fix V8 unlock logic when an exception occurs.","Provide a way to run some code with a ScriptBackend's lock held,
and a way to check if the lock is currently held.
Consolidate Duktape locking to one lock like on V8.
Fix V8 unlock logic when an exception occurs.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,307,2018-11-05T14:11:58Z,2018-11-05T17:00:52Z,2018-11-05T20:33:27Z,MERGED,True,115,0,12,https://github.com/Ayrx,Add Stalker.flush(),4,[],https://github.com/frida/frida-gum/pull/307,https://github.com/Ayrx,1,https://github.com/frida/frida-gum/pull/307,"This PR adds a Stalker.flush() method that drains the queue.
Ref frida/frida-core#218.","This PR adds a Stalker.flush() method that drains the queue.
Ref frida/frida-core#218.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,307,2018-11-05T14:11:58Z,2018-11-05T17:00:52Z,2018-11-05T20:33:27Z,MERGED,True,115,0,12,https://github.com/Ayrx,Add Stalker.flush(),4,[],https://github.com/frida/frida-gum/pull/307,https://github.com/Ayrx,2,https://github.com/frida/frida-gum/pull/307#issuecomment-435917068,"This PR adds a Stalker.flush() method that drains the queue.
Ref frida/frida-core#218.",@oleavr That should be all the changes resolved.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,307,2018-11-05T14:11:58Z,2018-11-05T17:00:52Z,2018-11-05T20:33:27Z,MERGED,True,115,0,12,https://github.com/Ayrx,Add Stalker.flush(),4,[],https://github.com/frida/frida-gum/pull/307,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/307#issuecomment-436024902,"This PR adds a Stalker.flush() method that drains the queue.
Ref frida/frida-core#218.","Was about to do a release, so I just wired it up in frida-core. Frida 12.2.21 is currently being released with these improvements. Cheers!",True,{'HEART': ['https://github.com/Ayrx']}
frida/frida-gum,https://github.com/frida/frida-gum,308,2018-11-08T14:38:37Z,2018-11-08T14:40:21Z,2018-11-08T14:40:23Z,MERGED,True,825,311,10,https://github.com/oleavr,Improve the Darwin APIs,5,[],https://github.com/frida/frida-gum/pull/308,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/308,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,309,2018-11-11T01:33:51Z,2018-11-11T22:46:44Z,2018-11-12T14:26:18Z,MERGED,True,2,2,1,https://github.com/dweinstein,Improve RPC errors with custom fields,1,[],https://github.com/frida/frida-gum/pull/309,https://github.com/dweinstein,1,https://github.com/frida/frida-gum/pull/309,Related to frida/frida#696,Related to frida/frida#696,True,{'HOORAY': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,309,2018-11-11T01:33:51Z,2018-11-11T22:46:44Z,2018-11-12T14:26:18Z,MERGED,True,2,2,1,https://github.com/dweinstein,Improve RPC errors with custom fields,1,[],https://github.com/frida/frida-gum/pull/309,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/309#issuecomment-437712533,Related to frida/frida#696,Thanks! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/FrankSpierings,1,https://github.com/frida/frida-gum/pull/315,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/315#issuecomment-444969661,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,Yay! Did you test this final version?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/FrankSpierings,3,https://github.com/frida/frida-gum/pull/315#issuecomment-444969975,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,"No will

Yay! Did you test this final version?

No I will, but It might be tomorrow.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/315#issuecomment-444975592,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/FrankSpierings,5,https://github.com/frida/frida-gum/pull/315#issuecomment-444981769,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,"I managed to compile it into the new version. I've tested it inside an Android (ARM 32bits) and it seems to work correctly on console.log(hexdump(new ArrayBuffer(64))) and console.log(hexdump(Module.findExportByName(""libc.so"", ""open""))).
Any way to inject the gum scripts without a full recompilation of the gadget?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/315#issuecomment-445037080,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,"I managed to compile it into the new version. I've tested it inside an Android ‚Ä¶

Cool, thanks!

Any way to inject the gum scripts without a full recompilation of the gadget?

No, but you can assign a new function to global.hexdump to replace the builtin version with a local one, e.g. hacked on using a frida-compile-based agent.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/oleavr,7,https://github.com/frida/frida-gum/pull/315#issuecomment-445037747,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,"One last thing before merging ‚Äì could you squash your commits and then fix the author so it's exactly like this: Full Name <foo@bar.com>. E.g. first squash then git commit --amend --author=""Full Name <foo@bar.com>"".",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/FrankSpierings,8,https://github.com/frida/frida-gum/pull/315#issuecomment-445183466,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,"I hope that I have done what you asked, but I consider myself a git noob once you start talking about squashing etc. So it seems fine to me, but I might have created something horrible, please check my work ;)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,315,2018-12-06T13:18:42Z,2018-12-10T18:32:03Z,2018-12-10T18:34:01Z,MERGED,True,3,1,1,https://github.com/FrankSpierings,Show source addresses in hexdump() from memory,1,[],https://github.com/frida/frida-gum/pull/315,https://github.com/oleavr,9,https://github.com/frida/frida-gum/pull/315#issuecomment-445922471,I have only tested this on 32bits. So using the NativePointer.toInt32() works. Not sure how this should work on 64-bits adressing. I'm also not sure why NativePointer will only return signed integers. Isn't it more logical to return an unsigned int?,Thanks! :) I tweaked the commit message style for consistency with the style we use.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,316,2018-12-06T20:03:17Z,2018-12-10T23:30:03Z,2018-12-13T11:42:51Z,CLOSED,False,46,0,3,https://github.com/FrankSpierings,Add NativePointer#toUInt32(),1,[],https://github.com/frida/frida-gum/pull/316,https://github.com/FrankSpierings,1,https://github.com/frida/frida-gum/pull/316,"If it turns out that I have done this correctly, I might do the UInt64 (and Int64) as well ;)","If it turns out that I have done this correctly, I might do the UInt64 (and Int64) as well ;)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,316,2018-12-06T20:03:17Z,2018-12-10T23:30:03Z,2018-12-13T11:42:51Z,CLOSED,False,46,0,3,https://github.com/FrankSpierings,Add NativePointer#toUInt32(),1,[],https://github.com/frida/frida-gum/pull/316,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/316#issuecomment-445038142,"If it turns out that I have done this correctly, I might do the UInt64 (and Int64) as well ;)","Nice :)
Only thing before merging ‚Äì could you squash the commits and fix the author metadata so it's exactly like this: Full Name <foo@bar.com>. E.g. first squash then git commit --amend --author=""Full Name <foo@bar.com>.
To avoid having to do this again, do something like:
$ git config --global user.name ""Full Name""
$ git config --global user.email ""foo@bar.com""",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,316,2018-12-06T20:03:17Z,2018-12-10T23:30:03Z,2018-12-13T11:42:51Z,CLOSED,False,46,0,3,https://github.com/FrankSpierings,Add NativePointer#toUInt32(),1,[],https://github.com/frida/frida-gum/pull/316,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/316#issuecomment-445039010,"If it turns out that I have done this correctly, I might do the UInt64 (and Int64) as well ;)","Btw, this also needs a test. E.g. by copy-pasting this one and adjusting. To run just that test, do ../build/tmp-macos-x86_64/frida-gum/tests/gum-tests -p /GumJS/Script/native_pointer_provides_arithmetic_operations#DUK. (Replacing DUK with V8 to test it on V8.)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,316,2018-12-06T20:03:17Z,2018-12-10T23:30:03Z,2018-12-13T11:42:51Z,CLOSED,False,46,0,3,https://github.com/FrankSpierings,Add NativePointer#toUInt32(),1,[],https://github.com/frida/frida-gum/pull/316,https://github.com/FrankSpierings,4,https://github.com/frida/frida-gum/pull/316#issuecomment-445263782,"If it turns out that I have done this correctly, I might do the UInt64 (and Int64) as well ;)",I believe I have done what you have asked here as well (including running the tests). Please check my work.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,316,2018-12-06T20:03:17Z,2018-12-10T23:30:03Z,2018-12-13T11:42:51Z,CLOSED,False,46,0,3,https://github.com/FrankSpierings,Add NativePointer#toUInt32(),1,[],https://github.com/frida/frida-gum/pull/316,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/316#issuecomment-446012657,"If it turns out that I have done this correctly, I might do the UInt64 (and Int64) as well ;)","I actually need this functionality myself right now, so I'll go ahead and write the test for you so we can get this landed. üòä",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,316,2018-12-06T20:03:17Z,2018-12-10T23:30:03Z,2018-12-13T11:42:51Z,CLOSED,False,46,0,3,https://github.com/FrankSpierings,Add NativePointer#toUInt32(),1,[],https://github.com/frida/frida-gum/pull/316,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/316#issuecomment-446014530,"If it turns out that I have done this correctly, I might do the UInt64 (and Int64) as well ;)",Landed as 5027e19. Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,317,2018-12-07T16:49:15Z,2018-12-10T18:09:14Z,2018-12-10T18:09:45Z,MERGED,True,11,1,2,https://github.com/mrmacete,Release JS lock while calling gum_module_ensure_initialized(),1,[],https://github.com/frida/frida-gum/pull/317,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/317,"Because internally it‚Äôs calling dlopen which in turn can lock on dyld lock, causing a deadlock.
Example deadlock stack trace excerpt:
Thread 6
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   frida-agent.dylib               _gum_duk_scope_enter (gumdukcore.c:1138)
3   frida-agent.dylib               gum_duk_invocation_listener_on_leave (gumdukinterceptor.c:697)
4   frida-agent.dylib               _gum_function_context_end_invocation (guminterceptor.c:1360)
5   libsystem_kernel.dylib          write
6   MyApp                           0x429e68
...

Thread 7
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   libdyld.dylib                   LockHelper::LockHelper()
3   libdyld.dylib                   dladdr
4   MyApp                           0x45336c

Thread 8
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   libdyld.dylib                   dyldGlobalLockAcquire()
3   dyld                            dlopen
4   libdyld.dylib                   dlopen
5   frida-agent.dylib               gum_module_ensure_initialized (gumprocess-darwin.c:596)
6   frida-agent.dylib               gumjs_module_ensure_initialized (gumdukmodule.c:125)
7   frida-agent.dylib               duk__handle_call_raw (duk_js_call.c:0)
...

Thread 10
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   frida-agent.dylib               _gum_duk_scope_enter (gumdukcore.c:1138)
3   frida-agent.dylib               gum_duk_invocation_listener_on_leave (gumdukinterceptor.c:697)
4   frida-agent.dylib               _gum_function_context_end_invocation (guminterceptor.c:1360)
5   libsystem_kernel.dylib          write
6   MyApp                            0x411178
7   dyld                            dyld::registerAddCallback(void (*)(mach_header const*, long))
8   libdyld.dylib                   _dyld_register_func_for_add_image
9   ???                             0x10836cb0c","Because internally it‚Äôs calling dlopen which in turn can lock on dyld lock, causing a deadlock.
Example deadlock stack trace excerpt:
Thread 6
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   frida-agent.dylib               _gum_duk_scope_enter (gumdukcore.c:1138)
3   frida-agent.dylib               gum_duk_invocation_listener_on_leave (gumdukinterceptor.c:697)
4   frida-agent.dylib               _gum_function_context_end_invocation (guminterceptor.c:1360)
5   libsystem_kernel.dylib          write
6   MyApp                           0x429e68
...

Thread 7
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   libdyld.dylib                   LockHelper::LockHelper()
3   libdyld.dylib                   dladdr
4   MyApp                           0x45336c

Thread 8
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   libdyld.dylib                   dyldGlobalLockAcquire()
3   dyld                            dlopen
4   libdyld.dylib                   dlopen
5   frida-agent.dylib               gum_module_ensure_initialized (gumprocess-darwin.c:596)
6   frida-agent.dylib               gumjs_module_ensure_initialized (gumdukmodule.c:125)
7   frida-agent.dylib               duk__handle_call_raw (duk_js_call.c:0)
...

Thread 10
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   frida-agent.dylib               _gum_duk_scope_enter (gumdukcore.c:1138)
3   frida-agent.dylib               gum_duk_invocation_listener_on_leave (gumdukinterceptor.c:697)
4   frida-agent.dylib               _gum_function_context_end_invocation (guminterceptor.c:1360)
5   libsystem_kernel.dylib          write
6   MyApp                            0x411178
7   dyld                            dyld::registerAddCallback(void (*)(mach_header const*, long))
8   libdyld.dylib                   _dyld_register_func_for_add_image
9   ???                             0x10836cb0c",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,317,2018-12-07T16:49:15Z,2018-12-10T18:09:14Z,2018-12-10T18:09:45Z,MERGED,True,11,1,2,https://github.com/mrmacete,Release JS lock while calling gum_module_ensure_initialized(),1,[],https://github.com/frida/frida-gum/pull/317,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/317#issuecomment-445913599,"Because internally it‚Äôs calling dlopen which in turn can lock on dyld lock, causing a deadlock.
Example deadlock stack trace excerpt:
Thread 6
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   frida-agent.dylib               _gum_duk_scope_enter (gumdukcore.c:1138)
3   frida-agent.dylib               gum_duk_invocation_listener_on_leave (gumdukinterceptor.c:697)
4   frida-agent.dylib               _gum_function_context_end_invocation (guminterceptor.c:1360)
5   libsystem_kernel.dylib          write
6   MyApp                           0x429e68
...

Thread 7
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   libdyld.dylib                   LockHelper::LockHelper()
3   libdyld.dylib                   dladdr
4   MyApp                           0x45336c

Thread 8
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   libdyld.dylib                   dyldGlobalLockAcquire()
3   dyld                            dlopen
4   libdyld.dylib                   dlopen
5   frida-agent.dylib               gum_module_ensure_initialized (gumprocess-darwin.c:596)
6   frida-agent.dylib               gumjs_module_ensure_initialized (gumdukmodule.c:125)
7   frida-agent.dylib               duk__handle_call_raw (duk_js_call.c:0)
...

Thread 10
0   libsystem_pthread.dylib         _pthread_mutex_lock_wait
1   libsystem_pthread.dylib         _pthread_mutex_lock_slow$VARIANT$mp
2   frida-agent.dylib               _gum_duk_scope_enter (gumdukcore.c:1138)
3   frida-agent.dylib               gum_duk_invocation_listener_on_leave (gumdukinterceptor.c:697)
4   frida-agent.dylib               _gum_function_context_end_invocation (guminterceptor.c:1360)
5   libsystem_kernel.dylib          write
6   MyApp                            0x411178
7   dyld                            dyld::registerAddCallback(void (*)(mach_header const*, long))
8   libdyld.dylib                   _dyld_register_func_for_add_image
9   ???                             0x10836cb0c",Nice catch! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,318,2018-12-07T20:18:22Z,2018-12-10T18:13:10Z,2018-12-10T18:15:38Z,CLOSED,False,40,0,1,https://github.com/FrankSpierings,"Added a vmmap to Process object, which is similar to /proc/self/map or pwndbg's vmmap",1,[],https://github.com/frida/frida-gum/pull/318,https://github.com/FrankSpierings,1,https://github.com/frida/frida-gum/pull/318,"Not sure if you like the way I added the functionality, but I'm sure you will let me know ;)
Output example:
[Remote::ls]-> console.log(Process.vmmap())
0x0000000000400000  0x000000000041e000 [r-x]  0x0001e000  0x0 /bin/ls
0x000000000061d000  0x000000000061e000 [r--]  0x00001000  0x1d000 /bin/ls
0x000000000061e000  0x000000000061f000 [rw-]  0x00001000  0x1e000 /bin/ls
0x000000000061f000  0x0000000000620000 [rw-]  0x00001000
0x000000000084e000  0x000000000086f000 [rw-]  0x00021000
0x00007f1d1c000000  0x00007f1d1c021000 [rw-]  0x00021000
0x00007f1d1c021000  0x00007f1d20000000 [---]  0x03fdf000
0x00007f1d24000000  0x00007f1d24021000 [rw-]  0x00021000
0x00007f1d24021000  0x00007f1d28000000 [---]  0x03fdf000
0x00007f1d2a7fd000  0x00007f1d2a7fe000 [---]  0x00001000
0x00007f1d2a7fe000  0x00007f1d2affe000 [rw-]  0x00800000
0x00007f1d2affe000  0x00007f1d2afff000 [---]  0x00001000
0x00007f1d2afff000  0x00007f1d2b7ff000 [rw-]  0x00800000
0x00007f1d2b7ff000  0x00007f1d2b800000 [---]  0x00001000
0x00007f1d2b800000  0x00007f1d2c000000 [rw-]  0x00800000
0x00007f1d2c000000  0x00007f1d2c021000 [rw-]  0x00021000
0x00007f1d2c021000  0x00007f1d30000000 [---]  0x03fdf000
0x00007f1d300c8000  0x00007f1d300c9000 [---]  0x00001000
0x00007f1d300c9000  0x00007f1d308c9000 [rw-]  0x00800000
0x00007f1d308c9000  0x00007f1d309d1000 [r-x]  0x00108000  0x0 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d309d1000  0x00007f1d30bd0000 [---]  0x001ff000  0x108000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd0000  0x00007f1d30bd1000 [r--]  0x00001000  0x107000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd1000  0x00007f1d30bd2000 [rw-]  0x00001000  0x108000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd2000  0x00007f1d30be9000 [r-x]  0x00017000  0x0 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30be9000  0x00007f1d30de9000 [---]  0x00200000  0x17000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30de9000  0x00007f1d30dea000 [r--]  0x00001000  0x17000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30dea000  0x00007f1d30deb000 [rw-]  0x00001000  0x18000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30deb000  0x00007f1d30ded000 [rw-]  0x00002000
0x00007f1d30ded000  0x00007f1d30df4000 [r-x]  0x00007000  0x0 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30df4000  0x00007f1d30ff3000 [---]  0x001ff000  0x7000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30ff3000  0x00007f1d30ff4000 [r--]  0x00001000  0x6000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30ff4000  0x00007f1d30ff5000 [rw-]  0x00001000  0x7000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d325e8000  0x00007f1d32611000 [rw-]  0x00029000
0x00007f1d32611000  0x00007f1d32612000 [---]  0x00001000
0x00007f1d32612000  0x00007f1d32e12000 [rw-]  0x00800000
0x00007f1d32e12000  0x00007f1d32e2a000 [r-x]  0x00018000  0x0 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d32e2a000  0x00007f1d33029000 [---]  0x001ff000  0x18000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d33029000  0x00007f1d3302a000 [r--]  0x00001000  0x17000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d3302a000  0x00007f1d3302b000 [rw-]  0x00001000  0x18000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d3302b000  0x00007f1d3302f000 [rw-]  0x00004000
0x00007f1d3302f000  0x00007f1d33032000 [r-x]  0x00003000  0x0 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33032000  0x00007f1d33231000 [---]  0x001ff000  0x3000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33231000  0x00007f1d33232000 [r--]  0x00001000  0x2000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33232000  0x00007f1d33233000 [rw-]  0x00001000  0x3000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33233000  0x00007f1d332a1000 [r-x]  0x0006e000  0x0 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d332a1000  0x00007f1d334a1000 [---]  0x00200000  0x6e000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a1000  0x00007f1d334a2000 [r--]  0x00001000  0x6e000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a2000  0x00007f1d334a3000 [rw-]  0x00001000  0x6f000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a3000  0x00007f1d334d8000 [r-x]  0x00035000  0x0 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334d8000  0x00007f1d334da000 [rwx]  0x00002000  0x35000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334da000  0x00007f1d334dd000 [r-x]  0x00003000  0x37000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334dd000  0x00007f1d334de000 [rwx]  0x00001000  0x3a000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334de000  0x00007f1d3356f000 [r-x]  0x00091000  0x3b000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d3356f000  0x00007f1d33570000 [rwx]  0x00001000  0xcc000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33570000  0x00007f1d33663000 [r-x]  0x000f3000  0xcd000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33663000  0x00007f1d33863000 [---]  0x00200000  0x1c0000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33863000  0x00007f1d33867000 [r--]  0x00004000  0x1c0000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33867000  0x00007f1d33869000 [rw-]  0x00002000  0x1c4000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33869000  0x00007f1d3386d000 [rw-]  0x00004000
0x00007f1d3386d000  0x00007f1d3388c000 [r-x]  0x0001f000  0x0 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d3388c000  0x00007f1d33a8b000 [---]  0x001ff000  0x1f000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8b000  0x00007f1d33a8c000 [r--]  0x00001000  0x1e000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8c000  0x00007f1d33a8d000 [rw-]  0x00001000  0x1f000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8d000  0x00007f1d33a8f000 [rw-]  0x00002000
0x00007f1d33a8f000  0x00007f1d33ab5000 [r-x]  0x00026000  0x0 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33c81000  0x00007f1d33c86000 [rw-]  0x00005000
0x00007f1d33ca9000  0x00007f1d33caa000 [r--]  0x00001000
0x00007f1d33caa000  0x00007f1d33cab000 [rw-]  0x00001000
0x00007f1d33caf000  0x00007f1d33cb0000 [r-x]  0x00001000
0x00007f1d33cb0000  0x00007f1d33cb1000 [rw-]  0x00001000
0x00007f1d33cb1000  0x00007f1d33cb2000 [---]  0x00001000
0x00007f1d33cb2000  0x00007f1d33cb4000 [rw-]  0x00002000
0x00007f1d33cb4000  0x00007f1d33cb5000 [r--]  0x00001000  0x25000 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33cb5000  0x00007f1d33cb6000 [rw-]  0x00001000  0x26000 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33cb6000  0x00007f1d33cb7000 [rw-]  0x00001000
0x00007ffe3921b000  0x00007ffe3923c000 [rw-]  0x00021000
0x00007ffe39281000  0x00007ffe39284000 [r--]  0x00003000
0x00007ffe39284000  0x00007ffe39286000 [r-x]  0x00002000
0xffffffffff600000  0xffffffffff601000 [r-x]  0x00001000","Not sure if you like the way I added the functionality, but I'm sure you will let me know ;)
Output example:
[Remote::ls]-> console.log(Process.vmmap())
0x0000000000400000  0x000000000041e000 [r-x]  0x0001e000  0x0 /bin/ls
0x000000000061d000  0x000000000061e000 [r--]  0x00001000  0x1d000 /bin/ls
0x000000000061e000  0x000000000061f000 [rw-]  0x00001000  0x1e000 /bin/ls
0x000000000061f000  0x0000000000620000 [rw-]  0x00001000
0x000000000084e000  0x000000000086f000 [rw-]  0x00021000
0x00007f1d1c000000  0x00007f1d1c021000 [rw-]  0x00021000
0x00007f1d1c021000  0x00007f1d20000000 [---]  0x03fdf000
0x00007f1d24000000  0x00007f1d24021000 [rw-]  0x00021000
0x00007f1d24021000  0x00007f1d28000000 [---]  0x03fdf000
0x00007f1d2a7fd000  0x00007f1d2a7fe000 [---]  0x00001000
0x00007f1d2a7fe000  0x00007f1d2affe000 [rw-]  0x00800000
0x00007f1d2affe000  0x00007f1d2afff000 [---]  0x00001000
0x00007f1d2afff000  0x00007f1d2b7ff000 [rw-]  0x00800000
0x00007f1d2b7ff000  0x00007f1d2b800000 [---]  0x00001000
0x00007f1d2b800000  0x00007f1d2c000000 [rw-]  0x00800000
0x00007f1d2c000000  0x00007f1d2c021000 [rw-]  0x00021000
0x00007f1d2c021000  0x00007f1d30000000 [---]  0x03fdf000
0x00007f1d300c8000  0x00007f1d300c9000 [---]  0x00001000
0x00007f1d300c9000  0x00007f1d308c9000 [rw-]  0x00800000
0x00007f1d308c9000  0x00007f1d309d1000 [r-x]  0x00108000  0x0 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d309d1000  0x00007f1d30bd0000 [---]  0x001ff000  0x108000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd0000  0x00007f1d30bd1000 [r--]  0x00001000  0x107000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd1000  0x00007f1d30bd2000 [rw-]  0x00001000  0x108000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd2000  0x00007f1d30be9000 [r-x]  0x00017000  0x0 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30be9000  0x00007f1d30de9000 [---]  0x00200000  0x17000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30de9000  0x00007f1d30dea000 [r--]  0x00001000  0x17000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30dea000  0x00007f1d30deb000 [rw-]  0x00001000  0x18000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30deb000  0x00007f1d30ded000 [rw-]  0x00002000
0x00007f1d30ded000  0x00007f1d30df4000 [r-x]  0x00007000  0x0 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30df4000  0x00007f1d30ff3000 [---]  0x001ff000  0x7000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30ff3000  0x00007f1d30ff4000 [r--]  0x00001000  0x6000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30ff4000  0x00007f1d30ff5000 [rw-]  0x00001000  0x7000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d325e8000  0x00007f1d32611000 [rw-]  0x00029000
0x00007f1d32611000  0x00007f1d32612000 [---]  0x00001000
0x00007f1d32612000  0x00007f1d32e12000 [rw-]  0x00800000
0x00007f1d32e12000  0x00007f1d32e2a000 [r-x]  0x00018000  0x0 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d32e2a000  0x00007f1d33029000 [---]  0x001ff000  0x18000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d33029000  0x00007f1d3302a000 [r--]  0x00001000  0x17000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d3302a000  0x00007f1d3302b000 [rw-]  0x00001000  0x18000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d3302b000  0x00007f1d3302f000 [rw-]  0x00004000
0x00007f1d3302f000  0x00007f1d33032000 [r-x]  0x00003000  0x0 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33032000  0x00007f1d33231000 [---]  0x001ff000  0x3000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33231000  0x00007f1d33232000 [r--]  0x00001000  0x2000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33232000  0x00007f1d33233000 [rw-]  0x00001000  0x3000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33233000  0x00007f1d332a1000 [r-x]  0x0006e000  0x0 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d332a1000  0x00007f1d334a1000 [---]  0x00200000  0x6e000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a1000  0x00007f1d334a2000 [r--]  0x00001000  0x6e000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a2000  0x00007f1d334a3000 [rw-]  0x00001000  0x6f000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a3000  0x00007f1d334d8000 [r-x]  0x00035000  0x0 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334d8000  0x00007f1d334da000 [rwx]  0x00002000  0x35000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334da000  0x00007f1d334dd000 [r-x]  0x00003000  0x37000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334dd000  0x00007f1d334de000 [rwx]  0x00001000  0x3a000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334de000  0x00007f1d3356f000 [r-x]  0x00091000  0x3b000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d3356f000  0x00007f1d33570000 [rwx]  0x00001000  0xcc000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33570000  0x00007f1d33663000 [r-x]  0x000f3000  0xcd000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33663000  0x00007f1d33863000 [---]  0x00200000  0x1c0000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33863000  0x00007f1d33867000 [r--]  0x00004000  0x1c0000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33867000  0x00007f1d33869000 [rw-]  0x00002000  0x1c4000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33869000  0x00007f1d3386d000 [rw-]  0x00004000
0x00007f1d3386d000  0x00007f1d3388c000 [r-x]  0x0001f000  0x0 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d3388c000  0x00007f1d33a8b000 [---]  0x001ff000  0x1f000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8b000  0x00007f1d33a8c000 [r--]  0x00001000  0x1e000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8c000  0x00007f1d33a8d000 [rw-]  0x00001000  0x1f000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8d000  0x00007f1d33a8f000 [rw-]  0x00002000
0x00007f1d33a8f000  0x00007f1d33ab5000 [r-x]  0x00026000  0x0 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33c81000  0x00007f1d33c86000 [rw-]  0x00005000
0x00007f1d33ca9000  0x00007f1d33caa000 [r--]  0x00001000
0x00007f1d33caa000  0x00007f1d33cab000 [rw-]  0x00001000
0x00007f1d33caf000  0x00007f1d33cb0000 [r-x]  0x00001000
0x00007f1d33cb0000  0x00007f1d33cb1000 [rw-]  0x00001000
0x00007f1d33cb1000  0x00007f1d33cb2000 [---]  0x00001000
0x00007f1d33cb2000  0x00007f1d33cb4000 [rw-]  0x00002000
0x00007f1d33cb4000  0x00007f1d33cb5000 [r--]  0x00001000  0x25000 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33cb5000  0x00007f1d33cb6000 [rw-]  0x00001000  0x26000 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33cb6000  0x00007f1d33cb7000 [rw-]  0x00001000
0x00007ffe3921b000  0x00007ffe3923c000 [rw-]  0x00021000
0x00007ffe39281000  0x00007ffe39284000 [r--]  0x00003000
0x00007ffe39284000  0x00007ffe39286000 [r-x]  0x00002000
0xffffffffff600000  0xffffffffff601000 [r-x]  0x00001000",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,318,2018-12-07T20:18:22Z,2018-12-10T18:13:10Z,2018-12-10T18:15:38Z,CLOSED,False,40,0,1,https://github.com/FrankSpierings,"Added a vmmap to Process object, which is similar to /proc/self/map or pwndbg's vmmap",1,[],https://github.com/frida/frida-gum/pull/318,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/318#issuecomment-445915457,"Not sure if you like the way I added the functionality, but I'm sure you will let me know ;)
Output example:
[Remote::ls]-> console.log(Process.vmmap())
0x0000000000400000  0x000000000041e000 [r-x]  0x0001e000  0x0 /bin/ls
0x000000000061d000  0x000000000061e000 [r--]  0x00001000  0x1d000 /bin/ls
0x000000000061e000  0x000000000061f000 [rw-]  0x00001000  0x1e000 /bin/ls
0x000000000061f000  0x0000000000620000 [rw-]  0x00001000
0x000000000084e000  0x000000000086f000 [rw-]  0x00021000
0x00007f1d1c000000  0x00007f1d1c021000 [rw-]  0x00021000
0x00007f1d1c021000  0x00007f1d20000000 [---]  0x03fdf000
0x00007f1d24000000  0x00007f1d24021000 [rw-]  0x00021000
0x00007f1d24021000  0x00007f1d28000000 [---]  0x03fdf000
0x00007f1d2a7fd000  0x00007f1d2a7fe000 [---]  0x00001000
0x00007f1d2a7fe000  0x00007f1d2affe000 [rw-]  0x00800000
0x00007f1d2affe000  0x00007f1d2afff000 [---]  0x00001000
0x00007f1d2afff000  0x00007f1d2b7ff000 [rw-]  0x00800000
0x00007f1d2b7ff000  0x00007f1d2b800000 [---]  0x00001000
0x00007f1d2b800000  0x00007f1d2c000000 [rw-]  0x00800000
0x00007f1d2c000000  0x00007f1d2c021000 [rw-]  0x00021000
0x00007f1d2c021000  0x00007f1d30000000 [---]  0x03fdf000
0x00007f1d300c8000  0x00007f1d300c9000 [---]  0x00001000
0x00007f1d300c9000  0x00007f1d308c9000 [rw-]  0x00800000
0x00007f1d308c9000  0x00007f1d309d1000 [r-x]  0x00108000  0x0 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d309d1000  0x00007f1d30bd0000 [---]  0x001ff000  0x108000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd0000  0x00007f1d30bd1000 [r--]  0x00001000  0x107000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd1000  0x00007f1d30bd2000 [rw-]  0x00001000  0x108000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd2000  0x00007f1d30be9000 [r-x]  0x00017000  0x0 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30be9000  0x00007f1d30de9000 [---]  0x00200000  0x17000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30de9000  0x00007f1d30dea000 [r--]  0x00001000  0x17000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30dea000  0x00007f1d30deb000 [rw-]  0x00001000  0x18000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30deb000  0x00007f1d30ded000 [rw-]  0x00002000
0x00007f1d30ded000  0x00007f1d30df4000 [r-x]  0x00007000  0x0 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30df4000  0x00007f1d30ff3000 [---]  0x001ff000  0x7000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30ff3000  0x00007f1d30ff4000 [r--]  0x00001000  0x6000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30ff4000  0x00007f1d30ff5000 [rw-]  0x00001000  0x7000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d325e8000  0x00007f1d32611000 [rw-]  0x00029000
0x00007f1d32611000  0x00007f1d32612000 [---]  0x00001000
0x00007f1d32612000  0x00007f1d32e12000 [rw-]  0x00800000
0x00007f1d32e12000  0x00007f1d32e2a000 [r-x]  0x00018000  0x0 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d32e2a000  0x00007f1d33029000 [---]  0x001ff000  0x18000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d33029000  0x00007f1d3302a000 [r--]  0x00001000  0x17000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d3302a000  0x00007f1d3302b000 [rw-]  0x00001000  0x18000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d3302b000  0x00007f1d3302f000 [rw-]  0x00004000
0x00007f1d3302f000  0x00007f1d33032000 [r-x]  0x00003000  0x0 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33032000  0x00007f1d33231000 [---]  0x001ff000  0x3000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33231000  0x00007f1d33232000 [r--]  0x00001000  0x2000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33232000  0x00007f1d33233000 [rw-]  0x00001000  0x3000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33233000  0x00007f1d332a1000 [r-x]  0x0006e000  0x0 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d332a1000  0x00007f1d334a1000 [---]  0x00200000  0x6e000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a1000  0x00007f1d334a2000 [r--]  0x00001000  0x6e000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a2000  0x00007f1d334a3000 [rw-]  0x00001000  0x6f000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a3000  0x00007f1d334d8000 [r-x]  0x00035000  0x0 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334d8000  0x00007f1d334da000 [rwx]  0x00002000  0x35000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334da000  0x00007f1d334dd000 [r-x]  0x00003000  0x37000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334dd000  0x00007f1d334de000 [rwx]  0x00001000  0x3a000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334de000  0x00007f1d3356f000 [r-x]  0x00091000  0x3b000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d3356f000  0x00007f1d33570000 [rwx]  0x00001000  0xcc000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33570000  0x00007f1d33663000 [r-x]  0x000f3000  0xcd000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33663000  0x00007f1d33863000 [---]  0x00200000  0x1c0000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33863000  0x00007f1d33867000 [r--]  0x00004000  0x1c0000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33867000  0x00007f1d33869000 [rw-]  0x00002000  0x1c4000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33869000  0x00007f1d3386d000 [rw-]  0x00004000
0x00007f1d3386d000  0x00007f1d3388c000 [r-x]  0x0001f000  0x0 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d3388c000  0x00007f1d33a8b000 [---]  0x001ff000  0x1f000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8b000  0x00007f1d33a8c000 [r--]  0x00001000  0x1e000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8c000  0x00007f1d33a8d000 [rw-]  0x00001000  0x1f000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8d000  0x00007f1d33a8f000 [rw-]  0x00002000
0x00007f1d33a8f000  0x00007f1d33ab5000 [r-x]  0x00026000  0x0 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33c81000  0x00007f1d33c86000 [rw-]  0x00005000
0x00007f1d33ca9000  0x00007f1d33caa000 [r--]  0x00001000
0x00007f1d33caa000  0x00007f1d33cab000 [rw-]  0x00001000
0x00007f1d33caf000  0x00007f1d33cb0000 [r-x]  0x00001000
0x00007f1d33cb0000  0x00007f1d33cb1000 [rw-]  0x00001000
0x00007f1d33cb1000  0x00007f1d33cb2000 [---]  0x00001000
0x00007f1d33cb2000  0x00007f1d33cb4000 [rw-]  0x00002000
0x00007f1d33cb4000  0x00007f1d33cb5000 [r--]  0x00001000  0x25000 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33cb5000  0x00007f1d33cb6000 [rw-]  0x00001000  0x26000 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33cb6000  0x00007f1d33cb7000 [rw-]  0x00001000
0x00007ffe3921b000  0x00007ffe3923c000 [rw-]  0x00021000
0x00007ffe39281000  0x00007ffe39284000 [r--]  0x00003000
0x00007ffe39284000  0x00007ffe39286000 [r-x]  0x00002000
0xffffffffff600000  0xffffffffff601000 [r-x]  0x00001000","I'm afraid this belongs in ""user-space"", i.e. modules in npm. We currently have some and it's easy to consume them through frida-compile. I've created a boilerplate repo showing how to use frida-compile here. Cheers!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,318,2018-12-07T20:18:22Z,2018-12-10T18:13:10Z,2018-12-10T18:15:38Z,CLOSED,False,40,0,1,https://github.com/FrankSpierings,"Added a vmmap to Process object, which is similar to /proc/self/map or pwndbg's vmmap",1,[],https://github.com/frida/frida-gum/pull/318,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/318#issuecomment-445916261,"Not sure if you like the way I added the functionality, but I'm sure you will let me know ;)
Output example:
[Remote::ls]-> console.log(Process.vmmap())
0x0000000000400000  0x000000000041e000 [r-x]  0x0001e000  0x0 /bin/ls
0x000000000061d000  0x000000000061e000 [r--]  0x00001000  0x1d000 /bin/ls
0x000000000061e000  0x000000000061f000 [rw-]  0x00001000  0x1e000 /bin/ls
0x000000000061f000  0x0000000000620000 [rw-]  0x00001000
0x000000000084e000  0x000000000086f000 [rw-]  0x00021000
0x00007f1d1c000000  0x00007f1d1c021000 [rw-]  0x00021000
0x00007f1d1c021000  0x00007f1d20000000 [---]  0x03fdf000
0x00007f1d24000000  0x00007f1d24021000 [rw-]  0x00021000
0x00007f1d24021000  0x00007f1d28000000 [---]  0x03fdf000
0x00007f1d2a7fd000  0x00007f1d2a7fe000 [---]  0x00001000
0x00007f1d2a7fe000  0x00007f1d2affe000 [rw-]  0x00800000
0x00007f1d2affe000  0x00007f1d2afff000 [---]  0x00001000
0x00007f1d2afff000  0x00007f1d2b7ff000 [rw-]  0x00800000
0x00007f1d2b7ff000  0x00007f1d2b800000 [---]  0x00001000
0x00007f1d2b800000  0x00007f1d2c000000 [rw-]  0x00800000
0x00007f1d2c000000  0x00007f1d2c021000 [rw-]  0x00021000
0x00007f1d2c021000  0x00007f1d30000000 [---]  0x03fdf000
0x00007f1d300c8000  0x00007f1d300c9000 [---]  0x00001000
0x00007f1d300c9000  0x00007f1d308c9000 [rw-]  0x00800000
0x00007f1d308c9000  0x00007f1d309d1000 [r-x]  0x00108000  0x0 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d309d1000  0x00007f1d30bd0000 [---]  0x001ff000  0x108000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd0000  0x00007f1d30bd1000 [r--]  0x00001000  0x107000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd1000  0x00007f1d30bd2000 [rw-]  0x00001000  0x108000 /lib/x86_64-linux-gnu/libm-2.23.so
0x00007f1d30bd2000  0x00007f1d30be9000 [r-x]  0x00017000  0x0 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30be9000  0x00007f1d30de9000 [---]  0x00200000  0x17000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30de9000  0x00007f1d30dea000 [r--]  0x00001000  0x17000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30dea000  0x00007f1d30deb000 [rw-]  0x00001000  0x18000 /lib/x86_64-linux-gnu/libresolv-2.23.so
0x00007f1d30deb000  0x00007f1d30ded000 [rw-]  0x00002000
0x00007f1d30ded000  0x00007f1d30df4000 [r-x]  0x00007000  0x0 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30df4000  0x00007f1d30ff3000 [---]  0x001ff000  0x7000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30ff3000  0x00007f1d30ff4000 [r--]  0x00001000  0x6000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d30ff4000  0x00007f1d30ff5000 [rw-]  0x00001000  0x7000 /lib/x86_64-linux-gnu/librt-2.23.so
0x00007f1d325e8000  0x00007f1d32611000 [rw-]  0x00029000
0x00007f1d32611000  0x00007f1d32612000 [---]  0x00001000
0x00007f1d32612000  0x00007f1d32e12000 [rw-]  0x00800000
0x00007f1d32e12000  0x00007f1d32e2a000 [r-x]  0x00018000  0x0 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d32e2a000  0x00007f1d33029000 [---]  0x001ff000  0x18000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d33029000  0x00007f1d3302a000 [r--]  0x00001000  0x17000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d3302a000  0x00007f1d3302b000 [rw-]  0x00001000  0x18000 /lib/x86_64-linux-gnu/libpthread-2.23.so
0x00007f1d3302b000  0x00007f1d3302f000 [rw-]  0x00004000
0x00007f1d3302f000  0x00007f1d33032000 [r-x]  0x00003000  0x0 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33032000  0x00007f1d33231000 [---]  0x001ff000  0x3000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33231000  0x00007f1d33232000 [r--]  0x00001000  0x2000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33232000  0x00007f1d33233000 [rw-]  0x00001000  0x3000 /lib/x86_64-linux-gnu/libdl-2.23.so
0x00007f1d33233000  0x00007f1d332a1000 [r-x]  0x0006e000  0x0 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d332a1000  0x00007f1d334a1000 [---]  0x00200000  0x6e000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a1000  0x00007f1d334a2000 [r--]  0x00001000  0x6e000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a2000  0x00007f1d334a3000 [rw-]  0x00001000  0x6f000 /lib/x86_64-linux-gnu/libpcre.so.3.13.2
0x00007f1d334a3000  0x00007f1d334d8000 [r-x]  0x00035000  0x0 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334d8000  0x00007f1d334da000 [rwx]  0x00002000  0x35000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334da000  0x00007f1d334dd000 [r-x]  0x00003000  0x37000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334dd000  0x00007f1d334de000 [rwx]  0x00001000  0x3a000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d334de000  0x00007f1d3356f000 [r-x]  0x00091000  0x3b000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d3356f000  0x00007f1d33570000 [rwx]  0x00001000  0xcc000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33570000  0x00007f1d33663000 [r-x]  0x000f3000  0xcd000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33663000  0x00007f1d33863000 [---]  0x00200000  0x1c0000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33863000  0x00007f1d33867000 [r--]  0x00004000  0x1c0000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33867000  0x00007f1d33869000 [rw-]  0x00002000  0x1c4000 /lib/x86_64-linux-gnu/libc-2.23.so
0x00007f1d33869000  0x00007f1d3386d000 [rw-]  0x00004000
0x00007f1d3386d000  0x00007f1d3388c000 [r-x]  0x0001f000  0x0 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d3388c000  0x00007f1d33a8b000 [---]  0x001ff000  0x1f000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8b000  0x00007f1d33a8c000 [r--]  0x00001000  0x1e000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8c000  0x00007f1d33a8d000 [rw-]  0x00001000  0x1f000 /lib/x86_64-linux-gnu/libselinux.so.1
0x00007f1d33a8d000  0x00007f1d33a8f000 [rw-]  0x00002000
0x00007f1d33a8f000  0x00007f1d33ab5000 [r-x]  0x00026000  0x0 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33c81000  0x00007f1d33c86000 [rw-]  0x00005000
0x00007f1d33ca9000  0x00007f1d33caa000 [r--]  0x00001000
0x00007f1d33caa000  0x00007f1d33cab000 [rw-]  0x00001000
0x00007f1d33caf000  0x00007f1d33cb0000 [r-x]  0x00001000
0x00007f1d33cb0000  0x00007f1d33cb1000 [rw-]  0x00001000
0x00007f1d33cb1000  0x00007f1d33cb2000 [---]  0x00001000
0x00007f1d33cb2000  0x00007f1d33cb4000 [rw-]  0x00002000
0x00007f1d33cb4000  0x00007f1d33cb5000 [r--]  0x00001000  0x25000 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33cb5000  0x00007f1d33cb6000 [rw-]  0x00001000  0x26000 /lib/x86_64-linux-gnu/ld-2.23.so
0x00007f1d33cb6000  0x00007f1d33cb7000 [rw-]  0x00001000
0x00007ffe3921b000  0x00007ffe3923c000 [rw-]  0x00021000
0x00007ffe39281000  0x00007ffe39284000 [r--]  0x00003000
0x00007ffe39284000  0x00007ffe39286000 [r-x]  0x00002000
0xffffffffff600000  0xffffffffff601000 [r-x]  0x00001000",(The current philosophy is to only add new things to the GumJS runtime if it's applicable to a majority of use-cases. This is so our base footprint stays as lean as possible.),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,321,2019-01-19T12:28:45Z,2019-01-19T17:29:14Z,2019-01-19T17:29:14Z,MERGED,True,1,0,1,https://github.com/leonjza,Add Java.registerClass type def.,1,[],https://github.com/frida/frida-gum/pull/321,https://github.com/leonjza,1,https://github.com/frida/frida-gum/pull/321,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,321,2019-01-19T12:28:45Z,2019-01-19T17:29:14Z,2019-01-19T17:29:14Z,MERGED,True,1,0,1,https://github.com/leonjza,Add Java.registerClass type def.,1,[],https://github.com/frida/frida-gum/pull/321,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/321#issuecomment-455798959,,Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/clouds56,1,https://github.com/frida/frida-gum/pull/322,See the doc,See the doc,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/clouds56,2,https://github.com/frida/frida-gum/pull/322#issuecomment-458705124,See the doc,"Haven't been tested, just proposing the change and needs review.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/322#issuecomment-466123081,See the doc,Good catch. Please write a test-case demonstrating the desired behavior.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/clouds56,4,https://github.com/frida/frida-gum/pull/322#issuecomment-466300101,See the doc,"I think it is a little complicate to test this behavior, the CP_ACP value differs between computers. The issue would only occurs in the CodePages that have multi-bytes. (cp1250 for english is single byte codepage).",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/clouds56,5,https://github.com/frida/frida-gum/pull/322#issuecomment-466305280,See the doc,"I add a test case (and flag G_OS_ACP_936 to enable).
There's no guide for build and test, so I haven't tried it myself. (why is there no CI for the repo?)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/322#issuecomment-562974572,See the doc,"Thank you! Sorry for the delay here.
We do have a CI but it's not yet wired up to GitHub. Could you try running this test locally? All you need is VS2017 (Community edition will do), then run gum-tests, and to run only one test pass it -p /Path/to/test.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/oleavr,7,https://github.com/frida/frida-gum/pull/322#issuecomment-601954312,See the doc,Timed out. Please reopen in the future if you find the time to look into this.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/oleavr,8,https://github.com/frida/frida-gum/pull/322#issuecomment-601955130,See the doc,"Actually let me take a quick look at this now, as I need to land another PR on Windows.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,322,2019-01-29T21:00:19Z,2020-03-21T03:06:02Z,2020-03-21T03:06:03Z,CLOSED,False,45,4,3,https://github.com/clouds56,Fix trailing junk data in ansi_string_to_utf8,3,[],https://github.com/frida/frida-gum/pull/322,https://github.com/oleavr,9,https://github.com/frida/frida-gum/pull/322#issuecomment-601984475,See the doc,Finalized version landed in cdf6643. Thanks for reporting and helping fix this! ‚ù§Ô∏è,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,323,2019-02-06T07:44:19Z,2019-02-06T20:29:47Z,2019-02-06T20:29:59Z,MERGED,True,2,0,1,https://github.com/xiaoyur347,Fix `have_v8` declaration when GumJS is disabled,1,[],https://github.com/frida/frida-gum/pull/323,https://github.com/xiaoyur347,1,https://github.com/frida/frida-gum/pull/323,"If the options enable_gumpp and enable_gumjs in meson_options.txt are set to false, it will fail to compile as have_v8 is undefined.","If the options enable_gumpp and enable_gumjs in meson_options.txt are set to false, it will fail to compile as have_v8 is undefined.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,323,2019-02-06T07:44:19Z,2019-02-06T20:29:47Z,2019-02-06T20:29:59Z,MERGED,True,2,0,1,https://github.com/xiaoyur347,Fix `have_v8` declaration when GumJS is disabled,1,[],https://github.com/frida/frida-gum/pull/323,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/323#issuecomment-461174993,"If the options enable_gumpp and enable_gumjs in meson_options.txt are set to false, it will fail to compile as have_v8 is undefined.",Nice catch! Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,324,2019-02-20T18:58:52Z,2019-02-21T19:20:00Z,2019-02-21T19:20:00Z,MERGED,True,786,47,3,https://github.com/mrmacete,Add Kernel typed read/writes,5,[],https://github.com/frida/frida-gum/pull/324,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/324,Same semantics as Memory.read* / Memory.write* - except the fact that read*String functions require the length second parameter for now.,Same semantics as Memory.read* / Memory.write* - except the fact that read*String functions require the length second parameter for now.,True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,325,2019-02-25T16:41:23Z,2019-03-05T19:23:58Z,2019-03-05T21:20:44Z,MERGED,True,271,24,14,https://github.com/mrmacete,Improve Kernel APIs to support weird iOS kernels,5,[],https://github.com/frida/frida-gum/pull/325,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/325,"try the unslid base first if kernel seems being debugged
make Kernel.base writable to override the internal base-finding algorithm

Plus:

add Kernel.free to deallocate memory allocated with Kernel.alloc
tweak the Int64 / UInt64 typescript type definitions to expose .not() and .equals()
remove dupe type definitions for Kernel.readByteArray() / Kernel.writeByteArray()","try the unslid base first if kernel seems being debugged
make Kernel.base writable to override the internal base-finding algorithm

Plus:

add Kernel.free to deallocate memory allocated with Kernel.alloc
tweak the Int64 / UInt64 typescript type definitions to expose .not() and .equals()
remove dupe type definitions for Kernel.readByteArray() / Kernel.writeByteArray()",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,325,2019-02-25T16:41:23Z,2019-03-05T19:23:58Z,2019-03-05T21:20:44Z,MERGED,True,271,24,14,https://github.com/mrmacete,Improve Kernel APIs to support weird iOS kernels,5,[],https://github.com/frida/frida-gum/pull/325,https://github.com/mrmacete,2,https://github.com/frida/frida-gum/pull/325#issuecomment-467785552,"try the unslid base first if kernel seems being debugged
make Kernel.base writable to override the internal base-finding algorithm

Plus:

add Kernel.free to deallocate memory allocated with Kernel.alloc
tweak the Int64 / UInt64 typescript type definitions to expose .not() and .equals()
remove dupe type definitions for Kernel.readByteArray() / Kernel.writeByteArray()","yeah that makes sense, i guess this will require to drop UInt64 as a representation for kernel pointers and introduce the KernelPointer object, though.
or maybe easier, i'll try to create a KernelResource subclass of UInt64 for this purpose.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,327,2019-03-17T08:10:10Z,2019-03-20T00:55:51Z,2019-03-20T00:55:51Z,MERGED,True,1,0,1,https://github.com/betteray,add missing Java.array api.,2,[],https://github.com/frida/frida-gum/pull/327,https://github.com/betteray,1,https://github.com/frida/frida-gum/pull/327,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,327,2019-03-17T08:10:10Z,2019-03-20T00:55:51Z,2019-03-20T00:55:51Z,MERGED,True,1,0,1,https://github.com/betteray,add missing Java.array api.,2,[],https://github.com/frida/frida-gum/pull/327,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/327#issuecomment-474641558,,Thanks! Made a couple of minor tweaks while at it.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,328,2019-03-17T17:11:49Z,2019-03-20T00:50:20Z,2019-03-20T00:50:20Z,MERGED,True,57,13,1,https://github.com/ChiChou,add more function signatures,3,[],https://github.com/frida/frida-gum/pull/328,https://github.com/ChiChou,1,https://github.com/frida/frida-gum/pull/328,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,328,2019-03-17T17:11:49Z,2019-03-20T00:50:20Z,2019-03-20T00:50:20Z,MERGED,True,57,13,1,https://github.com/ChiChou,add more function signatures,3,[],https://github.com/frida/frida-gum/pull/328,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/328#issuecomment-474640440,,"Awesome, thanks! ü§ò",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,329,2019-03-21T23:55:04Z,2019-03-25T19:24:32Z,2019-03-25T19:28:55Z,MERGED,True,295,18,6,https://github.com/mrmacete,"Add support for ""header-only"" Mach-O introspection",4,[],https://github.com/frida/frida-gum/pull/329,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/329,"add _enumerate_dependencies api call
add the ‚Äúheader-only‚Äù property, to load only the header and the commands instead of the whole binary, applies to file system loading
enable gumdarwinmodule to load executables too, not only libs","add _enumerate_dependencies api call
add the ‚Äúheader-only‚Äù property, to load only the header and the commands instead of the whole binary, applies to file system loading
enable gumdarwinmodule to load executables too, not only libs",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,329,2019-03-21T23:55:04Z,2019-03-25T19:24:32Z,2019-03-25T19:28:55Z,MERGED,True,295,18,6,https://github.com/mrmacete,"Add support for ""header-only"" Mach-O introspection",4,[],https://github.com/frida/frida-gum/pull/329,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/329#issuecomment-475565950,"add _enumerate_dependencies api call
add the ‚Äúheader-only‚Äù property, to load only the header and the commands instead of the whole binary, applies to file system loading
enable gumdarwinmodule to load executables too, not only libs",Almost forgot: vapi also needs to be updated.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,329,2019-03-21T23:55:04Z,2019-03-25T19:24:32Z,2019-03-25T19:28:55Z,MERGED,True,295,18,6,https://github.com/mrmacete,"Add support for ""header-only"" Mach-O introspection",4,[],https://github.com/frida/frida-gum/pull/329,https://github.com/mrmacete,3,https://github.com/frida/frida-gum/pull/329#issuecomment-475864914,"add _enumerate_dependencies api call
add the ‚Äúheader-only‚Äù property, to load only the header and the commands instead of the whole binary, applies to file system loading
enable gumdarwinmodule to load executables too, not only libs",i'm especially unsure about how i tweaked vapi,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,329,2019-03-21T23:55:04Z,2019-03-25T19:24:32Z,2019-03-25T19:28:55Z,MERGED,True,295,18,6,https://github.com/mrmacete,"Add support for ""header-only"" Mach-O introspection",4,[],https://github.com/frida/frida-gum/pull/329,https://github.com/mrmacete,4,https://github.com/frida/frida-gum/pull/329#issuecomment-476194926,"add _enumerate_dependencies api call
add the ‚Äúheader-only‚Äù property, to load only the header and the commands instead of the whole binary, applies to file system loading
enable gumdarwinmodule to load executables too, not only libs","The get_type() for the enum is done like this.

ohh nice, yeah i wonder if in this case we should use a GFlagsValue instead",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,329,2019-03-21T23:55:04Z,2019-03-25T19:24:32Z,2019-03-25T19:28:55Z,MERGED,True,295,18,6,https://github.com/mrmacete,"Add support for ""header-only"" Mach-O introspection",4,[],https://github.com/frida/frida-gum/pull/329,https://github.com/mrmacete,5,https://github.com/frida/frida-gum/pull/329#issuecomment-476195539,"add _enumerate_dependencies api call
add the ‚Äúheader-only‚Äù property, to load only the header and the commands instead of the whole binary, applies to file system loading
enable gumdarwinmodule to load executables too, not only libs","also, i'm not sure to get who is calling get_type() for that, eventually",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,329,2019-03-21T23:55:04Z,2019-03-25T19:24:32Z,2019-03-25T19:28:55Z,MERGED,True,295,18,6,https://github.com/mrmacete,"Add support for ""header-only"" Mach-O introspection",4,[],https://github.com/frida/frida-gum/pull/329,https://github.com/mrmacete,6,https://github.com/frida/frida-gum/pull/329#issuecomment-476197096,"add _enumerate_dependencies api call
add the ‚Äúheader-only‚Äù property, to load only the header and the commands instead of the whole binary, applies to file system loading
enable gumdarwinmodule to load executables too, not only libs","also, i'm not sure to get who is calling get_type() for that, eventually

ahh ok nvm, that's passed to g_param_spec_flags()",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,331,2019-04-09T00:34:21Z,2019-04-12T12:53:21Z,2019-04-12T12:53:21Z,CLOSED,False,23,0,2,https://github.com/josiahyan,Fix Linux thread tampering in non-dumpable processes,1,[],https://github.com/frida/frida-gum/pull/331,https://github.com/josiahyan,1,https://github.com/frida/frida-gum/pull/331,Fixes #330 partially and #319.,Fixes #330 partially and #319.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,331,2019-04-09T00:34:21Z,2019-04-12T12:53:21Z,2019-04-12T12:53:21Z,CLOSED,False,23,0,2,https://github.com/josiahyan,Fix Linux thread tampering in non-dumpable processes,1,[],https://github.com/frida/frida-gum/pull/331,https://github.com/josiahyan,2,https://github.com/frida/frida-gum/pull/331#issuecomment-481059201,Fixes #330 partially and #319.,"The test suite is currently failing on Linux x64, although I don't believe my change caused that.
On the commit before this one (27f8e83) I get the error
/Core/Process/process_threads: **
Frida:ERROR:../../../frida-gum/tests/core/process.c:156:test_process_process_threads: assertion failed (ctx.number_of_calls >= 2): (1 >= 2)

On this commit, I get the same error.
The Stalker test suite is currently passing on Android aarch64, which exercises the code I've changed.
Manually tested this change by attaching to a multi-threaded process on Android aarch64, and using Process.enumerateThreads(), which needs to ptrace() other threads to obtain their context. An empty result was observed in the previous commit, while some thread information was dumped after applying this patch.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,331,2019-04-09T00:34:21Z,2019-04-12T12:53:21Z,2019-04-12T12:53:21Z,CLOSED,False,23,0,2,https://github.com/josiahyan,Fix Linux thread tampering in non-dumpable processes,1,[],https://github.com/frida/frida-gum/pull/331,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/331#issuecomment-482559897,Fixes #330 partially and #319.,Actually let me make these tweaks so we can get this released soon.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,331,2019-04-09T00:34:21Z,2019-04-12T12:53:21Z,2019-04-12T12:53:21Z,CLOSED,False,23,0,2,https://github.com/josiahyan,Fix Linux thread tampering in non-dumpable processes,1,[],https://github.com/frida/frida-gum/pull/331,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/331#issuecomment-482563151,Fixes #330 partially and #319.,Tweaked version landed as 73bf271. Thanks!,True,{'THUMBS_UP': ['https://github.com/josiahyan']}
frida/frida-gum,https://github.com/frida/frida-gum,332,2019-04-28T16:25:57Z,2019-04-28T16:30:21Z,2019-04-28T16:32:29Z,MERGED,True,2,0,1,https://github.com/thestr4ng3r,Add g_set_prgname() to gum_init_embedded(),1,[],https://github.com/frida/frida-gum/pull/332,https://github.com/thestr4ng3r,1,https://github.com/frida/frida-gum/pull/332,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,332,2019-04-28T16:25:57Z,2019-04-28T16:30:21Z,2019-04-28T16:32:29Z,MERGED,True,2,0,1,https://github.com/thestr4ng3r,Add g_set_prgname() to gum_init_embedded(),1,[],https://github.com/frida/frida-gum/pull/332,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/332#issuecomment-487394295,,Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,333,2019-05-01T17:54:18Z,2019-05-01T21:54:20Z,2019-05-02T08:48:53Z,MERGED,True,151,77,2,https://github.com/thestr4ng3r,Support Wow64Transition in Stalker,11,[],https://github.com/frida/frida-gum/pull/333,https://github.com/thestr4ng3r,1,https://github.com/frida/frida-gum/pull/333,"This works by detecting jmp dword [Wow64Transition] and then handling it like sysenter.
Fix frida/frida#857","This works by detecting jmp dword [Wow64Transition] and then handling it like sysenter.
Fix frida/frida#857",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,333,2019-05-01T17:54:18Z,2019-05-01T21:54:20Z,2019-05-02T08:48:53Z,MERGED,True,151,77,2,https://github.com/thestr4ng3r,Support Wow64Transition in Stalker,11,[],https://github.com/frida/frida-gum/pull/333,https://github.com/thestr4ng3r,2,https://github.com/frida/frida-gum/pull/333#issuecomment-488369354,"This works by detecting jmp dword [Wow64Transition] and then handling it like sysenter.
Fix frida/frida#857",updated,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,333,2019-05-01T17:54:18Z,2019-05-01T21:54:20Z,2019-05-02T08:48:53Z,MERGED,True,151,77,2,https://github.com/thestr4ng3r,Support Wow64Transition in Stalker,11,[],https://github.com/frida/frida-gum/pull/333,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/333#issuecomment-488397007,"This works by detecting jmp dword [Wow64Transition] and then handling it like sysenter.
Fix frida/frida#857",With this PR I guess we can also make that test run without slow mode?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,333,2019-05-01T17:54:18Z,2019-05-01T21:54:20Z,2019-05-02T08:48:53Z,MERGED,True,151,77,2,https://github.com/thestr4ng3r,Support Wow64Transition in Stalker,11,[],https://github.com/frida/frida-gum/pull/333,https://github.com/thestr4ng3r,4,https://github.com/frida/frida-gum/pull/333#issuecomment-488417484,"This works by detecting jmp dword [Wow64Transition] and then handling it like sysenter.
Fix frida/frida#857","Ok, I've enabled the test. What I can say is that is was not working before on Windows 10 and after these changes it is. However afaik the WoW64 works differently on older Windows versions, which is probably what the op->mem.segment == X86_REG_FS && op->mem.disp == 0xc0 part is for. But I can't test that right now as I don't have any older Windows VM set up.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,333,2019-05-01T17:54:18Z,2019-05-01T21:54:20Z,2019-05-02T08:48:53Z,MERGED,True,151,77,2,https://github.com/thestr4ng3r,Support Wow64Transition in Stalker,11,[],https://github.com/frida/frida-gum/pull/333,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/333#issuecomment-488434732,"This works by detecting jmp dword [Wow64Transition] and then handling it like sysenter.
Fix frida/frida#857","(No worries about testing on older Windows btw. I remember that test was passing and stopped passing on newer Windows, so we should be good considering that the other code-path is still intact.)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,334,2019-05-03T18:22:12Z,2019-05-04T00:22:33Z,2019-05-04T00:22:33Z,MERGED,True,13,2,1,https://github.com/mrmacete,Use libc‚Äôs free() on libobjc-allocated pointers,5,[],https://github.com/frida/frida-gum/pull/334,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/334,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,335,2019-05-04T18:26:52Z,2019-05-04T18:34:53Z,2019-05-04T18:34:53Z,MERGED,True,1,1,1,https://github.com/eugenekolo,"Fix assert typo, changing 'length' to 'size'",1,[],https://github.com/frida/frida-gum/pull/335,https://github.com/eugenekolo,1,https://github.com/frida/frida-gum/pull/335,Fix debug compile,Fix debug compile,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,335,2019-05-04T18:26:52Z,2019-05-04T18:34:53Z,2019-05-04T18:34:53Z,MERGED,True,1,1,1,https://github.com/eugenekolo,"Fix assert typo, changing 'length' to 'size'",1,[],https://github.com/frida/frida-gum/pull/335,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/335#issuecomment-489353122,Fix debug compile,Oops! Thanks! :),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,336,2019-05-25T22:01:16Z,2019-05-26T15:25:53Z,2019-05-26T15:25:53Z,MERGED,True,2,0,2,https://github.com/iGio90,Make libc API public,1,[],https://github.com/frida/frida-gum/pull/336,https://github.com/iGio90,1,https://github.com/frida/frida-gum/pull/336,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,336,2019-05-25T22:01:16Z,2019-05-26T15:25:53Z,2019-05-26T15:25:53Z,MERGED,True,2,0,2,https://github.com/iGio90,Make libc API public,1,[],https://github.com/frida/frida-gum/pull/336,https://github.com/iGio90,2,https://github.com/frida/frida-gum/pull/336#issuecomment-495951866,,"pt1 for comments:
frida/frida-core#244",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,338,2019-06-27T12:10:00Z,2019-06-27T12:16:55Z,2019-06-27T12:18:10Z,MERGED,True,1,2,1,https://github.com/mrmacete,Fix gum_thread_try_get_ranges() on latest Apple OSes,1,[],https://github.com/frida/frida-gum/pull/338,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/338,"In recent libpthread, as of iOS 12.x, that field became stackbottom, the rest of the fields we care about are still valid. In this way there‚Äôs no need to add complexity to figure out the flavor of the structure (at least just yet).","In recent libpthread, as of iOS 12.x, that field became stackbottom, the rest of the fields we care about are still valid. In this way there‚Äôs no need to add complexity to figure out the flavor of the structure (at least just yet).",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,340,2019-07-28T21:01:11Z,2019-07-30T22:56:50Z,2019-07-30T22:56:50Z,CLOSED,False,14,4,2,https://github.com/iGio90,Stalker: fix uaf and allow unfollow when transforming,1,[],https://github.com/frida/frida-gum/pull/340,https://github.com/iGio90,1,https://github.com/frida/frida-gum/pull/340,"Actually, there is no way to unfollow a stalked thread which uses transform.
Calling unfollow on the same thread will trigger an uaf which crash frida (it attempt to use a freed writer)
Calling unfollow on a different thread will trigger another unknown bug which is gonna be investigated later if needed but this, will open one little door to detach a stalked thread.
From my understanding, we should just unfollow when it's safe to do it. There is also missing logic when unfollow is triggered from a callout in example, which trigger another bug
todo: missing test case","Actually, there is no way to unfollow a stalked thread which uses transform.
Calling unfollow on the same thread will trigger an uaf which crash frida (it attempt to use a freed writer)
Calling unfollow on a different thread will trigger another unknown bug which is gonna be investigated later if needed but this, will open one little door to detach a stalked thread.
From my understanding, we should just unfollow when it's safe to do it. There is also missing logic when unfollow is triggered from a callout in example, which trigger another bug
todo: missing test case",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,340,2019-07-28T21:01:11Z,2019-07-30T22:56:50Z,2019-07-30T22:56:50Z,CLOSED,False,14,4,2,https://github.com/iGio90,Stalker: fix uaf and allow unfollow when transforming,1,[],https://github.com/frida/frida-gum/pull/340,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/340#issuecomment-516626719,"Actually, there is no way to unfollow a stalked thread which uses transform.
Calling unfollow on the same thread will trigger an uaf which crash frida (it attempt to use a freed writer)
Calling unfollow on a different thread will trigger another unknown bug which is gonna be investigated later if needed but this, will open one little door to detach a stalked thread.
From my understanding, we should just unfollow when it's safe to do it. There is also missing logic when unfollow is triggered from a callout in example, which trigger another bug
todo: missing test case",This and other edge-cases have been addressed in c4ab181. Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,341,2019-07-30T22:38:31Z,2019-07-30T22:54:36Z,2019-07-30T22:54:39Z,MERGED,True,365,18,6,https://github.com/oleavr,Allow Stalker.unfollow() during transform,1,[],https://github.com/frida/frida-gum/pull/341,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/341,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,342,2019-08-12T17:41:16Z,2019-08-18T22:25:19Z,2019-08-18T22:25:19Z,CLOSED,False,940,102,15,https://github.com/jonwilson030981,Features/mips64,53,[],https://github.com/frida/frida-gum/pull/342,https://github.com/jonwilson030981,1,https://github.com/frida/frida-gum/pull/342,"Support for MIPS64
Grateful for any comments/suggestions/improvements.","Support for MIPS64
Grateful for any comments/suggestions/improvements.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,342,2019-08-12T17:41:16Z,2019-08-18T22:25:19Z,2019-08-18T22:25:19Z,CLOSED,False,940,102,15,https://github.com/jonwilson030981,Features/mips64,53,[],https://github.com/frida/frida-gum/pull/342,https://github.com/jonwilson030981,2,https://github.com/frida/frida-gum/pull/342#issuecomment-522310985,"Support for MIPS64
Grateful for any comments/suggestions/improvements.","I think I have made all the changes, except for moving the structure definition. Please let me know if I have missed anything.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,342,2019-08-12T17:41:16Z,2019-08-18T22:25:19Z,2019-08-18T22:25:19Z,CLOSED,False,940,102,15,https://github.com/jonwilson030981,Features/mips64,53,[],https://github.com/frida/frida-gum/pull/342,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/342#issuecomment-522343118,"Support for MIPS64
Grateful for any comments/suggestions/improvements.","Thanks! Just a few nitpicks left now, but I'll take care of them. Btw, I noticed that your git user.name and user.email config values are set to placeholder values; how would you prefer to be attributed? (Format: First Last <first.last@domain.com>) I'll need this both for committing and for updating copyright headers.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,342,2019-08-12T17:41:16Z,2019-08-18T22:25:19Z,2019-08-18T22:25:19Z,CLOSED,False,940,102,15,https://github.com/jonwilson030981,Features/mips64,53,[],https://github.com/frida/frida-gum/pull/342,https://github.com/jonwilson030981,4,https://github.com/frida/frida-gum/pull/342#issuecomment-522344977,"Support for MIPS64
Grateful for any comments/suggestions/improvements.","Thanks for sorting that Ole. Sorry, that must've been when I reinstalled after the course.
Not worried about getting the credit, just wanted to merge it before I forgot about it and let the code rot.
Is this ok?
Jon Wilson jonwilson@zepler.net",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,342,2019-08-12T17:41:16Z,2019-08-18T22:25:19Z,2019-08-18T22:25:19Z,CLOSED,False,940,102,15,https://github.com/jonwilson030981,Features/mips64,53,[],https://github.com/frida/frida-gum/pull/342,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/342#issuecomment-522346233,"Support for MIPS64
Grateful for any comments/suggestions/improvements.","No worries. Thanks, that's great!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,342,2019-08-12T17:41:16Z,2019-08-18T22:25:19Z,2019-08-18T22:25:19Z,CLOSED,False,940,102,15,https://github.com/jonwilson030981,Features/mips64,53,[],https://github.com/frida/frida-gum/pull/342,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/342#issuecomment-522361659,"Support for MIPS64
Grateful for any comments/suggestions/improvements.","Tweaked version merged as cb4a5bb. Hope I didn't break anything; would be great if you could take it for a spin when you get a chance.
Thanks a lot for this awesome PR! ‚ù§Ô∏è",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,344,2019-08-20T16:40:04Z,2019-08-20T16:51:00Z,2019-08-20T16:53:31Z,MERGED,True,4,2,1,https://github.com/gebing,Fix for segmentation fault by gum_memory_patch_code(),1,[],https://github.com/frida/frida-gum/pull/344,https://github.com/gebing,1,https://github.com/frida/frida-gum/pull/344,"Fix for Issue #343, Segmentation fault by gum_memory_patch_code() with buffer exceed page size on ARM64","Fix for Issue #343, Segmentation fault by gum_memory_patch_code() with buffer exceed page size on ARM64",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,344,2019-08-20T16:40:04Z,2019-08-20T16:51:00Z,2019-08-20T16:53:31Z,MERGED,True,4,2,1,https://github.com/gebing,Fix for segmentation fault by gum_memory_patch_code(),1,[],https://github.com/frida/frida-gum/pull/344,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/344#issuecomment-523100371,"Fix for Issue #343, Segmentation fault by gum_memory_patch_code() with buffer exceed page size on ARM64","Wow, that's weird. But let's make this change, sure won't hurt.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,344,2019-08-20T16:40:04Z,2019-08-20T16:51:00Z,2019-08-20T16:53:31Z,MERGED,True,4,2,1,https://github.com/gebing,Fix for segmentation fault by gum_memory_patch_code(),1,[],https://github.com/frida/frida-gum/pull/344,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/344#issuecomment-523101749,"Fix for Issue #343, Segmentation fault by gum_memory_patch_code() with buffer exceed page size on ARM64","Thanks, merged!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,345,2019-08-21T11:14:49Z,2019-08-24T01:01:58Z,2019-08-24T01:01:58Z,CLOSED,False,8,0,1,https://github.com/gebing,Fix for duktape's Reflect.get() restriction,1,[],https://github.com/frida/frida-gum/pull/345,https://github.com/gebing,1,https://github.com/frida/frida-gum/pull/345,"Fix for duktape's Reflect.get() restriction, which will cause Java.choose throw unsupported error.","Fix for duktape's Reflect.get() restriction, which will cause Java.choose throw unsupported error.",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,345,2019-08-21T11:14:49Z,2019-08-24T01:01:58Z,2019-08-24T01:01:58Z,CLOSED,False,8,0,1,https://github.com/gebing,Fix for duktape's Reflect.get() restriction,1,[],https://github.com/frida/frida-gum/pull/345,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/345#issuecomment-524502683,"Fix for duktape's Reflect.get() restriction, which will cause Java.choose throw unsupported error.","Thank you so much for tracking this down, much appreciated!
As mentioned in frida/frida#989, I gave this some thought and realized that this is similar to the issue we were dealing with in 83e98b4, so I figured it's better to disable the builtin instead ‚Äì so I went ahead and did that in fab4744. This way, since we're using frida-compile w/ Babel under the hood, its polyfill will use its fully standard-compliant version instead of the non-standard one built into Duktape.
I think we should aim to disable as many of Duktape's non-standard builtins as possible.
Thanks again for your help on this; this was a great catch!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,347,2019-09-01T06:28:16Z,2019-09-06T11:06:23Z,2019-09-06T11:06:33Z,MERGED,True,2,0,1,https://github.com/gebing,'hexdump()' has error when option's length bigger than ArrayBuffer.length,2,[],https://github.com/frida/frida-gum/pull/347,https://github.com/gebing,1,https://github.com/frida/frida-gum/pull/347,'hexdump()' will throw an error when option's length bigger than ArrayBuffer.length.,'hexdump()' will throw an error when option's length bigger than ArrayBuffer.length.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,347,2019-09-01T06:28:16Z,2019-09-06T11:06:23Z,2019-09-06T11:06:33Z,MERGED,True,2,0,1,https://github.com/gebing,'hexdump()' has error when option's length bigger than ArrayBuffer.length,2,[],https://github.com/frida/frida-gum/pull/347,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/347#issuecomment-528448989,'hexdump()' will throw an error when option's length bigger than ArrayBuffer.length.,"Nice, thanks! How about using Math.min() instead?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,347,2019-09-01T06:28:16Z,2019-09-06T11:06:23Z,2019-09-06T11:06:33Z,MERGED,True,2,0,1,https://github.com/gebing,'hexdump()' has error when option's length bigger than ArrayBuffer.length,2,[],https://github.com/frida/frida-gum/pull/347,https://github.com/gebing,3,https://github.com/frida/frida-gum/pull/347#issuecomment-528701060,'hexdump()' will throw an error when option's length bigger than ArrayBuffer.length.,OK. commit again.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,347,2019-09-01T06:28:16Z,2019-09-06T11:06:23Z,2019-09-06T11:06:33Z,MERGED,True,2,0,1,https://github.com/gebing,'hexdump()' has error when option's length bigger than ArrayBuffer.length,2,[],https://github.com/frida/frida-gum/pull/347,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/347#issuecomment-528812385,'hexdump()' will throw an error when option's length bigger than ArrayBuffer.length.,Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/alvarofe,1,https://github.com/frida/frida-gum/pull/349,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.","This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.",True,{'HEART': ['https://github.com/mrmacete']}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/alvarofe,2,https://github.com/frida/frida-gum/pull/349#issuecomment-530903990,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.",Ready to review. At the end as commented privately SVC is virtualized and in addition I added new event (GUM_THREAD) to notify when a new thread has been created.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/alvarofe,3,https://github.com/frida/frida-gum/pull/349#issuecomment-531833517,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.","This can be reviewed since I have been testing it against my target along with the below module (https://github.com/alvarofe/frida-stalker-thread)
var ThreadsFollowed : {[id: number] : boolean} = {};

function isThreadFollowed(threadId: ThreadId) {
  return ThreadsFollowed[threadId];
}

function FollowThread(threadId:ThreadId, options:StalkerOptions) {
  if (isThreadFollowed(threadId)) {
    return;
  }

  ThreadsFollowed[threadId] = true;
  console.log(""[+] Following thread "" + threadId);
  Stalker.follow(threadId, options);
}

function UnfollowThread(threadId:ThreadId) {
  if (!isThreadFollowed(threadId)) {
    return;
  }

  delete ThreadsFollowed[threadId];
  console.log(""[+] Unfollowing thread "" + threadId);
  Stalker.unfollow(threadId);
  Stalker.flush();
}

class StalkerThread {
  constructor(options:StalkerOptions) {
    this.options = options;
  }

  Follow(threadId: ThreadId): void {
    FollowThread(threadId, this.options);
  }
  Unfollow(threadId: ThreadId) : void {
    UnfollowThread(threadId);
  }

  options:StalkerOptions;
}


function PthreadStalker(options:StalkerOptions) : StalkerThread {
  const stalker = new StalkerThread(options);
  const pthreadCreate = Module.getExportByName(null, 'pthread_create');
  Interceptor.attach(pthreadCreate, {
    onEnter(args) {
      //if who calls pthread_create is not being followed skip it
      if (!isThreadFollowed(this.threadId)) {
        return;
      }
      const functionAddress = args[2] as NativePointer;
      Interceptor.attach(functionAddress, {
        onEnter(args) {
          stalker.Follow(this.threadId);
        },
        onLeave(retVal) {
          stalker.Unfollow(this.threadId);
        }
      });
    }
  });
  return stalker;
}

export { PthreadStalker };
Which I have been using like this
const pthreadStalker = PthreadStalker({
  events : {
    compile: true
  },
  onReceive(rawEvents) {
    const events = Stalker.parse(rawEvents, {annotate: false}) as StalkerCompileEventBare[];
    events.forEach(ev => {
      const start = ev[0] as NativePointer;
      if (map.has(start))
        send(start);
    });
  }
});

function InterceptAndStalk(addr: NativePointer) {
  Interceptor.attach(addr, {
    onEnter(args) {
      pthreadStalker.Follow(this.threadId);
    }
  });
}

InterceptAndStalk(base.add(***));
InterceptAndStalk(base.add(***));
InterceptAndStalk(base.add(***));
InterceptAndStalk(base.add(***));",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/alvarofe,4,https://github.com/frida/frida-gum/pull/349#issuecomment-532789741,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.",Updated with all the comments addressed - let me know if I missed something,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/alvarofe,5,https://github.com/frida/frida-gum/pull/349#issuecomment-535421476,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.","Getting there!

This can be reviewed again",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/349#issuecomment-535688774,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.","One thing before I do a full review pass again: it would be good to save register(s) well below the stack pointer like we do elsewhere, to avoid clobbering the red-zone. (This is why we save state right below offset -128 from SP.)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/alvarofe,7,https://github.com/frida/frida-gum/pull/349#issuecomment-535908272,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.","Updated with the red zone issue, let me know if you see something else missing",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/alvarofe,8,https://github.com/frida/frida-gum/pull/349#issuecomment-535989868,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.",Updated again - next time will try to be more careful with the coding style and being more descriptive with variables name.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/oleavr,9,https://github.com/frida/frida-gum/pull/349#issuecomment-536078502,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.","Oops, only two to go.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/alvarofe,10,https://github.com/frida/frida-gum/pull/349#issuecomment-536113257,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.",Updated once again - hopefully this will be the last iteration ;),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,349,2019-09-11T09:50:12Z,2019-09-27T23:27:27Z,2019-09-27T23:28:00Z,MERGED,True,100,0,2,https://github.com/alvarofe,Fix stalking of thread creation on Linux/arm64,3,[],https://github.com/frida/frida-gum/pull/349,https://github.com/oleavr,11,https://github.com/frida/frida-gum/pull/349#issuecomment-536126155,"This still does not work but the idea is as follows, let me know how it looks like to you or if you think otherwise.
gum_stalker_iterator_keep it emits new code when SVC calls are found to check for clone calls. When this happen, ctx->thread_clone is set with GUM_NEW_THREAD_WHILE_STALKING. Likewise, after encountering a SVC call afterwards is inserted more code to check if the SVC call was clone to get the new thread id of the child - gum_stalker_thread_creation is where child and parent is distinguished. Is here where I would like to return to normal life for the child and within the parent notify with a new event so the user can decide whether or not wants to stalk the new thread. However, I am failing to do so - I dunno how to 'disinfect' the child and leave untouched the parent.
To work around that, I added a few lines within gum_exec_ctx_replace_current_block_with to detect when we are running on the child to return to start_address but does not seem to work either.
The normal disinfect routine and unfollow would not work as long as the child and parent share the ctx and I thought setting cpu_context->pc to the real address would be enough but either that is not enough or I don't know how to do it correctly.","Thanks, merged! üôå",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,1,https://github.com/frida/frida-gum/pull/352,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.","Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",True,{'HOORAY': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,2,https://github.com/frida/frida-gum/pull/352#issuecomment-533160382,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",Just testing against my application I noticed that duktape runtime does not have support for MemoryAccessMonitor whereas V8 does - although only for windows which I have to change the #ifdef. Is there any reason for that ?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,3,https://github.com/frida/frida-gum/pull/352#issuecomment-533206905,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",Working from JS using V8 by now - android arm64,True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/352#issuecomment-533226769,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",@alvarofe No reason just lack of time to implement it there. (And lack of motivation as the feature was Windows-only anyway.),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,5,https://github.com/frida/frida-gum/pull/352#issuecomment-533530507,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.","Thinking about this, it should also work on macos - although I should change minor things to get the mapping. With that, both will share a common implementation. So give me some days to advance work and test it on mac osx (I don't have an iphone to test though, you or someone else should take care of that).
Likewise, I will try to add support for duktape runtime.",True,{'HOORAY': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,6,https://github.com/frida/frida-gum/pull/352#issuecomment-534573164,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.","Ready to review - lets merge this one along with the others PR I have open (duktape included). Once done, will do mac os support on spare time.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,7,https://github.com/frida/frida-gum/pull/352#issuecomment-536113504,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",Let me review this once more to make sure to fix all the coding styles issues so we can save some time while reviewing this.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/oleavr,8,https://github.com/frida/frida-gum/pull/352#issuecomment-536128487,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",Thanks! Just let me know when it's ready for another review.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,9,https://github.com/frida/frida-gum/pull/352#issuecomment-537186505,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",Ready to review - I tried to address as many coding styles issues as I could but likely I left some. Waiting your comments,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,10,https://github.com/frida/frida-gum/pull/352#issuecomment-539549895,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",Did you have any chance to take a look?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/alvarofe,11,https://github.com/frida/frida-gum/pull/352#issuecomment-541304181,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.",All the comments should have been fixed. Ready for the second round,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,352,2019-09-18T16:23:36Z,2019-10-14T03:01:41Z,2019-10-14T03:02:37Z,CLOSED,False,758,8,8,https://github.com/alvarofe,Add support for MemoryAccessMonitor to linux,2,[],https://github.com/frida/frida-gum/pull/352,https://github.com/oleavr,12,https://github.com/frida/frida-gum/pull/352#issuecomment-541489314,"Besides adding MemoryAccessMonitor to Linux I also fixed a FIXME in the signal handler when reporting memory operation - it was needed for MemoryAccessMonitor to function correctly. Now, it is possible to check if the signal was due to a read or write - using capstone to disassemble the instruction.
Likewise, gum_linux_unparse_ucontext was using pc to set THUMB bit. However, on the signal context CPSR already contains that information plus PC will always be even. Therefore, with the previous logic when resuming after handling the exception it will always return to ARM mode instead of the one that correspond - let me know if that breaks something I am not aware. This should also be added to darwin and other ARM backends. Unfortunately, I don't have devices to test but let me know if you want me to send the same fix for darwin.","Thanks! ü§ò
Landed in c227af0, which also makes it generic so it works on any UNIX system. (In theory ‚Äì only tested on macOS and tests pass, albeit slow ‚Äì probably due to it walking each page of every range and there's a ton of them. But anyway, this is an awesome start for MemoryAccessMonitor on all platforms! üéâ)",True,{'HOORAY': ['https://github.com/bitterbit']}
frida/frida-gum,https://github.com/frida/frida-gum,353,2019-09-18T18:05:20Z,2019-12-08T17:52:25Z,2019-12-08T17:52:26Z,CLOSED,False,27,8,4,https://github.com/alvarofe,Handle multiple devices and linux host test for Android,1,[],https://github.com/frida/frida-gum/pull/353,https://github.com/alvarofe,1,https://github.com/frida/frida-gum/pull/353,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,353,2019-09-18T18:05:20Z,2019-12-08T17:52:25Z,2019-12-08T17:52:26Z,CLOSED,False,27,8,4,https://github.com/alvarofe,Handle multiple devices and linux host test for Android,1,[],https://github.com/frida/frida-gum/pull/353,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/353#issuecomment-562974288,,Closing this as I think we need to take a step back and refactor these scripts as a whole.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,354,2019-09-22T12:47:33Z,2019-10-08T14:48:45Z,2019-10-08T14:49:32Z,CLOSED,False,6,9,1,https://github.com/Alien-AV,fix android 10 linker issue,1,[],https://github.com/frida/frida-gum/pull/354,https://github.com/Alien-AV,1,https://github.com/frida/frida-gum/pull/354,"lookup of linker location happened with hardcoded paths(, which change every few versions?).
changed the lookup to be based on file name only and not full path","lookup of linker location happened with hardcoded paths(, which change every few versions?).
changed the lookup to be based on file name only and not full path",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,354,2019-09-22T12:47:33Z,2019-10-08T14:48:45Z,2019-10-08T14:49:32Z,CLOSED,False,6,9,1,https://github.com/Alien-AV,fix android 10 linker issue,1,[],https://github.com/frida/frida-gum/pull/354,https://github.com/Alien-AV,2,https://github.com/frida/frida-gum/pull/354#issuecomment-533879347,"lookup of linker location happened with hardcoded paths(, which change every few versions?).
changed the lookup to be based on file name only and not full path","Meanwhile I verified only that frida-ps works.
It seems that ADB remote session disconnects when starting the frida server. (Maybe phone reboots?)
In any case, it works better with this fix than without it.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,354,2019-09-22T12:47:33Z,2019-10-08T14:48:45Z,2019-10-08T14:49:32Z,CLOSED,False,6,9,1,https://github.com/Alien-AV,fix android 10 linker issue,1,[],https://github.com/frida/frida-gum/pull/354,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/354#issuecomment-535903418,"lookup of linker location happened with hardcoded paths(, which change every few versions?).
changed the lookup to be based on file name only and not full path","Thanks for looking into this! Unfortunately this fix may introduce false positives, if an app happens to have mapped a file suffixed with linker / linker64. So I think we need to take a step back and rethink how we locate the linker.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,354,2019-09-22T12:47:33Z,2019-10-08T14:48:45Z,2019-10-08T14:49:32Z,CLOSED,False,6,9,1,https://github.com/Alien-AV,fix android 10 linker issue,1,[],https://github.com/frida/frida-gum/pull/354,https://github.com/Alien-AV,4,https://github.com/frida/frida-gum/pull/354#issuecomment-535920835,"lookup of linker location happened with hardcoded paths(, which change every few versions?).
changed the lookup to be based on file name only and not full path","How high are the chances of that? We can push it now, as it fixes an actual and current issue.
And if someone ever hits the issue of ""mapped a file suffixed with linker (and it's matched before the actual linker because it's closer to vdso)"", then in a different issue we can take a step back and rethink.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,354,2019-09-22T12:47:33Z,2019-10-08T14:48:45Z,2019-10-08T14:49:32Z,CLOSED,False,6,9,1,https://github.com/Alien-AV,fix android 10 linker issue,1,[],https://github.com/frida/frida-gum/pull/354,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/354#issuecomment-539280555,"lookup of linker location happened with hardcoded paths(, which change every few versions?).
changed the lookup to be based on file name only and not full path","I think we can go with the solution suggested here.
(Sorry for the delay, I've been heads down in code for a while.)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,354,2019-09-22T12:47:33Z,2019-10-08T14:48:45Z,2019-10-08T14:49:32Z,CLOSED,False,6,9,1,https://github.com/Alien-AV,fix android 10 linker issue,1,[],https://github.com/frida/frida-gum/pull/354,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/354#issuecomment-539549747,"lookup of linker location happened with hardcoded paths(, which change every few versions?).
changed the lookup to be based on file name only and not full path","Fixed in 591d742 (playing it safe, let's investigate other solutions later if needed).",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,355,2019-09-24T09:12:40Z,2019-10-14T02:55:15Z,2019-10-14T03:04:37Z,MERGED,True,363,45,6,https://github.com/alvarofe,Enable AccessMonitor V8 for Linux and implement support for duktape runtime,1,[],https://github.com/frida/frida-gum/pull/355,https://github.com/alvarofe,1,https://github.com/frida/frida-gum/pull/355,"This enable AccessMonitor on V8 for linux and duktape runtime implementation.
Do not review nor merge until #352 gets pushed to master.","This enable AccessMonitor on V8 for linux and duktape runtime implementation.
Do not review nor merge until #352 gets pushed to master.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,355,2019-09-24T09:12:40Z,2019-10-14T02:55:15Z,2019-10-14T03:04:37Z,MERGED,True,363,45,6,https://github.com/alvarofe,Enable AccessMonitor V8 for Linux and implement support for duktape runtime,1,[],https://github.com/frida/frida-gum/pull/355,https://github.com/alvarofe,2,https://github.com/frida/frida-gum/pull/355#issuecomment-537456444,"This enable AccessMonitor on V8 for linux and duktape runtime implementation.
Do not review nor merge until #352 gets pushed to master.",This can be reviewed too although should be merged after #352,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,355,2019-09-24T09:12:40Z,2019-10-14T02:55:15Z,2019-10-14T03:04:37Z,MERGED,True,363,45,6,https://github.com/alvarofe,Enable AccessMonitor V8 for Linux and implement support for duktape runtime,1,[],https://github.com/frida/frida-gum/pull/355,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/355#issuecomment-541489633,"This enable AccessMonitor on V8 for linux and duktape runtime implementation.
Do not review nor merge until #352 gets pushed to master.","Thanks! ü§ò
Tweaked version landed as f377618 üéâ",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,359,2019-10-07T15:57:01Z,2019-10-08T12:47:19Z,2019-10-08T12:49:53Z,MERGED,True,79,19,2,https://github.com/mrmacete,Fix parallel wait,5,[],https://github.com/frida/frida-gum/pull/359,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/359,"Multiple threads can now wait on the same message type. At every incoming message one thread at a time gets woken up in a FIFO fashion. As a plus, it makes sure no exceptions thrown from the wait callback could cause an infinite wait.
Added also a test case for this scenario.","Multiple threads can now wait on the same message type. At every incoming message one thread at a time gets woken up in a FIFO fashion. As a plus, it makes sure no exceptions thrown from the wait callback could cause an infinite wait.
Added also a test case for this scenario.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,360,2019-10-10T19:07:10Z,2019-10-11T02:32:20Z,2019-10-11T02:45:04Z,MERGED,True,35,24,1,https://github.com/strazzere,Make frida-gum linker seeking future-proof on Android,6,[],https://github.com/frida/frida-gum/pull/360,https://github.com/strazzere,1,https://github.com/frida/frida-gum/pull/360,"Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.","Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,360,2019-10-10T19:07:10Z,2019-10-11T02:32:20Z,2019-10-11T02:45:04Z,MERGED,True,35,24,1,https://github.com/strazzere,Make frida-gum linker seeking future-proof on Android,6,[],https://github.com/frida/frida-gum/pull/360,https://github.com/strazzere,2,https://github.com/frida/frida-gum/pull/360#issuecomment-540834269,"Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.",I believe I've fixed everything and put it into the normal frida styling.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,360,2019-10-10T19:07:10Z,2019-10-11T02:32:20Z,2019-10-11T02:45:04Z,MERGED,True,35,24,1,https://github.com/strazzere,Make frida-gum linker seeking future-proof on Android,6,[],https://github.com/frida/frida-gum/pull/360,https://github.com/strazzere,3,https://github.com/frida/frida-gum/pull/360#issuecomment-540835585,"Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.","Erm... Do not merge yet please, I need to do a few more tests to validate things.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,360,2019-10-10T19:07:10Z,2019-10-11T02:32:20Z,2019-10-11T02:45:04Z,MERGED,True,35,24,1,https://github.com/strazzere,Make frida-gum linker seeking future-proof on Android,6,[],https://github.com/frida/frida-gum/pull/360,https://github.com/strazzere,4,https://github.com/frida/frida-gum/pull/360#issuecomment-540847304,"Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.",This should be in a good state for a second pass by you @oleavr when you have a moment or two.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,360,2019-10-10T19:07:10Z,2019-10-11T02:32:20Z,2019-10-11T02:45:04Z,MERGED,True,35,24,1,https://github.com/strazzere,Make frida-gum linker seeking future-proof on Android,6,[],https://github.com/frida/frida-gum/pull/360,https://github.com/strazzere,5,https://github.com/frida/frida-gum/pull/360#issuecomment-540867719,"Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.","/me cringes
I think it's ready? :)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,360,2019-10-10T19:07:10Z,2019-10-11T02:32:20Z,2019-10-11T02:45:04Z,MERGED,True,35,24,1,https://github.com/strazzere,Make frida-gum linker seeking future-proof on Android,6,[],https://github.com/frida/frida-gum/pull/360,https://github.com/strazzere,6,https://github.com/frida/frida-gum/pull/360#issuecomment-540872550,"Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.","I think it's all done? +35 ‚àí24 the review has now eclipsed the code changes üòÜ
You should definitely post your linter config, but also I need to skim the code more just to get a feel for it üòè",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,360,2019-10-10T19:07:10Z,2019-10-11T02:32:20Z,2019-10-11T02:45:04Z,MERGED,True,35,24,1,https://github.com/strazzere,Make frida-gum linker seeking future-proof on Android,6,[],https://github.com/frida/frida-gum/pull/360,https://github.com/strazzere,7,https://github.com/frida/frida-gum/pull/360#issuecomment-540875136,"Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.",üôå üôå üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,360,2019-10-10T19:07:10Z,2019-10-11T02:32:20Z,2019-10-11T02:45:04Z,MERGED,True,35,24,1,https://github.com/strazzere,Make frida-gum linker seeking future-proof on Android,6,[],https://github.com/frida/frida-gum/pull/360,https://github.com/oleavr,8,https://github.com/frida/frida-gum/pull/360#issuecomment-540876599,"Per frida/frida#1026 and #354 -
I looked into how the linker is meant to be established in Android going forward. According to
https://source.android.com/devices/architecture/modular-system/runtime#bionic-changes - Google
intends to maintain both /system/bin/linker and /system/bin/linker64 as a symlink, pointing
to what the real file will be.
This means if we look for those files and they are symlinks, the linker should be mapped to memory
using the files realpath. So for future changes, looking to see what the symlink resolves as should
make this work in all future version (and keep its backwards compatibility).
Tested this on Android 5, 7.2, 8.0.1, 9 and 10.","Yay! üí•üôå

the review has now eclipsed the code changes üòÜ

üòÇ

You should definitely post your linter config

Unfortunately I don't have any ‚Äì I'm a biological linter üòÖ",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,361,2019-10-13T01:50:36Z,2019-10-13T22:07:24Z,2019-10-13T22:12:38Z,CLOSED,False,0,2,1,https://github.com/muhzii,Fix linker lookup in Android,1,[],https://github.com/frida/frida-gum/pull/361,https://github.com/muhzii,1,https://github.com/frida/frida-gum/pull/361,"That g_free call shouldn't be here as linker_path is being accessed later from GumModuleDetails
Fixes: frida/frida#1046","That g_free call shouldn't be here as linker_path is being accessed later from GumModuleDetails
Fixes: frida/frida#1046",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,361,2019-10-13T01:50:36Z,2019-10-13T22:07:24Z,2019-10-13T22:12:38Z,CLOSED,False,0,2,1,https://github.com/muhzii,Fix linker lookup in Android,1,[],https://github.com/frida/frida-gum/pull/361,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/361#issuecomment-541464432,"That g_free call shouldn't be here as linker_path is being accessed later from GumModuleDetails
Fixes: frida/frida#1046","Oops, good catch. Thanks a lot!
This solution would unfortunately replace this use-after-free with a memory leak, so I have implemented a slightly different solution in 1f97c98.",True,{'THUMBS_UP': ['https://github.com/muhzii']}
frida/frida-gum,https://github.com/frida/frida-gum,362,2019-10-14T07:57:29Z,2019-10-14T12:59:04Z,2019-10-14T12:59:04Z,MERGED,True,0,4,1,https://github.com/alvarofe,Handle correctly arm/thumb when restoring exception on Darwin,1,[],https://github.com/frida/frida-gum/pull/362,https://github.com/alvarofe,1,https://github.com/frida/frida-gum/pull/362,Use the same fix used in #352 for Darwin ARM devices - I don't have any to test but it should work.,Use the same fix used in #352 for Darwin ARM devices - I don't have any to test but it should work.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,369,2019-10-30T05:12:57Z,2019-11-06T04:21:37Z,2019-11-06T04:22:09Z,MERGED,True,144,38,3,https://github.com/gebing,Improve NativeFunction to support variadic functions,18,[],https://github.com/frida/frida-gum/pull/369,https://github.com/gebing,1,https://github.com/frida/frida-gum/pull/369,Improvement NativeFunction of support variadic function by issue #366.,Improvement NativeFunction of support variadic function by issue #366.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,369,2019-10-30T05:12:57Z,2019-11-06T04:21:37Z,2019-11-06T04:22:09Z,MERGED,True,144,38,3,https://github.com/gebing,Improve NativeFunction to support variadic functions,18,[],https://github.com/frida/frida-gum/pull/369,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/369#issuecomment-549192858,Improvement NativeFunction of support variadic function by issue #366.,"(Sorry for the delay in review, last week was very busy.)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,369,2019-10-30T05:12:57Z,2019-11-06T04:21:37Z,2019-11-06T04:22:09Z,MERGED,True,144,38,3,https://github.com/gebing,Improve NativeFunction to support variadic functions,18,[],https://github.com/frida/frida-gum/pull/369,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/369#issuecomment-550136721,Improvement NativeFunction of support variadic function by issue #366.,"Thanks, merged! üöÄ",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,375,2019-11-14T18:21:45Z,2019-11-14T23:57:14Z,2019-11-14T23:58:02Z,MERGED,True,121,7,11,https://github.com/jonwilson030981,Armbe8,13,[],https://github.com/frida/frida-gum/pull/375,https://github.com/jonwilson030981,1,https://github.com/frida/frida-gum/pull/375,"I have added support for ARMBE8. This architecture has little endian code, but big endian data. ARMBE32 has big endian code and data, but is considered legacy, accordingly I have not implemented it.
Also, TinyCC doesn't appear to support BE8, so that isn't implemented for now.","I have added support for ARMBE8. This architecture has little endian code, but big endian data. ARMBE32 has big endian code and data, but is considered legacy, accordingly I have not implemented it.
Also, TinyCC doesn't appear to support BE8, so that isn't implemented for now.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,375,2019-11-14T18:21:45Z,2019-11-14T23:57:14Z,2019-11-14T23:58:02Z,MERGED,True,121,7,11,https://github.com/jonwilson030981,Armbe8,13,[],https://github.com/frida/frida-gum/pull/375,https://github.com/jonwilson030981,2,https://github.com/frida/frida-gum/pull/375#issuecomment-554079117,"I have added support for ARMBE8. This architecture has little endian code, but big endian data. ARMBE32 has big endian code and data, but is considered legacy, accordingly I have not implemented it.
Also, TinyCC doesn't appear to support BE8, so that isn't implemented for now.","Those changes all look fine. I think if we can just squash all into one that might be easiest. I can just about get by squashing adjacent commits, but trying to merge ones which aren't might be a bit too adventurous for me!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,375,2019-11-14T18:21:45Z,2019-11-14T23:57:14Z,2019-11-14T23:58:02Z,MERGED,True,121,7,11,https://github.com/jonwilson030981,Armbe8,13,[],https://github.com/frida/frida-gum/pull/375,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/375#issuecomment-554141646,"I have added support for ARMBE8. This architecture has little endian code, but big endian data. ARMBE32 has big endian code and data, but is considered legacy, accordingly I have not implemented it.
Also, TinyCC doesn't appear to support BE8, so that isn't implemented for now.","Thanks, merged!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,376,2019-11-22T20:28:42Z,2019-11-22T22:32:38Z,2019-11-22T22:32:38Z,MERGED,True,2,20,1,https://github.com/mrmacete,Use g_mkstemp() in place of mkstemps(),1,[],https://github.com/frida/frida-gum/pull/376,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/376,"Because on iOS 13.x mkstemps() uses arc4random() and that
breaks os_unfair_lock when using Stalker.","Because on iOS 13.x mkstemps() uses arc4random() and that
breaks os_unfair_lock when using Stalker.",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,377,2019-11-27T20:40:49Z,2019-12-05T18:18:13Z,2019-12-05T18:18:13Z,CLOSED,False,5,1,1,https://github.com/Manouchehri,Fix rounding issue with time.,1,[],https://github.com/frida/frida-gum/pull/377,https://github.com/Manouchehri,1,https://github.com/frida/frida-gum/pull/377,,,True,{'THUMBS_UP': ['https://github.com/jmis1337']}
frida/frida-gum,https://github.com/frida/frida-gum,377,2019-11-27T20:40:49Z,2019-12-05T18:18:13Z,2019-12-05T18:18:13Z,CLOSED,False,5,1,1,https://github.com/Manouchehri,Fix rounding issue with time.,1,[],https://github.com/frida/frida-gum/pull/377,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/377#issuecomment-562250585,,"Thanks, good catch! Fixed in e6a590f, which also fixes a similar flaw in MonotonicallyIncreasingTime().",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,379,2019-12-04T20:28:08Z,2019-12-06T01:58:34Z,2019-12-06T01:58:34Z,CLOSED,False,5,0,5,https://github.com/Manouchehri,Adds size support for ELF symbols.,1,[],https://github.com/frida/frida-gum/pull/379,https://github.com/Manouchehri,1,https://github.com/frida/frida-gum/pull/379,"Not sure if this breaks building on other platforms, but seems to work on Linux.","Not sure if this breaks building on other platforms, but seems to work on Linux.",True,{'THUMBS_UP': ['https://github.com/jmis1337']}
frida/frida-gum,https://github.com/frida/frida-gum,379,2019-12-04T20:28:08Z,2019-12-06T01:58:34Z,2019-12-06T01:58:34Z,CLOSED,False,5,0,5,https://github.com/Manouchehri,Adds size support for ELF symbols.,1,[],https://github.com/frida/frida-gum/pull/379,https://github.com/jmis1337,2,https://github.com/frida/frida-gum/pull/379#issuecomment-561837412,"Not sure if this breaks building on other platforms, but seems to work on Linux.",This would be very useful to port jemalloc parser to frida.,True,{'THUMBS_UP': ['https://github.com/Manouchehri']}
frida/frida-gum,https://github.com/frida/frida-gum,379,2019-12-04T20:28:08Z,2019-12-06T01:58:34Z,2019-12-06T01:58:34Z,CLOSED,False,5,0,5,https://github.com/Manouchehri,Adds size support for ELF symbols.,1,[],https://github.com/frida/frida-gum/pull/379,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/379#issuecomment-562341400,"Not sure if this breaks building on other platforms, but seems to work on Linux.","Actually, scratch that. Doesn't seem to be available on Darwin, at least not without DWARF-parsing. We can make this a Linux/ELF-only feature initially.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,379,2019-12-04T20:28:08Z,2019-12-06T01:58:34Z,2019-12-06T01:58:34Z,CLOSED,False,5,0,5,https://github.com/Manouchehri,Adds size support for ELF symbols.,1,[],https://github.com/frida/frida-gum/pull/379,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/379#issuecomment-562341645,"Not sure if this breaks building on other platforms, but seems to work on Linux.",Will take a quick stab at landing this.,True,{'THUMBS_UP': ['https://github.com/Manouchehri']}
frida/frida-gum,https://github.com/frida/frida-gum,379,2019-12-04T20:28:08Z,2019-12-06T01:58:34Z,2019-12-06T01:58:34Z,CLOSED,False,5,0,5,https://github.com/Manouchehri,Adds size support for ELF symbols.,1,[],https://github.com/frida/frida-gum/pull/379,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/379#issuecomment-562398890,"Not sure if this breaks building on other platforms, but seems to work on Linux.",Landed in 2da7de1. Thanks!,True,{'HOORAY': ['https://github.com/Manouchehri']}
frida/frida-gum,https://github.com/frida/frida-gum,382,2019-12-06T12:01:28Z,2019-12-06T15:05:39Z,2019-12-06T15:09:28Z,MERGED,True,7,1,1,https://github.com/jonwilson030981,Fix thread enumeration issue on Linux when using Yama,1,[],https://github.com/frida/frida-gum/pull/382,https://github.com/jonwilson030981,1,https://github.com/frida/frida-gum/pull/382,"With Yama LSM enabled processes by default can only ptrace their children (unless otherwise configured by sysctl). This appears to be the default setting on Ubuntu Linux. More aggressive changes may be required for other modes.
This patch uses prctl(PR_SET_PTRACER) to give permission to the ptracing thread (in another process) to attach.

https://www.kernel.org/doc/Documentation/security/Yama.txt
https://github.com/torvalds/linux/blob/master/security/yama/yama_lsm.c

Note also that Process.enumerateThreads() doesn't raise any exceptions on failure, instead simply returning an empty or reduced set. This may help to identify the cause if subsequent issues are raised. The following issues possibly relate:

frida/frida#489
#116","With Yama LSM enabled processes by default can only ptrace their children (unless otherwise configured by sysctl). This appears to be the default setting on Ubuntu Linux. More aggressive changes may be required for other modes.
This patch uses prctl(PR_SET_PTRACER) to give permission to the ptracing thread (in another process) to attach.

https://www.kernel.org/doc/Documentation/security/Yama.txt
https://github.com/torvalds/linux/blob/master/security/yama/yama_lsm.c

Note also that Process.enumerateThreads() doesn't raise any exceptions on failure, instead simply returning an empty or reduced set. This may help to identify the cause if subsequent issues are raised. The following issues possibly relate:

frida/frida#489
#116",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,382,2019-12-06T12:01:28Z,2019-12-06T15:05:39Z,2019-12-06T15:09:28Z,MERGED,True,7,1,1,https://github.com/jonwilson030981,Fix thread enumeration issue on Linux when using Yama,1,[],https://github.com/frida/frida-gum/pull/382,https://github.com/jonwilson030981,2,https://github.com/frida/frida-gum/pull/382#issuecomment-562574319,"With Yama LSM enabled processes by default can only ptrace their children (unless otherwise configured by sysctl). This appears to be the default setting on Ubuntu Linux. More aggressive changes may be required for other modes.
This patch uses prctl(PR_SET_PTRACER) to give permission to the ptracing thread (in another process) to attach.

https://www.kernel.org/doc/Documentation/security/Yama.txt
https://github.com/torvalds/linux/blob/master/security/yama/yama_lsm.c

Note also that Process.enumerateThreads() doesn't raise any exceptions on failure, instead simply returning an empty or reduced set. This may help to identify the cause if subsequent issues are raised. The following issues possibly relate:

frida/frida#489
#116","Sorry, old coding style habits die hard! Hope this is better and by forcing an amended commit I don't make the merge hard!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,382,2019-12-06T12:01:28Z,2019-12-06T15:05:39Z,2019-12-06T15:09:28Z,MERGED,True,7,1,1,https://github.com/jonwilson030981,Fix thread enumeration issue on Linux when using Yama,1,[],https://github.com/frida/frida-gum/pull/382,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/382#issuecomment-562609051,"With Yama LSM enabled processes by default can only ptrace their children (unless otherwise configured by sysctl). This appears to be the default setting on Ubuntu Linux. More aggressive changes may be required for other modes.
This patch uses prctl(PR_SET_PTRACER) to give permission to the ptracing thread (in another process) to attach.

https://www.kernel.org/doc/Documentation/security/Yama.txt
https://github.com/torvalds/linux/blob/master/security/yama/yama_lsm.c

Note also that Process.enumerateThreads() doesn't raise any exceptions on failure, instead simply returning an empty or reduced set. This may help to identify the cause if subsequent issues are raised. The following issues possibly relate:

frida/frida#489
#116",No worries! Thanks for digging into and fixing this ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,384,2019-12-10T15:01:35Z,2019-12-12T08:37:21Z,2019-12-16T12:28:32Z,CLOSED,False,25,1,2,https://github.com/bigboysun,Bigboysun patch 1,2,[],https://github.com/frida/frida-gum/pull/384,https://github.com/bigboysun,1,https://github.com/frida/frida-gum/pull/384,"fixed #383
Has been tested","fixed #383
Has been tested",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,384,2019-12-10T15:01:35Z,2019-12-12T08:37:21Z,2019-12-16T12:28:32Z,CLOSED,False,25,1,2,https://github.com/bigboysun,Bigboysun patch 1,2,[],https://github.com/frida/frida-gum/pull/384,https://github.com/bigboysun,2,https://github.com/frida/frida-gum/pull/384#issuecomment-564905527,"fixed #383
Has been tested","The situation is far more complicated than expected. The jump of the IT instruction only allows one instruction, and the remote jump is not allowed. It needs to be modified.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,384,2019-12-10T15:01:35Z,2019-12-12T08:37:21Z,2019-12-16T12:28:32Z,CLOSED,False,25,1,2,https://github.com/bigboysun,Bigboysun patch 1,2,[],https://github.com/frida/frida-gum/pull/384,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/384#issuecomment-565255283,"fixed #383
Has been tested","Thanks for looking into this! I believe we already have some IT handling in our relocator, so it sounds like there's something missing there.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,385,2019-12-10T21:12:17Z,2019-12-13T21:58:35Z,2019-12-13T21:58:35Z,MERGED,True,94,0,4,https://github.com/Manouchehri,Add NativePointer#mapByteArray(),1,[],https://github.com/frida/frida-gum/pull/385,https://github.com/Manouchehri,1,https://github.com/frida/frida-gum/pull/385,Useful if you want to avoid needing to constantly use .writeByteArray(...). Might solve #320.,Useful if you want to avoid needing to constantly use .writeByteArray(...). Might solve #320.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,387,2019-12-16T12:51:15Z,2019-12-17T03:10:20Z,2019-12-17T03:10:20Z,CLOSED,False,270,11,5,https://github.com/bigboysun,fix https://github.com/frida/frida-gum/issues/383,1,[],https://github.com/frida/frida-gum/pull/387,https://github.com/bigboysun,1,https://github.com/frida/frida-gum/pull/387,"Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details","Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/bigboysun,1,https://github.com/frida/frida-gum/pull/388,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details","see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/bigboysun,2,https://github.com/frida/frida-gum/pull/388#issuecomment-566363169,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details","The original version does not handle the following functions correctly. See attachment„ÄÇ
int test_itet(int inc, int numb);
int test_itt(int * x);
int test_itte(int x);
This pr fixes such problems„ÄÇ
test.S.zip",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/bigboysun,3,https://github.com/frida/frida-gum/pull/388#issuecomment-566836700,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details",please pay more attentionÔºåthis is very importent to android app.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/388#issuecomment-566838922,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details","Thanks for digging into this! Before I start the review, could you please make sure all of the added/changed code follows our style? You can find the style guide here.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/bigboysun,5,https://github.com/frida/frida-gum/pull/388#issuecomment-566839567,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details",okÔºålet me try,True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/bigboysun,6,https://github.com/frida/frida-gum/pull/388#issuecomment-567048914,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details",please check again.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/bigboysun,7,https://github.com/frida/frida-gum/pull/388#issuecomment-569198027,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details",please,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/oleavr,8,https://github.com/frida/frida-gum/pull/388#issuecomment-570093897,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details","Thanks! Sorry for the delay here, should finally get to this PR this week. Style still looks off but I will make the final adjustments while merging.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,388,2019-12-17T03:19:00Z,2020-01-02T04:43:06Z,2020-01-02T04:43:07Z,CLOSED,False,327,25,5,https://github.com/bigboysun,fix IT block bug,4,[],https://github.com/frida/frida-gum/pull/388,https://github.com/oleavr,9,https://github.com/frida/frida-gum/pull/388#issuecomment-570117212,"see #383
Fixed the issue where single instruction was rewritten into multiple instructions in IT instruction;
Fixed the problem that the B instruction with condition in the IT instruction condition needs to be removed after ‚Äúrewrite‚Äù;
Rewritten IT instruction block ‚Äúrewrite‚Äù logic
See test cases for details",Tweaked version landed as 0127dc1. Thanks so much for this awesome work! ‚ù§Ô∏è,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,394,2020-01-07T01:33:15Z,2020-01-07T02:26:03Z,2020-01-07T02:29:09Z,CLOSED,False,9,0,1,https://github.com/Manouchehri,Fix linker path lookup on Android 10 when inside a sandbox.,1,[],https://github.com/frida/frida-gum/pull/394,https://github.com/Manouchehri,1,https://github.com/frida/frida-gum/pull/394,Fixes #393. Not the prettiest but it works and I need that. =P,Fixes #393. Not the prettiest but it works and I need that. =P,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,394,2020-01-07T01:33:15Z,2020-01-07T02:26:03Z,2020-01-07T02:29:09Z,CLOSED,False,9,0,1,https://github.com/Manouchehri,Fix linker path lookup on Android 10 when inside a sandbox.,1,[],https://github.com/frida/frida-gum/pull/394,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/394#issuecomment-571397103,Fixes #393. Not the prettiest but it works and I need that. =P,"Hmm, I'm leaning towards just ditching all the cleverness and going for something stupid: pick either new or old hard-coded path based on Android API level.",True,{'THUMBS_UP': ['https://github.com/Manouchehri']}
frida/frida-gum,https://github.com/frida/frida-gum,394,2020-01-07T01:33:15Z,2020-01-07T02:26:03Z,2020-01-07T02:29:09Z,CLOSED,False,9,0,1,https://github.com/Manouchehri,Fix linker path lookup on Android 10 when inside a sandbox.,1,[],https://github.com/frida/frida-gum/pull/394,https://github.com/Manouchehri,3,https://github.com/frida/frida-gum/pull/394#issuecomment-571399905,Fixes #393. Not the prettiest but it works and I need that. =P,I have no real preference as long as it works. =),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,394,2020-01-07T01:33:15Z,2020-01-07T02:26:03Z,2020-01-07T02:29:09Z,CLOSED,False,9,0,1,https://github.com/Manouchehri,Fix linker path lookup on Android 10 when inside a sandbox.,1,[],https://github.com/frida/frida-gum/pull/394,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/394#issuecomment-571403829,Fixes #393. Not the prettiest but it works and I need that. =P,"My mind is in a different context so I'm not able to think about a good solution here, but this is a regression so I don't want it to linger and bite users. Reverted to the proposed solution in 3ca8cd3. Sorry @strazzere - hopefully we'll come up with something better once we've had some time to chew on this one üòÖ",True,{'THUMBS_UP': ['https://github.com/eugenekolo']}
frida/frida-gum,https://github.com/frida/frida-gum,397,2020-02-14T10:34:43Z,2020-02-14T15:08:36Z,2020-02-14T15:08:36Z,MERGED,True,11,5,1,https://github.com/mrmacete,Honor masks_count also as input argument,2,[],https://github.com/frida/frida-gum/pull/397,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/397,"So that it's used as maximum size for output arrays. The semantics of this in/out argument is the same in task_get_exception_ports and task_swap_exception_ports.
Excerpt from the man page:

[pointer to in/out scalar]
On input, the maximum size of the array
buffers; on output, the number of returned <exception type mask,
exception port, behavior, flavor> sets returned.","So that it's used as maximum size for output arrays. The semantics of this in/out argument is the same in task_get_exception_ports and task_swap_exception_ports.
Excerpt from the man page:

[pointer to in/out scalar]
On input, the maximum size of the array
buffers; on output, the number of returned <exception type mask,
exception port, behavior, flavor> sets returned.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,399,2020-03-02T01:26:18Z,2020-03-20T23:31:21Z,2020-03-21T16:28:16Z,CLOSED,False,17,1,2,https://github.com/bannsec,Handle nested signals,2,[],https://github.com/frida/frida-gum/pull/399,https://github.com/bannsec,1,https://github.com/frida/frida-gum/pull/399,"Fixed the issue here: frida/frida#1193
Short is that by default linux won't allow handling of the same signal inside itself. I.e.: segfault handling inside segfault handling.
NOTE: The way I have to test this involves sending a signal, which kills the process after being caught. The test passes but based on the way the tests for frida-gum work, any test after it fails due to the process crashing.
Not sure how to handle that, since it's not really a failed test, just how the harness handles tests.","Fixed the issue here: frida/frida#1193
Short is that by default linux won't allow handling of the same signal inside itself. I.e.: segfault handling inside segfault handling.
NOTE: The way I have to test this involves sending a signal, which kills the process after being caught. The test passes but based on the way the tests for frida-gum work, any test after it fails due to the process crashing.
Not sure how to handle that, since it's not really a failed test, just how the harness handles tests.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,399,2020-03-02T01:26:18Z,2020-03-20T23:31:21Z,2020-03-21T16:28:16Z,CLOSED,False,17,1,2,https://github.com/bannsec,Handle nested signals,2,[],https://github.com/frida/frida-gum/pull/399,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/399#issuecomment-594041135,"Fixed the issue here: frida/frida#1193
Short is that by default linux won't allow handling of the same signal inside itself. I.e.: segfault handling inside segfault handling.
NOTE: The way I have to test this involves sending a signal, which kills the process after being caught. The test passes but based on the way the tests for frida-gum work, any test after it fails due to the process crashing.
Not sure how to handle that, since it's not really a failed test, just how the harness handles tests.","Nice! I think one way to test this is to allocate a page of memory (look for gum_alloc_n_pages in other tests) that's initially read-only, and have the test itself try to write to that. Then in the handler it can be flip the page to read-write and return true.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,399,2020-03-02T01:26:18Z,2020-03-20T23:31:21Z,2020-03-21T16:28:16Z,CLOSED,False,17,1,2,https://github.com/bannsec,Handle nested signals,2,[],https://github.com/frida/frida-gum/pull/399,https://github.com/bannsec,3,https://github.com/frida/frida-gum/pull/399#issuecomment-596246519,"Fixed the issue here: frida/frida#1193
Short is that by default linux won't allow handling of the same signal inside itself. I.e.: segfault handling inside segfault handling.
NOTE: The way I have to test this involves sending a signal, which kills the process after being caught. The test passes but based on the way the tests for frida-gum work, any test after it fails due to the process crashing.
Not sure how to handle that, since it's not really a failed test, just how the harness handles tests.",Ok. Updated it to use access exception as you mentioned and it seems to pass now without segfaulting out.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,399,2020-03-02T01:26:18Z,2020-03-20T23:31:21Z,2020-03-21T16:28:16Z,CLOSED,False,17,1,2,https://github.com/bannsec,Handle nested signals,2,[],https://github.com/frida/frida-gum/pull/399,https://github.com/bannsec,4,https://github.com/frida/frida-gum/pull/399#issuecomment-599592399,"Fixed the issue here: frida/frida#1193
Short is that by default linux won't allow handling of the same signal inside itself. I.e.: segfault handling inside segfault handling.
NOTE: The way I have to test this involves sending a signal, which kills the process after being caught. The test passes but based on the way the tests for frida-gum work, any test after it fails due to the process crashing.
Not sure how to handle that, since it's not really a failed test, just how the harness handles tests.",@oleavr -- just rebased my changes on master. Anything else you need?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,399,2020-03-02T01:26:18Z,2020-03-20T23:31:21Z,2020-03-21T16:28:16Z,CLOSED,False,17,1,2,https://github.com/bannsec,Handle nested signals,2,[],https://github.com/frida/frida-gum/pull/399,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/399#issuecomment-601401709,"Fixed the issue here: frida/frida#1193
Short is that by default linux won't allow handling of the same signal inside itself. I.e.: segfault handling inside segfault handling.
NOTE: The way I have to test this involves sending a signal, which kills the process after being caught. The test passes but based on the way the tests for frida-gum work, any test after it fails due to the process crashing.
Not sure how to handle that, since it's not really a failed test, just how the harness handles tests.","@bannsec Thanks! Nope, will get to this soon. Nearly out of the iOS rabbithole I've been in these last few weeks.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,399,2020-03-02T01:26:18Z,2020-03-20T23:31:21Z,2020-03-21T16:28:16Z,CLOSED,False,17,1,2,https://github.com/bannsec,Handle nested signals,2,[],https://github.com/frida/frida-gum/pull/399,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/399#issuecomment-601953177,"Fixed the issue here: frida/frida#1193
Short is that by default linux won't allow handling of the same signal inside itself. I.e.: segfault handling inside segfault handling.
NOTE: The way I have to test this involves sending a signal, which kills the process after being caught. The test passes but based on the way the tests for frida-gum work, any test after it fails due to the process crashing.
Not sure how to handle that, since it's not really a failed test, just how the harness handles tests.",Landed with a few tiny tweaks in 4fca010. Thanks! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,402,2020-03-26T16:39:55Z,2020-03-26T17:30:05Z,2020-03-26T17:30:05Z,MERGED,True,6,0,2,https://github.com/mrmacete,Ensure script context is destroyed even if the script is still unloaded,1,[],https://github.com/frida/frida-gum/pull/402,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/402,"This ensures that ultimately the script core is disposed, which in turn disposes its reference to the exceptor.
Failing to do so caused indefinite hang when attaching after detaching in presence of unloaded scripts, for the exceptor thread remaining in the target process.","This ensures that ultimately the script core is disposed, which in turn disposes its reference to the exceptor.
Failing to do so caused indefinite hang when attaching after detaching in presence of unloaded scripts, for the exceptor thread remaining in the target process.",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,404,2020-03-30T07:19:33Z,2020-04-28T05:30:17Z,2020-04-28T05:30:18Z,CLOSED,False,62,15,1,https://github.com/zuypt,Massively improve Stalker's reliability on WoW64,1,[],https://github.com/frida/frida-gum/pull/404,https://github.com/zuypt,1,https://github.com/frida/frida-gum/pull/404,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,404,2020-03-30T07:19:33Z,2020-04-28T05:30:17Z,2020-04-28T05:30:18Z,CLOSED,False,62,15,1,https://github.com/zuypt,Massively improve Stalker's reliability on WoW64,1,[],https://github.com/frida/frida-gum/pull/404,https://github.com/zuypt,2,https://github.com/frida/frida-gum/pull/404#issuecomment-606511045,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,The issue is not done here. I just discovered win32u!Wow64SystemServiceCall that jump to win32u!Wow64Transition. Looks like each DLL has its own Wow64Transition. Need to find a more generic way fix this issue. Please don't merge for now,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,404,2020-03-30T07:19:33Z,2020-04-28T05:30:17Z,2020-04-28T05:30:18Z,CLOSED,False,62,15,1,https://github.com/zuypt,Massively improve Stalker's reliability on WoW64,1,[],https://github.com/frida/frida-gum/pull/404,https://github.com/zuypt,3,https://github.com/frida/frida-gum/pull/404#issuecomment-606532119,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,"Using windbg to attach to a 32bit notepad process.
0:007> x *!Wow64Transition
75c44fc0          USER32!Wow64Transition = <no type information>
75c44fc0          USER32!Wow64Transition = <no type information>
76129adc          KERNELBASE!Wow64Transition = <no type information>
76129adc          KERNELBASE!Wow64Transition = <no type information>
761f4010          win32u!Wow64Transition = <no type information>
761f4010          win32u!Wow64Transition = <no type information>
778b1f90          KERNEL32!Wow64Transition = <no type information>
778b1f90          KERNEL32!Wow64Transition = <no type information>
77d91228          ntdll!Wow64Transition = <no type information>

Should I handle all these cases ?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,404,2020-03-30T07:19:33Z,2020-04-28T05:30:17Z,2020-04-28T05:30:18Z,CLOSED,False,62,15,1,https://github.com/zuypt,Massively improve Stalker's reliability on WoW64,1,[],https://github.com/frida/frida-gum/pull/404,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/404#issuecomment-606674462,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,@zuypt Ooh nice find. That would be great! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,404,2020-03-30T07:19:33Z,2020-04-28T05:30:17Z,2020-04-28T05:30:18Z,CLOSED,False,62,15,1,https://github.com/zuypt,Massively improve Stalker's reliability on WoW64,1,[],https://github.com/frida/frida-gum/pull/404,https://github.com/zuypt,5,https://github.com/frida/frida-gum/pull/404#issuecomment-607209074,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,"@zuypt Ooh nice find. That would be great! ü§ò

i pushed it can you check.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,404,2020-03-30T07:19:33Z,2020-04-28T05:30:17Z,2020-04-28T05:30:18Z,CLOSED,False,62,15,1,https://github.com/zuypt,Massively improve Stalker's reliability on WoW64,1,[],https://github.com/frida/frida-gum/pull/404,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/404#issuecomment-609465152,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,"Thanks! Don't worry, I'll perform the final tweaks before merging. Currently heads down updating dependencies, will get to this before the next release.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,404,2020-03-30T07:19:33Z,2020-04-28T05:30:17Z,2020-04-28T05:30:18Z,CLOSED,False,62,15,1,https://github.com/zuypt,Massively improve Stalker's reliability on WoW64,1,[],https://github.com/frida/frida-gum/pull/404,https://github.com/oleavr,7,https://github.com/frida/frida-gum/pull/404#issuecomment-612552541,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,"(Still working on the dependencies, but getting there.)",True,{'THUMBS_UP': ['https://github.com/zuypt']}
frida/frida-gum,https://github.com/frida/frida-gum,404,2020-03-30T07:19:33Z,2020-04-28T05:30:17Z,2020-04-28T05:30:18Z,CLOSED,False,62,15,1,https://github.com/zuypt,Massively improve Stalker's reliability on WoW64,1,[],https://github.com/frida/frida-gum/pull/404,https://github.com/oleavr,8,https://github.com/frida/frida-gum/pull/404#issuecomment-620389769,My windows version is 1909 (OS Build 18363.720). Beside ntdll!Wow64Transition there is also kernel32!Wow64Transition but both of them point to the same heaven gate address. kernel32!Wow64SystemServiceCall and ntdll!Wow64SystemServiceCall each jump to their own Wow64Transition. I'm not sure if older windows versions have kernel32!Wow64Transition and which one gonna be used when.  only checks for jump to ntdll!Wow64Transition hence kernel32!Wow64Transition case is missed. LoadLibrary uses kernel!Wow64SystemServiceCall therefore stalker breaks everytime LoadLibrary is  called.,Landed with some minor tweaks in b8d6b2a. Thanks! ü§ò,True,{'ROCKET': ['https://github.com/zuypt']}
frida/frida-gum,https://github.com/frida/frida-gum,406,2020-04-07T13:28:17Z,2020-04-12T11:58:45Z,2020-04-12T11:58:46Z,CLOSED,False,4835,82,14,https://github.com/jonwilson030981,Stalker: Port to 32-bit ARM [WIP],160,[],https://github.com/frida/frida-gum/pull/406,https://github.com/jonwilson030981,1,https://github.com/frida/frida-gum/pull/406,,,True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,409,2020-04-09T17:23:54Z,2020-04-09T20:13:14Z,2020-04-09T20:13:14Z,CLOSED,False,45,0,1,https://github.com/mrmacete,Expose ptrauth.h to CModule,4,[],https://github.com/frida/frida-gum/pull/409,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/409,Depends on frida/tinycc#4,Depends on frida/tinycc#4,True,{'ROCKET': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,409,2020-04-09T17:23:54Z,2020-04-09T20:13:14Z,2020-04-09T20:13:14Z,CLOSED,False,45,0,1,https://github.com/mrmacete,Expose ptrauth.h to CModule,4,[],https://github.com/frida/frida-gum/pull/409,https://github.com/mrmacete,2,https://github.com/frida/frida-gum/pull/409#issuecomment-611700769,Depends on frida/tinycc#4,i guess this can be closed and the header moved to tcc,True,{'THUMBS_UP': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,410,2020-04-11T13:25:20Z,2020-04-13T17:32:40Z,2020-04-13T17:32:40Z,MERGED,True,229,2,6,https://github.com/bigboysun,ThumbRelocator: Implement handling of VLDR,8,[],https://github.com/frida/frida-gum/pull/410,https://github.com/bigboysun,1,https://github.com/frida/frida-gum/pull/410,fixed #408,fixed #408,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,410,2020-04-11T13:25:20Z,2020-04-13T17:32:40Z,2020-04-13T17:32:40Z,MERGED,True,229,2,6,https://github.com/bigboysun,ThumbRelocator: Implement handling of VLDR,8,[],https://github.com/frida/frida-gum/pull/410,https://github.com/bigboysun,2,https://github.com/frida/frida-gum/pull/410#issuecomment-612635566,fixed #408,check please,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,410,2020-04-11T13:25:20Z,2020-04-13T17:32:40Z,2020-04-13T17:32:40Z,MERGED,True,229,2,6,https://github.com/bigboysun,ThumbRelocator: Implement handling of VLDR,8,[],https://github.com/frida/frida-gum/pull/410,https://github.com/bigboysun,3,https://github.com/frida/frida-gum/pull/410#issuecomment-612635755,fixed #408,"In the process of dealing with this problem, it is found that the lower version of ""capstone"" cannot deal with instructions such as ""Vsub. F64"". It is time to synchronize capstone.
ee31 0b40   vsub.f64  d0, d1, d0
eeb4 0bc1   vcmpe.f64 d0, d1",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,410,2020-04-11T13:25:20Z,2020-04-13T17:32:40Z,2020-04-13T17:32:40Z,MERGED,True,229,2,6,https://github.com/bigboysun,ThumbRelocator: Implement handling of VLDR,8,[],https://github.com/frida/frida-gum/pull/410,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/410#issuecomment-612700168,fixed #408,"In the process of dealing with this problem, it is found that the lower version of ""capstone"" cannot deal with instructions such as ""Vsub. F64"". It is time to synchronize capstone.

This was already done recently. Are you sure your capstone submodule has been updated locally?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,411,2020-04-12T12:24:16Z,2020-05-10T20:10:02Z,2020-05-10T20:10:03Z,CLOSED,False,4835,82,14,https://github.com/WorksButNotTested,Added ARM32 stalker support,1,[],https://github.com/frida/frida-gum/pull/411,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/411,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,412,2020-04-15T08:48:58Z,2020-04-17T00:51:09Z,2020-04-17T10:40:19Z,MERGED,True,8,1,1,https://github.com/WorksButNotTested,Add support for MUSL,5,[],https://github.com/frida/frida-gum/pull/412,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/412,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,412,2020-04-15T08:48:58Z,2020-04-17T00:51:09Z,2020-04-17T10:40:19Z,MERGED,True,8,1,1,https://github.com/WorksButNotTested,Add support for MUSL,5,[],https://github.com/frida/frida-gum/pull/412,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/412#issuecomment-614963133,,Applied changes.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,413,2020-04-15T16:19:00Z,2020-04-16T22:10:31Z,2020-04-17T10:40:06Z,MERGED,True,28,3,1,https://github.com/WorksButNotTested,Improve auxilliary vector architecture detection,3,[],https://github.com/frida/frida-gum/pull/413,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/413,Fix for #373,Fix for #373,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,416,2020-04-17T15:00:49Z,2020-04-18T05:11:09Z,2020-04-18T23:48:55Z,MERGED,True,122,0,3,https://github.com/WorksButNotTested,Fix Linux module enumeration when invoked through loader,14,[],https://github.com/frida/frida-gum/pull/416,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/416,Fix for #414,Fix for #414,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,416,2020-04-17T15:00:49Z,2020-04-18T05:11:09Z,2020-04-18T23:48:55Z,MERGED,True,122,0,3,https://github.com/WorksButNotTested,Fix Linux module enumeration when invoked through loader,14,[],https://github.com/frida/frida-gum/pull/416,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/416#issuecomment-615550762,Fix for #414,Changes made.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,416,2020-04-17T15:00:49Z,2020-04-18T05:11:09Z,2020-04-18T23:48:55Z,MERGED,True,122,0,3,https://github.com/WorksButNotTested,Fix Linux module enumeration when invoked through loader,14,[],https://github.com/frida/frida-gum/pull/416,https://github.com/WorksButNotTested,3,https://github.com/frida/frida-gum/pull/416#issuecomment-615553217,Fix for #414,Hopefully that's everything!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,417,2020-04-17T17:38:01Z,2020-04-18T23:40:02Z,2020-04-18T23:49:06Z,MERGED,True,91,4,1,https://github.com/WorksButNotTested,Improve address resolution in the libdwarf backend,8,[],https://github.com/frida/frida-gum/pull/417,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/417,"GUM previously relied upon 'dladdr' to find symbol names when trying to make a debug symbol from an address. This only works when symbols are in the .dynamic section. It will not incorporate those in the .symtab section.
The dwarf engine already walks the .symtab and .dynamic section to build a hashtable indexed on names to lookup addresses.This patch builds a hashtable of the reverse, but only for the .symtab section (we can rely on the existing implementation working for .dynamic). We can then use this hash table to do the reverse lookup.
This issue will not affect binaries built with -rdynamic, and may also not affect those built with -pie. Obviously, this doesn't affect shared objects by their nature.","GUM previously relied upon 'dladdr' to find symbol names when trying to make a debug symbol from an address. This only works when symbols are in the .dynamic section. It will not incorporate those in the .symtab section.
The dwarf engine already walks the .symtab and .dynamic section to build a hashtable indexed on names to lookup addresses.This patch builds a hashtable of the reverse, but only for the .symtab section (we can rely on the existing implementation working for .dynamic). We can then use this hash table to do the reverse lookup.
This issue will not affect binaries built with -rdynamic, and may also not affect those built with -pie. Obviously, this doesn't affect shared objects by their nature.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,417,2020-04-17T17:38:01Z,2020-04-18T23:40:02Z,2020-04-18T23:49:06Z,MERGED,True,91,4,1,https://github.com/WorksButNotTested,Improve address resolution in the libdwarf backend,8,[],https://github.com/frida/frida-gum/pull/417,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/417#issuecomment-615549353,"GUM previously relied upon 'dladdr' to find symbol names when trying to make a debug symbol from an address. This only works when symbols are in the .dynamic section. It will not incorporate those in the .symtab section.
The dwarf engine already walks the .symtab and .dynamic section to build a hashtable indexed on names to lookup addresses.This patch builds a hashtable of the reverse, but only for the .symtab section (we can rely on the existing implementation working for .dynamic). We can then use this hash table to do the reverse lookup.
This issue will not affect binaries built with -rdynamic, and may also not affect those built with -pie. Obviously, this doesn't affect shared objects by their nature.",Changes made.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,417,2020-04-17T17:38:01Z,2020-04-18T23:40:02Z,2020-04-18T23:49:06Z,MERGED,True,91,4,1,https://github.com/WorksButNotTested,Improve address resolution in the libdwarf backend,8,[],https://github.com/frida/frida-gum/pull/417,https://github.com/WorksButNotTested,3,https://github.com/frida/frida-gum/pull/417#issuecomment-615552959,"GUM previously relied upon 'dladdr' to find symbol names when trying to make a debug symbol from an address. This only works when symbols are in the .dynamic section. It will not incorporate those in the .symtab section.
The dwarf engine already walks the .symtab and .dynamic section to build a hashtable indexed on names to lookup addresses.This patch builds a hashtable of the reverse, but only for the .symtab section (we can rely on the existing implementation working for .dynamic). We can then use this hash table to do the reverse lookup.
This issue will not affect binaries built with -rdynamic, and may also not affect those built with -pie. Obviously, this doesn't affect shared objects by their nature.",More changes. Just one outstanding question.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,417,2020-04-17T17:38:01Z,2020-04-18T23:40:02Z,2020-04-18T23:49:06Z,MERGED,True,91,4,1,https://github.com/WorksButNotTested,Improve address resolution in the libdwarf backend,8,[],https://github.com/frida/frida-gum/pull/417,https://github.com/WorksButNotTested,4,https://github.com/frida/frida-gum/pull/417#issuecomment-615567674,"GUM previously relied upon 'dladdr' to find symbol names when trying to make a debug symbol from an address. This only works when symbols are in the .dynamic section. It will not incorporate those in the .symtab section.
The dwarf engine already walks the .symtab and .dynamic section to build a hashtable indexed on names to lookup addresses.This patch builds a hashtable of the reverse, but only for the .symtab section (we can rely on the existing implementation working for .dynamic). We can then use this hash table to do the reverse lookup.
This issue will not affect binaries built with -rdynamic, and may also not affect those built with -pie. Obviously, this doesn't affect shared objects by their nature.","Note sure if my comment is showing up inline in the discussion, so I've copied it here in case.
""""""
So previously, we walked both .dynamic and .symtab with gum_collect_symbol_if_function and then walked .symtab with the new callback. So we walked the .symtab twice.
Now we have a single combined callback with a parameter to indicate whether we want to collect the data into the second structure. So we only walk each of .dynamic and .symtab the once.
So we have the slight added complexity of an additional parameter, and a callback that does two different jobs. But in exchange we should have the performance increase of only processing the tables the once.
I think maybe it's better this new way?
""""""",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,419,2020-04-19T11:40:29Z,2020-04-22T09:44:08Z,2020-04-22T09:44:08Z,MERGED,True,9,19,2,https://github.com/mrmacete,Skip optional undefined args in v8,2,[],https://github.com/frida/frida-gum/pull/419,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/419,In this way v8‚Äôs behaviour is consistent with duktape‚Äôs one.,In this way v8‚Äôs behaviour is consistent with duktape‚Äôs one.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,423,2020-05-01T19:02:46Z,2020-05-01T20:10:32Z,2020-05-07T12:00:23Z,MERGED,True,5,5,1,https://github.com/WorksButNotTested,Simplify and optimize thumb relocation of LDR,2,[],https://github.com/frida/frida-gum/pull/423,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/423,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,424,2020-05-04T13:08:29Z,2020-05-06T21:09:07Z,2020-05-07T12:00:54Z,MERGED,True,1,1,1,https://github.com/WorksButNotTested,Fix CPSR Thumb detection in Exceptor's POSIX backend,2,[],https://github.com/frida/frida-gum/pull/424,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/424,"Code was previously using a value of 0d150 = 0x96 as the CPSR mask to determine whether it was running in ARM mode.
/// Group of ARM instructions
typedef enum arm_insn_group {
ARM_GRP_INVALID = 0, ///< = CS_GRP_INVALID
// Generic groups
// all jump instructions (conditional+direct+indirect jumps)
ARM_GRP_JUMP,	///< = CS_GRP_JUMP
ARM_GRP_CALL,	///< = CS_GRP_CALL
ARM_GRP_INT = 4, ///< = CS_GRP_INT
ARM_GRP_PRIVILEGE = 6, ///< = CS_GRP_PRIVILEGE
ARM_GRP_BRANCH_RELATIVE, ///< = CS_GRP_BRANCH_RELATIVE

// Architecture-specific groups
ARM_GRP_CRYPTO = 128,
ARM_GRP_DATABARRIER,
ARM_GRP_DIVIDE,
ARM_GRP_FPARMV8,
ARM_GRP_MULTPRO,
ARM_GRP_NEON,
ARM_GRP_T2EXTRACTPACK,
ARM_GRP_THUMB2DSP,
ARM_GRP_TRUSTZONE,
ARM_GRP_V4T,
ARM_GRP_V5T,
ARM_GRP_V5TE,
ARM_GRP_V6,
ARM_GRP_V6T2,
ARM_GRP_V7,
ARM_GRP_V8,
ARM_GRP_VFP2,
ARM_GRP_VFP3,
ARM_GRP_VFP4,
ARM_GRP_ARM,
ARM_GRP_MCLASS,
ARM_GRP_NOTMCLASS,
*ARM_GRP_THUMB*,
ARM_GRP_THUMB1ONLY,
ARM_GRP_THUMB2,
ARM_GRP_PREV8,
ARM_GRP_FPVMLX,
ARM_GRP_MULOPS,
ARM_GRP_CRC,
ARM_GRP_DPVFP,
ARM_GRP_V6M,
ARM_GRP_VIRTUALIZATION,

ARM_GRP_ENDING,

} arm_insn_group;
However, the documentation states that bit 5 of the CPSR dictates the mode.
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0360e/ch02s09s07.html
This resulted in the failure of tests on linux-arm32 (little endian) as the code stream was incorrectly identified as thumb and hence the wrong instruction was decoded and the read/write of the resulting fault was therefore inverted.:
/Core/MemoryAccessMonitor/notify_on_read_access
/Core/MemoryAccessMonitor/notify_on_write_access","Code was previously using a value of 0d150 = 0x96 as the CPSR mask to determine whether it was running in ARM mode.
/// Group of ARM instructions
typedef enum arm_insn_group {
ARM_GRP_INVALID = 0, ///< = CS_GRP_INVALID
// Generic groups
// all jump instructions (conditional+direct+indirect jumps)
ARM_GRP_JUMP,	///< = CS_GRP_JUMP
ARM_GRP_CALL,	///< = CS_GRP_CALL
ARM_GRP_INT = 4, ///< = CS_GRP_INT
ARM_GRP_PRIVILEGE = 6, ///< = CS_GRP_PRIVILEGE
ARM_GRP_BRANCH_RELATIVE, ///< = CS_GRP_BRANCH_RELATIVE

// Architecture-specific groups
ARM_GRP_CRYPTO = 128,
ARM_GRP_DATABARRIER,
ARM_GRP_DIVIDE,
ARM_GRP_FPARMV8,
ARM_GRP_MULTPRO,
ARM_GRP_NEON,
ARM_GRP_T2EXTRACTPACK,
ARM_GRP_THUMB2DSP,
ARM_GRP_TRUSTZONE,
ARM_GRP_V4T,
ARM_GRP_V5T,
ARM_GRP_V5TE,
ARM_GRP_V6,
ARM_GRP_V6T2,
ARM_GRP_V7,
ARM_GRP_V8,
ARM_GRP_VFP2,
ARM_GRP_VFP3,
ARM_GRP_VFP4,
ARM_GRP_ARM,
ARM_GRP_MCLASS,
ARM_GRP_NOTMCLASS,
*ARM_GRP_THUMB*,
ARM_GRP_THUMB1ONLY,
ARM_GRP_THUMB2,
ARM_GRP_PREV8,
ARM_GRP_FPVMLX,
ARM_GRP_MULOPS,
ARM_GRP_CRC,
ARM_GRP_DPVFP,
ARM_GRP_V6M,
ARM_GRP_VIRTUALIZATION,

ARM_GRP_ENDING,

} arm_insn_group;
However, the documentation states that bit 5 of the CPSR dictates the mode.
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0360e/ch02s09s07.html
This resulted in the failure of tests on linux-arm32 (little endian) as the code stream was incorrectly identified as thumb and hence the wrong instruction was decoded and the read/write of the resulting fault was therefore inverted.:
/Core/MemoryAccessMonitor/notify_on_read_access
/Core/MemoryAccessMonitor/notify_on_write_access",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,427,2020-05-07T11:57:28Z,2020-05-07T13:54:59Z,2020-05-08T08:26:31Z,MERGED,True,4,4,2,https://github.com/WorksButNotTested,Feature/stalker arm fixed,2,[],https://github.com/frida/frida-gum/pull/427,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/427,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,428,2020-05-10T06:27:10Z,2020-05-10T07:43:32Z,2020-05-10T09:19:44Z,MERGED,True,63,5,4,https://github.com/WorksButNotTested,Feature/stalker arm,12,[],https://github.com/frida/frida-gum/pull/428,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/428,Please note additional bug fix to gum_arm_writer_put_ands_reg_reg_imm.,Please note additional bug fix to gum_arm_writer_put_ands_reg_reg_imm.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,429,2020-05-10T11:02:43Z,2020-05-10T17:47:10Z,2020-05-10T17:47:16Z,MERGED,True,233,2,2,https://github.com/WorksButNotTested,Added ARM32 Stalker Callout Support,1,[],https://github.com/frida/frida-gum/pull/429,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/429,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,429,2020-05-10T11:02:43Z,2020-05-10T17:47:10Z,2020-05-10T17:47:16Z,MERGED,True,233,2,2,https://github.com/WorksButNotTested,Added ARM32 Stalker Callout Support,1,[],https://github.com/frida/frida-gum/pull/429,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/429#issuecomment-626363914,,Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,430,2020-05-12T16:47:03Z,2020-05-18T13:22:31Z,2020-05-18T13:47:43Z,MERGED,True,97,36,2,https://github.com/bet4it,Fix ThumbRelocator IT block eoi logic,1,[],https://github.com/frida/frida-gum/pull/430,https://github.com/bet4it,1,https://github.com/frida/frida-gum/pull/430,Just borrow the variable self->it_block.active as a flag.,Just borrow the variable self->it_block.active as a flag.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,430,2020-05-12T16:47:03Z,2020-05-18T13:22:31Z,2020-05-18T13:47:43Z,MERGED,True,97,36,2,https://github.com/bet4it,Fix ThumbRelocator IT block eoi logic,1,[],https://github.com/frida/frida-gum/pull/430,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/430#issuecomment-628339895,Just borrow the variable self->it_block.active as a flag.,Thanks! What does this solve for you?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,430,2020-05-12T16:47:03Z,2020-05-18T13:22:31Z,2020-05-18T13:47:43Z,MERGED,True,97,36,2,https://github.com/bet4it,Fix ThumbRelocator IT block eoi logic,1,[],https://github.com/frida/frida-gum/pull/430,https://github.com/bet4it,3,https://github.com/frida/frida-gum/pull/430#issuecomment-628734345,Just borrow the variable self->it_block.active as a flag.,I add a test about it.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,430,2020-05-12T16:47:03Z,2020-05-18T13:22:31Z,2020-05-18T13:47:43Z,MERGED,True,97,36,2,https://github.com/bet4it,Fix ThumbRelocator IT block eoi logic,1,[],https://github.com/frida/frida-gum/pull/430,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/430#issuecomment-628755718,Just borrow the variable self->it_block.active as a flag.,@bet4it Thanks! I'm afraid this results in failing test(s) in the Stalker ARM32 test-suite. You can run it like this: ./tests/run-android-arm.sh -p /Core/Stalker,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,430,2020-05-12T16:47:03Z,2020-05-18T13:22:31Z,2020-05-18T13:47:43Z,MERGED,True,97,36,2,https://github.com/bet4it,Fix ThumbRelocator IT block eoi logic,1,[],https://github.com/frida/frida-gum/pull/430,https://github.com/bet4it,5,https://github.com/frida/frida-gum/pull/430#issuecomment-628967518,Just borrow the variable self->it_block.active as a flag.,"I don't have macOS, sadüòÖ

  
    
      frida-gum/tests/run-android-arm.sh
    
    
         Line 10
      in
      5888845
    
  
  
    

        
          
           . ../../frida-meson-env-macos-x86_64.rc",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,430,2020-05-12T16:47:03Z,2020-05-18T13:22:31Z,2020-05-18T13:47:43Z,MERGED,True,97,36,2,https://github.com/bet4it,Fix ThumbRelocator IT block eoi logic,1,[],https://github.com/frida/frida-gum/pull/430,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/430#issuecomment-629069413,Just borrow the variable self->it_block.active as a flag.,@bet4it Replace that with linux if you're on Linux. It's a (bit too) dumb script üòÑ,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,430,2020-05-12T16:47:03Z,2020-05-18T13:22:31Z,2020-05-18T13:47:43Z,MERGED,True,97,36,2,https://github.com/bet4it,Fix ThumbRelocator IT block eoi logic,1,[],https://github.com/frida/frida-gum/pull/430,https://github.com/bet4it,7,https://github.com/frida/frida-gum/pull/430#issuecomment-629644829,Just borrow the variable self->it_block.active as a flag.,Now all the tests have passed. What do you think about it?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,430,2020-05-12T16:47:03Z,2020-05-18T13:22:31Z,2020-05-18T13:47:43Z,MERGED,True,97,36,2,https://github.com/bet4it,Fix ThumbRelocator IT block eoi logic,1,[],https://github.com/frida/frida-gum/pull/430,https://github.com/oleavr,8,https://github.com/frida/frida-gum/pull/430#issuecomment-630179671,Just borrow the variable self->it_block.active as a flag.,Thanks! (Merged with a few minor style tweaks.),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,431,2020-05-13T17:00:13Z,2020-05-14T01:49:59Z,2020-05-14T01:49:59Z,CLOSED,False,6707,128,13,https://github.com/WorksButNotTested,Feature/stalker arm,6,[],https://github.com/frida/frida-gum/pull/431,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/431,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,431,2020-05-13T17:00:13Z,2020-05-14T01:49:59Z,2020-05-14T01:49:59Z,CLOSED,False,6707,128,13,https://github.com/WorksButNotTested,Feature/stalker arm,6,[],https://github.com/frida/frida-gum/pull/431,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/431#issuecomment-628121624,,IT block stalker support,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,432,2020-05-14T15:55:51Z,2020-05-14T18:47:51Z,2020-05-14T20:13:38Z,MERGED,True,243,141,6,https://github.com/WorksButNotTested,Fix ARM32 Stalker's handling of large IT blocks,3,[],https://github.com/frida/frida-gum/pull/432,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/432,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,432,2020-05-14T15:55:51Z,2020-05-14T18:47:51Z,2020-05-14T20:13:38Z,MERGED,True,243,141,6,https://github.com/WorksButNotTested,Fix ARM32 Stalker's handling of large IT blocks,3,[],https://github.com/frida/frida-gum/pull/432,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/432#issuecomment-628763777,,Should be ready for another look.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,433,2020-05-14T16:12:55Z,2020-05-14T16:14:29Z,2020-05-14T17:08:44Z,MERGED,True,0,42,1,https://github.com/WorksButNotTested,Simplified ARM Stalker vectoring to generated code,1,[],https://github.com/frida/frida-gum/pull/433,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/433,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,434,2020-05-17T11:37:25Z,2020-06-10T19:03:03Z,2020-06-10T19:03:03Z,MERGED,True,162,28,3,https://github.com/hexploitable,Extend ApiResolver backends to support ignoring case,1,[],https://github.com/frida/frida-gum/pull/434,https://github.com/hexploitable,1,https://github.com/frida/frida-gum/pull/434,"This is just ObjC resolver for now, but I can add the others if we're happy with the approach.
At the moment, prepending ! to your pattern will result in the case being ignored:
!*[nSoBjEcT aPpEnD*]
Instrumenting functions...
-[OSLogCoder appendBytes:length:]: Auto-generated handler at ""<REDACTED>/frida/frida-gum/__handlers__/__OSLogCoder_appendBytes_length__.js""
Started tracing 1 function. Press Ctrl+C to stop.

Are you OK with having a modifier like this inside the query? Or would you rather we use an independent command line flag that we pass through from tracer.py down into the resolver within gum?
Let me know your thoughts and I'll make further improvements.","This is just ObjC resolver for now, but I can add the others if we're happy with the approach.
At the moment, prepending ! to your pattern will result in the case being ignored:
!*[nSoBjEcT aPpEnD*]
Instrumenting functions...
-[OSLogCoder appendBytes:length:]: Auto-generated handler at ""<REDACTED>/frida/frida-gum/__handlers__/__OSLogCoder_appendBytes_length__.js""
Started tracing 1 function. Press Ctrl+C to stop.

Are you OK with having a modifier like this inside the query? Or would you rather we use an independent command line flag that we pass through from tracer.py down into the resolver within gum?
Let me know your thoughts and I'll make further improvements.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,434,2020-05-17T11:37:25Z,2020-06-10T19:03:03Z,2020-06-10T19:03:03Z,MERGED,True,162,28,3,https://github.com/hexploitable,Extend ApiResolver backends to support ignoring case,1,[],https://github.com/frida/frida-gum/pull/434,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/434#issuecomment-630128599,"This is just ObjC resolver for now, but I can add the others if we're happy with the approach.
At the moment, prepending ! to your pattern will result in the case being ignored:
!*[nSoBjEcT aPpEnD*]
Instrumenting functions...
-[OSLogCoder appendBytes:length:]: Auto-generated handler at ""<REDACTED>/frida/frida-gum/__handlers__/__OSLogCoder_appendBytes_length__.js""
Started tracing 1 function. Press Ctrl+C to stop.

Are you OK with having a modifier like this inside the query? Or would you rather we use an independent command line flag that we pass through from tracer.py down into the resolver within gum?
Let me know your thoughts and I'll make further improvements.","Cool!
How about:
*[nSoBjEcT aPpEnD*]/i
Which in the module resolver would translate to:
exports:*!open*/i",True,{'THUMBS_UP': ['https://github.com/hexploitable']}
frida/frida-gum,https://github.com/frida/frida-gum,434,2020-05-17T11:37:25Z,2020-06-10T19:03:03Z,2020-06-10T19:03:03Z,MERGED,True,162,28,3,https://github.com/hexploitable,Extend ApiResolver backends to support ignoring case,1,[],https://github.com/frida/frida-gum/pull/434,https://github.com/hexploitable,3,https://github.com/frida/frida-gum/pull/434#issuecomment-630285927,"This is just ObjC resolver for now, but I can add the others if we're happy with the approach.
At the moment, prepending ! to your pattern will result in the case being ignored:
!*[nSoBjEcT aPpEnD*]
Instrumenting functions...
-[OSLogCoder appendBytes:length:]: Auto-generated handler at ""<REDACTED>/frida/frida-gum/__handlers__/__OSLogCoder_appendBytes_length__.js""
Started tracing 1 function. Press Ctrl+C to stop.

Are you OK with having a modifier like this inside the query? Or would you rather we use an independent command line flag that we pass through from tracer.py down into the resolver within gum?
Let me know your thoughts and I'll make further improvements.","frida-trace -n 'example' -i '!*CcCrYpT*' | grep 'tracing '
Started tracing 0 functions. Press Ctrl+C to stop.

frida-trace -n 'example' -i '!*CcCrYpT*/i' | grep 'tracing '
Started tracing 29 functions. Press Ctrl+C to stop.

and
frida-trace -n 'example' -i '*cOmMoN*!*CCCrypt*' | grep 'tracing '
Started tracing 0 functions. Press Ctrl+C to stop.

frida-trace -n 'example' -i '*cOmMoN*!*CCCrypt*/i' | grep 'tracing '
Started tracing 29 functions. Press Ctrl+C to stop.

and
frida-trace -U -n 'iOSTestApp' -m '*[CRYPTO* *]' | grep 'tracing '
Started tracing 0 functions. Press Ctrl+C to stop.

frida-trace -U -n 'iOSTestApp' -m '*[CRYPTO* *]/i' | grep 'tracing '
Started tracing 15 functions. Press Ctrl+C to stop.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,434,2020-05-17T11:37:25Z,2020-06-10T19:03:03Z,2020-06-10T19:03:03Z,MERGED,True,162,28,3,https://github.com/hexploitable,Extend ApiResolver backends to support ignoring case,1,[],https://github.com/frida/frida-gum/pull/434,https://github.com/hexploitable,4,https://github.com/frida/frida-gum/pull/434#issuecomment-630291462,"This is just ObjC resolver for now, but I can add the others if we're happy with the approach.
At the moment, prepending ! to your pattern will result in the case being ignored:
!*[nSoBjEcT aPpEnD*]
Instrumenting functions...
-[OSLogCoder appendBytes:length:]: Auto-generated handler at ""<REDACTED>/frida/frida-gum/__handlers__/__OSLogCoder_appendBytes_length__.js""
Started tracing 1 function. Press Ctrl+C to stop.

Are you OK with having a modifier like this inside the query? Or would you rather we use an independent command line flag that we pass through from tracer.py down into the resolver within gum?
Let me know your thoughts and I'll make further improvements.","var resolver = new ApiResolver('objc');
var matches = resolver.enumerateMatches('-[NSUrl* *HTTP*]');
console.log('Matches found: ' + matches.length);
Matches found: 0
var resolver = new ApiResolver('objc');
var matches = resolver.enumerateMatches('-[NSUrl* *HTTP*]/i');
console.log('Matches found: ' + matches.length);
Matches found: 73",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,434,2020-05-17T11:37:25Z,2020-06-10T19:03:03Z,2020-06-10T19:03:03Z,MERGED,True,162,28,3,https://github.com/hexploitable,Extend ApiResolver backends to support ignoring case,1,[],https://github.com/frida/frida-gum/pull/434,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/434#issuecomment-630336154,"This is just ObjC resolver for now, but I can add the others if we're happy with the approach.
At the moment, prepending ! to your pattern will result in the case being ignored:
!*[nSoBjEcT aPpEnD*]
Instrumenting functions...
-[OSLogCoder appendBytes:length:]: Auto-generated handler at ""<REDACTED>/frida/frida-gum/__handlers__/__OSLogCoder_appendBytes_length__.js""
Started tracing 1 function. Press Ctrl+C to stop.

Are you OK with having a modifier like this inside the query? Or would you rather we use an independent command line flag that we pass through from tracer.py down into the resolver within gum?
Let me know your thoughts and I'll make further improvements.",Cool! üöÄ,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,435,2020-05-18T11:44:45Z,2020-05-18T15:21:25Z,2020-05-18T17:01:44Z,MERGED,True,137,2,2,https://github.com/WorksButNotTested,Suppress Stalker ARM32 events around exclusive ops,5,[],https://github.com/frida/frida-gum/pull/435,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/435,‚Ä¶tions,‚Ä¶tions,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,435,2020-05-18T11:44:45Z,2020-05-18T15:21:25Z,2020-05-18T17:01:44Z,MERGED,True,137,2,2,https://github.com/WorksButNotTested,Suppress Stalker ARM32 events around exclusive ops,5,[],https://github.com/frida/frida-gum/pull/435,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/435#issuecomment-630154639,‚Ä¶tions,Changes made.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,436,2020-05-18T11:45:58Z,2020-05-18T15:17:32Z,2020-05-18T17:02:10Z,MERGED,True,54,0,1,https://github.com/WorksButNotTested,Support Stalker ARM32 clone syscalls in Thumb mode,7,[],https://github.com/frida/frida-gum/pull/436,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/436,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,437,2020-05-18T13:51:45Z,2020-05-18T16:50:11Z,2020-05-18T17:01:57Z,MERGED,True,160,9,2,https://github.com/WorksButNotTested,Add Stalker ARM32 trust threshold support,2,[],https://github.com/frida/frida-gum/pull/437,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/437,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,444,2020-06-07T03:05:49Z,2020-06-13T05:32:22Z,2020-06-13T05:32:22Z,MERGED,True,115,11,13,https://github.com/ohjeongwook,Expose more dbghelp APIs and use ! notation symbol resolution,56,[],https://github.com/frida/frida-gum/pull/444,https://github.com/ohjeongwook,1,https://github.com/frida/frida-gum/pull/444,"Recently, I started using Frida framework on Windows and found that resolving symbol using ""getFunctionByName"" interface is really slow because it is using wildcard match on the module name. I wanted to make this faster by exposing additional dbghelp APIs like SymLoadModulEx as ""load"" to initiate loading of symbols for specific modules and removed wildcard matches for getFunctionByName. Now you can pass ""moduleName!functionName"" convention to specify module and function name to resolve function name. This will improve overall symbol operations and overall working very smooth.
Here's a test code for this code changes.
var loadedModules = {}
var resolvedAddresses = {}

function resolveName(dllName, name) {
    var moduleName = dllName.split('.')[0]
    var functionName = moduleName + ""!"" + name

    if (functionName in resolvedAddresses) {
        return resolvedAddresses[functionName]
    }

    console.log(""resolveName "" + functionName);
    console.log(""Module.findExportByName "" + dllName + "" "" + name);
    var addr = Module.findExportByName(dllName, name)

    if (!addr || addr.isNull()) {
        if (!(dllName in loadedModules)) {
            console.log("" DebugSymbol.loadModule "" + dllName);
            var loadModuleResult = DebugSymbol.load(dllName)
            console.log("" DebugSymbol.load finished: "" + loadModuleResult);
            loadedModules[dllName] = 1
        }

        try {
            console.log("" DebugSymbol.getFunctionByName: "" + functionName);
            addr = DebugSymbol.getFunctionByName(moduleName + '!' + name)
            console.log("" DebugSymbol.getFunctionByName: addr = "" + addr);
        }
        catch(err) {
            console.log("" DebugSymbol.getFunctionByName: Exception"")
        }
    }

    resolvedAddresses[functionName] = addr
    return addr
}

var dllName = ""kernel32""
var funcName = ""LoadLibraryA""
var addr = resolveName(dllName, funcName)

console.log(""addr: "" + addr)","Recently, I started using Frida framework on Windows and found that resolving symbol using ""getFunctionByName"" interface is really slow because it is using wildcard match on the module name. I wanted to make this faster by exposing additional dbghelp APIs like SymLoadModulEx as ""load"" to initiate loading of symbols for specific modules and removed wildcard matches for getFunctionByName. Now you can pass ""moduleName!functionName"" convention to specify module and function name to resolve function name. This will improve overall symbol operations and overall working very smooth.
Here's a test code for this code changes.
var loadedModules = {}
var resolvedAddresses = {}

function resolveName(dllName, name) {
    var moduleName = dllName.split('.')[0]
    var functionName = moduleName + ""!"" + name

    if (functionName in resolvedAddresses) {
        return resolvedAddresses[functionName]
    }

    console.log(""resolveName "" + functionName);
    console.log(""Module.findExportByName "" + dllName + "" "" + name);
    var addr = Module.findExportByName(dllName, name)

    if (!addr || addr.isNull()) {
        if (!(dllName in loadedModules)) {
            console.log("" DebugSymbol.loadModule "" + dllName);
            var loadModuleResult = DebugSymbol.load(dllName)
            console.log("" DebugSymbol.load finished: "" + loadModuleResult);
            loadedModules[dllName] = 1
        }

        try {
            console.log("" DebugSymbol.getFunctionByName: "" + functionName);
            addr = DebugSymbol.getFunctionByName(moduleName + '!' + name)
            console.log("" DebugSymbol.getFunctionByName: addr = "" + addr);
        }
        catch(err) {
            console.log("" DebugSymbol.getFunctionByName: Exception"")
        }
    }

    resolvedAddresses[functionName] = addr
    return addr
}

var dllName = ""kernel32""
var funcName = ""LoadLibraryA""
var addr = resolveName(dllName, funcName)

console.log(""addr: "" + addr)",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,444,2020-06-07T03:05:49Z,2020-06-13T05:32:22Z,2020-06-13T05:32:22Z,MERGED,True,115,11,13,https://github.com/ohjeongwook,Expose more dbghelp APIs and use ! notation symbol resolution,56,[],https://github.com/frida/frida-gum/pull/444,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/444#issuecomment-643564597,"Recently, I started using Frida framework on Windows and found that resolving symbol using ""getFunctionByName"" interface is really slow because it is using wildcard match on the module name. I wanted to make this faster by exposing additional dbghelp APIs like SymLoadModulEx as ""load"" to initiate loading of symbols for specific modules and removed wildcard matches for getFunctionByName. Now you can pass ""moduleName!functionName"" convention to specify module and function name to resolve function name. This will improve overall symbol operations and overall working very smooth.
Here's a test code for this code changes.
var loadedModules = {}
var resolvedAddresses = {}

function resolveName(dllName, name) {
    var moduleName = dllName.split('.')[0]
    var functionName = moduleName + ""!"" + name

    if (functionName in resolvedAddresses) {
        return resolvedAddresses[functionName]
    }

    console.log(""resolveName "" + functionName);
    console.log(""Module.findExportByName "" + dllName + "" "" + name);
    var addr = Module.findExportByName(dllName, name)

    if (!addr || addr.isNull()) {
        if (!(dllName in loadedModules)) {
            console.log("" DebugSymbol.loadModule "" + dllName);
            var loadModuleResult = DebugSymbol.load(dllName)
            console.log("" DebugSymbol.load finished: "" + loadModuleResult);
            loadedModules[dllName] = 1
        }

        try {
            console.log("" DebugSymbol.getFunctionByName: "" + functionName);
            addr = DebugSymbol.getFunctionByName(moduleName + '!' + name)
            console.log("" DebugSymbol.getFunctionByName: addr = "" + addr);
        }
        catch(err) {
            console.log("" DebugSymbol.getFunctionByName: Exception"")
        }
    }

    resolvedAddresses[functionName] = addr
    return addr
}

var dllName = ""kernel32""
var funcName = ""LoadLibraryA""
var addr = resolveName(dllName, funcName)

console.log(""addr: "" + addr)","I'm about to cut a new release, so I'll take care of the final tweaks here and in the other PR! üëå Sorry for all the back and forth üòÖ",True,{'THUMBS_UP': ['https://github.com/ohjeongwook']}
frida/frida-gum,https://github.com/frida/frida-gum,449,2020-06-20T10:17:33Z,2020-06-20T10:47:12Z,2020-06-20T10:47:26Z,MERGED,True,6,4,2,https://github.com/mrmacete,Fix handling of long symbol names on i/macOS,1,[],https://github.com/frida/frida-gum/pull/449,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/449,"Also bump max symbol name length to 2048.
C++ types are really chatty, so symbols like IPC::callMemberFunctionImpl<WebKit::WebPageProxy, void (WebKit::WebPageProxy::*)(WTF::ObjectIdentifier<WebCore::FrameIdentifierType>, WebCore::SecurityOriginData&&, WebCore::PolicyCheckIdentifier, unsigned long long, WebKit::NavigationActionData&&, WebKit::FrameInfoData&&, WTF::Optional<WTF::ObjectIdentifier<WebKit::WebPageProxyIdentifierType> >, WebCore::ResourceRequest const&, WebCore::ResourceRequest&&, IPC::FormDataReference&&, WebCore::ResourceResponse&&, WebKit::UserData const&, unsigned long long), std::__1::tuple<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>, WebCore::SecurityOriginData, WebCore::PolicyCheckIdentifier, unsigned long long, WebKit::NavigationActionData, WebKit::FrameInfoData, WTF::Optional<WTF::ObjectIdentifier<WebKit::WebPageProxyIdentifierType> >, WebCore::ResourceRequest, WebCore::ResourceRequest, IPC::FormDataReference, WebCore::ResourceResponse, WebKit::UserData, unsigned long long>, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul>(WebKit::WebPageProxy*, void (WebKit::WebPageProxy::*)(WTF::ObjectIdentifier<WebCore::FrameIdentifierType>, WebCore::SecurityOriginData&&, WebCore::PolicyCheckIdentifier, unsigned long long, WebKit::NavigationActionData&&, WebKit::FrameInfoData&&, WTF::Optional<WTF::ObjectIdentifier<WebKit::WebPageProxyIdentifierType> >, WebCore::ResourceRequest const&, WebCore::ResourceRequest&&, IPC::FormDataReference&&, WebCore::ResourceResponse&&, WebKit::UserData const&, unsigned long long), std::__1::tuple<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>, WebCore::SecurityOriginData, WebCore::PolicyCheckIdentifier, unsigned long long, WebKit::NavigationActionData, WebKit::FrameInfoData, WTF::Optional<WTF::ObjectIdentifier<WebKit::WebPageProxyIdentifierType> >, WebCore::ResourceRequest, WebCore::ResourceRequest, IPC::FormDataReference, WebCore::ResourceResponse, WebKit::UserData, unsigned long long>&&, std::__1::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul>) could have caused an attempted OOB write, resulting in a runtime exception.","Also bump max symbol name length to 2048.
C++ types are really chatty, so symbols like IPC::callMemberFunctionImpl<WebKit::WebPageProxy, void (WebKit::WebPageProxy::*)(WTF::ObjectIdentifier<WebCore::FrameIdentifierType>, WebCore::SecurityOriginData&&, WebCore::PolicyCheckIdentifier, unsigned long long, WebKit::NavigationActionData&&, WebKit::FrameInfoData&&, WTF::Optional<WTF::ObjectIdentifier<WebKit::WebPageProxyIdentifierType> >, WebCore::ResourceRequest const&, WebCore::ResourceRequest&&, IPC::FormDataReference&&, WebCore::ResourceResponse&&, WebKit::UserData const&, unsigned long long), std::__1::tuple<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>, WebCore::SecurityOriginData, WebCore::PolicyCheckIdentifier, unsigned long long, WebKit::NavigationActionData, WebKit::FrameInfoData, WTF::Optional<WTF::ObjectIdentifier<WebKit::WebPageProxyIdentifierType> >, WebCore::ResourceRequest, WebCore::ResourceRequest, IPC::FormDataReference, WebCore::ResourceResponse, WebKit::UserData, unsigned long long>, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul>(WebKit::WebPageProxy*, void (WebKit::WebPageProxy::*)(WTF::ObjectIdentifier<WebCore::FrameIdentifierType>, WebCore::SecurityOriginData&&, WebCore::PolicyCheckIdentifier, unsigned long long, WebKit::NavigationActionData&&, WebKit::FrameInfoData&&, WTF::Optional<WTF::ObjectIdentifier<WebKit::WebPageProxyIdentifierType> >, WebCore::ResourceRequest const&, WebCore::ResourceRequest&&, IPC::FormDataReference&&, WebCore::ResourceResponse&&, WebKit::UserData const&, unsigned long long), std::__1::tuple<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>, WebCore::SecurityOriginData, WebCore::PolicyCheckIdentifier, unsigned long long, WebKit::NavigationActionData, WebKit::FrameInfoData, WTF::Optional<WTF::ObjectIdentifier<WebKit::WebPageProxyIdentifierType> >, WebCore::ResourceRequest, WebCore::ResourceRequest, IPC::FormDataReference, WebCore::ResourceResponse, WebKit::UserData, unsigned long long>&&, std::__1::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul>) could have caused an attempted OOB write, resulting in a runtime exception.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,450,2020-06-20T18:17:39Z,2020-06-20T23:33:47Z,2020-07-03T04:54:46Z,MERGED,True,42,1,4,https://github.com/WorksButNotTested,"Fix Stalker ARM handling of Thumb-2 'mov pc, <reg>'",2,[],https://github.com/frida/frida-gum/pull/450,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/450,Fixes #448.,Fixes #448.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,450,2020-06-20T18:17:39Z,2020-06-20T23:33:47Z,2020-07-03T04:54:46Z,MERGED,True,42,1,4,https://github.com/WorksButNotTested,"Fix Stalker ARM handling of Thumb-2 'mov pc, <reg>'",2,[],https://github.com/frida/frida-gum/pull/450,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/450#issuecomment-647057087,Fixes #448.,Thanks! ‚ù§Ô∏è,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,451,2020-06-22T08:17:13Z,2020-06-22T18:34:31Z,2020-06-22T18:34:31Z,MERGED,True,1,1,1,https://github.com/mrmacete,Use utf8 for ModuleMap.values() name field in v8,1,[],https://github.com/frida/frida-gum/pull/451,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/451,"This ensures correct handling of non-english/non-latin module names, and matches what already happens in other module-related APIs and in duktape.","This ensures correct handling of non-english/non-latin module names, and matches what already happens in other module-related APIs and in duktape.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,452,2020-07-03T05:31:03Z,2020-07-05T14:47:26Z,2020-07-06T05:01:24Z,MERGED,True,67,0,4,https://github.com/WorksButNotTested,"Fix ARM Stalker mov pc, <reg> Thumb interworking",4,[],https://github.com/frida/frida-gum/pull/452,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/452,"This fix adds a thumb_interworking flag to _GumBranchDirectRegOffset. This type is used during MOV, ADD, SUB and BX instruction handling. It's value is set false except for BX instructions. It's value should be considered meaningful only during Thumb operation.
Whilst its value is set in gum_stalker_get_target_address which is used in both ARM and Thumb modes, it is only used in
gum_exec_ctx_write_thumb_mov_branch_target and not gum_exec_ctx_write_arm_mov_branch_target and hence any setting of this value in gum_stalker_get_target_address when operating in ARM mode is benign.
Similarly, the value is set in gum_exec_block_write_thumb_handle_kuser_helper and not in gum_exec_block_write_arm_handle_kuser_helper.","This fix adds a thumb_interworking flag to _GumBranchDirectRegOffset. This type is used during MOV, ADD, SUB and BX instruction handling. It's value is set false except for BX instructions. It's value should be considered meaningful only during Thumb operation.
Whilst its value is set in gum_stalker_get_target_address which is used in both ARM and Thumb modes, it is only used in
gum_exec_ctx_write_thumb_mov_branch_target and not gum_exec_ctx_write_arm_mov_branch_target and hence any setting of this value in gum_stalker_get_target_address when operating in ARM mode is benign.
Similarly, the value is set in gum_exec_block_write_thumb_handle_kuser_helper and not in gum_exec_block_write_arm_handle_kuser_helper.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,457,2020-07-06T06:44:34Z,2020-07-06T17:24:48Z,2020-07-07T10:36:23Z,MERGED,True,56,6,2,https://github.com/WorksButNotTested,"Fix Stalker ARM clobbers reg when handling mov pc, <reg>",2,[],https://github.com/frida/frida-gum/pull/457,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/457,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,458,2020-07-06T08:03:07Z,2020-07-06T17:28:59Z,2020-07-07T10:36:29Z,MERGED,True,60,14,2,https://github.com/WorksButNotTested,Suppress flag updates for ThumbWriter add immediate,2,[],https://github.com/frida/frida-gum/pull/458,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/458,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,460,2020-07-07T10:59:21Z,2020-07-07T17:28:09Z,2020-07-15T17:59:49Z,MERGED,True,13,13,1,https://github.com/WorksButNotTested,Fix Stalker ARM tests clobber callee saved registers,1,[],https://github.com/frida/frida-gum/pull/460,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/460,Fix for bug #459,Fix for bug #459,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,462,2020-07-08T15:19:02Z,2020-07-08T18:50:12Z,2020-07-08T18:50:12Z,MERGED,True,1,1,1,https://github.com/stevielavern,Update gumarm64writer.c to make it compatible with macOS ARM,2,[],https://github.com/frida/frida-gum/pull/462,https://github.com/stevielavern,1,https://github.com/frida/frida-gum/pull/462,PACed ptrs need to be stripped also on macOS arm64e.,PACed ptrs need to be stripped also on macOS arm64e.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,465,2020-07-15T19:19:25Z,2020-07-17T00:54:49Z,2020-07-17T15:10:51Z,MERGED,True,160,17,3,https://github.com/WorksButNotTested,Fix Linux architecture detection on big-endian systems,5,[],https://github.com/frida/frida-gum/pull/465,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/465,Fix for #464. Implementation changed to expose a test seam in lieu of a mocking framework. Logic corrected.,Fix for #464. Implementation changed to expose a test seam in lieu of a mocking framework. Logic corrected.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,467,2020-07-17T09:54:16Z,2020-07-17T14:24:55Z,2020-07-17T15:10:56Z,MERGED,True,7,1,1,https://github.com/WorksButNotTested,Fix capstone endianness on ARM BE8,2,[],https://github.com/frida/frida-gum/pull/467,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/467,Fix for #466,Fix for #466,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,469,2020-07-20T12:10:10Z,2020-07-20T15:08:06Z,2020-07-20T16:43:20Z,MERGED,True,31,5,1,https://github.com/WorksButNotTested,Fix Linux.cpu_type_from_file() on big-endian systems,2,[],https://github.com/frida/frida-gum/pull/469,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/469,gum_linux_cpu_type_from_file uses the constant G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN here. Rather than reading the header of the ELF to determine endianness.,gum_linux_cpu_type_from_file uses the constant G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN here. Rather than reading the header of the ELF to determine endianness.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,471,2020-07-26T09:43:21Z,2020-07-26T13:15:17Z,2020-07-26T13:51:25Z,MERGED,True,414,0,4,https://github.com/WorksButNotTested,Add support for SUB instruction to ARM Relocator,2,[],https://github.com/frida/frida-gum/pull/471,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/471,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,471,2020-07-26T09:43:21Z,2020-07-26T13:15:17Z,2020-07-26T13:51:25Z,MERGED,True,414,0,4,https://github.com/WorksButNotTested,Add support for SUB instruction to ARM Relocator,2,[],https://github.com/frida/frida-gum/pull/471,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/471#issuecomment-663986762,,Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,472,2020-08-03T13:22:57Z,2020-08-03T20:17:53Z,2020-08-17T08:09:28Z,MERGED,True,48,34,2,https://github.com/WorksButNotTested,Fix checking of symbol sizes in libdwarf backend,1,[],https://github.com/frida/frida-gum/pull/472,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/472,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,473,2020-08-04T08:21:03Z,2020-08-04T11:42:45Z,2020-08-04T11:43:23Z,MERGED,True,12,4,2,https://github.com/demantz,Better discovery of the libc for linux and qnx.,1,[],https://github.com/frida/frida-gum/pull/473,https://github.com/demantz,1,https://github.com/frida/frida-gum/pull/473,"The libc is currently detected by checking for the 'exit' symbol.
Whichever shared library contains a function named 'exit' could
falsely be detected to be the libc. This commit adds another check
for the '__libc_start_main' symbol which should be more libc-specific.
As a minimal example which shows the bug, the following program
crashes when frida attaches:
#include <stdio.h>;
void exit(int i) {
printf(""foo"");
}
int main(int argc, char** argv) {
printf(""Hi!\n"");
getchar();
printf(""bye!\n"");
return 0;
}
If the libc_start_main symbol is not found, the old check for the exit function
will still happen - so this patch shouldn't make things worse, right?","The libc is currently detected by checking for the 'exit' symbol.
Whichever shared library contains a function named 'exit' could
falsely be detected to be the libc. This commit adds another check
for the '__libc_start_main' symbol which should be more libc-specific.
As a minimal example which shows the bug, the following program
crashes when frida attaches:
#include <stdio.h>;
void exit(int i) {
printf(""foo"");
}
int main(int argc, char** argv) {
printf(""Hi!\n"");
getchar();
printf(""bye!\n"");
return 0;
}
If the libc_start_main symbol is not found, the old check for the exit function
will still happen - so this patch shouldn't make things worse, right?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,473,2020-08-04T08:21:03Z,2020-08-04T11:42:45Z,2020-08-04T11:43:23Z,MERGED,True,12,4,2,https://github.com/demantz,Better discovery of the libc for linux and qnx.,1,[],https://github.com/frida/frida-gum/pull/473,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/473#issuecomment-668546668,"The libc is currently detected by checking for the 'exit' symbol.
Whichever shared library contains a function named 'exit' could
falsely be detected to be the libc. This commit adds another check
for the '__libc_start_main' symbol which should be more libc-specific.
As a minimal example which shows the bug, the following program
crashes when frida attaches:
#include <stdio.h>;
void exit(int i) {
printf(""foo"");
}
int main(int argc, char** argv) {
printf(""Hi!\n"");
getchar();
printf(""bye!\n"");
return 0;
}
If the libc_start_main symbol is not found, the old check for the exit function
will still happen - so this patch shouldn't make things worse, right?",Good point. Thanks a lot!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,480,2020-08-16T01:41:11Z,2020-11-27T01:49:02Z,2020-11-27T02:07:36Z,MERGED,True,277,128,20,https://github.com/meme,Support linking against system GLib,4,[],https://github.com/frida/frida-gum/pull/480,https://github.com/meme,1,https://github.com/frida/frida-gum/pull/480,"This PR adds support for linking against a system GLib, as well as adds support for building GObject Introspection files (if the user has the required tools installed on their system).
The Frida build system HAS NOT been updated to support this change as more work is planned for that. However, it's straightfoward to test:
 # We need these legacy paths for dependencies that don't use pkg-config.
 legacy_includes=""-I$FRIDA_PREFIX/include""
-legacy_libpaths=""-L$FRIDA_PREFIX/lib""
+#legacy_libpaths=""-L$FRIDA_PREFIX/lib""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   legacy_includes=""$legacy_includes -I$FRIDA_SDKROOT/include""
-  legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
+  #legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
 fi
 CPPFLAGS=""$CPPFLAGS $legacy_includes""
-LDFLAGS=""$LDFLAGS $legacy_libpaths""
+#LDFLAGS=""$LDFLAGS $legacy_libpaths""
 
 meson_legacy_includes=$(flags_to_args ""$legacy_includes"")
 meson_legacy_libpaths=$(flags_to_args ""$legacy_libpaths"")
@@ -870,9 +870,11 @@ chmod 755 ""$strip_wrapper""
 
 PKG_CONFIG=$FRIDA_BUILD/${FRIDA_ENV_NAME:-frida}-${host_platform_arch}-pkg-config
 
-pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
+pkg_config=""pkg-config""
+# pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
 pkg_config_flags=""""
-pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
+pkg_config_path=""/usr/lib/pkgconfig""
+# pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   pkg_config_flags="" --define-variable=frida_sdk_prefix=$FRIDA_SDKROOT""
   pkg_config_path=""$pkg_config_path:$FRIDA_SDKROOT/lib/pkgconfig""
@@ -880,7 +882,7 @@ fi
 (
   echo ""#!/bin/sh""
   echo ""export PKG_CONFIG_PATH=\""$pkg_config_path\""""
-  echo ""exec \""$pkg_config\""$pkg_config_flags --static \""\$@\""""
+  echo ""exec \""$pkg_config\""$pkg_config_flags \""\$@\""""
 ) > ""$PKG_CONFIG""
 chmod 755 ""$PKG_CONFIG""
(This is a crap changeset, but it makes the build system use the system's pkg-config, as well as removes the Frida path from LDFLAGS.)
The test suite has been modified to disable tests that cease to function on a non-Frida GLib as those tests required the patches applied to Frida's GLib. Tests still pass on the original build configuration as well as this new one.","This PR adds support for linking against a system GLib, as well as adds support for building GObject Introspection files (if the user has the required tools installed on their system).
The Frida build system HAS NOT been updated to support this change as more work is planned for that. However, it's straightfoward to test:
 # We need these legacy paths for dependencies that don't use pkg-config.
 legacy_includes=""-I$FRIDA_PREFIX/include""
-legacy_libpaths=""-L$FRIDA_PREFIX/lib""
+#legacy_libpaths=""-L$FRIDA_PREFIX/lib""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   legacy_includes=""$legacy_includes -I$FRIDA_SDKROOT/include""
-  legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
+  #legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
 fi
 CPPFLAGS=""$CPPFLAGS $legacy_includes""
-LDFLAGS=""$LDFLAGS $legacy_libpaths""
+#LDFLAGS=""$LDFLAGS $legacy_libpaths""
 
 meson_legacy_includes=$(flags_to_args ""$legacy_includes"")
 meson_legacy_libpaths=$(flags_to_args ""$legacy_libpaths"")
@@ -870,9 +870,11 @@ chmod 755 ""$strip_wrapper""
 
 PKG_CONFIG=$FRIDA_BUILD/${FRIDA_ENV_NAME:-frida}-${host_platform_arch}-pkg-config
 
-pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
+pkg_config=""pkg-config""
+# pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
 pkg_config_flags=""""
-pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
+pkg_config_path=""/usr/lib/pkgconfig""
+# pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   pkg_config_flags="" --define-variable=frida_sdk_prefix=$FRIDA_SDKROOT""
   pkg_config_path=""$pkg_config_path:$FRIDA_SDKROOT/lib/pkgconfig""
@@ -880,7 +882,7 @@ fi
 (
   echo ""#!/bin/sh""
   echo ""export PKG_CONFIG_PATH=\""$pkg_config_path\""""
-  echo ""exec \""$pkg_config\""$pkg_config_flags --static \""\$@\""""
+  echo ""exec \""$pkg_config\""$pkg_config_flags \""\$@\""""
 ) > ""$PKG_CONFIG""
 chmod 755 ""$PKG_CONFIG""
(This is a crap changeset, but it makes the build system use the system's pkg-config, as well as removes the Frida path from LDFLAGS.)
The test suite has been modified to disable tests that cease to function on a non-Frida GLib as those tests required the patches applied to Frida's GLib. Tests still pass on the original build configuration as well as this new one.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,480,2020-08-16T01:41:11Z,2020-11-27T01:49:02Z,2020-11-27T02:07:36Z,MERGED,True,277,128,20,https://github.com/meme,Support linking against system GLib,4,[],https://github.com/frida/frida-gum/pull/480,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/480#issuecomment-674469803,"This PR adds support for linking against a system GLib, as well as adds support for building GObject Introspection files (if the user has the required tools installed on their system).
The Frida build system HAS NOT been updated to support this change as more work is planned for that. However, it's straightfoward to test:
 # We need these legacy paths for dependencies that don't use pkg-config.
 legacy_includes=""-I$FRIDA_PREFIX/include""
-legacy_libpaths=""-L$FRIDA_PREFIX/lib""
+#legacy_libpaths=""-L$FRIDA_PREFIX/lib""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   legacy_includes=""$legacy_includes -I$FRIDA_SDKROOT/include""
-  legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
+  #legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
 fi
 CPPFLAGS=""$CPPFLAGS $legacy_includes""
-LDFLAGS=""$LDFLAGS $legacy_libpaths""
+#LDFLAGS=""$LDFLAGS $legacy_libpaths""
 
 meson_legacy_includes=$(flags_to_args ""$legacy_includes"")
 meson_legacy_libpaths=$(flags_to_args ""$legacy_libpaths"")
@@ -870,9 +870,11 @@ chmod 755 ""$strip_wrapper""
 
 PKG_CONFIG=$FRIDA_BUILD/${FRIDA_ENV_NAME:-frida}-${host_platform_arch}-pkg-config
 
-pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
+pkg_config=""pkg-config""
+# pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
 pkg_config_flags=""""
-pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
+pkg_config_path=""/usr/lib/pkgconfig""
+# pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   pkg_config_flags="" --define-variable=frida_sdk_prefix=$FRIDA_SDKROOT""
   pkg_config_path=""$pkg_config_path:$FRIDA_SDKROOT/lib/pkgconfig""
@@ -880,7 +882,7 @@ fi
 (
   echo ""#!/bin/sh""
   echo ""export PKG_CONFIG_PATH=\""$pkg_config_path\""""
-  echo ""exec \""$pkg_config\""$pkg_config_flags --static \""\$@\""""
+  echo ""exec \""$pkg_config\""$pkg_config_flags \""\$@\""""
 ) > ""$PKG_CONFIG""
 chmod 755 ""$PKG_CONFIG""
(This is a crap changeset, but it makes the build system use the system's pkg-config, as well as removes the Frida path from LDFLAGS.)
The test suite has been modified to disable tests that cease to function on a non-Frida GLib as those tests required the patches applied to Frida's GLib. Tests still pass on the original build configuration as well as this new one.",Oh I almost forgot: we also need to update the Windows build system. üòÖ  The easiest way to pinpoint where the defines need to go is probably git grep HAVE_I386.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,480,2020-08-16T01:41:11Z,2020-11-27T01:49:02Z,2020-11-27T02:07:36Z,MERGED,True,277,128,20,https://github.com/meme,Support linking against system GLib,4,[],https://github.com/frida/frida-gum/pull/480,https://github.com/meme,3,https://github.com/frida/frida-gum/pull/480#issuecomment-691678397,"This PR adds support for linking against a system GLib, as well as adds support for building GObject Introspection files (if the user has the required tools installed on their system).
The Frida build system HAS NOT been updated to support this change as more work is planned for that. However, it's straightfoward to test:
 # We need these legacy paths for dependencies that don't use pkg-config.
 legacy_includes=""-I$FRIDA_PREFIX/include""
-legacy_libpaths=""-L$FRIDA_PREFIX/lib""
+#legacy_libpaths=""-L$FRIDA_PREFIX/lib""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   legacy_includes=""$legacy_includes -I$FRIDA_SDKROOT/include""
-  legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
+  #legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
 fi
 CPPFLAGS=""$CPPFLAGS $legacy_includes""
-LDFLAGS=""$LDFLAGS $legacy_libpaths""
+#LDFLAGS=""$LDFLAGS $legacy_libpaths""
 
 meson_legacy_includes=$(flags_to_args ""$legacy_includes"")
 meson_legacy_libpaths=$(flags_to_args ""$legacy_libpaths"")
@@ -870,9 +870,11 @@ chmod 755 ""$strip_wrapper""
 
 PKG_CONFIG=$FRIDA_BUILD/${FRIDA_ENV_NAME:-frida}-${host_platform_arch}-pkg-config
 
-pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
+pkg_config=""pkg-config""
+# pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
 pkg_config_flags=""""
-pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
+pkg_config_path=""/usr/lib/pkgconfig""
+# pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   pkg_config_flags="" --define-variable=frida_sdk_prefix=$FRIDA_SDKROOT""
   pkg_config_path=""$pkg_config_path:$FRIDA_SDKROOT/lib/pkgconfig""
@@ -880,7 +882,7 @@ fi
 (
   echo ""#!/bin/sh""
   echo ""export PKG_CONFIG_PATH=\""$pkg_config_path\""""
-  echo ""exec \""$pkg_config\""$pkg_config_flags --static \""\$@\""""
+  echo ""exec \""$pkg_config\""$pkg_config_flags \""\$@\""""
 ) > ""$PKG_CONFIG""
 chmod 755 ""$PKG_CONFIG""
(This is a crap changeset, but it makes the build system use the system's pkg-config, as well as removes the Frida path from LDFLAGS.)
The test suite has been modified to disable tests that cease to function on a non-Frida GLib as those tests required the patches applied to Frida's GLib. Tests still pass on the original build configuration as well as this new one.","As a long overdue update: this currently works on Linux, but the glib-mkenum changes require some work on Windows. I've got glib-mkenum in the toolchain and I have gum-64 building, but the dependent projects like gumjs-64, etc. do not point to the correct header include path when using a Custom Build Step. Development is on-going but slow, because I am mostly unfamiliar with Windows tooling (Visual Studio).",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,480,2020-08-16T01:41:11Z,2020-11-27T01:49:02Z,2020-11-27T02:07:36Z,MERGED,True,277,128,20,https://github.com/meme,Support linking against system GLib,4,[],https://github.com/frida/frida-gum/pull/480,https://github.com/meme,4,https://github.com/frida/frida-gum/pull/480#issuecomment-725168848,"This PR adds support for linking against a system GLib, as well as adds support for building GObject Introspection files (if the user has the required tools installed on their system).
The Frida build system HAS NOT been updated to support this change as more work is planned for that. However, it's straightfoward to test:
 # We need these legacy paths for dependencies that don't use pkg-config.
 legacy_includes=""-I$FRIDA_PREFIX/include""
-legacy_libpaths=""-L$FRIDA_PREFIX/lib""
+#legacy_libpaths=""-L$FRIDA_PREFIX/lib""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   legacy_includes=""$legacy_includes -I$FRIDA_SDKROOT/include""
-  legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
+  #legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
 fi
 CPPFLAGS=""$CPPFLAGS $legacy_includes""
-LDFLAGS=""$LDFLAGS $legacy_libpaths""
+#LDFLAGS=""$LDFLAGS $legacy_libpaths""
 
 meson_legacy_includes=$(flags_to_args ""$legacy_includes"")
 meson_legacy_libpaths=$(flags_to_args ""$legacy_libpaths"")
@@ -870,9 +870,11 @@ chmod 755 ""$strip_wrapper""
 
 PKG_CONFIG=$FRIDA_BUILD/${FRIDA_ENV_NAME:-frida}-${host_platform_arch}-pkg-config
 
-pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
+pkg_config=""pkg-config""
+# pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
 pkg_config_flags=""""
-pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
+pkg_config_path=""/usr/lib/pkgconfig""
+# pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   pkg_config_flags="" --define-variable=frida_sdk_prefix=$FRIDA_SDKROOT""
   pkg_config_path=""$pkg_config_path:$FRIDA_SDKROOT/lib/pkgconfig""
@@ -880,7 +882,7 @@ fi
 (
   echo ""#!/bin/sh""
   echo ""export PKG_CONFIG_PATH=\""$pkg_config_path\""""
-  echo ""exec \""$pkg_config\""$pkg_config_flags --static \""\$@\""""
+  echo ""exec \""$pkg_config\""$pkg_config_flags \""\$@\""""
 ) > ""$PKG_CONFIG""
 chmod 755 ""$PKG_CONFIG""
(This is a crap changeset, but it makes the build system use the system's pkg-config, as well as removes the Frida path from LDFLAGS.)
The test suite has been modified to disable tests that cease to function on a non-Frida GLib as those tests required the patches applied to Frida's GLib. Tests still pass on the original build configuration as well as this new one.",Rebased against latest master and tests still pass in both configurations üöß,True,{'HOORAY': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,480,2020-08-16T01:41:11Z,2020-11-27T01:49:02Z,2020-11-27T02:07:36Z,MERGED,True,277,128,20,https://github.com/meme,Support linking against system GLib,4,[],https://github.com/frida/frida-gum/pull/480,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/480#issuecomment-734534872,"This PR adds support for linking against a system GLib, as well as adds support for building GObject Introspection files (if the user has the required tools installed on their system).
The Frida build system HAS NOT been updated to support this change as more work is planned for that. However, it's straightfoward to test:
 # We need these legacy paths for dependencies that don't use pkg-config.
 legacy_includes=""-I$FRIDA_PREFIX/include""
-legacy_libpaths=""-L$FRIDA_PREFIX/lib""
+#legacy_libpaths=""-L$FRIDA_PREFIX/lib""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   legacy_includes=""$legacy_includes -I$FRIDA_SDKROOT/include""
-  legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
+  #legacy_libpaths=""$legacy_libpaths -L$FRIDA_SDKROOT/lib""
 fi
 CPPFLAGS=""$CPPFLAGS $legacy_includes""
-LDFLAGS=""$LDFLAGS $legacy_libpaths""
+#LDFLAGS=""$LDFLAGS $legacy_libpaths""
 
 meson_legacy_includes=$(flags_to_args ""$legacy_includes"")
 meson_legacy_libpaths=$(flags_to_args ""$legacy_libpaths"")
@@ -870,9 +870,11 @@ chmod 755 ""$strip_wrapper""
 
 PKG_CONFIG=$FRIDA_BUILD/${FRIDA_ENV_NAME:-frida}-${host_platform_arch}-pkg-config
 
-pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
+pkg_config=""pkg-config""
+# pkg_config=""$FRIDA_TOOLROOT/bin/pkg-config""
 pkg_config_flags=""""
-pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
+pkg_config_path=""/usr/lib/pkgconfig""
+# pkg_config_path=""$FRIDA_PREFIX_LIB/pkgconfig""
 if [ ""$FRIDA_ENV_SDK"" != 'none' ]; then
   pkg_config_flags="" --define-variable=frida_sdk_prefix=$FRIDA_SDKROOT""
   pkg_config_path=""$pkg_config_path:$FRIDA_SDKROOT/lib/pkgconfig""
@@ -880,7 +882,7 @@ fi
 (
   echo ""#!/bin/sh""
   echo ""export PKG_CONFIG_PATH=\""$pkg_config_path\""""
-  echo ""exec \""$pkg_config\""$pkg_config_flags --static \""\$@\""""
+  echo ""exec \""$pkg_config\""$pkg_config_flags \""\$@\""""
 ) > ""$PKG_CONFIG""
 chmod 755 ""$PKG_CONFIG""
(This is a crap changeset, but it makes the build system use the system's pkg-config, as well as removes the Frida path from LDFLAGS.)
The test suite has been modified to disable tests that cease to function on a non-Frida GLib as those tests required the patches applied to Frida's GLib. Tests still pass on the original build configuration as well as this new one.","@meme Yay, this evening I finally got around to looking into the Windows build system bits, so it's finally merge o'clock! üéâ
Thanks a lot for this awesome PR and all your patience! ‚ù§Ô∏è",True,{'HEART': ['https://github.com/meme']}
frida/frida-gum,https://github.com/frida/frida-gum,481,2020-08-17T08:22:45Z,2020-08-17T18:17:53Z,2020-11-13T13:29:07Z,MERGED,True,20,1,2,https://github.com/WorksButNotTested,"Fix ARM relocation of 'add sb, pc, r4'",2,[],https://github.com/frida/frida-gum/pull/481,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/481,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,482,2020-08-17T08:42:49Z,2020-08-17T18:25:29Z,2020-11-13T13:29:15Z,MERGED,True,30,3,2,https://github.com/WorksButNotTested,"Fix ARM relocation of 'add ip, pc, #4, #12'",5,[],https://github.com/frida/frida-gum/pull/482,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/482,,,True,{'THUMBS_UP': ['https://github.com/0x416c69']}
frida/frida-gum,https://github.com/frida/frida-gum,483,2020-08-17T09:12:27Z,2020-08-17T18:31:43Z,2020-11-13T13:29:20Z,MERGED,True,40,10,4,https://github.com/WorksButNotTested,Fix ARM writer doesn't support LDMIA when Rn is in reglist,3,[],https://github.com/frida/frida-gum/pull/483,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/483,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,486,2020-08-18T12:34:37Z,2020-08-25T17:58:44Z,2020-11-13T13:29:31Z,CLOSED,False,371,7,10,https://github.com/WorksButNotTested,Add stalker coverage support,1,[],https://github.com/frida/frida-gum/pull/486,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/486,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,486,2020-08-18T12:34:37Z,2020-08-25T17:58:44Z,2020-11-13T13:29:31Z,CLOSED,False,371,7,10,https://github.com/WorksButNotTested,Add stalker coverage support,1,[],https://github.com/frida/frida-gum/pull/486,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/486#issuecomment-680181222,,"Thanks! ‚ù§Ô∏è As we discussed out-of-band, let's solve this in ‚Äúuserspace‚Äù instead, i.e. a Frida-specific module published to npm.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,487,2020-08-24T13:14:50Z,2020-09-01T16:59:42Z,2020-09-01T16:59:42Z,MERGED,True,123,12,8,https://github.com/meme,Support a NULL EventSink in Stalker,1,[],https://github.com/frida/frida-gum/pull/487,https://github.com/meme,1,https://github.com/frida/frida-gum/pull/487,"This PR is still in the proposal phase as I haven't added ARM64 or MIPS support nor reasonable tests.
For background: in my personal project hotwax, my event_sink.c simply acts as a stub which does nothing (and returns a query_mask of 0). Now, in another project where I use the Frida Stalker, I've run into the same problem: I do not need an EventSink, but are required to provide one.
So, I propose that we allow EventSink to be NULL so that a user can provide ONLY a transformer and nothing else. Or alternatively, they can provide no Transformer or EventSink (not sure what the use-case is for this, but it is now allowed)
So my goals for this PR are speed. I want to provide reasonable speed benefits if you do not provide an EventSink. This is why I ask for your feedback @oleavr to see:

If this is reasonable
How we can design this so that it provides the most speed benefit","This PR is still in the proposal phase as I haven't added ARM64 or MIPS support nor reasonable tests.
For background: in my personal project hotwax, my event_sink.c simply acts as a stub which does nothing (and returns a query_mask of 0). Now, in another project where I use the Frida Stalker, I've run into the same problem: I do not need an EventSink, but are required to provide one.
So, I propose that we allow EventSink to be NULL so that a user can provide ONLY a transformer and nothing else. Or alternatively, they can provide no Transformer or EventSink (not sure what the use-case is for this, but it is now allowed)
So my goals for this PR are speed. I want to provide reasonable speed benefits if you do not provide an EventSink. This is why I ask for your feedback @oleavr to see:

If this is reasonable
How we can design this so that it provides the most speed benefit",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,487,2020-08-24T13:14:50Z,2020-09-01T16:59:42Z,2020-09-01T16:59:42Z,MERGED,True,123,12,8,https://github.com/meme,Support a NULL EventSink in Stalker,1,[],https://github.com/frida/frida-gum/pull/487,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/487#issuecomment-679123232,"This PR is still in the proposal phase as I haven't added ARM64 or MIPS support nor reasonable tests.
For background: in my personal project hotwax, my event_sink.c simply acts as a stub which does nothing (and returns a query_mask of 0). Now, in another project where I use the Frida Stalker, I've run into the same problem: I do not need an EventSink, but are required to provide one.
So, I propose that we allow EventSink to be NULL so that a user can provide ONLY a transformer and nothing else. Or alternatively, they can provide no Transformer or EventSink (not sure what the use-case is for this, but it is now allowed)
So my goals for this PR are speed. I want to provide reasonable speed benefits if you do not provide an EventSink. This is why I ask for your feedback @oleavr to see:

If this is reasonable
How we can design this so that it provides the most speed benefit","Makes sense!  My gut feeling is that we should not add if-checks everywhere the sink is used, but rather instantiate an internal NullSink if the user doesn't provide one, like we do for the Transformer. What do you think?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,487,2020-08-24T13:14:50Z,2020-09-01T16:59:42Z,2020-09-01T16:59:42Z,MERGED,True,123,12,8,https://github.com/meme,Support a NULL EventSink in Stalker,1,[],https://github.com/frida/frida-gum/pull/487,https://github.com/meme,3,https://github.com/frida/frida-gum/pull/487#issuecomment-679132358,"This PR is still in the proposal phase as I haven't added ARM64 or MIPS support nor reasonable tests.
For background: in my personal project hotwax, my event_sink.c simply acts as a stub which does nothing (and returns a query_mask of 0). Now, in another project where I use the Frida Stalker, I've run into the same problem: I do not need an EventSink, but are required to provide one.
So, I propose that we allow EventSink to be NULL so that a user can provide ONLY a transformer and nothing else. Or alternatively, they can provide no Transformer or EventSink (not sure what the use-case is for this, but it is now allowed)
So my goals for this PR are speed. I want to provide reasonable speed benefits if you do not provide an EventSink. This is why I ask for your feedback @oleavr to see:

If this is reasonable
How we can design this so that it provides the most speed benefit","I agree that if-checks everywhere is not great, I was getting nervous that I may have missed some... I will re-work this PR with NullSink as I agree that is more suitable.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,487,2020-08-24T13:14:50Z,2020-09-01T16:59:42Z,2020-09-01T16:59:42Z,MERGED,True,123,12,8,https://github.com/meme,Support a NULL EventSink in Stalker,1,[],https://github.com/frida/frida-gum/pull/487,https://github.com/meme,4,https://github.com/frida/frida-gum/pull/487#issuecomment-680000522,"This PR is still in the proposal phase as I haven't added ARM64 or MIPS support nor reasonable tests.
For background: in my personal project hotwax, my event_sink.c simply acts as a stub which does nothing (and returns a query_mask of 0). Now, in another project where I use the Frida Stalker, I've run into the same problem: I do not need an EventSink, but are required to provide one.
So, I propose that we allow EventSink to be NULL so that a user can provide ONLY a transformer and nothing else. Or alternatively, they can provide no Transformer or EventSink (not sure what the use-case is for this, but it is now allowed)
So my goals for this PR are speed. I want to provide reasonable speed benefits if you do not provide an EventSink. This is why I ask for your feedback @oleavr to see:

If this is reasonable
How we can design this so that it provides the most speed benefit",Integrated a DefaultEventSink and I agree it makes much more sense. The question is now: how should we be testing this considering there is a bit of overlap with other Stalker tests?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,487,2020-08-24T13:14:50Z,2020-09-01T16:59:42Z,2020-09-01T16:59:42Z,MERGED,True,123,12,8,https://github.com/meme,Support a NULL EventSink in Stalker,1,[],https://github.com/frida/frida-gum/pull/487,https://github.com/meme,5,https://github.com/frida/frida-gum/pull/487#issuecomment-680191816,"This PR is still in the proposal phase as I haven't added ARM64 or MIPS support nor reasonable tests.
For background: in my personal project hotwax, my event_sink.c simply acts as a stub which does nothing (and returns a query_mask of 0). Now, in another project where I use the Frida Stalker, I've run into the same problem: I do not need an EventSink, but are required to provide one.
So, I propose that we allow EventSink to be NULL so that a user can provide ONLY a transformer and nothing else. Or alternatively, they can provide no Transformer or EventSink (not sure what the use-case is for this, but it is now allowed)
So my goals for this PR are speed. I want to provide reasonable speed benefits if you do not provide an EventSink. This is why I ask for your feedback @oleavr to see:

If this is reasonable
How we can design this so that it provides the most speed benefit","Presumably these tests should be ported to the respective architectures, I can make them but I do not have the hardware to test all platforms currently. Is this something you'll do post-review, or is there a CI I can test it on?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,487,2020-08-24T13:14:50Z,2020-09-01T16:59:42Z,2020-09-01T16:59:42Z,MERGED,True,123,12,8,https://github.com/meme,Support a NULL EventSink in Stalker,1,[],https://github.com/frida/frida-gum/pull/487,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/487#issuecomment-680915214,"This PR is still in the proposal phase as I haven't added ARM64 or MIPS support nor reasonable tests.
For background: in my personal project hotwax, my event_sink.c simply acts as a stub which does nothing (and returns a query_mask of 0). Now, in another project where I use the Frida Stalker, I've run into the same problem: I do not need an EventSink, but are required to provide one.
So, I propose that we allow EventSink to be NULL so that a user can provide ONLY a transformer and nothing else. Or alternatively, they can provide no Transformer or EventSink (not sure what the use-case is for this, but it is now allowed)
So my goals for this PR are speed. I want to provide reasonable speed benefits if you do not provide an EventSink. This is why I ask for your feedback @oleavr to see:

If this is reasonable
How we can design this so that it provides the most speed benefit","Presumably these tests should be ported to the respective architectures, I can make them but I do not have the hardware to test all platforms currently. Is this something you'll do post-review, or is there a CI I can test it on?

That would be great! Our CI doesn't yet run tests on those platforms, but it should be fairly safe to transplant the exact same code due to how similar the implementations are.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,489,2020-09-17T18:06:27Z,2020-09-17T18:17:03Z,2020-09-17T18:17:03Z,MERGED,True,6,0,1,https://github.com/mrmacete,Fix arm64e support in relocator,1,[],https://github.com/frida/frida-gum/pull/489,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/489,By checking also for arm64e variants of RET and BR.,By checking also for arm64e variants of RET and BR.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,490,2020-09-18T18:59:31Z,2020-09-21T17:20:22Z,2021-01-10T01:19:05Z,CLOSED,False,106,0,4,https://github.com/oleavr,[WIP] Add Script.load(),1,[],https://github.com/frida/frida-gum/pull/490,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/490,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,492,2020-10-06T15:17:04Z,2020-10-07T11:20:03Z,2020-11-26T10:11:55Z,MERGED,True,2,3,1,https://github.com/WorksButNotTested,Fix incorrect calculation of nearest symbol.,2,[],https://github.com/frida/frida-gum/pull/492,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/492,Fix incorrect calculation of nearest symbol.,Fix incorrect calculation of nearest symbol.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,495,2020-10-20T02:06:58Z,2020-10-20T02:07:21Z,2020-10-20T02:07:27Z,MERGED,True,24327,168,77,https://github.com/oleavr,Add a brand new GumJS runtime based on QuickJS,114,[],https://github.com/frida/frida-gum/pull/495,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/495,"This means we can finally rely on ES2020 being available everywhere,
which simplifies tooling, improves performance, and reduces the
maintenance burden.","This means we can finally rely on ES2020 being available everywhere,
which simplifies tooling, improves performance, and reduces the
maintenance burden.",True,{'HOORAY': ['https://github.com/lynnux']}
frida/frida-gum,https://github.com/frida/frida-gum,498,2020-11-02T14:41:07Z,2020-11-02T15:06:02Z,2020-11-02T15:10:49Z,MERGED,True,4,2,1,https://github.com/hluwa,Fix Exceptor sigaction() registration failure when act == oact,4,[],https://github.com/frida/frida-gum/pull/498,https://github.com/hluwa,1,https://github.com/frida/frida-gum/pull/498,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,498,2020-11-02T14:41:07Z,2020-11-02T15:06:02Z,2020-11-02T15:10:49Z,MERGED,True,4,2,1,https://github.com/hluwa,Fix Exceptor sigaction() registration failure when act == oact,4,[],https://github.com/frida/frida-gum/pull/498,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/498#issuecomment-720530680,,Also copied your fix to the Darwin backend. Thanks for this great catch!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,499,2020-11-05T10:44:37Z,2020-11-05T18:10:40Z,2020-11-05T18:10:40Z,MERGED,True,334,2,17,https://github.com/mrmacete,Fix deadlock when the thread holding the JS lock crashes,2,[],https://github.com/frida/frida-gum/pull/499,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/499,"use the exceptor to detect this condition
when that happens, the scope mutex is marked as ""trapped"" in the backend

in this condition the mutex remains locked, but with_lock_held won't block
so that the ThreadSuspendMonitor doesn't create deadlocks
also, all JS exception handlers are skipped in this state



This will allow crashes of this kind to actually surface instead of causing a deadlock.
This can be improved over time, but for how this is implemented right now it's not really possible to ""catch"" and handle this kind of exceptions, because that would require forcibly unlock the scope mutex even if it belongs to a crashed thread.
The test case runs in ""slow"" mode only
gum-tests -m slow -p /GumJS/Script/crash_on_thread_holding_js_lock_should_not_deadlock#V8
gum-tests -m slow -p /GumJS/Script/crash_on_thread_holding_js_lock_should_not_deadlock#QJS","use the exceptor to detect this condition
when that happens, the scope mutex is marked as ""trapped"" in the backend

in this condition the mutex remains locked, but with_lock_held won't block
so that the ThreadSuspendMonitor doesn't create deadlocks
also, all JS exception handlers are skipped in this state



This will allow crashes of this kind to actually surface instead of causing a deadlock.
This can be improved over time, but for how this is implemented right now it's not really possible to ""catch"" and handle this kind of exceptions, because that would require forcibly unlock the scope mutex even if it belongs to a crashed thread.
The test case runs in ""slow"" mode only
gum-tests -m slow -p /GumJS/Script/crash_on_thread_holding_js_lock_should_not_deadlock#V8
gum-tests -m slow -p /GumJS/Script/crash_on_thread_holding_js_lock_should_not_deadlock#QJS",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,502,2020-11-13T13:29:52Z,2020-11-25T23:56:18Z,2020-11-26T10:11:01Z,CLOSED,False,64,9,2,https://github.com/WorksButNotTested,"Fix Stalker ARM handling of 'ldr pc, [sp], #4'",1,[],https://github.com/frida/frida-gum/pull/502,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/502,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,502,2020-11-13T13:29:52Z,2020-11-25T23:56:18Z,2020-11-26T10:11:01Z,CLOSED,False,64,9,2,https://github.com/WorksButNotTested,"Fix Stalker ARM handling of 'ldr pc, [sp], #4'",1,[],https://github.com/frida/frida-gum/pull/502,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/502#issuecomment-733996775,,Thanks! Closing as this already landed in #509.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,504,2020-11-13T16:50:42Z,2020-11-25T23:56:07Z,2020-11-26T10:11:08Z,CLOSED,False,123,9,2,https://github.com/WorksButNotTested,Bug 503,2,[],https://github.com/frida/frida-gum/pull/504,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/504,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,504,2020-11-13T16:50:42Z,2020-11-25T23:56:07Z,2020-11-26T10:11:08Z,CLOSED,False,123,9,2,https://github.com/WorksButNotTested,Bug 503,2,[],https://github.com/frida/frida-gum/pull/504,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/504#issuecomment-733996727,,Thanks! Closing as this already landed in #509.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,506,2020-11-16T11:04:46Z,2020-11-25T23:55:42Z,2020-11-26T10:11:17Z,CLOSED,False,167,10,2,https://github.com/WorksButNotTested,Bug 505,3,[],https://github.com/frida/frida-gum/pull/506,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/506,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,506,2020-11-16T11:04:46Z,2020-11-25T23:55:42Z,2020-11-26T10:11:17Z,CLOSED,False,167,10,2,https://github.com/WorksButNotTested,Bug 505,3,[],https://github.com/frida/frida-gum/pull/506,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/506#issuecomment-733996601,,Thanks! Closing as this already landed in #509.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,507,2020-11-20T17:24:54Z,2020-11-26T01:36:04Z,2020-11-26T01:36:05Z,CLOSED,False,429,2,6,https://github.com/mame82,Added support for 'size_t' and 'ssize_t' (as discussed privately),9,[],https://github.com/frida/frida-gum/pull/507,https://github.com/mame82,1,https://github.com/frida/frida-gum/pull/507,"'size_t' is converted to UInt64 for JS runtime
'ssize_t' is converted to Int64 for JS runtime
for usage see test cases","'size_t' is converted to UInt64 for JS runtime
'ssize_t' is converted to Int64 for JS runtime
for usage see test cases",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,507,2020-11-20T17:24:54Z,2020-11-26T01:36:04Z,2020-11-26T01:36:05Z,CLOSED,False,429,2,6,https://github.com/mame82,Added support for 'size_t' and 'ssize_t' (as discussed privately),9,[],https://github.com/frida/frida-gum/pull/507,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/507#issuecomment-734023139,"'size_t' is converted to UInt64 for JS runtime
'ssize_t' is converted to Int64 for JS runtime
for usage see test cases",Landed in 35918ae with some minor tweaks. Thanks!,True,{'THUMBS_UP': ['https://github.com/mame82']}
frida/frida-gum,https://github.com/frida/frida-gum,509,2020-11-23T15:26:14Z,2020-11-25T23:43:14Z,2020-11-26T10:11:23Z,MERGED,True,310,51,6,https://github.com/WorksButNotTested,Bug 508,6,[],https://github.com/frida/frida-gum/pull/509,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/509,,,True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,509,2020-11-23T15:26:14Z,2020-11-25T23:43:14Z,2020-11-26T10:11:23Z,MERGED,True,310,51,6,https://github.com/WorksButNotTested,Bug 508,6,[],https://github.com/frida/frida-gum/pull/509,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/509#issuecomment-732231812,,This PR also included a check of the CRC32 of the compressed data when running the pretend_workload.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,511,2020-11-24T13:48:51Z,2021-01-27T13:12:48Z,2021-01-27T13:12:48Z,CLOSED,False,838,206,13,https://github.com/mephi42,GCC support in CModule,13,[],https://github.com/frida/frida-gum/pull/511,https://github.com/mephi42,1,https://github.com/frida/frida-gum/pull/511,"This PR makes it possible to build CModules with GCC (issue #510).
It can be activated in two ways:

Using Frida on architecture that is not supported by TCC.
Passing 'gcc' as the third CModule constructor parameter.

I've been using the following tweak for testing purposes (all tests pass with it on x86_64 linux):
diff --git a/bindings/gumjs/gumcmodule.c b/bindings/gumjs/gumcmodule.c
index f27c1246..1b483df2 100644
--- a/bindings/gumjs/gumcmodule.c
+++ b/bindings/gumjs/gumcmodule.c
@@ -881,6 +881,7 @@ gum_cmodule_gcc_ops = {
 const GumCModuleOps *
 gum_cmodule_get_ops (const gchar * name)
 {
+  return &gum_cmodule_gcc_ops;
 #ifdef HAVE_TINYCC
   if (!name || strcmp (name, ""tcc"") == 0)
     return &gum_cmodule_tcc_ops;

The code works as follows:

Since switching between TCC and GCC needs to be done during run time, struct ops scheme is used.
The new gum_cmodule_get_ops function resolves struct ops by name; gum_cmodule_new now takes an additional struct ops parameter.
Other gum_cmodule_* functions are unchanged, internally they do common processing and call TCC- or GCC-specific code via struct ops.
GCC processing is done in a temporary directory. During compilation it contains user's C code (module.c) and Frida headers. The compiler must make sure that calls to Frida API are done directly and not using GOT/PLT scheme. On Intel this is achieved by using -mcmodel=large, other architectures might need to add similar options.
During linking a linker script (module.lds) is added. It makes sure that the resulting ELF binary (a.out) is self-contained and calls to Frida API are resolved to their runtime addresses.
Finally, objcopy is used in order to rip raw machine code (module) from the ELF binary.
If the user wants to know what symbols are available, then nm is used.
At the end the entire directory is removed.","This PR makes it possible to build CModules with GCC (issue #510).
It can be activated in two ways:

Using Frida on architecture that is not supported by TCC.
Passing 'gcc' as the third CModule constructor parameter.

I've been using the following tweak for testing purposes (all tests pass with it on x86_64 linux):
diff --git a/bindings/gumjs/gumcmodule.c b/bindings/gumjs/gumcmodule.c
index f27c1246..1b483df2 100644
--- a/bindings/gumjs/gumcmodule.c
+++ b/bindings/gumjs/gumcmodule.c
@@ -881,6 +881,7 @@ gum_cmodule_gcc_ops = {
 const GumCModuleOps *
 gum_cmodule_get_ops (const gchar * name)
 {
+  return &gum_cmodule_gcc_ops;
 #ifdef HAVE_TINYCC
   if (!name || strcmp (name, ""tcc"") == 0)
     return &gum_cmodule_tcc_ops;

The code works as follows:

Since switching between TCC and GCC needs to be done during run time, struct ops scheme is used.
The new gum_cmodule_get_ops function resolves struct ops by name; gum_cmodule_new now takes an additional struct ops parameter.
Other gum_cmodule_* functions are unchanged, internally they do common processing and call TCC- or GCC-specific code via struct ops.
GCC processing is done in a temporary directory. During compilation it contains user's C code (module.c) and Frida headers. The compiler must make sure that calls to Frida API are done directly and not using GOT/PLT scheme. On Intel this is achieved by using -mcmodel=large, other architectures might need to add similar options.
During linking a linker script (module.lds) is added. It makes sure that the resulting ELF binary (a.out) is self-contained and calls to Frida API are resolved to their runtime addresses.
Finally, objcopy is used in order to rip raw machine code (module) from the ELF binary.
If the user wants to know what symbols are available, then nm is used.
At the end the entire directory is removed.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,511,2020-11-24T13:48:51Z,2021-01-27T13:12:48Z,2021-01-27T13:12:48Z,CLOSED,False,838,206,13,https://github.com/mephi42,GCC support in CModule,13,[],https://github.com/frida/frida-gum/pull/511,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/511#issuecomment-768276237,"This PR makes it possible to build CModules with GCC (issue #510).
It can be activated in two ways:

Using Frida on architecture that is not supported by TCC.
Passing 'gcc' as the third CModule constructor parameter.

I've been using the following tweak for testing purposes (all tests pass with it on x86_64 linux):
diff --git a/bindings/gumjs/gumcmodule.c b/bindings/gumjs/gumcmodule.c
index f27c1246..1b483df2 100644
--- a/bindings/gumjs/gumcmodule.c
+++ b/bindings/gumjs/gumcmodule.c
@@ -881,6 +881,7 @@ gum_cmodule_gcc_ops = {
 const GumCModuleOps *
 gum_cmodule_get_ops (const gchar * name)
 {
+  return &gum_cmodule_gcc_ops;
 #ifdef HAVE_TINYCC
   if (!name || strcmp (name, ""tcc"") == 0)
     return &gum_cmodule_tcc_ops;

The code works as follows:

Since switching between TCC and GCC needs to be done during run time, struct ops scheme is used.
The new gum_cmodule_get_ops function resolves struct ops by name; gum_cmodule_new now takes an additional struct ops parameter.
Other gum_cmodule_* functions are unchanged, internally they do common processing and call TCC- or GCC-specific code via struct ops.
GCC processing is done in a temporary directory. During compilation it contains user's C code (module.c) and Frida headers. The compiler must make sure that calls to Frida API are done directly and not using GOT/PLT scheme. On Intel this is achieved by using -mcmodel=large, other architectures might need to add similar options.
During linking a linker script (module.lds) is added. It makes sure that the resulting ELF binary (a.out) is self-contained and calls to Frida API are resolved to their runtime addresses.
Finally, objcopy is used in order to rip raw machine code (module) from the ELF binary.
If the user wants to know what symbols are available, then nm is used.
At the end the entire directory is removed.",Last part of this just landed in 6677679 üéâ üôå,True,{'HOORAY': ['https://github.com/mephi42']}
frida/frida-gum,https://github.com/frida/frida-gum,512,2020-11-25T00:19:21Z,2020-11-25T00:22:29Z,2020-11-25T00:22:37Z,MERGED,True,288,215,22,https://github.com/oleavr,Move remaining dependencies to the Frida SDK,11,[],https://github.com/frida/frida-gum/pull/512,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/512,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,513,2020-11-26T10:15:02Z,2020-11-26T17:32:28Z,2020-12-16T15:04:07Z,CLOSED,False,8,1,1,https://github.com/WorksButNotTested,Fix ARM Stalker following of threads running Thumb code,1,[],https://github.com/frida/frida-gum/pull/513,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/513,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,513,2020-11-26T10:15:02Z,2020-11-26T17:32:28Z,2020-12-16T15:04:07Z,CLOSED,False,8,1,1,https://github.com/WorksButNotTested,Fix ARM Stalker following of threads running Thumb code,1,[],https://github.com/frida/frida-gum/pull/513,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/513#issuecomment-734418250,,Thanks! üòç Landed as part of #514.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,514,2020-11-26T15:09:27Z,2020-11-26T17:31:39Z,2020-12-16T15:03:59Z,MERGED,True,57,6,3,https://github.com/WorksButNotTested,Pthread create,3,[],https://github.com/frida/frida-gum/pull/514,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/514,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,514,2020-11-26T15:09:27Z,2020-11-26T17:31:39Z,2020-12-16T15:03:59Z,MERGED,True,57,6,3,https://github.com/WorksButNotTested,Pthread create,3,[],https://github.com/frida/frida-gum/pull/514,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/514#issuecomment-734417888,,Thanks! üòç,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,515,2020-11-28T16:42:24Z,2021-01-06T17:59:15Z,2021-01-06T17:59:21Z,MERGED,True,7,7,2,https://github.com/meme,Fix linking during .gir generation,1,[],https://github.com/frida/frida-gum/pull/515,https://github.com/meme,1,https://github.com/frida/frida-gum/pull/515,"During set-up I ran into another bug that I somehow missed in the original PR.
When linking against libelf and libdwarf using extra_libs_private it will only add -lelf and -ldwarf. However this apparently doesn't do what I thought it did so you'll get a bunch of errors for missing symbols in libelf.
It turns out that g-ir-scanner expects instead to receive e.g.: --extra-library=elf. By using dependency and having it link against gum (via extra_deps) Meson will automatically add --extra-library=elf.
So we can either use a dependency, or we can add the --extra-library= flags manually into extra_libs_private","During set-up I ran into another bug that I somehow missed in the original PR.
When linking against libelf and libdwarf using extra_libs_private it will only add -lelf and -ldwarf. However this apparently doesn't do what I thought it did so you'll get a bunch of errors for missing symbols in libelf.
It turns out that g-ir-scanner expects instead to receive e.g.: --extra-library=elf. By using dependency and having it link against gum (via extra_deps) Meson will automatically add --extra-library=elf.
So we can either use a dependency, or we can add the --extra-library= flags manually into extra_libs_private",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,515,2020-11-28T16:42:24Z,2021-01-06T17:59:15Z,2021-01-06T17:59:21Z,MERGED,True,7,7,2,https://github.com/meme,Fix linking during .gir generation,1,[],https://github.com/frida/frida-gum/pull/515,https://github.com/meme,2,https://github.com/frida/frida-gum/pull/515#issuecomment-739328824,"During set-up I ran into another bug that I somehow missed in the original PR.
When linking against libelf and libdwarf using extra_libs_private it will only add -lelf and -ldwarf. However this apparently doesn't do what I thought it did so you'll get a bunch of errors for missing symbols in libelf.
It turns out that g-ir-scanner expects instead to receive e.g.: --extra-library=elf. By using dependency and having it link against gum (via extra_deps) Meson will automatically add --extra-library=elf.
So we can either use a dependency, or we can add the --extra-library= flags manually into extra_libs_private","Unless I'm mistaken, it looks like there are pkg-config files:
$ find . | grep -E ""lib(elf|dw).pc""                                                                                                                        13:04:39
./build/fs-tmp-linux-x86_64/elfutils/config/libelf.pc
./build/fs-tmp-linux-x86_64/elfutils/config/libdw.pc

I've pushed up the changes to unconditionally use pkg-config. Need to do some more testing locally.

Edit: I'm mistaken, these were from a toolchain build I did. Looking into what's needed to install these to the $$prefix",True,{'THUMBS_UP': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,515,2020-11-28T16:42:24Z,2021-01-06T17:59:15Z,2021-01-06T17:59:21Z,MERGED,True,7,7,2,https://github.com/meme,Fix linking during .gir generation,1,[],https://github.com/frida/frida-gum/pull/515,https://github.com/meme,3,https://github.com/frida/frida-gum/pull/515#issuecomment-744123586,"During set-up I ran into another bug that I somehow missed in the original PR.
When linking against libelf and libdwarf using extra_libs_private it will only add -lelf and -ldwarf. However this apparently doesn't do what I thought it did so you'll get a bunch of errors for missing symbols in libelf.
It turns out that g-ir-scanner expects instead to receive e.g.: --extra-library=elf. By using dependency and having it link against gum (via extra_deps) Meson will automatically add --extra-library=elf.
So we can either use a dependency, or we can add the --extra-library= flags manually into extra_libs_private","Hmm... so this works, but I've got some confusion which could be a problem. On Arch Linux when I install elfutils it installs a libdw.pc file which points to libdw, which is NOT libdwarf. Frida requires libdwarf, however so there are some missing symbols to, e.g.: dwarf_dealloc. Should we just make it clear which library is expected?
This is very unfortunate and confusing that these libraries have a naming conflict...
We could potentially just link against the Frida SDK provided libdwarf and libelf to avoid this issue. We could keep it to ONLY GLib stuff that is shared and provide other non-GLib libraries; perhaps this blurs the line though. I'm open to either.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,515,2020-11-28T16:42:24Z,2021-01-06T17:59:15Z,2021-01-06T17:59:21Z,MERGED,True,7,7,2,https://github.com/meme,Fix linking during .gir generation,1,[],https://github.com/frida/frida-gum/pull/515,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/515#issuecomment-748124251,"During set-up I ran into another bug that I somehow missed in the original PR.
When linking against libelf and libdwarf using extra_libs_private it will only add -lelf and -ldwarf. However this apparently doesn't do what I thought it did so you'll get a bunch of errors for missing symbols in libelf.
It turns out that g-ir-scanner expects instead to receive e.g.: --extra-library=elf. By using dependency and having it link against gum (via extra_deps) Meson will automatically add --extra-library=elf.
So we can either use a dependency, or we can add the --extra-library= flags manually into extra_libs_private","Should we just make it clear which library is expected?

On Ubuntu the package name is libdwarf-dev, but it doesn't bundle a .pc. So I think we should assume -ldwarf here.
It would be good to consume libelf through its .pc though, and improve our SDK build recipe to include it. (Like you did in your other PR üëå.)",True,{'THUMBS_UP': ['https://github.com/meme']}
frida/frida-gum,https://github.com/frida/frida-gum,515,2020-11-28T16:42:24Z,2021-01-06T17:59:15Z,2021-01-06T17:59:21Z,MERGED,True,7,7,2,https://github.com/meme,Fix linking during .gir generation,1,[],https://github.com/frida/frida-gum/pull/515,https://github.com/meme,5,https://github.com/frida/frida-gum/pull/515#issuecomment-748666497,"During set-up I ran into another bug that I somehow missed in the original PR.
When linking against libelf and libdwarf using extra_libs_private it will only add -lelf and -ldwarf. However this apparently doesn't do what I thought it did so you'll get a bunch of errors for missing symbols in libelf.
It turns out that g-ir-scanner expects instead to receive e.g.: --extra-library=elf. By using dependency and having it link against gum (via extra_deps) Meson will automatically add --extra-library=elf.
So we can either use a dependency, or we can add the --extra-library= flags manually into extra_libs_private",frida/frida#1557 will add the pkg-config file for libelf. And this PR uses that .pc file and then uses the original code for checking for libdwarf and uses --extra-library=dwarf,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,515,2020-11-28T16:42:24Z,2021-01-06T17:59:15Z,2021-01-06T17:59:21Z,MERGED,True,7,7,2,https://github.com/meme,Fix linking during .gir generation,1,[],https://github.com/frida/frida-gum/pull/515,https://github.com/oleavr,6,https://github.com/frida/frida-gum/pull/515#issuecomment-755460615,"During set-up I ran into another bug that I somehow missed in the original PR.
When linking against libelf and libdwarf using extra_libs_private it will only add -lelf and -ldwarf. However this apparently doesn't do what I thought it did so you'll get a bunch of errors for missing symbols in libelf.
It turns out that g-ir-scanner expects instead to receive e.g.: --extra-library=elf. By using dependency and having it link against gum (via extra_deps) Meson will automatically add --extra-library=elf.
So we can either use a dependency, or we can add the --extra-library= flags manually into extra_libs_private",Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,516,2020-11-30T00:09:17Z,2020-12-08T19:41:01Z,2020-12-08T19:41:24Z,MERGED,True,61,50,13,https://github.com/mephi42,GCC support in CModule [1/N],4,[],https://github.com/frida/frida-gum/pull/516,https://github.com/mephi42,1,https://github.com/frida/frida-gum/pull/516,"This is related to #511 - Frida appears to be changed fairly often, and with my slow pace of adjusting the original PR, I keep running into merge conflicts. Would you consider taking GCC support piecemeal? In this PR I have preparatory commits that don't touch GumCModule.","This is related to #511 - Frida appears to be changed fairly often, and with my slow pace of adjusting the original PR, I keep running into merge conflicts. Would you consider taking GCC support piecemeal? In this PR I have preparatory commits that don't touch GumCModule.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,516,2020-11-30T00:09:17Z,2020-12-08T19:41:01Z,2020-12-08T19:41:24Z,MERGED,True,61,50,13,https://github.com/mephi42,GCC support in CModule [1/N],4,[],https://github.com/frida/frida-gum/pull/516,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/516#issuecomment-740920781,"This is related to #511 - Frida appears to be changed fairly often, and with my slow pace of adjusting the original PR, I keep running into merge conflicts. Would you consider taking GCC support piecemeal? In this PR I have preparatory commits that don't touch GumCModule.","Thanks a lot! (And apologies for the delay here, I didn't notice the update.)",True,{'THUMBS_UP': ['https://github.com/mephi42']}
frida/frida-gum,https://github.com/frida/frida-gum,517,2020-12-14T18:16:16Z,2020-12-15T00:29:13Z,2020-12-15T00:48:10Z,MERGED,True,3,0,1,https://github.com/ant9000,Fix crash when resolving export of the vDSO on Android,2,[],https://github.com/frida/frida-gum/pull/517,https://github.com/ant9000,1,https://github.com/frida/frida-gum/pull/517,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,517,2020-12-14T18:16:16Z,2020-12-15T00:29:13Z,2020-12-15T00:48:10Z,MERGED,True,3,0,1,https://github.com/ant9000,Fix crash when resolving export of the vDSO on Android,2,[],https://github.com/frida/frida-gum/pull/517,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/517#issuecomment-744910075,,"Thanks a lot, great catch! üöÄ",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,519,2020-12-15T00:28:22Z,2020-12-18T18:52:48Z,2020-12-18T18:52:48Z,MERGED,True,211,111,5,https://github.com/mephi42,GCC support in CModule [2/N],3,[],https://github.com/frida/frida-gum/pull/519,https://github.com/mephi42,1,https://github.com/frida/frida-gum/pull/519,"Hi! I finally managed to wrap my head around GObject. This patch is a rewrite of 8775940, which enables adding new compiler backends in addition to TCC.","Hi! I finally managed to wrap my head around GObject. This patch is a rewrite of 8775940, which enables adding new compiler backends in addition to TCC.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,519,2020-12-15T00:28:22Z,2020-12-18T18:52:48Z,2020-12-18T18:52:48Z,MERGED,True,211,111,5,https://github.com/mephi42,GCC support in CModule [2/N],3,[],https://github.com/frida/frida-gum/pull/519,https://github.com/mephi42,2,https://github.com/frida/frida-gum/pull/519#issuecomment-745002244,"Hi! I finally managed to wrap my head around GObject. This patch is a rewrite of 8775940, which enables adding new compiler backends in addition to TCC.",Thanks for the quick and thorough review üëç I hope I didn't miss anything!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,520,2020-12-18T00:43:02Z,2020-12-18T15:54:44Z,2020-12-18T15:54:55Z,MERGED,True,44,9,1,https://github.com/muhzii,Fix linker offsets for Android 5.x,1,[],https://github.com/frida/frida-gum/pull/520,https://github.com/muhzii,1,https://github.com/frida/frida-gum/pull/520,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,520,2020-12-18T00:43:02Z,2020-12-18T15:54:44Z,2020-12-18T15:54:55Z,MERGED,True,44,9,1,https://github.com/muhzii,Fix linker offsets for Android 5.x,1,[],https://github.com/frida/frida-gum/pull/520,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/520#issuecomment-748171045,,Thanks! üòç,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,521,2020-12-18T23:15:10Z,2020-12-18T23:21:32Z,2020-12-18T23:21:32Z,MERGED,True,6,0,1,https://github.com/muhzii,Add preprocessor guards for maybe unused function,3,[],https://github.com/frida/frida-gum/pull/521,https://github.com/muhzii,1,https://github.com/frida/frida-gum/pull/521,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,522,2020-12-27T22:09:22Z,2020-12-28T00:20:04Z,2020-12-28T00:20:04Z,CLOSED,False,1,1,1,https://github.com/timgates42,"docs: fix simple typo, continguous -> contiguous",1,[],https://github.com/frida/frida-gum/pull/522,https://github.com/timgates42,1,https://github.com/frida/frida-gum/pull/522,"There is a small typo in gum/dlmalloc.c.
Should read contiguous rather than continguous.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in gum/dlmalloc.c.
Should read contiguous rather than continguous.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,522,2020-12-27T22:09:22Z,2020-12-28T00:20:04Z,2020-12-28T00:20:04Z,CLOSED,False,1,1,1,https://github.com/timgates42,"docs: fix simple typo, continguous -> contiguous",1,[],https://github.com/frida/frida-gum/pull/522,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/522#issuecomment-751533674,"There is a small typo in gum/dlmalloc.c.
Should read contiguous rather than continguous.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","Thanks! This should be submitted upstream to dlmalloc. We don't want to maintain any non-essential patches on top of it, so I'm afraid I'll have to reject this PR, even if I like its contents.",True,{'THUMBS_UP': ['https://github.com/timgates42']}
frida/frida-gum,https://github.com/frida/frida-gum,523,2020-12-29T18:06:48Z,2021-01-06T19:26:49Z,2021-01-06T19:26:49Z,MERGED,True,113,18,4,https://github.com/muhzii,Extend Memory.alloc() to support allocating near a given address,9,[],https://github.com/frida/frida-gum/pull/523,https://github.com/muhzii,1,https://github.com/frida/frida-gum/pull/523,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,524,2020-12-31T03:39:47Z,2021-01-06T23:57:46Z,2021-01-14T07:31:07Z,CLOSED,False,159,23,5,https://github.com/dkw72n,Fix mishandled relocation of rip relative indirect call in x86_64,8,[],https://github.com/frida/frida-gum/pull/524,https://github.com/dkw72n,1,https://github.com/frida/frida-gum/pull/524,"FF 15 12 34 56 78 behave differently under x86 and x86_64.
x86:
0:  ff 15 12 34 56 78       call   DWORD PTR ds:0x78563412

x64:
0:  ff 15 12 34 56 78       call   QWORD PTR [rip+0x78563412]        # 0x78563418

In x86_64, it's a call to the value of a rip relative address,
hence should be handled by the rip_relative* routine.","FF 15 12 34 56 78 behave differently under x86 and x86_64.
x86:
0:  ff 15 12 34 56 78       call   DWORD PTR ds:0x78563412

x64:
0:  ff 15 12 34 56 78       call   QWORD PTR [rip+0x78563412]        # 0x78563418

In x86_64, it's a call to the value of a rip relative address,
hence should be handled by the rip_relative* routine.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,524,2020-12-31T03:39:47Z,2021-01-06T23:57:46Z,2021-01-14T07:31:07Z,CLOSED,False,159,23,5,https://github.com/dkw72n,Fix mishandled relocation of rip relative indirect call in x86_64,8,[],https://github.com/frida/frida-gum/pull/524,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/524#issuecomment-755785960,"FF 15 12 34 56 78 behave differently under x86 and x86_64.
x86:
0:  ff 15 12 34 56 78       call   DWORD PTR ds:0x78563412

x64:
0:  ff 15 12 34 56 78       call   QWORD PTR [rip+0x78563412]        # 0x78563418

In x86_64, it's a call to the value of a rip relative address,
hence should be handled by the rip_relative* routine.",Tweaked version landed as 28213b4. Thanks a lot for this awesome PR! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,529,2021-01-15T18:47:56Z,2021-01-21T00:35:33Z,2021-01-21T00:37:48Z,MERGED,True,320,140,2,https://github.com/mephi42,GCC support in CModule [3/N],5,[],https://github.com/frida/frida-gum/pull/529,https://github.com/mephi42,1,https://github.com/frida/frida-gum/pull/529,"Another fragment of #511 ported to GObject, this time the following commits:

Split gum_cmodule_free_tcc
Split gum_cmodule_link_tcc
Split gum_add_defines from gum_cmodule_new_tcc
Add stub GCC CModule ops","Another fragment of #511 ported to GObject, this time the following commits:

Split gum_cmodule_free_tcc
Split gum_cmodule_link_tcc
Split gum_add_defines from gum_cmodule_new_tcc
Add stub GCC CModule ops",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,529,2021-01-15T18:47:56Z,2021-01-21T00:35:33Z,2021-01-21T00:37:48Z,MERGED,True,320,140,2,https://github.com/mephi42,GCC support in CModule [3/N],5,[],https://github.com/frida/frida-gum/pull/529,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/529#issuecomment-764085243,"Another fragment of #511 ported to GObject, this time the following commits:

Split gum_cmodule_free_tcc
Split gum_cmodule_link_tcc
Split gum_add_defines from gum_cmodule_new_tcc
Add stub GCC CModule ops","Thanks! Sorry for the delay here, I got sick and accumulated a ton of backlog üòÖ
Just applied some final tweaks and landed. Super-excited about the next part! üòç",True,{'THUMBS_UP': ['https://github.com/mephi42']}
frida/frida-gum,https://github.com/frida/frida-gum,530,2021-01-20T12:53:58Z,2021-01-23T02:53:48Z,2021-02-01T15:52:44Z,MERGED,True,908,0,8,https://github.com/WorksButNotTested,Add Stalker prefetch support for x86_64,1,[],https://github.com/frida/frida-gum/pull/530,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/530,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,530,2021-01-20T12:53:58Z,2021-01-23T02:53:48Z,2021-02-01T15:52:44Z,MERGED,True,908,0,8,https://github.com/WorksButNotTested,Add Stalker prefetch support for x86_64,1,[],https://github.com/frida/frida-gum/pull/530,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/530#issuecomment-764843748,,Note to self. Add parameter for block cycle count.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,530,2021-01-20T12:53:58Z,2021-01-23T02:53:48Z,2021-02-01T15:52:44Z,MERGED,True,908,0,8,https://github.com/WorksButNotTested,Add Stalker prefetch support for x86_64,1,[],https://github.com/frida/frida-gum/pull/530,https://github.com/WorksButNotTested,3,https://github.com/frida/frida-gum/pull/530#issuecomment-764904105,,Note to self. DON'T inline the activation target.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,530,2021-01-20T12:53:58Z,2021-01-23T02:53:48Z,2021-02-01T15:52:44Z,MERGED,True,908,0,8,https://github.com/WorksButNotTested,Add Stalker prefetch support for x86_64,1,[],https://github.com/frida/frida-gum/pull/530,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/530#issuecomment-765011739,,(Note that some of the suggestions rename variables but I didn't add suggestions to update references to those variables.),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,531,2021-01-20T18:29:06Z,2021-03-12T14:22:14Z,2021-03-12T14:22:14Z,CLOSED,False,195,1,3,https://github.com/WorksButNotTested,Cache x86 instruction translations,1,[],https://github.com/frida/frida-gum/pull/531,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/531,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,531,2021-01-20T18:29:06Z,2021-03-12T14:22:14Z,2021-03-12T14:22:14Z,CLOSED,False,195,1,3,https://github.com/WorksButNotTested,Cache x86 instruction translations,1,[],https://github.com/frida/frida-gum/pull/531,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/531#issuecomment-763845185,,DO NOT MERGE,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,531,2021-01-20T18:29:06Z,2021-03-12T14:22:14Z,2021-03-12T14:22:14Z,CLOSED,False,195,1,3,https://github.com/WorksButNotTested,Cache x86 instruction translations,1,[],https://github.com/frida/frida-gum/pull/531,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/531#issuecomment-797520444,,Thanks for exploring this! üôå Let's revisit this at a later time when we get new ideas.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,532,2021-01-23T18:37:45Z,2021-01-27T13:11:54Z,2021-01-27T13:11:54Z,MERGED,True,567,66,2,https://github.com/mephi42,GCC support in CModule [4/N],13,[],https://github.com/frida/frida-gum/pull/532,https://github.com/mephi42,1,https://github.com/frida/frida-gum/pull/532,"Here are the rest of the original patches ported to GObject and tweaked a little bit according to my (hopefully) improved understanding of the code style. What remains is the testing part, right now one can apply
--- a/bindings/gumjs/gumcmodule.c
+++ b/bindings/gumjs/gumcmodule.c
@@ -81,6 +81,8 @@ gum_cmodule_new (const gchar * name,
                  const gchar * source,
                  GError ** error)
 {
+  return gum_gcc_cmodule_new (source, error);
+
 #ifdef HAVE_TINYCC
   if (name == NULL || strcmp (name, ""tcc"") == 0)
     return gum_tcc_cmodule_new (source, error);

to run the tests, but I think it should be possible to detect whether GCC is installed and run both TCC and GCC tests in this case.","Here are the rest of the original patches ported to GObject and tweaked a little bit according to my (hopefully) improved understanding of the code style. What remains is the testing part, right now one can apply
--- a/bindings/gumjs/gumcmodule.c
+++ b/bindings/gumjs/gumcmodule.c
@@ -81,6 +81,8 @@ gum_cmodule_new (const gchar * name,
                  const gchar * source,
                  GError ** error)
 {
+  return gum_gcc_cmodule_new (source, error);
+
 #ifdef HAVE_TINYCC
   if (name == NULL || strcmp (name, ""tcc"") == 0)
     return gum_tcc_cmodule_new (source, error);

to run the tests, but I think it should be possible to detect whether GCC is installed and run both TCC and GCC tests in this case.",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,532,2021-01-23T18:37:45Z,2021-01-27T13:11:54Z,2021-01-27T13:11:54Z,MERGED,True,567,66,2,https://github.com/mephi42,GCC support in CModule [4/N],13,[],https://github.com/frida/frida-gum/pull/532,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/532#issuecomment-767946346,"Here are the rest of the original patches ported to GObject and tweaked a little bit according to my (hopefully) improved understanding of the code style. What remains is the testing part, right now one can apply
--- a/bindings/gumjs/gumcmodule.c
+++ b/bindings/gumjs/gumcmodule.c
@@ -81,6 +81,8 @@ gum_cmodule_new (const gchar * name,
                  const gchar * source,
                  GError ** error)
 {
+  return gum_gcc_cmodule_new (source, error);
+
 #ifdef HAVE_TINYCC
   if (name == NULL || strcmp (name, ""tcc"") == 0)
     return gum_tcc_cmodule_new (source, error);

to run the tests, but I think it should be possible to detect whether GCC is installed and run both TCC and GCC tests in this case.","Wow, awesome! üí• Aiming to land this later today. I think we'll want to revise the JS API a little bit, making the last argument an object of options so it's extensible. (I'll take care of this while merging.)",True,{'THUMBS_UP': ['https://github.com/mephi42']}
frida/frida-gum,https://github.com/frida/frida-gum,533,2021-01-27T11:47:35Z,2021-01-27T13:18:14Z,2021-01-27T13:18:14Z,MERGED,True,14,0,1,https://github.com/mrmacete,Handle permanent entries on darwin codesegment,1,[],https://github.com/frida/frida-gum/pull/533,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/533,"Starting from iOS 14.3 on A12+ devices, mach_vm_remap can return KERN_NO_SPACE when the target vm map entries are marked as ‚Äúpermanent‚Äù.
It happens because PMAP_CS is enabled in the kernel, and all executable maps coming from the app itself and dyld have it enforced which also implies the maps are immutable (it is actually controlled by the vm_map_executable_immutable boot argument, which is 1 by default and can‚Äôt normally be changed).
This change detects and works around the issue by calling mach_vm_protect with the VM_PROT_COPY flag, to instruct the kernel to implicitly remap the target entries by removing the ‚Äùpermanent‚Äù bit.","Starting from iOS 14.3 on A12+ devices, mach_vm_remap can return KERN_NO_SPACE when the target vm map entries are marked as ‚Äúpermanent‚Äù.
It happens because PMAP_CS is enabled in the kernel, and all executable maps coming from the app itself and dyld have it enforced which also implies the maps are immutable (it is actually controlled by the vm_map_executable_immutable boot argument, which is 1 by default and can‚Äôt normally be changed).
This change detects and works around the issue by calling mach_vm_protect with the VM_PROT_COPY flag, to instruct the kernel to implicitly remap the target entries by removing the ‚Äùpermanent‚Äù bit.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,534,2021-02-09T22:31:28Z,2021-02-09T23:51:00Z,2021-02-09T23:51:15Z,MERGED,True,3,13,2,https://github.com/muhzii,Fix Instruction operands parsing on x86,3,[],https://github.com/frida/frida-gum/pull/534,https://github.com/muhzii,1,https://github.com/frida/frida-gum/pull/534,the op->imm field is a 64 bit value in both variants.,the op->imm field is a 64 bit value in both variants.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,534,2021-02-09T22:31:28Z,2021-02-09T23:51:00Z,2021-02-09T23:51:15Z,MERGED,True,3,13,2,https://github.com/muhzii,Fix Instruction operands parsing on x86,3,[],https://github.com/frida/frida-gum/pull/534,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/534#issuecomment-776324378,the op->imm field is a 64 bit value in both variants.,Thanks! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,536,2021-02-18T17:08:59Z,2021-02-18T23:45:37Z,2021-02-18T23:45:55Z,MERGED,True,36,0,1,https://github.com/mrmacete,Expose base64 and checksum glib primitives to CModule,1,[],https://github.com/frida/frida-gum/pull/536,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/536,Motivation: this is exactly the kind of common things which are sensibly faster when done from a CModule.,Motivation: this is exactly the kind of common things which are sensibly faster when done from a CModule.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,536,2021-02-18T17:08:59Z,2021-02-18T23:45:37Z,2021-02-18T23:45:55Z,MERGED,True,36,0,1,https://github.com/mrmacete,Expose base64 and checksum glib primitives to CModule,1,[],https://github.com/frida/frida-gum/pull/536,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/536#issuecomment-781709436,Motivation: this is exactly the kind of common things which are sensibly faster when done from a CModule.,Thanks! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,537,2021-02-26T18:48:22Z,2021-06-16T18:14:55Z,2021-06-16T18:14:55Z,CLOSED,False,2210,505,23,https://github.com/WorksButNotTested,Features/run on thread,3,[],https://github.com/frida/frida-gum/pull/537,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/537,"Obviously not ready yet, needs a lot of cleaning up. But what are your thoughts?","Obviously not ready yet, needs a lot of cleaning up. But what are your thoughts?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,537,2021-02-26T18:48:22Z,2021-06-16T18:14:55Z,2021-06-16T18:14:55Z,CLOSED,False,2210,505,23,https://github.com/WorksButNotTested,Features/run on thread,3,[],https://github.com/frida/frida-gum/pull/537,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/537#issuecomment-786832324,"Obviously not ready yet, needs a lot of cleaning up. But what are your thoughts?","Thanks, this is a great idea!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,538,2021-02-26T22:34:48Z,2021-03-02T22:37:28Z,2021-03-02T22:37:28Z,MERGED,True,6,0,1,https://github.com/fabianfreyer,Stalker/x86: Also emit call probe on jmp insns,1,[],https://github.com/frida/frida-gum/pull/538,https://github.com/fabianfreyer,1,https://github.com/frida/frida-gum/pull/538,"Call probes do not work on imported functions called through the GOT, as
these are indirect jumps with the target taken from the PLT.
Also considering direct jumps as candidates for call probes additionally
allows for call probes to be triggered when called as tail-calls.
This has a performance impact at compile-time on the stalker, but should
have no performance impact at run-time.","Call probes do not work on imported functions called through the GOT, as
these are indirect jumps with the target taken from the PLT.
Also considering direct jumps as candidates for call probes additionally
allows for call probes to be triggered when called as tail-calls.
This has a performance impact at compile-time on the stalker, but should
have no performance impact at run-time.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,538,2021-02-26T22:34:48Z,2021-03-02T22:37:28Z,2021-03-02T22:37:28Z,MERGED,True,6,0,1,https://github.com/fabianfreyer,Stalker/x86: Also emit call probe on jmp insns,1,[],https://github.com/frida/frida-gum/pull/538,https://github.com/fabianfreyer,2,https://github.com/frida/frida-gum/pull/538#issuecomment-786947342,"Call probes do not work on imported functions called through the GOT, as
these are indirect jumps with the target taken from the PLT.
Also considering direct jumps as candidates for call probes additionally
allows for call probes to be triggered when called as tail-calls.
This has a performance impact at compile-time on the stalker, but should
have no performance impact at run-time.",Should be updated now,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,539,2021-02-26T23:49:20Z,2021-03-12T14:20:40Z,2021-03-12T14:20:40Z,CLOSED,False,259,35,2,https://github.com/fabianfreyer,Stalker: Invalidation,4,[],https://github.com/frida/frida-gum/pull/539,https://github.com/fabianfreyer,1,https://github.com/frida/frida-gum/pull/539,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,539,2021-02-26T23:49:20Z,2021-03-12T14:20:40Z,2021-03-12T14:20:40Z,CLOSED,False,259,35,2,https://github.com/fabianfreyer,Stalker: Invalidation,4,[],https://github.com/frida/frida-gum/pull/539,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/539#issuecomment-797519537,,Thanks a lot! This led to the discovery of a simpler solution which just landed in 413c7e5. Cheers! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,540,2021-02-27T01:40:40Z,2021-04-26T19:07:14Z,2021-04-26T19:07:14Z,CLOSED,False,22,8,5,https://github.com/fabianfreyer,Stalker: rename and expose cache flushing routine,1,[],https://github.com/frida/frida-gum/pull/540,https://github.com/fabianfreyer,1,https://github.com/frida/frida-gum/pull/540,"Rename gum_stalker_invalidate_caches to gum_stalker_flush_caches to make
clear that this will invalidate the complete cache, as opposed to
a single basic block as planned with a future API.
Exposing this API means adding stub functions to the MIPS and ARM32
stalker implementations. On MIPS, Stalker is not supported, so just add
a similar stub implementation there. On ARM32, the invalidation logic
was not ported from ARM64 since it was not needed due to missing call
probe support. There, gum_stalker_flush_caches is also left as a stub
function, pending porting from ARM64.","Rename gum_stalker_invalidate_caches to gum_stalker_flush_caches to make
clear that this will invalidate the complete cache, as opposed to
a single basic block as planned with a future API.
Exposing this API means adding stub functions to the MIPS and ARM32
stalker implementations. On MIPS, Stalker is not supported, so just add
a similar stub implementation there. On ARM32, the invalidation logic
was not ported from ARM64 since it was not needed due to missing call
probe support. There, gum_stalker_flush_caches is also left as a stub
function, pending porting from ARM64.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,540,2021-02-27T01:40:40Z,2021-04-26T19:07:14Z,2021-04-26T19:07:14Z,CLOSED,False,22,8,5,https://github.com/fabianfreyer,Stalker: rename and expose cache flushing routine,1,[],https://github.com/frida/frida-gum/pull/540,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/540#issuecomment-797516800,"Rename gum_stalker_invalidate_caches to gum_stalker_flush_caches to make
clear that this will invalidate the complete cache, as opposed to
a single basic block as planned with a future API.
Exposing this API means adding stub functions to the MIPS and ARM32
stalker implementations. On MIPS, Stalker is not supported, so just add
a similar stub implementation there. On ARM32, the invalidation logic
was not ported from ARM64 since it was not needed due to missing call
probe support. There, gum_stalker_flush_caches is also left as a stub
function, pending porting from ARM64.","Thanks! I think this is a great idea. Though if we expose this we should also improve the implementation so we can release the slabs we've already allocated, and start fresh. The only caveat I can think of is that we also need to reset the side-stack.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,540,2021-02-27T01:40:40Z,2021-04-26T19:07:14Z,2021-04-26T19:07:14Z,CLOSED,False,22,8,5,https://github.com/fabianfreyer,Stalker: rename and expose cache flushing routine,1,[],https://github.com/frida/frida-gum/pull/540,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/540#issuecomment-827076905,"Rename gum_stalker_invalidate_caches to gum_stalker_flush_caches to make
clear that this will invalidate the complete cache, as opposed to
a single basic block as planned with a future API.
Exposing this API means adding stub functions to the MIPS and ARM32
stalker implementations. On MIPS, Stalker is not supported, so just add
a similar stub implementation there. On ARM32, the invalidation logic
was not ported from ARM64 since it was not needed due to missing call
probe support. There, gum_stalker_flush_caches is also left as a stub
function, pending porting from ARM64.",Assuming this is covered by the invalidation feature that landed not that long ago. (Feel free to reopen if you'd like to revisit this at some point.) Cheers! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,544,2021-04-14T20:45:55Z,2021-04-15T09:32:57Z,2021-04-15T09:32:57Z,MERGED,True,34,7,1,https://github.com/asabil,Relax android linker path matching,2,[],https://github.com/frida/frida-gum/pull/544,https://github.com/asabil,1,https://github.com/frida/frida-gum/pull/544,"In container environments such as anbox, the linker path in /proc/self/maps doesn't always map 1-to-1 with the actual linker path. This commit relaxes the matching of the linker by using a regex.","In container environments such as anbox, the linker path in /proc/self/maps doesn't always map 1-to-1 with the actual linker path. This commit relaxes the matching of the linker by using a regex.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,544,2021-04-14T20:45:55Z,2021-04-15T09:32:57Z,2021-04-15T09:32:57Z,MERGED,True,34,7,1,https://github.com/asabil,Relax android linker path matching,2,[],https://github.com/frida/frida-gum/pull/544,https://github.com/asabil,2,https://github.com/frida/frida-gum/pull/544#issuecomment-820278261,"In container environments such as anbox, the linker path in /proc/self/maps doesn't always map 1-to-1 with the actual linker path. This commit relaxes the matching of the linker by using a regex.",Changes applied,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,545,2021-04-20T14:51:35Z,2021-06-16T11:34:31Z,2021-06-16T11:34:31Z,MERGED,True,108,6,4,https://github.com/P-Sc,Extract native libraries on android,2,[],https://github.com/frida/frida-gum/pull/545,https://github.com/P-Sc,1,https://github.com/frida/frida-gum/pull/545,"Since Android Gradle plugin 3.6.0 android:extractNativeLibs is by default set to false which causes bundled native libraries (shared objects) to not be extracted to an extra file. Instead, Android extracts and loads them to memory at runtime.
As a consequence, frida cannot find these libraries under the given path and needs to extract them from the APK. Here is an example for such a path:
/data/app/com.example.hellojni-G-r4G8zOhKSiGhnnvK7F0g==/base.apk!/lib/x86_64/libhello-jni.so
Notice the apk path before the delimiting exclamation mark and the library path inside the zip after it.
This is related to

frida/frida#955
frida/frida#1471 (though this needs fixing in Vala code)
and possibly frida/frida#978","Since Android Gradle plugin 3.6.0 android:extractNativeLibs is by default set to false which causes bundled native libraries (shared objects) to not be extracted to an extra file. Instead, Android extracts and loads them to memory at runtime.
As a consequence, frida cannot find these libraries under the given path and needs to extract them from the APK. Here is an example for such a path:
/data/app/com.example.hellojni-G-r4G8zOhKSiGhnnvK7F0g==/base.apk!/lib/x86_64/libhello-jni.so
Notice the apk path before the delimiting exclamation mark and the library path inside the zip after it.
This is related to

frida/frida#955
frida/frida#1471 (though this needs fixing in Vala code)
and possibly frida/frida#978",True,"{'HOORAY': ['https://github.com/quangIO', 'https://github.com/oleavr']}"
frida/frida-gum,https://github.com/frida/frida-gum,545,2021-04-20T14:51:35Z,2021-06-16T11:34:31Z,2021-06-16T11:34:31Z,MERGED,True,108,6,4,https://github.com/P-Sc,Extract native libraries on android,2,[],https://github.com/frida/frida-gum/pull/545,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/545#issuecomment-825209301,"Since Android Gradle plugin 3.6.0 android:extractNativeLibs is by default set to false which causes bundled native libraries (shared objects) to not be extracted to an extra file. Instead, Android extracts and loads them to memory at runtime.
As a consequence, frida cannot find these libraries under the given path and needs to extract them from the APK. Here is an example for such a path:
/data/app/com.example.hellojni-G-r4G8zOhKSiGhnnvK7F0g==/base.apk!/lib/x86_64/libhello-jni.so
Notice the apk path before the delimiting exclamation mark and the library path inside the zip after it.
This is related to

frida/frida#955
frida/frida#1471 (though this needs fixing in Vala code)
and possibly frida/frida#978","Thanks a lot, this is awesome! üí•
It looks like the coding style needs some tweaks to follow the surrounding style, but other than that this looks great to me. (I can help out with the style tweaks once I've managed to escape the rabbithole that I'm in ‚Äì just leaving this note here in case you get a chance to tweak it in the meantime.)
Cheers!",True,{'EYES': ['https://github.com/quangIO']}
frida/frida-gum,https://github.com/frida/frida-gum,545,2021-04-20T14:51:35Z,2021-06-16T11:34:31Z,2021-06-16T11:34:31Z,MERGED,True,108,6,4,https://github.com/P-Sc,Extract native libraries on android,2,[],https://github.com/frida/frida-gum/pull/545,https://github.com/P-Sc,3,https://github.com/frida/frida-gum/pull/545#issuecomment-826440743,"Since Android Gradle plugin 3.6.0 android:extractNativeLibs is by default set to false which causes bundled native libraries (shared objects) to not be extracted to an extra file. Instead, Android extracts and loads them to memory at runtime.
As a consequence, frida cannot find these libraries under the given path and needs to extract them from the APK. Here is an example for such a path:
/data/app/com.example.hellojni-G-r4G8zOhKSiGhnnvK7F0g==/base.apk!/lib/x86_64/libhello-jni.so
Notice the apk path before the delimiting exclamation mark and the library path inside the zip after it.
This is related to

frida/frida#955
frida/frida#1471 (though this needs fixing in Vala code)
and possibly frida/frida#978","Sorry, didn't see the style guide.
I fixed it accordingly.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,545,2021-04-20T14:51:35Z,2021-06-16T11:34:31Z,2021-06-16T11:34:31Z,MERGED,True,108,6,4,https://github.com/P-Sc,Extract native libraries on android,2,[],https://github.com/frida/frida-gum/pull/545,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/545#issuecomment-862267223,"Since Android Gradle plugin 3.6.0 android:extractNativeLibs is by default set to false which causes bundled native libraries (shared objects) to not be extracted to an extra file. Instead, Android extracts and loads them to memory at runtime.
As a consequence, frida cannot find these libraries under the given path and needs to extract them from the APK. Here is an example for such a path:
/data/app/com.example.hellojni-G-r4G8zOhKSiGhnnvK7F0g==/base.apk!/lib/x86_64/libhello-jni.so
Notice the apk path before the delimiting exclamation mark and the library path inside the zip after it.
This is related to

frida/frida#955
frida/frida#1471 (though this needs fixing in Vala code)
and possibly frida/frida#978","@P-Sc Sorry for the delay here, got stuck in a rabbit-hole for months. Just rebased and made some tweaks. Going to take a stab at testing this next. Please let me know if you see any obvious mistakes in case you get a chance to look at this in the meantime üòä",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,545,2021-04-20T14:51:35Z,2021-06-16T11:34:31Z,2021-06-16T11:34:31Z,MERGED,True,108,6,4,https://github.com/P-Sc,Extract native libraries on android,2,[],https://github.com/frida/frida-gum/pull/545,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/545#issuecomment-862300662,"Since Android Gradle plugin 3.6.0 android:extractNativeLibs is by default set to false which causes bundled native libraries (shared objects) to not be extracted to an extra file. Instead, Android extracts and loads them to memory at runtime.
As a consequence, frida cannot find these libraries under the given path and needs to extract them from the APK. Here is an example for such a path:
/data/app/com.example.hellojni-G-r4G8zOhKSiGhnnvK7F0g==/base.apk!/lib/x86_64/libhello-jni.so
Notice the apk path before the delimiting exclamation mark and the library path inside the zip after it.
This is related to

frida/frida#955
frida/frida#1471 (though this needs fixing in Vala code)
and possibly frida/frida#978",Works great! Let's go ahead and land this. Cheers! üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,546,2021-04-21T17:30:45Z,2021-04-26T19:01:56Z,2021-04-27T13:02:56Z,MERGED,True,362,2,4,https://github.com/mrmacete,Enumerate darwin imports from chained fixups,2,[],https://github.com/frida/frida-gum/pull/546,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/546,"In latest arm64e executables there are no binding opcodes, while usually the same information can be reconstructed by walking the metadata indexed by the LC_DYLD_CHAINED_FIXUPS command and stored in linkedit.
The problem in doing so on images which have already been loaded in memory by dyld is that the actual chains are lost because the bitfields in the slots have already been replaced by the actual pointers.
This change reconstructs the correct slots by scanning the pages of the segments which are pointed to by the fixups metadata and looking for pointers to resolved imports.","In latest arm64e executables there are no binding opcodes, while usually the same information can be reconstructed by walking the metadata indexed by the LC_DYLD_CHAINED_FIXUPS command and stored in linkedit.
The problem in doing so on images which have already been loaded in memory by dyld is that the actual chains are lost because the bitfields in the slots have already been replaced by the actual pointers.
This change reconstructs the correct slots by scanning the pages of the segments which are pointed to by the fixups metadata and looking for pointers to resolved imports.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,547,2021-04-26T20:23:08Z,2021-04-27T19:22:22Z,2021-04-27T19:22:22Z,MERGED,True,4,4,1,https://github.com/suy,Fix enumerating modules with spaces on path,1,[],https://github.com/frida/frida-gum/pull/547,https://github.com/suy,1,https://github.com/frida/frida-gum/pull/547,Closes frida/frida#1710,Closes frida/frida#1710,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,547,2021-04-26T20:23:08Z,2021-04-27T19:22:22Z,2021-04-27T19:22:22Z,MERGED,True,4,4,1,https://github.com/suy,Fix enumerating modules with spaces on path,1,[],https://github.com/frida/frida-gum/pull/547,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/547#issuecomment-827855659,Closes frida/frida#1710,"Thanks, great catch! üí•  We also have the same issue in the Linux injector in frida-core in case you're interested in taking a quick stab at that too! ü§©",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,549,2021-04-29T16:08:02Z,2021-05-07T23:10:37Z,2021-05-08T08:20:24Z,MERGED,True,9,0,1,https://github.com/WorksButNotTested,#548 Fix handling of direct branch addresses on x64,2,[],https://github.com/frida/frida-gum/pull/549,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/549,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,549,2021-04-29T16:08:02Z,2021-05-07T23:10:37Z,2021-05-08T08:20:24Z,MERGED,True,9,0,1,https://github.com/WorksButNotTested,#548 Fix handling of direct branch addresses on x64,2,[],https://github.com/frida/frida-gum/pull/549,https://github.com/vanhauser-thc,2,https://github.com/frida/frida-gum/pull/549#issuecomment-835202946,,"@oleavr thank you!
When will a new release be made?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,550,2021-05-20T12:01:37Z,2021-06-16T00:04:04Z,2021-06-16T17:00:44Z,MERGED,True,436,20,12,https://github.com/hot3eed,Objective-C selectors fallback in DebugSymbol.fromAddress,10,[],https://github.com/frida/frida-gum/pull/550,https://github.com/hot3eed,1,https://github.com/frida/frida-gum/pull/550,"This adds ObjC method name resolution as a fallback to the DebugSymbol.fromAddress API in the case of a stripped binary, thanks to ObjC metadata functions and LC_FUNCTION_STARTS. (thanks for the tip, @mrmacete!)
Two points for discussion:

Do we need to use a lazily initialized GumObjCApiResolver instance in GumDarwinSymbolicator for caching and performance purposes?
I had to remove the self->name == NULL check in gum/gumdarwinmodule.c because I needed access to the image data in gum_darwin_symbolicator_objc_details_from_address (). Is this bad?


 Get last function's size
 Lazily initialize  GumObjcApiResolver and cache it in GumDarwinSymbolicator 
 Address the self->name == NULL check
 Handle ObjC resolver unavailability edge case (see below)","This adds ObjC method name resolution as a fallback to the DebugSymbol.fromAddress API in the case of a stripped binary, thanks to ObjC metadata functions and LC_FUNCTION_STARTS. (thanks for the tip, @mrmacete!)
Two points for discussion:

Do we need to use a lazily initialized GumObjCApiResolver instance in GumDarwinSymbolicator for caching and performance purposes?
I had to remove the self->name == NULL check in gum/gumdarwinmodule.c because I needed access to the image data in gum_darwin_symbolicator_objc_details_from_address (). Is this bad?


 Get last function's size
 Lazily initialize  GumObjcApiResolver and cache it in GumDarwinSymbolicator 
 Address the self->name == NULL check
 Handle ObjC resolver unavailability edge case (see below)",True,"{'HOORAY': ['https://github.com/hexploitable', 'https://github.com/mrmacete', 'https://github.com/oleavr', 'https://github.com/Ronophobia']}"
frida/frida-gum,https://github.com/frida/frida-gum,550,2021-05-20T12:01:37Z,2021-06-16T00:04:04Z,2021-06-16T17:00:44Z,MERGED,True,436,20,12,https://github.com/hot3eed,Objective-C selectors fallback in DebugSymbol.fromAddress,10,[],https://github.com/frida/frida-gum/pull/550,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/550#issuecomment-861909230,"This adds ObjC method name resolution as a fallback to the DebugSymbol.fromAddress API in the case of a stripped binary, thanks to ObjC metadata functions and LC_FUNCTION_STARTS. (thanks for the tip, @mrmacete!)
Two points for discussion:

Do we need to use a lazily initialized GumObjCApiResolver instance in GumDarwinSymbolicator for caching and performance purposes?
I had to remove the self->name == NULL check in gum/gumdarwinmodule.c because I needed access to the image data in gum_darwin_symbolicator_objc_details_from_address (). Is this bad?


 Get last function's size
 Lazily initialize  GumObjcApiResolver and cache it in GumDarwinSymbolicator 
 Address the self->name == NULL check
 Handle ObjC resolver unavailability edge case (see below)","Wow, nicely done! ü§ò Sorry it took me so long to get to this. Since it's been so long I figured I'd go ahead and make the final tweaks. With those out of the way, let's get this landed! üôå",True,"{'HOORAY': ['https://github.com/hot3eed', 'https://github.com/mrmacete']}"
frida/frida-gum,https://github.com/frida/frida-gum,550,2021-05-20T12:01:37Z,2021-06-16T00:04:04Z,2021-06-16T17:00:44Z,MERGED,True,436,20,12,https://github.com/hot3eed,Objective-C selectors fallback in DebugSymbol.fromAddress,10,[],https://github.com/frida/frida-gum/pull/550,https://github.com/hot3eed,3,https://github.com/frida/frida-gum/pull/550#issuecomment-862166114,"This adds ObjC method name resolution as a fallback to the DebugSymbol.fromAddress API in the case of a stripped binary, thanks to ObjC metadata functions and LC_FUNCTION_STARTS. (thanks for the tip, @mrmacete!)
Two points for discussion:

Do we need to use a lazily initialized GumObjCApiResolver instance in GumDarwinSymbolicator for caching and performance purposes?
I had to remove the self->name == NULL check in gum/gumdarwinmodule.c because I needed access to the image data in gum_darwin_symbolicator_objc_details_from_address (). Is this bad?


 Get last function's size
 Lazily initialize  GumObjcApiResolver and cache it in GumDarwinSymbolicator 
 Address the self->name == NULL check
 Handle ObjC resolver unavailability edge case (see below)",@oleavr No worries! Thank you for the review üôå,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,551,2021-05-20T16:51:53Z,2021-06-11T00:29:22Z,2021-08-20T16:15:01Z,MERGED,True,41,0,1,https://github.com/WorksButNotTested,Fix Stalker handling of SYSCALL instructions on x86,6,[],https://github.com/frida/frida-gum/pull/551,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/551,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,551,2021-05-20T16:51:53Z,2021-06-11T00:29:22Z,2021-08-20T16:15:01Z,MERGED,True,41,0,1,https://github.com/WorksButNotTested,Fix Stalker handling of SYSCALL instructions on x86,6,[],https://github.com/frida/frida-gum/pull/551,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/551#issuecomment-859174836,,"Thanks a lot, this is awesome! üí•",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,553,2021-05-27T16:52:36Z,2021-07-03T18:59:55Z,2021-08-20T16:15:10Z,CLOSED,False,102,7,6,https://github.com/WorksButNotTested,Provide access to the underlying JavaScript Engine to users of the fr‚Ä¶,1,[],https://github.com/frida/frida-gum/pull/553,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/553,"‚Ä¶ida-gumjs DevKit
The frida-gumjs allows the user to embed the JavaScript engine with its supported FRIDA APIs into their application. However, it doesn't allow sufficient access for the user to add their own functionality to the runtime. There are two major issues:

There is no access to the Quick JSContext / v8 Isolate which is required to add items to the global namespace
The type information for FRIDAs JavaScript types is not exposed. Therefore access to the argument parsing API has also been added so that the user can provide a method which takes a NativePointer for example. In to add an API which can interoperate with that of FRIDA, it must be able to interpret FRIDA's types.","‚Ä¶ida-gumjs DevKit
The frida-gumjs allows the user to embed the JavaScript engine with its supported FRIDA APIs into their application. However, it doesn't allow sufficient access for the user to add their own functionality to the runtime. There are two major issues:

There is no access to the Quick JSContext / v8 Isolate which is required to add items to the global namespace
The type information for FRIDAs JavaScript types is not exposed. Therefore access to the argument parsing API has also been added so that the user can provide a method which takes a NativePointer for example. In to add an API which can interoperate with that of FRIDA, it must be able to interpret FRIDA's types.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,553,2021-05-27T16:52:36Z,2021-07-03T18:59:55Z,2021-08-20T16:15:10Z,CLOSED,False,102,7,6,https://github.com/WorksButNotTested,Provide access to the underlying JavaScript Engine to users of the fr‚Ä¶,1,[],https://github.com/frida/frida-gum/pull/553,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/553#issuecomment-873454789,"‚Ä¶ida-gumjs DevKit
The frida-gumjs allows the user to embed the JavaScript engine with its supported FRIDA APIs into their application. However, it doesn't allow sufficient access for the user to add their own functionality to the runtime. There are two major issues:

There is no access to the Quick JSContext / v8 Isolate which is required to add items to the global namespace
The type information for FRIDAs JavaScript types is not exposed. Therefore access to the argument parsing API has also been added so that the user can provide a method which takes a NativePointer for example. In to add an API which can interoperate with that of FRIDA, it must be able to interpret FRIDA's types.",This can be achieved by adding to the global object in JavaScript. This change is therefore withdrawn.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,555,2021-06-08T17:32:57Z,2021-08-12T10:23:12Z,2021-08-12T10:23:13Z,CLOSED,False,540,20,7,https://github.com/WorksButNotTested,Backpatch prefetching support,1,[],https://github.com/frida/frida-gum/pull/555,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/555,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,559,2021-06-16T18:14:37Z,,2022-05-02T17:20:36Z,OPEN,False,1723,16,23,https://github.com/WorksButNotTested,Features/run on thread,1,[],https://github.com/frida/frida-gum/pull/559,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/559,,,True,"{'THUMBS_UP': ['https://github.com/bburky', 'https://github.com/jevinskie']}"
frida/frida-gum,https://github.com/frida/frida-gum,559,2021-06-16T18:14:37Z,,2022-05-02T17:20:36Z,OPEN,False,1723,16,23,https://github.com/WorksButNotTested,Features/run on thread,1,[],https://github.com/frida/frida-gum/pull/559,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/559#issuecomment-862602780,,Rebased version of the missing #537,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,561,2021-06-24T15:04:27Z,2021-07-04T20:13:05Z,2021-07-05T09:33:02Z,MERGED,True,777,61,20,https://github.com/mrmacete,Add minimal context to NativeCallback,18,[],https://github.com/frida/frida-gum/pull/561,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/561,"With this change, the NativeCallback js function is passed an instance of CallbackContext as the this argument.
This is an object with the context and returnAddress properties which, similarly to their counterparts found in InvocationContext for the Interceptor case, provide respectively a (minimal) CPU context and the address of the caller code.
The CPU context is minimal, in that it contains only what's needed to generate accurate backtraces, and it's read-only.
The primary use case for this addition is to provide a means for generating accurate meaningful backtraces from the context of swizzled ObjC methods (by using the ObjC.implement() api).
For this reason, this change also extends the Darwin (and Windows) accurate backtracer to take this case into account and properly skip the libffi stack frames. Tests are added to make sure backtraces produced this way are exaclty the same as those produced when using the Interceptor.
Since CallbackContext is using the backtrace to derive the returnAddress value, the backtracer interface has also been extended to allow for an extra limit parameter which can be used to shorten the depth of the backtrace below the maximum allowed in cases like this when not all the result is needed.
This is exposed through a new gum_backtracer_generate_with_limit () api, while the existing gum_backtracer_generate () still works as before, by implicitly using GUM_MAX_BACKTRACE_DEPTH as the value for limit under the hood.","With this change, the NativeCallback js function is passed an instance of CallbackContext as the this argument.
This is an object with the context and returnAddress properties which, similarly to their counterparts found in InvocationContext for the Interceptor case, provide respectively a (minimal) CPU context and the address of the caller code.
The CPU context is minimal, in that it contains only what's needed to generate accurate backtraces, and it's read-only.
The primary use case for this addition is to provide a means for generating accurate meaningful backtraces from the context of swizzled ObjC methods (by using the ObjC.implement() api).
For this reason, this change also extends the Darwin (and Windows) accurate backtracer to take this case into account and properly skip the libffi stack frames. Tests are added to make sure backtraces produced this way are exaclty the same as those produced when using the Interceptor.
Since CallbackContext is using the backtrace to derive the returnAddress value, the backtracer interface has also been extended to allow for an extra limit parameter which can be used to shorten the depth of the backtrace below the maximum allowed in cases like this when not all the result is needed.
This is exposed through a new gum_backtracer_generate_with_limit () api, while the existing gum_backtracer_generate () still works as before, by implicitly using GUM_MAX_BACKTRACE_DEPTH as the value for limit under the hood.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,561,2021-06-24T15:04:27Z,2021-07-04T20:13:05Z,2021-07-05T09:33:02Z,MERGED,True,777,61,20,https://github.com/mrmacete,Add minimal context to NativeCallback,18,[],https://github.com/frida/frida-gum/pull/561,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/561#issuecomment-873657914,"With this change, the NativeCallback js function is passed an instance of CallbackContext as the this argument.
This is an object with the context and returnAddress properties which, similarly to their counterparts found in InvocationContext for the Interceptor case, provide respectively a (minimal) CPU context and the address of the caller code.
The CPU context is minimal, in that it contains only what's needed to generate accurate backtraces, and it's read-only.
The primary use case for this addition is to provide a means for generating accurate meaningful backtraces from the context of swizzled ObjC methods (by using the ObjC.implement() api).
For this reason, this change also extends the Darwin (and Windows) accurate backtracer to take this case into account and properly skip the libffi stack frames. Tests are added to make sure backtraces produced this way are exaclty the same as those produced when using the Interceptor.
Since CallbackContext is using the backtrace to derive the returnAddress value, the backtracer interface has also been extended to allow for an extra limit parameter which can be used to shorten the depth of the backtrace below the maximum allowed in cases like this when not all the result is needed.
This is exposed through a new gum_backtracer_generate_with_limit () api, while the existing gum_backtracer_generate () still works as before, by implicitly using GUM_MAX_BACKTRACE_DEPTH as the value for limit under the hood.","Thanks! üí• Landed with some minor tweaks:

Ordering of architectures should be x86/x86_64/arm/arm64(/mips) for consistency.
Use g_clear_object() instead of g_clear_pointer() where applicable.
#elif defined(x) should be #elif defined (x)
Plug two V8 runtime leaks (two persistent handles were newed but not deleted).
Move the arm64 return address masking behind #ifdef HAVE_DARWIN as I don't know if we can assume that the Linux kernel sets up virtual memory the same way.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,561,2021-06-24T15:04:27Z,2021-07-04T20:13:05Z,2021-07-05T09:33:02Z,MERGED,True,777,61,20,https://github.com/mrmacete,Add minimal context to NativeCallback,18,[],https://github.com/frida/frida-gum/pull/561,https://github.com/mrmacete,3,https://github.com/frida/frida-gum/pull/561#issuecomment-873963034,"With this change, the NativeCallback js function is passed an instance of CallbackContext as the this argument.
This is an object with the context and returnAddress properties which, similarly to their counterparts found in InvocationContext for the Interceptor case, provide respectively a (minimal) CPU context and the address of the caller code.
The CPU context is minimal, in that it contains only what's needed to generate accurate backtraces, and it's read-only.
The primary use case for this addition is to provide a means for generating accurate meaningful backtraces from the context of swizzled ObjC methods (by using the ObjC.implement() api).
For this reason, this change also extends the Darwin (and Windows) accurate backtracer to take this case into account and properly skip the libffi stack frames. Tests are added to make sure backtraces produced this way are exaclty the same as those produced when using the Interceptor.
Since CallbackContext is using the backtrace to derive the returnAddress value, the backtracer interface has also been extended to allow for an extra limit parameter which can be used to shorten the depth of the backtrace below the maximum allowed in cases like this when not all the result is needed.
This is exposed through a new gum_backtracer_generate_with_limit () api, while the existing gum_backtracer_generate () still works as before, by implicitly using GUM_MAX_BACKTRACE_DEPTH as the value for limit under the hood.",thanks for the tweaks! ‚ù§Ô∏è,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,564,2021-07-07T13:10:39Z,2021-07-07T19:57:59Z,2021-07-07T19:57:59Z,MERGED,True,9,1,1,https://github.com/mrmacete,Ensure merging binds doesn't make gaps in __LINKEDIT,1,[],https://github.com/frida/frida-gum/pull/564,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/564,Not doing so triggers a bug in codesign for which the resulting signed binary turns out corrupted,Not doing so triggers a bug in codesign for which the resulting signed binary turns out corrupted,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,566,2021-07-09T18:13:43Z,2021-08-12T10:23:26Z,2021-08-12T10:23:26Z,CLOSED,False,366,0,8,https://github.com/WorksButNotTested,Added callbacks for stats information,1,[],https://github.com/frida/frida-gum/pull/566,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/566,"When fuzzing the stats information is lost each time a new child is forked. Since the parent doesn't run the target code (only prefetches it) it will not generate any transitions for the code under test.
This patch simply adds a handful of weak methods which are called each time stalker handles a transition.","When fuzzing the stats information is lost each time a new child is forked. Since the parent doesn't run the target code (only prefetches it) it will not generate any transitions for the code under test.
This patch simply adds a handful of weak methods which are called each time stalker handles a transition.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,566,2021-07-09T18:13:43Z,2021-08-12T10:23:26Z,2021-08-12T10:23:26Z,CLOSED,False,366,0,8,https://github.com/WorksButNotTested,Added callbacks for stats information,1,[],https://github.com/frida/frida-gum/pull/566,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/566#issuecomment-880987700,"When fuzzing the stats information is lost each time a new child is forked. Since the parent doesn't run the target code (only prefetches it) it will not generate any transitions for the code under test.
This patch simply adds a handful of weak methods which are called each time stalker handles a transition.",This has now been converted to a proper glib interface.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,567,2021-07-09T18:16:05Z,2021-08-12T10:22:27Z,2021-08-12T10:22:27Z,CLOSED,False,174,62,1,https://github.com/WorksButNotTested,Changes to make the number of ic entries configurable by #define.,1,[],https://github.com/frida/frida-gum/pull/567,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/567,Logging of stats information showed that even when prefetching of backpatches was enabled the target application was still making a large number of call back into the engine. Further examination showed that switch statements in particular can quickly saturate the cache of ic_entries. This patch changes the number of IC entries to be configurable by a #define and increases the number of entries to 16.,Logging of stats information showed that even when prefetching of backpatches was enabled the target application was still making a large number of call back into the engine. Further examination showed that switch statements in particular can quickly saturate the cache of ic_entries. This patch changes the number of IC entries to be configurable by a #define and increases the number of entries to 16.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,568,2021-07-13T12:20:34Z,2021-07-13T14:27:06Z,2021-07-13T14:27:06Z,MERGED,True,102,22,1,https://github.com/mrmacete,Improve lazy binds merge logic,2,[],https://github.com/frida/frida-gum/pull/568,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/568,"make sure the contents of __LINKEDIT are contiguous (as per codesign requirement)
make sure the code signature, if present, is left in a ""good"" position which is at the end of __LINKEDIT and starts aligned at 16 bytes
when merging binds together, prevent the ""addend"" piece of state from bleeding into the merged lazy binds
when lazy binds do not strictly follow binds, insert them just after the existing binds instead of putting them at the end of the file, to satisfy the code signature position constraints","make sure the contents of __LINKEDIT are contiguous (as per codesign requirement)
make sure the code signature, if present, is left in a ""good"" position which is at the end of __LINKEDIT and starts aligned at 16 bytes
when merging binds together, prevent the ""addend"" piece of state from bleeding into the merged lazy binds
when lazy binds do not strictly follow binds, insert them just after the existing binds instead of putting them at the end of the file, to satisfy the code signature position constraints",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,569,2021-07-16T12:39:28Z,2021-07-16T15:10:35Z,2021-07-16T15:10:50Z,MERGED,True,4,2,1,https://github.com/mrmacete,Fix DarwinGrafter alignment issue,1,[],https://github.com/frida/frida-gum/pull/569,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/569,Align to 16 bytes also when lazy binds follow regular binds,Align to 16 bytes also when lazy binds follow regular binds,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,569,2021-07-16T12:39:28Z,2021-07-16T15:10:35Z,2021-07-16T15:10:50Z,MERGED,True,4,2,1,https://github.com/mrmacete,Fix DarwinGrafter alignment issue,1,[],https://github.com/frida/frida-gum/pull/569,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/569#issuecomment-881520764,Align to 16 bytes also when lazy binds follow regular binds,Thanks! ü§ò,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,571,2021-08-16T17:03:37Z,2021-08-19T18:16:49Z,2021-08-20T16:13:28Z,CLOSED,False,1049,343,8,https://github.com/WorksButNotTested,Various Stalker Features,6,[],https://github.com/frida/frida-gum/pull/571,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/571,Just noticed all my PR's got fragged when I deleted the branches. This one has everything in that should be needed.,Just noticed all my PR's got fragged when I deleted the branches. This one has everything in that should be needed.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,571,2021-08-16T17:03:37Z,2021-08-19T18:16:49Z,2021-08-20T16:13:28Z,CLOSED,False,1049,343,8,https://github.com/WorksButNotTested,Various Stalker Features,6,[],https://github.com/frida/frida-gum/pull/571,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/571#issuecomment-902136332,Just noticed all my PR's got fragged when I deleted the branches. This one has everything in that should be needed.,Just finished cherry-picking this into master with minor tweaks. Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,573,2021-08-20T16:15:29Z,2021-08-20T16:35:27Z,2021-11-09T09:57:00Z,MERGED,True,4,4,1,https://github.com/WorksButNotTested,Fix stalker prefetch backpatch args for x86,1,[],https://github.com/frida/frida-gum/pull/573,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/573,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,574,2021-09-02T19:01:17Z,2021-09-02T21:32:04Z,2021-09-02T21:32:07Z,MERGED,True,93,14,11,https://github.com/oleavr,Bundle frida-swift-bridge üéâ,1,[],https://github.com/frida/frida-gum/pull/574,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/574,Globally visible as ‚ÄúSwift‚Äù.,Globally visible as ‚ÄúSwift‚Äù.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,575,2021-09-16T23:41:28Z,2021-09-22T21:32:56Z,2021-09-22T21:45:36Z,MERGED,True,989,260,11,https://github.com/oleavr,gumjs: Add ESM support,1,[],https://github.com/frida/frida-gum/pull/575,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/575,"Using a human-readable bundle format that looks like this:
üì¶
59 /agent/index.js
71 /agent/lib/logger.js
‚úÑ
import { log } from './lib/logger.js';
log('Hello World!');
‚úÑ
export function log(...message) {
  console.log('[LOG]', ...message);
}

The header specifies the assets that will be following, and the size of
each, in bytes. We include a ‚Äúscissors‚Äù character with a newline before
and after each, but this is only used to improve readability, it does
not influence asset boundaries in any way.
The first entry with a .js extension is used as the entrypoint. However,
to make life easier for e.g. our REPL and its ‚Äú--load‚Äù functionality, we
do allow multiple entrypoints. This is achieved by tacking on ‚Äú\n‚úÑ\n‚Äù
followed by the next list of assets and their contents. In this way one
can add code to be run before and/or after by prepending/appending
additional modules, but without requiring tools to include complex
parsing and reassembly logic. (Which gets quite difficult when source
maps are involved.)
Module resolution follows the same rules as Node.js, which is why the
file extension is included in imports. A given module can have an alias,
so that given:
import styles from 'ansi-styles';

An alias can be encoded like this:
5010 /node_modules/ansi-styles/index.js
‚Üª ansi-styles

We also support source maps, where e.g. ‚Äú/example.js‚Äù may be accompanied
by ‚Äú/example.map‚Äù. Inline source maps are ignored.","Using a human-readable bundle format that looks like this:
üì¶
59 /agent/index.js
71 /agent/lib/logger.js
‚úÑ
import { log } from './lib/logger.js';
log('Hello World!');
‚úÑ
export function log(...message) {
  console.log('[LOG]', ...message);
}

The header specifies the assets that will be following, and the size of
each, in bytes. We include a ‚Äúscissors‚Äù character with a newline before
and after each, but this is only used to improve readability, it does
not influence asset boundaries in any way.
The first entry with a .js extension is used as the entrypoint. However,
to make life easier for e.g. our REPL and its ‚Äú--load‚Äù functionality, we
do allow multiple entrypoints. This is achieved by tacking on ‚Äú\n‚úÑ\n‚Äù
followed by the next list of assets and their contents. In this way one
can add code to be run before and/or after by prepending/appending
additional modules, but without requiring tools to include complex
parsing and reassembly logic. (Which gets quite difficult when source
maps are involved.)
Module resolution follows the same rules as Node.js, which is why the
file extension is included in imports. A given module can have an alias,
so that given:
import styles from 'ansi-styles';

An alias can be encoded like this:
5010 /node_modules/ansi-styles/index.js
‚Üª ansi-styles

We also support source maps, where e.g. ‚Äú/example.js‚Äù may be accompanied
by ‚Äú/example.map‚Äù. Inline source maps are ignored.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,576,2021-09-22T17:42:35Z,2021-09-22T19:16:04Z,2021-11-09T09:56:58Z,MERGED,True,13,0,1,https://github.com/WorksButNotTested,Fix x86 relocator to just patch offset for RIP relative instructions ‚Ä¶,2,[],https://github.com/frida/frida-gum/pull/576,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/576,‚Ä¶where possible,‚Ä¶where possible,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,576,2021-09-22T17:42:35Z,2021-09-22T19:16:04Z,2021-11-09T09:56:58Z,MERGED,True,13,0,1,https://github.com/WorksButNotTested,Fix x86 relocator to just patch offset for RIP relative instructions ‚Ä¶,2,[],https://github.com/frida/frida-gum/pull/576,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/576#issuecomment-925315713,‚Ä¶where possible,Awesome thanks for the merge.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,577,2021-09-23T16:58:22Z,2021-09-23T20:31:51Z,2021-11-09T09:56:57Z,MERGED,True,93,8,1,https://github.com/WorksButNotTested,Fixed tests for x86 relocator,9,[],https://github.com/frida/frida-gum/pull/577,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/577,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,578,2021-09-30T21:29:41Z,2021-10-06T16:24:17Z,2021-10-06T16:24:28Z,MERGED,True,98,39,7,https://github.com/mrmacete,gumjs: ignore Interceptor context in unrelated NativeCallback invokes,6,[],https://github.com/frida/frida-gum/pull/578,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/578,"In this way invalid Interceptor contexts from higher up the call stack will be safely ignored in favor of the minimal but correct callback context.
NativeCallback instances invoked as part of Interceptor.replace() will continue to behave as usual and get the full context from the Interceptor's thread storage.
The new caveat is that when using the same NativeCallback instance both for Interceptor.replace() and an Interceptor-unrelated scenario (for example ObjC.implement()), AND both scenarios are invoked as part of the same call stack so that the Interceptor case happens earlier, the Interceptor context will ""win"" in the second invocation too and there will contain possibly invalid values. To overcome this issue, it is now possible to just use two different NativeCallback instances (which can share the same javascript function body, if needed).","In this way invalid Interceptor contexts from higher up the call stack will be safely ignored in favor of the minimal but correct callback context.
NativeCallback instances invoked as part of Interceptor.replace() will continue to behave as usual and get the full context from the Interceptor's thread storage.
The new caveat is that when using the same NativeCallback instance both for Interceptor.replace() and an Interceptor-unrelated scenario (for example ObjC.implement()), AND both scenarios are invoked as part of the same call stack so that the Interceptor case happens earlier, the Interceptor context will ""win"" in the second invocation too and there will contain possibly invalid values. To overcome this issue, it is now possible to just use two different NativeCallback instances (which can share the same javascript function body, if needed).",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,578,2021-09-30T21:29:41Z,2021-10-06T16:24:17Z,2021-10-06T16:24:28Z,MERGED,True,98,39,7,https://github.com/mrmacete,gumjs: ignore Interceptor context in unrelated NativeCallback invokes,6,[],https://github.com/frida/frida-gum/pull/578,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/578#issuecomment-936609230,"In this way invalid Interceptor contexts from higher up the call stack will be safely ignored in favor of the minimal but correct callback context.
NativeCallback instances invoked as part of Interceptor.replace() will continue to behave as usual and get the full context from the Interceptor's thread storage.
The new caveat is that when using the same NativeCallback instance both for Interceptor.replace() and an Interceptor-unrelated scenario (for example ObjC.implement()), AND both scenarios are invoked as part of the same call stack so that the Interceptor case happens earlier, the Interceptor context will ""win"" in the second invocation too and there will contain possibly invalid values. To overcome this issue, it is now possible to just use two different NativeCallback instances (which can share the same javascript function body, if needed).",Thanks! üôå,True,{'HEART': ['https://github.com/mrmacete']}
frida/frida-gum,https://github.com/frida/frida-gum,579,2021-10-06T17:58:01Z,2021-10-06T20:02:00Z,2021-10-06T20:02:03Z,MERGED,True,98,1,3,https://github.com/oleavr,"gumjs: Add Process getters for cwd, home, and tmp dirs",1,[],https://github.com/frida/frida-gum/pull/579,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/579,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,580,2021-10-09T14:41:14Z,2021-12-22T18:39:54Z,2021-12-22T18:39:54Z,CLOSED,False,34,1,4,https://github.com/vfsfitvnm,"Map ""bool"" to JS boolean instead of number",1,[],https://github.com/frida/frida-gum/pull/580,https://github.com/vfsfitvnm,1,https://github.com/frida/frida-gum/pull/580,"The title says it all; ""bool"" will now require a boolean value instead of a number. I hope I didn't miss something!
(Update to frida-gum typings is also needed)","The title says it all; ""bool"" will now require a boolean value instead of a number. I hope I didn't miss something!
(Update to frida-gum typings is also needed)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,580,2021-10-09T14:41:14Z,2021-12-22T18:39:54Z,2021-12-22T18:39:54Z,CLOSED,False,34,1,4,https://github.com/vfsfitvnm,"Map ""bool"" to JS boolean instead of number",1,[],https://github.com/frida/frida-gum/pull/580,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/580#issuecomment-942440224,"The title says it all; ""bool"" will now require a boolean value instead of a number. I hope I didn't miss something!
(Update to frida-gum typings is also needed)","Thanks! üôå This seems like a breaking change, so it will have to wait for Frida 16 before it can be merged. It will also need test coverage. Otherwise this looks great!",True,{'HOORAY': ['https://github.com/vfsfitvnm']}
frida/frida-gum,https://github.com/frida/frida-gum,581,2021-10-13T08:06:44Z,2021-10-13T16:05:20Z,2021-10-13T16:05:20Z,MERGED,True,1,1,1,https://github.com/hot3eed,gumjs: Bump Frida Swift bridge version,2,[],https://github.com/frida/frida-gum/pull/581,https://github.com/hot3eed,1,https://github.com/frida/frida-gum/pull/581,New bridge version: https://www.npmjs.com/package/frida-swift-bridge,New bridge version: https://www.npmjs.com/package/frida-swift-bridge,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,582,2021-10-13T13:23:50Z,2021-10-13T15:43:02Z,2021-10-13T15:43:03Z,MERGED,True,52,8,2,https://github.com/mrmacete,gumjs: Defer weak ref callbacks in quickjs too,3,[],https://github.com/frida/frida-gum/pull/582,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/582,In this way we avoid possible scope suspension during garbage collection which could result in double-free issues under certain conditions.,In this way we avoid possible scope suspension during garbage collection which could result in double-free issues under certain conditions.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,583,2021-10-14T16:45:09Z,2021-10-29T15:57:38Z,2021-11-09T09:56:55Z,CLOSED,False,536,376,2,https://github.com/WorksButNotTested,x64 Performance Improvements - *DO NOT MERGE - WIP*,16,[],https://github.com/frida/frida-gum/pull/583,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/583,"DO NOT MERGE - WIP

Splitting hot and cold instrumented code into seperate memory blocks to help improve locality
Changes to change the code to no longer be modified after it is written, instead indirect branches are used to select between code paths. This removes the need to change page permissions on systems with W^X when backpatching.
Unrolling of the loop used to walk the cache array of pairs of real/instrumented addresses when handling indirect branches in the target application.
Work around for issue where FRIDA doesn't exclude paths which are the target of an indirect branch (we apply a fix for excluded calls only during backpatching to call the original rather than instrumented code).
Align all code blocks on 8byte boundary to make it less likely that it will span cache lines
Emit ud2 instruction after each indirect branch instruction to stall the branch predictor and prevent it assuming that such indirect calls typically branch to the immediately following statement.
Move inline cache of array pairs to the data segment to avoid having to modify memory permissions on systems which enforce W^X","DO NOT MERGE - WIP

Splitting hot and cold instrumented code into seperate memory blocks to help improve locality
Changes to change the code to no longer be modified after it is written, instead indirect branches are used to select between code paths. This removes the need to change page permissions on systems with W^X when backpatching.
Unrolling of the loop used to walk the cache array of pairs of real/instrumented addresses when handling indirect branches in the target application.
Work around for issue where FRIDA doesn't exclude paths which are the target of an indirect branch (we apply a fix for excluded calls only during backpatching to call the original rather than instrumented code).
Align all code blocks on 8byte boundary to make it less likely that it will span cache lines
Emit ud2 instruction after each indirect branch instruction to stall the branch predictor and prevent it assuming that such indirect calls typically branch to the immediately following statement.
Move inline cache of array pairs to the data segment to avoid having to modify memory permissions on systems which enforce W^X",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,584,2021-10-15T04:00:12Z,2021-10-19T14:02:55Z,2021-10-19T14:02:55Z,MERGED,True,31,0,1,https://github.com/0xDC00,Expose iconv to CModule,6,[],https://github.com/frida/frida-gum/pull/584,https://github.com/0xDC00,1,https://github.com/frida/frida-gum/pull/584,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,584,2021-10-15T04:00:12Z,2021-10-19T14:02:55Z,2021-10-19T14:02:55Z,MERGED,True,31,0,1,https://github.com/0xDC00,Expose iconv to CModule,6,[],https://github.com/frida/frida-gum/pull/584,https://github.com/0xDC00,2,https://github.com/frida/frida-gum/pull/584#issuecomment-944609374,,Changes applied.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,585,2021-10-16T11:43:08Z,2021-10-19T14:21:14Z,2021-10-19T14:22:30Z,MERGED,True,18,12,1,https://github.com/vfsfitvnm,Print numbers with a three digit exponent,2,[],https://github.com/frida/frida-gum/pull/585,https://github.com/vfsfitvnm,1,https://github.com/frida/frida-gum/pull/585,"This will allow numbers with a three digit exponent to be correctly printed (somewhat based on https://github.com/weiss/c99-snprintf/blob/master/snprintf.c).
It was a QuickJS only issue.","This will allow numbers with a three digit exponent to be correctly printed (somewhat based on https://github.com/weiss/c99-snprintf/blob/master/snprintf.c).
It was a QuickJS only issue.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,585,2021-10-16T11:43:08Z,2021-10-19T14:21:14Z,2021-10-19T14:22:30Z,MERGED,True,18,12,1,https://github.com/vfsfitvnm,Print numbers with a three digit exponent,2,[],https://github.com/frida/frida-gum/pull/585,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/585#issuecomment-946776267,"This will allow numbers with a three digit exponent to be correctly printed (somewhat based on https://github.com/weiss/c99-snprintf/blob/master/snprintf.c).
It was a QuickJS only issue.",Thanks! üéâ,True,{'THUMBS_UP': ['https://github.com/vfsfitvnm']}
frida/frida-gum,https://github.com/frida/frida-gum,586,2021-10-20T12:42:53Z,2021-10-20T16:20:15Z,2021-10-20T16:20:59Z,CLOSED,False,1,1,1,https://github.com/hot3eed,gumjs: Bump frida-swift-bridge,1,[],https://github.com/frida/frida-gum/pull/586,https://github.com/hot3eed,1,https://github.com/frida/frida-gum/pull/586,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,586,2021-10-20T12:42:53Z,2021-10-20T16:20:15Z,2021-10-20T16:20:59Z,CLOSED,False,1,1,1,https://github.com/hot3eed,gumjs: Bump frida-swift-bridge,1,[],https://github.com/frida/frida-gum/pull/586,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/586#issuecomment-947827347,,"Thanks! Unfortunately I totally missed this before making the same change, sorry for the duplication of effort ü§¶",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,586,2021-10-20T12:42:53Z,2021-10-20T16:20:15Z,2021-10-20T16:20:59Z,CLOSED,False,1,1,1,https://github.com/hot3eed,gumjs: Bump frida-swift-bridge,1,[],https://github.com/frida/frida-gum/pull/586,https://github.com/hot3eed,3,https://github.com/frida/frida-gum/pull/586#issuecomment-947827919,,No worries!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,587,2021-10-21T16:55:33Z,2021-10-25T16:19:28Z,2021-10-25T16:19:34Z,MERGED,True,1,1,1,https://github.com/hot3eed,gumjs: Bump Swift bridge,1,[],https://github.com/frida/frida-gum/pull/587,https://github.com/hot3eed,1,https://github.com/frida/frida-gum/pull/587,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,587,2021-10-21T16:55:33Z,2021-10-25T16:19:28Z,2021-10-25T16:19:34Z,MERGED,True,1,1,1,https://github.com/hot3eed,gumjs: Bump Swift bridge,1,[],https://github.com/frida/frida-gum/pull/587,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/587#issuecomment-951089713,,Thanks!,True,{'THUMBS_UP': ['https://github.com/hot3eed']}
frida/frida-gum,https://github.com/frida/frida-gum,588,2021-10-29T15:57:58Z,2021-11-01T19:23:19Z,2021-11-05T17:02:58Z,MERGED,True,1,1,1,https://github.com/WorksButNotTested,Fix to patching of RIP relative instruction,1,[],https://github.com/frida/frida-gum/pull/588,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/588,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,588,2021-10-29T15:57:58Z,2021-11-01T19:23:19Z,2021-11-05T17:02:58Z,MERGED,True,1,1,1,https://github.com/WorksButNotTested,Fix to patching of RIP relative instruction,1,[],https://github.com/frida/frida-gum/pull/588,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/588#issuecomment-956520940,,Thanks!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,590,2021-11-03T15:50:58Z,2021-11-05T17:10:00Z,2021-11-05T17:10:00Z,MERGED,True,32,2,1,https://github.com/mrmacete,objc-api-resolver: Guard against disposed objc classes,3,[],https://github.com/frida/frida-gum/pull/590,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/590,"This change reduces the chances of crashing when any Objective-C class gets disposed during the lifetime of an ApiResolver instance of the objc type, by detecting and removing dangling class references.","This change reduces the chances of crashing when any Objective-C class gets disposed during the lifetime of an ApiResolver instance of the objc type, by detecting and removing dangling class references.",True,{'HOORAY': ['https://github.com/hot3eed']}
frida/frida-gum,https://github.com/frida/frida-gum,591,2021-11-04T17:27:47Z,2021-11-17T21:58:02Z,2021-11-17T21:58:02Z,MERGED,True,772,122,19,https://github.com/hot3eed,Add regex support to `Memory.scan()` and implement `MatchPattern` object,52,[],https://github.com/frida/frida-gum/pull/591,https://github.com/hot3eed,1,https://github.com/frida/frida-gum/pull/591,"In this PR:

Allow Memory.scan() to scan for regex patterns, which is triggered automatically when the pattern argument is prefixed and suffixed with /, e.g. /Some\s*Pattern/.
Implement the MatchPattern object, whose constructor accepts either: a hexstring, Memory.scan()-style; or a regex pattern with the format above. This allows the user of the API to re-use a compiled regex, by keeping a reference to the MatchPattern object.
Make it return a Promise<void> instead of void.
Make the onComplete callback optional (since we have the settling of the Promise to indicate that we're finished scanning.)
The API remains compatible with the older, callback-style one (except for one edge case, see below.)

Points for discussion:

Is returning Promise<void> instead of void considered API-breaking? There's one edge case I can think of where code wouldn't take the expected control flow. If a call to Memory.scan() throws an exception before starting the scan, due to bad or missing arguments for example, AND the user of the API is catching this exception, then since we now return a Promise, there will be an unhandled rejection instead of a caught exception. Example:

try {
  /* should be awaited so that the rejection is thrown as an exception */
  Memory.scan(ptr, size, pattern, {
    onMatch (address, size) {
      ...
    },
    onError (reason) { 
      /* will execute! */
    }
  });
} catch (e) {
  /* will never execute, happens only before initiating the scan */
} 

To keep Memory.scanSync() compatible with Memory.scan(), we should make it optionally accept a MatchPattern for a pattern as well. Does this warrant adding a qualifier for MatchPattern | string in xxx_args_parse() (for V8 and QJS), or should we add a helper method to do that?
When should we free this stuff?","In this PR:

Allow Memory.scan() to scan for regex patterns, which is triggered automatically when the pattern argument is prefixed and suffixed with /, e.g. /Some\s*Pattern/.
Implement the MatchPattern object, whose constructor accepts either: a hexstring, Memory.scan()-style; or a regex pattern with the format above. This allows the user of the API to re-use a compiled regex, by keeping a reference to the MatchPattern object.
Make it return a Promise<void> instead of void.
Make the onComplete callback optional (since we have the settling of the Promise to indicate that we're finished scanning.)
The API remains compatible with the older, callback-style one (except for one edge case, see below.)

Points for discussion:

Is returning Promise<void> instead of void considered API-breaking? There's one edge case I can think of where code wouldn't take the expected control flow. If a call to Memory.scan() throws an exception before starting the scan, due to bad or missing arguments for example, AND the user of the API is catching this exception, then since we now return a Promise, there will be an unhandled rejection instead of a caught exception. Example:

try {
  /* should be awaited so that the rejection is thrown as an exception */
  Memory.scan(ptr, size, pattern, {
    onMatch (address, size) {
      ...
    },
    onError (reason) { 
      /* will execute! */
    }
  });
} catch (e) {
  /* will never execute, happens only before initiating the scan */
} 

To keep Memory.scanSync() compatible with Memory.scan(), we should make it optionally accept a MatchPattern for a pattern as well. Does this warrant adding a qualifier for MatchPattern | string in xxx_args_parse() (for V8 and QJS), or should we add a helper method to do that?
When should we free this stuff?",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,591,2021-11-04T17:27:47Z,2021-11-17T21:58:02Z,2021-11-17T21:58:02Z,MERGED,True,772,122,19,https://github.com/hot3eed,Add regex support to `Memory.scan()` and implement `MatchPattern` object,52,[],https://github.com/frida/frida-gum/pull/591,https://github.com/hot3eed,2,https://github.com/frida/frida-gum/pull/591#issuecomment-964340993,"In this PR:

Allow Memory.scan() to scan for regex patterns, which is triggered automatically when the pattern argument is prefixed and suffixed with /, e.g. /Some\s*Pattern/.
Implement the MatchPattern object, whose constructor accepts either: a hexstring, Memory.scan()-style; or a regex pattern with the format above. This allows the user of the API to re-use a compiled regex, by keeping a reference to the MatchPattern object.
Make it return a Promise<void> instead of void.
Make the onComplete callback optional (since we have the settling of the Promise to indicate that we're finished scanning.)
The API remains compatible with the older, callback-style one (except for one edge case, see below.)

Points for discussion:

Is returning Promise<void> instead of void considered API-breaking? There's one edge case I can think of where code wouldn't take the expected control flow. If a call to Memory.scan() throws an exception before starting the scan, due to bad or missing arguments for example, AND the user of the API is catching this exception, then since we now return a Promise, there will be an unhandled rejection instead of a caught exception. Example:

try {
  /* should be awaited so that the rejection is thrown as an exception */
  Memory.scan(ptr, size, pattern, {
    onMatch (address, size) {
      ...
    },
    onError (reason) { 
      /* will execute! */
    }
  });
} catch (e) {
  /* will never execute, happens only before initiating the scan */
} 

To keep Memory.scanSync() compatible with Memory.scan(), we should make it optionally accept a MatchPattern for a pattern as well. Does this warrant adding a qualifier for MatchPattern | string in xxx_args_parse() (for V8 and QJS), or should we add a helper method to do that?
When should we free this stuff?",@oleavr  Sounds good! I've just pushed the changes you requested.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,592,2021-11-05T00:56:46Z,2021-11-05T17:01:29Z,2021-11-05T17:01:29Z,MERGED,True,4,3,2,https://github.com/3vilWind,gumjs: Fix v8 Interceptor context,2,[],https://github.com/frida/frida-gum/pull/592,https://github.com/3vilWind,1,https://github.com/frida/frida-gum/pull/592,"There was a regression in the tests starting from #578
Fixed getting wrong variable (v8), explicitly initializing new variables (qjs, v8)","There was a regression in the tests starting from #578
Fixed getting wrong variable (v8), explicitly initializing new variables (qjs, v8)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,592,2021-11-05T00:56:46Z,2021-11-05T17:01:29Z,2021-11-05T17:01:29Z,MERGED,True,4,3,2,https://github.com/3vilWind,gumjs: Fix v8 Interceptor context,2,[],https://github.com/frida/frida-gum/pull/592,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/592#issuecomment-962054309,"There was a regression in the tests starting from #578
Fixed getting wrong variable (v8), explicitly initializing new variables (qjs, v8)",Actually let me apply these minor tweaks now so we can land this ‚Äî definitely want this in the upcoming release üëç,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,593,2021-11-05T01:03:51Z,2021-11-05T19:00:04Z,2021-11-05T19:00:27Z,MERGED,True,172,0,5,https://github.com/3vilWind,gumjs: Expose more capstone api,4,[],https://github.com/frida/frida-gum/pull/593,https://github.com/3vilWind,1,https://github.com/frida/frida-gum/pull/593,"access field in operands
regsAccess.read/written (through cs_regs_access) - get read/written registers both explicitly and implicitly, unlike existing regsRead/regsWritten","access field in operands
regsAccess.read/written (through cs_regs_access) - get read/written registers both explicitly and implicitly, unlike existing regsRead/regsWritten",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,593,2021-11-05T01:03:51Z,2021-11-05T19:00:04Z,2021-11-05T19:00:27Z,MERGED,True,172,0,5,https://github.com/3vilWind,gumjs: Expose more capstone api,4,[],https://github.com/frida/frida-gum/pull/593,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/593#issuecomment-962141606,"access field in operands
regsAccess.read/written (through cs_regs_access) - get read/written registers both explicitly and implicitly, unlike existing regsRead/regsWritten","Yay, this is awesome. Thanks a lot! üôå",True,{'HEART': ['https://github.com/3vilWind']}
frida/frida-gum,https://github.com/frida/frida-gum,594,2021-11-05T17:04:36Z,2021-11-06T18:10:41Z,2021-11-09T09:56:52Z,MERGED,True,1307,938,7,https://github.com/WorksButNotTested,Stalker Performance Improvements,4,[],https://github.com/frida/frida-gum/pull/594,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/594,"Adjacency/Localtiy

Split instrumented code into fast and slow slabs
Compilation of adjacent blocks
Use NOP slides rather than jumps to branch between adjacent instrumented blocks
Move inline cache to the data slab
Use linked list to track GumExecBlocks so data slab can also be used for inline caches


Inline cache

Replace shadow stack with inline cache on return
Inline cache now uses Most Recently Used
Unroll loop when searching inline cache
Support backpatching inline cache for RET statements which return to the code slab


Perf

Reduce branches when backpatching Jcc instructions
Optimize generation of NOP padding.
Emit UD2 after indirect JMP instructions to stall branch predictor.


Misc

Entry gates are no longer fast call (as they are on the slow path anyway)
Add support for switch block callback to the observer (allows fuzzer to control branching and skip coverage generation for direct branches).","Adjacency/Localtiy

Split instrumented code into fast and slow slabs
Compilation of adjacent blocks
Use NOP slides rather than jumps to branch between adjacent instrumented blocks
Move inline cache to the data slab
Use linked list to track GumExecBlocks so data slab can also be used for inline caches


Inline cache

Replace shadow stack with inline cache on return
Inline cache now uses Most Recently Used
Unroll loop when searching inline cache
Support backpatching inline cache for RET statements which return to the code slab


Perf

Reduce branches when backpatching Jcc instructions
Optimize generation of NOP padding.
Emit UD2 after indirect JMP instructions to stall branch predictor.


Misc

Entry gates are no longer fast call (as they are on the slow path anyway)
Add support for switch block callback to the observer (allows fuzzer to control branching and skip coverage generation for direct branches).",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,594,2021-11-05T17:04:36Z,2021-11-06T18:10:41Z,2021-11-09T09:56:52Z,MERGED,True,1307,938,7,https://github.com/WorksButNotTested,Stalker Performance Improvements,4,[],https://github.com/frida/frida-gum/pull/594,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/594#issuecomment-962164822,"Adjacency/Localtiy

Split instrumented code into fast and slow slabs
Compilation of adjacent blocks
Use NOP slides rather than jumps to branch between adjacent instrumented blocks
Move inline cache to the data slab
Use linked list to track GumExecBlocks so data slab can also be used for inline caches


Inline cache

Replace shadow stack with inline cache on return
Inline cache now uses Most Recently Used
Unroll loop when searching inline cache
Support backpatching inline cache for RET statements which return to the code slab


Perf

Reduce branches when backpatching Jcc instructions
Optimize generation of NOP padding.
Emit UD2 after indirect JMP instructions to stall branch predictor.


Misc

Entry gates are no longer fast call (as they are on the slow path anyway)
Add support for switch block callback to the observer (allows fuzzer to control branching and skip coverage generation for direct branches).",That should be them sorted. I did a grep in arch-x86 and backend-x86 to look for any similar issues where I could,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,595,2021-11-07T09:49:28Z,2021-11-07T15:27:19Z,2021-11-09T09:56:51Z,MERGED,True,14,7,2,https://github.com/WorksButNotTested,Fix X86CodeWriter tests,1,[],https://github.com/frida/frida-gum/pull/595,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/595,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,596,2021-11-08T11:17:43Z,2021-11-17T18:49:05Z,2021-11-17T18:49:05Z,MERGED,True,92,40,3,https://github.com/mrmacete,kernel: Get base from all_image_info where supported,5,[],https://github.com/frida/frida-gum/pull/596,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/596,"Jailbreaks like Unc0ver and checkra1n store the kernel slide in all_image_info_size, obtainable via a call to task_info on the kernel task port. This change adds support for reconstructing the kernel base address from it.","Jailbreaks like Unc0ver and checkra1n store the kernel slide in all_image_info_size, obtainable via a call to task_info on the kernel task port. This change adds support for reconstructing the kernel base address from it.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,597,2021-11-09T13:41:58Z,2021-11-09T21:15:02Z,2021-11-09T21:15:02Z,CLOSED,False,3,6,1,https://github.com/0xDC00,x86-relocator: fix JCCs,8,[],https://github.com/frida/frida-gum/pull/597,https://github.com/0xDC00,1,https://github.com/frida/frida-gum/pull/597,Switch to jcc_short when jcc_near failed (-+2GB).,Switch to jcc_short when jcc_near failed (-+2GB).,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,598,2021-11-09T21:14:28Z,2021-11-17T19:32:38Z,2021-11-17T19:33:23Z,MERGED,True,3,6,1,https://github.com/0xDC00,x86-relocator: fix Jccs,2,[],https://github.com/frida/frida-gum/pull/598,https://github.com/0xDC00,1,https://github.com/frida/frida-gum/pull/598,Switch to jcc_short when jcc_near failed (-+2GB).,Switch to jcc_short when jcc_near failed (-+2GB).,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,598,2021-11-09T21:14:28Z,2021-11-17T19:32:38Z,2021-11-17T19:33:23Z,MERGED,True,3,6,1,https://github.com/0xDC00,x86-relocator: fix Jccs,2,[],https://github.com/frida/frida-gum/pull/598,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/598#issuecomment-971907322,Switch to jcc_short when jcc_near failed (-+2GB).,"Actually let's not let this block on test coverage, we'll add that later.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,599,2021-11-15T17:12:56Z,2021-11-17T19:28:50Z,2021-12-23T12:11:51Z,MERGED,True,59,41,3,https://github.com/WorksButNotTested,Perf,4,[],https://github.com/frida/frida-gum/pull/599,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/599,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,600,2021-11-16T19:35:23Z,2021-11-17T22:59:34Z,2021-11-17T23:12:49Z,MERGED,True,26,7,1,https://github.com/HonicRoku,Fixing the case of SymWalk being sensitive about XIP.,3,[],https://github.com/frida/frida-gum/pull/600,https://github.com/HonicRoku,1,https://github.com/frida/frida-gum/pull/600,"Steps to reproduce the problem that this patch fixes:

Run notepad in Frida (x64).
Attach hook on combase!CoCreateInstance that prints backtrace onEnter (also load symbols for all modules..).

See truncated or invalid backtraces.
This patch also fixes the case when there are multiple hooks in a cascade, e.g. CreateFileInternal & CreateFileW. See the StackWalk loop.
The problem is that the code tries to skip the first frame by using the return address from the top of stack. SymWalk does not like this -- there is mismatch between XSP and XIP. StackWalk is sensitive about RIP, especially on x64.
It was tested with both 32-bit & 64-bit builds on Windows 10.","Steps to reproduce the problem that this patch fixes:

Run notepad in Frida (x64).
Attach hook on combase!CoCreateInstance that prints backtrace onEnter (also load symbols for all modules..).

See truncated or invalid backtraces.
This patch also fixes the case when there are multiple hooks in a cascade, e.g. CreateFileInternal & CreateFileW. See the StackWalk loop.
The problem is that the code tries to skip the first frame by using the return address from the top of stack. SymWalk does not like this -- there is mismatch between XSP and XIP. StackWalk is sensitive about RIP, especially on x64.
It was tested with both 32-bit & 64-bit builds on Windows 10.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,600,2021-11-16T19:35:23Z,2021-11-17T22:59:34Z,2021-11-17T23:12:49Z,MERGED,True,26,7,1,https://github.com/HonicRoku,Fixing the case of SymWalk being sensitive about XIP.,3,[],https://github.com/frida/frida-gum/pull/600,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/600#issuecomment-972160620,"Steps to reproduce the problem that this patch fixes:

Run notepad in Frida (x64).
Attach hook on combase!CoCreateInstance that prints backtrace onEnter (also load symbols for all modules..).

See truncated or invalid backtraces.
This patch also fixes the case when there are multiple hooks in a cascade, e.g. CreateFileInternal & CreateFileW. See the StackWalk loop.
The problem is that the code tries to skip the first frame by using the return address from the top of stack. SymWalk does not like this -- there is mismatch between XSP and XIP. StackWalk is sensitive about RIP, especially on x64.
It was tested with both 32-bit & 64-bit builds on Windows 10.",Thanks! I've just applied some style tweaks and simplifications ‚Äî could you check if this still works for you?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,600,2021-11-16T19:35:23Z,2021-11-17T22:59:34Z,2021-11-17T23:12:49Z,MERGED,True,26,7,1,https://github.com/HonicRoku,Fixing the case of SymWalk being sensitive about XIP.,3,[],https://github.com/frida/frida-gum/pull/600,https://github.com/HonicRoku,3,https://github.com/frida/frida-gum/pull/600#issuecomment-972193045,"Steps to reproduce the problem that this patch fixes:

Run notepad in Frida (x64).
Attach hook on combase!CoCreateInstance that prints backtrace onEnter (also load symbols for all modules..).

See truncated or invalid backtraces.
This patch also fixes the case when there are multiple hooks in a cascade, e.g. CreateFileInternal & CreateFileW. See the StackWalk loop.
The problem is that the code tries to skip the first frame by using the return address from the top of stack. SymWalk does not like this -- there is mismatch between XSP and XIP. StackWalk is sensitive about RIP, especially on x64.
It was tested with both 32-bit & 64-bit builds on Windows 10.","Yes, it works (32-bit/64-bit Frida on Windows 10 64-bit). I've also reviewed the code -- looks good to me. Sorry about the style, won't happen again. :) Thank you!",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,600,2021-11-16T19:35:23Z,2021-11-17T22:59:34Z,2021-11-17T23:12:49Z,MERGED,True,26,7,1,https://github.com/HonicRoku,Fixing the case of SymWalk being sensitive about XIP.,3,[],https://github.com/frida/frida-gum/pull/600,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/600#issuecomment-972246071,"Steps to reproduce the problem that this patch fixes:

Run notepad in Frida (x64).
Attach hook on combase!CoCreateInstance that prints backtrace onEnter (also load symbols for all modules..).

See truncated or invalid backtraces.
This patch also fixes the case when there are multiple hooks in a cascade, e.g. CreateFileInternal & CreateFileW. See the StackWalk loop.
The problem is that the code tries to skip the first frame by using the return address from the top of stack. SymWalk does not like this -- there is mismatch between XSP and XIP. StackWalk is sensitive about RIP, especially on x64.
It was tested with both 32-bit & 64-bit builds on Windows 10.","Yay, thanks for testing! üôå",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,600,2021-11-16T19:35:23Z,2021-11-17T22:59:34Z,2021-11-17T23:12:49Z,MERGED,True,26,7,1,https://github.com/HonicRoku,Fixing the case of SymWalk being sensitive about XIP.,3,[],https://github.com/frida/frida-gum/pull/600,https://github.com/oleavr,5,https://github.com/frida/frida-gum/pull/600#issuecomment-972248057,"Steps to reproduce the problem that this patch fixes:

Run notepad in Frida (x64).
Attach hook on combase!CoCreateInstance that prints backtrace onEnter (also load symbols for all modules..).

See truncated or invalid backtraces.
This patch also fixes the case when there are multiple hooks in a cascade, e.g. CreateFileInternal & CreateFileW. See the StackWalk loop.
The problem is that the code tries to skip the first frame by using the return address from the top of stack. SymWalk does not like this -- there is mismatch between XSP and XIP. StackWalk is sensitive about RIP, especially on x64.
It was tested with both 32-bit & 64-bit builds on Windows 10.",(No worries regarding the style tweaks btw! üòä),True,{}
frida/frida-gum,https://github.com/frida/frida-gum,601,2021-11-19T12:05:41Z,2021-11-30T22:28:20Z,2021-11-30T22:28:36Z,MERGED,True,236,262,9,https://github.com/hot3eed,Implement `MatchPattern` qualifier and update `Kernel.scan*()`,28,[],https://github.com/frida/frida-gum/pull/601,https://github.com/hot3eed,1,https://github.com/frida/frida-gum/pull/601,"This makes the Kernel.scan*() API fully compatible with Memory.scan*(), which was just updated to add regex support.
TODO:

 Return a Promise from Kernel.scan().
 Add tests","This makes the Kernel.scan*() API fully compatible with Memory.scan*(), which was just updated to add regex support.
TODO:

 Return a Promise from Kernel.scan().
 Add tests",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,601,2021-11-19T12:05:41Z,2021-11-30T22:28:20Z,2021-11-30T22:28:36Z,MERGED,True,236,262,9,https://github.com/hot3eed,Implement `MatchPattern` qualifier and update `Kernel.scan*()`,28,[],https://github.com/frida/frida-gum/pull/601,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/601#issuecomment-983076833,"This makes the Kernel.scan*() API fully compatible with Memory.scan*(), which was just updated to add regex support.
TODO:

 Return a Promise from Kernel.scan().
 Add tests","Thanks, this is awesome! ü•≥",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,602,2021-11-19T14:36:33Z,2021-11-30T23:05:10Z,2021-11-30T23:05:23Z,MERGED,True,257,15,4,https://github.com/mrmacete,objc-api-resolver: Protect against objc_disposeClassPair via mutex,12,[],https://github.com/frida/frida-gum/pull/602,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/602,"GumObjcDisposeClassPairMonitor uses the Interceptor to attach to objc_disposeClassPair so that on enter it locks a mutex, releasing it on leave.
This mutex is then used to protect the creation of the initial snapshot of Objective-C classes, and a cache-less reimplementation of gum_objc_api_resolver_find_method_by_address.
The monitor instance is shared across all concurrent usages, via the ""obtain"" semantics.","GumObjcDisposeClassPairMonitor uses the Interceptor to attach to objc_disposeClassPair so that on enter it locks a mutex, releasing it on leave.
This mutex is then used to protect the creation of the initial snapshot of Objective-C classes, and a cache-less reimplementation of gum_objc_api_resolver_find_method_by_address.
The monitor instance is shared across all concurrent usages, via the ""obtain"" semantics.",True,"{'HOORAY': ['https://github.com/hot3eed', 'https://github.com/oleavr']}"
frida/frida-gum,https://github.com/frida/frida-gum,602,2021-11-19T14:36:33Z,2021-11-30T23:05:10Z,2021-11-30T23:05:23Z,MERGED,True,257,15,4,https://github.com/mrmacete,objc-api-resolver: Protect against objc_disposeClassPair via mutex,12,[],https://github.com/frida/frida-gum/pull/602,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/602#issuecomment-983108316,"GumObjcDisposeClassPairMonitor uses the Interceptor to attach to objc_disposeClassPair so that on enter it locks a mutex, releasing it on leave.
This mutex is then used to protect the creation of the initial snapshot of Objective-C classes, and a cache-less reimplementation of gum_objc_api_resolver_find_method_by_address.
The monitor instance is shared across all concurrent usages, via the ""obtain"" semantics.",Thanks! üéâ,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,603,2021-11-19T19:40:35Z,2021-11-29T17:42:04Z,2021-11-29T17:42:04Z,CLOSED,False,170,0,1,https://github.com/WorksButNotTested,Handle excluded tail calls through .plt.got and .plt.sec,1,[],https://github.com/frida/frida-gum/pull/603,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/603,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,604,2021-11-23T19:31:04Z,2021-11-29T17:41:44Z,2021-11-29T17:41:44Z,CLOSED,False,1,1,1,https://github.com/WorksButNotTested,Fix broken op-code,1,[],https://github.com/frida/frida-gum/pull/604,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/604,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,606,2021-11-26T18:53:13Z,2021-11-29T17:42:22Z,2021-11-29T17:42:23Z,CLOSED,False,527,5,6,https://github.com/WorksButNotTested,Exceptions,2,[],https://github.com/frida/frida-gum/pull/606,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/606,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,607,2021-11-29T17:52:27Z,2021-12-06T20:45:38Z,2021-12-07T07:24:13Z,MERGED,True,814,25,5,https://github.com/WorksButNotTested,Excluded3,2,[],https://github.com/frida/frida-gum/pull/607,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/607,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,607,2021-11-29T17:52:27Z,2021-12-06T20:45:38Z,2021-12-07T07:24:13Z,MERGED,True,814,25,5,https://github.com/WorksButNotTested,Excluded3,2,[],https://github.com/frida/frida-gum/pull/607,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/607#issuecomment-983299245,,"Hopefully this should take care of things. I have:

Fixed the style problems I can see. Do let me know if there are any more I have missed, I think it was mostly missing spaces before braces.
Removed the dependency on the __gxx_personality_v0 and _Unwind_Find_FDE symbols and instead used gum_find_function (since if things are statically linked then these functions won't be exports). The functions are only hooked if they are found (which should mean we at least don't break things if we can't find them).
Switched to use a GumMetalHashTable as suggested.
Moved the excluded_calls hashtable to be a member of the GumExecCtx. Memory consumption should be minimal and we avoid any thread synchronization issues this way. It also keeps the code clean without a load of lock/unlock logic.
Commented the functions we are hooking and explained the mysterious +1.
Fixed the style issues in the PLT changes I could find.
Run all the Stalker unit tests for linux x86 and x64
Checked there are no regressions when using the new implementation in the fuzzer with a target which makes use of exceptions.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,607,2021-11-29T17:52:27Z,2021-12-06T20:45:38Z,2021-12-07T07:24:13Z,MERGED,True,814,25,5,https://github.com/WorksButNotTested,Excluded3,2,[],https://github.com/frida/frida-gum/pull/607,https://github.com/s1341,3,https://github.com/frida/frida-gum/pull/607#issuecomment-983517988,,"Amazing work @WorksButNotTested !!! Glad you got to this before I did, as the implementation I had in mind was much more complex and probably fragile.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,608,2021-12-02T17:27:32Z,2021-12-02T20:26:25Z,2021-12-03T11:30:42Z,MERGED,True,33,2,3,https://github.com/WorksButNotTested,arm IT AL fix,1,[],https://github.com/frida/frida-gum/pull/608,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/608,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,608,2021-12-02T17:27:32Z,2021-12-02T20:26:25Z,2021-12-03T11:30:42Z,MERGED,True,33,2,3,https://github.com/WorksButNotTested,arm IT AL fix,1,[],https://github.com/frida/frida-gum/pull/608,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/608#issuecomment-984943428,,Should be good to go.,True,{'HEART': ['https://github.com/oleavr']}
frida/frida-gum,https://github.com/frida/frida-gum,609,2021-12-10T17:12:28Z,2022-01-20T22:26:42Z,2022-01-22T20:04:25Z,MERGED,True,96,52,1,https://github.com/WorksButNotTested,Rework PLT exclusion code,5,[],https://github.com/frida/frida-gum/pull/609,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/609,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,609,2021-12-10T17:12:28Z,2022-01-20T22:26:42Z,2022-01-22T20:04:25Z,MERGED,True,96,52,1,https://github.com/WorksButNotTested,Rework PLT exclusion code,5,[],https://github.com/frida/frida-gum/pull/609,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-gum/pull/609#issuecomment-991247013,,Ok. Hopefully that should sort it.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,609,2021-12-10T17:12:28Z,2022-01-20T22:26:42Z,2022-01-22T20:04:25Z,MERGED,True,96,52,1,https://github.com/WorksButNotTested,Rework PLT exclusion code,5,[],https://github.com/frida/frida-gum/pull/609,https://github.com/WorksButNotTested,3,https://github.com/frida/frida-gum/pull/609#issuecomment-991448069,,Ready for you again. Thanks.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,610,2021-12-13T20:21:07Z,2021-12-23T12:18:30Z,2021-12-23T12:18:30Z,CLOSED,False,2084,1109,6,https://github.com/WorksButNotTested,Optimize Stalker on AARCH64,1,[],https://github.com/frida/frida-gum/pull/610,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/610,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,612,2021-12-15T20:20:51Z,2021-12-15T20:42:48Z,2021-12-15T20:42:48Z,MERGED,True,28,6,9,https://github.com/meme,Allow building in isolation,3,[],https://github.com/frida/frida-gum/pull/612,https://github.com/meme,1,https://github.com/frida/frida-gum/pull/612,With these changes it is possible to build frida-gum on Ubuntu outside of the Frida monorepo,With these changes it is possible to build frida-gum on Ubuntu outside of the Frida monorepo,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,613,2021-12-16T16:50:53Z,2021-12-16T17:07:38Z,2021-12-16T17:07:38Z,MERGED,True,67,0,4,https://github.com/meme,Add CI and clang-format,1,[],https://github.com/frida/frida-gum/pull/613,https://github.com/meme,1,https://github.com/frida/frida-gum/pull/613,"This CI will run on master commits or pull requests to master.
It adds a clang-format configuration, but does not format the codebase. You must run ninja -C build clang-format first, and then uncomment the ninja -C build clang-format-check line.

Future follow-up improvements:

Put all apt-get dependencies in a Docker build image and run inside that container
Use ccache and cache the build folder for fast incremental build times
Run tests on CI (requires fixing broken tests on Ubuntu when not building with the monorepo toolchain)
Upload artifacts to GitHub (e.g. GIR)","This CI will run on master commits or pull requests to master.
It adds a clang-format configuration, but does not format the codebase. You must run ninja -C build clang-format first, and then uncomment the ninja -C build clang-format-check line.

Future follow-up improvements:

Put all apt-get dependencies in a Docker build image and run inside that container
Use ccache and cache the build folder for fast incremental build times
Run tests on CI (requires fixing broken tests on Ubuntu when not building with the monorepo toolchain)
Upload artifacts to GitHub (e.g. GIR)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,614,2021-12-17T20:41:50Z,2022-01-08T03:50:17Z,2022-01-08T03:50:20Z,MERGED,True,817,191,47,https://github.com/oleavr,Add g-i annotations,18,[],https://github.com/frida/frida-gum/pull/614,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/614,,,True,{'HOORAY': ['https://github.com/meme']}
frida/frida-gum,https://github.com/frida/frida-gum,615,2021-12-23T23:12:19Z,2022-01-21T18:05:34Z,2022-01-21T18:05:34Z,MERGED,True,1930,1102,1,https://github.com/WorksButNotTested,Optimize Stalker for AARCH64,6,[],https://github.com/frida/frida-gum/pull/615,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/615,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,616,2022-01-02T09:07:31Z,2022-05-02T11:30:04Z,2022-05-02T11:30:07Z,MERGED,True,278,39,3,https://github.com/s1341,Implement unwind hooking for aarch64 to allow backtracing through stalked code,4,[],https://github.com/frida/frida-gum/pull/616,https://github.com/s1341,1,https://github.com/frida/frida-gum/pull/616,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,617,2022-01-05T08:51:35Z,2022-01-05T21:37:40Z,2022-01-05T21:37:40Z,CLOSED,False,1,1,1,https://github.com/MohamedX99,Update gumdefs.h,1,[],https://github.com/frida/frida-gum/pull/617,https://github.com/MohamedX99,1,https://github.com/frida/frida-gum/pull/617,small typo fix,small typo fix,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,617,2022-01-05T08:51:35Z,2022-01-05T21:37:40Z,2022-01-05T21:37:40Z,CLOSED,False,1,1,1,https://github.com/MohamedX99,Update gumdefs.h,1,[],https://github.com/frida/frida-gum/pull/617,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/617#issuecomment-1006082445,small typo fix,"Thanks! Hmm, that isn't a typo. What's the compiler error you're trying to fix?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,617,2022-01-05T08:51:35Z,2022-01-05T21:37:40Z,2022-01-05T21:37:40Z,CLOSED,False,1,1,1,https://github.com/MohamedX99,Update gumdefs.h,1,[],https://github.com/frida/frida-gum/pull/617,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/617#issuecomment-1006097561,small typo fix,Ahh I see the issue. Fixed in 49fbcd4. Sorry about that!,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,619,2022-01-18T18:00:55Z,2022-01-18T19:11:26Z,2022-01-20T15:20:44Z,CLOSED,False,9,2,1,https://github.com/mundusnine,Fix for debug symbols on windows,1,[],https://github.com/frida/frida-gum/pull/619,https://github.com/mundusnine,1,https://github.com/frida/frida-gum/pull/619,"Per the windows docs:
[in] BaseOfDll

The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.

If the image is a .pdb file, this parameter cannot be zero. <------------------------------

[in] DllSize

The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.

If the image is a .pdb file, this parameter cannot be zero. <------------------------------","Per the windows docs:
[in] BaseOfDll

The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.

If the image is a .pdb file, this parameter cannot be zero. <------------------------------

[in] DllSize

The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.

If the image is a .pdb file, this parameter cannot be zero. <------------------------------",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,619,2022-01-18T18:00:55Z,2022-01-18T19:11:26Z,2022-01-20T15:20:44Z,CLOSED,False,9,2,1,https://github.com/mundusnine,Fix for debug symbols on windows,1,[],https://github.com/frida/frida-gum/pull/619,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/619#issuecomment-1015811924,"Per the windows docs:
[in] BaseOfDll

The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.

If the image is a .pdb file, this parameter cannot be zero. <------------------------------

[in] DllSize

The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.

If the image is a .pdb file, this parameter cannot be zero. <------------------------------","Thanks! Seeing as you closed this PR, I'm curious what you learned since opening it? (I can't remember a whole lot about this part of the codebase.)",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,619,2022-01-18T18:00:55Z,2022-01-18T19:11:26Z,2022-01-20T15:20:44Z,CLOSED,False,9,2,1,https://github.com/mundusnine,Fix for debug symbols on windows,1,[],https://github.com/frida/frida-gum/pull/619,https://github.com/mundusnine,3,https://github.com/frida/frida-gum/pull/619#issuecomment-1017616370,"Per the windows docs:
[in] BaseOfDll

The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.

If the image is a .pdb file, this parameter cannot be zero. <------------------------------

[in] DllSize

The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.

If the image is a .pdb file, this parameter cannot be zero. <------------------------------","Hi,
I tested with a simple usecase i.e. just dumping the .pdb data from the .exe. From my test I think I don't quite understand yet how it all works on the gum side. I thought the issue was not using the size like I said in the PR but as my issue states, loading of symbols fails also for dll's. I will make a minimal project to test this.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,623,2022-01-29T21:20:14Z,2022-02-01T10:21:38Z,2022-02-01T10:21:38Z,MERGED,True,20,0,1,https://github.com/yotamN,Add console.count and console.countReset methods,2,[],https://github.com/frida/frida-gum/pull/623,https://github.com/yotamN,1,https://github.com/frida/frida-gum/pull/623,Copied the API from the web standards,Copied the API from the web standards,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,623,2022-01-29T21:20:14Z,2022-02-01T10:21:38Z,2022-02-01T10:21:38Z,MERGED,True,20,0,1,https://github.com/yotamN,Add console.count and console.countReset methods,2,[],https://github.com/frida/frida-gum/pull/623,https://github.com/yotamN,2,https://github.com/frida/frida-gum/pull/623#issuecomment-1026510179,Copied the API from the web standards,Fixed both. I also noticed that the browser implementation prints 0 in countReset but it doesn't really makes sense. Do you want to maintain browser compatibility or not?,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,623,2022-01-29T21:20:14Z,2022-02-01T10:21:38Z,2022-02-01T10:21:38Z,MERGED,True,20,0,1,https://github.com/yotamN,Add console.count and console.countReset methods,2,[],https://github.com/frida/frida-gum/pull/623,https://github.com/oleavr,3,https://github.com/frida/frida-gum/pull/623#issuecomment-1026676490,Copied the API from the web standards,"Fixed both. I also noticed that the browser implementation prints 0 in countReset but it doesn't really makes sense. Do you want to maintain browser compatibility or not?

Thanks! I don't think so. At least Chrome 97 doesn't seem to exhibit such behavior:",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,623,2022-01-29T21:20:14Z,2022-02-01T10:21:38Z,2022-02-01T10:21:38Z,MERGED,True,20,0,1,https://github.com/yotamN,Add console.count and console.countReset methods,2,[],https://github.com/frida/frida-gum/pull/623,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/623#issuecomment-1026683258,Copied the API from the web standards,"Ah I see, Firefox behaves that way. Yeah I think we can ignore that üëç",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,624,2022-02-01T08:53:04Z,2022-02-01T10:08:48Z,2022-02-01T10:08:48Z,MERGED,True,1,31,1,https://github.com/WorksButNotTested,Fix Stalker exception handling,1,[],https://github.com/frida/frida-gum/pull/624,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/624,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,626,2022-02-08T18:15:08Z,2022-05-02T16:02:44Z,2022-05-02T16:02:44Z,MERGED,True,310,5,2,https://github.com/WorksButNotTested,stalker: Fix Linux clone() support in the x86 backend,2,[],https://github.com/frida/frida-gum/pull/626,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/626,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,628,2022-02-14T17:38:41Z,2022-05-02T16:08:59Z,2022-05-02T16:08:59Z,MERGED,True,53,0,5,https://github.com/WorksButNotTested,stalker: Add backpatch query support,1,[],https://github.com/frida/frida-gum/pull/628,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/628,Expose some information about backpatch prefetches so that the caller can determine whether they relate to blocks which are present in its address space.,Expose some information about backpatch prefetches so that the caller can determine whether they relate to blocks which are present in its address space.,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,629,2022-02-18T07:46:40Z,2022-05-02T17:00:28Z,2022-05-02T17:00:28Z,MERGED,True,133,59,6,https://github.com/WorksButNotTested,Various,4,[],https://github.com/frida/frida-gum/pull/629,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-gum/pull/629,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,630,2022-02-25T00:30:46Z,2022-02-25T20:57:29Z,2022-02-25T20:57:32Z,MERGED,True,115,4,2,https://github.com/oleavr,Improve CI,6,[],https://github.com/frida/frida-gum/pull/630,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/630,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,631,2022-02-26T00:00:53Z,2022-03-12T17:15:22Z,2022-03-12T17:15:22Z,CLOSED,False,35,0,2,https://github.com/vfsfitvnm,gumjs: Add Process.operatingSystem,1,[],https://github.com/frida/frida-gum/pull/631,https://github.com/vfsfitvnm,1,https://github.com/frida/frida-gum/pull/631,"Hi!
So there was a need to add a property (next to Process.platform) to determine the operating system (#192).
I added a (unneeded?) macro GUM_SCRIPT_OS which is pretty similar to this one. The alternative consisted in using the already existing gum_process_get_native_os and then retrieve a string from it, but it didn't look as simple as the macro solution.
Two doubts:

Should I have added a default case? (e.g. ""unknown"")
Should I have handled darwin-based operating system which aren't MacOs nor iOS? (defined (HAVE_DARWIN) && !defined (HAVE_MACOS) && !defined (HAVE_IOS))

Cheers","Hi!
So there was a need to add a property (next to Process.platform) to determine the operating system (#192).
I added a (unneeded?) macro GUM_SCRIPT_OS which is pretty similar to this one. The alternative consisted in using the already existing gum_process_get_native_os and then retrieve a string from it, but it didn't look as simple as the macro solution.
Two doubts:

Should I have added a default case? (e.g. ""unknown"")
Should I have handled darwin-based operating system which aren't MacOs nor iOS? (defined (HAVE_DARWIN) && !defined (HAVE_MACOS) && !defined (HAVE_IOS))

Cheers",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,631,2022-02-26T00:00:53Z,2022-03-12T17:15:22Z,2022-03-12T17:15:22Z,CLOSED,False,35,0,2,https://github.com/vfsfitvnm,gumjs: Add Process.operatingSystem,1,[],https://github.com/frida/frida-gum/pull/631,https://github.com/oleavr,2,https://github.com/frida/frida-gum/pull/631#issuecomment-1051388596,"Hi!
So there was a need to add a property (next to Process.platform) to determine the operating system (#192).
I added a (unneeded?) macro GUM_SCRIPT_OS which is pretty similar to this one. The alternative consisted in using the already existing gum_process_get_native_os and then retrieve a string from it, but it didn't look as simple as the macro solution.
Two doubts:

Should I have added a default case? (e.g. ""unknown"")
Should I have handled darwin-based operating system which aren't MacOs nor iOS? (defined (HAVE_DARWIN) && !defined (HAVE_MACOS) && !defined (HAVE_IOS))

Cheers","Hey, thanks for doing this!
This makes sense. But I think we should match our existing system parameters' os parameter both in name and contents. It is computed here: https://github.com/frida/frida-core/blob/1055b0d494b7123165b9b783715bb1bec60afc63/lib/base/session.vala#L1158-L1218
What do you think?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,631,2022-02-26T00:00:53Z,2022-03-12T17:15:22Z,2022-03-12T17:15:22Z,CLOSED,False,35,0,2,https://github.com/vfsfitvnm,gumjs: Add Process.operatingSystem,1,[],https://github.com/frida/frida-gum/pull/631,https://github.com/vfsfitvnm,3,https://github.com/frida/frida-gum/pull/631#issuecomment-1052016887,"Hi!
So there was a need to add a property (next to Process.platform) to determine the operating system (#192).
I added a (unneeded?) macro GUM_SCRIPT_OS which is pretty similar to this one. The alternative consisted in using the already existing gum_process_get_native_os and then retrieve a string from it, but it didn't look as simple as the macro solution.
Two doubts:

Should I have added a default case? (e.g. ""unknown"")
Should I have handled darwin-based operating system which aren't MacOs nor iOS? (defined (HAVE_DARWIN) && !defined (HAVE_MACOS) && !defined (HAVE_IOS))

Cheers","Hi, I honestly didn't look at frida-core side.
However, I don't think there is a strict need to add the other information -  for the sake of keeping the codebase as simple as possible: I couldn't find any issue (on GitHub nor Telegram) about a ""platform version"".
At the moment, it's very hard to tell if the script is running on MacOS or iOS, but frida-gum does always know this piece of information at 0-cost (this is untrue for the others); also, once the user knows what the operating system is, he could determine the other information if he really needs to. But, as of now, the only way to determine the operating system quickly is using dirty tricks (e.g. looking for specific exports/modules) - it feels odd given frida-gum has this information out of the box.
You may be wondering if there will be a breaking change when it'll come to adding e.g. the operating system version. Of course it will, but what can we say about this?
declare namespace Process {

    const platform: Platform;

    const operatingSystem: {
        id: ""windows"" | ""macos"" | ""ios"" | ""linux"" | ""android"" | ""qnx"" | ""freebsd"" | string,
        name: string?,
        version: string?
    };
}
Wouldn't it make more sense to move platform inside operatingSystem (e.g. in a family property)? If so, that would be a breaking change as well - it would be odd to have another operating system property outside the operatingSystem object in my opinion.
Moreover, #192 has been there for five years, I doubt there will be an issue about retrieving the operating system version anytime soon.
In conclusion, it looks like the effort in matching compute_system_parameters would be somewhat unrewarded.
That's why adding Process.operatingSystem is, in my opinion, the simplest and quickest way to address the majority (if not the totality) of the operating-system-details issues, without breaking Process.platform and without having an odd API.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,631,2022-02-26T00:00:53Z,2022-03-12T17:15:22Z,2022-03-12T17:15:22Z,CLOSED,False,35,0,2,https://github.com/vfsfitvnm,gumjs: Add Process.operatingSystem,1,[],https://github.com/frida/frida-gum/pull/631,https://github.com/oleavr,4,https://github.com/frida/frida-gum/pull/631#issuecomment-1059449803,"Hi!
So there was a need to add a property (next to Process.platform) to determine the operating system (#192).
I added a (unneeded?) macro GUM_SCRIPT_OS which is pretty similar to this one. The alternative consisted in using the already existing gum_process_get_native_os and then retrieve a string from it, but it didn't look as simple as the macro solution.
Two doubts:

Should I have added a default case? (e.g. ""unknown"")
Should I have handled darwin-based operating system which aren't MacOs nor iOS? (defined (HAVE_DARWIN) && !defined (HAVE_MACOS) && !defined (HAVE_IOS))

Cheers","Hmm yeah, I think you're right. I'm leaning towards naming it Process.os, and making that an enumeration that matches the values in frida-core. Does that make sense?",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,631,2022-02-26T00:00:53Z,2022-03-12T17:15:22Z,2022-03-12T17:15:22Z,CLOSED,False,35,0,2,https://github.com/vfsfitvnm,gumjs: Add Process.operatingSystem,1,[],https://github.com/frida/frida-gum/pull/631,https://github.com/vfsfitvnm,5,https://github.com/frida/frida-gum/pull/631#issuecomment-1059782094,"Hi!
So there was a need to add a property (next to Process.platform) to determine the operating system (#192).
I added a (unneeded?) macro GUM_SCRIPT_OS which is pretty similar to this one. The alternative consisted in using the already existing gum_process_get_native_os and then retrieve a string from it, but it didn't look as simple as the macro solution.
Two doubts:

Should I have added a default case? (e.g. ""unknown"")
Should I have handled darwin-based operating system which aren't MacOs nor iOS? (defined (HAVE_DARWIN) && !defined (HAVE_MACOS) && !defined (HAVE_IOS))

Cheers","Process.os is fine; however how do you intend matching frida-core values? I guess you are referring to os[""id""] - if so, should we care about a precise Linux distro id?
Another solution consists in adding two properties (isAndroid / isIOS) to address the two cases where it's difficult to determine whether the script is running in Android or iOS, given Process.platform is ""linux"" or ""darwin"".
In summary I see four solutions:

Editing Process.platform

Simple and clean
Breaking


Adding Process.os

Looks somehow avoidable
Creates inconsistency with frida-core if we follow the KISS principle
Unnecessarily complicated and unneeded if we match frida-core
Not breaking


Adding Process.isAndroid and Process.isIOS

Looks somehow avoidable
Process may not be the correct namespace to use (maybe one of Frida, Script or a brand new Platform is a better candidate?)
Not breaking


Statu quo ante

üò¢",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,632,2022-02-26T00:04:37Z,2022-02-26T00:08:50Z,2022-02-26T00:08:52Z,MERGED,True,6,10,1,https://github.com/oleavr,ci: Move to corellium-action v2,1,[],https://github.com/frida/frida-gum/pull/632,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/632,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,633,2022-02-26T00:33:18Z,2022-02-26T03:06:36Z,2022-02-26T03:06:38Z,MERGED,True,14,0,1,https://github.com/oleavr,Expand CI to cover more platforms,1,[],https://github.com/frida/frida-gum/pull/633,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/633,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,634,2022-02-26T03:13:31Z,2022-02-26T03:19:19Z,2022-02-26T03:19:21Z,MERGED,True,14,0,1,https://github.com/oleavr,ci: Build and run tests on macOS/x86_64,1,[],https://github.com/frida/frida-gum/pull/634,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/634,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,635,2022-02-26T03:24:20Z,2022-03-04T21:49:09Z,2022-03-04T21:54:31Z,MERGED,True,89,38,10,https://github.com/oleavr,ci: Build and run tests on Windows/x86_64,4,[],https://github.com/frida/frida-gum/pull/635,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/635,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,636,2022-03-04T21:55:31Z,2022-03-04T22:08:02Z,2022-03-04T22:08:05Z,MERGED,True,10,18,1,https://github.com/oleavr,Improve CI,2,[],https://github.com/frida/frida-gum/pull/636,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/636,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,637,2022-03-05T10:58:57Z,2022-03-08T18:15:23Z,2022-03-08T18:15:26Z,MERGED,True,150,68,16,https://github.com/oleavr,ci: Build and run tests on Windows and FreeBSD,16,[],https://github.com/frida/frida-gum/pull/637,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/637,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,638,2022-03-08T19:02:26Z,2022-03-15T22:39:44Z,2022-03-15T22:39:47Z,MERGED,True,318,103,8,https://github.com/oleavr,ci: Build Gum++ and GumJS on all platforms,7,[],https://github.com/frida/frida-gum/pull/638,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/638,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,639,2022-03-14T18:24:26Z,2022-03-15T22:31:49Z,2022-03-15T22:31:49Z,CLOSED,False,144,52,4,https://github.com/oleavr,Simulate an external PR,7,[],https://github.com/frida/frida-gum/pull/639,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/639,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,640,2022-03-16T11:15:56Z,2022-03-16T22:13:41Z,2022-03-16T22:13:44Z,MERGED,True,190,18,5,https://github.com/oleavr,ci: Improve coverage,5,[],https://github.com/frida/frida-gum/pull/640,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/640,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,641,2022-03-16T22:33:34Z,2022-03-19T22:48:50Z,2022-03-19T22:48:52Z,MERGED,True,354,233,16,https://github.com/oleavr,ci: Improve coverage,11,[],https://github.com/frida/frida-gum/pull/641,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/641,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,642,2022-03-21T10:39:18Z,2022-03-30T20:32:21Z,2022-03-30T20:32:26Z,CLOSED,False,81,2,4,https://github.com/oleavr,ci: Expand coverage,2,[],https://github.com/frida/frida-gum/pull/642,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/642,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,643,2022-03-29T17:50:17Z,2022-03-29T20:11:13Z,2022-03-29T20:11:16Z,MERGED,True,138,86,6,https://github.com/oleavr,Refactor,6,[],https://github.com/frida/frida-gum/pull/643,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/643,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,644,2022-04-01T11:05:03Z,2022-04-01T23:35:13Z,2022-04-01T23:35:40Z,MERGED,True,701,1403,17,https://github.com/oleavr,process: Factor out common ELF backend bits,14,[],https://github.com/frida/frida-gum/pull/644,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/644,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,645,2022-04-04T11:57:23Z,2022-04-05T17:21:14Z,2022-04-05T17:21:21Z,MERGED,True,58,48,4,https://github.com/oleavr,Fix issues resulting in flaky tests on Linux/x86,3,[],https://github.com/frida/frida-gum/pull/645,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/645,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,646,2022-04-10T11:46:37Z,2022-04-10T11:46:48Z,2022-04-10T11:46:48Z,CLOSED,False,10,0,1,https://github.com/foolzzz,Feature/test ci,5,[],https://github.com/frida/frida-gum/pull/646,https://github.com/foolzzz,1,https://github.com/frida/frida-gum/pull/646,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,648,2022-04-21T10:23:54Z,2022-04-21T18:02:49Z,2022-04-21T18:02:51Z,MERGED,True,100,11,4,https://github.com/oleavr,Improve the CI,5,[],https://github.com/frida/frida-gum/pull/648,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/648,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,650,2022-04-29T05:55:41Z,2022-04-29T09:32:20Z,2022-04-29T09:32:23Z,MERGED,True,59,19,2,https://github.com/oleavr,Fix regressions detected by CI,2,[],https://github.com/frida/frida-gum/pull/650,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/650,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,651,2022-04-29T09:53:05Z,2022-04-29T10:50:05Z,2022-04-29T10:50:09Z,MERGED,True,18,0,1,https://github.com/oleavr,Improve the CI,1,[],https://github.com/frida/frida-gum/pull/651,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/651,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,652,2022-04-29T22:10:04Z,2022-04-29T22:14:46Z,2022-04-29T22:14:49Z,MERGED,True,189,0,5,https://github.com/oleavr,Improve the CI,1,[],https://github.com/frida/frida-gum/pull/652,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/652,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,653,2022-05-06T12:20:01Z,2022-05-06T18:23:38Z,2022-05-06T18:23:40Z,MERGED,True,31,3,3,https://github.com/mrmacete,darwin-module: Handle special lib ordinal values,5,[],https://github.com/frida/frida-gum/pull/653,https://github.com/mrmacete,1,https://github.com/frida/frida-gum/pull/653,"In this way, if an import's module can't be resolved by direct ordinal index, the import address is resolved immediately using dlsym and the corresponding module path is resolved anyways at emit time (like it's always been) with a new fallback on dladdr when ModuleMap fails to resolve it.","In this way, if an import's module can't be resolved by direct ordinal index, the import address is resolved immediately using dlsym and the corresponding module path is resolved anyways at emit time (like it's always been) with a new fallback on dladdr when ModuleMap fails to resolve it.",True,{}
frida/frida-gum,https://github.com/frida/frida-gum,654,2022-05-09T09:03:53Z,2022-05-09T09:17:45Z,2022-05-09T09:17:48Z,MERGED,True,61,27,7,https://github.com/oleavr,Improve error-handling and fix vapi error declarations,2,[],https://github.com/frida/frida-gum/pull/654,https://github.com/oleavr,1,https://github.com/frida/frida-gum/pull/654,,,True,{}
frida/frida-gum,https://github.com/frida/frida-gum,657,2022-05-29T04:12:58Z,,2022-05-29T04:12:58Z,OPEN,False,73,0,3,https://github.com/regomne,gumjs: add quick cmd support,1,[],https://github.com/frida/frida-gum/pull/657,https://github.com/regomne,1,https://github.com/frida/frida-gum/pull/657,"The feature ""quick command"" in frida REPL, like:
[Local::a.exe ]-> .d 401000 10
           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF
00401000  55 8b ec 81 c4 fc fe ff ff 8b 45 0c 83 f8 01 75  U.........E....u

The quick cmd starts with '.' (same as nodejs REPL), and can be customized dynamically by the javascript loaded.
For example, register a new quick cmd 'u' in agent.js :
REPL.register_quick_cmd(
    'u', // the quick cmd
    1, // at least 1 argument
    function disasm(addr, inst_cnt = 10) { ... } // target function
)
Which can be used in REPL:
[Local::a.exe ]-> .u 401000
00401000    push ebp
00401001    mov ebp, esp
00401003    add esp, 0xfffffefc
00401009    mov eax, dword ptr [ebp + 0xc]
0040100C    cmp eax, 1
0040100F    jne 0x401028
00401011    push dword ptr [0x403864]
00401017    push 1
00401019    push 0x466
0040101E    push dword ptr [ebp + 8]","The feature ""quick command"" in frida REPL, like:
[Local::a.exe ]-> .d 401000 10
           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF
00401000  55 8b ec 81 c4 fc fe ff ff 8b 45 0c 83 f8 01 75  U.........E....u

The quick cmd starts with '.' (same as nodejs REPL), and can be customized dynamically by the javascript loaded.
For example, register a new quick cmd 'u' in agent.js :
REPL.register_quick_cmd(
    'u', // the quick cmd
    1, // at least 1 argument
    function disasm(addr, inst_cnt = 10) { ... } // target function
)
Which can be used in REPL:
[Local::a.exe ]-> .u 401000
00401000    push ebp
00401001    mov ebp, esp
00401003    add esp, 0xfffffefc
00401009    mov eax, dword ptr [ebp + 0xc]
0040100C    cmp eax, 1
0040100F    jne 0x401028
00401011    push dword ptr [0x403864]
00401017    push 1
00401019    push 0x466
0040101E    push dword ptr [ebp + 8]",True,{}
