luigirizzo/netmap,https://github.com/luigirizzo/netmap,145,2016-02-19T13:53:46Z,2016-02-19T15:54:28Z,2016-02-19T15:54:28Z,CLOSED,False,1,1,1,https://github.com/kogdenko,netmap_mem_global_finalize: fix bug triggered in error case,1,[],https://github.com/luigirizzo/netmap/pull/145,https://github.com/kogdenko,1,https://github.com/luigirizzo/netmap/pull/145,"If netmap_mem_global_config function failed and set nmd->lasterr
then nmd->active will be decremented.","If netmap_mem_global_config function failed and set nmd->lasterr
then nmd->active will be decremented.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,145,2016-02-19T13:53:46Z,2016-02-19T15:54:28Z,2016-02-19T15:54:28Z,CLOSED,False,1,1,1,https://github.com/kogdenko,netmap_mem_global_finalize: fix bug triggered in error case,1,[],https://github.com/luigirizzo/netmap/pull/145,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/145#issuecomment-186274424,"If netmap_mem_global_config function failed and set nmd->lasterr
then nmd->active will be decremented.","Thanks, merged. Will be published soon.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,159,2016-03-29T22:26:43Z,2017-01-04T17:49:28Z,2017-01-04T17:49:28Z,CLOSED,False,341,829,1,https://github.com/victordetoni,added cksum in update_address function,1,[],https://github.com/luigirizzo/netmap/pull/159,https://github.com/victordetoni,1,https://github.com/luigirizzo/netmap/pull/159,"hi, I couldn't use the original cksum functions in update_address function, they were generating inconsistent cksum. So I added two new cksum functions and update_address is working fine when you use random function to send pkts.
Follow the full request for your analyse.","hi, I couldn't use the original cksum functions in update_address function, they were generating inconsistent cksum. So I added two new cksum functions and update_address is working fine when you use random function to send pkts.
Follow the full request for your analyse.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,159,2016-03-29T22:26:43Z,2017-01-04T17:49:28Z,2017-01-04T17:49:28Z,CLOSED,False,341,829,1,https://github.com/victordetoni,added cksum in update_address function,1,[],https://github.com/luigirizzo/netmap/pull/159,https://github.com/sbarber1968,2,https://github.com/luigirizzo/netmap/pull/159#issuecomment-204448995,"hi, I couldn't use the original cksum functions in update_address function, they were generating inconsistent cksum. So I added two new cksum functions and update_address is working fine when you use random function to send pkts.
Follow the full request for your analyse.","Can you please ensure you add the
#ifndef NO_PCAP around the appropiate sections and remove the 'D' debug statements
Verified fix on my testbed",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,159,2016-03-29T22:26:43Z,2017-01-04T17:49:28Z,2017-01-04T17:49:28Z,CLOSED,False,341,829,1,https://github.com/victordetoni,added cksum in update_address function,1,[],https://github.com/luigirizzo/netmap/pull/159,https://github.com/victordetoni,3,https://github.com/luigirizzo/netmap/pull/159#issuecomment-206626860,"hi, I couldn't use the original cksum functions in update_address function, they were generating inconsistent cksum. So I added two new cksum functions and update_address is working fine when you use random function to send pkts.
Follow the full request for your analyse.","hi,
the patch only created checksum functions and related them on
update_address function.
On Fri, Apr 1, 2016 at 12:57 PM, sbarber1968 notifications@github.com
wrote:

Can you please ensure you add the
#ifndef NO_PCAP around the appropiate sections and remove the 'D' debug
statements
Verified fix on my testbed
â€”
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
#159 (comment)",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,164,2016-04-15T22:25:29Z,2016-05-23T19:09:36Z,2016-05-23T19:09:36Z,CLOSED,False,41,0,2,https://github.com/abunimeh,rx.py a simple python receiver,1,[],https://github.com/luigirizzo/netmap/pull/164,https://github.com/abunimeh,1,https://github.com/luigirizzo/netmap/pull/164,added an example UDP receiver using the NetmapDesc Python netmap class.,added an example UDP receiver using the NetmapDesc Python netmap class.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,164,2016-04-15T22:25:29Z,2016-05-23T19:09:36Z,2016-05-23T19:09:36Z,CLOSED,False,41,0,2,https://github.com/abunimeh,rx.py a simple python receiver,1,[],https://github.com/luigirizzo/netmap/pull/164,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/164#issuecomment-210780767,added an example UDP receiver using the NetmapDesc Python netmap class.,"Thanks, but this should be a little more generic.

Use argparse to get the interface name (I've done the same tx.py, still to be published), similarly to what is done by pktman.py.
Use argparse to get the port number to select
You assume there is no VLAN tag, so either you support it or you state it at program start/in the help.
The name rx.py is not convenient, since this is not the receive equivalent of tx.py. We may call this udprecv.py.

Other comments inline",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,164,2016-04-15T22:25:29Z,2016-05-23T19:09:36Z,2016-05-23T19:09:36Z,CLOSED,False,41,0,2,https://github.com/abunimeh,rx.py a simple python receiver,1,[],https://github.com/luigirizzo/netmap/pull/164,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/164#issuecomment-221065949,added an example UDP receiver using the NetmapDesc Python netmap class.,Closing for now,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,165,2016-04-16T03:13:30Z,2016-04-16T03:13:46Z,2016-04-16T03:13:46Z,CLOSED,False,9,4,2,https://github.com/Cloudxtreme,1,2,[],https://github.com/luigirizzo/netmap/pull/165,https://github.com/Cloudxtreme,1,https://github.com/luigirizzo/netmap/pull/165,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,179,2016-05-18T00:19:13Z,2016-05-23T14:17:53Z,2016-05-23T14:17:53Z,CLOSED,False,1,1,1,https://github.com/rbtcollins,"linux-pktgen.sh is actually bash, not posix sh",1,[],https://github.com/luigirizzo/netmap/pull/179,https://github.com/rbtcollins,1,https://github.com/luigirizzo/netmap/pull/179,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,179,2016-05-18T00:19:13Z,2016-05-23T14:17:53Z,2016-05-23T14:17:53Z,CLOSED,False,1,1,1,https://github.com/rbtcollins,"linux-pktgen.sh is actually bash, not posix sh",1,[],https://github.com/luigirizzo/netmap/pull/179,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/179#issuecomment-220993234,,"Applied internally, thanks",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,182,2016-05-23T06:10:46Z,2016-05-25T07:15:53Z,2016-05-25T07:15:53Z,CLOSED,False,17,1,2,https://github.com/rbtcollins,Fix #177: give drivers their requested headroom.,1,[],https://github.com/luigirizzo/netmap/pull/182,https://github.com/rbtcollins,1,https://github.com/luigirizzo/netmap/pull/182,"Some drivers, like hv_netvsc, require headroom to do their own
processing. While that is theoretically not required, at least in
Linux 4.2.0 and 4.4.0, the kernel panics if that headroom is not
available.","Some drivers, like hv_netvsc, require headroom to do their own
processing. While that is theoretically not required, at least in
Linux 4.2.0 and 4.4.0, the kernel panics if that headroom is not
available.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,182,2016-05-23T06:10:46Z,2016-05-25T07:15:53Z,2016-05-25T07:15:53Z,CLOSED,False,17,1,2,https://github.com/rbtcollins,Fix #177: give drivers their requested headroom.,1,[],https://github.com/luigirizzo/netmap/pull/182,https://github.com/rbtcollins,2,https://github.com/luigirizzo/netmap/pull/182#issuecomment-220895739,"Some drivers, like hv_netvsc, require headroom to do their own
processing. While that is theoretically not required, at least in
Linux 4.2.0 and 4.4.0, the kernel panics if that headroom is not
available.","I'm not at all sure this is correct - it no longer panic's the kernel, but I'm not seeing any traffic via taskmanager / tcpdump on another host (with pkg-gen -i eth0 -f ping -s  -d . I'm going to poke some more, but if you have a testbed for generic support with other drivers, you could probably check I haven't broken anything trivially.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,182,2016-05-23T06:10:46Z,2016-05-25T07:15:53Z,2016-05-25T07:15:53Z,CLOSED,False,17,1,2,https://github.com/rbtcollins,Fix #177: give drivers their requested headroom.,1,[],https://github.com/luigirizzo/netmap/pull/182,https://github.com/rbtcollins,3,https://github.com/luigirizzo/netmap/pull/182#issuecomment-221088010,"Some drivers, like hv_netvsc, require headroom to do their own
processing. While that is theoretically not required, at least in
Linux 4.2.0 and 4.4.0, the kernel panics if that headroom is not
available.",This works - I just wasn't setting the src and dst mac addresses and the hypervisor anti-spoofing stuff was kicking in.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,182,2016-05-23T06:10:46Z,2016-05-25T07:15:53Z,2016-05-25T07:15:53Z,CLOSED,False,17,1,2,https://github.com/rbtcollins,Fix #177: give drivers their requested headroom.,1,[],https://github.com/luigirizzo/netmap/pull/182,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/182#issuecomment-221492331,"Some drivers, like hv_netvsc, require headroom to do their own
processing. While that is theoretically not required, at least in
Linux 4.2.0 and 4.4.0, the kernel panics if that headroom is not
available.",Closing this since the other patch has been merged into master. Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,188,2016-05-28T18:59:35Z,2016-06-01T13:04:11Z,2016-06-01T13:04:11Z,CLOSED,False,2,0,1,https://github.com/rbtcollins,Also support setting the mode in linux pkg-gen.,1,[],https://github.com/luigirizzo/netmap/pull/188,https://github.com/rbtcollins,1,https://github.com/luigirizzo/netmap/pull/188,This was useful in my testing to reproduce the panic.,This was useful in my testing to reproduce the panic.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,188,2016-05-28T18:59:35Z,2016-06-01T13:04:11Z,2016-06-01T13:04:11Z,CLOSED,False,2,0,1,https://github.com/rbtcollins,Also support setting the mode in linux pkg-gen.,1,[],https://github.com/luigirizzo/netmap/pull/188,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/188#issuecomment-222985620,This was useful in my testing to reproduce the panic.,"Merged in our internal repo, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,190,2016-06-01T22:43:06Z,2016-06-02T10:20:22Z,2016-06-02T10:20:22Z,CLOSED,False,7,5,2,https://github.com/rbtcollins,Fixup argument parsing.,2,[],https://github.com/luigirizzo/netmap/pull/190,https://github.com/rbtcollins,1,https://github.com/luigirizzo/netmap/pull/190,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,190,2016-06-01T22:43:06Z,2016-06-02T10:20:22Z,2016-06-02T10:20:22Z,CLOSED,False,7,5,2,https://github.com/rbtcollins,Fixup argument parsing.,2,[],https://github.com/luigirizzo/netmap/pull/190,https://github.com/rbtcollins,2,https://github.com/luigirizzo/netmap/pull/190#issuecomment-223147014,,(NB: pushing up your master branch more often would help with PR's being accurate :)),True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,190,2016-06-01T22:43:06Z,2016-06-02T10:20:22Z,2016-06-02T10:20:22Z,CLOSED,False,7,5,2,https://github.com/rbtcollins,Fixup argument parsing.,2,[],https://github.com/luigirizzo/netmap/pull/190,https://github.com/rbtcollins,3,https://github.com/luigirizzo/netmap/pull/190#issuecomment-223251514,,Updated.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,190,2016-06-01T22:43:06Z,2016-06-02T10:20:22Z,2016-06-02T10:20:22Z,CLOSED,False,7,5,2,https://github.com/rbtcollins,Fixup argument parsing.,2,[],https://github.com/luigirizzo/netmap/pull/190,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/190#issuecomment-223252526,,merged,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,191,2016-06-03T09:57:08Z,2016-06-03T21:15:25Z,2016-06-03T21:15:25Z,CLOSED,False,2,2,1,https://github.com/rbtcollins,Generic adaptr release cleanups,2,[],https://github.com/luigirizzo/netmap/pull/191,https://github.com/rbtcollins,1,https://github.com/luigirizzo/netmap/pull/191,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,191,2016-06-03T09:57:08Z,2016-06-03T21:15:25Z,2016-06-03T21:15:25Z,CLOSED,False,2,2,1,https://github.com/rbtcollins,Generic adaptr release cleanups,2,[],https://github.com/luigirizzo/netmap/pull/191,https://github.com/rbtcollins,2,https://github.com/luigirizzo/netmap/pull/191#issuecomment-223540108,,"Please review the generic_netmap_dtor change closely; I'm fairly sure /something/ like that is needed, but it doesn't solve my problem itself, and I don't know the surrounding logic well enough yet to know if this is sufficient - or correct - e.g. should we set na->ifp unconditionally still, or should it be guarded by the prev_na check too?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,191,2016-06-03T09:57:08Z,2016-06-03T21:15:25Z,2016-06-03T21:15:25Z,CLOSED,False,2,2,1,https://github.com/rbtcollins,Generic adaptr release cleanups,2,[],https://github.com/luigirizzo/netmap/pull/191,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/191#issuecomment-223592581,,"I will try to reproduce the bug now, but I can tell for sure that the inverted check you propose is wrong. The netmap_adapter_put(prev_na) matches the one in generic_netmap_attach(), and it is needed.
I'm pretty sure this is not connected to our bug. The problem is not that we do or do not release the netmap adapter struct.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,191,2016-06-03T09:57:08Z,2016-06-03T21:15:25Z,2016-06-03T21:15:25Z,CLOSED,False,2,2,1,https://github.com/rbtcollins,Generic adaptr release cleanups,2,[],https://github.com/luigirizzo/netmap/pull/191,https://github.com/rbtcollins,4,https://github.com/luigirizzo/netmap/pull/191#issuecomment-223696386,,"Ok, I'l close this, thanks for the review.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,197,2016-06-08T22:14:26Z,2016-06-19T11:01:28Z,2016-06-19T11:01:28Z,CLOSED,False,34,5,4,https://github.com/tootoonchian,unset the zombie flag on NETDEV_REGISTER (linux) and ifnet_arrival_event (freebsd),2,[],https://github.com/luigirizzo/netmap/pull/197,https://github.com/tootoonchian,1,https://github.com/luigirizzo/netmap/pull/197,"Since commit d8d2569, netmap did not work with LXC containers. That is because, to move the device to a new namespace, it is unregistered first. Unregistering a netmap interface leaves it in a zombie state, which renders it unusable.
This patch adds listeners for the NETDEV_REGISTER (linux) and ifnet_arrival_event (freebsd) events and unsets the zombie flag in their handlers if needed.
Please note, I haven't tried the FreeBSD patch. Just tried to mirror what I did for the Linux one.","Since commit d8d2569, netmap did not work with LXC containers. That is because, to move the device to a new namespace, it is unregistered first. Unregistering a netmap interface leaves it in a zombie state, which renders it unusable.
This patch adds listeners for the NETDEV_REGISTER (linux) and ifnet_arrival_event (freebsd) events and unsets the zombie flag in their handlers if needed.
Please note, I haven't tried the FreeBSD patch. Just tried to mirror what I did for the Linux one.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,197,2016-06-08T22:14:26Z,2016-06-19T11:01:28Z,2016-06-19T11:01:28Z,CLOSED,False,34,5,4,https://github.com/tootoonchian,unset the zombie flag on NETDEV_REGISTER (linux) and ifnet_arrival_event (freebsd),2,[],https://github.com/luigirizzo/netmap/pull/197,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/197#issuecomment-226533395,"Since commit d8d2569, netmap did not work with LXC containers. That is because, to move the device to a new namespace, it is unregistered first. Unregistering a netmap interface leaves it in a zombie state, which renders it unusable.
This patch adds listeners for the NETDEV_REGISTER (linux) and ifnet_arrival_event (freebsd) events and unsets the zombie flag in their handlers if needed.
Please note, I haven't tried the FreeBSD patch. Just tried to mirror what I did for the Linux one.","This looks good, thanks! We are going to test it and then merge.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,197,2016-06-08T22:14:26Z,2016-06-19T11:01:28Z,2016-06-19T11:01:28Z,CLOSED,False,34,5,4,https://github.com/tootoonchian,unset the zombie flag on NETDEV_REGISTER (linux) and ifnet_arrival_event (freebsd),2,[],https://github.com/luigirizzo/netmap/pull/197,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/197#issuecomment-226991255,"Since commit d8d2569, netmap did not work with LXC containers. That is because, to move the device to a new namespace, it is unregistered first. Unregistering a netmap interface leaves it in a zombie state, which renders it unusable.
This patch adds listeners for the NETDEV_REGISTER (linux) and ifnet_arrival_event (freebsd) events and unsets the zombie flag in their handlers if needed.
Please note, I haven't tried the FreeBSD patch. Just tried to mirror what I did for the Linux one.","Merged, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,198,2016-06-09T10:36:34Z,2016-06-14T09:35:58Z,2016-06-14T09:35:58Z,CLOSED,False,6,1,1,https://github.com/rbtcollins,Fix #196 - document tcpdump behaviour with generic adapters.,1,[],https://github.com/luigirizzo/netmap/pull/198,https://github.com/rbtcollins,1,https://github.com/luigirizzo/netmap/pull/198,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,198,2016-06-09T10:36:34Z,2016-06-14T09:35:58Z,2016-06-14T09:35:58Z,CLOSED,False,6,1,1,https://github.com/rbtcollins,Fix #196 - document tcpdump behaviour with generic adapters.,1,[],https://github.com/luigirizzo/netmap/pull/198,https://github.com/rbtcollins,2,https://github.com/luigirizzo/netmap/pull/198#issuecomment-225415530,,"Ok, so will see -> could see; add some prose about artifact.
W.r.t. the forwarded sentence - I understand the confusion, I would like to preserve the expansion of what is otherwise only implied - that you can dump the same packet twice if the netmap application chooses to send it unaltered to the host ring. Would you be ok with that if I rephrase to avoid 'forwarded' ?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,198,2016-06-09T10:36:34Z,2016-06-14T09:35:58Z,2016-06-14T09:35:58Z,CLOSED,False,6,1,1,https://github.com/rbtcollins,Fix #196 - document tcpdump behaviour with generic adapters.,1,[],https://github.com/luigirizzo/netmap/pull/198,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/198#issuecomment-225417323,,"I'm not sure it's a good idea, but you could try to reformulate with ""If"", not ""when"".
Let's also replace ""program using taps"" with ""packets sniffer programs"".",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,198,2016-06-09T10:36:34Z,2016-06-14T09:35:58Z,2016-06-14T09:35:58Z,CLOSED,False,6,1,1,https://github.com/rbtcollins,Fix #196 - document tcpdump behaviour with generic adapters.,1,[],https://github.com/luigirizzo/netmap/pull/198,https://github.com/rbtcollins,4,https://github.com/luigirizzo/netmap/pull/198#issuecomment-225748722,,"reformulated, what do you think?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,198,2016-06-09T10:36:34Z,2016-06-14T09:35:58Z,2016-06-14T09:35:58Z,CLOSED,False,6,1,1,https://github.com/rbtcollins,Fix #196 - document tcpdump behaviour with generic adapters.,1,[],https://github.com/luigirizzo/netmap/pull/198,https://github.com/vmaffione,5,https://github.com/luigirizzo/netmap/pull/198#issuecomment-225829703,,"slightly rearranged and merged, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,203,2016-08-04T06:27:10Z,2016-08-04T06:58:31Z,2016-08-04T06:58:31Z,CLOSED,False,1,0,1,https://github.com/JaseFace,Fix possible memory leak if netmap_get_na fails,1,[],https://github.com/luigirizzo/netmap/pull/203,https://github.com/JaseFace,1,https://github.com/luigirizzo/netmap/pull/203,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,203,2016-08-04T06:27:10Z,2016-08-04T06:58:31Z,2016-08-04T06:58:31Z,CLOSED,False,1,0,1,https://github.com/JaseFace,Fix possible memory leak if netmap_get_na fails,1,[],https://github.com/luigirizzo/netmap/pull/203,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/203#issuecomment-237469149,,"Thanks, merged in our internal server. Will be published soon.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,209,2016-08-16T05:07:36Z,2016-08-16T05:08:36Z,2016-08-16T05:08:36Z,CLOSED,False,21,12,8,https://github.com/fengmushu,fixup compile inc error.,1,[],https://github.com/luigirizzo/netmap/pull/209,https://github.com/fengmushu,1,https://github.com/luigirizzo/netmap/pull/209,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,211,2016-08-19T14:16:26Z,2016-08-21T07:35:49Z,2016-08-21T07:35:49Z,CLOSED,False,14,11,1,https://github.com/ocochard,Switch number of iteration to an uint64_t,1,[],https://github.com/luigirizzo/netmap/pull/211,https://github.com/ocochard,1,https://github.com/luigirizzo/netmap/pull/211,"Current packets counter should be at minimum an u_int and not an int.
On 10/40Gbps links or bigger we need to generate large number of packets, and the current code generate a Segmentation fault, then switch this variable to uint64_t.
Before this patch:
[root@hp]/tmp# ./pkt-gen -i ncxl0 -f tx -n 80000000000
170.336326 main [2235] interface is ncxl0
170.336341 main [2355] running on 1 cpus (have 8)
170.336391 extract_ip_range [364] range is 10.0.0.1:0 to 10.0.0.1:0
170.336398 extract_ip_range [364] range is 10.1.0.1:0 to 10.1.0.1:0
170.351471 main [2456] mapped 334980KB at 0x801800000
170.357651 get_vnet_hdr_len [792] Unable to get virtio-net header length
Sending on netmap:ncxl0: 2 queues, 1 threads and 1 cpus.
10.0.0.1 -> 10.1.0.1 (00:00:00:00:00:00 -> ff:ff:ff:ff:ff:ff)
170.357667 main [2553] Sending 512 packets every  0.000000000 s
170.357669 main [2555] Wait 2 secs for phy reset
172.463645 main [2557] Ready...
172.463711 sender_body [1174] start, fd 3 main_fd 3
Segmentation fault","Current packets counter should be at minimum an u_int and not an int.
On 10/40Gbps links or bigger we need to generate large number of packets, and the current code generate a Segmentation fault, then switch this variable to uint64_t.
Before this patch:
[root@hp]/tmp# ./pkt-gen -i ncxl0 -f tx -n 80000000000
170.336326 main [2235] interface is ncxl0
170.336341 main [2355] running on 1 cpus (have 8)
170.336391 extract_ip_range [364] range is 10.0.0.1:0 to 10.0.0.1:0
170.336398 extract_ip_range [364] range is 10.1.0.1:0 to 10.1.0.1:0
170.351471 main [2456] mapped 334980KB at 0x801800000
170.357651 get_vnet_hdr_len [792] Unable to get virtio-net header length
Sending on netmap:ncxl0: 2 queues, 1 threads and 1 cpus.
10.0.0.1 -> 10.1.0.1 (00:00:00:00:00:00 -> ff:ff:ff:ff:ff:ff)
170.357667 main [2553] Sending 512 packets every  0.000000000 s
170.357669 main [2555] Wait 2 secs for phy reset
172.463645 main [2557] Ready...
172.463711 sender_body [1174] start, fd 3 main_fd 3
Segmentation fault",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,211,2016-08-19T14:16:26Z,2016-08-21T07:35:49Z,2016-08-21T07:35:49Z,CLOSED,False,14,11,1,https://github.com/ocochard,Switch number of iteration to an uint64_t,1,[],https://github.com/luigirizzo/netmap/pull/211,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/211#issuecomment-241243448,"Current packets counter should be at minimum an u_int and not an int.
On 10/40Gbps links or bigger we need to generate large number of packets, and the current code generate a Segmentation fault, then switch this variable to uint64_t.
Before this patch:
[root@hp]/tmp# ./pkt-gen -i ncxl0 -f tx -n 80000000000
170.336326 main [2235] interface is ncxl0
170.336341 main [2355] running on 1 cpus (have 8)
170.336391 extract_ip_range [364] range is 10.0.0.1:0 to 10.0.0.1:0
170.336398 extract_ip_range [364] range is 10.1.0.1:0 to 10.1.0.1:0
170.351471 main [2456] mapped 334980KB at 0x801800000
170.357651 get_vnet_hdr_len [792] Unable to get virtio-net header length
Sending on netmap:ncxl0: 2 queues, 1 threads and 1 cpus.
10.0.0.1 -> 10.1.0.1 (00:00:00:00:00:00 -> ff:ff:ff:ff:ff:ff)
170.357667 main [2553] Sending 512 packets every  0.000000000 s
170.357669 main [2555] Wait 2 secs for phy reset
172.463645 main [2557] Ready...
172.463711 sender_body [1174] start, fd 3 main_fd 3
Segmentation fault","Hi,
Thanks, merged in our internal repo, will be published soon.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,225,2016-09-23T07:19:51Z,2016-09-23T22:14:29Z,2016-09-23T22:14:29Z,CLOSED,False,7,2,1,https://github.com/alandtsang,add get_ethtool_ops_ext in nm_os_generic_find_num_queues function,1,[],https://github.com/luigirizzo/netmap/pull/225,https://github.com/alandtsang,1,https://github.com/luigirizzo/netmap/pull/225,"In the linux-2.6.32 kernel, the struct ethtool_ops has no get_channels function, get_channels is in another ethtool extension struct ethtool_ops_ext.","In the linux-2.6.32 kernel, the struct ethtool_ops has no get_channels function, get_channels is in another ethtool extension struct ethtool_ops_ext.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,225,2016-09-23T07:19:51Z,2016-09-23T22:14:29Z,2016-09-23T22:14:29Z,CLOSED,False,7,2,1,https://github.com/alandtsang,add get_ethtool_ops_ext in nm_os_generic_find_num_queues function,1,[],https://github.com/luigirizzo/netmap/pull/225,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/225#issuecomment-249314978,"In the linux-2.6.32 kernel, the struct ethtool_ops has no get_channels function, get_channels is in another ethtool extension struct ethtool_ops_ext.",This breaks the compilation of all the netmap versions,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,226,2016-09-23T20:29:00Z,2016-09-27T13:30:57Z,2016-09-27T13:30:57Z,CLOSED,False,879,21076,139,https://github.com/alexhebra,Merge last netmap github code to FreeBSD tree: FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3,51,[],https://github.com/luigirizzo/netmap/pull/226,https://github.com/alexhebra,1,https://github.com/luigirizzo/netmap/pull/226,"Hi,
Here is the patchs for both FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3.
Thanks.
FreeBSD-10.3-STABLE-r305972M.diff.zip
FreeBSD-11.0-RC3.diff.zip","Hi,
Here is the patchs for both FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3.
Thanks.
FreeBSD-10.3-STABLE-r305972M.diff.zip
FreeBSD-11.0-RC3.diff.zip",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,226,2016-09-23T20:29:00Z,2016-09-27T13:30:57Z,2016-09-27T13:30:57Z,CLOSED,False,879,21076,139,https://github.com/alexhebra,Merge last netmap github code to FreeBSD tree: FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3,51,[],https://github.com/luigirizzo/netmap/pull/226,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/226#issuecomment-249357067,"Hi,
Here is the patchs for both FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3.
Thanks.
FreeBSD-10.3-STABLE-r305972M.diff.zip
FreeBSD-11.0-RC3.diff.zip","Hi,
The pull request does not contain your code, but commits that are already in the repository, so we cannot use it.
Maybe there has been a bit of misunderstanding (sorry for that), because I see that the patches you provided are (obviouslly huge patches) based on what it is currently on the FreeBSD tree (10.3 or 11). Since we can easily generate these kind of patches by ourselves, they are not particularly useful to us.
What it would make sense to accept here is just patches against the netmap version on the current
master branch of this github repository. The purpose of these patches (if any) would be to fix compilation problems and bugs that show up in FreeBSD-CURRENT, so that we can later update the FreeBSD-CURRENT code in the SVN repository.
In other words, once we make sure that the master branch compiles fine on FreeBSD-CURRENT, what we really need is volunteers testing this code on FreeBSD-CURRENT, in the various configurations allowed by netmap:

netmap on physical NICs with native netmap support (i.e. ix, igb, etc)
netmap on physical NICs or software devices (e.g TAPs, bridges interfaces, etc), to test the generic/emulated netmap adapter
netmap pipes
netmap monitors
netmap passthrough in bhyve (if_ptnet).

Your help is welcome here!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,226,2016-09-23T20:29:00Z,2016-09-27T13:30:57Z,2016-09-27T13:30:57Z,CLOSED,False,879,21076,139,https://github.com/alexhebra,Merge last netmap github code to FreeBSD tree: FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3,51,[],https://github.com/luigirizzo/netmap/pull/226,https://github.com/alexhebra,3,https://github.com/luigirizzo/netmap/pull/226#issuecomment-249583710,"Hi,
Here is the patchs for both FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3.
Thanks.
FreeBSD-10.3-STABLE-r305972M.diff.zip
FreeBSD-11.0-RC3.diff.zip","Ok, sorry for that. FreeBSD netmap code is too old (more than one year ago). What i was trying to help was generating a patch syncing last github code and FreeBSD source tree. So if you are a FreeBSD committer you would use this patch to update there. As Luigi sent to maillist freebsd-net@ asking for help, i thought it would be useful.  Would you like i send a patch through freebsd website (send-pr)?
About the tests needed, it can be done only on FreeBSD-Current? or can i test it on FreeBSD-11 too?
Thanks.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,226,2016-09-23T20:29:00Z,2016-09-27T13:30:57Z,2016-09-27T13:30:57Z,CLOSED,False,879,21076,139,https://github.com/alexhebra,Merge last netmap github code to FreeBSD tree: FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3,51,[],https://github.com/luigirizzo/netmap/pull/226,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/226#issuecomment-249816330,"Hi,
Here is the patchs for both FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3.
Thanks.
FreeBSD-10.3-STABLE-r305972M.diff.zip
FreeBSD-11.0-RC3.diff.zip","We know, the code in FreeBSD is very old. I'm not a commiter, but Luigi is.
Thanks for the patch, but what Luigi meant was to help to make sure netmap is working on FreeBSD Current, so that it can be merged there.
This task requires two steps:

Check that it compiles on FreeBSD current. This step should be completed, as you confirmed the compilation is working. As a consequence, we don't need any patch. It is easy for us to generate the patch, and we will do that when step 2 below is completed.
Check that the functionalities I listed in my previous mail are working. Here is where you can help if you wish.

Since we are going to merge the code in FreeBSD current it is not so much important to test the code in FreeBSD-11. Testing it in FreeBSD current is what it really counts.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,226,2016-09-23T20:29:00Z,2016-09-27T13:30:57Z,2016-09-27T13:30:57Z,CLOSED,False,879,21076,139,https://github.com/alexhebra,Merge last netmap github code to FreeBSD tree: FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3,51,[],https://github.com/luigirizzo/netmap/pull/226,https://github.com/alexhebra,5,https://github.com/luigirizzo/netmap/pull/226#issuecomment-249857812,"Hi,
Here is the patchs for both FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3.
Thanks.
FreeBSD-10.3-STABLE-r305972M.diff.zip
FreeBSD-11.0-RC3.diff.zip","Ok i'll help with step 2. I'll update my system to FreeBSD-CURRENT and let you know the results, but i gonna need some days. :)",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,226,2016-09-23T20:29:00Z,2016-09-27T13:30:57Z,2016-09-27T13:30:57Z,CLOSED,False,879,21076,139,https://github.com/alexhebra,Merge last netmap github code to FreeBSD tree: FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3,51,[],https://github.com/luigirizzo/netmap/pull/226,https://github.com/vmaffione,6,https://github.com/luigirizzo/netmap/pull/226#issuecomment-249865274,"Hi,
Here is the patchs for both FreeBSD 10.3-STABLE-r305972M and FreeBSD-11-RC3.
Thanks.
FreeBSD-10.3-STABLE-r305972M.diff.zip
FreeBSD-11.0-RC3.diff.zip","Sure, take your time. Thanks.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,233,2016-10-08T14:38:12Z,2016-10-08T15:38:46Z,2016-10-09T10:01:10Z,CLOSED,False,2,0,1,https://github.com/alandtsang,Fix memory leak,1,[],https://github.com/luigirizzo/netmap/pull/233,https://github.com/alandtsang,1,https://github.com/luigirizzo/netmap/pull/233,Fix memory leak in function sender_body and main_thread,Fix memory leak in function sender_body and main_thread,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,233,2016-10-08T14:38:12Z,2016-10-08T15:38:46Z,2016-10-09T10:01:10Z,CLOSED,False,2,0,1,https://github.com/alandtsang,Fix memory leak,1,[],https://github.com/luigirizzo/netmap/pull/233,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/233#issuecomment-252431072,Fix memory leak in function sender_body and main_thread,"Problems fixed in the correct way, it will be published in a while",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,245,2016-10-26T08:46:55Z,2016-10-26T10:25:35Z,2016-10-26T10:25:35Z,CLOSED,False,1,1,1,https://github.com/dibyvk,netmap: Rename the _conut to _recount,1,[],https://github.com/luigirizzo/netmap/pull/245,https://github.com/dibyvk,1,https://github.com/luigirizzo/netmap/pull/245,"Rename the _count into _refcount since Adjusting the member of
struct page in the kernel v4.8.
Signed-off-by: Jianchuan Wang jianchuan.wang@windriver.com","Rename the _count into _refcount since Adjusting the member of
struct page in the kernel v4.8.
Signed-off-by: Jianchuan Wang jianchuan.wang@windriver.com",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,245,2016-10-26T08:46:55Z,2016-10-26T10:25:35Z,2016-10-26T10:25:35Z,CLOSED,False,1,1,1,https://github.com/dibyvk,netmap: Rename the _conut to _recount,1,[],https://github.com/luigirizzo/netmap/pull/245,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/245#issuecomment-256292021,"Rename the _count into _refcount since Adjusting the member of
struct page in the kernel v4.8.
Signed-off-by: Jianchuan Wang jianchuan.wang@windriver.com","Thanks, but this will break compilation on older kernels. The proper solution is a compilation test in the configure script. There is one on the way, probably available in the next push.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,252,2016-11-20T23:16:45Z,2017-10-20T10:14:42Z,2017-10-20T10:14:42Z,CLOSED,False,31,17,3,https://github.com/ocochard,Add an option for disabling normalized number: non-fixed unit is complex to parse,4,[],https://github.com/luigirizzo/netmap/pull/252,https://github.com/ocochard,1,https://github.com/luigirizzo/netmap/pull/252,"The new behavior of pkt-gen that automatically normalize unit (by converting to Kpps, Mpps, Gpps, Tpps) is a good idea for a human reader, but a bad one for my automated benchmark tests:
It's lot's more difficult to parse pkt-gen value now.
Then here is an option for disabling this unit normalization.","The new behavior of pkt-gen that automatically normalize unit (by converting to Kpps, Mpps, Gpps, Tpps) is a good idea for a human reader, but a bad one for my automated benchmark tests:
It's lot's more difficult to parse pkt-gen value now.
Then here is an option for disabling this unit normalization.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,252,2016-11-20T23:16:45Z,2017-10-20T10:14:42Z,2017-10-20T10:14:42Z,CLOSED,False,31,17,3,https://github.com/ocochard,Add an option for disabling normalized number: non-fixed unit is complex to parse,4,[],https://github.com/luigirizzo/netmap/pull/252,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/252#issuecomment-261943898,"The new behavior of pkt-gen that automatically normalize unit (by converting to Kpps, Mpps, Gpps, Tpps) is a good idea for a human reader, but a bad one for my automated benchmark tests:
It's lot's more difficult to parse pkt-gen value now.
Then here is an option for disabling this unit normalization.","Thanks, but I think that there is a better way to support this, without the replication of the printf code.
We can pass ""normalize"" as an argument to the norm() function and decide what to do inside there. Could you try this approach?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,252,2016-11-20T23:16:45Z,2017-10-20T10:14:42Z,2017-10-20T10:14:42Z,CLOSED,False,31,17,3,https://github.com/ocochard,Add an option for disabling normalized number: non-fixed unit is complex to parse,4,[],https://github.com/luigirizzo/netmap/pull/252,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/252#issuecomment-338166407,"The new behavior of pkt-gen that automatically normalize unit (by converting to Kpps, Mpps, Gpps, Tpps) is a good idea for a human reader, but a bad one for my automated benchmark tests:
It's lot's more difficult to parse pkt-gen value now.
Then here is an option for disabling this unit normalization.","I think we can close this, since equivalent functionality has already been merged.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,278,2017-02-23T14:49:44Z,2017-02-23T16:48:47Z,2017-02-23T16:48:47Z,CLOSED,False,1,2,1,https://github.com/funman,pkt-gen: do not use sizeof(char*) with strncmp,1,[],https://github.com/luigirizzo/netmap/pull/278,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/278,ifa_name is a char* on Linux and FreeBSD,ifa_name is a char* on Linux and FreeBSD,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,278,2017-02-23T14:49:44Z,2017-02-23T16:48:47Z,2017-02-23T16:48:47Z,CLOSED,False,1,2,1,https://github.com/funman,pkt-gen: do not use sizeof(char*) with strncmp,1,[],https://github.com/luigirizzo/netmap/pull/278,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/278#issuecomment-282015290,ifa_name is a char* on Linux and FreeBSD,"Good catch, thanks. To stay safe, would you mind changing the code so that we still use strncmp(), but passing IFNAMSIZ as a third argument?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,278,2017-02-23T14:49:44Z,2017-02-23T16:48:47Z,2017-02-23T16:48:47Z,CLOSED,False,1,2,1,https://github.com/funman,pkt-gen: do not use sizeof(char*) with strncmp,1,[],https://github.com/luigirizzo/netmap/pull/278,https://github.com/funman,3,https://github.com/luigirizzo/netmap/pull/278#issuecomment-282044021,ifa_name is a char* on Linux and FreeBSD,I did just that,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,278,2017-02-23T14:49:44Z,2017-02-23T16:48:47Z,2017-02-23T16:48:47Z,CLOSED,False,1,2,1,https://github.com/funman,pkt-gen: do not use sizeof(char*) with strncmp,1,[],https://github.com/luigirizzo/netmap/pull/278,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/278#issuecomment-282049668,ifa_name is a char* on Linux and FreeBSD,"applied, thanks",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,280,2017-02-28T14:19:50Z,2017-03-03T15:32:19Z,2017-03-03T15:32:19Z,CLOSED,False,1,1,1,https://github.com/funman,bump ring pool size,1,[],https://github.com/luigirizzo/netmap/pull/280,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/280,"sizeof(struct netmap_slot) is 4+2+2+8 == 16
Assuming PAGE_SIZE is 4096, 17*4096 is enough to allocate
4096 slot entries + sizeof(struct netmap_ring)
This makes it possible to use 4096 TX buffers with the ixgbe driver","sizeof(struct netmap_slot) is 4+2+2+8 == 16
Assuming PAGE_SIZE is 4096, 17*4096 is enough to allocate
4096 slot entries + sizeof(struct netmap_ring)
This makes it possible to use 4096 TX buffers with the ixgbe driver",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,280,2017-02-28T14:19:50Z,2017-03-03T15:32:19Z,2017-03-03T15:32:19Z,CLOSED,False,1,1,1,https://github.com/funman,bump ring pool size,1,[],https://github.com/luigirizzo/netmap/pull/280,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/280#issuecomment-283603948,"sizeof(struct netmap_slot) is 4+2+2+8 == 16
Assuming PAGE_SIZE is 4096, 17*4096 is enough to allocate
4096 slot entries + sizeof(struct netmap_ring)
This makes it possible to use 4096 TX buffers with the ixgbe driver",Why don't you just increase the ring_size via the dev.netmap.ring_size sysctl (FreeBSD) or /sys/module/netmap/parameters/ring_size (linux)?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,280,2017-02-28T14:19:50Z,2017-03-03T15:32:19Z,2017-03-03T15:32:19Z,CLOSED,False,1,1,1,https://github.com/funman,bump ring pool size,1,[],https://github.com/luigirizzo/netmap/pull/280,https://github.com/funman,3,https://github.com/luigirizzo/netmap/pull/280#issuecomment-283613994,"sizeof(struct netmap_slot) is 4+2+2+8 == 16
Assuming PAGE_SIZE is 4096, 17*4096 is enough to allocate
4096 slot entries + sizeof(struct netmap_ring)
This makes it possible to use 4096 TX buffers with the ixgbe driver","I need to try that, I found the size definition by going backwards from the kernel error message.
Perhaps I should replace that change by documenting ring_size ;)",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,280,2017-02-28T14:19:50Z,2017-03-03T15:32:19Z,2017-03-03T15:32:19Z,CLOSED,False,1,1,1,https://github.com/funman,bump ring pool size,1,[],https://github.com/luigirizzo/netmap/pull/280,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/280#issuecomment-283615046,"sizeof(struct netmap_slot) is 4+2+2+8 == 16
Assuming PAGE_SIZE is 4096, 17*4096 is enough to allocate
4096 slot entries + sizeof(struct netmap_ring)
This makes it possible to use 4096 TX buffers with the ixgbe driver","Yes, indeed documentation can be improved.
Here is an fragment of a ML discussion on freebsd-net, if useful:
""
[...]
In any case, buf_size, ring_size and if_size are the sizes in bytes of each buffer, ring and netmap_if (control data structure), respectively.
So the maximum amount of slots for each ring is (ring_size-sizeof(struct netmap_ring))/16, as 16 is the size in bytes of struct netmap_slot.
On the other side, buf_num, ring_num and if_num are the total number of buffers, rings and netmap_if objects in each netmap memory area (aka ""allocator"").
By default there is a single memory area used by all the hardware NICs and a separate memory area for each VALE port.
This is already configurable, however.
[...]
""",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,280,2017-02-28T14:19:50Z,2017-03-03T15:32:19Z,2017-03-03T15:32:19Z,CLOSED,False,1,1,1,https://github.com/funman,bump ring pool size,1,[],https://github.com/luigirizzo/netmap/pull/280,https://github.com/funman,5,https://github.com/luigirizzo/netmap/pull/280#issuecomment-283984825,"sizeof(struct netmap_slot) is 4+2+2+8 == 16
Assuming PAGE_SIZE is 4096, 17*4096 is enough to allocate
4096 slot entries + sizeof(struct netmap_ring)
This makes it possible to use 4096 TX buffers with the ixgbe driver",Closing due to ring_size already doing this job,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,284,2017-03-17T01:56:38Z,2017-03-19T10:44:19Z,2017-03-19T10:44:19Z,CLOSED,False,6,3,1,https://github.com/sethhall,Fix 2-tuple fallback hashing in lb.,1,[],https://github.com/luigirizzo/netmap/pull/284,https://github.com/sethhall,1,https://github.com/luigirizzo/netmap/pull/284,Apparently I broke the fallback (non tcp/udp) hashing mechism for IPv4 for some reason.  This fixes it.,Apparently I broke the fallback (non tcp/udp) hashing mechism for IPv4 for some reason.  This fixes it.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,284,2017-03-17T01:56:38Z,2017-03-19T10:44:19Z,2017-03-19T10:44:19Z,CLOSED,False,6,3,1,https://github.com/sethhall,Fix 2-tuple fallback hashing in lb.,1,[],https://github.com/luigirizzo/netmap/pull/284,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/284#issuecomment-287607903,Apparently I broke the fallback (non tcp/udp) hashing mechism for IPv4 for some reason.  This fixes it.,merged internally and now published. Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,285,2017-03-19T15:55:28Z,2017-07-10T13:43:40Z,2017-07-10T13:43:40Z,MERGED,True,1,1,1,https://github.com/sethhall,Updates nmreplay usage display to match functionality.,1,[],https://github.com/luigirizzo/netmap/pull/285,https://github.com/sethhall,1,https://github.com/luigirizzo/netmap/pull/285,"""-i"" is only accepted a single time and the ""-f"" flag to provide
a pcap file wasn't given at all in the usage output.","""-i"" is only accepted a single time and the ""-f"" flag to provide
a pcap file wasn't given at all in the usage output.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,288,2017-04-02T22:34:39Z,2017-04-10T10:41:31Z,2017-04-10T10:41:31Z,CLOSED,False,7,1,1,https://github.com/slobodantomic,Fixed kernel crash when running e1000e NIC in NR_RX_RINGS_ONLY or NR_TX_RINGS_ONLY mode.,1,[],https://github.com/luigirizzo/netmap/pull/288,https://github.com/slobodantomic,1,https://github.com/luigirizzo/netmap/pull/288,Fix for issue #287,Fix for issue #287,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,288,2017-04-02T22:34:39Z,2017-04-10T10:41:31Z,2017-04-10T10:41:31Z,CLOSED,False,7,1,1,https://github.com/slobodantomic,Fixed kernel crash when running e1000e NIC in NR_RX_RINGS_ONLY or NR_TX_RINGS_ONLY mode.,1,[],https://github.com/luigirizzo/netmap/pull/288,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/288#issuecomment-291066771,Fix for issue #287,"Hi,
Good catch, thanks.
Some comments inline.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,288,2017-04-02T22:34:39Z,2017-04-10T10:41:31Z,2017-04-10T10:41:31Z,CLOSED,False,7,1,1,https://github.com/slobodantomic,Fixed kernel crash when running e1000e NIC in NR_RX_RINGS_ONLY or NR_TX_RINGS_ONLY mode.,1,[],https://github.com/luigirizzo/netmap/pull/288,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/288#issuecomment-292913798,Fix for issue #287,Separate fix provided.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,298,2017-04-16T08:27:01Z,2017-04-16T11:13:30Z,2017-04-16T11:13:39Z,MERGED,True,1,1,1,https://github.com/gspivey,Fix typo in Linux Configure Script,1,[],https://github.com/luigirizzo/netmap/pull/298,https://github.com/gspivey,1,https://github.com/luigirizzo/netmap/pull/298,"Linux Configure script has a typo in the help text.
""destir"" should be ""destdir""","Linux Configure script has a typo in the help text.
""destir"" should be ""destdir""",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,298,2017-04-16T08:27:01Z,2017-04-16T11:13:30Z,2017-04-16T11:13:39Z,MERGED,True,1,1,1,https://github.com/gspivey,Fix typo in Linux Configure Script,1,[],https://github.com/luigirizzo/netmap/pull/298,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/298#issuecomment-294346364,"Linux Configure script has a typo in the help text.
""destir"" should be ""destdir""",Thanks,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,304,2017-05-15T08:45:37Z,2017-05-15T08:56:47Z,2017-05-15T08:56:47Z,CLOSED,False,10,5,4,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/304,https://github.com/spinenkoia,1,https://github.com/luigirizzo/netmap/pull/304,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/spinenkoia,1,https://github.com/luigirizzo/netmap/pull/305,#303,#303,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/305#issuecomment-301425887,#303,"A patch in this direction is very welcome, thanks.
But this is not the approach we are looking for, we don't want to inherit Linux KERN_** macros.
We would like to have two macros, one to print errors and one to print info, e.g.,
  nm_prerr(""error message %d"", xxx)
  nm_prinf(""info message %d"", xxx)

On Linux nm_prerr maps to printk(KERN_ERR) and nm_prinf maps to printk(KERN_INFO).
On FreeBSD both can map to printf().
Could you please align your patch in this direction?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/spinenkoia,3,https://github.com/luigirizzo/netmap/pull/305#issuecomment-301429698,#303,"Yes OK.
Did I understand correctly that instead of a single function, do you need to use nm_prerr and nm_printf?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/305#issuecomment-301432349,#303,"Yes, netmap code will use one function or the other depending on the specific needs.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/spinenkoia,5,https://github.com/luigirizzo/netmap/pull/305#issuecomment-301675948,#303,"@vmaffione Look please that it turned out, is such a decision satisfied?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/vmaffione,6,https://github.com/luigirizzo/netmap/pull/305#issuecomment-301906797,#303,"It looks good, but we need to check if compilation is ok on FreeBSD. Have you checked it by any chance?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/spinenkoia,7,https://github.com/luigirizzo/netmap/pull/305#issuecomment-301994638,#303,"FreeBSD has not yet been tested, only in Linux. In the near future I will check.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/vmaffione,8,https://github.com/luigirizzo/netmap/pull/305#issuecomment-302047786,#303,"Thanks. I've checked on FreeBSD, it is ok.
Next step would be to get rid of the D,ND and RD macros and use nm_prinf and nm_prerr everywhere.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/spinenkoia,9,https://github.com/luigirizzo/netmap/pull/305#issuecomment-302318060,#303,"Yes, I think I will do it. It would also be useful for me.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/vmaffione,10,https://github.com/luigirizzo/netmap/pull/305#issuecomment-302322533,#303,"Sounds good! Actually, we can leave ND macros (they result into nothing), and we need another nm_prlim() macro to replace RD.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,305,2017-05-15T09:06:16Z,2017-05-17T10:13:42Z,2017-05-18T13:08:07Z,MERGED,True,17,7,5,https://github.com/spinenkoia,Added log levels for printf function as in linux.,1,[],https://github.com/luigirizzo/netmap/pull/305,https://github.com/spinenkoia,11,https://github.com/luigirizzo/netmap/pull/305#issuecomment-302398237,#303,"Okay, I'll keep that in mind.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,315,2017-06-13T12:55:56Z,2017-06-13T15:10:41Z,2017-06-13T15:10:41Z,MERGED,True,2,1,1,https://github.com/loos-br,Silence a (fatal) warning in FreeBSD when building one of the platforâ€¦,1,[],https://github.com/luigirizzo/netmap/pull/315,https://github.com/loos-br,1,https://github.com/luigirizzo/netmap/pull/315,"â€¦ms that still requires GCC (powerpc, powerpc64 and sparc64).","â€¦ms that still requires GCC (powerpc, powerpc64 and sparc64).",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,315,2017-06-13T12:55:56Z,2017-06-13T15:10:41Z,2017-06-13T15:10:41Z,MERGED,True,2,1,1,https://github.com/loos-br,Silence a (fatal) warning in FreeBSD when building one of the platforâ€¦,1,[],https://github.com/luigirizzo/netmap/pull/315,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/315#issuecomment-308148363,"â€¦ms that still requires GCC (powerpc, powerpc64 and sparc64).",Ok thanks,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/316,Since eb2e562 they are not built from LINUX/ anymore,Since eb2e562 they are not built from LINUX/ anymore,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308152150,Since eb2e562 they are not built from LINUX/ anymore,"Hi, can you share the commands to build netmap with dkms?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,3,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308154497,Since eb2e562 they are not built from LINUX/ anymore,"Should be:
make -C LINUX/dkms install-dkms
dkms build netmap/0.0.1
dkms install netmap/0.0.1",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308155063,Since eb2e562 they are not built from LINUX/ anymore,"Ok, I will try. Is this supposed to work on debian, ubuntu and similar distros?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,5,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308155197,Since eb2e562 they are not built from LINUX/ anymore,"Yes, as far as I know it should be distro agnostic but I tested on Ubuntu",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,6,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308161679,Since eb2e562 they are not built from LINUX/ anymore,"Looks like veth, virtio, e1000, forcedeth won't build without a linux source folder, and i40e ixgbevf fail to build here for some reason, so I had to add --no-drivers=i40e,ixgbevf to /GNUMakefile and remove veth/virtio/e1000/forcedeth from dkms.conf.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/vmaffione,7,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308187885,Since eb2e562 they are not built from LINUX/ anymore,"Ok, but keep in mind that you should use the standard ./configure && make && make install, I wouldn't see why you want to use dkms.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/vmaffione,8,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308190750,Since eb2e562 they are not built from LINUX/ anymore,I don't see these last modifications you are talking about,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,9,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308197376,Since eb2e562 they are not built from LINUX/ anymore,"Dkms makes it easy to rebuild on kernel upgrades

Le 13 juin 2017 19:21, ""Vincenzo Maffione"" <notifications@github.com> a
Ã©crit :
â€¦
 Ok, but keep in mind that you should use the standard ./configure && make
 && make install, I wouldn't see why you want to use dkms.

 â€”
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#316 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAFa3eg0vJ3m99j09oYfkTGJr7KzLfuZks5sDsUbgaJpZM4N4pWM>
 .",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/vmaffione,10,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308253610,Since eb2e562 they are not built from LINUX/ anymore,"Ok, but it still doesn't work as (at least) ixgbevf fails to compile.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,11,https://github.com/luigirizzo/netmap/pull/316#issuecomment-308315836,Since eb2e562 they are not built from LINUX/ anymore,"On 06/13/2017 07:31 PM, Vincenzo Maffione wrote:
 I don't see these last modifications you are talking about
Yes those are local modifications only, I did not try to fix these other
problems yet ;)

Apparently dkms.conf is included from a bash script so I will see if
it's possible to configure the dkms build to only enable a few drivers.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,12,https://github.com/luigirizzo/netmap/pull/316#issuecomment-311919818,Since eb2e562 they are not built from LINUX/ anymore,ping,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/giuseppelettieri,13,https://github.com/luigirizzo/netmap/pull/316#issuecomment-311920832,Since eb2e562 they are not built from LINUX/ anymore,"Why are you removing i40e and ixgbevf from the default build for everybody? Can't dkms properly run ./configure --no-drivers=i40,ixgbevf' before running make?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,14,https://github.com/luigirizzo/netmap/pull/316#issuecomment-311921201,Since eb2e562 they are not built from LINUX/ anymore,"giuseppe, this is not something I sent as a commit but purely as debug.
I believe the need to disable those 2 drivers is gone with commit 0049194
(I removed the old comments since they were made obsolete by that new commit)",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/funman,15,https://github.com/luigirizzo/netmap/pull/316#issuecomment-311957165,Since eb2e562 they are not built from LINUX/ anymore,@giuseppelettieri @vmaffione does it make sense now?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,316,2017-06-13T15:15:46Z,2017-06-29T13:03:21Z,2017-06-29T13:04:34Z,MERGED,True,6,10,2,https://github.com/funman,dkms: fix modules path,2,[],https://github.com/luigirizzo/netmap/pull/316,https://github.com/giuseppelettieri,16,https://github.com/luigirizzo/netmap/pull/316#issuecomment-311959427,Since eb2e562 they are not built from LINUX/ anymore,"very good, thank you!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,321,2017-06-26T21:24:23Z,2017-07-03T15:26:09Z,2017-07-14T12:33:08Z,MERGED,True,8,1,1,https://github.com/desbma,i40e: Set NS_MOREFRAG slot flag if frame is incomplete,1,[],https://github.com/luigirizzo/netmap/pull/321,https://github.com/desbma,1,https://github.com/luigirizzo/netmap/pull/321,"For Ethernet frames of size larger than 2048 bytes, the ring for this driver always gives buffers of 2048 bytes or smaller chunks, even if the MTU is configured for > 9000 bytes, but it exposes a flag to inform the driver that more fragments are available for this frame.
This patch propagates the ""more fragment"" flag, from the NIC ring to the Netmap ring.
A similar check is done in the mainline Linux i40e driver.
Without this fix, when a 9014 byte frame is captured on the interface, a Netmap reader would receive 5 chunks of sizes : 2048 + 2048 + 2048 + 2048 +  822, without a way to tell if they belong to the same frame or not.
I have tested the change on Intel XL710 10Gbe card.","For Ethernet frames of size larger than 2048 bytes, the ring for this driver always gives buffers of 2048 bytes or smaller chunks, even if the MTU is configured for > 9000 bytes, but it exposes a flag to inform the driver that more fragments are available for this frame.
This patch propagates the ""more fragment"" flag, from the NIC ring to the Netmap ring.
A similar check is done in the mainline Linux i40e driver.
Without this fix, when a 9014 byte frame is captured on the interface, a Netmap reader would receive 5 chunks of sizes : 2048 + 2048 + 2048 + 2048 +  822, without a way to tell if they belong to the same frame or not.
I have tested the change on Intel XL710 10Gbe card.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,324,2017-06-29T14:54:50Z,2017-06-29T15:43:19Z,2017-07-03T14:23:18Z,MERGED,True,1,1,1,https://github.com/borislavmatvey,Use htons to initialize packet's ip_len,1,[],https://github.com/luigirizzo/netmap/pull/324,https://github.com/borislavmatvey,1,https://github.com/luigirizzo/netmap/pull/324,"In the expected context the use of htons is more appropriate. htons and
ntohs are actually implemented using the same function on x86, so there
is no actual functional problem.","In the expected context the use of htons is more appropriate. htons and
ntohs are actually implemented using the same function on x86, so there
is no actual functional problem.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,324,2017-06-29T14:54:50Z,2017-06-29T15:43:19Z,2017-07-03T14:23:18Z,MERGED,True,1,1,1,https://github.com/borislavmatvey,Use htons to initialize packet's ip_len,1,[],https://github.com/luigirizzo/netmap/pull/324,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/324#issuecomment-312007126,"In the expected context the use of htons is more appropriate. htons and
ntohs are actually implemented using the same function on x86, so there
is no actual functional problem.","Sure, thanks.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,328,2017-07-03T11:27:15Z,2017-07-03T12:19:04Z,2017-07-03T14:22:38Z,MERGED,True,2,2,1,https://github.com/borislavmatvey,netmap_do_regif: Reverse error path vs normal path,1,[],https://github.com/luigirizzo/netmap/pull/328,https://github.com/borislavmatvey,1,https://github.com/luigirizzo/netmap/pull/328,"The error exit path should reverse all operations in backward order of
the normal path. Till this commit if netmap_mem_if_new fails then
netmap_krings_put won't be called and the usage count will leak.","The error exit path should reverse all operations in backward order of
the normal path. Till this commit if netmap_mem_if_new fails then
netmap_krings_put won't be called and the usage count will leak.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,328,2017-07-03T11:27:15Z,2017-07-03T12:19:04Z,2017-07-03T14:22:38Z,MERGED,True,2,2,1,https://github.com/borislavmatvey,netmap_do_regif: Reverse error path vs normal path,1,[],https://github.com/luigirizzo/netmap/pull/328,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/328#issuecomment-312630765,"The error exit path should reverse all operations in backward order of
the normal path. Till this commit if netmap_mem_if_new fails then
netmap_krings_put won't be called and the usage count will leak.",Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,329,2017-07-03T16:27:58Z,2017-07-10T13:42:22Z,2017-07-17T08:53:11Z,MERGED,True,0,1,1,https://github.com/borislavmatvey,netmap_ioctl: Fix ifnet reference leak on failure.,1,[],https://github.com/luigirizzo/netmap/pull/329,https://github.com/borislavmatvey,1,https://github.com/luigirizzo/netmap/pull/329,"The redefinition of ifp variable in the registration path was shadowing
a definition of the same variable at the start of netmap_ioctl function
and in case of netmap_do_regif failure the error path was trying to
unref the outer variable which contains NULL, while the ifnet object was
pointed by the inner ifp variable and as it went out of scope the ifnet
object will have one extra reference.","The redefinition of ifp variable in the registration path was shadowing
a definition of the same variable at the start of netmap_ioctl function
and in case of netmap_do_regif failure the error path was trying to
unref the outer variable which contains NULL, while the ifnet object was
pointed by the inner ifp variable and as it went out of scope the ifnet
object will have one extra reference.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,329,2017-07-03T16:27:58Z,2017-07-10T13:42:22Z,2017-07-17T08:53:11Z,MERGED,True,0,1,1,https://github.com/borislavmatvey,netmap_ioctl: Fix ifnet reference leak on failure.,1,[],https://github.com/luigirizzo/netmap/pull/329,https://github.com/borislavmatvey,2,https://github.com/luigirizzo/netmap/pull/329#issuecomment-312690533,"The redefinition of ifp variable in the registration path was shadowing
a definition of the same variable at the start of netmap_ioctl function
and in case of netmap_do_regif failure the error path was trying to
unref the outer variable which contains NULL, while the ifnet object was
pointed by the inner ifp variable and as it went out of scope the ifnet
object will have one extra reference.","This modification will fix the leak, but I'm not sure this is the best change. I saw that this variable is redefined in a couple of places in the ioctl function and similar problem could happen in the future.
Any notes or suggestions are kindly welcome.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,329,2017-07-03T16:27:58Z,2017-07-10T13:42:22Z,2017-07-17T08:53:11Z,MERGED,True,0,1,1,https://github.com/borislavmatvey,netmap_ioctl: Fix ifnet reference leak on failure.,1,[],https://github.com/luigirizzo/netmap/pull/329,https://github.com/desbma,3,https://github.com/luigirizzo/netmap/pull/329#issuecomment-315699459,"The redefinition of ifp variable in the registration path was shadowing
a definition of the same variable at the start of netmap_ioctl function
and in case of netmap_do_regif failure the error path was trying to
unref the outer variable which contains NULL, while the ifnet object was
pointed by the inner ifp variable and as it went out of scope the ifnet
object will have one extra reference.",Maybe compiling with -Wshadow or even -Werror=shadow would help catch these kind of bugs in the future?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,334,2017-07-14T22:33:52Z,2017-07-16T08:10:41Z,2017-08-11T20:25:15Z,MERGED,True,85,0,2,https://github.com/desbma,Add Travis CI integration,2,[],https://github.com/luigirizzo/netmap/pull/334,https://github.com/desbma,1,https://github.com/luigirizzo/netmap/pull/334,"This adds integration with Travis CI continuous integration service (free for open source projects).
For now the job (triggered automatically for each commit), will compile Netmap on Linux with all drivers, with several long term kernel versions and i386/x86_64 CPU architectures.
Basically it checks Netmap and its drivers compiles fines on Linux with a large range of kernel configurations, which can be very tedious to check manually.
As an immediate benefit, it shows that Netmap is broken with the latest kernel version (Linus branch) : https://travis-ci.org/desbma/netmap/jobs/253780111#L957.
In the future we could expand the scope of the job to run automated tests, for example by firing up Qemu with a simulated e1000 NIC and exchanging some packets.
If you agree to merge this, you'll need to create a Travis account and link it to the Github account.
As an additional benefit the Travis job automatically runs when a pull request is proposed, which would then check if anything broke Linux compilation.","This adds integration with Travis CI continuous integration service (free for open source projects).
For now the job (triggered automatically for each commit), will compile Netmap on Linux with all drivers, with several long term kernel versions and i386/x86_64 CPU architectures.
Basically it checks Netmap and its drivers compiles fines on Linux with a large range of kernel configurations, which can be very tedious to check manually.
As an immediate benefit, it shows that Netmap is broken with the latest kernel version (Linus branch) : https://travis-ci.org/desbma/netmap/jobs/253780111#L957.
In the future we could expand the scope of the job to run automated tests, for example by firing up Qemu with a simulated e1000 NIC and exchanging some packets.
If you agree to merge this, you'll need to create a Travis account and link it to the Github account.
As an additional benefit the Travis job automatically runs when a pull request is proposed, which would then check if anything broke Linux compilation.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,334,2017-07-14T22:33:52Z,2017-07-16T08:10:41Z,2017-08-11T20:25:15Z,MERGED,True,85,0,2,https://github.com/desbma,Add Travis CI integration,2,[],https://github.com/luigirizzo/netmap/pull/334,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/334#issuecomment-315503136,"This adds integration with Travis CI continuous integration service (free for open source projects).
For now the job (triggered automatically for each commit), will compile Netmap on Linux with all drivers, with several long term kernel versions and i386/x86_64 CPU architectures.
Basically it checks Netmap and its drivers compiles fines on Linux with a large range of kernel configurations, which can be very tedious to check manually.
As an immediate benefit, it shows that Netmap is broken with the latest kernel version (Linus branch) : https://travis-ci.org/desbma/netmap/jobs/253780111#L957.
In the future we could expand the scope of the job to run automated tests, for example by firing up Qemu with a simulated e1000 NIC and exchanging some packets.
If you agree to merge this, you'll need to create a Travis account and link it to the Github account.
As an additional benefit the Travis job automatically runs when a pull request is proposed, which would then check if anything broke Linux compilation.","This looks great, thanks.
So did you test it on your netmap fork, did you?
Maybe we could even improve your approach to clone the torvalds linux repo, which contains a tag for each linux version, not only the stable ones.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,334,2017-07-14T22:33:52Z,2017-07-16T08:10:41Z,2017-08-11T20:25:15Z,MERGED,True,85,0,2,https://github.com/desbma,Add Travis CI integration,2,[],https://github.com/luigirizzo/netmap/pull/334,https://github.com/desbma,3,https://github.com/luigirizzo/netmap/pull/334#issuecomment-315525783,"This adds integration with Travis CI continuous integration service (free for open source projects).
For now the job (triggered automatically for each commit), will compile Netmap on Linux with all drivers, with several long term kernel versions and i386/x86_64 CPU architectures.
Basically it checks Netmap and its drivers compiles fines on Linux with a large range of kernel configurations, which can be very tedious to check manually.
As an immediate benefit, it shows that Netmap is broken with the latest kernel version (Linus branch) : https://travis-ci.org/desbma/netmap/jobs/253780111#L957.
In the future we could expand the scope of the job to run automated tests, for example by firing up Qemu with a simulated e1000 NIC and exchanging some packets.
If you agree to merge this, you'll need to create a Travis account and link it to the Github account.
As an additional benefit the Travis job automatically runs when a pull request is proposed, which would then check if anything broke Linux compilation.","Yes I tested it on my fork, here is the report for the last job : https://travis-ci.org/desbma/netmap/builds/253788135
The run time for the next build will be even shorter because downloaded drivers are now cached between job executions.
Of course we could test more kernel versions, but just between 2.6.35 and 4.12 there was 38 kernel versions (not counting the RC), multiply this by 2 (test for i386 and x86_64 for each version) and you get a matrix of 76 tests, which will take some time to run even if each build only lasts 1 minute. Also it is putting a strain on the Travis infrastructure, when the say on their site :

If you are on an open-source plan, please remember that Travis CI provides this service free of charge to the community. So please only specify the matrix you actually need.

That number will increase when new versions are released, and if we add more parameters to the test matrix (for example a compile time parameter which deserves to be tested independently), which may put us dangerously close to the 200 jobs limit (which is already quite high for a free service).
Currently by testing only LTS + latest, we test 8 versions x 2 architectures which is only 16 combinations, but I though it is a good compromise, which allows catching regressions with a good version coverage, while at the same time anticipate breakage in the Linus branch.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,334,2017-07-14T22:33:52Z,2017-07-16T08:10:41Z,2017-08-11T20:25:15Z,MERGED,True,85,0,2,https://github.com/desbma,Add Travis CI integration,2,[],https://github.com/luigirizzo/netmap/pull/334,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/334#issuecomment-315568768,"This adds integration with Travis CI continuous integration service (free for open source projects).
For now the job (triggered automatically for each commit), will compile Netmap on Linux with all drivers, with several long term kernel versions and i386/x86_64 CPU architectures.
Basically it checks Netmap and its drivers compiles fines on Linux with a large range of kernel configurations, which can be very tedious to check manually.
As an immediate benefit, it shows that Netmap is broken with the latest kernel version (Linus branch) : https://travis-ci.org/desbma/netmap/jobs/253780111#L957.
In the future we could expand the scope of the job to run automated tests, for example by firing up Qemu with a simulated e1000 NIC and exchanging some packets.
If you agree to merge this, you'll need to create a Travis account and link it to the Github account.
As an additional benefit the Travis job automatically runs when a pull request is proposed, which would then check if anything broke Linux compilation.","Yes you're right, it's probably better not to overdo, as resources are limited.
At this point I'm also not sure if we really need to support i386, we are not aware of people using netmap on i386...  anyway, it's ok to have it.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,334,2017-07-14T22:33:52Z,2017-07-16T08:10:41Z,2017-08-11T20:25:15Z,MERGED,True,85,0,2,https://github.com/desbma,Add Travis CI integration,2,[],https://github.com/luigirizzo/netmap/pull/334,https://github.com/desbma,5,https://github.com/luigirizzo/netmap/pull/334#issuecomment-315700172,"This adds integration with Travis CI continuous integration service (free for open source projects).
For now the job (triggered automatically for each commit), will compile Netmap on Linux with all drivers, with several long term kernel versions and i386/x86_64 CPU architectures.
Basically it checks Netmap and its drivers compiles fines on Linux with a large range of kernel configurations, which can be very tedious to check manually.
As an immediate benefit, it shows that Netmap is broken with the latest kernel version (Linus branch) : https://travis-ci.org/desbma/netmap/jobs/253780111#L957.
In the future we could expand the scope of the job to run automated tests, for example by firing up Qemu with a simulated e1000 NIC and exchanging some packets.
If you agree to merge this, you'll need to create a Travis account and link it to the Github account.
As an additional benefit the Travis job automatically runs when a pull request is proposed, which would then check if anything broke Linux compilation.","To the maintainers : don't forget to create a Travis account and link it to this project, so that https://travis-ci.org/luigirizzo/netmap (currently empty) can show the job's status.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,334,2017-07-14T22:33:52Z,2017-07-16T08:10:41Z,2017-08-11T20:25:15Z,MERGED,True,85,0,2,https://github.com/desbma,Add Travis CI integration,2,[],https://github.com/luigirizzo/netmap/pull/334,https://github.com/desbma,6,https://github.com/luigirizzo/netmap/pull/334#issuecomment-321833270,"This adds integration with Travis CI continuous integration service (free for open source projects).
For now the job (triggered automatically for each commit), will compile Netmap on Linux with all drivers, with several long term kernel versions and i386/x86_64 CPU architectures.
Basically it checks Netmap and its drivers compiles fines on Linux with a large range of kernel configurations, which can be very tedious to check manually.
As an immediate benefit, it shows that Netmap is broken with the latest kernel version (Linus branch) : https://travis-ci.org/desbma/netmap/jobs/253780111#L957.
In the future we could expand the scope of the job to run automated tests, for example by firing up Qemu with a simulated e1000 NIC and exchanging some packets.
If you agree to merge this, you'll need to create a Travis account and link it to the Github account.
As an additional benefit the Travis job automatically runs when a pull request is proposed, which would then check if anything broke Linux compilation.","@giuseppelettieri, @vmaffione
The Travis account for this repository is still inactive, which makes this pull request useless.
It could with little effort (creating Travis account and linking it to the existing GitHub account) run the automatic job on each new commit.
EDIT: It would also likely have catched issue #347 immediately.
Is there something that holds this up?
Or did you change your mind about automatic builds?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,334,2017-07-14T22:33:52Z,2017-07-16T08:10:41Z,2017-08-11T20:25:15Z,MERGED,True,85,0,2,https://github.com/desbma,Add Travis CI integration,2,[],https://github.com/luigirizzo/netmap/pull/334,https://github.com/giuseppelettieri,7,https://github.com/luigirizzo/netmap/pull/334#issuecomment-321869510,"This adds integration with Travis CI continuous integration service (free for open source projects).
For now the job (triggered automatically for each commit), will compile Netmap on Linux with all drivers, with several long term kernel versions and i386/x86_64 CPU architectures.
Basically it checks Netmap and its drivers compiles fines on Linux with a large range of kernel configurations, which can be very tedious to check manually.
As an immediate benefit, it shows that Netmap is broken with the latest kernel version (Linus branch) : https://travis-ci.org/desbma/netmap/jobs/253780111#L957.
In the future we could expand the scope of the job to run automated tests, for example by firing up Qemu with a simulated e1000 NIC and exchanging some packets.
If you agree to merge this, you'll need to create a Travis account and link it to the Github account.
As an additional benefit the Travis job automatically runs when a pull request is proposed, which would then check if anything broke Linux compilation.","Yes, I know, but @luigirizzo should do it and he has been very busy lately. I still think it is a usefull addition.

Il 11 Agosto 2017 16:45:41 CEST, desbma <notifications@github.com> ha scritto:
â€¦

@giuseppelettieri, @vmaffione
The [Travis account for this
repository](https://travis-ci.org/luigirizzo/netmap) is still inactive,
which makes this pull request useless.
It could with little effort (creating Travis account and linking it to
the existing GitHub account) run the automatic job on each new commit.

Is there something that holds this up?
Or did you change your mind about automatic builds?



--
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub:
#334 (comment)


-- Inviato dal mio cellulare Android con K-9 Mail.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,337,2017-07-21T04:54:21Z,2017-07-21T04:58:22Z,2017-07-21T04:58:22Z,MERGED,True,2,2,2,https://github.com/loos-br,Replace zero with NULL for pointers.,1,[],https://github.com/luigirizzo/netmap/pull/337,https://github.com/loos-br,1,https://github.com/luigirizzo/netmap/pull/337,Obtained from:	FreeBSD (r313982),Obtained from:	FreeBSD (r313982),True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,338,2017-07-21T05:03:31Z,2017-07-26T02:34:34Z,2017-07-26T02:34:34Z,MERGED,True,8,0,1,https://github.com/loos-br,Do not allow the use of the loopback interface in netmap.,1,[],https://github.com/luigirizzo/netmap/pull/338,https://github.com/loos-br,1,https://github.com/luigirizzo/netmap/pull/338,"The generic support in netmap send the packets using if_transmit() and the
loopback do not support packets coming from if_transmit()/if_start().
This avoids the use of the loopback interface and the subsequent crash that
happens when the application send packets to the loopback interface.
Details in:	#322
Obtained from:	FreeBSD","The generic support in netmap send the packets using if_transmit() and the
loopback do not support packets coming from if_transmit()/if_start().
This avoids the use of the loopback interface and the subsequent crash that
happens when the application send packets to the loopback interface.
Details in:	#322
Obtained from:	FreeBSD",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,338,2017-07-21T05:03:31Z,2017-07-26T02:34:34Z,2017-07-26T02:34:34Z,MERGED,True,8,0,1,https://github.com/loos-br,Do not allow the use of the loopback interface in netmap.,1,[],https://github.com/luigirizzo/netmap/pull/338,https://github.com/loos-br,2,https://github.com/luigirizzo/netmap/pull/338#issuecomment-316906039,"The generic support in netmap send the packets using if_transmit() and the
loopback do not support packets coming from if_transmit()/if_start().
This avoids the use of the loopback interface and the subsequent crash that
happens when the application send packets to the loopback interface.
Details in:	#322
Obtained from:	FreeBSD",Do not allow the use of the loopback interface in netmap. only for FreeBSD,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,340,2017-07-24T18:29:28Z,2017-07-24T18:52:03Z,2017-07-24T18:52:04Z,MERGED,True,3,5,1,https://github.com/desbma,Comment fixes,1,[],https://github.com/luigirizzo/netmap/pull/340,https://github.com/desbma,1,https://github.com/luigirizzo/netmap/pull/340,Fixes issue #339,Fixes issue #339,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,349,2017-08-18T12:40:35Z,2017-10-30T14:06:43Z,2017-10-30T14:06:43Z,MERGED,True,5,1,1,https://github.com/funman,Respect dkms $kernelver,1,[],https://github.com/luigirizzo/netmap/pull/349,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/349,Fix kernel upgrades when the module is built for kernel different from the one running,Fix kernel upgrades when the module is built for kernel different from the one running,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,349,2017-08-18T12:40:35Z,2017-10-30T14:06:43Z,2017-10-30T14:06:43Z,MERGED,True,5,1,1,https://github.com/funman,Respect dkms $kernelver,1,[],https://github.com/luigirizzo/netmap/pull/349,https://github.com/funman,2,https://github.com/luigirizzo/netmap/pull/349#issuecomment-340446546,Fix kernel upgrades when the module is built for kernel different from the one running,Ping,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,350,2017-08-20T05:25:06Z,2017-08-25T10:19:30Z,2017-08-25T10:19:30Z,MERGED,True,9,0,1,https://github.com/krishnasrk,Updated the README about e1000 patch issue seen in 3.10 kernel version,3,[],https://github.com/luigirizzo/netmap/pull/350,https://github.com/krishnasrk,1,https://github.com/luigirizzo/netmap/pull/350,"Problem statement
patch final-patches/vanilla--e1000--20620--31200 is getting wrongly applied with 3.10 kernel version that is used for CentOS 7.3
Overview of changes
Updated the LINUX/README,  ""COMMON PROBLEMS"" section to alert the user of e1000 with netmap about the patch.","Problem statement
patch final-patches/vanilla--e1000--20620--31200 is getting wrongly applied with 3.10 kernel version that is used for CentOS 7.3
Overview of changes
Updated the LINUX/README,  ""COMMON PROBLEMS"" section to alert the user of e1000 with netmap about the patch.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,351,2017-08-25T08:44:17Z,2017-09-07T11:45:39Z,2017-09-07T11:45:58Z,MERGED,True,196,140,2,https://github.com/stephen-hurd,Various pkt-gen fixes,1,[],https://github.com/luigirizzo/netmap/pull/351,https://github.com/stephen-hurd,1,https://github.com/luigirizzo/netmap/pull/351,"Add a -N option to not normalize units.  Useful for automated tools.
(From olivier@ here:
https://github.com/ocochard/BSDRP/tree/master/BSDRPcur/patches)
Or in -o option so command-line order of -I, -X, -r, -z, -Z, and -A
doesn't matter.
Avoid unaligned access, some new compilers will warn on it, and pkt-gen
uses -Werror -Wall.
Document all supported options in usage() (even -m).
Remove documentation of unsupported -r and -t options
Align tabs in usage()","Add a -N option to not normalize units.  Useful for automated tools.
(From olivier@ here:
https://github.com/ocochard/BSDRP/tree/master/BSDRPcur/patches)
Or in -o option so command-line order of -I, -X, -r, -z, -Z, and -A
doesn't matter.
Avoid unaligned access, some new compilers will warn on it, and pkt-gen
uses -Werror -Wall.
Document all supported options in usage() (even -m).
Remove documentation of unsupported -r and -t options
Align tabs in usage()",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,351,2017-08-25T08:44:17Z,2017-09-07T11:45:39Z,2017-09-07T11:45:58Z,MERGED,True,196,140,2,https://github.com/stephen-hurd,Various pkt-gen fixes,1,[],https://github.com/luigirizzo/netmap/pull/351,https://github.com/stephen-hurd,2,https://github.com/luigirizzo/netmap/pull/351#issuecomment-324863902,"Add a -N option to not normalize units.  Useful for automated tools.
(From olivier@ here:
https://github.com/ocochard/BSDRP/tree/master/BSDRPcur/patches)
Or in -o option so command-line order of -I, -X, -r, -z, -Z, and -A
doesn't matter.
Avoid unaligned access, some new compilers will warn on it, and pkt-gen
uses -Werror -Wall.
Document all supported options in usage() (even -m).
Remove documentation of unsupported -r and -t options
Align tabs in usage()",This also incorporates the feedback from #252,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,351,2017-08-25T08:44:17Z,2017-09-07T11:45:39Z,2017-09-07T11:45:58Z,MERGED,True,196,140,2,https://github.com/stephen-hurd,Various pkt-gen fixes,1,[],https://github.com/luigirizzo/netmap/pull/351,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/351#issuecomment-327775731,"Add a -N option to not normalize units.  Useful for automated tools.
(From olivier@ here:
https://github.com/ocochard/BSDRP/tree/master/BSDRPcur/patches)
Or in -o option so command-line order of -I, -X, -r, -z, -Z, and -A
doesn't matter.
Avoid unaligned access, some new compilers will warn on it, and pkt-gen
uses -Werror -Wall.
Document all supported options in usage() (even -m).
Remove documentation of unsupported -r and -t options
Align tabs in usage()","Much appreciated, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,352,2017-08-25T08:54:46Z,2017-08-25T09:04:43Z,2017-08-25T09:04:43Z,CLOSED,False,0,2,1,https://github.com/funman,pkt-gen: update help,1,[],https://github.com/luigirizzo/netmap/pull/352,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/352,"-t options never existed, and -r means something else","-t options never existed, and -r means something else",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,352,2017-08-25T08:54:46Z,2017-08-25T09:04:43Z,2017-08-25T09:04:43Z,CLOSED,False,0,2,1,https://github.com/funman,pkt-gen: update help,1,[],https://github.com/luigirizzo/netmap/pull/352,https://github.com/stephen-hurd,2,https://github.com/luigirizzo/netmap/pull/352#issuecomment-324863418,"-t options never existed, and -r means something else","Heh, see #351, I just did a pull request with a massive update to usage()",True,{'LAUGH': ['https://github.com/funman']}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,352,2017-08-25T08:54:46Z,2017-08-25T09:04:43Z,2017-08-25T09:04:43Z,CLOSED,False,0,2,1,https://github.com/funman,pkt-gen: update help,1,[],https://github.com/luigirizzo/netmap/pull/352,https://github.com/funman,3,https://github.com/luigirizzo/netmap/pull/352#issuecomment-324863925,"-t options never existed, and -r means something else","Ah should have checked before ;)
Also I see you left the option here for future implementation, that's nice
Closing this one",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,353,2017-08-28T08:53:03Z,2017-09-22T09:35:09Z,2017-09-25T09:12:33Z,MERGED,True,1,1,1,https://github.com/borislavmatvey,Check if carrier present instead of running.,1,[],https://github.com/luigirizzo/netmap/pull/353,https://github.com/borislavmatvey,1,https://github.com/luigirizzo/netmap/pull/353,"Replace the check whether interface is running with a check whether
there is actual carrier, otherwise packets will be reported as sent
although there is no actual link on the interface.
Tested by sending packets with:
pkt-gen -i ethX -f tx -n 0 -l 1500

Pkt-gen shows that it is sending packets even after the cable was
physically unplugged from the interface.
The check in ixgbe is the same in txsync handler.","Replace the check whether interface is running with a check whether
there is actual carrier, otherwise packets will be reported as sent
although there is no actual link on the interface.
Tested by sending packets with:
pkt-gen -i ethX -f tx -n 0 -l 1500

Pkt-gen shows that it is sending packets even after the cable was
physically unplugged from the interface.
The check in ixgbe is the same in txsync handler.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,353,2017-08-28T08:53:03Z,2017-09-22T09:35:09Z,2017-09-25T09:12:33Z,MERGED,True,1,1,1,https://github.com/borislavmatvey,Check if carrier present instead of running.,1,[],https://github.com/luigirizzo/netmap/pull/353,https://github.com/borislavmatvey,2,https://github.com/luigirizzo/netmap/pull/353#issuecomment-329173211,"Replace the check whether interface is running with a check whether
there is actual carrier, otherwise packets will be reported as sent
although there is no actual link on the interface.
Tested by sending packets with:
pkt-gen -i ethX -f tx -n 0 -l 1500

Pkt-gen shows that it is sending packets even after the cable was
physically unplugged from the interface.
The check in ixgbe is the same in txsync handler.",Fixes #366,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,353,2017-08-28T08:53:03Z,2017-09-22T09:35:09Z,2017-09-25T09:12:33Z,MERGED,True,1,1,1,https://github.com/borislavmatvey,Check if carrier present instead of running.,1,[],https://github.com/luigirizzo/netmap/pull/353,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/353#issuecomment-329685991,"Replace the check whether interface is running with a check whether
there is actual carrier, otherwise packets will be reported as sent
although there is no actual link on the interface.
Tested by sending packets with:
pkt-gen -i ethX -f tx -n 0 -l 1500

Pkt-gen shows that it is sending packets even after the cable was
physically unplugged from the interface.
The check in ixgbe is the same in txsync handler.",Maybe we should check for both? @giuseppelettieri,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,353,2017-08-28T08:53:03Z,2017-09-22T09:35:09Z,2017-09-25T09:12:33Z,MERGED,True,1,1,1,https://github.com/borislavmatvey,Check if carrier present instead of running.,1,[],https://github.com/luigirizzo/netmap/pull/353,https://github.com/borislavmatvey,4,https://github.com/luigirizzo/netmap/pull/353#issuecomment-331391607,"Replace the check whether interface is running with a check whether
there is actual carrier, otherwise packets will be reported as sent
although there is no actual link on the interface.
Tested by sending packets with:
pkt-gen -i ethX -f tx -n 0 -l 1500

Pkt-gen shows that it is sending packets even after the cable was
physically unplugged from the interface.
The check in ixgbe is the same in txsync handler.",Just to mention I tested this works as expected when plugged in/out as it is in the PR - and this check done now is the same as in done in the same function for the ixgbe driver.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,353,2017-08-28T08:53:03Z,2017-09-22T09:35:09Z,2017-09-25T09:12:33Z,MERGED,True,1,1,1,https://github.com/borislavmatvey,Check if carrier present instead of running.,1,[],https://github.com/luigirizzo/netmap/pull/353,https://github.com/giuseppelettieri,5,https://github.com/luigirizzo/netmap/pull/353#issuecomment-331400443,"Replace the check whether interface is running with a check whether
there is actual carrier, otherwise packets will be reported as sent
although there is no actual link on the interface.
Tested by sending packets with:
pkt-gen -i ethX -f tx -n 0 -l 1500

Pkt-gen shows that it is sending packets even after the cable was
physically unplugged from the interface.
The check in ixgbe is the same in txsync handler.","I am closing this, thanks for the patch!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,353,2017-08-28T08:53:03Z,2017-09-22T09:35:09Z,2017-09-25T09:12:33Z,MERGED,True,1,1,1,https://github.com/borislavmatvey,Check if carrier present instead of running.,1,[],https://github.com/luigirizzo/netmap/pull/353,https://github.com/borislavmatvey,6,https://github.com/luigirizzo/netmap/pull/353#issuecomment-331823017,"Replace the check whether interface is running with a check whether
there is actual carrier, otherwise packets will be reported as sent
although there is no actual link on the interface.
Tested by sending packets with:
pkt-gen -i ethX -f tx -n 0 -l 1500

Pkt-gen shows that it is sending packets even after the cable was
physically unplugged from the interface.
The check in ixgbe is the same in txsync handler.",Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,358,2017-09-02T13:08:22Z,2017-09-02T19:03:36Z,2017-09-02T19:03:36Z,MERGED,True,27,25,4,https://github.com/jmtilli,apps: make compiling apps on Raspberry Pi possible,1,[],https://github.com/luigirizzo/netmap/pull/358,https://github.com/jmtilli,1,https://github.com/luigirizzo/netmap/pull/358,"There were quite many format mismatch errors and also one left-shifting
of 32-bit integer by 32.
Fixes issue #357","There were quite many format mismatch errors and also one left-shifting
of 32-bit integer by 32.
Fixes issue #357",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,358,2017-09-02T13:08:22Z,2017-09-02T19:03:36Z,2017-09-02T19:03:36Z,MERGED,True,27,25,4,https://github.com/jmtilli,apps: make compiling apps on Raspberry Pi possible,1,[],https://github.com/luigirizzo/netmap/pull/358,https://github.com/jmtilli,2,https://github.com/luigirizzo/netmap/pull/358#issuecomment-326743368,"There were quite many format mismatch errors and also one left-shifting
of 32-bit integer by 32.
Fixes issue #357","Warning: don't merge yet! This will fail on 64-bit Linux, will investigate...",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,358,2017-09-02T13:08:22Z,2017-09-02T19:03:36Z,2017-09-02T19:03:36Z,MERGED,True,27,25,4,https://github.com/jmtilli,apps: make compiling apps on Raspberry Pi possible,1,[],https://github.com/luigirizzo/netmap/pull/358,https://github.com/jmtilli,3,https://github.com/luigirizzo/netmap/pull/358#issuecomment-326743876,"There were quite many format mismatch errors and also one left-shifting
of 32-bit integer by 32.
Fixes issue #357","Now it should work on 32-bit ARM Linux like Raspberry Pi and 64-bit AMD64 Linux. Don't know about Windows or Apple, please test this before merging.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,358,2017-09-02T13:08:22Z,2017-09-02T19:03:36Z,2017-09-02T19:03:36Z,MERGED,True,27,25,4,https://github.com/jmtilli,apps: make compiling apps on Raspberry Pi possible,1,[],https://github.com/luigirizzo/netmap/pull/358,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/358#issuecomment-326763580,"There were quite many format mismatch errors and also one left-shifting
of 32-bit integer by 32.
Fixes issue #357","It works ok, thanks",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,377,2017-10-11T03:02:43Z,2017-10-11T08:27:11Z,2017-10-11T08:38:22Z,MERGED,True,1,1,1,https://github.com/nanjj,Fixed lut_entry has no paddr member issue,1,[],https://github.com/luigirizzo/netmap/pull/377,https://github.com/nanjj,1,https://github.com/luigirizzo/netmap/pull/377,The error: 'struct lut_entry' has no member named 'paddr',The error: 'struct lut_entry' has no member named 'paddr',True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,377,2017-10-11T03:02:43Z,2017-10-11T08:27:11Z,2017-10-11T08:38:22Z,MERGED,True,1,1,1,https://github.com/nanjj,Fixed lut_entry has no paddr member issue,1,[],https://github.com/luigirizzo/netmap/pull/377,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/377#issuecomment-335731881,The error: 'struct lut_entry' has no member named 'paddr',Thanks,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,377,2017-10-11T03:02:43Z,2017-10-11T08:27:11Z,2017-10-11T08:38:22Z,MERGED,True,1,1,1,https://github.com/nanjj,Fixed lut_entry has no paddr member issue,1,[],https://github.com/luigirizzo/netmap/pull/377,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/377#issuecomment-335734958,The error: 'struct lut_entry' has no member named 'paddr',"Thanks for trying to compile this, but the fix is different and will be provided in upcoming commits. Your solution is writing through a NULL pointer.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,381,2017-10-18T10:37:54Z,,2019-02-03T12:22:27Z,OPEN,False,37,1,3,https://github.com/borislavmatvey,Reg range support,2,[],https://github.com/luigirizzo/netmap/pull/381,https://github.com/borislavmatvey,1,https://github.com/luigirizzo/netmap/pull/381,"While following issue #355 I saw this comment from @giuseppelettieri which matched an idea I was contemplating for a while - to be able to register a range of rings with NetMap. Such change will achieve:

easy monitoring of multiple RX queues, instead of creating a fd per ring and managing all of them.
easy implementation of spreading of rings between threads in pkt-gen - you just need to register a range instead of just one ring when you call nm_open and the threading code should just work from there on.

Due to the clever design of NetMap the needed patch to support this feature is surprisingly small and this PR is an attempt to achieve this functionality. It contains the following changes:

netmap_interp_ringid parses a new registration option NR_REG_RANGE_NIC which will update accordingly np_qfirst and np_qlast fields.
The range start is passed as it is now using nr_ringid and the end of the range is passed through the 12 MSBs in nr_flags
nm_open can parse an interface in the following format ethX-2-5 which will register rings [2, 5] to the descriptor.

I played a while with pkt-gen sending and receiving traffic from different ranges of queues, so may be a natural step is the modification mentioned in #355. But first as I'm not too familiar with the code of NetMap I would like to inquire NetMap's devs whether:

A range registration is something which will make NetMap easier to use and will be accepted?
There's a better way to pass the end of the range to the kernel?
Are there any obvious issues which could arise with the current code?","While following issue #355 I saw this comment from @giuseppelettieri which matched an idea I was contemplating for a while - to be able to register a range of rings with NetMap. Such change will achieve:

easy monitoring of multiple RX queues, instead of creating a fd per ring and managing all of them.
easy implementation of spreading of rings between threads in pkt-gen - you just need to register a range instead of just one ring when you call nm_open and the threading code should just work from there on.

Due to the clever design of NetMap the needed patch to support this feature is surprisingly small and this PR is an attempt to achieve this functionality. It contains the following changes:

netmap_interp_ringid parses a new registration option NR_REG_RANGE_NIC which will update accordingly np_qfirst and np_qlast fields.
The range start is passed as it is now using nr_ringid and the end of the range is passed through the 12 MSBs in nr_flags
nm_open can parse an interface in the following format ethX-2-5 which will register rings [2, 5] to the descriptor.

I played a while with pkt-gen sending and receiving traffic from different ranges of queues, so may be a natural step is the modification mentioned in #355. But first as I'm not too familiar with the code of NetMap I would like to inquire NetMap's devs whether:

A range registration is something which will make NetMap easier to use and will be accepted?
There's a better way to pass the end of the range to the kernel?
Are there any obvious issues which could arise with the current code?",True,"{'HEART': ['https://github.com/leleobhz', 'https://github.com/kierank', 'https://github.com/emillynge']}"
luigirizzo/netmap,https://github.com/luigirizzo/netmap,381,2017-10-18T10:37:54Z,,2019-02-03T12:22:27Z,OPEN,False,37,1,3,https://github.com/borislavmatvey,Reg range support,2,[],https://github.com/luigirizzo/netmap/pull/381,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/381#issuecomment-337856569,"While following issue #355 I saw this comment from @giuseppelettieri which matched an idea I was contemplating for a while - to be able to register a range of rings with NetMap. Such change will achieve:

easy monitoring of multiple RX queues, instead of creating a fd per ring and managing all of them.
easy implementation of spreading of rings between threads in pkt-gen - you just need to register a range instead of just one ring when you call nm_open and the threading code should just work from there on.

Due to the clever design of NetMap the needed patch to support this feature is surprisingly small and this PR is an attempt to achieve this functionality. It contains the following changes:

netmap_interp_ringid parses a new registration option NR_REG_RANGE_NIC which will update accordingly np_qfirst and np_qlast fields.
The range start is passed as it is now using nr_ringid and the end of the range is passed through the 12 MSBs in nr_flags
nm_open can parse an interface in the following format ethX-2-5 which will register rings [2, 5] to the descriptor.

I played a while with pkt-gen sending and receiving traffic from different ranges of queues, so may be a natural step is the modification mentioned in #355. But first as I'm not too familiar with the code of NetMap I would like to inquire NetMap's devs whether:

A range registration is something which will make NetMap easier to use and will be accepted?
There's a better way to pass the end of the range to the kernel?
Are there any obvious issues which could arise with the current code?","Hi @borislavmatvey. Thanks for the code.
We have considered this possibility before, and I think @tbarbette once mentioned that he has an implementation of it.
Unfortunately, there is a FreeBSD limitation that prevents an efficient implementation of this: in the poll/select callback (netmap_poll() in our case) you can put one thread on at most two wait queues (i.e., you can call nm_os_selrecord() at most two times). Since you may need to do that once for read events and another time for write events, you are left with just one wait queue for direction, meaning that you can choose to be woken up for just one kind of ""event"".
In netmap, threads may choose to be woken up if any ring is ready, or if a specific ring is ready. This can be implemented easily allocating one wait-queue per ring and a single wait-queue for all rings (for each direction). In the current code, the latter queue is used whenever you want to listen on more than one ring (see nm_si_user()). For your implementation, this means that all the threads listening on ranges (of size at least 2) would be registering on the same queue, and therefore they would wake-up whenever a ring becomes ready in any range. Not incorrect, but certainly wasteful and undesirable. This is why we only allow a thread to register for all rings, or for a single ring.
Note that the queue-number limitation does not exist on Linux, but the current code would still do the same thing even there.
I once thought of a different solution, involving a new kind of netmap port (in addtion to pipes, VALE ports, monitors, etc.): a ""subset"" port, created on-the-fly as needed, whose rings are a subset of the rings of another port. This would also give you more flexibility, such as the ability to attach single rings to VALE switches. This never went beyond the whiteboard, though, for lack of use cases that are really worth the trouble.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,381,2017-10-18T10:37:54Z,,2019-02-03T12:22:27Z,OPEN,False,37,1,3,https://github.com/borislavmatvey,Reg range support,2,[],https://github.com/luigirizzo/netmap/pull/381,https://github.com/borislavmatvey,3,https://github.com/luigirizzo/netmap/pull/381#issuecomment-337958557,"While following issue #355 I saw this comment from @giuseppelettieri which matched an idea I was contemplating for a while - to be able to register a range of rings with NetMap. Such change will achieve:

easy monitoring of multiple RX queues, instead of creating a fd per ring and managing all of them.
easy implementation of spreading of rings between threads in pkt-gen - you just need to register a range instead of just one ring when you call nm_open and the threading code should just work from there on.

Due to the clever design of NetMap the needed patch to support this feature is surprisingly small and this PR is an attempt to achieve this functionality. It contains the following changes:

netmap_interp_ringid parses a new registration option NR_REG_RANGE_NIC which will update accordingly np_qfirst and np_qlast fields.
The range start is passed as it is now using nr_ringid and the end of the range is passed through the 12 MSBs in nr_flags
nm_open can parse an interface in the following format ethX-2-5 which will register rings [2, 5] to the descriptor.

I played a while with pkt-gen sending and receiving traffic from different ranges of queues, so may be a natural step is the modification mentioned in #355. But first as I'm not too familiar with the code of NetMap I would like to inquire NetMap's devs whether:

A range registration is something which will make NetMap easier to use and will be accepted?
There's a better way to pass the end of the range to the kernel?
Are there any obvious issues which could arise with the current code?","Thank you for the elaborate answer.
It's sad - I played a little bit more and really like how natural it is to start different processes between multiple RX queues and you get it out of the box with nm_open. But that's life - sometimes it's not so beautiful :)",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,381,2017-10-18T10:37:54Z,,2019-02-03T12:22:27Z,OPEN,False,37,1,3,https://github.com/borislavmatvey,Reg range support,2,[],https://github.com/luigirizzo/netmap/pull/381,https://github.com/borislavmatvey,4,https://github.com/luigirizzo/netmap/pull/381#issuecomment-365661443,"While following issue #355 I saw this comment from @giuseppelettieri which matched an idea I was contemplating for a while - to be able to register a range of rings with NetMap. Such change will achieve:

easy monitoring of multiple RX queues, instead of creating a fd per ring and managing all of them.
easy implementation of spreading of rings between threads in pkt-gen - you just need to register a range instead of just one ring when you call nm_open and the threading code should just work from there on.

Due to the clever design of NetMap the needed patch to support this feature is surprisingly small and this PR is an attempt to achieve this functionality. It contains the following changes:

netmap_interp_ringid parses a new registration option NR_REG_RANGE_NIC which will update accordingly np_qfirst and np_qlast fields.
The range start is passed as it is now using nr_ringid and the end of the range is passed through the 12 MSBs in nr_flags
nm_open can parse an interface in the following format ethX-2-5 which will register rings [2, 5] to the descriptor.

I played a while with pkt-gen sending and receiving traffic from different ranges of queues, so may be a natural step is the modification mentioned in #355. But first as I'm not too familiar with the code of NetMap I would like to inquire NetMap's devs whether:

A range registration is something which will make NetMap easier to use and will be accepted?
There's a better way to pass the end of the range to the kernel?
Are there any obvious issues which could arise with the current code?","Hello, @giuseppelettieri,
I'm still playing with this change from time to time and I really like it. I'm willing to write an efficient implementation for the wake up of a range of rings on Linux.
May be to not hinder BSD performance this whole feature should be disabled on non-Linux.
If I succeed in doing this effort for Linux, would you reconsider merging the whole change?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,391,2017-11-02T21:01:55Z,2017-11-03T08:45:05Z,2017-11-03T08:45:09Z,MERGED,True,1,1,1,https://github.com/carlgsmith,mem: fix non-const casting of nr_buf_size,1,[],https://github.com/luigirizzo/netmap/pull/391,https://github.com/carlgsmith,1,https://github.com/luigirizzo/netmap/pull/391,"One some platforms this previously resulted in
nr_buf_size being initialised to random values
as only 16-bits of the 32 bit value was set.
The symtoms were that buffer offsets were
incorrectly calculated and invalid memory
accesses occurred.","One some platforms this previously resulted in
nr_buf_size being initialised to random values
as only 16-bits of the 32 bit value was set.
The symtoms were that buffer offsets were
incorrectly calculated and invalid memory
accesses occurred.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,391,2017-11-02T21:01:55Z,2017-11-03T08:45:05Z,2017-11-03T08:45:09Z,MERGED,True,1,1,1,https://github.com/carlgsmith,mem: fix non-const casting of nr_buf_size,1,[],https://github.com/luigirizzo/netmap/pull/391,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/391#issuecomment-341647070,"One some platforms this previously resulted in
nr_buf_size being initialised to random values
as only 16-bits of the 32 bit value was set.
The symtoms were that buffer offsets were
incorrectly calculated and invalid memory
accesses occurred.","good catch, thanks",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,395,2017-11-08T23:02:56Z,2017-11-09T16:06:17Z,2017-11-09T16:06:17Z,MERGED,True,7,6,1,https://github.com/aayla-secura,Fixes issue #392.,2,[],https://github.com/luigirizzo/netmap/pull/395,https://github.com/aayla-secura,1,https://github.com/luigirizzo/netmap/pull/395,"Changed:
sys/net/netmap_user.h:
nm_inject and nm_dispatch did not inject into/read from
rings in the range first_*x_ring+1 .. cur_*x_ring-1.","Changed:
sys/net/netmap_user.h:
nm_inject and nm_dispatch did not inject into/read from
rings in the range first_*x_ring+1 .. cur_*x_ring-1.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,410,2017-12-14T10:37:31Z,2017-12-14T12:44:41Z,2017-12-14T13:25:52Z,MERGED,True,22,7,4,https://github.com/dusancerhaty,Dma mapping fixes,4,[],https://github.com/luigirizzo/netmap/pull/410,https://github.com/dusancerhaty,1,https://github.com/luigirizzo/netmap/pull/410,Resolves issuess #407 and #409.,Resolves issuess #407 and #409.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,410,2017-12-14T10:37:31Z,2017-12-14T12:44:41Z,2017-12-14T13:25:52Z,MERGED,True,22,7,4,https://github.com/dusancerhaty,Dma mapping fixes,4,[],https://github.com/luigirizzo/netmap/pull/410,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/410#issuecomment-351674524,Resolves issuess #407 and #409.,(we need to check that this does not break compilation on FreeBSD),True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,410,2017-12-14T10:37:31Z,2017-12-14T12:44:41Z,2017-12-14T13:25:52Z,MERGED,True,22,7,4,https://github.com/dusancerhaty,Dma mapping fixes,4,[],https://github.com/luigirizzo/netmap/pull/410,https://github.com/dusancerhaty,3,https://github.com/luigirizzo/netmap/pull/410#issuecomment-351696437,Resolves issuess #407 and #409.,I fixed FreeBSD compilation by declaring netmap_sync_map() as noop macro.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,411,2017-12-15T12:37:56Z,2017-12-20T18:23:38Z,2018-01-08T14:40:28Z,MERGED,True,8,3,2,https://github.com/dusancerhaty,Sync dma for tx path,3,[],https://github.com/luigirizzo/netmap/pull/411,https://github.com/dusancerhaty,1,https://github.com/luigirizzo/netmap/pull/411,"Syncing of DMA maps now works for TX path also. Integrated and tested for IGB, as I have NICs using this driver only.
Relates to issue #409.","Syncing of DMA maps now works for TX path also. Integrated and tested for IGB, as I have NICs using this driver only.
Relates to issue #409.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,411,2017-12-15T12:37:56Z,2017-12-20T18:23:38Z,2018-01-08T14:40:28Z,MERGED,True,8,3,2,https://github.com/dusancerhaty,Sync dma for tx path,3,[],https://github.com/luigirizzo/netmap/pull/411,https://github.com/dusancerhaty,2,https://github.com/luigirizzo/netmap/pull/411#issuecomment-352008147,"Syncing of DMA maps now works for TX path also. Integrated and tested for IGB, as I have NICs using this driver only.
Relates to issue #409.","It has obvious performance impact also when not transmitting packets, only receiving. Do not merge, I try to rethink.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,411,2017-12-15T12:37:56Z,2017-12-20T18:23:38Z,2018-01-08T14:40:28Z,MERGED,True,8,3,2,https://github.com/dusancerhaty,Sync dma for tx path,3,[],https://github.com/luigirizzo/netmap/pull/411,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/411#issuecomment-352894200,"Syncing of DMA maps now works for TX path also. Integrated and tested for IGB, as I have NICs using this driver only.
Relates to issue #409.",The performance impact is not obvious to me. May you elaborate a bit?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,411,2017-12-15T12:37:56Z,2017-12-20T18:23:38Z,2018-01-08T14:40:28Z,MERGED,True,8,3,2,https://github.com/dusancerhaty,Sync dma for tx path,3,[],https://github.com/luigirizzo/netmap/pull/411,https://github.com/dusancerhaty,4,https://github.com/luigirizzo/netmap/pull/411#issuecomment-352989898,"Syncing of DMA maps now works for TX path also. Integrated and tested for IGB, as I have NICs using this driver only.
Relates to issue #409.","I tested it again intensively and the impact on performance didn't appear. I do not know what was the cause of performance impact before, but it seems it wasn't syncing of DMA buffers. I also changed the size passed to the netmap_sync_map() to the size of packet according to your suggestion.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,411,2017-12-15T12:37:56Z,2017-12-20T18:23:38Z,2018-01-08T14:40:28Z,MERGED,True,8,3,2,https://github.com/dusancerhaty,Sync dma for tx path,3,[],https://github.com/luigirizzo/netmap/pull/411,https://github.com/giuseppelettieri,5,https://github.com/luigirizzo/netmap/pull/411#issuecomment-353001087,"Syncing of DMA maps now works for TX path also. Integrated and tested for IGB, as I have NICs using this driver only.
Relates to issue #409.","I can merge, if you agree.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,411,2017-12-15T12:37:56Z,2017-12-20T18:23:38Z,2018-01-08T14:40:28Z,MERGED,True,8,3,2,https://github.com/dusancerhaty,Sync dma for tx path,3,[],https://github.com/luigirizzo/netmap/pull/411,https://github.com/dusancerhaty,6,https://github.com/luigirizzo/netmap/pull/411#issuecomment-353132064,"Syncing of DMA maps now works for TX path also. Integrated and tested for IGB, as I have NICs using this driver only.
Relates to issue #409.","Yes, I agree.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/markwebster,1,https://github.com/luigirizzo/netmap/pull/413,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?","On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/413#issuecomment-353332596,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?","Yes, this breaks compilation on FreeBSD",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/markwebster,3,https://github.com/luigirizzo/netmap/pull/413#issuecomment-353392692,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?",Can you paste the build error please?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/413#issuecomment-353551380,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?","cc -O2 -pipe -Werror -Wall -Wunused-function -I ../../sys -I ../../apps/include -Wextra -DNO_PCAP    pkt-gen.c  -lpthread -lm -o pkt-gen
pkt-gen.c:216:20: error: field has incomplete type 'struct ether_arp'
                struct ether_arp arp4;
                                 ^
pkt-gen.c:216:10: note: forward declaration of 'struct ether_arp'
                struct ether_arp arp4;
                       ^
pkt-gen.c:687:34: error: use of undeclared identifier 'PF_PACKET'
                if (!sdl || sdl->sdl_family != PF_PACKET)
                                               ^
pkt-gen.c:804:20: error: no member named 'ipv4' in 'struct pkt'
        memcpy(&ip, &pkt->ipv4.ip, sizeof(ip));
                     ~~~  ^
pkt-gen.c:805:21: error: no member named 'ipv4' in 'struct pkt'
        memcpy(&udp, &pkt->ipv4.udp, sizeof(udp));
                      ~~~  ^
pkt-gen.c:885:15: error: no member named 'ipv4' in 'struct pkt'
        memcpy(&pkt->ipv4.ip, &ip, sizeof(ip));
                ~~~  ^
pkt-gen.c:886:15: error: no member named 'ipv4' in 'struct pkt'
        memcpy(&pkt->ipv4.udp, &udp, sizeof(udp));
                ~~~  ^
pkt-gen.c:902:21: error: no member named 'ipv6' in 'struct pkt'
        memcpy(&ip6, &pkt->ipv6.ip, sizeof(ip6));
                      ~~~  ^
pkt-gen.c:903:21: error: no member named 'ipv6' in 'struct pkt'
        memcpy(&udp, &pkt->ipv6.udp, sizeof(udp));
                      ~~~  ^
pkt-gen.c:972:15: error: no member named 'ipv6' in 'struct pkt'
        memcpy(&pkt->ipv6.ip, &ip6, sizeof(ip6));
                ~~~  ^
pkt-gen.c:973:15: error: no member named 'ipv6' in 'struct pkt'
        memcpy(&pkt->ipv6.udp, &udp, sizeof(udp));
                ~~~  ^
pkt-gen.c:1035:18: error: no member named 'ipv4' in 'struct pkt'
                bcopy(payload, PKT(pkt, body, targ->g->af) + i, l0);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
pkt-gen.c:221:29: note: expanded from macro 'PKT'
    ((af) == AF_INET ? (p)->ipv4.f: (p)->ipv6.f)
                       ~~~  ^
pkt-gen.c:1035:18: error: no member named 'ipv6' in 'struct pkt'
                bcopy(payload, PKT(pkt, body, targ->g->af) + i, l0);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
pkt-gen.c:221:42: note: expanded from macro 'PKT'
    ((af) == AF_INET ? (p)->ipv4.f: (p)->ipv6.f)
                                    ~~~  ^
pkt-gen.c:1037:2: error: no member named 'ipv4' in 'struct pkt'
        PKT(pkt, body, targ->g->af)[i - 1] = '\0';
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
pkt-gen.c:221:29: note: expanded from macro 'PKT'
    ((af) == AF_INET ? (p)->ipv4.f: (p)->ipv6.f)
                       ~~~  ^
pkt-gen.c:1037:2: error: no member named 'ipv6' in 'struct pkt'
        PKT(pkt, body, targ->g->af)[i - 1] = '\0';
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
pkt-gen.c:221:42: note: expanded from macro 'PKT'
    ((af) == AF_INET ? (p)->ipv4.f: (p)->ipv6.f)
                                    ~~~  ^
pkt-gen.c:1046:21: error: no member named 'ipv4' in 'struct pkt'
                memcpy(&ip, &pkt->ipv4.ip, sizeof(ip));
                             ~~~  ^
pkt-gen.c:1047:19: error: no member named 'ipv4' in 'struct pkt'
                udp_ptr = &pkt->ipv4.udp;
                           ~~~  ^
pkt-gen.c:1060:16: error: no member named 'ipv4' in 'struct pkt'
                memcpy(&pkt->ipv4.ip, &ip, sizeof(ip));
                        ~~~  ^
pkt-gen.c:1063:22: error: no member named 'ipv4' in 'struct pkt'
                memcpy(&ip6, &pkt->ipv4.ip, sizeof(ip6));
                              ~~~  ^
pkt-gen.c:1064:19: error: no member named 'ipv6' in 'struct pkt'
                udp_ptr = &pkt->ipv6.udp;
                           ~~~  ^
fatal error: too many errors emitted, stopping now [-ferror-limit=]",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/markwebster,5,https://github.com/luigirizzo/netmap/pull/413#issuecomment-353555969,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?",Try now?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/vmaffione,6,https://github.com/luigirizzo/netmap/pull/413#issuecomment-353561334,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?","pkt-gen.c:1271:33: error: use of undeclared identifier 'ETH_ALEN'
                memset(eh->ether_dhost, 0xff, ETH_ALEN);

FYI, here there are some ready to use FreeBSD VM images for many hypervisors
https://download.freebsd.org/ftp/releases/VM-IMAGES/11.1-RELEASE/amd64/Latest/
this could speed up your tests.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/markwebster,7,https://github.com/luigirizzo/netmap/pull/413#issuecomment-353562072,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?","Cool, I'll do that next time. It should be fixed now",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/giuseppelettieri,8,https://github.com/luigirizzo/netmap/pull/413#issuecomment-353567759,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?","I would merge the contribution now, then fix the hardcoded 6 later.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/markwebster,9,https://github.com/luigirizzo/netmap/pull/413#issuecomment-354599310,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?",Sorry about the delay. I've updated this now!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/vmaffione,10,https://github.com/luigirizzo/netmap/pull/413#issuecomment-359429642,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?",any news on this?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,413,2017-12-19T05:16:48Z,,2019-02-03T12:22:27Z,OPEN,False,216,31,1,https://github.com/markwebster,Add (G)ARP sender to fix switch broadcast storms,8,[],https://github.com/luigirizzo/netmap/pull/413,https://github.com/markwebster,11,https://github.com/luigirizzo/netmap/pull/413#issuecomment-360405576,"On many switches it's basically impossible to use pkt-gen without sending regular ARPs to maintain association with the switch port. When the PHY resets into netmap mode, the association is usually lost, causing traffic to be broadcast to all ports. This breaks the receiver and destroys network performance.
Also added link state auto wait option when you specify -w0.
I have tested on Linux boxes only, so there is a chance of broken builds for other platforms. Could someone check FreeBSD etc?","I'm travelling for the next 4 weeks. If I get a chance to do any coding, I'll follow this up. Sorry!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,418,2017-12-22T12:59:28Z,2017-12-22T13:31:09Z,2017-12-22T13:31:09Z,MERGED,True,12,0,1,https://github.com/jmtilli,linux: promiscuous mode improvements to LINUX/README,1,[],https://github.com/luigirizzo/netmap/pull/418,https://github.com/jmtilli,1,https://github.com/luigirizzo/netmap/pull/418,"Document that promiscuous mode may need to be turned on after starting
the netmap application. This may require temporarily turning off the
mode.","Document that promiscuous mode may need to be turned on after starting
the netmap application. This may require temporarily turning off the
mode.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,421,2017-12-26T07:37:00Z,,2019-02-03T12:22:27Z,OPEN,False,3,4,3,https://github.com/nanjj,Changed NM_BRIDGES to 256,1,[],https://github.com/luigirizzo/netmap/pull/421,https://github.com/nanjj,1,https://github.com/luigirizzo/netmap/pull/421,"Added GTAGS to .gitignore and fixed vale port max not 254 issue #398
To NM_BRIDGES default to 256 because the original default value 8
is too small for even test, and 256 is OK for hypervisor usage.","Added GTAGS to .gitignore and fixed vale port max not 254 issue #398
To NM_BRIDGES default to 256 because the original default value 8
is too small for even test, and 256 is OK for hypervisor usage.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,440,2018-01-31T16:40:57Z,2018-01-31T20:16:57Z,2018-01-31T20:16:57Z,MERGED,True,41,20,6,https://github.com/mhorne,Add descriptions to undocumented sysctls,2,[],https://github.com/luigirizzo/netmap/pull/440,https://github.com/mhorne,1,https://github.com/luigirizzo/netmap/pull/440,"There are some efforts in FreeBSD to decrease the number of sysctls with missing descriptions. This patch adds simple descriptions to all of those without them. I figure it is better to make the change here rather than in the FreeBSD source. Additionally, I found there were a couple of sysctls missing from the netmap man page, so I added those as well. Since I am unfamiliar with the netmap source I would appreciate any corrections needed for my descriptions.","There are some efforts in FreeBSD to decrease the number of sysctls with missing descriptions. This patch adds simple descriptions to all of those without them. I figure it is better to make the change here rather than in the FreeBSD source. Additionally, I found there were a couple of sysctls missing from the netmap man page, so I added those as well. Since I am unfamiliar with the netmap source I would appreciate any corrections needed for my descriptions.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,440,2018-01-31T16:40:57Z,2018-01-31T20:16:57Z,2018-01-31T20:16:57Z,MERGED,True,41,20,6,https://github.com/mhorne,Add descriptions to undocumented sysctls,2,[],https://github.com/luigirizzo/netmap/pull/440,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/440#issuecomment-361996174,"There are some efforts in FreeBSD to decrease the number of sysctls with missing descriptions. This patch adds simple descriptions to all of those without them. I figure it is better to make the change here rather than in the FreeBSD source. Additionally, I found there were a couple of sysctls missing from the netmap man page, so I added those as well. Since I am unfamiliar with the netmap source I would appreciate any corrections needed for my descriptions.","Thanks for looking into this.
Btw we are still looking for someone that can commit the updates on FreeBSD (as luigi can't).
If you can suggest anyone we would appreciate that.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,440,2018-01-31T16:40:57Z,2018-01-31T20:16:57Z,2018-01-31T20:16:57Z,MERGED,True,41,20,6,https://github.com/mhorne,Add descriptions to undocumented sysctls,2,[],https://github.com/luigirizzo/netmap/pull/440,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/440#issuecomment-362022938,"There are some efforts in FreeBSD to decrease the number of sysctls with missing descriptions. This patch adds simple descriptions to all of those without them. I figure it is better to make the change here rather than in the FreeBSD source. Additionally, I found there were a couple of sysctls missing from the netmap man page, so I added those as well. Since I am unfamiliar with the netmap source I would appreciate any corrections needed for my descriptions.","Yes, thanks
â€¦
On Jan 31, 2018 7:14 PM, ""Mitchell Horne"" ***@***.***> wrote:
 ***@***.**** commented on this pull request.
 ------------------------------

 In sys/dev/netmap/netmap.c
 <#440 (comment)>:

 > +
 +SYSCTL_INT(_dev_netmap, OID_AUTO, flags, CTLFLAG_RW, &netmap_flags, 0,
 +    ""Debug flags"");
 +SYSCTL_INT(_dev_netmap, OID_AUTO, fwd, CTLFLAG_RW, &netmap_fwd, 0,
 +    ""Force NR_FORWARD mode"");
 +SYSCTL_INT(_dev_netmap, OID_AUTO, admode, CTLFLAG_RW, &netmap_admode, 0,
 +    ""Adapter mode. 0 selects the best option available,""
 +    ""1 forces native adapter, 2 forces emulated adapter"");
 +SYSCTL_INT(_dev_netmap, OID_AUTO, generic_mit, CTLFLAG_RW, &netmap_generic_mit,
 +    0, ""RX notification interval in nanoseconds"");
 +SYSCTL_INT(_dev_netmap, OID_AUTO, generic_ringsize, CTLFLAG_RW,
 +    &netmap_generic_ringsize, 0, ""Queue size"");
 +SYSCTL_INT(_dev_netmap, OID_AUTO, generic_rings, CTLFLAG_RW,
 +    &netmap_generic_rings, 0, ""Number of queues for generic adapters"");
 +SYSCTL_INT(_dev_netmap, OID_AUTO, generic_txqdisc, CTLFLAG_RW,
 +    &netmap_generic_txqdisc, 0, ""Use qdisc for generic adapters"");

 Fine to add this in the same commit?

 â€”
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#440 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AEsSwdySnxyAc-bxJep11xKzX1ww4LJqks5tQK2dgaJpZM4R0R6x>
 .",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,440,2018-01-31T16:40:57Z,2018-01-31T20:16:57Z,2018-01-31T20:16:57Z,MERGED,True,41,20,6,https://github.com/mhorne,Add descriptions to undocumented sysctls,2,[],https://github.com/luigirizzo/netmap/pull/440,https://github.com/mhorne,4,https://github.com/luigirizzo/netmap/pull/440#issuecomment-362032185,"There are some efforts in FreeBSD to decrease the number of sysctls with missing descriptions. This patch adds simple descriptions to all of those without them. I figure it is better to make the change here rather than in the FreeBSD source. Additionally, I found there were a couple of sysctls missing from the netmap man page, so I added those as well. Since I am unfamiliar with the netmap source I would appreciate any corrections needed for my descriptions.","Updated to incorporate your review comments.
Unfortunately since I am new to FreeBSD, I can't recommend anyone who would be willing to pull updates consistently. However, if you would like to get it updated this one time I would be able to get that done.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,442,2018-02-02T05:13:39Z,2018-02-08T16:38:43Z,2018-02-08T16:38:43Z,MERGED,True,596,1,3,https://github.com/bvital1976,Added vmxnet3 support,5,[],https://github.com/luigirizzo/netmap/pull/442,https://github.com/bvital1976,1,https://github.com/luigirizzo/netmap/pull/442,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,442,2018-02-02T05:13:39Z,2018-02-08T16:38:43Z,2018-02-08T16:38:43Z,MERGED,True,596,1,3,https://github.com/bvital1976,Added vmxnet3 support,5,[],https://github.com/luigirizzo/netmap/pull/442,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/442#issuecomment-363052874,,"Thanks for the contribution. We need to split it in two, however. The patch to the original vmxnet3 driver needs to be merged via another route. In the https://github.com/giuseppelettieri/linux-pspat repository you will find several netmap-x.y branches. Each branch contains the driver modifications for the corresponding vanilla linux release. The patches distributed with netmap are extracted from there.
You should apply your modifications to vmxnet3 into the proper netmap-x.y branch (the one for the kernel version you used) and create a pull request for that. It would also be nice if you could backward/forward port the modifications as far as possible, but we can leave this for later. Once that is in place, we can consider the rest of the netmap driver.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,442,2018-02-02T05:13:39Z,2018-02-08T16:38:43Z,2018-02-08T16:38:43Z,MERGED,True,596,1,3,https://github.com/bvital1976,Added vmxnet3 support,5,[],https://github.com/luigirizzo/netmap/pull/442,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/442#issuecomment-363056106,,"Would you mind formatting the code with the following command?
clang-format -i -style=file LINUX/if_vmxnet3_netmap.h",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,442,2018-02-02T05:13:39Z,2018-02-08T16:38:43Z,2018-02-08T16:38:43Z,MERGED,True,596,1,3,https://github.com/bvital1976,Added vmxnet3 support,5,[],https://github.com/luigirizzo/netmap/pull/442,https://github.com/giuseppelettieri,4,https://github.com/luigirizzo/netmap/pull/442#issuecomment-364170653,,"OK, I think we can merge this now. Maybe the performance can be improved, but we can work on that later.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,450,2018-02-12T11:17:59Z,2018-02-12T21:19:12Z,2018-02-12T21:19:13Z,MERGED,True,2,0,1,https://github.com/DirkHoffmann,_BSD_SOURCE is already defined in /usr/include/features.h (CentOS 7.4),1,[],https://github.com/luigirizzo/netmap/pull/450,https://github.com/DirkHoffmann,1,https://github.com/luigirizzo/netmap/pull/450,"My build on CentOS 7.4 failed with the error
make[1]: Entering directory `/build/netmap-sl74/build-apps/dedup'
cc -O2 -pipe -g -Werror -Wall -Wunused-function -I /build/netmap-sl74/LINUX/../sys -I /build/netmap-sl74/LINUX/../apps/include -Wextra   -c -o dedup.o /build/netmap-sl74/LINUX/../apps/dedup/dedup.c
In file included from /build/netmap-sl74/LINUX/../apps/dedup/dedup.c:6:0:
/build/netmap-sl74/LINUX/../apps/dedup/dedup.h:4:0: error: ""_BSD_SOURCE"" redefined [-Werror]
 #define _BSD_SOURCE
 ^
In file included from /usr/include/stdio.h:27:0,
                 from /build/netmap-sl74/LINUX/../apps/dedup/dedup.c:1:
/usr/include/features.h:188:0: note: this is the location of the previous definition
 # define _BSD_SOURCE 1
 ^
cc1: all warnings being treated as errors
make[1]: *** [dedup.o] Error 1
make[1]: Leaving directory `/build/netmap-sl74/build-apps/dedup'
make: *** [build-app-dedup] Error 2

I have no idea, if my patch lets me compile the code now. Please advise, if you want to do it in another way.","My build on CentOS 7.4 failed with the error
make[1]: Entering directory `/build/netmap-sl74/build-apps/dedup'
cc -O2 -pipe -g -Werror -Wall -Wunused-function -I /build/netmap-sl74/LINUX/../sys -I /build/netmap-sl74/LINUX/../apps/include -Wextra   -c -o dedup.o /build/netmap-sl74/LINUX/../apps/dedup/dedup.c
In file included from /build/netmap-sl74/LINUX/../apps/dedup/dedup.c:6:0:
/build/netmap-sl74/LINUX/../apps/dedup/dedup.h:4:0: error: ""_BSD_SOURCE"" redefined [-Werror]
 #define _BSD_SOURCE
 ^
In file included from /usr/include/stdio.h:27:0,
                 from /build/netmap-sl74/LINUX/../apps/dedup/dedup.c:1:
/usr/include/features.h:188:0: note: this is the location of the previous definition
 # define _BSD_SOURCE 1
 ^
cc1: all warnings being treated as errors
make[1]: *** [dedup.o] Error 1
make[1]: Leaving directory `/build/netmap-sl74/build-apps/dedup'
make: *** [build-app-dedup] Error 2

I have no idea, if my patch lets me compile the code now. Please advise, if you want to do it in another way.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,450,2018-02-12T11:17:59Z,2018-02-12T21:19:12Z,2018-02-12T21:19:13Z,MERGED,True,2,0,1,https://github.com/DirkHoffmann,_BSD_SOURCE is already defined in /usr/include/features.h (CentOS 7.4),1,[],https://github.com/luigirizzo/netmap/pull/450,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/450#issuecomment-365065376,"My build on CentOS 7.4 failed with the error
make[1]: Entering directory `/build/netmap-sl74/build-apps/dedup'
cc -O2 -pipe -g -Werror -Wall -Wunused-function -I /build/netmap-sl74/LINUX/../sys -I /build/netmap-sl74/LINUX/../apps/include -Wextra   -c -o dedup.o /build/netmap-sl74/LINUX/../apps/dedup/dedup.c
In file included from /build/netmap-sl74/LINUX/../apps/dedup/dedup.c:6:0:
/build/netmap-sl74/LINUX/../apps/dedup/dedup.h:4:0: error: ""_BSD_SOURCE"" redefined [-Werror]
 #define _BSD_SOURCE
 ^
In file included from /usr/include/stdio.h:27:0,
                 from /build/netmap-sl74/LINUX/../apps/dedup/dedup.c:1:
/usr/include/features.h:188:0: note: this is the location of the previous definition
 # define _BSD_SOURCE 1
 ^
cc1: all warnings being treated as errors
make[1]: *** [dedup.o] Error 1
make[1]: Leaving directory `/build/netmap-sl74/build-apps/dedup'
make: *** [build-app-dedup] Error 2

I have no idea, if my patch lets me compile the code now. Please advise, if you want to do it in another way.","That should fix it, thanks.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,468,2018-03-28T14:53:39Z,2018-08-17T23:46:07Z,2018-08-17T23:46:07Z,CLOSED,False,7,0,1,https://github.com/wangbojing,Update bsd_glue.h,1,[],https://github.com/luigirizzo/netmap/pull/468,https://github.com/wangbojing,1,https://github.com/luigirizzo/netmap/pull/468,kernel 4.11.0 atomic convert to refcount.,kernel 4.11.0 atomic convert to refcount.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,468,2018-03-28T14:53:39Z,2018-08-17T23:46:07Z,2018-08-17T23:46:07Z,CLOSED,False,7,0,1,https://github.com/wangbojing,Update bsd_glue.h,1,[],https://github.com/luigirizzo/netmap/pull/468,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/468#issuecomment-377603032,kernel 4.11.0 atomic convert to refcount.,"Why is this needed? Do you get a compilation failure?
In any case we have a macro NETMAP_LINUX_HAVE_REFCOUNT_T, we never check the versions on linux.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,476,2018-04-17T15:09:36Z,2018-04-24T09:57:49Z,2022-05-13T13:52:17Z,MERGED,True,1119,1,3,https://github.com/andrewbonney,Add support for Mellanox ConnectX-4 / ConnectX-5 cards (v3.3 mlx5 driver),3,[],https://github.com/luigirizzo/netmap/pull/476,https://github.com/andrewbonney,1,https://github.com/luigirizzo/netmap/pull/476,"Hi,
As previously discussed, please find attached patches for the Mellanox mlx5 Ethernet driver for use with ConnectX-4 and ConnectX-5 cards (Resolves #210).
As we build things a little differently internally I've refactored our internal code to suit the netmap codebase, following the same sort of method used to pull in external Intel drivers for patching (as opposed to patching the kernel source).
Whilst I am able to build this, I haven't yet tackled the necessary changes to LINUX/default-config.mak.in_ to enable downloading and patching of the relevant tarball. I'm hoping the details below will help with this, and I'm happy to make further changes as required to make it fit in.
Build process:

Download tgz from http://www.mellanox.com/downloads/Drivers/mlnx-en-3.3-1.0.0.0.tgz
Unpack, then unpack from the tgz inside SOURCES/
Patch (patch --posix --quiet --force -p1 < patches/mellanox--mlx5--3.3;)
Run scripts/mlnx_en_patch.sh --without-mlx4 before make (using '-j<x>' to speed up as necessary) - this deals with detecting and patching for the current kernel within the Mellanox driver.
This builds three ko files but only mlx_compat.ko and mlx5_core.ko are required for the ethernet driver.

Proposed resulting additions to resultant drivers.mak
mlx5@conf := CONFIG_MLX5
mlx5@src := tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/ext-drivers/mlnx-en-3.3-1.0.0.0.tgz && tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/mlnx-en-3.3-1.0.0.0/SOURCES/mlnx-en_3.3.orig.tar.gz && ln -s mlnx-en-3.3 mlx5
mlx5@patch := patches/mellanox--mlx5--3.3

The patches are against Mellanox driver version 3.3-1, and have been tested against various Linux kernels from 3.13 upwards, although not all the way to the most recent one. Our recent builds have been tested mostly against kernel 4.4 using Ubuntu 16.04.
In time these could be ported onto the version of the mlx5 driver which is bundled with the Linux kernel, but there isn't an exact match for v3.3-1 of the driver within the kernel, so I've not done this as yet.
I hope this is useful, and please let me know of any further modifications which might be required in order to assist with merging it.
Thanks","Hi,
As previously discussed, please find attached patches for the Mellanox mlx5 Ethernet driver for use with ConnectX-4 and ConnectX-5 cards (Resolves #210).
As we build things a little differently internally I've refactored our internal code to suit the netmap codebase, following the same sort of method used to pull in external Intel drivers for patching (as opposed to patching the kernel source).
Whilst I am able to build this, I haven't yet tackled the necessary changes to LINUX/default-config.mak.in_ to enable downloading and patching of the relevant tarball. I'm hoping the details below will help with this, and I'm happy to make further changes as required to make it fit in.
Build process:

Download tgz from http://www.mellanox.com/downloads/Drivers/mlnx-en-3.3-1.0.0.0.tgz
Unpack, then unpack from the tgz inside SOURCES/
Patch (patch --posix --quiet --force -p1 < patches/mellanox--mlx5--3.3;)
Run scripts/mlnx_en_patch.sh --without-mlx4 before make (using '-j<x>' to speed up as necessary) - this deals with detecting and patching for the current kernel within the Mellanox driver.
This builds three ko files but only mlx_compat.ko and mlx5_core.ko are required for the ethernet driver.

Proposed resulting additions to resultant drivers.mak
mlx5@conf := CONFIG_MLX5
mlx5@src := tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/ext-drivers/mlnx-en-3.3-1.0.0.0.tgz && tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/mlnx-en-3.3-1.0.0.0/SOURCES/mlnx-en_3.3.orig.tar.gz && ln -s mlnx-en-3.3 mlx5
mlx5@patch := patches/mellanox--mlx5--3.3

The patches are against Mellanox driver version 3.3-1, and have been tested against various Linux kernels from 3.13 upwards, although not all the way to the most recent one. Our recent builds have been tested mostly against kernel 4.4 using Ubuntu 16.04.
In time these could be ported onto the version of the mlx5 driver which is bundled with the Linux kernel, but there isn't an exact match for v3.3-1 of the driver within the kernel, so I've not done this as yet.
I hope this is useful, and please let me know of any further modifications which might be required in order to assist with merging it.
Thanks",True,"{'THUMBS_UP': ['https://github.com/kierank', 'https://github.com/lin7sh']}"
luigirizzo/netmap,https://github.com/luigirizzo/netmap,476,2018-04-17T15:09:36Z,2018-04-24T09:57:49Z,2022-05-13T13:52:17Z,MERGED,True,1119,1,3,https://github.com/andrewbonney,Add support for Mellanox ConnectX-4 / ConnectX-5 cards (v3.3 mlx5 driver),3,[],https://github.com/luigirizzo/netmap/pull/476,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/476#issuecomment-383603400,"Hi,
As previously discussed, please find attached patches for the Mellanox mlx5 Ethernet driver for use with ConnectX-4 and ConnectX-5 cards (Resolves #210).
As we build things a little differently internally I've refactored our internal code to suit the netmap codebase, following the same sort of method used to pull in external Intel drivers for patching (as opposed to patching the kernel source).
Whilst I am able to build this, I haven't yet tackled the necessary changes to LINUX/default-config.mak.in_ to enable downloading and patching of the relevant tarball. I'm hoping the details below will help with this, and I'm happy to make further changes as required to make it fit in.
Build process:

Download tgz from http://www.mellanox.com/downloads/Drivers/mlnx-en-3.3-1.0.0.0.tgz
Unpack, then unpack from the tgz inside SOURCES/
Patch (patch --posix --quiet --force -p1 < patches/mellanox--mlx5--3.3;)
Run scripts/mlnx_en_patch.sh --without-mlx4 before make (using '-j<x>' to speed up as necessary) - this deals with detecting and patching for the current kernel within the Mellanox driver.
This builds three ko files but only mlx_compat.ko and mlx5_core.ko are required for the ethernet driver.

Proposed resulting additions to resultant drivers.mak
mlx5@conf := CONFIG_MLX5
mlx5@src := tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/ext-drivers/mlnx-en-3.3-1.0.0.0.tgz && tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/mlnx-en-3.3-1.0.0.0/SOURCES/mlnx-en_3.3.orig.tar.gz && ln -s mlnx-en-3.3 mlx5
mlx5@patch := patches/mellanox--mlx5--3.3

The patches are against Mellanox driver version 3.3-1, and have been tested against various Linux kernels from 3.13 upwards, although not all the way to the most recent one. Our recent builds have been tested mostly against kernel 4.4 using Ubuntu 16.04.
In time these could be ported onto the version of the mlx5 driver which is bundled with the Linux kernel, but there isn't an exact match for v3.3-1 of the driver within the kernel, so I've not done this as yet.
I hope this is useful, and please let me know of any further modifications which might be required in order to assist with merging it.
Thanks","Hi,
I have pushed the new branch, mlx5-bbc, with a tentative integration of Mellanox build system with our own. May you please give it a try? You should be able to compile with
./configure --drivers=mlx5
make

By the way, the driver fails to compile on 4.13 an beyond.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,476,2018-04-17T15:09:36Z,2018-04-24T09:57:49Z,2022-05-13T13:52:17Z,MERGED,True,1119,1,3,https://github.com/andrewbonney,Add support for Mellanox ConnectX-4 / ConnectX-5 cards (v3.3 mlx5 driver),3,[],https://github.com/luigirizzo/netmap/pull/476,https://github.com/andrewbonney,3,https://github.com/luigirizzo/netmap/pull/476#issuecomment-383855031,"Hi,
As previously discussed, please find attached patches for the Mellanox mlx5 Ethernet driver for use with ConnectX-4 and ConnectX-5 cards (Resolves #210).
As we build things a little differently internally I've refactored our internal code to suit the netmap codebase, following the same sort of method used to pull in external Intel drivers for patching (as opposed to patching the kernel source).
Whilst I am able to build this, I haven't yet tackled the necessary changes to LINUX/default-config.mak.in_ to enable downloading and patching of the relevant tarball. I'm hoping the details below will help with this, and I'm happy to make further changes as required to make it fit in.
Build process:

Download tgz from http://www.mellanox.com/downloads/Drivers/mlnx-en-3.3-1.0.0.0.tgz
Unpack, then unpack from the tgz inside SOURCES/
Patch (patch --posix --quiet --force -p1 < patches/mellanox--mlx5--3.3;)
Run scripts/mlnx_en_patch.sh --without-mlx4 before make (using '-j<x>' to speed up as necessary) - this deals with detecting and patching for the current kernel within the Mellanox driver.
This builds three ko files but only mlx_compat.ko and mlx5_core.ko are required for the ethernet driver.

Proposed resulting additions to resultant drivers.mak
mlx5@conf := CONFIG_MLX5
mlx5@src := tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/ext-drivers/mlnx-en-3.3-1.0.0.0.tgz && tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/mlnx-en-3.3-1.0.0.0/SOURCES/mlnx-en_3.3.orig.tar.gz && ln -s mlnx-en-3.3 mlx5
mlx5@patch := patches/mellanox--mlx5--3.3

The patches are against Mellanox driver version 3.3-1, and have been tested against various Linux kernels from 3.13 upwards, although not all the way to the most recent one. Our recent builds have been tested mostly against kernel 4.4 using Ubuntu 16.04.
In time these could be ported onto the version of the mlx5 driver which is bundled with the Linux kernel, but there isn't an exact match for v3.3-1 of the driver within the kernel, so I've not done this as yet.
I hope this is useful, and please let me know of any further modifications which might be required in order to assist with merging it.
Thanks","Thanks Giuseppe. I've tested that and can confirm it compiles and installs correctly. The driver brings the NIC online and packet transmission / reception appear to be working as expected.
I did also try adding a driver suffix but that didn't appear to work. Adding 'NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@' to the build line as-per the Intel driver case seems to sort this out.
The driver we worked against was originally released in September 2016 so I'm not particularly surprised there's the odd issue against kernel 4.13. Hopefully once we've got this integrated it can be ported forwards onto some newer Mellanox driver versions, either by ourselves or other contributors.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,476,2018-04-17T15:09:36Z,2018-04-24T09:57:49Z,2022-05-13T13:52:17Z,MERGED,True,1119,1,3,https://github.com/andrewbonney,Add support for Mellanox ConnectX-4 / ConnectX-5 cards (v3.3 mlx5 driver),3,[],https://github.com/luigirizzo/netmap/pull/476,https://github.com/giuseppelettieri,4,https://github.com/luigirizzo/netmap/pull/476#issuecomment-383875028,"Hi,
As previously discussed, please find attached patches for the Mellanox mlx5 Ethernet driver for use with ConnectX-4 and ConnectX-5 cards (Resolves #210).
As we build things a little differently internally I've refactored our internal code to suit the netmap codebase, following the same sort of method used to pull in external Intel drivers for patching (as opposed to patching the kernel source).
Whilst I am able to build this, I haven't yet tackled the necessary changes to LINUX/default-config.mak.in_ to enable downloading and patching of the relevant tarball. I'm hoping the details below will help with this, and I'm happy to make further changes as required to make it fit in.
Build process:

Download tgz from http://www.mellanox.com/downloads/Drivers/mlnx-en-3.3-1.0.0.0.tgz
Unpack, then unpack from the tgz inside SOURCES/
Patch (patch --posix --quiet --force -p1 < patches/mellanox--mlx5--3.3;)
Run scripts/mlnx_en_patch.sh --without-mlx4 before make (using '-j<x>' to speed up as necessary) - this deals with detecting and patching for the current kernel within the Mellanox driver.
This builds three ko files but only mlx_compat.ko and mlx5_core.ko are required for the ethernet driver.

Proposed resulting additions to resultant drivers.mak
mlx5@conf := CONFIG_MLX5
mlx5@src := tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/ext-drivers/mlnx-en-3.3-1.0.0.0.tgz && tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/mlnx-en-3.3-1.0.0.0/SOURCES/mlnx-en_3.3.orig.tar.gz && ln -s mlnx-en-3.3 mlx5
mlx5@patch := patches/mellanox--mlx5--3.3

The patches are against Mellanox driver version 3.3-1, and have been tested against various Linux kernels from 3.13 upwards, although not all the way to the most recent one. Our recent builds have been tested mostly against kernel 4.4 using Ubuntu 16.04.
In time these could be ported onto the version of the mlx5 driver which is bundled with the Linux kernel, but there isn't an exact match for v3.3-1 of the driver within the kernel, so I've not done this as yet.
I hope this is useful, and please let me know of any further modifications which might be required in order to assist with merging it.
Thanks","Yep, I forgot about the suffix. Added now, and merged. Thanks!",True,"{'THUMBS_UP': ['https://github.com/andrewbonney', 'https://github.com/kierank', 'https://github.com/lin7sh']}"
luigirizzo/netmap,https://github.com/luigirizzo/netmap,476,2018-04-17T15:09:36Z,2018-04-24T09:57:49Z,2022-05-13T13:52:17Z,MERGED,True,1119,1,3,https://github.com/andrewbonney,Add support for Mellanox ConnectX-4 / ConnectX-5 cards (v3.3 mlx5 driver),3,[],https://github.com/luigirizzo/netmap/pull/476,https://github.com/Fr3DBr,5,https://github.com/luigirizzo/netmap/pull/476#issuecomment-1126070991,"Hi,
As previously discussed, please find attached patches for the Mellanox mlx5 Ethernet driver for use with ConnectX-4 and ConnectX-5 cards (Resolves #210).
As we build things a little differently internally I've refactored our internal code to suit the netmap codebase, following the same sort of method used to pull in external Intel drivers for patching (as opposed to patching the kernel source).
Whilst I am able to build this, I haven't yet tackled the necessary changes to LINUX/default-config.mak.in_ to enable downloading and patching of the relevant tarball. I'm hoping the details below will help with this, and I'm happy to make further changes as required to make it fit in.
Build process:

Download tgz from http://www.mellanox.com/downloads/Drivers/mlnx-en-3.3-1.0.0.0.tgz
Unpack, then unpack from the tgz inside SOURCES/
Patch (patch --posix --quiet --force -p1 < patches/mellanox--mlx5--3.3;)
Run scripts/mlnx_en_patch.sh --without-mlx4 before make (using '-j<x>' to speed up as necessary) - this deals with detecting and patching for the current kernel within the Mellanox driver.
This builds three ko files but only mlx_compat.ko and mlx5_core.ko are required for the ethernet driver.

Proposed resulting additions to resultant drivers.mak
mlx5@conf := CONFIG_MLX5
mlx5@src := tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/ext-drivers/mlnx-en-3.3-1.0.0.0.tgz && tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/mlnx-en-3.3-1.0.0.0/SOURCES/mlnx-en_3.3.orig.tar.gz && ln -s mlnx-en-3.3 mlx5
mlx5@patch := patches/mellanox--mlx5--3.3

The patches are against Mellanox driver version 3.3-1, and have been tested against various Linux kernels from 3.13 upwards, although not all the way to the most recent one. Our recent builds have been tested mostly against kernel 4.4 using Ubuntu 16.04.
In time these could be ported onto the version of the mlx5 driver which is bundled with the Linux kernel, but there isn't an exact match for v3.3-1 of the driver within the kernel, so I've not done this as yet.
I hope this is useful, and please let me know of any further modifications which might be required in order to assist with merging it.
Thanks","Hi @andrewbonney how are you ? May you let me know, if the ConnectX 3 Pro line, will work with netmap as well ?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,476,2018-04-17T15:09:36Z,2018-04-24T09:57:49Z,2022-05-13T13:52:17Z,MERGED,True,1119,1,3,https://github.com/andrewbonney,Add support for Mellanox ConnectX-4 / ConnectX-5 cards (v3.3 mlx5 driver),3,[],https://github.com/luigirizzo/netmap/pull/476,https://github.com/kierank,6,https://github.com/luigirizzo/netmap/pull/476#issuecomment-1126080604,"Hi,
As previously discussed, please find attached patches for the Mellanox mlx5 Ethernet driver for use with ConnectX-4 and ConnectX-5 cards (Resolves #210).
As we build things a little differently internally I've refactored our internal code to suit the netmap codebase, following the same sort of method used to pull in external Intel drivers for patching (as opposed to patching the kernel source).
Whilst I am able to build this, I haven't yet tackled the necessary changes to LINUX/default-config.mak.in_ to enable downloading and patching of the relevant tarball. I'm hoping the details below will help with this, and I'm happy to make further changes as required to make it fit in.
Build process:

Download tgz from http://www.mellanox.com/downloads/Drivers/mlnx-en-3.3-1.0.0.0.tgz
Unpack, then unpack from the tgz inside SOURCES/
Patch (patch --posix --quiet --force -p1 < patches/mellanox--mlx5--3.3;)
Run scripts/mlnx_en_patch.sh --without-mlx4 before make (using '-j<x>' to speed up as necessary) - this deals with detecting and patching for the current kernel within the Mellanox driver.
This builds three ko files but only mlx_compat.ko and mlx5_core.ko are required for the ethernet driver.

Proposed resulting additions to resultant drivers.mak
mlx5@conf := CONFIG_MLX5
mlx5@src := tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/ext-drivers/mlnx-en-3.3-1.0.0.0.tgz && tar xf /project-mcuk/ap/ipp/andrewbo/netmap/LINUX/mlnx-en-3.3-1.0.0.0/SOURCES/mlnx-en_3.3.orig.tar.gz && ln -s mlnx-en-3.3 mlx5
mlx5@patch := patches/mellanox--mlx5--3.3

The patches are against Mellanox driver version 3.3-1, and have been tested against various Linux kernels from 3.13 upwards, although not all the way to the most recent one. Our recent builds have been tested mostly against kernel 4.4 using Ubuntu 16.04.
In time these could be ported onto the version of the mlx5 driver which is bundled with the Linux kernel, but there isn't an exact match for v3.3-1 of the driver within the kernel, so I've not done this as yet.
I hope this is useful, and please let me know of any further modifications which might be required in order to assist with merging it.
Thanks","The ConnectX3 driver is different to the 4 and 5 and isn't supported by
netmap.

Kieran
â€¦
On Fri, 13 May 2022, 14:42 Fred :), ***@***.***> wrote:
 Hi @andrewbonney <https://github.com/andrewbonney> how are you ? May you
 let me know, if the ConnectX 3 Pro line, will work with netmap as well ?

 â€”
 Reply to this email directly, view it on GitHub
 <#476 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AABDEEA5BNWMISR6SNMR7P3VJZL4PANCNFSM4E3CA44A>
 .
 You are receiving this because you are subscribed to this thread.Message
 ID: ***@***.***>",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,478,2018-04-23T14:26:44Z,2018-05-11T10:21:10Z,2018-05-11T10:45:08Z,MERGED,True,1,1,1,https://github.com/funman,dkms: fix autoinstall,1,[],https://github.com/luigirizzo/netmap/pull/478,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/478,"kernelver would not be set when calling dkms autoinstall --kernelver 4.13.0-39-generic,
and the build would use uname -r
This would break at kernel updates","kernelver would not be set when calling dkms autoinstall --kernelver 4.13.0-39-generic,
and the build would use uname -r
This would break at kernel updates",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,478,2018-04-23T14:26:44Z,2018-05-11T10:21:10Z,2018-05-11T10:45:08Z,MERGED,True,1,1,1,https://github.com/funman,dkms: fix autoinstall,1,[],https://github.com/luigirizzo/netmap/pull/478,https://github.com/funman,2,https://github.com/luigirizzo/netmap/pull/478#issuecomment-388323391,"kernelver would not be set when calling dkms autoinstall --kernelver 4.13.0-39-generic,
and the build would use uname -r
This would break at kernel updates",ping,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,478,2018-04-23T14:26:44Z,2018-05-11T10:21:10Z,2018-05-11T10:45:08Z,MERGED,True,1,1,1,https://github.com/funman,dkms: fix autoinstall,1,[],https://github.com/luigirizzo/netmap/pull/478,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/478#issuecomment-388324286,"kernelver would not be set when calling dkms autoinstall --kernelver 4.13.0-39-generic,
and the build would use uname -r
This would break at kernel updates",sorry,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,478,2018-04-23T14:26:44Z,2018-05-11T10:21:10Z,2018-05-11T10:45:08Z,MERGED,True,1,1,1,https://github.com/funman,dkms: fix autoinstall,1,[],https://github.com/luigirizzo/netmap/pull/478,https://github.com/funman,4,https://github.com/luigirizzo/netmap/pull/478#issuecomment-388329327,"kernelver would not be set when calling dkms autoinstall --kernelver 4.13.0-39-generic,
and the build would use uname -r
This would break at kernel updates","No problem :)
Btw we have started a irc channel : #netmap on freenode, that can be nice for real-time chat.
Feel free to join us!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,484,2018-05-10T18:19:26Z,2018-05-10T18:52:18Z,2018-05-10T18:52:18Z,MERGED,True,1,1,1,https://github.com/kierank,mlx5: Move to faster download link,1,[],https://github.com/luigirizzo/netmap/pull/484,https://github.com/kierank,1,https://github.com/luigirizzo/netmap/pull/484,The existing link is painfully slow.,The existing link is painfully slow.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/485,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/andrewbonney,2,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388319740,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.",I'll take a look on a fresh machine here and post back. Perfectly possible I've missed something in testing.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/funman,3,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388323076,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","I removed the nm_config completely rather than use the ixgbe version.
Driver does not seem to lock the machine anymore",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/giuseppelettieri,4,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388331851,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","Thank you @funman, your patch is obviously correct. I'll delay the merge, however, until the other issue you have found has been figured out.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/funman,5,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388332251,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","Ok no rush.
We'll also take a look at using a newer driver",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/andrewbonney,6,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388398716,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","Just to follow up here, apologies for the errors on my part. Our local version of netmap was dated 3rd January and I'd clearly forgotten to update it to the latest before submitting the initial PR. The changes here work for me having built locally, and there's a commit here which should resolve the nm_config issues matching up with more recent netmap modifications: bbc@6ce986a
Hopefully once @funman can also confirm things are working correctly this can all be merged in.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/funman,7,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388427229,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","I am still not able to use the netmap driver, machine locks up really fast.
Need to gather more data and maybe test older versions",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/funman,8,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388741474,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","@andrewbonney this still works on ConnectX-4, right?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/andrewbonney,9,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388744343,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","Yes, seems to work fine here with those patches against latest master",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/funman,10,https://github.com/luigirizzo/netmap/pull/485#issuecomment-388819527,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","@vmaffione could you test with your ConnectX-5 ?
TX seems to work for me after I bump the # of descriptors to 4k, but after ^C I'll still need to force reset the computer.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/funman,11,https://github.com/luigirizzo/netmap/pull/485#issuecomment-392726587,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.",Managed to get TX working with funman@1bb933a,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/giuseppelettieri,12,https://github.com/luigirizzo/netmap/pull/485#issuecomment-392750566,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.",Let me know if you want to merge it now. I will not be able to test it by myself anytime soon.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/funman,13,https://github.com/luigirizzo/netmap/pull/485#issuecomment-392760622,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","I think you can merge this one then, I'll make another pull request with the other patches (they still need to be tested on ConnectX-4 though)",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,485,2018-05-11T09:47:27Z,2018-05-29T14:35:40Z,2018-05-29T14:35:53Z,MERGED,True,10,16,2,https://github.com/funman,Mlx5: enable netmap mode,4,[],https://github.com/luigirizzo/netmap/pull/485,https://github.com/giuseppelettieri,14,https://github.com/luigirizzo/netmap/pull/485#issuecomment-392799819,"I noticed mlx5 driver is not being built with -DCONFIG_NETMAP
This pull request fixes this and also fixes build errors in the header.
Using pkt-gen locked up my machine in a couple seconds though.
@andrewbonney any comment on these build failures ?
I am guessing when you tested the build system patch from @giuseppelettieri the driver was actually in emulated mode rather than native.","OK, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,486,2018-05-11T09:48:44Z,2018-05-17T05:31:37Z,2018-05-17T05:31:37Z,MERGED,True,84,16,5,https://github.com/andrewbonney,Add checksum offload capability for emulated driver,3,[],https://github.com/luigirizzo/netmap/pull/486,https://github.com/andrewbonney,1,https://github.com/luigirizzo/netmap/pull/486,"The following patch adds support for checksum offloading to hardware when using the emulated driver function of netmap. In our use case where netmap originates traffic (rather than the main use case of forwarding) it's useful to have this mode available as a fallback.
There's a sysctl parameter added to enable this function, which remains disabled by default.
Assuming this looks generally acceptable as a contribution, I'd appreciate a review, not least in the following two areas:

The first commit changes where the mbuf protocol is identified from (using the location of the ethertype rather than assuming IPv4)
The second commit disables the offloading check in netmap.c when the new sysctl parameter is enabled. This is necessary to allow CHECKSUM_PARTIAL cases to pass, but also removed the check for GSO. It may be preferred to split the function nm_os_mbuf_has_offld into two so that the GSO check remains in place.

Thanks","The following patch adds support for checksum offloading to hardware when using the emulated driver function of netmap. In our use case where netmap originates traffic (rather than the main use case of forwarding) it's useful to have this mode available as a fallback.
There's a sysctl parameter added to enable this function, which remains disabled by default.
Assuming this looks generally acceptable as a contribution, I'd appreciate a review, not least in the following two areas:

The first commit changes where the mbuf protocol is identified from (using the location of the ethertype rather than assuming IPv4)
The second commit disables the offloading check in netmap.c when the new sysctl parameter is enabled. This is necessary to allow CHECKSUM_PARTIAL cases to pass, but also removed the check for GSO. It may be preferred to split the function nm_os_mbuf_has_offld into two so that the GSO check remains in place.

Thanks",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,486,2018-05-11T09:48:44Z,2018-05-17T05:31:37Z,2018-05-17T05:31:37Z,MERGED,True,84,16,5,https://github.com/andrewbonney,Add checksum offload capability for emulated driver,3,[],https://github.com/luigirizzo/netmap/pull/486,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/486#issuecomment-389031503,"The following patch adds support for checksum offloading to hardware when using the emulated driver function of netmap. In our use case where netmap originates traffic (rather than the main use case of forwarding) it's useful to have this mode available as a fallback.
There's a sysctl parameter added to enable this function, which remains disabled by default.
Assuming this looks generally acceptable as a contribution, I'd appreciate a review, not least in the following two areas:

The first commit changes where the mbuf protocol is identified from (using the location of the ethertype rather than assuming IPv4)
The second commit disables the offloading check in netmap.c when the new sysctl parameter is enabled. This is necessary to allow CHECKSUM_PARTIAL cases to pass, but also removed the check for GSO. It may be preferred to split the function nm_os_mbuf_has_offld into two so that the GSO check remains in place.

Thanks","Looks good, but the use of ETH_P_802_3_MIN
causes compilation failures for many kernel versions: details here https://travis-ci.org/netmap-unipi/netmap/builds/379027397
Do we reallly need to validate the ethertype?
And yes, nm_os_mbuf_has_offld could be splitted as you suggest.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,486,2018-05-11T09:48:44Z,2018-05-17T05:31:37Z,2018-05-17T05:31:37Z,MERGED,True,84,16,5,https://github.com/andrewbonney,Add checksum offload capability for emulated driver,3,[],https://github.com/luigirizzo/netmap/pull/486,https://github.com/andrewbonney,3,https://github.com/luigirizzo/netmap/pull/486#issuecomment-389105929,"The following patch adds support for checksum offloading to hardware when using the emulated driver function of netmap. In our use case where netmap originates traffic (rather than the main use case of forwarding) it's useful to have this mode available as a fallback.
There's a sysctl parameter added to enable this function, which remains disabled by default.
Assuming this looks generally acceptable as a contribution, I'd appreciate a review, not least in the following two areas:

The first commit changes where the mbuf protocol is identified from (using the location of the ethertype rather than assuming IPv4)
The second commit disables the offloading check in netmap.c when the new sysctl parameter is enabled. This is necessary to allow CHECKSUM_PARTIAL cases to pass, but also removed the check for GSO. It may be preferred to split the function nm_os_mbuf_has_offld into two so that the GSO check remains in place.

Thanks","Thanks. I've split the offload check function - let me know if the original function signature needs maintaining for any reason.
For the ethertype, it looks like in order to set m->protocol correctly there's a built in function eth_type_trans which should be available on all kernel versions, but it is intended for packet reception so requires a call to fix the mbuf data pointer and length afterwards. I've modified the patch to use this for now.
For the checksum additions we only really need to update the setting of m->protocol to detect both IPv4 and IPv6, but having encountered issues with some NIC drivers in the past it seemed to make sense to set this value as accurately as possible. Let me know what you think.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,486,2018-05-11T09:48:44Z,2018-05-17T05:31:37Z,2018-05-17T05:31:37Z,MERGED,True,84,16,5,https://github.com/andrewbonney,Add checksum offload capability for emulated driver,3,[],https://github.com/luigirizzo/netmap/pull/486,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/486#issuecomment-389379761,"The following patch adds support for checksum offloading to hardware when using the emulated driver function of netmap. In our use case where netmap originates traffic (rather than the main use case of forwarding) it's useful to have this mode available as a fallback.
There's a sysctl parameter added to enable this function, which remains disabled by default.
Assuming this looks generally acceptable as a contribution, I'd appreciate a review, not least in the following two areas:

The first commit changes where the mbuf protocol is identified from (using the location of the ethertype rather than assuming IPv4)
The second commit disables the offloading check in netmap.c when the new sysctl parameter is enabled. This is necessary to allow CHECKSUM_PARTIAL cases to pass, but also removed the check for GSO. It may be preferred to split the function nm_os_mbuf_has_offld into two so that the GSO check remains in place.

Thanks","I wouldn't call eth_type_trans. It's a receive function, it sets skb fields that we shouldn't set, and it is also expensive. Also, it forces use to call skb_push, and this is cumbersome.
If it's important to make sure that ethertype >= ETH_P_802_3_MIN, then we can just define the macro ourselves (#define NM_ETH_P_802_3_MIN 0x0600), and use that. In this way we can use the previous version of the code.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,486,2018-05-11T09:48:44Z,2018-05-17T05:31:37Z,2018-05-17T05:31:37Z,MERGED,True,84,16,5,https://github.com/andrewbonney,Add checksum offload capability for emulated driver,3,[],https://github.com/luigirizzo/netmap/pull/486,https://github.com/andrewbonney,5,https://github.com/luigirizzo/netmap/pull/486#issuecomment-389471001,"The following patch adds support for checksum offloading to hardware when using the emulated driver function of netmap. In our use case where netmap originates traffic (rather than the main use case of forwarding) it's useful to have this mode available as a fallback.
There's a sysctl parameter added to enable this function, which remains disabled by default.
Assuming this looks generally acceptable as a contribution, I'd appreciate a review, not least in the following two areas:

The first commit changes where the mbuf protocol is identified from (using the location of the ethertype rather than assuming IPv4)
The second commit disables the offloading check in netmap.c when the new sysctl parameter is enabled. This is necessary to allow CHECKSUM_PARTIAL cases to pass, but also removed the check for GSO. It may be preferred to split the function nm_os_mbuf_has_offld into two so that the GSO check remains in place.

Thanks",That's fair enough. I've switched back to the previous commit for that element of the PR with the additional #define.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,486,2018-05-11T09:48:44Z,2018-05-17T05:31:37Z,2018-05-17T05:31:37Z,MERGED,True,84,16,5,https://github.com/andrewbonney,Add checksum offload capability for emulated driver,3,[],https://github.com/luigirizzo/netmap/pull/486,https://github.com/vmaffione,6,https://github.com/luigirizzo/netmap/pull/486#issuecomment-389733242,"The following patch adds support for checksum offloading to hardware when using the emulated driver function of netmap. In our use case where netmap originates traffic (rather than the main use case of forwarding) it's useful to have this mode available as a fallback.
There's a sysctl parameter added to enable this function, which remains disabled by default.
Assuming this looks generally acceptable as a contribution, I'd appreciate a review, not least in the following two areas:

The first commit changes where the mbuf protocol is identified from (using the location of the ethertype rather than assuming IPv4)
The second commit disables the offloading check in netmap.c when the new sysctl parameter is enabled. This is necessary to allow CHECKSUM_PARTIAL cases to pass, but also removed the check for GSO. It may be preferred to split the function nm_os_mbuf_has_offld into two so that the GSO check remains in place.

Thanks","Thanks. Travis is also happy with the change.
Merging in a little while.",True,{'THUMBS_UP': ['https://github.com/andrewbonney']}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,501,2018-06-20T02:00:17Z,2018-06-20T05:42:19Z,2018-06-20T05:42:19Z,MERGED,True,2,2,1,https://github.com/pothos,pkt-gen: Use first_tx_ring instead of 0 (needed for host rings),1,[],https://github.com/luigirizzo/netmap/pull/501,https://github.com/pothos,1,https://github.com/luigirizzo/netmap/pull/501,See: #499,See: #499,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,503,2018-06-26T16:11:59Z,2018-06-27T18:56:49Z,2018-06-27T18:56:49Z,MERGED,True,7,2,1,https://github.com/Davidepad,update README.ptnetmap,1,[],https://github.com/luigirizzo/netmap/pull/503,https://github.com/Davidepad,1,https://github.com/luigirizzo/netmap/pull/503,Updated the README.ptnetmap file for the Qemu configuration,Updated the README.ptnetmap file for the Qemu configuration,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,518,2018-07-26T21:42:28Z,2018-07-27T04:53:59Z,2018-07-27T04:53:59Z,MERGED,True,1,0,1,https://github.com/john-gress,Allow buf_size greater than 4096,2,[],https://github.com/luigirizzo/netmap/pull/518,https://github.com/john-gress,1,https://github.com/luigirizzo/netmap/pull/518,See #512,See #512,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,520,2018-07-31T01:45:31Z,2018-08-17T23:45:47Z,2018-08-17T23:45:47Z,MERGED,True,1,1,1,https://github.com/dabright,Fix FreeBSD PR206053 - panic when adding netmap device to kqueue.,1,[],https://github.com/luigirizzo/netmap/pull/520,https://github.com/dabright,1,https://github.com/luigirizzo/netmap/pull/520,See FreeBSD PR206053 (https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=206053) for details.,See FreeBSD PR206053 (https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=206053) for details.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,520,2018-07-31T01:45:31Z,2018-08-17T23:45:47Z,2018-08-17T23:45:47Z,MERGED,True,1,1,1,https://github.com/dabright,Fix FreeBSD PR206053 - panic when adding netmap device to kqueue.,1,[],https://github.com/luigirizzo/netmap/pull/520,https://github.com/dabright,2,https://github.com/luigirizzo/netmap/pull/520#issuecomment-409067113,See FreeBSD PR206053 (https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=206053) for details.,The problem this fixes is now also logged as netmap issue #521.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,520,2018-07-31T01:45:31Z,2018-08-17T23:45:47Z,2018-08-17T23:45:47Z,MERGED,True,1,1,1,https://github.com/dabright,Fix FreeBSD PR206053 - panic when adding netmap device to kqueue.,1,[],https://github.com/luigirizzo/netmap/pull/520,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/520#issuecomment-409077100,See FreeBSD PR206053 (https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=206053) for details.,Thanks a lot! What kind of testing did you do to check that it is now fixed? Do you have any test program you can share?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,520,2018-07-31T01:45:31Z,2018-08-17T23:45:47Z,2018-08-17T23:45:47Z,MERGED,True,1,1,1,https://github.com/dabright,Fix FreeBSD PR206053 - panic when adding netmap device to kqueue.,1,[],https://github.com/luigirizzo/netmap/pull/520,https://github.com/dabright,4,https://github.com/luigirizzo/netmap/pull/520#issuecomment-409197269,See FreeBSD PR206053 (https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=206053) for details.,"I used a slight modification of the test program submitted as a comment to the FreeBSD PR. Before the change, running the program (on -CURRENT) produced a kernel panic essentially identical to that shown in the PR. After the change, the program runs to completion without panic. Note that I am not sure how to force the traffic on the netmap device for which the kqueue is waiting in the program, so it simply timed out. However, I was mainly interested in just fixing the panic.
Hmmm, it seems I can't attach the program file, so I'll just list it inline below:
#include <stdio.h>
#include <assert.h>

#include <sys/types.h>
#include <sys/event.h>
#include <sys/time.h>

#ifndef NETMAP_WITH_LIBS
#define NETMAP_WITH_LIBS
#endif
#include <net/netmap_user.h>

static int
kq_add(int kq, int fd)
{
	struct kevent changes[1];
	int ret;

	EV_SET(&changes[0], fd, EVFILT_READ, EV_ADD, 0, 0, NULL);
	ret = kevent(kq, changes, 1, NULL, 0, NULL);
	assert(ret != -1);

	printf(""[%s] success\n"", __func__);

	return (ret);
}

static void
kq_wait(int kq)
{
	struct kevent events[1];
	int ret;
	struct timespec to = {1, 0};

	ret = kevent(kq, NULL, 0, events, 1, &to);
	assert(ret != -1);

	printf(""[%s] success\n"", __func__);
}

int main(void)
{
	const char *ifname = ""vale0:vm1"";
	struct nm_desc *d;
	int kq;

	d = nm_open(ifname, NULL, 0, 0);
	assert(d != NULL);

	kq = kqueue();
	assert(kq != -1);

	kq_add(kq, d->fd);
	kq_wait(kq);

	return (0);
}",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,520,2018-07-31T01:45:31Z,2018-08-17T23:45:47Z,2018-08-17T23:45:47Z,MERGED,True,1,1,1,https://github.com/dabright,Fix FreeBSD PR206053 - panic when adding netmap device to kqueue.,1,[],https://github.com/luigirizzo/netmap/pull/520,https://github.com/vmaffione,5,https://github.com/luigirizzo/netmap/pull/520#issuecomment-409428340,See FreeBSD PR206053 (https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=206053) for details.,"I see, thanks. Yes, your program is not reading from the netmap ring and nobody is sending anything to the vale0:vm1 port. So a timeout is expected.
We can easily write a test program to test kqueue, starting from this example.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,524,2018-08-07T08:52:47Z,2018-08-07T10:24:47Z,2018-08-07T10:24:47Z,CLOSED,False,21,21,6,https://github.com/kogdenko,repair compilation on 32bit platform,1,[],https://github.com/luigirizzo/netmap/pull/524,https://github.com/kogdenko,1,https://github.com/luigirizzo/netmap/pull/524,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,527,2018-08-07T21:17:01Z,2018-09-17T14:01:18Z,2018-09-17T14:01:18Z,CLOSED,False,192,92,2,https://github.com/sdpetrides,Virtio All TX or All RX,7,[],https://github.com/luigirizzo/netmap/pull/527,https://github.com/sdpetrides,1,https://github.com/luigirizzo/netmap/pull/527,"Based on issue 443
I wanted to be able to use all TX ring or all RX rings for virtio. I was not sure how to tell which rings were ""pending"" from the virtnet_info struct, so I would pass in TX, RX, or TXRX as an additional flag. There may be a better way to do this.
General changes:

virtio_netmap_reg in virtio_netmap.h now initializes TX and RX separately. Subroutines have flag (enum txrx) that indicates TX, RX or TXRX.
Patch (vanilla-virtio-40f00-41000) for virtio_net.c is updated to use the same TX/RX init separation flag

Configure and make commands:
./configure --kernel-sources=/usr/src/kernels/linux-stable-4.15 --drivers=virtio_net.c
make
linux-stable-4.15 is taken from kernel.org
Results:
I have tested with TX only and I am able to receive traffic through the kernel and send packets through netmap-virtio. However, after large amounts of traffic (100MB, 1G, etc.), the port no longer receives packets. I have not found the reason for this. As of now, this is this is a proof-of-concept. Looking for feedback ðŸ˜„
Edit: fix link","Based on issue 443
I wanted to be able to use all TX ring or all RX rings for virtio. I was not sure how to tell which rings were ""pending"" from the virtnet_info struct, so I would pass in TX, RX, or TXRX as an additional flag. There may be a better way to do this.
General changes:

virtio_netmap_reg in virtio_netmap.h now initializes TX and RX separately. Subroutines have flag (enum txrx) that indicates TX, RX or TXRX.
Patch (vanilla-virtio-40f00-41000) for virtio_net.c is updated to use the same TX/RX init separation flag

Configure and make commands:
./configure --kernel-sources=/usr/src/kernels/linux-stable-4.15 --drivers=virtio_net.c
make
linux-stable-4.15 is taken from kernel.org
Results:
I have tested with TX only and I am able to receive traffic through the kernel and send packets through netmap-virtio. However, after large amounts of traffic (100MB, 1G, etc.), the port no longer receives packets. I have not found the reason for this. As of now, this is this is a proof-of-concept. Looking for feedback ðŸ˜„
Edit: fix link",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,527,2018-08-07T21:17:01Z,2018-09-17T14:01:18Z,2018-09-17T14:01:18Z,CLOSED,False,192,92,2,https://github.com/sdpetrides,Virtio All TX or All RX,7,[],https://github.com/luigirizzo/netmap/pull/527,https://github.com/carlgsmith,2,https://github.com/luigirizzo/netmap/pull/527#issuecomment-411223823,"Based on issue 443
I wanted to be able to use all TX ring or all RX rings for virtio. I was not sure how to tell which rings were ""pending"" from the virtnet_info struct, so I would pass in TX, RX, or TXRX as an additional flag. There may be a better way to do this.
General changes:

virtio_netmap_reg in virtio_netmap.h now initializes TX and RX separately. Subroutines have flag (enum txrx) that indicates TX, RX or TXRX.
Patch (vanilla-virtio-40f00-41000) for virtio_net.c is updated to use the same TX/RX init separation flag

Configure and make commands:
./configure --kernel-sources=/usr/src/kernels/linux-stable-4.15 --drivers=virtio_net.c
make
linux-stable-4.15 is taken from kernel.org
Results:
I have tested with TX only and I am able to receive traffic through the kernel and send packets through netmap-virtio. However, after large amounts of traffic (100MB, 1G, etc.), the port no longer receives packets. I have not found the reason for this. As of now, this is this is a proof-of-concept. Looking for feedback ðŸ˜„
Edit: fix link","Have pushed our version of these changes to
https://github.com/alliedtelesis/netmap/commits/virtio_single_queue
We have not rebased this cycle, so they may be a touch out of date.
Note the top patch was the one we need to avoid the ""getting stuck after a while"" problem. It was caused by the queues being reconfigured when the second open was made.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,527,2018-08-07T21:17:01Z,2018-09-17T14:01:18Z,2018-09-17T14:01:18Z,CLOSED,False,192,92,2,https://github.com/sdpetrides,Virtio All TX or All RX,7,[],https://github.com/luigirizzo/netmap/pull/527,https://github.com/sdpetrides,3,https://github.com/luigirizzo/netmap/pull/527#issuecomment-411513284,"Based on issue 443
I wanted to be able to use all TX ring or all RX rings for virtio. I was not sure how to tell which rings were ""pending"" from the virtnet_info struct, so I would pass in TX, RX, or TXRX as an additional flag. There may be a better way to do this.
General changes:

virtio_netmap_reg in virtio_netmap.h now initializes TX and RX separately. Subroutines have flag (enum txrx) that indicates TX, RX or TXRX.
Patch (vanilla-virtio-40f00-41000) for virtio_net.c is updated to use the same TX/RX init separation flag

Configure and make commands:
./configure --kernel-sources=/usr/src/kernels/linux-stable-4.15 --drivers=virtio_net.c
make
linux-stable-4.15 is taken from kernel.org
Results:
I have tested with TX only and I am able to receive traffic through the kernel and send packets through netmap-virtio. However, after large amounts of traffic (100MB, 1G, etc.), the port no longer receives packets. I have not found the reason for this. As of now, this is this is a proof-of-concept. Looking for feedback ðŸ˜„
Edit: fix link","Hey Carl,
Thanks for pushing your code. I have found we have some similarities in our patches. I have tried to build and test with your patch but I am having trouble during configuration. I think we have different kernel versions. With 4.15.18 I am getting the following issue:
*** There were problems patching the driver virtio_net.c.
***
*** Disabling virtio_net.c.

Can you post more info on your build parameters and kernel sources?
UPDATE:
I solved the issue with the configure. Turns out that the patch was failing because there was a line in the virtio_net.c src file that was not accounted for in the patch file. I fixed this and it compiles nicely.
I have used some ideas from Carl's code and created a new branch called virtio-single-queue-linux-4.15. I can create a new pull request for that branch (or just open up an issue for discussion) if preferred.
I have seen how different virtio_net.c can be between kernel versions so I am only looking to work with the 4.15 version (for now).
With some brief testing, I am still having issues when sending large amounts of data (1Gb, 3Gb) so I am looking for feedback on how to fix this.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,527,2018-08-07T21:17:01Z,2018-09-17T14:01:18Z,2018-09-17T14:01:18Z,CLOSED,False,192,92,2,https://github.com/sdpetrides,Virtio All TX or All RX,7,[],https://github.com/luigirizzo/netmap/pull/527,https://github.com/carlgsmith,4,https://github.com/luigirizzo/netmap/pull/527#issuecomment-411556632,"Based on issue 443
I wanted to be able to use all TX ring or all RX rings for virtio. I was not sure how to tell which rings were ""pending"" from the virtnet_info struct, so I would pass in TX, RX, or TXRX as an additional flag. There may be a better way to do this.
General changes:

virtio_netmap_reg in virtio_netmap.h now initializes TX and RX separately. Subroutines have flag (enum txrx) that indicates TX, RX or TXRX.
Patch (vanilla-virtio-40f00-41000) for virtio_net.c is updated to use the same TX/RX init separation flag

Configure and make commands:
./configure --kernel-sources=/usr/src/kernels/linux-stable-4.15 --drivers=virtio_net.c
make
linux-stable-4.15 is taken from kernel.org
Results:
I have tested with TX only and I am able to receive traffic through the kernel and send packets through netmap-virtio. However, after large amounts of traffic (100MB, 1G, etc.), the port no longer receives packets. I have not found the reason for this. As of now, this is this is a proof-of-concept. Looking for feedback ðŸ˜„
Edit: fix link","Sorry, I did a quick meld to update the patches and forgot about the file offsets. Our kernel is based on 4.4.6.
We are not currently seeing any issues with large data transfers, but it does sound like something we have seen before. I think the issues we saw were related to the TX rings being reconfigured when the RX rings were opened. We are still a wee bit behind upstream.
The only other sort of related change I can see we have is in nm_os_send_up where we have changed netif_rx to netif_rx_ni as we were finding packets to the kernel stack were being blocked. Actually because the softirq was not triggered, the waiting packet did not get picked up until some other event generated a softirq. It did cause slow downs and more importantly massive latency. This may have been related to other changes in our kernel though.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,527,2018-08-07T21:17:01Z,2018-09-17T14:01:18Z,2018-09-17T14:01:18Z,CLOSED,False,192,92,2,https://github.com/sdpetrides,Virtio All TX or All RX,7,[],https://github.com/luigirizzo/netmap/pull/527,https://github.com/sdpetrides,5,https://github.com/luigirizzo/netmap/pull/527#issuecomment-411898513,"Based on issue 443
I wanted to be able to use all TX ring or all RX rings for virtio. I was not sure how to tell which rings were ""pending"" from the virtnet_info struct, so I would pass in TX, RX, or TXRX as an additional flag. There may be a better way to do this.
General changes:

virtio_netmap_reg in virtio_netmap.h now initializes TX and RX separately. Subroutines have flag (enum txrx) that indicates TX, RX or TXRX.
Patch (vanilla-virtio-40f00-41000) for virtio_net.c is updated to use the same TX/RX init separation flag

Configure and make commands:
./configure --kernel-sources=/usr/src/kernels/linux-stable-4.15 --drivers=virtio_net.c
make
linux-stable-4.15 is taken from kernel.org
Results:
I have tested with TX only and I am able to receive traffic through the kernel and send packets through netmap-virtio. However, after large amounts of traffic (100MB, 1G, etc.), the port no longer receives packets. I have not found the reason for this. As of now, this is this is a proof-of-concept. Looking for feedback ðŸ˜„
Edit: fix link","I have played around with this more but I am still having an issue after enough traffic has been sent. Specifically, after enough traffic has been sent, the kernel stack does not read anything (from sockets). My application behaves as if there is no incoming data. However, if I exit netmap mode and use the linux stack normally (send and recv with sockets) and then switch back to netmap mode in a separate process, the issue is gone and I can read from sockets and send through netmap.
I am curious to learn more about your issue with ""other event generating a softirq"" to see if this applied to my issue. Again, I appreciate your help.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,527,2018-08-07T21:17:01Z,2018-09-17T14:01:18Z,2018-09-17T14:01:18Z,CLOSED,False,192,92,2,https://github.com/sdpetrides,Virtio All TX or All RX,7,[],https://github.com/luigirizzo/netmap/pull/527,https://github.com/carlgsmith,6,https://github.com/luigirizzo/netmap/pull/527#issuecomment-411908170,"Based on issue 443
I wanted to be able to use all TX ring or all RX rings for virtio. I was not sure how to tell which rings were ""pending"" from the virtnet_info struct, so I would pass in TX, RX, or TXRX as an additional flag. There may be a better way to do this.
General changes:

virtio_netmap_reg in virtio_netmap.h now initializes TX and RX separately. Subroutines have flag (enum txrx) that indicates TX, RX or TXRX.
Patch (vanilla-virtio-40f00-41000) for virtio_net.c is updated to use the same TX/RX init separation flag

Configure and make commands:
./configure --kernel-sources=/usr/src/kernels/linux-stable-4.15 --drivers=virtio_net.c
make
linux-stable-4.15 is taken from kernel.org
Results:
I have tested with TX only and I am able to receive traffic through the kernel and send packets through netmap-virtio. However, after large amounts of traffic (100MB, 1G, etc.), the port no longer receives packets. I have not found the reason for this. As of now, this is this is a proof-of-concept. Looking for feedback ðŸ˜„
Edit: fix link","I think we did have that issue and we had to modify our application to avoid it. Check your ring pointers when it is stalled.
One change we made was to ensure we never pushed any packets to the host TX ring unless there was at least 2 spaces;
e.g.
/* Lock ring and wait for room if needed */
try_again:
pthread_mutex_lock (&ring->lock);
txring = NETMAP_TXRING (ring->desc->nifp, ring_id);
if (nm_ring_space (txring) < 2)
{
VERBOSE (""PKT(WAIT): oif:%s[%u] TX Ring Full\n"", oif->ifname, ring_id);
ioctl (ring->desc->fd, NIOCTXSYNC, 0);
usleep (1);
pthread_mutex_unlock (&ring->lock);
goto try_again;
}
We found if we did not do this, it blocked up completely.
The other common problem is if you do not follow the ownership model properly (e.g. multiple threads), you can get the ring pointers into funny states.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,527,2018-08-07T21:17:01Z,2018-09-17T14:01:18Z,2018-09-17T14:01:18Z,CLOSED,False,192,92,2,https://github.com/sdpetrides,Virtio All TX or All RX,7,[],https://github.com/luigirizzo/netmap/pull/527,https://github.com/sdpetrides,7,https://github.com/luigirizzo/netmap/pull/527#issuecomment-412098316,"Based on issue 443
I wanted to be able to use all TX ring or all RX rings for virtio. I was not sure how to tell which rings were ""pending"" from the virtnet_info struct, so I would pass in TX, RX, or TXRX as an additional flag. There may be a better way to do this.
General changes:

virtio_netmap_reg in virtio_netmap.h now initializes TX and RX separately. Subroutines have flag (enum txrx) that indicates TX, RX or TXRX.
Patch (vanilla-virtio-40f00-41000) for virtio_net.c is updated to use the same TX/RX init separation flag

Configure and make commands:
./configure --kernel-sources=/usr/src/kernels/linux-stable-4.15 --drivers=virtio_net.c
make
linux-stable-4.15 is taken from kernel.org
Results:
I have tested with TX only and I am able to receive traffic through the kernel and send packets through netmap-virtio. However, after large amounts of traffic (100MB, 1G, etc.), the port no longer receives packets. I have not found the reason for this. As of now, this is this is a proof-of-concept. Looking for feedback ðŸ˜„
Edit: fix link","I have dug into the issue a bit more and found that there my issues during ""large file transfers"" are not an issue with ""large file transfers"" but an issue with ARP requests that trigger a netmap_transmit(). I do not handle these and the traffic must be dropped or sent to the wrong place. I will have to find a way to handle this in my app.
Thank you again for your help.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/DirkHoffmann,1,https://github.com/luigirizzo/netmap/pull/528,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/528#issuecomment-411961703,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","Thanks.
You need to rebase your changes on the current master, and squash everything in a single commit.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/DirkHoffmann,3,https://github.com/luigirizzo/netmap/pull/528#issuecomment-413707105,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","Hmm. I lack experience with squashing and rebase. Maybe you can help me?
$ git rebase master 
First, rewinding head to replay your work on top of it...
Applying: Just recovering old files from 2014. This does *not* work yet.
Applying: Adapted spec file to generate an RPM for the first time (on CentOS 7.4)
Applying: extmem: user-supplied netmap memory region
Using index info to reconstruct a base tree...
M       LINUX/bsd_glue.h
M       LINUX/configure
M       LINUX/netmap_linux.c
M       sys/dev/netmap/netmap.c
M       sys/dev/netmap/netmap_kern.h
M       sys/dev/netmap/netmap_mem2.c
M       sys/dev/netmap/netmap_mem2.h
M       sys/net/netmap.h
M       utils/testmmap.c
<stdin>:57: space before tab in indent.
        #include <linux/mm.h>
<stdin>:67: space before tab in indent.
        #include <linux/mm.h>
<stdin>:77: space before tab in indent.
        #include <linux/mm.h>
<stdin>:90: space before tab in indent.
        #include <linux/mm.h>
<stdin>:226: trailing whitespace.
_netmap_mem_private_new(size_t size, struct netmap_obj_params *p, 
warning: squelched 3 whitespace errors
warning: 8 lines add whitespace errors.
Falling back to patching base and 3-way merge...
Auto-merging utils/testmmap.c
CONFLICT (content): Merge conflict in utils/testmmap.c
Auto-merging sys/net/netmap.h
CONFLICT (content): Merge conflict in sys/net/netmap.h
Auto-merging sys/dev/netmap/netmap_mem2.h
CONFLICT (content): Merge conflict in sys/dev/netmap/netmap_mem2.h
Auto-merging sys/dev/netmap/netmap_mem2.c
CONFLICT (content): Merge conflict in sys/dev/netmap/netmap_mem2.c
Auto-merging sys/dev/netmap/netmap.c
CONFLICT (content): Merge conflict in sys/dev/netmap/netmap.c
Auto-merging LINUX/configure
CONFLICT (content): Merge conflict in LINUX/configure
Failed to merge in the changes.
Patch failed at 0003 extmem: user-supplied netmap memory region
The copy of the patch that failed is found in:
   /home/hoffmann/netmap/.git/rebase-apply/patch

When you have resolved this problem, run ""git rebase --continue"".
If you prefer to skip this patch, run ""git rebase --skip"" instead.
To check out the original branch and stop rebasing, run ""git rebase --abort"".

There are conflicts. Doh.
Is this because I merged already tag v11.4 into rpm, and your master is still based on v11.3?
How can we sort this out?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/528#issuecomment-413748028,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","This branch looks impossible to recover. I would just create a clean branch starting from the master branch:
$ git checkout -b mybranch origin/master

And the manually copy and git-add the files that you added (maybe taken from your previous branch)
$ cp -r /path/to/other/repo/LINUX/RPM LINUX/RPM
$ git add LINUX/RPM
$ git commit",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/DirkHoffmann,5,https://github.com/luigirizzo/netmap/pull/528#issuecomment-413765337,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","On Aug 16, Vincenzo Maffione wrote:

 This branch looks impossible to recover.
I would be, if you merged v11.4 and master.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/vmaffione,6,https://github.com/luigirizzo/netmap/pull/528#issuecomment-414067395,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","Pull requests must be based on master. The 11.4 tag was created only for legacy ptnetmap usage. It's not a stable release.
Thanks",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/DirkHoffmann,7,https://github.com/luigirizzo/netmap/pull/528#issuecomment-420270406,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","Pull requests must be based on master. The 11.4 tag was created only for legacy ptnetmap usage. It's not a stable release.

Thank you, understood. Is there a forum, newsgroup or mailing list, where I can get the information directly which tags are important or official and which ones are supposed to be ""only something""? I will rebase, but would like to avoid the double work in future, of course.
I have to finalise a formal request to contribute on your github, with respect to my employer. Then I come back to this. In the meantime, I moved the RPM directory to LINUX (as it is specific to that and it made no sense for me on the same level as WINDOWS). So there will be quite some changes. If you want to keep your tracker clean and close this PR, it is fine for me, and I will open a clean one later this month.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/vmaffione,8,https://github.com/luigirizzo/netmap/pull/528#issuecomment-420282969,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","Please ignore all the tags. Some are for specific use (e.g. 11.4 for ptnetmap), but definitely none is for contributing code.
Please just rebase your work on the master branch. Btw, your contribution should be some files in a new directory, so there should not be any merge conflicts or double work.
Feel free to close yourself this PR when you are ready and open another one.
Thanks",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/DirkHoffmann,9,https://github.com/luigirizzo/netmap/pull/528#issuecomment-420284841,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","Please ignore all the tags. Some are for specific use (e.g. 11.4 for ptnetmap), but definitely none is for contributing code.
Yes, but at some point I need to base our distributions on a fixed version.
Ideally we would use the already existing version tags then. Or what would you
recommend?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,528,2018-08-08T09:54:52Z,,2019-02-03T12:22:28Z,OPEN,False,2087,202,19,https://github.com/DirkHoffmann,RPM,66,[],https://github.com/luigirizzo/netmap/pull/528,https://github.com/vmaffione,10,https://github.com/luigirizzo/netmap/pull/528#issuecomment-420286727,"I am not sure if this is mature enough for merging, but I would like to get into contact with the dev team for discussing.
In our project we need to deploy software as RPM packages. I started to provide the necessary .spec file, and the deployment works well. The necessary files with a README are available in the directory RPM/.
I would certainly like to polish the code a bit more before integrating it into your main repository. And maybe you have some ideas how I should organise my contribution for that. Please advise.
Are you happy with a pull request with all commits, or do I need to squash them into the latest commit first?","This software is rolling release, so there are no releases.
If you want to use a fixed version, what I would recommend is just to pick current master (f97b2b2), and stick to that.
(Unless you find some bug in the current master, obviously. In that case please report the bug so that we can try to fix it).",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,530,2018-08-10T15:17:10Z,2018-08-17T23:45:13Z,2018-08-17T23:45:20Z,MERGED,True,1,1,1,https://github.com/sdpetrides,change variable name to fix bug,1,[],https://github.com/luigirizzo/netmap/pull/530,https://github.com/sdpetrides,1,https://github.com/luigirizzo/netmap/pull/530,Variable was not declared and log statement caused error.,Variable was not declared and log statement caused error.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,530,2018-08-10T15:17:10Z,2018-08-17T23:45:13Z,2018-08-17T23:45:20Z,MERGED,True,1,1,1,https://github.com/sdpetrides,change variable name to fix bug,1,[],https://github.com/luigirizzo/netmap/pull/530,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/530#issuecomment-414013936,Variable was not declared and log statement caused error.,Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,532,2018-08-13T15:02:33Z,2018-11-26T22:12:28Z,2018-11-26T22:12:28Z,CLOSED,False,2,1,1,https://github.com/markabey,Resolve igb 5.3.5.18 with a driver suffix,1,[],https://github.com/luigirizzo/netmap/pull/532,https://github.com/markabey,1,https://github.com/luigirizzo/netmap/pull/532,"Closes #531, thanks to @giuseppelettieri","Closes #531, thanks to @giuseppelettieri",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,532,2018-08-13T15:02:33Z,2018-11-26T22:12:28Z,2018-11-26T22:12:28Z,CLOSED,False,2,1,1,https://github.com/markabey,Resolve igb 5.3.5.18 with a driver suffix,1,[],https://github.com/luigirizzo/netmap/pull/532,https://github.com/markabey,2,https://github.com/luigirizzo/netmap/pull/532#issuecomment-441819541,"Closes #531, thanks to @giuseppelettieri",Change already made upstream in 0ffdd21,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,533,2018-08-15T02:16:27Z,2018-08-17T23:40:48Z,2018-08-17T23:40:53Z,MERGED,True,1,1,1,https://github.com/stephen-hurd,Memset fix,2,[],https://github.com/luigirizzo/netmap/pull/533,https://github.com/stephen-hurd,1,https://github.com/luigirizzo/netmap/pull/533,"Fixes a harmless transposition of memset() parameters.  To be honest, I don't think the memset() is accomplishing anything here anyway.","Fixes a harmless transposition of memset() parameters.  To be honest, I don't think the memset() is accomplishing anything here anyway.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,533,2018-08-15T02:16:27Z,2018-08-17T23:40:48Z,2018-08-17T23:40:53Z,MERGED,True,1,1,1,https://github.com/stephen-hurd,Memset fix,2,[],https://github.com/luigirizzo/netmap/pull/533,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/533#issuecomment-414013389,"Fixes a harmless transposition of memset() parameters.  To be honest, I don't think the memset() is accomplishing anything here anyway.",Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,537,2018-09-02T23:18:58Z,2018-09-03T07:01:22Z,2018-09-03T07:01:22Z,MERGED,True,0,6,1,https://github.com/jmgurney,remove docs about how kqueue is unsupported,1,[],https://github.com/luigirizzo/netmap/pull/537,https://github.com/jmgurney,1,https://github.com/luigirizzo/netmap/pull/537,Looks like old docs says that kqueue is unsupported.  Multiple other places in the page says that it is supported.,Looks like old docs says that kqueue is unsupported.  Multiple other places in the page says that it is supported.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,537,2018-09-02T23:18:58Z,2018-09-03T07:01:22Z,2018-09-03T07:01:22Z,MERGED,True,0,6,1,https://github.com/jmgurney,remove docs about how kqueue is unsupported,1,[],https://github.com/luigirizzo/netmap/pull/537,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/537#issuecomment-418019545,Looks like old docs says that kqueue is unsupported.  Multiple other places in the page says that it is supported.,"Yes, kqueue and epoll are supported. Thanks.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,541,2018-09-09T13:26:23Z,,2019-02-03T12:22:28Z,OPEN,False,7,7,1,https://github.com/jmtilli,net/netmap_user.h: make netmap applications compile with -Wsign-conversion,1,[],https://github.com/luigirizzo/netmap/pull/541,https://github.com/jmtilli,1,https://github.com/luigirizzo/netmap/pull/541,"net/netmap_user.h: make netmap applications compile with -Wsign-conversion
This change is necessary to allow compiling external netmap applications with strict compiler warnings.
Has been completely untested: didn't test on 64-bit Linux, didn't test on 32-bit arch, didn't test on FreeBSD. The only thing I tested is that my application compiles now but didn't compile previously due to compiler errors.
Should solve Issue #540.","net/netmap_user.h: make netmap applications compile with -Wsign-conversion
This change is necessary to allow compiling external netmap applications with strict compiler warnings.
Has been completely untested: didn't test on 64-bit Linux, didn't test on 32-bit arch, didn't test on FreeBSD. The only thing I tested is that my application compiles now but didn't compile previously due to compiler errors.
Should solve Issue #540.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,543,2018-09-12T19:17:33Z,2018-09-13T08:42:25Z,2018-09-13T13:13:58Z,MERGED,True,4,4,2,https://github.com/garrettkajmowicz-sophos,Minor debug statement fixes for virtio and bridge,1,[],https://github.com/luigirizzo/netmap/pull/543,https://github.com/garrettkajmowicz-sophos,1,https://github.com/luigirizzo/netmap/pull/543,Signed-off-by: Garrett Kajmowicz garrett.kajmowicz@sophos.com,Signed-off-by: Garrett Kajmowicz garrett.kajmowicz@sophos.com,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,547,2018-09-26T05:28:31Z,2018-09-26T13:35:19Z,2018-09-26T13:35:20Z,MERGED,True,2,2,1,https://github.com/DongCai008,netmap/netmap_mem2: fix memory pool bitmap not initialized all bits,1,[],https://github.com/luigirizzo/netmap/pull/547,https://github.com/DongCai008,1,https://github.com/luigirizzo/netmap/pull/547,"memset is based on number of bytes not the sizeof(u32). therefore, not all bitmap bytes initialized","memset is based on number of bytes not the sizeof(u32). therefore, not all bitmap bytes initialized",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,547,2018-09-26T05:28:31Z,2018-09-26T13:35:19Z,2018-09-26T13:35:20Z,MERGED,True,2,2,1,https://github.com/DongCai008,netmap/netmap_mem2: fix memory pool bitmap not initialized all bits,1,[],https://github.com/luigirizzo/netmap/pull/547,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/547#issuecomment-424717284,"memset is based on number of bytes not the sizeof(u32). therefore, not all bitmap bytes initialized",Thanks.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,558,2018-11-08T19:19:33Z,2018-11-13T14:44:54Z,2018-11-13T14:44:54Z,CLOSED,False,4,1,1,https://github.com/joshraiff-sophos,NAF_FORCE_RECLAIM can cause no ring buffers to be available,4,[],https://github.com/luigirizzo/netmap/pull/558,https://github.com/joshraiff-sophos,1,https://github.com/luigirizzo/netmap/pull/558,"When doing a force reclaim, the code blindly moves nr_hwtail.
It needs to ensure there is at least one free buffer.
It looks like all the drivers have this change.  I can do that if we decide this is the correct change.","When doing a force reclaim, the code blindly moves nr_hwtail.
It needs to ensure there is at least one free buffer.
It looks like all the drivers have this change.  I can do that if we decide this is the correct change.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,558,2018-11-08T19:19:33Z,2018-11-13T14:44:54Z,2018-11-13T14:44:54Z,CLOSED,False,4,1,1,https://github.com/joshraiff-sophos,NAF_FORCE_RECLAIM can cause no ring buffers to be available,4,[],https://github.com/luigirizzo/netmap/pull/558,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/558#issuecomment-437386279,"When doing a force reclaim, the code blindly moves nr_hwtail.
It needs to ensure there is at least one free buffer.
It looks like all the drivers have this change.  I can do that if we decide this is the correct change.",The code was updating the nr_hwtail pointer based on the value coming from the NIC. Have you actually observed any error caused by this?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,558,2018-11-08T19:19:33Z,2018-11-13T14:44:54Z,2018-11-13T14:44:54Z,CLOSED,False,4,1,1,https://github.com/joshraiff-sophos,NAF_FORCE_RECLAIM can cause no ring buffers to be available,4,[],https://github.com/luigirizzo/netmap/pull/558,https://github.com/joshraiff-sophos,3,https://github.com/luigirizzo/netmap/pull/558#issuecomment-437399741,"When doing a force reclaim, the code blindly moves nr_hwtail.
It needs to ensure there is at least one free buffer.
It looks like all the drivers have this change.  I can do that if we decide this is the correct change.","Yes.  I have a setup where I have a vale switch that routing traffic to the host and to a user app.  After bringing it up, if I ping the ip address associated with the host port, I can see an arp request coming in, the host generates an arp reply, but it never goes out.
I added some debug prints and found that the curr and tail pointers were the same after returning from ixgbe_netmap_txsync() so nm_kr_space() is returning 0 buffers available.  The igb driver does not exhibit this behavior.
This is new since 303763f",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,558,2018-11-08T19:19:33Z,2018-11-13T14:44:54Z,2018-11-13T14:44:54Z,CLOSED,False,4,1,1,https://github.com/joshraiff-sophos,NAF_FORCE_RECLAIM can cause no ring buffers to be available,4,[],https://github.com/luigirizzo/netmap/pull/558,https://github.com/joshraiff-sophos,4,https://github.com/luigirizzo/netmap/pull/558#issuecomment-437507765,"When doing a force reclaim, the code blindly moves nr_hwtail.
It needs to ensure there is at least one free buffer.
It looks like all the drivers have this change.  I can do that if we decide this is the correct change.","Perhaps I am treating a symptom of another issue?  I've boiled reproducing this to a fairly small set of commands.  If I revert 303763f I do not see this bug.
insmod ./netmap.ko
insmod ./ixgbe/ixgbe.ko
ethtool -K Port9 tx off gro off gso off tso off sg off rxvlan off txvlan off
vale-ctl -h vale0:Port9
ifconfig Port9 up
vale-ctl -n host1
vale-ctl -a vale0:host1 -m 1
sysctl -w net.ipv4.ip_forward=1
net.ipv4.ip_forward = 1
ip link set dev Port9 up
ip addr add 1.1.1.1/16 dev Port9
ping 1.1.1.2 -c 1
PING 1.1.1.2 (1.1.1.2) 56(84) bytes of data.
64 bytes from 1.1.1.2: icmp_seq=1 ttl=64 time=2027 ms
--- 1.1.1.2 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 2027.677/2027.677/2027.677/0.000 ms
ip link set dev Port9 down   ####  Setting the link down triggers the issue.
ip link set dev Port9 up
ping 1.1.1.2 -c 1
PING 1.1.1.2 (1.1.1.2) 56(84) bytes of data.
From 1.1.1.1 icmp_seq=1 Destination Host Unreachable
--- 1.1.1.2 ping statistics ---
1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,560,2018-11-13T14:52:09Z,2018-11-13T15:50:34Z,2018-11-13T15:51:51Z,MERGED,True,7,0,1,https://github.com/joshraiff-sophos,netmap_vale_attach can leak memory references,1,[],https://github.com/luigirizzo/netmap/pull/560,https://github.com/joshraiff-sophos,1,https://github.com/luigirizzo/netmap/pull/560,"If netmap_vale_attach() is called with a memory region, it
will leak a reference to that region.  Make sure to do a
netmap_mem_put in this case.
Fixes issue 559","If netmap_vale_attach() is called with a memory region, it
will leak a reference to that region.  Make sure to do a
netmap_mem_put in this case.
Fixes issue 559",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,565,2018-11-19T16:22:06Z,2018-11-19T17:34:15Z,2018-11-19T17:34:15Z,MERGED,True,4,2,2,https://github.com/grantcurell,Update help message in nmreplay,1,[],https://github.com/luigirizzo/netmap/pull/565,https://github.com/grantcurell,1,https://github.com/luigirizzo/netmap/pull/565,"The help message in nmreplay is misleading. nmreplay will not work if you only put the interface name. It has to be preferenced with netmap: in order to work. However, if it fails you are simply told ""could not open interface "" which leaves the user thinking there is another problem.","The help message in nmreplay is misleading. nmreplay will not work if you only put the interface name. It has to be preferenced with netmap: in order to work. However, if it fails you are simply told ""could not open interface "" which leaves the user thinking there is another problem.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,565,2018-11-19T16:22:06Z,2018-11-19T17:34:15Z,2018-11-19T17:34:15Z,MERGED,True,4,2,2,https://github.com/grantcurell,Update help message in nmreplay,1,[],https://github.com/luigirizzo/netmap/pull/565,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/565#issuecomment-439971939,"The help message in nmreplay is misleading. nmreplay will not work if you only put the interface name. It has to be preferenced with netmap: in order to work. However, if it fails you are simply told ""could not open interface "" which leaves the user thinking there is another problem.","Looks good, but could please squash the change in a single commit?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,565,2018-11-19T16:22:06Z,2018-11-19T17:34:15Z,2018-11-19T17:34:15Z,MERGED,True,4,2,2,https://github.com/grantcurell,Update help message in nmreplay,1,[],https://github.com/luigirizzo/netmap/pull/565,https://github.com/grantcurell,3,https://github.com/luigirizzo/netmap/pull/565#issuecomment-439972542,"The help message in nmreplay is misleading. nmreplay will not work if you only put the interface name. It has to be preferenced with netmap: in order to work. However, if it fails you are simply told ""could not open interface "" which leaves the user thinking there is another problem.","Looks good, but could please squash the change in a single commit?

Done!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,565,2018-11-19T16:22:06Z,2018-11-19T17:34:15Z,2018-11-19T17:34:15Z,MERGED,True,4,2,2,https://github.com/grantcurell,Update help message in nmreplay,1,[],https://github.com/luigirizzo/netmap/pull/565,https://github.com/vmaffione,4,https://github.com/luigirizzo/netmap/pull/565#issuecomment-439973520,"The help message in nmreplay is misleading. nmreplay will not work if you only put the interface name. It has to be preferenced with netmap: in order to work. However, if it fails you are simply told ""could not open interface "" which leaves the user thinking there is another problem.","Can you please amend your commit message, maybe keeping only the title (""Update help message in nmreplay""), and the Signed-off-by line with your email? The current description contains typos and weird characters, and can be discarded.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,565,2018-11-19T16:22:06Z,2018-11-19T17:34:15Z,2018-11-19T17:34:15Z,MERGED,True,4,2,2,https://github.com/grantcurell,Update help message in nmreplay,1,[],https://github.com/luigirizzo/netmap/pull/565,https://github.com/grantcurell,5,https://github.com/luigirizzo/netmap/pull/565#issuecomment-439976797,"The help message in nmreplay is misleading. nmreplay will not work if you only put the interface name. It has to be preferenced with netmap: in order to work. However, if it fails you are simply told ""could not open interface "" which leaves the user thinking there is another problem.","Can you please amend your commit message, maybe keeping only the title (""Update help message in nmreplay""), and the Signed-off-by line with your email? The current description contains typos and weird characters, and can be discarded.

Oops my bad - looks like my git program autogenerated some things and I didn't notice. I'm cheating and am not using the command line client hahaha.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,565,2018-11-19T16:22:06Z,2018-11-19T17:34:15Z,2018-11-19T17:34:15Z,MERGED,True,4,2,2,https://github.com/grantcurell,Update help message in nmreplay,1,[],https://github.com/luigirizzo/netmap/pull/565,https://github.com/vmaffione,6,https://github.com/luigirizzo/netmap/pull/565#issuecomment-439977320,"The help message in nmreplay is misleading. nmreplay will not work if you only put the interface name. It has to be preferenced with netmap: in order to work. However, if it fails you are simply told ""could not open interface "" which leaves the user thinking there is another problem.","No problems, thank you",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,569,2018-11-27T22:10:51Z,,2019-02-03T12:22:28Z,OPEN,False,88,4,4,https://github.com/garrettkajmowicz-sophos,Upstream vale port type extraction,3,[],https://github.com/luigirizzo/netmap/pull/569,https://github.com/garrettkajmowicz-sophos,1,https://github.com/luigirizzo/netmap/pull/569,"Adds some logic which we have found to be useful. Namely, provide a way to determine what type of VALE port we are dealing with. This is useful to identify configuration issues or to be able to take different actions based on where the data is coming from.","Adds some logic which we have found to be useful. Namely, provide a way to determine what type of VALE port we are dealing with. This is useful to identify configuration issues or to be able to take different actions based on where the data is coming from.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,569,2018-11-27T22:10:51Z,,2019-02-03T12:22:28Z,OPEN,False,88,4,4,https://github.com/garrettkajmowicz-sophos,Upstream vale port type extraction,3,[],https://github.com/luigirizzo/netmap/pull/569,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/569#issuecomment-457584964,"Adds some logic which we have found to be useful. Namely, provide a way to determine what type of VALE port we are dealing with. This is useful to identify configuration issues or to be able to take different actions based on where the data is coming from.","Hi,
We discussed with @giuseppelettieri , and we think it is necessary to change the approach to play with this kind of port-type information.
Trying to recover the port type by peeking inside pointers of the netmap adapters is very fragile (w.r.t. changes) and unnecessarily complex. Also, we should make this mechanism more generic, and make it possible to recover the port-type also for non-VALE ports.
A better approach is to add an adapter_type or port_type enum field to the struct netmap_adapter, so that any netmap port has a port type. The adapter_type field is set when the netmap adapter struct is created. This may be netmap_attach for NIC ports, netmap_get_null_na for null ports, netmap_get_pipe_na for pipe ports, etc. You can look at the netmap_get_na function to see all the ports that we support.
Once we do this, we can extend the struct nmreq_port_info_get to retrieve the additional adaper_type field. We can also add this field to struct nmreq_vale_list, as your original change did.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,570,2018-11-30T12:01:46Z,2018-12-12T11:08:54Z,2018-12-12T11:08:54Z,MERGED,True,394,91,3,https://github.com/funman,Mellanox 4.5 ConnectX-5,1,[],https://github.com/luigirizzo/netmap/pull/570,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/570,"This PR adapts the patch for Mellanox 3.3 tested on ConnectX-4, to the 4.5 driver tested with ConnectX-5.
I would like to get some feedback before I do this and squash the commits together.
I left a couple of TODOs, especially in places where we have to check if a queue is using netmap or not.
Note: it is not possible to select 3.3 or 4.5, because the source tarballs have different format (in both cases it's a tgz inside a tgz inside a tgz ..........)
Comments welcome!","This PR adapts the patch for Mellanox 3.3 tested on ConnectX-4, to the 4.5 driver tested with ConnectX-5.
I would like to get some feedback before I do this and squash the commits together.
I left a couple of TODOs, especially in places where we have to check if a queue is using netmap or not.
Note: it is not possible to select 3.3 or 4.5, because the source tarballs have different format (in both cases it's a tgz inside a tgz inside a tgz ..........)
Comments welcome!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,570,2018-11-30T12:01:46Z,2018-12-12T11:08:54Z,2018-12-12T11:08:54Z,MERGED,True,394,91,3,https://github.com/funman,Mellanox 4.5 ConnectX-5,1,[],https://github.com/luigirizzo/netmap/pull/570,https://github.com/funman,2,https://github.com/luigirizzo/netmap/pull/570#issuecomment-443710404,"This PR adapts the patch for Mellanox 3.3 tested on ConnectX-4, to the 4.5 driver tested with ConnectX-5.
I would like to get some feedback before I do this and squash the commits together.
I left a couple of TODOs, especially in places where we have to check if a queue is using netmap or not.
Note: it is not possible to select 3.3 or 4.5, because the source tarballs have different format (in both cases it's a tgz inside a tgz inside a tgz ..........)
Comments welcome!","I updated this PR with a patch for recently released 4.5 driver, I pushed the previous branch content in my mlx5-drv-4.3 branch",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,570,2018-11-30T12:01:46Z,2018-12-12T11:08:54Z,2018-12-12T11:08:54Z,MERGED,True,394,91,3,https://github.com/funman,Mellanox 4.5 ConnectX-5,1,[],https://github.com/luigirizzo/netmap/pull/570,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/570#issuecomment-446549993,"This PR adapts the patch for Mellanox 3.3 tested on ConnectX-4, to the 4.5 driver tested with ConnectX-5.
I would like to get some feedback before I do this and squash the commits together.
I left a couple of TODOs, especially in places where we have to check if a queue is using netmap or not.
Note: it is not possible to select 3.3 or 4.5, because the source tarballs have different format (in both cases it's a tgz inside a tgz inside a tgz ..........)
Comments welcome!","I haven't found the time to test this yet, but I see that others have done it. Many thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,571,2018-12-05T13:32:44Z,2018-12-07T11:24:42Z,2018-12-07T11:24:42Z,MERGED,True,1,8,2,https://github.com/funman,mlx5: don't skip prepare step when building patched driver,1,[],https://github.com/luigirizzo/netmap/pull/571,https://github.com/funman,1,https://github.com/luigirizzo/netmap/pull/571,This seems to cause build failures with more recent driver version,This seems to cause build failures with more recent driver version,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,574,2018-12-07T14:29:13Z,2018-12-15T18:43:12Z,2018-12-17T15:10:26Z,MERGED,True,61,42,3,https://github.com/joshraiff-sophos,Add ability to change MTU once device driver is loaded.,1,[],https://github.com/luigirizzo/netmap/pull/574,https://github.com/joshraiff-sophos,1,https://github.com/luigirizzo/netmap/pull/574,"If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.","If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,574,2018-12-07T14:29:13Z,2018-12-15T18:43:12Z,2018-12-17T15:10:26Z,MERGED,True,61,42,3,https://github.com/joshraiff-sophos,Add ability to change MTU once device driver is loaded.,1,[],https://github.com/luigirizzo/netmap/pull/574,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/574#issuecomment-445298739,"If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.","I think we can merge this. What do you think, @vmaffione?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,574,2018-12-07T14:29:13Z,2018-12-15T18:43:12Z,2018-12-17T15:10:26Z,MERGED,True,61,42,3,https://github.com/joshraiff-sophos,Add ability to change MTU once device driver is loaded.,1,[],https://github.com/luigirizzo/netmap/pull/574,https://github.com/vmaffione,3,https://github.com/luigirizzo/netmap/pull/574#issuecomment-445313570,"If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.","The point of current code is to prevent the MTU from changing while the NIC is in netmap mode.
You can actually change the MTU while the NIC is not in netmap mode. Why is this not sufficient?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,574,2018-12-07T14:29:13Z,2018-12-15T18:43:12Z,2018-12-17T15:10:26Z,MERGED,True,61,42,3,https://github.com/joshraiff-sophos,Add ability to change MTU once device driver is loaded.,1,[],https://github.com/luigirizzo/netmap/pull/574,https://github.com/joshraiff-sophos,4,https://github.com/luigirizzo/netmap/pull/574#issuecomment-445822304,"If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.","I have all of my devices attached to a vale switch, its not so easy to move out of netmap mode without detaching them is it?  What happens to in-flight on a non-netmap NIC when you change the MTU?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,574,2018-12-07T14:29:13Z,2018-12-15T18:43:12Z,2018-12-17T15:10:26Z,MERGED,True,61,42,3,https://github.com/joshraiff-sophos,Add ability to change MTU once device driver is loaded.,1,[],https://github.com/luigirizzo/netmap/pull/574,https://github.com/vmaffione,5,https://github.com/luigirizzo/netmap/pull/574#issuecomment-445849942,"If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.","Yes, in that use-case it may be useful.
MTU changes while a netdevice is up is supported by Linux and FreeBSD network stacks.
I'm trying to think about what could be possibly go wrong if you change the MTU while netmap applications are running, but I don't really see a problem (since you validate).",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,574,2018-12-07T14:29:13Z,2018-12-15T18:43:12Z,2018-12-17T15:10:26Z,MERGED,True,61,42,3,https://github.com/joshraiff-sophos,Add ability to change MTU once device driver is loaded.,1,[],https://github.com/luigirizzo/netmap/pull/574,https://github.com/vmaffione,6,https://github.com/luigirizzo/netmap/pull/574#issuecomment-445895907,"If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.",Can you please squash the two commits?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,574,2018-12-07T14:29:13Z,2018-12-15T18:43:12Z,2018-12-17T15:10:26Z,MERGED,True,61,42,3,https://github.com/joshraiff-sophos,Add ability to change MTU once device driver is loaded.,1,[],https://github.com/luigirizzo/netmap/pull/574,https://github.com/joshraiff-sophos,7,https://github.com/luigirizzo/netmap/pull/574#issuecomment-445920145,"If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.",Is it ok to rebase/force push is is there a more preferred way?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,574,2018-12-07T14:29:13Z,2018-12-15T18:43:12Z,2018-12-17T15:10:26Z,MERGED,True,61,42,3,https://github.com/joshraiff-sophos,Add ability to change MTU once device driver is loaded.,1,[],https://github.com/luigirizzo/netmap/pull/574,https://github.com/vmaffione,8,https://github.com/luigirizzo/netmap/pull/574#issuecomment-445963539,"If the linux interface device driver supports NS_MOREFRAG or the
new MTU still fits within a netmap buffer, allow the MTU to be
changed.","yes, you can force push to your branch, and rebase if you wish",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,577,2019-01-02T20:50:34Z,,2019-02-03T12:22:28Z,OPEN,False,39,0,4,https://github.com/suja-sasikumar,Implemented zero copy between vale ports,1,[],https://github.com/luigirizzo/netmap/pull/577,https://github.com/suja-sasikumar,1,https://github.com/luigirizzo/netmap/pull/577,"Implemented zero copy between vale ports for better performance. Zero copy of packet will be done as long as :

it is not to a broadcast packet, and
the source and dest ports are in the same memory region.

Also, provided a compile time option to turn zero copy mode ON/OFF.","Implemented zero copy between vale ports for better performance. Zero copy of packet will be done as long as :

it is not to a broadcast packet, and
the source and dest ports are in the same memory region.

Also, provided a compile time option to turn zero copy mode ON/OFF.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,579,2019-01-14T13:56:06Z,2019-01-25T14:16:32Z,2019-01-25T14:16:32Z,CLOSED,False,555,83,2,https://github.com/coreybonnell-sophos,Rewritten RX/TX routines for vmxnet3 driver,3,[],https://github.com/luigirizzo/netmap/pull/579,https://github.com/coreybonnell-sophos,1,https://github.com/luigirizzo/netmap/pull/579,"vmxnet3 driver implementation has been largely modified such that the driver no longer memcpy's RX/TX buffer contents into netmap buffers, but rather configures the virtual device on initialization to point directly to the netmap buffers (such that they are populated directly via DMA). By doing so, a significant performance benefit was realized (5-10% increase for RX, 2x+ for TX). In addition, these changes take into account recent revisions to the vmxnet3 vNIC so that newer revisions are now supported (thus addressing #575).
We have done our testing against kernel version 4.13. We have not tested previous versions, especially considering that the earliest supported kernel version for the current vmxnet3 driver is 3.10, which has been EOL'ed for over a year. As such, we created a separate header file for this new version of the driver.
Header file source code has already been formatted using clang-format (as was requested when the initial vmxnet3 driver was submitted as a PR).","vmxnet3 driver implementation has been largely modified such that the driver no longer memcpy's RX/TX buffer contents into netmap buffers, but rather configures the virtual device on initialization to point directly to the netmap buffers (such that they are populated directly via DMA). By doing so, a significant performance benefit was realized (5-10% increase for RX, 2x+ for TX). In addition, these changes take into account recent revisions to the vmxnet3 vNIC so that newer revisions are now supported (thus addressing #575).
We have done our testing against kernel version 4.13. We have not tested previous versions, especially considering that the earliest supported kernel version for the current vmxnet3 driver is 3.10, which has been EOL'ed for over a year. As such, we created a separate header file for this new version of the driver.
Header file source code has already been formatted using clang-format (as was requested when the initial vmxnet3 driver was submitted as a PR).",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,579,2019-01-14T13:56:06Z,2019-01-25T14:16:32Z,2019-01-25T14:16:32Z,CLOSED,False,555,83,2,https://github.com/coreybonnell-sophos,Rewritten RX/TX routines for vmxnet3 driver,3,[],https://github.com/luigirizzo/netmap/pull/579,https://github.com/vmaffione,2,https://github.com/luigirizzo/netmap/pull/579#issuecomment-455090911,"vmxnet3 driver implementation has been largely modified such that the driver no longer memcpy's RX/TX buffer contents into netmap buffers, but rather configures the virtual device on initialization to point directly to the netmap buffers (such that they are populated directly via DMA). By doing so, a significant performance benefit was realized (5-10% increase for RX, 2x+ for TX). In addition, these changes take into account recent revisions to the vmxnet3 vNIC so that newer revisions are now supported (thus addressing #575).
We have done our testing against kernel version 4.13. We have not tested previous versions, especially considering that the earliest supported kernel version for the current vmxnet3 driver is 3.10, which has been EOL'ed for over a year. As such, we created a separate header file for this new version of the driver.
Header file source code has already been formatted using clang-format (as was requested when the initial vmxnet3 driver was submitted as a PR).","Thanks! As a first step, I think you should rename LINUX/final-patches/vanilla--vmxnet3--31000--99999 to LINUX/final-patches/vanilla--vmxnet3--31000--40d00, so that the old patch applies from 3.10 to 4.12 and the new one from 4.13 onwards. Then we can let travis build on all the versions and see what happens.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,579,2019-01-14T13:56:06Z,2019-01-25T14:16:32Z,2019-01-25T14:16:32Z,CLOSED,False,555,83,2,https://github.com/coreybonnell-sophos,Rewritten RX/TX routines for vmxnet3 driver,3,[],https://github.com/luigirizzo/netmap/pull/579,https://github.com/coreybonnell-sophos,3,https://github.com/luigirizzo/netmap/pull/579#issuecomment-455180367,"vmxnet3 driver implementation has been largely modified such that the driver no longer memcpy's RX/TX buffer contents into netmap buffers, but rather configures the virtual device on initialization to point directly to the netmap buffers (such that they are populated directly via DMA). By doing so, a significant performance benefit was realized (5-10% increase for RX, 2x+ for TX). In addition, these changes take into account recent revisions to the vmxnet3 vNIC so that newer revisions are now supported (thus addressing #575).
We have done our testing against kernel version 4.13. We have not tested previous versions, especially considering that the earliest supported kernel version for the current vmxnet3 driver is 3.10, which has been EOL'ed for over a year. As such, we created a separate header file for this new version of the driver.
Header file source code has already been formatted using clang-format (as was requested when the initial vmxnet3 driver was submitted as a PR).","Thanks @vmaffione, I just renamed the ""old"" patch file such that it will be applied on older kernels only as you requested (we had it renamed internally but I failed to include that rename in this PR).",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,579,2019-01-14T13:56:06Z,2019-01-25T14:16:32Z,2019-01-25T14:16:32Z,CLOSED,False,555,83,2,https://github.com/coreybonnell-sophos,Rewritten RX/TX routines for vmxnet3 driver,3,[],https://github.com/luigirizzo/netmap/pull/579,https://github.com/giuseppelettieri,4,https://github.com/luigirizzo/netmap/pull/579#issuecomment-457217049,"vmxnet3 driver implementation has been largely modified such that the driver no longer memcpy's RX/TX buffer contents into netmap buffers, but rather configures the virtual device on initialization to point directly to the netmap buffers (such that they are populated directly via DMA). By doing so, a significant performance benefit was realized (5-10% increase for RX, 2x+ for TX). In addition, these changes take into account recent revisions to the vmxnet3 vNIC so that newer revisions are now supported (thus addressing #575).
We have done our testing against kernel version 4.13. We have not tested previous versions, especially considering that the earliest supported kernel version for the current vmxnet3 driver is 3.10, which has been EOL'ed for over a year. As such, we created a separate header file for this new version of the driver.
Header file source code has already been formatted using clang-format (as was requested when the initial vmxnet3 driver was submitted as a PR).","Actuall both patches should be removed from the PR, since they will be generated from the other repository (https://github.com/giuseppelettieri/linux-pspat). Sorry for the confusion.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,581,2019-01-20T16:01:27Z,2019-01-24T14:55:32Z,2019-01-24T14:55:33Z,MERGED,True,12,10,1,https://github.com/AtlasHackert,MLX5 driver unusable when specifying a driver-suffix,1,[],https://github.com/luigirizzo/netmap/pull/581,https://github.com/AtlasHackert,1,https://github.com/luigirizzo/netmap/pull/581,"The way the MLX5 Makefile for driver version 4.5 is patched generates ""undefined symbol"" errors when using a driver-suffix, resulting in an unusable driver. I have corrected the patch so the driver-suffix is handled properly.","The way the MLX5 Makefile for driver version 4.5 is patched generates ""undefined symbol"" errors when using a driver-suffix, resulting in an unusable driver. I have corrected the patch so the driver-suffix is handled properly.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,584,2019-01-24T16:47:16Z,2019-01-24T17:45:31Z,2019-01-24T17:45:31Z,MERGED,True,555,0,1,https://github.com/coreybonnell-sophos,New vmxnet3 RX/TX routines,1,[],https://github.com/luigirizzo/netmap/pull/584,https://github.com/coreybonnell-sophos,1,https://github.com/luigirizzo/netmap/pull/584,"New PR with only the header file, as requested.","New PR with only the header file, as requested.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,613,2019-04-30T22:07:54Z,2019-04-30T22:20:18Z,2019-04-30T22:20:18Z,MERGED,True,2,1,1,https://github.com/j-t-d,Make sure num_rx is correctly initialized,1,[],https://github.com/luigirizzo/netmap/pull/613,https://github.com/j-t-d,1,https://github.com/luigirizzo/netmap/pull/613,nmport_mmap doesn't correctly initialize num_rx before using it to determine first_rx_ring,nmport_mmap doesn't correctly initialize num_rx before using it to determine first_rx_ring,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,613,2019-04-30T22:07:54Z,2019-04-30T22:20:18Z,2019-04-30T22:20:18Z,MERGED,True,2,1,1,https://github.com/j-t-d,Make sure num_rx is correctly initialized,1,[],https://github.com/luigirizzo/netmap/pull/613,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/613#issuecomment-488136481,nmport_mmap doesn't correctly initialize num_rx before using it to determine first_rx_ring,Thanks for catching this.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,614,2019-05-05T08:13:52Z,2022-02-22T02:11:59Z,2022-02-22T02:11:59Z,CLOSED,False,2,2,1,https://github.com/YutaroHayakawa,bdg config interface locking,1,[],https://github.com/luigirizzo/netmap/pull/614,https://github.com/YutaroHayakawa,1,https://github.com/luigirizzo/netmap/pull/614,"Since bdg config interface is supposed to be used for updating the configuration of the module (e.g. updating the routing table), I think it should take writer lock instead of reader lock.","Since bdg config interface is supposed to be used for updating the configuration of the module (e.g. updating the routing table), I think it should take writer lock instead of reader lock.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,614,2019-05-05T08:13:52Z,2022-02-22T02:11:59Z,2022-02-22T02:11:59Z,CLOSED,False,2,2,1,https://github.com/YutaroHayakawa,bdg config interface locking,1,[],https://github.com/luigirizzo/netmap/pull/614,https://github.com/YutaroHayakawa,2,https://github.com/luigirizzo/netmap/pull/614#issuecomment-1047359719,"Since bdg config interface is supposed to be used for updating the configuration of the module (e.g. updating the routing table), I think it should take writer lock instead of reader lock.",Seems this is outdated. Let me close.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,637,2019-07-30T17:33:51Z,2019-07-31T07:42:26Z,2019-07-31T07:42:26Z,MERGED,True,26,25,7,https://github.com/j-t-d,Use size_t instead of u_int for total memory.,1,[],https://github.com/luigirizzo/netmap/pull/637,https://github.com/j-t-d,1,https://github.com/luigirizzo/netmap/pull/637,"In testing, when using buf_num over 420,000 or so, with the default
clusternumbers, we run into integer overflow and segfault.
In our environment, we have 40 core servers (20+20) with the nics using
40 tx/rx rings, with the ring slot size set to 4096. We have to set the
buf_num to about 750000 in order to allocate enough memory for our
application to load with around 100000 extra buffers.
This segfaults without this change.
This is basically adapted from issue #602. I left the max buffers at the
default of 1_000_000 and changed some %lu and %ld to %zu %zd","In testing, when using buf_num over 420,000 or so, with the default
clusternumbers, we run into integer overflow and segfault.
In our environment, we have 40 core servers (20+20) with the nics using
40 tx/rx rings, with the ring slot size set to 4096. We have to set the
buf_num to about 750000 in order to allocate enough memory for our
application to load with around 100000 extra buffers.
This segfaults without this change.
This is basically adapted from issue #602. I left the max buffers at the
default of 1_000_000 and changed some %lu and %ld to %zu %zd",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,651,2019-09-25T12:32:48Z,2019-09-30T20:38:40Z,2019-09-30T20:38:40Z,CLOSED,False,14,3,3,https://github.com/ieio74,remove compiler warnings when building for arm32,1,[],https://github.com/luigirizzo/netmap/pull/651,https://github.com/ieio74,1,https://github.com/luigirizzo/netmap/pull/651,"Small modifications to build netmap.ko on arm32 without compiler warnings
Tested arm32 platform: imx6
Compiler: gcc-linaro-7.3.1-2018.05 (https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/arm-linux-gnueabihf/)
Steps I followed:


./configure --no-drivers --no-ext-drivers --kernel-sources=$PATH2KERNELSRC --kernel-dir=$PATH2KERNELSRC --kernel-opts=""ARCH=arm CROSS_COMPILE=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-"" --cc=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc --ld=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-ld --driver-suffix=-netmap


make netmap.ko","Small modifications to build netmap.ko on arm32 without compiler warnings
Tested arm32 platform: imx6
Compiler: gcc-linaro-7.3.1-2018.05 (https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/arm-linux-gnueabihf/)
Steps I followed:


./configure --no-drivers --no-ext-drivers --kernel-sources=$PATH2KERNELSRC --kernel-dir=$PATH2KERNELSRC --kernel-opts=""ARCH=arm CROSS_COMPILE=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-"" --cc=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc --ld=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-ld --driver-suffix=-netmap


make netmap.ko",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,651,2019-09-25T12:32:48Z,2019-09-30T20:38:40Z,2019-09-30T20:38:40Z,CLOSED,False,14,3,3,https://github.com/ieio74,remove compiler warnings when building for arm32,1,[],https://github.com/luigirizzo/netmap/pull/651,https://github.com/jhk098,2,https://github.com/luigirizzo/netmap/pull/651#issuecomment-536726413,"Small modifications to build netmap.ko on arm32 without compiler warnings
Tested arm32 platform: imx6
Compiler: gcc-linaro-7.3.1-2018.05 (https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/arm-linux-gnueabihf/)
Steps I followed:


./configure --no-drivers --no-ext-drivers --kernel-sources=$PATH2KERNELSRC --kernel-dir=$PATH2KERNELSRC --kernel-opts=""ARCH=arm CROSS_COMPILE=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-"" --cc=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc --ld=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-ld --driver-suffix=-netmap


make netmap.ko","Ok, so if current master works we can close this pull request.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,655,2019-10-17T00:37:55Z,2019-10-21T18:05:19Z,2019-10-21T18:05:20Z,CLOSED,False,1,1,1,https://github.com/jvary,Fixing build error when building on Debian Buster,1,[],https://github.com/luigirizzo/netmap/pull/655,https://github.com/jvary,1,https://github.com/luigirizzo/netmap/pull/655,"Fixing build error when building on Debian Buster
Ensuring glob_arg.base_name stays null terminated
cc (Debian 8.3.0-6) 8.3.0
make[1]: Entering directory '/home/dev/code/netmap/LINUX/build-apps/lb'
cc -O2 -pipe -Werror -Wall -Wunused-function -I /home/dev/code/netmap/LINUX/../sys -I /home/dev/code/netmap/LINUX/../apps/include -Wextra   -c -o lb.o /home/dev/code/netmap/LINUX/../apps/lb/lb.c
/home/dev/code/netmap/LINUX/../apps/lb/lb.c: In function â€˜mainâ€™:
/home/dev/code/netmap/LINUX/../apps/lb/lb.c:655:2: error: â€˜strncpyâ€™ specified bound 64 equals destination size [-Werror=stringop-truncation]
strncpy(glob_arg.base_name, nscan, MAX_IFNAMELEN);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors","Fixing build error when building on Debian Buster
Ensuring glob_arg.base_name stays null terminated
cc (Debian 8.3.0-6) 8.3.0
make[1]: Entering directory '/home/dev/code/netmap/LINUX/build-apps/lb'
cc -O2 -pipe -Werror -Wall -Wunused-function -I /home/dev/code/netmap/LINUX/../sys -I /home/dev/code/netmap/LINUX/../apps/include -Wextra   -c -o lb.o /home/dev/code/netmap/LINUX/../apps/lb/lb.c
/home/dev/code/netmap/LINUX/../apps/lb/lb.c: In function â€˜mainâ€™:
/home/dev/code/netmap/LINUX/../apps/lb/lb.c:655:2: error: â€˜strncpyâ€™ specified bound 64 equals destination size [-Werror=stringop-truncation]
strncpy(glob_arg.base_name, nscan, MAX_IFNAMELEN);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,655,2019-10-17T00:37:55Z,2019-10-21T18:05:19Z,2019-10-21T18:05:20Z,CLOSED,False,1,1,1,https://github.com/jvary,Fixing build error when building on Debian Buster,1,[],https://github.com/luigirizzo/netmap/pull/655,https://github.com/jvary,2,https://github.com/luigirizzo/netmap/pull/655#issuecomment-544636217,"Fixing build error when building on Debian Buster
Ensuring glob_arg.base_name stays null terminated
cc (Debian 8.3.0-6) 8.3.0
make[1]: Entering directory '/home/dev/code/netmap/LINUX/build-apps/lb'
cc -O2 -pipe -Werror -Wall -Wunused-function -I /home/dev/code/netmap/LINUX/../sys -I /home/dev/code/netmap/LINUX/../apps/include -Wextra   -c -o lb.o /home/dev/code/netmap/LINUX/../apps/lb/lb.c
/home/dev/code/netmap/LINUX/../apps/lb/lb.c: In function â€˜mainâ€™:
/home/dev/code/netmap/LINUX/../apps/lb/lb.c:655:2: error: â€˜strncpyâ€™ specified bound 64 equals destination size [-Werror=stringop-truncation]
strncpy(glob_arg.base_name, nscan, MAX_IFNAMELEN);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors",Been fixed in the main branch,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,657,2019-10-22T12:52:44Z,2019-11-01T10:27:49Z,2020-05-22T01:54:36Z,MERGED,True,350,0,1,https://github.com/andrewbonney,Update mlx5 driver to v4.6,1,[],https://github.com/luigirizzo/netmap/pull/657,https://github.com/andrewbonney,1,https://github.com/luigirizzo/netmap/pull/657,This PR updates the existing patches for the Mellanox Ethernet driver to v4.6.,This PR updates the existing patches for the Mellanox Ethernet driver to v4.6.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,657,2019-10-22T12:52:44Z,2019-11-01T10:27:49Z,2020-05-22T01:54:36Z,MERGED,True,350,0,1,https://github.com/andrewbonney,Update mlx5 driver to v4.6,1,[],https://github.com/luigirizzo/netmap/pull/657,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/657#issuecomment-548740861,This PR updates the existing patches for the Mellanox Ethernet driver to v4.6.,Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,657,2019-10-22T12:52:44Z,2019-11-01T10:27:49Z,2020-05-22T01:54:36Z,MERGED,True,350,0,1,https://github.com/andrewbonney,Update mlx5 driver to v4.6,1,[],https://github.com/luigirizzo/netmap/pull/657,https://github.com/kierank,3,https://github.com/luigirizzo/netmap/pull/657#issuecomment-567801454,This PR updates the existing patches for the Mellanox Ethernet driver to v4.6.,Do you plan to have the Makefile pull the 4.6 driver?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,661,2019-11-04T01:21:11Z,2019-11-04T09:28:17Z,2019-11-04T09:28:24Z,MERGED,True,1,0,1,https://github.com/carlgsmith,Record mapped netmap memory as RssShmem rather than RssFile,1,[],https://github.com/luigirizzo/netmap/pull/661,https://github.com/carlgsmith,1,https://github.com/luigirizzo/netmap/pull/661,"VmRSS     size of memory portions. It contains the three
following parts (VmRSS = RssAnon + RssFile + RssShmem)
RssAnon   size of resident anonymous memory
RssFile   size of resident file mappings
RssShmem  size of resident shmem memory (includes SysV shm,
mapping of tmpfs and shared anonymous mappings)
The kernel differentiates between RssFile and RssShmem by
checking the PG_swapbacked flag on the page. By setting this
flag the netmp memory will be recorded as RssShmem.","VmRSS     size of memory portions. It contains the three
following parts (VmRSS = RssAnon + RssFile + RssShmem)
RssAnon   size of resident anonymous memory
RssFile   size of resident file mappings
RssShmem  size of resident shmem memory (includes SysV shm,
mapping of tmpfs and shared anonymous mappings)
The kernel differentiates between RssFile and RssShmem by
checking the PG_swapbacked flag on the page. By setting this
flag the netmp memory will be recorded as RssShmem.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,661,2019-11-04T01:21:11Z,2019-11-04T09:28:17Z,2019-11-04T09:28:24Z,MERGED,True,1,0,1,https://github.com/carlgsmith,Record mapped netmap memory as RssShmem rather than RssFile,1,[],https://github.com/luigirizzo/netmap/pull/661,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/661#issuecomment-549274839,"VmRSS     size of memory portions. It contains the three
following parts (VmRSS = RssAnon + RssFile + RssShmem)
RssAnon   size of resident anonymous memory
RssFile   size of resident file mappings
RssShmem  size of resident shmem memory (includes SysV shm,
mapping of tmpfs and shared anonymous mappings)
The kernel differentiates between RssFile and RssShmem by
checking the PG_swapbacked flag on the page. By setting this
flag the netmp memory will be recorded as RssShmem.",thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,669,2020-01-07T19:38:09Z,2020-01-25T07:02:48Z,2020-01-25T07:02:48Z,MERGED,True,6,0,1,https://github.com/kogdenko,veth: fix segfault at access to not created adapter rings,1,[],https://github.com/luigirizzo/netmap/pull/669,https://github.com/kogdenko,1,https://github.com/luigirizzo/netmap/pull/669,"Remove peer in veth_netmap_krings_delete(vna) because without that
subsequent call of veth_netmap_krings_create(vna->peer) do not create rings.","Remove peer in veth_netmap_krings_delete(vna) because without that
subsequent call of veth_netmap_krings_create(vna->peer) do not create rings.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,672,2020-01-13T14:51:29Z,2020-01-15T20:52:16Z,2020-01-15T20:52:16Z,MERGED,True,7,3,2,https://github.com/i39,check na before using && Unreachable code detected,2,[],https://github.com/luigirizzo/netmap/pull/672,https://github.com/i39,1,https://github.com/luigirizzo/netmap/pull/672,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,680,2020-03-20T02:02:08Z,2021-01-31T22:43:54Z,2021-01-31T22:43:55Z,CLOSED,False,0,0,0,https://github.com/kierank,Fix Ubuntu 18.04 build,0,[],https://github.com/luigirizzo/netmap/pull/680,https://github.com/kierank,1,https://github.com/luigirizzo/netmap/pull/680,4.15.0-60 backports an incomplete version of overflow.h,4.15.0-60 backports an incomplete version of overflow.h,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,683,2020-03-31T09:20:34Z,2020-03-31T11:12:08Z,2020-03-31T13:05:32Z,MERGED,True,2,2,1,https://github.com/jlduran,Fix a typo in man vale-ctl(4),1,[],https://github.com/luigirizzo/netmap/pull/683,https://github.com/jlduran,1,https://github.com/luigirizzo/netmap/pull/683,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,683,2020-03-31T09:20:34Z,2020-03-31T11:12:08Z,2020-03-31T13:05:32Z,MERGED,True,2,2,1,https://github.com/jlduran,Fix a typo in man vale-ctl(4),1,[],https://github.com/luigirizzo/netmap/pull/683,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/683#issuecomment-606561299,,"merged, thanks!",True,{'HEART': ['https://github.com/jlduran']}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,690,2020-04-15T03:09:10Z,2020-04-15T08:20:27Z,2020-04-15T08:20:27Z,MERGED,True,19,0,2,https://github.com/cpackham,linux/configure: check for struct timeval,1,[],https://github.com/luigirizzo/netmap/pull/690,https://github.com/cpackham,1,https://github.com/luigirizzo/netmap/pull/690,"As of Linux v5.6 struct timeval does not exist (in the kernel). Detect
this and define our own when needed.
Fixes #689
Signed-off-by: Chris Packham chris.packham@alliedtelesis.co.nz","As of Linux v5.6 struct timeval does not exist (in the kernel). Detect
this and define our own when needed.
Fixes #689
Signed-off-by: Chris Packham chris.packham@alliedtelesis.co.nz",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,690,2020-04-15T03:09:10Z,2020-04-15T08:20:27Z,2020-04-15T08:20:27Z,MERGED,True,19,0,2,https://github.com/cpackham,linux/configure: check for struct timeval,1,[],https://github.com/luigirizzo/netmap/pull/690,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/690#issuecomment-613892703,"As of Linux v5.6 struct timeval does not exist (in the kernel). Detect
this and define our own when needed.
Fixes #689
Signed-off-by: Chris Packham chris.packham@alliedtelesis.co.nz","Looks good, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,698,2020-05-22T02:32:16Z,2020-09-09T13:14:47Z,2020-09-09T15:56:37Z,MERGED,True,382,2,3,https://github.com/kierank,mlx5 5.0 patch,1,[],https://github.com/luigirizzo/netmap/pull/698,https://github.com/kierank,1,https://github.com/luigirizzo/netmap/pull/698,- I need to remove txsync from the header and put it in the second header and have it build. They have separated tx and rx code so you can't just include a header with both functions any more,- I need to remove txsync from the header and put it in the second header and have it build. They have separated tx and rx code so you can't just include a header with both functions any more,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,698,2020-05-22T02:32:16Z,2020-09-09T13:14:47Z,2020-09-09T15:56:37Z,MERGED,True,382,2,3,https://github.com/kierank,mlx5 5.0 patch,1,[],https://github.com/luigirizzo/netmap/pull/698,https://github.com/kierank,2,https://github.com/luigirizzo/netmap/pull/698#issuecomment-632446229,- I need to remove txsync from the header and put it in the second header and have it build. They have separated tx and rx code so you can't just include a header with both functions any more,@andrewbonney @stuartgrace-bbc Would it be possible for you to review this patch?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,698,2020-05-22T02:32:16Z,2020-09-09T13:14:47Z,2020-09-09T15:56:37Z,MERGED,True,382,2,3,https://github.com/kierank,mlx5 5.0 patch,1,[],https://github.com/luigirizzo/netmap/pull/698,https://github.com/kierank,3,https://github.com/luigirizzo/netmap/pull/698#issuecomment-646365733,- I need to remove txsync from the header and put it in the second header and have it build. They have separated tx and rx code so you can't just include a header with both functions any more,Seems to work for me so I remove the Work in Progress label,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,698,2020-05-22T02:32:16Z,2020-09-09T13:14:47Z,2020-09-09T15:56:37Z,MERGED,True,382,2,3,https://github.com/kierank,mlx5 5.0 patch,1,[],https://github.com/luigirizzo/netmap/pull/698,https://github.com/kierank,4,https://github.com/luigirizzo/netmap/pull/698#issuecomment-689652013,- I need to remove txsync from the header and put it in the second header and have it build. They have separated tx and rx code so you can't just include a header with both functions any more,"Thanks, I will be submitting a patch for mlx5 5.1 in the near future",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,698,2020-05-22T02:32:16Z,2020-09-09T13:14:47Z,2020-09-09T15:56:37Z,MERGED,True,382,2,3,https://github.com/kierank,mlx5 5.0 patch,1,[],https://github.com/luigirizzo/netmap/pull/698,https://github.com/giuseppelettieri,5,https://github.com/luigirizzo/netmap/pull/698#issuecomment-689655597,- I need to remove txsync from the header and put it in the second header and have it build. They have separated tx and rx code so you can't just include a header with both functions any more,"Thanks to you, looking forward to it.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,700,2020-05-22T14:54:44Z,2020-05-22T15:08:05Z,2020-05-22T15:11:29Z,MERGED,True,4,4,2,https://github.com/guruofquality,fix NETMAP_WOFFSET and typos,2,[],https://github.com/luigirizzo/netmap/pull/700,https://github.com/guruofquality,1,https://github.com/luigirizzo/netmap/pull/700,"@giuseppelettieri I fixed the macro from a2b1b4e#commitcomment-39365274
I also found a few typos in libnetmap.h, I hope that you dont mind
Note that I didn't actually test the offset support. I'm just experimenting with some of the netmap features. I'm using i40e and it looks like offset is just implemented in e1000","@giuseppelettieri I fixed the macro from a2b1b4e#commitcomment-39365274
I also found a few typos in libnetmap.h, I hope that you dont mind
Note that I didn't actually test the offset support. I'm just experimenting with some of the netmap features. I'm using i40e and it looks like offset is just implemented in e1000",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,700,2020-05-22T14:54:44Z,2020-05-22T15:08:05Z,2020-05-22T15:11:29Z,MERGED,True,4,4,2,https://github.com/guruofquality,fix NETMAP_WOFFSET and typos,2,[],https://github.com/luigirizzo/netmap/pull/700,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/700#issuecomment-632744805,"@giuseppelettieri I fixed the macro from a2b1b4e#commitcomment-39365274
I also found a few typos in libnetmap.h, I hope that you dont mind
Note that I didn't actually test the offset support. I'm just experimenting with some of the netmap features. I'm using i40e and it looks like offset is just implemented in e1000","merged, thanks!
The offset feature should be available also in most other Intel drivers, unless something is not working properly.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,712,2020-07-31T13:15:35Z,2020-08-03T08:12:57Z,2020-08-03T11:36:57Z,MERGED,True,2,2,1,https://github.com/brian90013,fix parsing of legacy nmr->nr_ringid,1,[],https://github.com/luigirizzo/netmap/pull/712,https://github.com/brian90013,1,https://github.com/luigirizzo/netmap/pull/712,"Code was checking for NETMAP_{SW,HW}_RING in req->nr_ringid which
had already been masked by NETMAP_RING_MASK. Therefore, the comparisons
always failed and set NR_REG_ALL_NIC. Check against the original nmr
structure.","Code was checking for NETMAP_{SW,HW}_RING in req->nr_ringid which
had already been masked by NETMAP_RING_MASK. Therefore, the comparisons
always failed and set NR_REG_ALL_NIC. Check against the original nmr
structure.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,712,2020-07-31T13:15:35Z,2020-08-03T08:12:57Z,2020-08-03T11:36:57Z,MERGED,True,2,2,1,https://github.com/brian90013,fix parsing of legacy nmr->nr_ringid,1,[],https://github.com/luigirizzo/netmap/pull/712,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/712#issuecomment-667878459,"Code was checking for NETMAP_{SW,HW}_RING in req->nr_ringid which
had already been masked by NETMAP_RING_MASK. Therefore, the comparisons
always failed and set NR_REG_ALL_NIC. Check against the original nmr
structure.","good catch, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,718,2020-09-02T04:56:31Z,2020-09-04T09:21:32Z,2020-09-04T09:21:32Z,MERGED,True,1,1,1,https://github.com/carlgsmith,linux: Use GFP_USER for contiguous memory allocation,1,[],https://github.com/luigirizzo/netmap/pull/718,https://github.com/carlgsmith,1,https://github.com/luigirizzo/netmap/pull/718,"GFP_ATOMIC prevents memory reclaim. In the scenario where the device
has been running for a while the number of free pages can be low,
but the file cache can be large. Without allowing memory reclaim
we would get ""page allocation failures"".
#673","GFP_ATOMIC prevents memory reclaim. In the scenario where the device
has been running for a while the number of free pages can be low,
but the file cache can be large. Without allowing memory reclaim
we would get ""page allocation failures"".
#673",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,721,2020-09-09T16:00:23Z,2020-09-09T16:06:41Z,2020-09-09T16:06:45Z,MERGED,True,3,1,1,https://github.com/awelzel,linux/nm_os_vi_persist: Create new interface in net_ns of current task,1,[],https://github.com/luigirizzo/netmap/pull/721,https://github.com/awelzel,1,https://github.com/luigirizzo/netmap/pull/721,May fix #720 .,May fix #720 .,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,721,2020-09-09T16:00:23Z,2020-09-09T16:06:41Z,2020-09-09T16:06:45Z,MERGED,True,3,1,1,https://github.com/awelzel,linux/nm_os_vi_persist: Create new interface in net_ns of current task,1,[],https://github.com/luigirizzo/netmap/pull/721,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/721#issuecomment-689661994,May fix #720 .,Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,723,2020-09-11T08:18:13Z,2021-03-05T07:42:40Z,2021-03-05T07:42:56Z,MERGED,True,9,0,1,https://github.com/awelzel,netmap.h/freebsd: Include <atomic> instead of <stdatomic.h> when compiling with C++,1,[],https://github.com/luigirizzo/netmap/pull/723,https://github.com/awelzel,1,https://github.com/luigirizzo/netmap/pull/723,"Compiling the following C++ program on FreeBSD (11.4 / 12.1) currently fails.
This affects the netmap plugin for Zeek [1].
$ cat test_netmap.cc
#include <iostream>

extern ""C"" {
#define NETMAP_WITH_LIBS
#include <net/netmap_user.h>
}

int main(int argc, char *argv[])
{
        std::cout << ""netmap"" << std::endl;
}

$ clang++  ./test_netmap.cc
In file included from ./test_netmap.cc:5:
In file included from /usr/include/net/netmap_user.h:100:
In file included from /usr/include/net/netmap.h:814:
/usr/include/stdatomic.h:187:17: error: unknown type name '_Bool'
typedef _Atomic(_Bool)                  atomic_bool;
                ^
/usr/include/stdatomic.h:187:26: error: C++ requires a type specifier for all declarations
typedef _Atomic(_Bool)                  atomic_bool;

Similar issues [2,3] (though GCC) suggest to use <atomic> instead
of <stdatomic.h> for C++.
[1] zeek/zeek-netmap#11
[2] https://bugs.python.org/issue23644
[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60932#c4","Compiling the following C++ program on FreeBSD (11.4 / 12.1) currently fails.
This affects the netmap plugin for Zeek [1].
$ cat test_netmap.cc
#include <iostream>

extern ""C"" {
#define NETMAP_WITH_LIBS
#include <net/netmap_user.h>
}

int main(int argc, char *argv[])
{
        std::cout << ""netmap"" << std::endl;
}

$ clang++  ./test_netmap.cc
In file included from ./test_netmap.cc:5:
In file included from /usr/include/net/netmap_user.h:100:
In file included from /usr/include/net/netmap.h:814:
/usr/include/stdatomic.h:187:17: error: unknown type name '_Bool'
typedef _Atomic(_Bool)                  atomic_bool;
                ^
/usr/include/stdatomic.h:187:26: error: C++ requires a type specifier for all declarations
typedef _Atomic(_Bool)                  atomic_bool;

Similar issues [2,3] (though GCC) suggest to use <atomic> instead
of <stdatomic.h> for C++.
[1] zeek/zeek-netmap#11
[2] https://bugs.python.org/issue23644
[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60932#c4",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,723,2020-09-11T08:18:13Z,2021-03-05T07:42:40Z,2021-03-05T07:42:56Z,MERGED,True,9,0,1,https://github.com/awelzel,netmap.h/freebsd: Include <atomic> instead of <stdatomic.h> when compiling with C++,1,[],https://github.com/luigirizzo/netmap/pull/723,https://github.com/ckreibich,2,https://github.com/luigirizzo/netmap/pull/723#issuecomment-791065778,"Compiling the following C++ program on FreeBSD (11.4 / 12.1) currently fails.
This affects the netmap plugin for Zeek [1].
$ cat test_netmap.cc
#include <iostream>

extern ""C"" {
#define NETMAP_WITH_LIBS
#include <net/netmap_user.h>
}

int main(int argc, char *argv[])
{
        std::cout << ""netmap"" << std::endl;
}

$ clang++  ./test_netmap.cc
In file included from ./test_netmap.cc:5:
In file included from /usr/include/net/netmap_user.h:100:
In file included from /usr/include/net/netmap.h:814:
/usr/include/stdatomic.h:187:17: error: unknown type name '_Bool'
typedef _Atomic(_Bool)                  atomic_bool;
                ^
/usr/include/stdatomic.h:187:26: error: C++ requires a type specifier for all declarations
typedef _Atomic(_Bool)                  atomic_bool;

Similar issues [2,3] (though GCC) suggest to use <atomic> instead
of <stdatomic.h> for C++.
[1] zeek/zeek-netmap#11
[2] https://bugs.python.org/issue23644
[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60932#c4","Just a ping here â€” would still be nice to see this fixed, since it'd allow us to not have to work-around this in the Netmap Zeek plugin.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,723,2020-09-11T08:18:13Z,2021-03-05T07:42:40Z,2021-03-05T07:42:56Z,MERGED,True,9,0,1,https://github.com/awelzel,netmap.h/freebsd: Include <atomic> instead of <stdatomic.h> when compiling with C++,1,[],https://github.com/luigirizzo/netmap/pull/723,https://github.com/jhk098,3,https://github.com/luigirizzo/netmap/pull/723#issuecomment-791195893,"Compiling the following C++ program on FreeBSD (11.4 / 12.1) currently fails.
This affects the netmap plugin for Zeek [1].
$ cat test_netmap.cc
#include <iostream>

extern ""C"" {
#define NETMAP_WITH_LIBS
#include <net/netmap_user.h>
}

int main(int argc, char *argv[])
{
        std::cout << ""netmap"" << std::endl;
}

$ clang++  ./test_netmap.cc
In file included from ./test_netmap.cc:5:
In file included from /usr/include/net/netmap_user.h:100:
In file included from /usr/include/net/netmap.h:814:
/usr/include/stdatomic.h:187:17: error: unknown type name '_Bool'
typedef _Atomic(_Bool)                  atomic_bool;
                ^
/usr/include/stdatomic.h:187:26: error: C++ requires a type specifier for all declarations
typedef _Atomic(_Bool)                  atomic_bool;

Similar issues [2,3] (though GCC) suggest to use <atomic> instead
of <stdatomic.h> for C++.
[1] zeek/zeek-netmap#11
[2] https://bugs.python.org/issue23644
[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60932#c4",+1,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,723,2020-09-11T08:18:13Z,2021-03-05T07:42:40Z,2021-03-05T07:42:56Z,MERGED,True,9,0,1,https://github.com/awelzel,netmap.h/freebsd: Include <atomic> instead of <stdatomic.h> when compiling with C++,1,[],https://github.com/luigirizzo/netmap/pull/723,https://github.com/giuseppelettieri,4,https://github.com/luigirizzo/netmap/pull/723#issuecomment-791225722,"Compiling the following C++ program on FreeBSD (11.4 / 12.1) currently fails.
This affects the netmap plugin for Zeek [1].
$ cat test_netmap.cc
#include <iostream>

extern ""C"" {
#define NETMAP_WITH_LIBS
#include <net/netmap_user.h>
}

int main(int argc, char *argv[])
{
        std::cout << ""netmap"" << std::endl;
}

$ clang++  ./test_netmap.cc
In file included from ./test_netmap.cc:5:
In file included from /usr/include/net/netmap_user.h:100:
In file included from /usr/include/net/netmap.h:814:
/usr/include/stdatomic.h:187:17: error: unknown type name '_Bool'
typedef _Atomic(_Bool)                  atomic_bool;
                ^
/usr/include/stdatomic.h:187:26: error: C++ requires a type specifier for all declarations
typedef _Atomic(_Bool)                  atomic_bool;

Similar issues [2,3] (though GCC) suggest to use <atomic> instead
of <stdatomic.h> for C++.
[1] zeek/zeek-netmap#11
[2] https://bugs.python.org/issue23644
[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60932#c4","Merged, thanks. Sorry for the delay.",True,{'THUMBS_UP': ['https://github.com/ckreibich']}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,725,2020-09-12T22:21:32Z,2021-01-29T10:40:11Z,2021-01-29T11:55:47Z,MERGED,True,394,4,4,https://github.com/kierank,Add mlx5 version 5.1 patch,2,[],https://github.com/luigirizzo/netmap/pull/725,https://github.com/kierank,1,https://github.com/luigirizzo/netmap/pull/725,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,725,2020-09-12T22:21:32Z,2021-01-29T10:40:11Z,2021-01-29T11:55:47Z,MERGED,True,394,4,4,https://github.com/kierank,Add mlx5 version 5.1 patch,2,[],https://github.com/luigirizzo/netmap/pull/725,https://github.com/kierank,2,https://github.com/luigirizzo/netmap/pull/725#issuecomment-769737839,,"Thanks, there is now an mlx5 version 5.2 out so I will send a patch for that soon",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,725,2020-09-12T22:21:32Z,2021-01-29T10:40:11Z,2021-01-29T11:55:47Z,MERGED,True,394,4,4,https://github.com/kierank,Add mlx5 version 5.1 patch,2,[],https://github.com/luigirizzo/netmap/pull/725,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/725#issuecomment-769761821,,Looking forward to it!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,726,2020-09-13T14:37:28Z,,2020-11-22T18:22:05Z,OPEN,False,28,5,1,https://github.com/awelzel,virtio_netmap: Use half the vring's size as netmap slots,1,[],https://github.com/luigirizzo/netmap/pull/726,https://github.com/awelzel,1,https://github.com/luigirizzo/netmap/pull/726,"For every slot in a netmap ring, two descriptors in the virtqueue's
vring are used. Therefore, we can only use half the vring's size as
slots for netmap rings. Otherwise, the vring and the netmap ring are
out of sync. This currently corrupts proper operation and produces
bad data (see below).
This patch also sets an explicit nm_config to ensure we keep the
values for num_rx_desc/num_tx_desc from attach time and marks the
VQ_FULL case in virtio_netmap_init_buffers() as an issue that should
never be triggered.
Background: Experiment / Observation
Running a qemu-guest with a virtio_net NIC (rx_queue_size=256) attached
to a bridge on the host. Sending known/predictable packets in a loop
from the host via scapy. On the guest side, running tcpdump with native
netmap support and inspecting the packet data:
tcpdump -i netmap:enp8s0 -Xn#

The first 128 packets look as expected, but thereafter come 128 packets
of ""null data"":
  128  15:59:46.592378 IP 10.0.0.128.128 > 127.0.0.1.256: UDP, length 141
        0x0000:  4500 00a9 0001 0000 4011 f0c2 0a00 0080  E.......@.......
        0x0010:  7f00 0001 0080 0100 0095 7f07 3030 3132  ............0012
        0x0020:  3820 3031 3330 2046 4646 4646 4646 4646  8.0130.FFFFFFFFF
        0x0030:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0040:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0050:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0060:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0070:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0080:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0090:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x00a0:  4646 4646 4646 4646 46                   FFFFFFFFF
  129  15:59:46.712936 00:00:00:00:00:00 > 00:00:00:00:00:00 Null Information, send seq 0, rcv seq 0, Flags [Command], length 121
        0x0000:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0010:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0020:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0050:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0060:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0070:  0000 0000 00                             .....

At packet 256 tcpdump receives non-null data, but the payloads represents
what should've been received for packet 129 and later. Because the length
is taken from the vring, some of the slots also expose stale/corrupt data:
  281  16:03:51.846490 IP 10.0.0.153.153 > 127.0.0.1.306: UDP, length 74
        0x0000:  4500 0066 0001 0000 4011 f0ec 0a00 0099  E..f....@.......
        0x0010:  7f00 0001 0099 0132 0052 d633 3030 3135  .......2.R.30015
        0x0020:  3320 3030 3633 2046 4646 4646 4646 4646  3.0063.FFFFFFFFF
        0x0030:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0040:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0050:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0060:  4646 4646 4646 5757 5757 5757 5757 5757  FFFFFFWWWWWWWWWW
        0x0070:  5757 5757 5757 5757 5757 5757 5757 5757  WWWWWWWWWWWWWWWW
        0x0080:  5757 5757 5757 5757 5757 5757 5757 5757  WWWWWWWWWWWWWWWW
        0x0090:  5757 5757 5757 5757 5757 5757 0000 0000  WWWWWWWWWWWW....
        0x00a0:  0000 0000 0000 0000                      ........

This seems like a biggie and I wonder why this hasn't come up before, maybe there's something off in the analysis?
Scapy code to produce packets
import argparse
import random
import string
import time

from scapy.all import Ether, IP, UDP, sendp


def extra_payload(i):
    length = int(random.random() * 256)
    return random.choice(string.ascii_uppercase) * length


def send_udp_packets(iface, *, pps):
    i = 0
    while True:
        i += 1
        ip = IP(src=f""10.0.{i // 256}.{i % 256}"")
        u = UDP(sport=i % 2**16, dport=(2 * i) % 2 ** 16)

        extra = extra_payload(i)
        u.add_payload(f""{i:05} {len(extra):04} {extra}"".encode(""utf-8""))

        sendp(Ether() / ip / u, iface=iface)
        time.sleep(1 / pps)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(""iface"")
    parser.add_argument(""--pps"", type=int, default=10)
    args = parser.parse_args()
    send_udp_packets(args.iface, pps=args.pps)


if __name__ == ""__main__"":
    main()","For every slot in a netmap ring, two descriptors in the virtqueue's
vring are used. Therefore, we can only use half the vring's size as
slots for netmap rings. Otherwise, the vring and the netmap ring are
out of sync. This currently corrupts proper operation and produces
bad data (see below).
This patch also sets an explicit nm_config to ensure we keep the
values for num_rx_desc/num_tx_desc from attach time and marks the
VQ_FULL case in virtio_netmap_init_buffers() as an issue that should
never be triggered.
Background: Experiment / Observation
Running a qemu-guest with a virtio_net NIC (rx_queue_size=256) attached
to a bridge on the host. Sending known/predictable packets in a loop
from the host via scapy. On the guest side, running tcpdump with native
netmap support and inspecting the packet data:
tcpdump -i netmap:enp8s0 -Xn#

The first 128 packets look as expected, but thereafter come 128 packets
of ""null data"":
  128  15:59:46.592378 IP 10.0.0.128.128 > 127.0.0.1.256: UDP, length 141
        0x0000:  4500 00a9 0001 0000 4011 f0c2 0a00 0080  E.......@.......
        0x0010:  7f00 0001 0080 0100 0095 7f07 3030 3132  ............0012
        0x0020:  3820 3031 3330 2046 4646 4646 4646 4646  8.0130.FFFFFFFFF
        0x0030:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0040:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0050:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0060:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0070:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0080:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0090:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x00a0:  4646 4646 4646 4646 46                   FFFFFFFFF
  129  15:59:46.712936 00:00:00:00:00:00 > 00:00:00:00:00:00 Null Information, send seq 0, rcv seq 0, Flags [Command], length 121
        0x0000:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0010:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0020:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0050:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0060:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0070:  0000 0000 00                             .....

At packet 256 tcpdump receives non-null data, but the payloads represents
what should've been received for packet 129 and later. Because the length
is taken from the vring, some of the slots also expose stale/corrupt data:
  281  16:03:51.846490 IP 10.0.0.153.153 > 127.0.0.1.306: UDP, length 74
        0x0000:  4500 0066 0001 0000 4011 f0ec 0a00 0099  E..f....@.......
        0x0010:  7f00 0001 0099 0132 0052 d633 3030 3135  .......2.R.30015
        0x0020:  3320 3030 3633 2046 4646 4646 4646 4646  3.0063.FFFFFFFFF
        0x0030:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0040:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0050:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0060:  4646 4646 4646 5757 5757 5757 5757 5757  FFFFFFWWWWWWWWWW
        0x0070:  5757 5757 5757 5757 5757 5757 5757 5757  WWWWWWWWWWWWWWWW
        0x0080:  5757 5757 5757 5757 5757 5757 5757 5757  WWWWWWWWWWWWWWWW
        0x0090:  5757 5757 5757 5757 5757 5757 0000 0000  WWWWWWWWWWWW....
        0x00a0:  0000 0000 0000 0000                      ........

This seems like a biggie and I wonder why this hasn't come up before, maybe there's something off in the analysis?
Scapy code to produce packets
import argparse
import random
import string
import time

from scapy.all import Ether, IP, UDP, sendp


def extra_payload(i):
    length = int(random.random() * 256)
    return random.choice(string.ascii_uppercase) * length


def send_udp_packets(iface, *, pps):
    i = 0
    while True:
        i += 1
        ip = IP(src=f""10.0.{i // 256}.{i % 256}"")
        u = UDP(sport=i % 2**16, dport=(2 * i) % 2 ** 16)

        extra = extra_payload(i)
        u.add_payload(f""{i:05} {len(extra):04} {extra}"".encode(""utf-8""))

        sendp(Ether() / ip / u, iface=iface)
        time.sleep(1 / pps)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(""iface"")
    parser.add_argument(""--pps"", type=int, default=10)
    args = parser.parse_args()
    send_udp_packets(args.iface, pps=args.pps)


if __name__ == ""__main__"":
    main()",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,726,2020-09-13T14:37:28Z,,2020-11-22T18:22:05Z,OPEN,False,28,5,1,https://github.com/awelzel,virtio_netmap: Use half the vring's size as netmap slots,1,[],https://github.com/luigirizzo/netmap/pull/726,https://github.com/awelzel,2,https://github.com/luigirizzo/netmap/pull/726#issuecomment-692064149,"For every slot in a netmap ring, two descriptors in the virtqueue's
vring are used. Therefore, we can only use half the vring's size as
slots for netmap rings. Otherwise, the vring and the netmap ring are
out of sync. This currently corrupts proper operation and produces
bad data (see below).
This patch also sets an explicit nm_config to ensure we keep the
values for num_rx_desc/num_tx_desc from attach time and marks the
VQ_FULL case in virtio_netmap_init_buffers() as an issue that should
never be triggered.
Background: Experiment / Observation
Running a qemu-guest with a virtio_net NIC (rx_queue_size=256) attached
to a bridge on the host. Sending known/predictable packets in a loop
from the host via scapy. On the guest side, running tcpdump with native
netmap support and inspecting the packet data:
tcpdump -i netmap:enp8s0 -Xn#

The first 128 packets look as expected, but thereafter come 128 packets
of ""null data"":
  128  15:59:46.592378 IP 10.0.0.128.128 > 127.0.0.1.256: UDP, length 141
        0x0000:  4500 00a9 0001 0000 4011 f0c2 0a00 0080  E.......@.......
        0x0010:  7f00 0001 0080 0100 0095 7f07 3030 3132  ............0012
        0x0020:  3820 3031 3330 2046 4646 4646 4646 4646  8.0130.FFFFFFFFF
        0x0030:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0040:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0050:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0060:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0070:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0080:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0090:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x00a0:  4646 4646 4646 4646 46                   FFFFFFFFF
  129  15:59:46.712936 00:00:00:00:00:00 > 00:00:00:00:00:00 Null Information, send seq 0, rcv seq 0, Flags [Command], length 121
        0x0000:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0010:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0020:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0050:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0060:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0070:  0000 0000 00                             .....

At packet 256 tcpdump receives non-null data, but the payloads represents
what should've been received for packet 129 and later. Because the length
is taken from the vring, some of the slots also expose stale/corrupt data:
  281  16:03:51.846490 IP 10.0.0.153.153 > 127.0.0.1.306: UDP, length 74
        0x0000:  4500 0066 0001 0000 4011 f0ec 0a00 0099  E..f....@.......
        0x0010:  7f00 0001 0099 0132 0052 d633 3030 3135  .......2.R.30015
        0x0020:  3320 3030 3633 2046 4646 4646 4646 4646  3.0063.FFFFFFFFF
        0x0030:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0040:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0050:  4646 4646 4646 4646 4646 4646 4646 4646  FFFFFFFFFFFFFFFF
        0x0060:  4646 4646 4646 5757 5757 5757 5757 5757  FFFFFFWWWWWWWWWW
        0x0070:  5757 5757 5757 5757 5757 5757 5757 5757  WWWWWWWWWWWWWWWW
        0x0080:  5757 5757 5757 5757 5757 5757 5757 5757  WWWWWWWWWWWWWWWW
        0x0090:  5757 5757 5757 5757 5757 5757 0000 0000  WWWWWWWWWWWW....
        0x00a0:  0000 0000 0000 0000                      ........

This seems like a biggie and I wonder why this hasn't come up before, maybe there's something off in the analysis?
Scapy code to produce packets
import argparse
import random
import string
import time

from scapy.all import Ether, IP, UDP, sendp


def extra_payload(i):
    length = int(random.random() * 256)
    return random.choice(string.ascii_uppercase) * length


def send_udp_packets(iface, *, pps):
    i = 0
    while True:
        i += 1
        ip = IP(src=f""10.0.{i // 256}.{i % 256}"")
        u = UDP(sport=i % 2**16, dport=(2 * i) % 2 ** 16)

        extra = extra_payload(i)
        u.add_payload(f""{i:05} {len(extra):04} {extra}"".encode(""utf-8""))

        sendp(Ether() / ip / u, iface=iface)
        time.sleep(1 / pps)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(""iface"")
    parser.add_argument(""--pps"", type=int, default=10)
    args = parser.parse_args()
    send_udp_packets(args.iface, pps=args.pps)


if __name__ == ""__main__"":
    main()","As an additional comment, FreeBSD uses only half the slots, too, unless indirect descriptors are in use. Linux virtio_net doesn't seem to use indirect descriptors (checked 4.4, 4,19), so it seems reasonable to do the same.
https://github.com/freebsd/freebsd/blob/master/sys/dev/netmap/if_vtnet_netmap.h#L386",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,727,2020-09-16T20:44:48Z,2020-09-19T11:32:43Z,2020-10-22T14:02:31Z,MERGED,True,14,14,2,https://github.com/brian90013,pkt-gen: minor corrections to documentation,1,[],https://github.com/luigirizzo/netmap/pull/727,https://github.com/brian90013,1,https://github.com/luigirizzo/netmap/pull/727,"In addition to the corrections in this request, there appear to be options not described in the man page. For example the -o options field is listed in the usage() function but not described in the man page.","In addition to the corrections in this request, there appear to be options not described in the man page. For example the -o options field is listed in the usage() function but not described in the man page.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,728,2020-09-27T19:16:34Z,2020-09-28T10:17:35Z,2020-09-28T10:17:45Z,MERGED,True,8,9,2,https://github.com/mkaniewski,"Fix constness warnings generated when ""-Wcast-qual"" compiler option is used.",2,[],https://github.com/luigirizzo/netmap/pull/728,https://github.com/mkaniewski,1,https://github.com/luigirizzo/netmap/pull/728,"Compiler generates some warnings when -Wcast-qual option is used and netmap_user.h is included in a program. This pull request fixes the problematic code.
It also fixes a simple error in the example code presented in netmap(4).","Compiler generates some warnings when -Wcast-qual option is used and netmap_user.h is included in a program. This pull request fixes the problematic code.
It also fixes a simple error in the example code presented in netmap(4).",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,728,2020-09-27T19:16:34Z,2020-09-28T10:17:35Z,2020-09-28T10:17:45Z,MERGED,True,8,9,2,https://github.com/mkaniewski,"Fix constness warnings generated when ""-Wcast-qual"" compiler option is used.",2,[],https://github.com/luigirizzo/netmap/pull/728,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/728#issuecomment-699917826,"Compiler generates some warnings when -Wcast-qual option is used and netmap_user.h is included in a program. This pull request fixes the problematic code.
It also fixes a simple error in the example code presented in netmap(4).",Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,731,2020-10-02T04:18:27Z,,2021-02-11T12:02:00Z,OPEN,False,535,1,4,https://github.com/carlgsmith,octeon: Add Cavium Octeon driver support,1,[],https://github.com/luigirizzo/netmap/pull/731,https://github.com/carlgsmith,1,https://github.com/luigirizzo/netmap/pull/731,,,True,{'THUMBS_UP': ['https://github.com/lin7sh']}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,731,2020-10-02T04:18:27Z,,2021-02-11T12:02:00Z,OPEN,False,535,1,4,https://github.com/carlgsmith,octeon: Add Cavium Octeon driver support,1,[],https://github.com/luigirizzo/netmap/pull/731,https://github.com/carlgsmith,2,https://github.com/luigirizzo/netmap/pull/731#issuecomment-703937841,,Have also updated patch to include NAF_OFFSETS support for Octeon,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,731,2020-10-02T04:18:27Z,,2021-02-11T12:02:00Z,OPEN,False,535,1,4,https://github.com/carlgsmith,octeon: Add Cavium Octeon driver support,1,[],https://github.com/luigirizzo/netmap/pull/731,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/731#issuecomment-769708746,,"Hi, sorry for the late reply. We are more than willing to merge this, but vanilla patches are auto-generated from a different repository which is a clone of vanilla linux. You find a copy of the repo here: https://github.com/giuseppelettieri/linux-pspat. There is a netmap-$v branch for each version of linux. You should remove the vanilla--octeon--* file from this pull request and create a pull request for the other repo, containing only the necessary changes for the driver. You can target any one of the netmap-$v branches. I will then try to forward/backword port the commit as much as possible and then auto-generate the patch for the netmap repository.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,732,2020-10-04T04:11:12Z,2020-11-22T17:18:42Z,2020-11-22T17:18:42Z,CLOSED,False,4309,237,24,https://github.com/preetha-mohan,Config,86,[],https://github.com/luigirizzo/netmap/pull/732,https://github.com/preetha-mohan,1,https://github.com/luigirizzo/netmap/pull/732,move,move,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,733,2020-10-22T15:03:40Z,2020-10-23T06:11:31Z,2020-10-23T06:12:31Z,MERGED,True,0,1,1,https://github.com/brian90013,freebsd: fix mutex double unlock,1,[],https://github.com/luigirizzo/netmap/pull/733,https://github.com/brian90013,1,https://github.com/luigirizzo/netmap/pull/733,"Hello,
I am testing FreeBSD-12.2-RC3 using a kernel with INVARIANTS enabled. I was starting pkt-gen on an interface with a large number of rings and had forgotten to increase the if_size sysctl. A memory allocation failed and the system hit a panic.
Panic message:
Lock (&nm_mem)->nm_mtx not exclusively locked @ /usr/src/sys/dev/netmap/netmap_mem2.c:271","Hello,
I am testing FreeBSD-12.2-RC3 using a kernel with INVARIANTS enabled. I was starting pkt-gen on an interface with a large number of rings and had forgotten to increase the if_size sysctl. A memory allocation failed and the system hit a panic.
Panic message:
Lock (&nm_mem)->nm_mtx not exclusively locked @ /usr/src/sys/dev/netmap/netmap_mem2.c:271",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,733,2020-10-22T15:03:40Z,2020-10-23T06:11:31Z,2020-10-23T06:12:31Z,MERGED,True,0,1,1,https://github.com/brian90013,freebsd: fix mutex double unlock,1,[],https://github.com/luigirizzo/netmap/pull/733,https://github.com/jhk098,2,https://github.com/luigirizzo/netmap/pull/733#issuecomment-714735911,"Hello,
I am testing FreeBSD-12.2-RC3 using a kernel with INVARIANTS enabled. I was starting pkt-gen on an interface with a large number of rings and had forgotten to increase the if_size sysctl. A memory allocation failed and the system hit a panic.
Panic message:
Lock (&nm_mem)->nm_mtx not exclusively locked @ /usr/src/sys/dev/netmap/netmap_mem2.c:271",Good catch!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,733,2020-10-22T15:03:40Z,2020-10-23T06:11:31Z,2020-10-23T06:12:31Z,MERGED,True,0,1,1,https://github.com/brian90013,freebsd: fix mutex double unlock,1,[],https://github.com/luigirizzo/netmap/pull/733,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/733#issuecomment-714938012,"Hello,
I am testing FreeBSD-12.2-RC3 using a kernel with INVARIANTS enabled. I was starting pkt-gen on an interface with a large number of rings and had forgotten to increase the if_size sysctl. A memory allocation failed and the system hit a panic.
Panic message:
Lock (&nm_mem)->nm_mtx not exclusively locked @ /usr/src/sys/dev/netmap/netmap_mem2.c:271",Thanks. I have removed 'freebsd' from the commit message since it also affects Linux.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,736,2020-11-02T20:24:23Z,2020-11-05T15:40:49Z,2020-11-05T15:40:56Z,MERGED,True,4,4,2,https://github.com/socketpair,Fix BUG_ON() in Linux on vxlan/gretap/hyper-v interfaces,1,[],https://github.com/luigirizzo/netmap/pull/736,https://github.com/socketpair,1,https://github.com/luigirizzo/netmap/pull/736,"Wrong headroom calculations lead to pskb_expand_head() in the drivers.
It fails since skb is shared. Correct calculations prevent
expanding skb.","Wrong headroom calculations lead to pskb_expand_head() in the drivers.
It fails since skb is shared. Correct calculations prevent
expanding skb.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,736,2020-11-02T20:24:23Z,2020-11-05T15:40:49Z,2020-11-05T15:40:56Z,MERGED,True,4,4,2,https://github.com/socketpair,Fix BUG_ON() in Linux on vxlan/gretap/hyper-v interfaces,1,[],https://github.com/luigirizzo/netmap/pull/736,https://github.com/socketpair,2,https://github.com/luigirizzo/netmap/pull/736#issuecomment-722418731,"Wrong headroom calculations lead to pskb_expand_head() in the drivers.
It fails since skb is shared. Correct calculations prevent
expanding skb.",@luigirizzo I think this is very important. Please review and merge if everything is OK,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,736,2020-11-02T20:24:23Z,2020-11-05T15:40:49Z,2020-11-05T15:40:56Z,MERGED,True,4,4,2,https://github.com/socketpair,Fix BUG_ON() in Linux on vxlan/gretap/hyper-v interfaces,1,[],https://github.com/luigirizzo/netmap/pull/736,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/736#issuecomment-722457515,"Wrong headroom calculations lead to pskb_expand_head() in the drivers.
It fails since skb is shared. Correct calculations prevent
expanding skb.","Merged, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,748,2021-01-05T20:55:23Z,2021-01-07T07:08:13Z,2021-01-07T07:08:13Z,MERGED,True,1,1,1,https://github.com/hommeabeil,Append to ldflags instead of assignation,1,[],https://github.com/luigirizzo/netmap/pull/748,https://github.com/hommeabeil,1,https://github.com/luigirizzo/netmap/pull/748,"All the other apps append to the LDFLAGS variable, but not the pkt-gen application. Without this, it is impossible to use the environment variable to configure this variable.","All the other apps append to the LDFLAGS variable, but not the pkt-gen application. Without this, it is impossible to use the environment variable to configure this variable.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,750,2021-01-10T08:24:03Z,2021-01-19T11:09:58Z,2021-01-19T11:09:58Z,MERGED,True,84,22,6,https://github.com/kogdenko,Enable netmap to run on several interfaces from different iommu groups,1,[],https://github.com/luigirizzo/netmap/pull/750,https://github.com/kogdenko,1,https://github.com/luigirizzo/netmap/pull/750,"mem: create allocator for each iommu group (on demand)
Assign allocator iommu group id (nm_grp) at initialization stage and do not change it later.
Check group only for hw (hardware) adapters. Virtual adapters can use any
particular allocator. For example, we can choose vale allocator through vale-ctl -m
nm_iommu_group_id() return -1 on error instead of 0, because 0 is valid iommu group.
issue: #688","mem: create allocator for each iommu group (on demand)
Assign allocator iommu group id (nm_grp) at initialization stage and do not change it later.
Check group only for hw (hardware) adapters. Virtual adapters can use any
particular allocator. For example, we can choose vale allocator through vale-ctl -m
nm_iommu_group_id() return -1 on error instead of 0, because 0 is valid iommu group.
issue: #688",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,750,2021-01-10T08:24:03Z,2021-01-19T11:09:58Z,2021-01-19T11:09:58Z,MERGED,True,84,22,6,https://github.com/kogdenko,Enable netmap to run on several interfaces from different iommu groups,1,[],https://github.com/luigirizzo/netmap/pull/750,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/750#issuecomment-757506324,"mem: create allocator for each iommu group (on demand)
Assign allocator iommu group id (nm_grp) at initialization stage and do not change it later.
Check group only for hw (hardware) adapters. Virtual adapters can use any
particular allocator. For example, we can choose vale allocator through vale-ctl -m
nm_iommu_group_id() return -1 on error instead of 0, because 0 is valid iommu group.
issue: #688","I like the idea, but why redefining netmap_mem_get()? The only purpose of that function was reference counting.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,750,2021-01-10T08:24:03Z,2021-01-19T11:09:58Z,2021-01-19T11:09:58Z,MERGED,True,84,22,6,https://github.com/kogdenko,Enable netmap to run on several interfaces from different iommu groups,1,[],https://github.com/luigirizzo/netmap/pull/750,https://github.com/kogdenko,3,https://github.com/luigirizzo/netmap/pull/750#issuecomment-757511783,"mem: create allocator for each iommu group (on demand)
Assign allocator iommu group id (nm_grp) at initialization stage and do not change it later.
Check group only for hw (hardware) adapters. Virtual adapters can use any
particular allocator. For example, we can choose vale allocator through vale-ctl -m
nm_iommu_group_id() return -1 on error instead of 0, because 0 is valid iommu group.
issue: #688",netmap_mem_get() hasn't changed. I just added new function netmap_mem_get_iommu() - which create new allocator or add refcount to existing allocator. May be it is better to call it function netmap_mem_iommu_new (like netmap_mem_pt_guest_new) or something. If you have any idea what name is more suitable - let's rename it.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,750,2021-01-10T08:24:03Z,2021-01-19T11:09:58Z,2021-01-19T11:09:58Z,MERGED,True,84,22,6,https://github.com/kogdenko,Enable netmap to run on several interfaces from different iommu groups,1,[],https://github.com/luigirizzo/netmap/pull/750,https://github.com/giuseppelettieri,4,https://github.com/luigirizzo/netmap/pull/750#issuecomment-757523910,"mem: create allocator for each iommu group (on demand)
Assign allocator iommu group id (nm_grp) at initialization stage and do not change it later.
Check group only for hw (hardware) adapters. Virtual adapters can use any
particular allocator. For example, we can choose vale allocator through vale-ctl -m
nm_iommu_group_id() return -1 on error instead of 0, because 0 is valid iommu group.
issue: #688","Ah, OK. The name is fine, I was confused by the fact that in netmap_mem_get_iommu(), line 1790, you call the cumbersome __netmap_mem_get() instead of netmap_mem_get(). Apart from that, I think we can merge this.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,750,2021-01-10T08:24:03Z,2021-01-19T11:09:58Z,2021-01-19T11:09:58Z,MERGED,True,84,22,6,https://github.com/kogdenko,Enable netmap to run on several interfaces from different iommu groups,1,[],https://github.com/luigirizzo/netmap/pull/750,https://github.com/kogdenko,5,https://github.com/luigirizzo/netmap/pull/750#issuecomment-757656385,"mem: create allocator for each iommu group (on demand)
Assign allocator iommu group id (nm_grp) at initialization stage and do not change it later.
Check group only for hw (hardware) adapters. Virtual adapters can use any
particular allocator. For example, we can choose vale allocator through vale-ctl -m
nm_iommu_group_id() return -1 on error instead of 0, because 0 is valid iommu group.
issue: #688",Yes and I forget to set appropriate netmap_obj_pool.name for just created allocator. I will fix this.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,750,2021-01-10T08:24:03Z,2021-01-19T11:09:58Z,2021-01-19T11:09:58Z,MERGED,True,84,22,6,https://github.com/kogdenko,Enable netmap to run on several interfaces from different iommu groups,1,[],https://github.com/luigirizzo/netmap/pull/750,https://github.com/kogdenko,6,https://github.com/luigirizzo/netmap/pull/750#issuecomment-758865386,"mem: create allocator for each iommu group (on demand)
Assign allocator iommu group id (nm_grp) at initialization stage and do not change it later.
Check group only for hw (hardware) adapters. Virtual adapters can use any
particular allocator. For example, we can choose vale allocator through vale-ctl -m
nm_iommu_group_id() return -1 on error instead of 0, because 0 is valid iommu group.
issue: #688",Done,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,752,2021-01-26T21:31:09Z,2021-01-28T19:26:23Z,2021-01-28T19:26:23Z,MERGED,True,209,177,6,https://github.com/micchie,Master bdg,6,[],https://github.com/luigirizzo/netmap/pull/752,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/752,"Patch series to to make vale more modular for upcoming paste integration.
Option to decide the number of host rings after config to enable an option that ensures host rings exactly parallel to hw rings.
Restore the private mem with proper reference counting on failure or deactivation of bwrap.","Patch series to to make vale more modular for upcoming paste integration.
Option to decide the number of host rings after config to enable an option that ensures host rings exactly parallel to hw rings.
Restore the private mem with proper reference counting on failure or deactivation of bwrap.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,752,2021-01-26T21:31:09Z,2021-01-28T19:26:23Z,2021-01-28T19:26:23Z,MERGED,True,209,177,6,https://github.com/micchie,Master bdg,6,[],https://github.com/luigirizzo/netmap/pull/752,https://github.com/micchie,2,https://github.com/luigirizzo/netmap/pull/752#issuecomment-768652920,"Patch series to to make vale more modular for upcoming paste integration.
Option to decide the number of host rings after config to enable an option that ensures host rings exactly parallel to hw rings.
Restore the private mem with proper reference counting on failure or deactivation of bwrap.",I updated to apply your comments.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,759,2021-02-05T01:07:16Z,2021-02-05T10:13:04Z,2021-02-05T10:13:04Z,CLOSED,False,1,1,1,https://github.com/kierank,mlx5: Fix typo,1,[],https://github.com/luigirizzo/netmap/pull/759,https://github.com/kierank,1,https://github.com/luigirizzo/netmap/pull/759,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,760,2021-02-10T20:02:49Z,2021-02-11T07:11:26Z,2021-02-11T07:11:26Z,MERGED,True,4,0,1,https://github.com/carlgsmith,fix memory leak in NETMAP_REQ_PORT_INFO_GET,1,[],https://github.com/luigirizzo/netmap/pull/760,https://github.com/carlgsmith,1,https://github.com/luigirizzo/netmap/pull/760,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,760,2021-02-10T20:02:49Z,2021-02-11T07:11:26Z,2021-02-11T07:11:26Z,MERGED,True,4,0,1,https://github.com/carlgsmith,fix memory leak in NETMAP_REQ_PORT_INFO_GET,1,[],https://github.com/luigirizzo/netmap/pull/760,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/760#issuecomment-777244578,,"good catch, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,762,2021-02-15T23:11:50Z,2021-05-24T11:02:27Z,2021-05-24T11:02:38Z,MERGED,True,411,1,2,https://github.com/kierank,mlx5: Update to mlx5 v5.2,1,[],https://github.com/luigirizzo/netmap/pull/762,https://github.com/kierank,1,https://github.com/luigirizzo/netmap/pull/762,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,762,2021-02-15T23:11:50Z,2021-05-24T11:02:27Z,2021-05-24T11:02:38Z,MERGED,True,411,1,2,https://github.com/kierank,mlx5: Update to mlx5 v5.2,1,[],https://github.com/luigirizzo/netmap/pull/762,https://github.com/kierank,2,https://github.com/luigirizzo/netmap/pull/762#issuecomment-780967775,,@giuseppelettieri Do you have any thoughts on how we can have a simple test suite for these drivers? Maybe a program that transmits on port 1 and receives on port 2?,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,762,2021-02-15T23:11:50Z,2021-05-24T11:02:27Z,2021-05-24T11:02:38Z,MERGED,True,411,1,2,https://github.com/kierank,mlx5: Update to mlx5 v5.2,1,[],https://github.com/luigirizzo/netmap/pull/762,https://github.com/kierank,3,https://github.com/luigirizzo/netmap/pull/762#issuecomment-787543570,,@JDarnley Can you update this patch with your change,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,762,2021-02-15T23:11:50Z,2021-05-24T11:02:27Z,2021-05-24T11:02:38Z,MERGED,True,411,1,2,https://github.com/kierank,mlx5: Update to mlx5 v5.2,1,[],https://github.com/luigirizzo/netmap/pull/762,https://github.com/giuseppelettieri,4,https://github.com/luigirizzo/netmap/pull/762#issuecomment-787937085,,"Hi @kierank, there already is a testing infrastructure. You can run unit tests with make unitest and integration tests with make intest. ATM, however, the tests only exercise the ""software"" ports, that are guaranteed to be available. Maybe we can add a make driver-test (e.g., make mlx5-test) target for people who know that they have the hardware available and configured for testing.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,762,2021-02-15T23:11:50Z,2021-05-24T11:02:27Z,2021-05-24T11:02:38Z,MERGED,True,411,1,2,https://github.com/kierank,mlx5: Update to mlx5 v5.2,1,[],https://github.com/luigirizzo/netmap/pull/762,https://github.com/kierank,5,https://github.com/luigirizzo/netmap/pull/762#issuecomment-846448527,,I think this is ok to merge,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,762,2021-02-15T23:11:50Z,2021-05-24T11:02:27Z,2021-05-24T11:02:38Z,MERGED,True,411,1,2,https://github.com/kierank,mlx5: Update to mlx5 v5.2,1,[],https://github.com/luigirizzo/netmap/pull/762,https://github.com/giuseppelettieri,6,https://github.com/luigirizzo/netmap/pull/762#issuecomment-846965014,,"Merged, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,765,2021-02-16T20:55:44Z,2021-02-17T16:23:01Z,2021-02-17T19:09:31Z,CLOSED,False,694,70,8,https://github.com/feraralashkar,stmmac: add stmmac port,1,[],https://github.com/luigirizzo/netmap/pull/765,https://github.com/feraralashkar,1,https://github.com/luigirizzo/netmap/pull/765,"RFC


add stmmac netmap support (linux version), and


add driver patch based on linux-4.9+, and


fix compiler warning when cross building the driver with:
arm-buildroot-linux-gnueabihf-gcc (Buildroot 2019.02.2-g0b3ebc6ca5-dirty) 8.3.0","RFC


add stmmac netmap support (linux version), and


add driver patch based on linux-4.9+, and


fix compiler warning when cross building the driver with:
arm-buildroot-linux-gnueabihf-gcc (Buildroot 2019.02.2-g0b3ebc6ca5-dirty) 8.3.0",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,765,2021-02-16T20:55:44Z,2021-02-17T16:23:01Z,2021-02-17T19:09:31Z,CLOSED,False,694,70,8,https://github.com/feraralashkar,stmmac: add stmmac port,1,[],https://github.com/luigirizzo/netmap/pull/765,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/765#issuecomment-780139360,"RFC


add stmmac netmap support (linux version), and


add driver patch based on linux-4.9+, and


fix compiler warning when cross building the driver with:
arm-buildroot-linux-gnueabihf-gcc (Buildroot 2019.02.2-g0b3ebc6ca5-dirty) 8.3.0","Please remove the driver patch from the merge, I will add the auto-generated one in a later commit.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,767,2021-02-17T16:35:41Z,2021-03-18T19:10:19Z,2021-03-18T19:10:19Z,CLOSED,False,549,70,7,https://github.com/feraralashkar,stmmac: add stmmac port,1,[],https://github.com/luigirizzo/netmap/pull/767,https://github.com/feraralashkar,1,https://github.com/luigirizzo/netmap/pull/767,"RFC


add stmmac netmap support (linux version), and


fix compiler warning when cross building the driver with:
arm-buildroot-linux-gnueabihf-gcc (Buildroot 2019.02.2-g0b3ebc6ca5-dirty) 8.3.0","RFC


add stmmac netmap support (linux version), and


fix compiler warning when cross building the driver with:
arm-buildroot-linux-gnueabihf-gcc (Buildroot 2019.02.2-g0b3ebc6ca5-dirty) 8.3.0",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,770,2021-02-25T16:13:43Z,2021-02-25T19:17:48Z,2021-02-25T19:17:48Z,MERGED,True,14,14,1,https://github.com/driesdewinter,mlx5: call mlx5e_netmap_configure_rx_ring() *after* resetting wq,1,[],https://github.com/luigirizzo/netmap/pull/770,https://github.com/driesdewinter,1,https://github.com/luigirizzo/netmap/pull/770,"This fixes #764, but only for driver version 5.0.
The problem was that mlx5e_modify_rq_state() reset the work queue which messed up synchronization between the mlx5 work queue and netmap ring if it was done after mlx5e_netmap_configure_rx_ring() was already called.","This fixes #764, but only for driver version 5.0.
The problem was that mlx5e_modify_rq_state() reset the work queue which messed up synchronization between the mlx5 work queue and netmap ring if it was done after mlx5e_netmap_configure_rx_ring() was already called.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,771,2021-02-26T15:29:53Z,2021-03-01T12:59:56Z,2021-03-01T12:59:57Z,MERGED,True,14,14,1,https://github.com/JDarnley,mlx5: copy fix for RX packet loss from f14770c7 into 5.1,1,[],https://github.com/luigirizzo/netmap/pull/771,https://github.com/JDarnley,1,https://github.com/luigirizzo/netmap/pull/771,"Full commit hash f14770c
@driesdewinter Do you want to be set as the author of this patch since it is your fix?","Full commit hash f14770c
@driesdewinter Do you want to be set as the author of this patch since it is your fix?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,771,2021-02-26T15:29:53Z,2021-03-01T12:59:56Z,2021-03-01T12:59:57Z,MERGED,True,14,14,1,https://github.com/JDarnley,mlx5: copy fix for RX packet loss from f14770c7 into 5.1,1,[],https://github.com/luigirizzo/netmap/pull/771,https://github.com/driesdewinter,2,https://github.com/luigirizzo/netmap/pull/771#issuecomment-786777104,"Full commit hash f14770c
@driesdewinter Do you want to be set as the author of this patch since it is your fix?","@driesdewinter Do you want to be set as the author of this patch since it is your fix?

Thanks for offering but no, that is not needed as far as I'm concerned.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,782,2021-03-18T19:12:58Z,2021-03-21T15:26:23Z,2021-03-21T15:26:23Z,MERGED,True,539,67,7,https://github.com/feraralashkar,stmmac: add stmmac port,1,[],https://github.com/luigirizzo/netmap/pull/782,https://github.com/feraralashkar,1,https://github.com/luigirizzo/netmap/pull/782,"add stmmac netmap support (linux version), and


fix compiler warning when cross building the driver with:
arm-buildroot-linux-gnueabihf-gcc (Buildroot 2019.02.2-g0b3ebc6ca5-dirty) 8.3.0","add stmmac netmap support (linux version), and


fix compiler warning when cross building the driver with:
arm-buildroot-linux-gnueabihf-gcc (Buildroot 2019.02.2-g0b3ebc6ca5-dirty) 8.3.0",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,784,2021-03-31T12:42:04Z,2021-05-20T12:04:43Z,2021-05-20T12:05:01Z,MERGED,True,6,3,1,https://github.com/driesdewinter,mlx5: always leave one free slot in rx ring,1,[],https://github.com/luigirizzo/netmap/pull/784,https://github.com/driesdewinter,1,https://github.com/luigirizzo/netmap/pull/784,"Previously mlx5e_netmap_rxsync() could completely fill up the rx ring but
user space cannot tell the difference between empty and completely full, so
it would be considered as empty and the ring would be stuck forever.
This is now avoided by never making more than (ring size - 1) buffer slots
available for packet reception.","Previously mlx5e_netmap_rxsync() could completely fill up the rx ring but
user space cannot tell the difference between empty and completely full, so
it would be considered as empty and the ring would be stuck forever.
This is now avoided by never making more than (ring size - 1) buffer slots
available for packet reception.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,784,2021-03-31T12:42:04Z,2021-05-20T12:04:43Z,2021-05-20T12:05:01Z,MERGED,True,6,3,1,https://github.com/driesdewinter,mlx5: always leave one free slot in rx ring,1,[],https://github.com/luigirizzo/netmap/pull/784,https://github.com/kierank,2,https://github.com/luigirizzo/netmap/pull/784#issuecomment-811844905,"Previously mlx5e_netmap_rxsync() could completely fill up the rx ring but
user space cannot tell the difference between empty and completely full, so
it would be considered as empty and the ring would be stuck forever.
This is now avoided by never making more than (ring size - 1) buffer slots
available for packet reception.","@JDarnley When you have a chance can you test this on our side.
I don't think we ever reach empty/full though",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,784,2021-03-31T12:42:04Z,2021-05-20T12:04:43Z,2021-05-20T12:05:01Z,MERGED,True,6,3,1,https://github.com/driesdewinter,mlx5: always leave one free slot in rx ring,1,[],https://github.com/luigirizzo/netmap/pull/784,https://github.com/JDarnley,3,https://github.com/luigirizzo/netmap/pull/784#issuecomment-816819797,"Previously mlx5e_netmap_rxsync() could completely fill up the rx ring but
user space cannot tell the difference between empty and completely full, so
it would be considered as empty and the ring would be stuck forever.
This is now avoided by never making more than (ring size - 1) buffer slots
available for packet reception.",I've been using this commit today and I haven't seen any problems or changes in how the RX on the nic behaves.  But as we've said we probably don't reach full because we are ready to handle RX before we get any packets.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,784,2021-03-31T12:42:04Z,2021-05-20T12:04:43Z,2021-05-20T12:05:01Z,MERGED,True,6,3,1,https://github.com/driesdewinter,mlx5: always leave one free slot in rx ring,1,[],https://github.com/luigirizzo/netmap/pull/784,https://github.com/giuseppelettieri,4,https://github.com/luigirizzo/netmap/pull/784#issuecomment-817104631,"Previously mlx5e_netmap_rxsync() could completely fill up the rx ring but
user space cannot tell the difference between empty and completely full, so
it would be considered as empty and the ring would be stuck forever.
This is now avoided by never making more than (ring size - 1) buffer slots
available for packet reception.","The commit is consistent with what we do with the other drivers, so I am going to merge it if there are no objections. Thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,784,2021-03-31T12:42:04Z,2021-05-20T12:04:43Z,2021-05-20T12:05:01Z,MERGED,True,6,3,1,https://github.com/driesdewinter,mlx5: always leave one free slot in rx ring,1,[],https://github.com/luigirizzo/netmap/pull/784,https://github.com/driesdewinter,5,https://github.com/luigirizzo/netmap/pull/784#issuecomment-844906660,"Previously mlx5e_netmap_rxsync() could completely fill up the rx ring but
user space cannot tell the difference between empty and completely full, so
it would be considered as empty and the ring would be stuck forever.
This is now avoided by never making more than (ring size - 1) buffer slots
available for packet reception.","Friendly reminder: I see no objections, so it can be merged in then?",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,784,2021-03-31T12:42:04Z,2021-05-20T12:04:43Z,2021-05-20T12:05:01Z,MERGED,True,6,3,1,https://github.com/driesdewinter,mlx5: always leave one free slot in rx ring,1,[],https://github.com/luigirizzo/netmap/pull/784,https://github.com/giuseppelettieri,6,https://github.com/luigirizzo/netmap/pull/784#issuecomment-845036214,"Previously mlx5e_netmap_rxsync() could completely fill up the rx ring but
user space cannot tell the difference between empty and completely full, so
it would be considered as empty and the ring would be stuck forever.
This is now avoided by never making more than (ring size - 1) buffer slots
available for packet reception.","Yep, merged. Thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,786,2021-04-07T22:34:18Z,,2021-04-07T22:34:18Z,OPEN,False,4,0,1,https://github.com/micchie,freebsd: remove no ifnet_lock that collides CTX_LOCK in iflib_netmap_â€¦,1,[],https://github.com/luigirizzo/netmap/pull/786,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/786,â€¦register,â€¦register,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,787,2021-04-08T16:41:22Z,2022-02-06T09:57:58Z,2022-02-06T09:57:58Z,MERGED,True,1,1,1,https://github.com/micchie,freebsd: compile error,1,[],https://github.com/luigirizzo/netmap/pull/787,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/787,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,788,2021-04-11T21:27:51Z,,2021-04-11T21:27:51Z,OPEN,False,1,1,1,https://github.com/micchie,Fix FreeBSD compile error,1,[],https://github.com/luigirizzo/netmap/pull/788,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/788,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,789,2021-04-11T21:29:14Z,2022-02-06T09:58:32Z,2022-02-06T09:58:32Z,MERGED,True,1,1,1,https://github.com/micchie,fix g++ compile error,1,[],https://github.com/luigirizzo/netmap/pull/789,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/789,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,790,2021-04-12T20:21:10Z,2021-04-12T20:37:25Z,2021-04-12T20:37:25Z,CLOSED,False,7475,13,24,https://github.com/micchie,Master paste,4,[],https://github.com/luigirizzo/netmap/pull/790,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/790,Series of Paste implementation. Mainly tested in Linux 5.10 and FreeBSD 14 CURRENT.,Series of Paste implementation. Mainly tested in Linux 5.10 and FreeBSD 14 CURRENT.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,791,2021-04-12T20:38:55Z,2021-04-12T21:15:26Z,2021-04-12T21:15:26Z,CLOSED,False,7472,13,24,https://github.com/micchie,Paste patch series,4,[],https://github.com/luigirizzo/netmap/pull/791,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/791,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,792,2021-04-12T21:20:08Z,2021-04-16T12:56:35Z,2021-04-16T12:56:35Z,CLOSED,False,7476,9,23,https://github.com/micchie,Master paste,4,[],https://github.com/luigirizzo/netmap/pull/792,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/792,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,795,2021-05-20T09:17:14Z,2021-05-20T12:03:29Z,2021-05-20T12:03:38Z,MERGED,True,3,1,1,https://github.com/awelzel,lb/pkt_hash: Validate ihl field,1,[],https://github.com/luigirizzo/netmap/pull/795,https://github.com/awelzel,1,https://github.com/luigirizzo/netmap/pull/795,See #794,See #794,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,795,2021-05-20T09:17:14Z,2021-05-20T12:03:29Z,2021-05-20T12:03:38Z,MERGED,True,3,1,1,https://github.com/awelzel,lb/pkt_hash: Validate ihl field,1,[],https://github.com/luigirizzo/netmap/pull/795,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/795#issuecomment-845034885,See #794,"Merged, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,796,2021-05-22T21:56:42Z,2021-07-30T10:45:00Z,2021-07-30T10:45:01Z,MERGED,True,412,1,2,https://github.com/kierank,Update to mlx5 v5.3,1,[],https://github.com/luigirizzo/netmap/pull/796,https://github.com/kierank,1,https://github.com/luigirizzo/netmap/pull/796,,,True,{'THUMBS_UP': ['https://github.com/lin7sh']}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,798,2021-05-26T02:27:47Z,,2021-05-26T02:27:47Z,OPEN,False,3,0,1,https://github.com/sparlane,i40e: Ignore zero length packets,1,[],https://github.com/luigirizzo/netmap/pull/798,https://github.com/sparlane,1,https://github.com/luigirizzo/netmap/pull/798,"Buffers that claim to have zero length packets aren't ready yet.
See 0e626ff7ccbfc and d57c0e08c7016 in linux.","Buffers that claim to have zero length packets aren't ready yet.
See 0e626ff7ccbfc and d57c0e08c7016 in linux.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,805,2021-07-20T00:34:14Z,2021-07-30T11:35:24Z,2021-07-30T11:35:24Z,MERGED,True,6,5,3,https://github.com/oprs,fix compilation on Raspberry Pi,1,[],https://github.com/luigirizzo/netmap/pull/805,https://github.com/oprs,1,https://github.com/luigirizzo/netmap/pull/805,This fixes those 32/64-bit type mismatch errors when compiling on the Pi.,This fixes those 32/64-bit type mismatch errors when compiling on the Pi.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,808,2021-08-11T08:14:05Z,,2021-08-11T08:14:05Z,OPEN,False,19,7,1,https://github.com/Shchelk,used snprintf function instead of sprintf,1,[],https://github.com/luigirizzo/netmap/pull/808,https://github.com/Shchelk,1,https://github.com/luigirizzo/netmap/pull/808,"sprintf function is unsafe, used snprintf instead","sprintf function is unsafe, used snprintf instead",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,817,2021-09-22T14:26:36Z,2021-09-23T07:02:20Z,2021-09-23T07:02:20Z,MERGED,True,1,1,1,https://github.com/driesdewinter,Fix uint32_t overflow in pool size calculation,1,[],https://github.com/luigirizzo/netmap/pull/817,https://github.com/driesdewinter,1,https://github.com/luigirizzo/netmap/pull/817,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,818,2021-09-27T08:19:24Z,2021-09-27T14:02:12Z,2021-09-27T14:02:12Z,MERGED,True,6,4,1,https://github.com/driesdewinter,Fix assymetry in reference counter updates of memory allocator,1,[],https://github.com/luigirizzo/netmap/pull/818,https://github.com/driesdewinter,1,https://github.com/luigirizzo/netmap/pull/818,"I have the following issue:
I make use of the EXTMEM option to provide a user space managed memory region to netmap. If I open only a single file/interface, everything works fine. But if I open /dev/netmap twice, for putting two different interfaces in netmap mode, and I provide the same memory region to both files/interfaces, then the memory region is never released by netmap. After closing both file descriptors the memory remains in use.
With the extra debugging info enabled by NM_DEBUG_MEM_PUTGET, I could see that nmd->refcount was incremented twice after opening both interfaces, but after closing both file descriptors, nmd->refcount was decremented only once. Only when the last file descriptor using that memory region was released, the reference counter was decremented.
I made a fix for this issue that works for me. I'm not sure if this is the right/best way to fix the problem, perhaps I don't understand the intention of the code well enough. But anyway, it is important that the calls to netmap_mem_get() and netmap_mem_put() are symmetrical.
Thanks in advance for reviewing this change.","I have the following issue:
I make use of the EXTMEM option to provide a user space managed memory region to netmap. If I open only a single file/interface, everything works fine. But if I open /dev/netmap twice, for putting two different interfaces in netmap mode, and I provide the same memory region to both files/interfaces, then the memory region is never released by netmap. After closing both file descriptors the memory remains in use.
With the extra debugging info enabled by NM_DEBUG_MEM_PUTGET, I could see that nmd->refcount was incremented twice after opening both interfaces, but after closing both file descriptors, nmd->refcount was decremented only once. Only when the last file descriptor using that memory region was released, the reference counter was decremented.
I made a fix for this issue that works for me. I'm not sure if this is the right/best way to fix the problem, perhaps I don't understand the intention of the code well enough. But anyway, it is important that the calls to netmap_mem_get() and netmap_mem_put() are symmetrical.
Thanks in advance for reviewing this change.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,818,2021-09-27T08:19:24Z,2021-09-27T14:02:12Z,2021-09-27T14:02:12Z,MERGED,True,6,4,1,https://github.com/driesdewinter,Fix assymetry in reference counter updates of memory allocator,1,[],https://github.com/luigirizzo/netmap/pull/818,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/818#issuecomment-927904658,"I have the following issue:
I make use of the EXTMEM option to provide a user space managed memory region to netmap. If I open only a single file/interface, everything works fine. But if I open /dev/netmap twice, for putting two different interfaces in netmap mode, and I provide the same memory region to both files/interfaces, then the memory region is never released by netmap. After closing both file descriptors the memory remains in use.
With the extra debugging info enabled by NM_DEBUG_MEM_PUTGET, I could see that nmd->refcount was incremented twice after opening both interfaces, but after closing both file descriptors, nmd->refcount was decremented only once. Only when the last file descriptor using that memory region was released, the reference counter was decremented.
I made a fix for this issue that works for me. I'm not sure if this is the right/best way to fix the problem, perhaps I don't understand the intention of the code well enough. But anyway, it is important that the calls to netmap_mem_get() and netmap_mem_put() are symmetrical.
Thanks in advance for reviewing this change.","Yep, it is definitely a bug and your fix looks correct. Thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,828,2022-01-09T22:37:41Z,2022-01-10T10:24:40Z,2022-01-10T10:24:48Z,CLOSED,False,7512,11,25,https://github.com/micchie,Paste,332,[],https://github.com/luigirizzo/netmap/pull/828,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/828,"Good shape in both Linux (tested in kernel 5.11) and FreeBSD (tested in CURRENT snapshot on 06/01/22, need to add the netmap_paste.c entry in sys/conf/files).","Good shape in both Linux (tested in kernel 5.11) and FreeBSD (tested in CURRENT snapshot on 06/01/22, need to add the netmap_paste.c entry in sys/conf/files).",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,828,2022-01-09T22:37:41Z,2022-01-10T10:24:40Z,2022-01-10T10:24:48Z,CLOSED,False,7512,11,25,https://github.com/micchie,Paste,332,[],https://github.com/luigirizzo/netmap/pull/828,https://github.com/micchie,2,https://github.com/luigirizzo/netmap/pull/828#issuecomment-1008729289,"Good shape in both Linux (tested in kernel 5.11) and FreeBSD (tested in CURRENT snapshot on 06/01/22, need to add the netmap_paste.c entry in sys/conf/files).",resubmitting.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,830,2022-01-10T10:48:57Z,2022-02-02T22:38:18Z,2022-02-02T22:39:07Z,CLOSED,False,7511,11,25,https://github.com/micchie,Paste submit,2,[],https://github.com/luigirizzo/netmap/pull/830,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/830,"Good shape in both Linux (tested in kernel 5.11) and FreeBSD (tested in CURRENT snapshot on 06/01/22, need to add the netmap_paste.c entry in sys/conf/files). The first commit (nm_os_ifnet_lock removal) is irrelevant to paste.","Good shape in both Linux (tested in kernel 5.11) and FreeBSD (tested in CURRENT snapshot on 06/01/22, need to add the netmap_paste.c entry in sys/conf/files). The first commit (nm_os_ifnet_lock removal) is irrelevant to paste.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,830,2022-01-10T10:48:57Z,2022-02-02T22:38:18Z,2022-02-02T22:39:07Z,CLOSED,False,7511,11,25,https://github.com/micchie,Paste submit,2,[],https://github.com/luigirizzo/netmap/pull/830,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/830#issuecomment-1009800018,"Good shape in both Linux (tested in kernel 5.11) and FreeBSD (tested in CURRENT snapshot on 06/01/22, need to add the netmap_paste.c entry in sys/conf/files). The first commit (nm_os_ifnet_lock removal) is irrelevant to paste.","I see that there are some small fixes mixed with the paste code. I'd rather merge those separately (I'll add a comment to them in the ""Files changed"" section). Moreover, I'd feel safer if the changes to core files were protected with 'WITH_PASTE', so that nothing is changed when paste is not compiled in.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,830,2022-01-10T10:48:57Z,2022-02-02T22:38:18Z,2022-02-02T22:39:07Z,CLOSED,False,7511,11,25,https://github.com/micchie,Paste submit,2,[],https://github.com/luigirizzo/netmap/pull/830,https://github.com/micchie,3,https://github.com/luigirizzo/netmap/pull/830#issuecomment-1009802752,"Good shape in both Linux (tested in kernel 5.11) and FreeBSD (tested in CURRENT snapshot on 06/01/22, need to add the netmap_paste.c entry in sys/conf/files). The first commit (nm_os_ifnet_lock removal) is irrelevant to paste.","Thanks! I will split the commits and resubmit the merge request.

Cheers,
- Michio
â€¦
On Tue, 11 Jan 2022 at 10:13, Giuseppe Lettieri ***@***.***> wrote:
 I see that there are some small fixes mixed with the paste code. I'd
 rather merge those separately (I'll add a comment to them in the ""Files
 changed"" section). Moreover, I'd feel safer if the changes to core files
 were protected with 'WITH_PASTE', so that nothing is changed when paste is
 not compiled in.

 â€”
 Reply to this email directly, view it on GitHub
 <#830 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAR4VJTVFYVLOOMG2WNA3HLUVP7DHANCNFSM5LTKPFCQ>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.

 You are receiving this because you authored the thread.Message ID:
 ***@***.***>",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,832,2022-01-25T00:05:19Z,,2022-01-25T08:53:05Z,OPEN,False,774,15,11,https://github.com/semihalf-maslanka-marek,mvneta: Add support for mvneta driver ,4,[],https://github.com/luigirizzo/netmap/pull/832,https://github.com/semihalf-maslanka-marek,1,https://github.com/luigirizzo/netmap/pull/832,Add support for Marvell NETA network card for Armada 37xx/38x/370/XP SoCs,Add support for Marvell NETA network card for Armada 37xx/38x/370/XP SoCs,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,833,2022-02-02T22:41:53Z,2022-02-02T23:41:55Z,2022-02-02T23:41:55Z,CLOSED,False,7504,11,25,https://github.com/micchie,paste: FreeBSD and Linux implementation and man page,1,[],https://github.com/luigirizzo/netmap/pull/833,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/833,"FreeBSD needs ""dev/netmap/netmap_paste.c       optional netmap"" in src/sys/conf/files.","FreeBSD needs ""dev/netmap/netmap_paste.c       optional netmap"" in src/sys/conf/files.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,834,2022-02-03T01:12:13Z,2022-02-06T01:04:59Z,2022-02-06T01:04:59Z,CLOSED,False,7502,11,25,https://github.com/micchie,paste: FreeBSD and Linux implementation and man page,1,[],https://github.com/luigirizzo/netmap/pull/834,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/834,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,834,2022-02-03T01:12:13Z,2022-02-06T01:04:59Z,2022-02-06T01:04:59Z,CLOSED,False,7502,11,25,https://github.com/micchie,paste: FreeBSD and Linux implementation and man page,1,[],https://github.com/luigirizzo/netmap/pull/834,https://github.com/micchie,2,https://github.com/luigirizzo/netmap/pull/834#issuecomment-1030725505,,resubmitting.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,836,2022-02-05T16:36:50Z,2022-02-05T21:15:54Z,2022-02-05T21:15:54Z,MERGED,True,5,5,1,https://github.com/michaellrowley,Formatting-error fix.,2,[],https://github.com/luigirizzo/netmap/pull/836,https://github.com/michaellrowley,1,https://github.com/luigirizzo/netmap/pull/836,"The bug being fixed here is unlikely to have been exploited.
https://www.huntr.dev/bounties/41e1ac4e-fe08-4731-811e-1808bde0686d/","The bug being fixed here is unlikely to have been exploited.
https://www.huntr.dev/bounties/41e1ac4e-fe08-4731-811e-1808bde0686d/",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,837,2022-02-06T01:09:13Z,,2022-02-07T00:53:56Z,OPEN,False,7481,11,25,https://github.com/micchie,paste: FreeBSD and Linux implementation and man page,2,[],https://github.com/luigirizzo/netmap/pull/837,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/837,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,837,2022-02-06T01:09:13Z,,2022-02-07T00:53:56Z,OPEN,False,7481,11,25,https://github.com/micchie,paste: FreeBSD and Linux implementation and man page,2,[],https://github.com/luigirizzo/netmap/pull/837,https://github.com/micchie,2,https://github.com/luigirizzo/netmap/pull/837#issuecomment-1030963660,,"All the comments are fixed. To compile in Linux (5.15), please apply #838 first.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,838,2022-02-06T23:10:28Z,2022-02-07T08:25:40Z,2022-02-07T08:25:40Z,MERGED,True,12,0,2,https://github.com/micchie,linux: FOLL_SPLIT is removed in 5.15.,1,[],https://github.com/luigirizzo/netmap/pull/838,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/838,https://patchwork.kernel.org/project/linux-mm/patch/20210430055556.xcmsU3Fo2%25akpm@linux-foundation.org/,https://patchwork.kernel.org/project/linux-mm/patch/20210430055556.xcmsU3Fo2%25akpm@linux-foundation.org/,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,839,2022-02-10T20:47:06Z,2022-02-11T07:45:02Z,2022-02-11T07:45:02Z,MERGED,True,1,1,1,https://github.com/badagent,Fixes ERROR: modpost errors when running make install on Debian Bullseye,1,[],https://github.com/luigirizzo/netmap/pull/839,https://github.com/badagent,1,https://github.com/luigirizzo/netmap/pull/839,Similar to closed issue #816 but this time errors occurred when running make install.,Similar to closed issue #816 but this time errors occurred when running make install.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,839,2022-02-10T20:47:06Z,2022-02-11T07:45:02Z,2022-02-11T07:45:02Z,MERGED,True,1,1,1,https://github.com/badagent,Fixes ERROR: modpost errors when running make install on Debian Bullseye,1,[],https://github.com/luigirizzo/netmap/pull/839,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/839#issuecomment-1035951015,Similar to closed issue #816 but this time errors occurred when running make install.,Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,840,2022-02-15T17:43:04Z,2022-02-19T19:07:55Z,2022-02-19T19:07:55Z,MERGED,True,1,1,1,https://github.com/ocochard,Fix variable 'err' usage and compilation,1,[],https://github.com/luigirizzo/netmap/pull/840,https://github.com/ocochard,1,https://github.com/luigirizzo/netmap/pull/840,"Fix compilation and correct usage of the err variable:
nmreplay.c:1105:13: error: variable 'err' set but not used [-Werror,-Wunused-but-set-variable]
int ch, i, err=0;","Fix compilation and correct usage of the err variable:
nmreplay.c:1105:13: error: variable 'err' set but not used [-Werror,-Wunused-but-set-variable]
int ch, i, err=0;",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,840,2022-02-15T17:43:04Z,2022-02-19T19:07:55Z,2022-02-19T19:07:55Z,MERGED,True,1,1,1,https://github.com/ocochard,Fix variable 'err' usage and compilation,1,[],https://github.com/luigirizzo/netmap/pull/840,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/840#issuecomment-1046085377,"Fix compilation and correct usage of the err variable:
nmreplay.c:1105:13: error: variable 'err' set but not used [-Werror,-Wunused-but-set-variable]
int ch, i, err=0;",Thanks!,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,841,2022-02-17T10:58:10Z,2022-02-21T07:51:01Z,2022-02-21T07:51:01Z,MERGED,True,800,2,4,None,Now netmap supports intel ice nic driver,2,[],https://github.com/luigirizzo/netmap/pull/841,None,1,https://github.com/luigirizzo/netmap/pull/841,I have added netmap supports intel ice nic driver,I have added netmap supports intel ice nic driver,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,841,2022-02-17T10:58:10Z,2022-02-21T07:51:01Z,2022-02-21T07:51:01Z,MERGED,True,800,2,4,None,Now netmap supports intel ice nic driver,2,[],https://github.com/luigirizzo/netmap/pull/841,https://github.com/giuseppelettieri,2,https://github.com/luigirizzo/netmap/pull/841#issuecomment-1046080030,I have added netmap supports intel ice nic driver,"Nice, thanks. I don't have the hardware to test this, but a new driver is always welcome. There are a few compilation-related things that needs to be fixed, though. I'll add comments below the relevant lines.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,841,2022-02-17T10:58:10Z,2022-02-21T07:51:01Z,2022-02-21T07:51:01Z,MERGED,True,800,2,4,None,Now netmap supports intel ice nic driver,2,[],https://github.com/luigirizzo/netmap/pull/841,https://github.com/giuseppelettieri,3,https://github.com/luigirizzo/netmap/pull/841#issuecomment-1046565896,I have added netmap supports intel ice nic driver,"Good, thanks!",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,842,2022-03-07T04:09:05Z,2022-03-07T04:09:23Z,2022-03-07T04:11:35Z,CLOSED,False,2519,16,33,https://github.com/sparlane,Fix ipt netmap build,46,[],https://github.com/luigirizzo/netmap/pull/842,https://github.com/sparlane,1,https://github.com/luigirizzo/netmap/pull/842,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,843,2022-03-07T20:43:07Z,,2022-03-07T21:59:05Z,OPEN,False,0,0,2,https://github.com/sparlane,linux: i40e patch for v5.15.5,1,[],https://github.com/luigirizzo/netmap/pull/843,https://github.com/sparlane,1,https://github.com/luigirizzo/netmap/pull/843,The change in v5.16 that requires this newer patch is also in v5.15.5,The change in v5.16 that requires this newer patch is also in v5.15.5,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,846,2022-04-02T16:10:08Z,2022-04-03T07:24:30Z,2022-04-03T07:24:30Z,MERGED,True,2,2,2,https://github.com/micchie,linux: fix compile errors,1,[],https://github.com/luigirizzo/netmap/pull/846,https://github.com/micchie,1,https://github.com/luigirizzo/netmap/pull/846,,,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,848,2022-04-18T08:02:48Z,2022-04-25T09:42:21Z,2022-04-25T09:42:21Z,MERGED,True,8,4,1,https://github.com/kogdenko,linux/veth: fix kernel oops,1,[],https://github.com/luigirizzo/netmap/pull/848,https://github.com/kogdenko,1,https://github.com/luigirizzo/netmap/pull/848,"Check peer_ref before incrementing/decrementig na_refcount.
Oops can be reproduced with pkt-gen:
ip l a dev vetha type veth peer name vethb
./build-apps/pkt-gen/pkt-gen -f rx -i vetha &
sleep 1
./build-apps/pkt-gen/pkt-gen -f rx -i vethb^ &
sleep 1
./build-apps/pkt-gen/pkt-gen -f rx -i vethb-0 &
sleep 1
killall pkt-gen
./build-apps/pkt-gen/pkt-gen -f rx -i vetha
There is two calls of nm_register for interface vethb.
First one on creating host-ring vethb^ and the second on vethb-0.
If we do not check peer_ref then we would dereferencing peer twice.","Check peer_ref before incrementing/decrementig na_refcount.
Oops can be reproduced with pkt-gen:
ip l a dev vetha type veth peer name vethb
./build-apps/pkt-gen/pkt-gen -f rx -i vetha &
sleep 1
./build-apps/pkt-gen/pkt-gen -f rx -i vethb^ &
sleep 1
./build-apps/pkt-gen/pkt-gen -f rx -i vethb-0 &
sleep 1
killall pkt-gen
./build-apps/pkt-gen/pkt-gen -f rx -i vetha
There is two calls of nm_register for interface vethb.
First one on creating host-ring vethb^ and the second on vethb-0.
If we do not check peer_ref then we would dereferencing peer twice.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,853,2022-05-17T17:57:34Z,,2022-05-18T15:00:05Z,OPEN,False,17,0,1,https://github.com/steven-chien,Swap the src and dst IPv4 address in the pong msg,3,[],https://github.com/luigirizzo/netmap/pull/853,https://github.com/steven-chien,1,https://github.com/luigirizzo/netmap/pull/853,The current pkt-gen tool only flips the source and destination MAC address without flipping the IP addresses. This becomes problematic when working with links with NAT or hops in between. The PR flips the IPv4 address in a pong response.,The current pkt-gen tool only flips the source and destination MAC address without flipping the IP addresses. This becomes problematic when working with links with NAT or hops in between. The PR flips the IPv4 address in a pong response.,True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,853,2022-05-17T17:57:34Z,,2022-05-18T15:00:05Z,OPEN,False,17,0,1,https://github.com/steven-chien,Swap the src and dst IPv4 address in the pong msg,3,[],https://github.com/luigirizzo/netmap/pull/853,https://github.com/jhk098,2,https://github.com/luigirizzo/netmap/pull/853#issuecomment-1129701167,The current pkt-gen tool only flips the source and destination MAC address without flipping the IP addresses. This becomes problematic when working with links with NAT or hops in between. The PR flips the IPv4 address in a pong response.,"I would at least check that ethertype is 0x8000, and make the swap only in that case.",True,{}
luigirizzo/netmap,https://github.com/luigirizzo/netmap,853,2022-05-17T17:57:34Z,,2022-05-18T15:00:05Z,OPEN,False,17,0,1,https://github.com/steven-chien,Swap the src and dst IPv4 address in the pong msg,3,[],https://github.com/luigirizzo/netmap/pull/853,https://github.com/steven-chien,3,https://github.com/luigirizzo/netmap/pull/853#issuecomment-1129917683,The current pkt-gen tool only flips the source and destination MAC address without flipping the IP addresses. This becomes problematic when working with links with NAT or hops in between. The PR flips the IPv4 address in a pong response.,"Added a check on the ethertype, and also added a warning message that IPv6 is not fully supported in ping-pong since there are no IP options for the timestamp.",True,{}
